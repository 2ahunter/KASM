
KASM_HRTIM_Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0000dbc8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  0800de68  0800de68  0000ee68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e400  0800e400  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e408  0800e408  0000f408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e40c  0800e40c  0000f40c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e8  24000000  0800e410  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003530  240001e8  0800e5f8  000101e8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24003718  0800e5f8  00010718  2**0
=======
  1 .text         0000fa80  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  0800fd20  0800fd20  00010d20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080102a0  080102a0  000112a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080102a8  080102a8  000112a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080102ac  080102ac  000112ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e0  24000000  080102b0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002654  240001e0  08010490  000121e0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24002834  08010490  00012834  2**0
>>>>>>> main
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000101e8  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 10 .debug_info   00019b42  00000000  00000000  00010216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c99  00000000  00000000  00029d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001898  00000000  00000000  0002c9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001319  00000000  00000000  0002e290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d2b8  00000000  00000000  0002f5a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019a1b  00000000  00000000  0006c861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018a368  00000000  00000000  0008627c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002105e4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007950  00000000  00000000  00210628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  00217f78  2**0
=======
 10 .debug_info   0001d016  00000000  00000000  0001220e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e20  00000000  00000000  0002f224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017b0  00000000  00000000  00032048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012af  00000000  00000000  000337f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a430  00000000  00000000  00034aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001df6a  00000000  00000000  0006eed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d820  00000000  00000000  0008ce41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020a661  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000076a4  00000000  00000000  0020a6a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004e  00000000  00000000  00211d48  2**0
>>>>>>> main
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80002c0:	0800de50 	.word	0x0800de50
=======
 80002c0:	0800fd08 	.word	0x0800fd08
>>>>>>> main

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	0800de50 	.word	0x0800de50
=======
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800fd08 	.word	0x0800fd08
>>>>>>> main

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

<<<<<<< HEAD
08000390 <__NVIC_GetPriorityGrouping>:
=======
08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000684:	f001 fe96 	bl	80023b4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000688:	f002 fd96 	bl	80031b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068c:	f000 f98c 	bl	80009a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f001 f9d6 	bl	8001a40 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000694:	f000 fc3a 	bl	8000f0c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000698:	f000 fd08 	bl	80010ac <MX_TIM2_Init>
  MX_TIM4_Init();
 800069c:	f000 fd7c 	bl	8001198 <MX_TIM4_Init>
  MX_TIM5_Init();
 80006a0:	f000 fe12 	bl	80012c8 <MX_TIM5_Init>
  MX_TIM8_Init();
 80006a4:	f000 fe92 	bl	80013cc <MX_TIM8_Init>
  MX_TIM12_Init();
 80006a8:	f000 ff3a 	bl	8001520 <MX_TIM12_Init>
  MX_TIM13_Init();
 80006ac:	f000 ffb0 	bl	8001610 <MX_TIM13_Init>
  MX_TIM14_Init();
 80006b0:	f000 fffc 	bl	80016ac <MX_TIM14_Init>
  MX_TIM15_Init();
 80006b4:	f001 f848 	bl	8001748 <MX_TIM15_Init>
  MX_TIM16_Init();
 80006b8:	f001 f8f6 	bl	80018a8 <MX_TIM16_Init>
  MX_HRTIM_Init();
 80006bc:	f000 fa22 	bl	8000b04 <MX_HRTIM_Init>
  MX_LPTIM1_Init();
 80006c0:	f000 fbf6 	bl	8000eb0 <MX_LPTIM1_Init>
  MX_UART4_Init();
 80006c4:	f001 f96a 	bl	800199c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */


  //Timer 1
  HAL_TIM_Base_Start_IT(&htim1);
 80006c8:	4896      	ldr	r0, [pc, #600]	@ (8000924 <main+0x2a4>)
 80006ca:	f008 faab 	bl	8008c24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);    //Starts the PWM on each of the desired channels
 80006ce:	2100      	movs	r1, #0
 80006d0:	4894      	ldr	r0, [pc, #592]	@ (8000924 <main+0x2a4>)
 80006d2:	f008 fb81 	bl	8008dd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80006d6:	2104      	movs	r1, #4
 80006d8:	4892      	ldr	r0, [pc, #584]	@ (8000924 <main+0x2a4>)
 80006da:	f008 fb7d 	bl	8008dd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80006de:	2108      	movs	r1, #8
 80006e0:	4890      	ldr	r0, [pc, #576]	@ (8000924 <main+0x2a4>)
 80006e2:	f008 fb79 	bl	8008dd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80006e6:	210c      	movs	r1, #12
 80006e8:	488e      	ldr	r0, [pc, #568]	@ (8000924 <main+0x2a4>)
 80006ea:	f008 fb75 	bl	8008dd8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, GPIO_PIN_SET);   //Sets the pin to 1
 80006ee:	2201      	movs	r2, #1
 80006f0:	2101      	movs	r1, #1
 80006f2:	488d      	ldr	r0, [pc, #564]	@ (8000928 <main+0x2a8>)
 80006f4:	f003 fe9a 	bl	800442c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2102      	movs	r1, #2
 80006fc:	488a      	ldr	r0, [pc, #552]	@ (8000928 <main+0x2a8>)
 80006fe:	f003 fe95 	bl	800442c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	2104      	movs	r1, #4
 8000706:	4888      	ldr	r0, [pc, #544]	@ (8000928 <main+0x2a8>)
 8000708:	f003 fe90 	bl	800442c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	2108      	movs	r1, #8
 8000710:	4885      	ldr	r0, [pc, #532]	@ (8000928 <main+0x2a8>)
 8000712:	f003 fe8b 	bl	800442c <HAL_GPIO_WritePin>
  			 *
  			 */
  //End Timer 1

  //Timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 8000716:	4885      	ldr	r0, [pc, #532]	@ (800092c <main+0x2ac>)
 8000718:	f008 fa84 	bl	8008c24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800071c:	2100      	movs	r1, #0
 800071e:	4883      	ldr	r0, [pc, #524]	@ (800092c <main+0x2ac>)
 8000720:	f008 fb5a 	bl	8008dd8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM2_CH1_PH_GPIO_Port, TIM2_CH1_PH_Pin, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	2110      	movs	r1, #16
 8000728:	487f      	ldr	r0, [pc, #508]	@ (8000928 <main+0x2a8>)
 800072a:	f003 fe7f 	bl	800442c <HAL_GPIO_WritePin>
    		 *
    		 */
  //End Timer 2

  //Timer 4
  HAL_TIM_Base_Start_IT(&htim4);
 800072e:	4880      	ldr	r0, [pc, #512]	@ (8000930 <main+0x2b0>)
 8000730:	f008 fa78 	bl	8008c24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000734:	2100      	movs	r1, #0
 8000736:	487e      	ldr	r0, [pc, #504]	@ (8000930 <main+0x2b0>)
 8000738:	f008 fb4e 	bl	8008dd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800073c:	2104      	movs	r1, #4
 800073e:	487c      	ldr	r0, [pc, #496]	@ (8000930 <main+0x2b0>)
 8000740:	f008 fb4a 	bl	8008dd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000744:	2108      	movs	r1, #8
 8000746:	487a      	ldr	r0, [pc, #488]	@ (8000930 <main+0x2b0>)
 8000748:	f008 fb46 	bl	8008dd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800074c:	210c      	movs	r1, #12
 800074e:	4878      	ldr	r0, [pc, #480]	@ (8000930 <main+0x2b0>)
 8000750:	f008 fb42 	bl	8008dd8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM4_CH1_PH_GPIO_Port, TIM4_CH1_PH_Pin, GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800075a:	4876      	ldr	r0, [pc, #472]	@ (8000934 <main+0x2b4>)
 800075c:	f003 fe66 	bl	800442c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH2_PH_GPIO_Port, TIM4_CH2_PH_Pin, GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000766:	4873      	ldr	r0, [pc, #460]	@ (8000934 <main+0x2b4>)
 8000768:	f003 fe60 	bl	800442c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH3_PH_GPIO_Port, TIM4_CH3_PH_Pin, GPIO_PIN_SET);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000772:	4871      	ldr	r0, [pc, #452]	@ (8000938 <main+0x2b8>)
 8000774:	f003 fe5a 	bl	800442c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH4_PH_GPIO_Port, TIM4_CH4_PH_Pin, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800077e:	486e      	ldr	r0, [pc, #440]	@ (8000938 <main+0x2b8>)
 8000780:	f003 fe54 	bl	800442c <HAL_GPIO_WritePin>
      		   *
      		   */
  //End Timer 4

  //Timer 5
  HAL_TIM_Base_Start_IT(&htim5);
 8000784:	486d      	ldr	r0, [pc, #436]	@ (800093c <main+0x2bc>)
 8000786:	f008 fa4d 	bl	8008c24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800078a:	2104      	movs	r1, #4
 800078c:	486b      	ldr	r0, [pc, #428]	@ (800093c <main+0x2bc>)
 800078e:	f008 fb23 	bl	8008dd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8000792:	2108      	movs	r1, #8
 8000794:	4869      	ldr	r0, [pc, #420]	@ (800093c <main+0x2bc>)
 8000796:	f008 fb1f 	bl	8008dd8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM5_CH2_PH_GPIO_Port, TIM5_CH2_PH_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007a0:	4865      	ldr	r0, [pc, #404]	@ (8000938 <main+0x2b8>)
 80007a2:	f003 fe43 	bl	800442c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM5_CH3_PH_GPIO_Port, TIM5_CH3_PH_Pin, GPIO_PIN_SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ac:	4862      	ldr	r0, [pc, #392]	@ (8000938 <main+0x2b8>)
 80007ae:	f003 fe3d 	bl	800442c <HAL_GPIO_WritePin>
        	   *
        	   */
  //End Timer 5

  //Timer 8
  HAL_TIM_Base_Start_IT(&htim8);
 80007b2:	4863      	ldr	r0, [pc, #396]	@ (8000940 <main+0x2c0>)
 80007b4:	f008 fa36 	bl	8008c24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80007b8:	210c      	movs	r1, #12
 80007ba:	4861      	ldr	r0, [pc, #388]	@ (8000940 <main+0x2c0>)
 80007bc:	f008 fb0c 	bl	8008dd8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM8_CH4_PH_GPIO_Port, TIM8_CH4_PH_Pin, GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	2180      	movs	r1, #128	@ 0x80
 80007c4:	4858      	ldr	r0, [pc, #352]	@ (8000928 <main+0x2a8>)
 80007c6:	f003 fe31 	bl	800442c <HAL_GPIO_WritePin>
        	   *
        	   */
  //End Timer 8

  //Timer 12
  HAL_TIM_Base_Start_IT(&htim12);
 80007ca:	485e      	ldr	r0, [pc, #376]	@ (8000944 <main+0x2c4>)
 80007cc:	f008 fa2a 	bl	8008c24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 80007d0:	2104      	movs	r1, #4
 80007d2:	485c      	ldr	r0, [pc, #368]	@ (8000944 <main+0x2c4>)
 80007d4:	f008 fb00 	bl	8008dd8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM12_CH2_PH_GPIO_Port, TIM12_CH2_PH_Pin, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007de:	4852      	ldr	r0, [pc, #328]	@ (8000928 <main+0x2a8>)
 80007e0:	f003 fe24 	bl	800442c <HAL_GPIO_WritePin>
         	   *
         	   */
  //End Timer 12

  //Timer 13
  HAL_TIM_Base_Start_IT(&htim13);
 80007e4:	4858      	ldr	r0, [pc, #352]	@ (8000948 <main+0x2c8>)
 80007e6:	f008 fa1d 	bl	8008c24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80007ea:	2100      	movs	r1, #0
 80007ec:	4856      	ldr	r0, [pc, #344]	@ (8000948 <main+0x2c8>)
 80007ee:	f008 faf3 	bl	8008dd8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM13_CH1_PH_GPIO_Port, TIM13_CH1_PH_Pin, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007f8:	484b      	ldr	r0, [pc, #300]	@ (8000928 <main+0x2a8>)
 80007fa:	f003 fe17 	bl	800442c <HAL_GPIO_WritePin>
           	   *
           	   */
  //End Timer 13

  //Timer 14
  HAL_TIM_Base_Start_IT(&htim14);
 80007fe:	4853      	ldr	r0, [pc, #332]	@ (800094c <main+0x2cc>)
 8000800:	f008 fa10 	bl	8008c24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000804:	2100      	movs	r1, #0
 8000806:	4851      	ldr	r0, [pc, #324]	@ (800094c <main+0x2cc>)
 8000808:	f008 fae6 	bl	8008dd8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM14_CH1_PH_GPIO_Port, TIM14_CH1_PH_Pin, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000812:	4845      	ldr	r0, [pc, #276]	@ (8000928 <main+0x2a8>)
 8000814:	f003 fe0a 	bl	800442c <HAL_GPIO_WritePin>
           	   *
           	   */
  //End Timer 14

  //Timer 15
  HAL_TIM_Base_Start_IT(&htim15);
 8000818:	484d      	ldr	r0, [pc, #308]	@ (8000950 <main+0x2d0>)
 800081a:	f008 fa03 	bl	8008c24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800081e:	2100      	movs	r1, #0
 8000820:	484b      	ldr	r0, [pc, #300]	@ (8000950 <main+0x2d0>)
 8000822:	f008 fad9 	bl	8008dd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000826:	2104      	movs	r1, #4
 8000828:	4849      	ldr	r0, [pc, #292]	@ (8000950 <main+0x2d0>)
 800082a:	f008 fad5 	bl	8008dd8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM15_CH1_PH_GPIO_Port, TIM15_CH1_PH_Pin, GPIO_PIN_SET);
 800082e:	2201      	movs	r2, #1
 8000830:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000834:	483c      	ldr	r0, [pc, #240]	@ (8000928 <main+0x2a8>)
 8000836:	f003 fdf9 	bl	800442c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM15_CH2_PH_GPIO_Port, TIM15_CH2_PH_Pin, GPIO_PIN_SET);
 800083a:	2201      	movs	r2, #1
 800083c:	2101      	movs	r1, #1
 800083e:	4845      	ldr	r0, [pc, #276]	@ (8000954 <main+0x2d4>)
 8000840:	f003 fdf4 	bl	800442c <HAL_GPIO_WritePin>
           	   *
           	   */
  //End Timer 15

  //Timer 16
  HAL_TIM_Base_Start_IT(&htim16);
 8000844:	4844      	ldr	r0, [pc, #272]	@ (8000958 <main+0x2d8>)
 8000846:	f008 f9ed 	bl	8008c24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800084a:	2100      	movs	r1, #0
 800084c:	4842      	ldr	r0, [pc, #264]	@ (8000958 <main+0x2d8>)
 800084e:	f008 fac3 	bl	8008dd8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM16_CH1_PH_GPIO_Port, TIM16_CH1_PH_Pin, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2102      	movs	r1, #2
 8000856:	483f      	ldr	r0, [pc, #252]	@ (8000954 <main+0x2d4>)
 8000858:	f003 fde8 	bl	800442c <HAL_GPIO_WritePin>
               */
  //End Timer 16

  //HRTIM CODE GOES HERE *******
     // Enable output
     HRTIM1->sCommonRegs.OENR = HRTIM_OENR_TA1OEN + HRTIM_OENR_TA2OEN +
 800085c:	4b3f      	ldr	r3, [pc, #252]	@ (800095c <main+0x2dc>)
 800085e:	22ff      	movs	r2, #255	@ 0xff
 8000860:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
     	 	HRTIM_OENR_TB1OEN + HRTIM_OENR_TB2OEN + HRTIM_OENR_TC1OEN + HRTIM_OENR_TC2OEN + HRTIM_OENR_TD1OEN + HRTIM_OENR_TD2OEN;
     //Start Timer
     HRTIM1->sMasterRegs.MCR = HRTIM_MCR_TACEN + HRTIM_MCR_TBCEN + HRTIM_MCR_TCCEN + HRTIM_MCR_TDCEN;
 8000864:	4b3d      	ldr	r3, [pc, #244]	@ (800095c <main+0x2dc>)
 8000866:	f44f 12f0 	mov.w	r2, #1966080	@ 0x1e0000
 800086a:	601a      	str	r2, [r3, #0]
              *
              */
  //END HRTIM CODE

  //Low-Power Timer
     HAL_LPTIM_Counter_Start_IT(&hlptim1, LPTIM_ARR_ARR);
 800086c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000870:	483b      	ldr	r0, [pc, #236]	@ (8000960 <main+0x2e0>)
 8000872:	f004 ffda 	bl	800582a <HAL_LPTIM_Counter_Start_IT>
     HAL_LPTIM_PWM_Start(&hlptim1, LPTIM_ARR_ARR, LPTIM_CMP_CMP);
 8000876:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800087a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800087e:	4838      	ldr	r0, [pc, #224]	@ (8000960 <main+0x2e0>)
 8000880:	f004 ff86 	bl	8005790 <HAL_LPTIM_PWM_Start>
     HAL_GPIO_WritePin(LPTIM1_OUT_PH_GPIO_Port, LPTIM1_OUT_PH_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2104      	movs	r1, #4
 8000888:	4832      	ldr	r0, [pc, #200]	@ (8000954 <main+0x2d4>)
 800088a:	f003 fdcf 	bl	800442c <HAL_GPIO_WritePin>
       	LPTIM1->ARR = (12000-1);
 800088e:	4b35      	ldr	r3, [pc, #212]	@ (8000964 <main+0x2e4>)
 8000890:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8000894:	619a      	str	r2, [r3, #24]
       	    //End UART Transmit
       	     */
  //End Low Power Timer

       	    //Timer Synchronization
       	    TIM1->CNT = 0;
 8000896:	4b34      	ldr	r3, [pc, #208]	@ (8000968 <main+0x2e8>)
 8000898:	2200      	movs	r2, #0
 800089a:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM2->CNT = 0;
 800089c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008a0:	2200      	movs	r2, #0
 80008a2:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM4->CNT = 0;
 80008a4:	4b31      	ldr	r3, [pc, #196]	@ (800096c <main+0x2ec>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM5->CNT = 0;
 80008aa:	4b31      	ldr	r3, [pc, #196]	@ (8000970 <main+0x2f0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM8->CNT = 0;
 80008b0:	4b30      	ldr	r3, [pc, #192]	@ (8000974 <main+0x2f4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM12->CNT = 0;
 80008b6:	4b30      	ldr	r3, [pc, #192]	@ (8000978 <main+0x2f8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM13->CNT = 0;
 80008bc:	4b2f      	ldr	r3, [pc, #188]	@ (800097c <main+0x2fc>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM14->CNT = 0;
 80008c2:	4b2f      	ldr	r3, [pc, #188]	@ (8000980 <main+0x300>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM15->CNT = 0;
 80008c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000984 <main+0x304>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM16->CNT = 0;
 80008ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000988 <main+0x308>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	@ 0x24
       	    LPTIM1->CNT = 0;
 80008d4:	4b23      	ldr	r3, [pc, #140]	@ (8000964 <main+0x2e4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]

   gen_sine();
 80008da:	f001 fd35 	bl	8002348 <gen_sine>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   init_buffer(rxp);
 80008de:	4b2b      	ldr	r3, [pc, #172]	@ (800098c <main+0x30c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 fa6f 	bl	8001dc6 <init_buffer>
   HAL_UART_Receive_IT(&huart4, rx_buff, sizeof(rx_buff));
 80008e8:	2201      	movs	r2, #1
 80008ea:	4929      	ldr	r1, [pc, #164]	@ (8000990 <main+0x310>)
 80008ec:	4829      	ldr	r0, [pc, #164]	@ (8000994 <main+0x314>)
 80008ee:	f009 fd05 	bl	800a2fc <HAL_UART_Receive_IT>

  while (1)
  {
	  if(ctrl_tmr_expired == TRUE) control_update(ref); 	//Sets flag for timer inturrupt
 80008f2:	4b29      	ldr	r3, [pc, #164]	@ (8000998 <main+0x318>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d106      	bne.n	8000908 <main+0x288>
 80008fa:	4b28      	ldr	r3, [pc, #160]	@ (800099c <main+0x31c>)
 80008fc:	ed93 7b00 	vldr	d7, [r3]
 8000900:	eeb0 0b47 	vmov.f64	d0, d7
 8000904:	f001 fb2c 	bl	8001f60 <control_update>
	  if(data_ready == TRUE) UART_update(); 	//Sets flag when a message is received
 8000908:	4b25      	ldr	r3, [pc, #148]	@ (80009a0 <main+0x320>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d101      	bne.n	8000914 <main+0x294>
 8000910:	f001 f9c6 	bl	8001ca0 <UART_update>
	  if(cmd_ready == TRUE) command_update(); 	//Sets flag once message is ready to send
 8000914:	4b23      	ldr	r3, [pc, #140]	@ (80009a4 <main+0x324>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d1ea      	bne.n	80008f2 <main+0x272>
 800091c:	f001 f9f8 	bl	8001d10 <command_update>
	  if(ctrl_tmr_expired == TRUE) control_update(ref); 	//Sets flag for timer inturrupt
 8000920:	e7e7      	b.n	80008f2 <main+0x272>
 8000922:	bf00      	nop
 8000924:	24000310 	.word	0x24000310
 8000928:	58021000 	.word	0x58021000
 800092c:	2400035c 	.word	0x2400035c
 8000930:	240003a8 	.word	0x240003a8
 8000934:	58020400 	.word	0x58020400
 8000938:	58020800 	.word	0x58020800
 800093c:	240003f4 	.word	0x240003f4
 8000940:	24000440 	.word	0x24000440
 8000944:	2400048c 	.word	0x2400048c
 8000948:	240004d8 	.word	0x240004d8
 800094c:	24000524 	.word	0x24000524
 8000950:	24000570 	.word	0x24000570
 8000954:	58020c00 	.word	0x58020c00
 8000958:	240005bc 	.word	0x240005bc
 800095c:	40017400 	.word	0x40017400
 8000960:	240002d8 	.word	0x240002d8
 8000964:	40002400 	.word	0x40002400
 8000968:	40010000 	.word	0x40010000
 800096c:	40000800 	.word	0x40000800
 8000970:	40000c00 	.word	0x40000c00
 8000974:	40010400 	.word	0x40010400
 8000978:	40001800 	.word	0x40001800
 800097c:	40001c00 	.word	0x40001c00
 8000980:	40002000 	.word	0x40002000
 8000984:	40014000 	.word	0x40014000
 8000988:	40014400 	.word	0x40014400
 800098c:	24000000 	.word	0x24000000
 8000990:	240026d0 	.word	0x240026d0
 8000994:	24000608 	.word	0x24000608
 8000998:	2400069c 	.word	0x2400069c
 800099c:	240006a0 	.word	0x240006a0
 80009a0:	240025f4 	.word	0x240025f4
 80009a4:	240026cd 	.word	0x240026cd

080009a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b09e      	sub	sp, #120	@ 0x78
 80009ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009b2:	224c      	movs	r2, #76	@ 0x4c
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f00c fd23 	bl	800d402 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	2220      	movs	r2, #32
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f00c fd1c 	bl	800d402 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009ca:	2002      	movs	r0, #2
 80009cc:	f005 fa86 	bl	8005edc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	4b48      	ldr	r3, [pc, #288]	@ (8000af8 <SystemClock_Config+0x150>)
 80009d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009d8:	4a47      	ldr	r2, [pc, #284]	@ (8000af8 <SystemClock_Config+0x150>)
 80009da:	f023 0301 	bic.w	r3, r3, #1
 80009de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009e0:	4b45      	ldr	r3, [pc, #276]	@ (8000af8 <SystemClock_Config+0x150>)
 80009e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b44      	ldr	r3, [pc, #272]	@ (8000afc <SystemClock_Config+0x154>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	4a43      	ldr	r2, [pc, #268]	@ (8000afc <SystemClock_Config+0x154>)
 80009f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009f4:	6193      	str	r3, [r2, #24]
 80009f6:	4b41      	ldr	r3, [pc, #260]	@ (8000afc <SystemClock_Config+0x154>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a02:	bf00      	nop
 8000a04:	4b3d      	ldr	r3, [pc, #244]	@ (8000afc <SystemClock_Config+0x154>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a10:	d1f8      	bne.n	8000a04 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b3b      	ldr	r3, [pc, #236]	@ (8000b00 <SystemClock_Config+0x158>)
 8000a14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a18:	4a39      	ldr	r2, [pc, #228]	@ (8000b00 <SystemClock_Config+0x158>)
 8000a1a:	f043 0302 	orr.w	r3, r3, #2
 8000a1e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a22:	4b37      	ldr	r3, [pc, #220]	@ (8000b00 <SystemClock_Config+0x158>)
 8000a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a30:	2300      	movs	r3, #0
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	4b31      	ldr	r3, [pc, #196]	@ (8000afc <SystemClock_Config+0x154>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a30      	ldr	r2, [pc, #192]	@ (8000afc <SystemClock_Config+0x154>)
 8000a3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b2e      	ldr	r3, [pc, #184]	@ (8000afc <SystemClock_Config+0x154>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000af8 <SystemClock_Config+0x150>)
 8000a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8000af8 <SystemClock_Config+0x150>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a56:	4b28      	ldr	r3, [pc, #160]	@ (8000af8 <SystemClock_Config+0x150>)
 8000a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a62:	bf00      	nop
 8000a64:	4b25      	ldr	r3, [pc, #148]	@ (8000afc <SystemClock_Config+0x154>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a70:	d1f8      	bne.n	8000a64 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a72:	2301      	movs	r3, #1
 8000a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a7a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a80:	2302      	movs	r3, #2
 8000a82:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000a88:	2350      	movs	r3, #80	@ 0x50
 8000a8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a94:	2302      	movs	r3, #2
 8000a96:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a98:	230c      	movs	r3, #12
 8000a9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f005 fa51 	bl	8005f50 <HAL_RCC_OscConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000ab4:	f001 fcaa 	bl	800240c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab8:	233f      	movs	r3, #63	@ 0x3f
 8000aba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abc:	2303      	movs	r3, #3
 8000abe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ac8:	2340      	movs	r3, #64	@ 0x40
 8000aca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000acc:	2340      	movs	r3, #64	@ 0x40
 8000ace:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ad0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ad6:	2340      	movs	r3, #64	@ 0x40
 8000ad8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	2104      	movs	r1, #4
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f005 fe8f 	bl	8006804 <HAL_RCC_ClockConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000aec:	f001 fc8e 	bl	800240c <Error_Handler>
  }
}
 8000af0:	bf00      	nop
 8000af2:	3778      	adds	r7, #120	@ 0x78
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	58000400 	.word	0x58000400
 8000afc:	58024800 	.word	0x58024800
 8000b00:	58024400 	.word	0x58024400

08000b04 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0aa      	sub	sp, #168	@ 0xa8
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_EventCfgTypeDef pEventCfg = {0};
 8000b0a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000b1a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000b28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b2c:	2254      	movs	r2, #84	@ 0x54
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f00c fc66 	bl	800d402 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8000b36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2220      	movs	r2, #32
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f00c fc5a 	bl	800d402 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */


  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8000b4e:	4bc4      	ldr	r3, [pc, #784]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000b50:	4ac4      	ldr	r2, [pc, #784]	@ (8000e64 <MX_HRTIM_Init+0x360>)
 8000b52:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000b54:	4bc2      	ldr	r3, [pc, #776]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000b5a:	4bc1      	ldr	r3, [pc, #772]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8000b60:	48bf      	ldr	r0, [pc, #764]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000b62:	f003 fc7d 	bl	8004460 <HAL_HRTIM_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_HRTIM_Init+0x6c>
  {
    Error_Handler();
 8000b6c:	f001 fc4e 	bl	800240c <Error_Handler>
  }
  if (HAL_HRTIM_EventPrescalerConfig(&hhrtim, HRTIM_EVENTPRESCALER_DIV1) != HAL_OK)
 8000b70:	2100      	movs	r1, #0
 8000b72:	48bb      	ldr	r0, [pc, #748]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000b74:	f003 fd9b 	bl	80046ae <HAL_HRTIM_EventPrescalerConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_HRTIM_Init+0x7e>
  {
    Error_Handler();
 8000b7e:	f001 fc45 	bl	800240c <Error_Handler>
  }
  pEventCfg.Source = HRTIM_EVENTSRC_3;
 8000b82:	2302      	movs	r3, #2
 8000b84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  pEventCfg.Polarity = HRTIM_EVENTPOLARITY_HIGH;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pEventCfg.Sensitivity = HRTIM_EVENTSENSITIVITY_RISINGEDGE;
 8000b8e:	2308      	movs	r3, #8
 8000b90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  pEventCfg.FastMode = HRTIM_EVENTFASTMODE_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_HRTIM_EventConfig(&hhrtim, HRTIM_EVENT_1, &pEventCfg) != HAL_OK)
 8000b9a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	48af      	ldr	r0, [pc, #700]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000ba4:	f003 fd54 	bl	8004650 <HAL_HRTIM_EventConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_HRTIM_Init+0xae>
  {
    Error_Handler();
 8000bae:	f001 fc2d 	bl	800240c <Error_Handler>
  }
  pTimeBaseCfg.Period = 24000-1;
 8000bb2:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 8000bb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000bc0:	2305      	movs	r3, #5
 8000bc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000bc6:	2308      	movs	r3, #8
 8000bc8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000bcc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	48a2      	ldr	r0, [pc, #648]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000bd6:	f003 fd13 	bl	8004600 <HAL_HRTIM_TimeBaseConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_HRTIM_Init+0xe0>
  {
    Error_Handler();
 8000be0:	f001 fc14 	bl	800240c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.DMASrcAddress = 0x0000;
 8000bec:	2300      	movs	r3, #0
 8000bee:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.DMADstAddress = 0x0000;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.DMASize = 0x1;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000c00:	2300      	movs	r3, #0
 8000c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8000c08:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c0c:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000c16:	2300      	movs	r3, #0
 8000c18:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8000c26:	2300      	movs	r3, #0
 8000c28:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_EEV_1;
 8000c32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c36:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 8000c38:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000c3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8000c40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c44:	461a      	mov	r2, r3
 8000c46:	2100      	movs	r1, #0
 8000c48:	4885      	ldr	r0, [pc, #532]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000c4a:	f003 fd69 	bl	8004720 <HAL_HRTIM_WaveformTimerConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_HRTIM_Init+0x154>
  {
    Error_Handler();
 8000c54:	f001 fbda 	bl	800240c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8000c58:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	2101      	movs	r1, #1
 8000c60:	487f      	ldr	r0, [pc, #508]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000c62:	f003 fd5d 	bl	8004720 <HAL_HRTIM_WaveformTimerConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_HRTIM_Init+0x16c>
  {
    Error_Handler();
 8000c6c:	f001 fbce 	bl	800240c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8000c70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c74:	461a      	mov	r2, r3
 8000c76:	2102      	movs	r1, #2
 8000c78:	4879      	ldr	r0, [pc, #484]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000c7a:	f003 fd51 	bl	8004720 <HAL_HRTIM_WaveformTimerConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_HRTIM_Init+0x184>
  {
    Error_Handler();
 8000c84:	f001 fbc2 	bl	800240c <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 8000c8c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c90:	461a      	mov	r2, r3
 8000c92:	2103      	movs	r1, #3
 8000c94:	4872      	ldr	r0, [pc, #456]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000c96:	f003 fd43 	bl	8004720 <HAL_HRTIM_WaveformTimerConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_HRTIM_Init+0x1a0>
  {
    Error_Handler();
 8000ca0:	f001 fbb4 	bl	800240c <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x00005A00/2;
 8000ca4:	f44f 5334 	mov.w	r3, #11520	@ 0x2d00
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000caa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	486b      	ldr	r0, [pc, #428]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000cb4:	f003 fda6 	bl	8004804 <HAL_HRTIM_WaveformCompareConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_HRTIM_Init+0x1be>
  {
    Error_Handler();
 8000cbe:	f001 fba5 	bl	800240c <Error_Handler>
  }
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cce:	2202      	movs	r2, #2
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4863      	ldr	r0, [pc, #396]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000cd4:	f003 fd96 	bl	8004804 <HAL_HRTIM_WaveformCompareConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_HRTIM_Init+0x1de>
  {
    Error_Handler();
 8000cde:	f001 fb95 	bl	800240c <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000ce2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	2101      	movs	r1, #1
 8000cea:	485d      	ldr	r0, [pc, #372]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000cec:	f003 fd8a 	bl	8004804 <HAL_HRTIM_WaveformCompareConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_HRTIM_Init+0x1f6>
  {
    Error_Handler();
 8000cf6:	f001 fb89 	bl	800240c <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfe:	2202      	movs	r2, #2
 8000d00:	2102      	movs	r1, #2
 8000d02:	4857      	ldr	r0, [pc, #348]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000d04:	f003 fd7e 	bl	8004804 <HAL_HRTIM_WaveformCompareConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_HRTIM_Init+0x20e>
  {
    Error_Handler();
 8000d0e:	f001 fb7d 	bl	800240c <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d16:	2202      	movs	r2, #2
 8000d18:	2103      	movs	r1, #3
 8000d1a:	4851      	ldr	r0, [pc, #324]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000d1c:	f003 fd72 	bl	8004804 <HAL_HRTIM_WaveformCompareConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_HRTIM_Init+0x226>
  {
    Error_Handler();
 8000d26:	f001 fb71 	bl	800240c <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_EEV_1|HRTIM_OUTPUTSET_TIMPER;
 8000d2e:	4b4e      	ldr	r3, [pc, #312]	@ (8000e68 <MX_HRTIM_Init+0x364>)
 8000d30:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8000d32:	2308      	movs	r3, #8
 8000d34:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4843      	ldr	r0, [pc, #268]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000d52:	f003 fec5 	bl	8004ae0 <HAL_HRTIM_WaveformOutputConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_HRTIM_Init+0x25c>
  {
    Error_Handler();
 8000d5c:	f001 fb56 	bl	800240c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2204      	movs	r2, #4
 8000d64:	2101      	movs	r1, #1
 8000d66:	483e      	ldr	r0, [pc, #248]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000d68:	f003 feba 	bl	8004ae0 <HAL_HRTIM_WaveformOutputConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_HRTIM_Init+0x272>
  {
    Error_Handler();
 8000d72:	f001 fb4b 	bl	800240c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2210      	movs	r2, #16
 8000d7a:	2102      	movs	r1, #2
 8000d7c:	4838      	ldr	r0, [pc, #224]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000d7e:	f003 feaf 	bl	8004ae0 <HAL_HRTIM_WaveformOutputConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_HRTIM_Init+0x288>
  {
    Error_Handler();
 8000d88:	f001 fb40 	bl	800240c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2240      	movs	r2, #64	@ 0x40
 8000d90:	2103      	movs	r1, #3
 8000d92:	4833      	ldr	r0, [pc, #204]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000d94:	f003 fea4 	bl	8004ae0 <HAL_HRTIM_WaveformOutputConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_HRTIM_Init+0x29e>
  {
    Error_Handler();
 8000d9e:	f001 fb35 	bl	800240c <Error_Handler>
  }
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8000da2:	2310      	movs	r3, #16
 8000da4:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2202      	movs	r2, #2
 8000daa:	2100      	movs	r1, #0
 8000dac:	482c      	ldr	r0, [pc, #176]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000dae:	f003 fe97 	bl	8004ae0 <HAL_HRTIM_WaveformOutputConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_HRTIM_Init+0x2b8>
  {
    Error_Handler();
 8000db8:	f001 fb28 	bl	800240c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2208      	movs	r2, #8
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	4827      	ldr	r0, [pc, #156]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000dc4:	f003 fe8c 	bl	8004ae0 <HAL_HRTIM_WaveformOutputConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_HRTIM_Init+0x2ce>
  {
    Error_Handler();
 8000dce:	f001 fb1d 	bl	800240c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2220      	movs	r2, #32
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	4821      	ldr	r0, [pc, #132]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000dda:	f003 fe81 	bl	8004ae0 <HAL_HRTIM_WaveformOutputConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_HRTIM_Init+0x2e4>
  {
    Error_Handler();
 8000de4:	f001 fb12 	bl	800240c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2280      	movs	r2, #128	@ 0x80
 8000dec:	2103      	movs	r1, #3
 8000dee:	481c      	ldr	r0, [pc, #112]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000df0:	f003 fe76 	bl	8004ae0 <HAL_HRTIM_WaveformOutputConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_HRTIM_Init+0x2fa>
  {
    Error_Handler();
 8000dfa:	f001 fb07 	bl	800240c <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8000dfe:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e02:	461a      	mov	r2, r3
 8000e04:	2101      	movs	r1, #1
 8000e06:	4816      	ldr	r0, [pc, #88]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000e08:	f003 fbfa 	bl	8004600 <HAL_HRTIM_TimeBaseConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_HRTIM_Init+0x312>
  {
    Error_Handler();
 8000e12:	f001 fafb 	bl	800240c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000e16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	4810      	ldr	r0, [pc, #64]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000e20:	f003 fcf0 	bl	8004804 <HAL_HRTIM_WaveformCompareConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_HRTIM_Init+0x32a>
  {
    Error_Handler();
 8000e2a:	f001 faef 	bl	800240c <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8000e2e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e32:	461a      	mov	r2, r3
 8000e34:	2102      	movs	r1, #2
 8000e36:	480a      	ldr	r0, [pc, #40]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000e38:	f003 fbe2 	bl	8004600 <HAL_HRTIM_TimeBaseConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_HRTIM_Init+0x342>
  {
    Error_Handler();
 8000e42:	f001 fae3 	bl	800240c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000e46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	4804      	ldr	r0, [pc, #16]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000e50:	f003 fcd8 	bl	8004804 <HAL_HRTIM_WaveformCompareConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d008      	beq.n	8000e6c <MX_HRTIM_Init+0x368>
  {
    Error_Handler();
 8000e5a:	f001 fad7 	bl	800240c <Error_Handler>
 8000e5e:	e005      	b.n	8000e6c <MX_HRTIM_Init+0x368>
 8000e60:	240001fc 	.word	0x240001fc
 8000e64:	40017400 	.word	0x40017400
 8000e68:	00200004 	.word	0x00200004
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000e6c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e70:	461a      	mov	r2, r3
 8000e72:	2103      	movs	r1, #3
 8000e74:	480d      	ldr	r0, [pc, #52]	@ (8000eac <MX_HRTIM_Init+0x3a8>)
 8000e76:	f003 fbc3 	bl	8004600 <HAL_HRTIM_TimeBaseConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_HRTIM_Init+0x380>
  {
    Error_Handler();
 8000e80:	f001 fac4 	bl	800240c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000e84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2103      	movs	r1, #3
 8000e8c:	4807      	ldr	r0, [pc, #28]	@ (8000eac <MX_HRTIM_Init+0x3a8>)
 8000e8e:	f003 fcb9 	bl	8004804 <HAL_HRTIM_WaveformCompareConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_HRTIM_Init+0x398>
  {
    Error_Handler();
 8000e98:	f001 fab8 	bl	800240c <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8000e9c:	4803      	ldr	r0, [pc, #12]	@ (8000eac <MX_HRTIM_Init+0x3a8>)
 8000e9e:	f001 fb0f 	bl	80024c0 <HAL_HRTIM_MspPostInit>

}
 8000ea2:	bf00      	nop
 8000ea4:	37a8      	adds	r7, #168	@ 0xa8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	240001fc 	.word	0x240001fc

08000eb0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000eb4:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000eb6:	4a14      	ldr	r2, [pc, #80]	@ (8000f08 <MX_LPTIM1_Init+0x58>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000eba:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000ec0:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ec8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ecc:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_LOW;
 8000ece:	4b0d      	ldr	r3, [pc, #52]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ed0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000ed4:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000edc:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000eee:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ef0:	f004 fb9e 	bl	8005630 <HAL_LPTIM_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8000efa:	f001 fa87 	bl	800240c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	240002d8 	.word	0x240002d8
 8000f08:	40002400 	.word	0x40002400

08000f0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b09a      	sub	sp, #104	@ 0x68
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f12:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f20:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
 8000f3c:	615a      	str	r2, [r3, #20]
 8000f3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	222c      	movs	r2, #44	@ 0x2c
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f00c fa5b 	bl	800d402 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f4c:	4b55      	ldr	r3, [pc, #340]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f4e:	4a56      	ldr	r2, [pc, #344]	@ (80010a8 <MX_TIM1_Init+0x19c>)
 8000f50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f52:	4b54      	ldr	r3, [pc, #336]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f58:	4b52      	ldr	r3, [pc, #328]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000-1;
 8000f5e:	4b51      	ldr	r3, [pc, #324]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f60:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000f64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f66:	4b4f      	ldr	r3, [pc, #316]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f6c:	4b4d      	ldr	r3, [pc, #308]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f72:	4b4c      	ldr	r3, [pc, #304]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f74:	2280      	movs	r2, #128	@ 0x80
 8000f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f78:	484a      	ldr	r0, [pc, #296]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f7a:	f007 fdfb 	bl	8008b74 <HAL_TIM_Base_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f84:	f001 fa42 	bl	800240c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f8e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f92:	4619      	mov	r1, r3
 8000f94:	4843      	ldr	r0, [pc, #268]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f96:	f008 fa49 	bl	800942c <HAL_TIM_ConfigClockSource>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000fa0:	f001 fa34 	bl	800240c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fa4:	483f      	ldr	r0, [pc, #252]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000fa6:	f007 feb5 	bl	8008d14 <HAL_TIM_PWM_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000fb0:	f001 fa2c 	bl	800240c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fb4:	2320      	movs	r3, #32
 8000fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fc0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4837      	ldr	r0, [pc, #220]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000fc8:	f008 ff90 	bl	8009eec <HAL_TIMEx_MasterConfigSynchronization>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000fd2:	f001 fa1b 	bl	800240c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd6:	2360      	movs	r3, #96	@ 0x60
 8000fd8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fea:	2300      	movs	r3, #0
 8000fec:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	482a      	ldr	r0, [pc, #168]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000ffc:	f008 f902 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001006:	f001 fa01 	bl	800240c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800100a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800100e:	2204      	movs	r2, #4
 8001010:	4619      	mov	r1, r3
 8001012:	4824      	ldr	r0, [pc, #144]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8001014:	f008 f8f6 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800101e:	f001 f9f5 	bl	800240c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001022:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001026:	2208      	movs	r2, #8
 8001028:	4619      	mov	r1, r3
 800102a:	481e      	ldr	r0, [pc, #120]	@ (80010a4 <MX_TIM1_Init+0x198>)
 800102c:	f008 f8ea 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001036:	f001 f9e9 	bl	800240c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800103a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800103e:	220c      	movs	r2, #12
 8001040:	4619      	mov	r1, r3
 8001042:	4818      	ldr	r0, [pc, #96]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8001044:	f008 f8de 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800104e:	f001 f9dd 	bl	800240c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001066:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800106a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001074:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4619      	mov	r1, r3
 8001086:	4807      	ldr	r0, [pc, #28]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8001088:	f008 ffbe 	bl	800a008 <HAL_TIMEx_ConfigBreakDeadTime>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8001092:	f001 f9bb 	bl	800240c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001096:	4803      	ldr	r0, [pc, #12]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8001098:	f001 fc30 	bl	80028fc <HAL_TIM_MspPostInit>

}
 800109c:	bf00      	nop
 800109e:	3768      	adds	r7, #104	@ 0x68
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	24000310 	.word	0x24000310
 80010a8:	40010000 	.word	0x40010000

080010ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08e      	sub	sp, #56	@ 0x38
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010cc:	463b      	mov	r3, r7
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]
 80010da:	615a      	str	r2, [r3, #20]
 80010dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010de:	4b2d      	ldr	r3, [pc, #180]	@ (8001194 <MX_TIM2_Init+0xe8>)
 80010e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001194 <MX_TIM2_Init+0xe8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ec:	4b29      	ldr	r3, [pc, #164]	@ (8001194 <MX_TIM2_Init+0xe8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000-1;
 80010f2:	4b28      	ldr	r3, [pc, #160]	@ (8001194 <MX_TIM2_Init+0xe8>)
 80010f4:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80010f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fa:	4b26      	ldr	r3, [pc, #152]	@ (8001194 <MX_TIM2_Init+0xe8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001100:	4b24      	ldr	r3, [pc, #144]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001102:	2280      	movs	r2, #128	@ 0x80
 8001104:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001106:	4823      	ldr	r0, [pc, #140]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001108:	f007 fd34 	bl	8008b74 <HAL_TIM_Base_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001112:	f001 f97b 	bl	800240c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001116:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800111a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800111c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001120:	4619      	mov	r1, r3
 8001122:	481c      	ldr	r0, [pc, #112]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001124:	f008 f982 	bl	800942c <HAL_TIM_ConfigClockSource>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800112e:	f001 f96d 	bl	800240c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001132:	4818      	ldr	r0, [pc, #96]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001134:	f007 fdee 	bl	8008d14 <HAL_TIM_PWM_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800113e:	f001 f965 	bl	800240c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	4619      	mov	r1, r3
 8001150:	4810      	ldr	r0, [pc, #64]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001152:	f008 fecb 	bl	8009eec <HAL_TIMEx_MasterConfigSynchronization>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800115c:	f001 f956 	bl	800240c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001160:	2360      	movs	r3, #96	@ 0x60
 8001162:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001170:	463b      	mov	r3, r7
 8001172:	2200      	movs	r2, #0
 8001174:	4619      	mov	r1, r3
 8001176:	4807      	ldr	r0, [pc, #28]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001178:	f008 f844 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001182:	f001 f943 	bl	800240c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001186:	4803      	ldr	r0, [pc, #12]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001188:	f001 fbb8 	bl	80028fc <HAL_TIM_MspPostInit>

}
 800118c:	bf00      	nop
 800118e:	3738      	adds	r7, #56	@ 0x38
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	2400035c 	.word	0x2400035c

08001198 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08e      	sub	sp, #56	@ 0x38
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]
 80011c6:	615a      	str	r2, [r3, #20]
 80011c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011ca:	4b3d      	ldr	r3, [pc, #244]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011cc:	4a3d      	ldr	r2, [pc, #244]	@ (80012c4 <MX_TIM4_Init+0x12c>)
 80011ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011d0:	4b3b      	ldr	r3, [pc, #236]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d6:	4b3a      	ldr	r3, [pc, #232]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 24000-1;
 80011dc:	4b38      	ldr	r3, [pc, #224]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011de:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80011e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e4:	4b36      	ldr	r3, [pc, #216]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ea:	4b35      	ldr	r3, [pc, #212]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011ec:	2280      	movs	r2, #128	@ 0x80
 80011ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011f0:	4833      	ldr	r0, [pc, #204]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011f2:	f007 fcbf 	bl	8008b74 <HAL_TIM_Base_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80011fc:	f001 f906 	bl	800240c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001200:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001204:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001206:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800120a:	4619      	mov	r1, r3
 800120c:	482c      	ldr	r0, [pc, #176]	@ (80012c0 <MX_TIM4_Init+0x128>)
 800120e:	f008 f90d 	bl	800942c <HAL_TIM_ConfigClockSource>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001218:	f001 f8f8 	bl	800240c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800121c:	4828      	ldr	r0, [pc, #160]	@ (80012c0 <MX_TIM4_Init+0x128>)
 800121e:	f007 fd79 	bl	8008d14 <HAL_TIM_PWM_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001228:	f001 f8f0 	bl	800240c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	4619      	mov	r1, r3
 800123a:	4821      	ldr	r0, [pc, #132]	@ (80012c0 <MX_TIM4_Init+0x128>)
 800123c:	f008 fe56 	bl	8009eec <HAL_TIMEx_MasterConfigSynchronization>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001246:	f001 f8e1 	bl	800240c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124a:	2360      	movs	r3, #96	@ 0x60
 800124c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	2200      	movs	r2, #0
 800125e:	4619      	mov	r1, r3
 8001260:	4817      	ldr	r0, [pc, #92]	@ (80012c0 <MX_TIM4_Init+0x128>)
 8001262:	f007 ffcf 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800126c:	f001 f8ce 	bl	800240c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	2204      	movs	r2, #4
 8001274:	4619      	mov	r1, r3
 8001276:	4812      	ldr	r0, [pc, #72]	@ (80012c0 <MX_TIM4_Init+0x128>)
 8001278:	f007 ffc4 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001282:	f001 f8c3 	bl	800240c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001286:	463b      	mov	r3, r7
 8001288:	2208      	movs	r2, #8
 800128a:	4619      	mov	r1, r3
 800128c:	480c      	ldr	r0, [pc, #48]	@ (80012c0 <MX_TIM4_Init+0x128>)
 800128e:	f007 ffb9 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001298:	f001 f8b8 	bl	800240c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	220c      	movs	r2, #12
 80012a0:	4619      	mov	r1, r3
 80012a2:	4807      	ldr	r0, [pc, #28]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80012a4:	f007 ffae 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 80012ae:	f001 f8ad 	bl	800240c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80012b2:	4803      	ldr	r0, [pc, #12]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80012b4:	f001 fb22 	bl	80028fc <HAL_TIM_MspPostInit>

}
 80012b8:	bf00      	nop
 80012ba:	3738      	adds	r7, #56	@ 0x38
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	240003a8 	.word	0x240003a8
 80012c4:	40000800 	.word	0x40000800

080012c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08e      	sub	sp, #56	@ 0x38
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e8:	463b      	mov	r3, r7
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
 80012f6:	615a      	str	r2, [r3, #20]
 80012f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012fa:	4b32      	ldr	r3, [pc, #200]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 80012fc:	4a32      	ldr	r2, [pc, #200]	@ (80013c8 <MX_TIM5_Init+0x100>)
 80012fe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001300:	4b30      	ldr	r3, [pc, #192]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001302:	2200      	movs	r2, #0
 8001304:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001306:	4b2f      	ldr	r3, [pc, #188]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 24000-1;
 800130c:	4b2d      	ldr	r3, [pc, #180]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800130e:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001312:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001314:	4b2b      	ldr	r3, [pc, #172]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800131a:	4b2a      	ldr	r3, [pc, #168]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800131c:	2280      	movs	r2, #128	@ 0x80
 800131e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001320:	4828      	ldr	r0, [pc, #160]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001322:	f007 fc27 	bl	8008b74 <HAL_TIM_Base_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800132c:	f001 f86e 	bl	800240c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001330:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001334:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001336:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800133a:	4619      	mov	r1, r3
 800133c:	4821      	ldr	r0, [pc, #132]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800133e:	f008 f875 	bl	800942c <HAL_TIM_ConfigClockSource>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001348:	f001 f860 	bl	800240c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800134c:	481d      	ldr	r0, [pc, #116]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800134e:	f007 fce1 	bl	8008d14 <HAL_TIM_PWM_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001358:	f001 f858 	bl	800240c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	4816      	ldr	r0, [pc, #88]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800136c:	f008 fdbe 	bl	8009eec <HAL_TIMEx_MasterConfigSynchronization>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001376:	f001 f849 	bl	800240c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137a:	2360      	movs	r3, #96	@ 0x60
 800137c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800138a:	463b      	mov	r3, r7
 800138c:	2204      	movs	r2, #4
 800138e:	4619      	mov	r1, r3
 8001390:	480c      	ldr	r0, [pc, #48]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001392:	f007 ff37 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800139c:	f001 f836 	bl	800240c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013a0:	463b      	mov	r3, r7
 80013a2:	2208      	movs	r2, #8
 80013a4:	4619      	mov	r1, r3
 80013a6:	4807      	ldr	r0, [pc, #28]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 80013a8:	f007 ff2c 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 80013b2:	f001 f82b 	bl	800240c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80013b6:	4803      	ldr	r0, [pc, #12]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 80013b8:	f001 faa0 	bl	80028fc <HAL_TIM_MspPostInit>

}
 80013bc:	bf00      	nop
 80013be:	3738      	adds	r7, #56	@ 0x38
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	240003f4 	.word	0x240003f4
 80013c8:	40000c00 	.word	0x40000c00

080013cc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b09a      	sub	sp, #104	@ 0x68
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	615a      	str	r2, [r3, #20]
 80013fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	222c      	movs	r2, #44	@ 0x2c
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f00b fffb 	bl	800d402 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800140c:	4b42      	ldr	r3, [pc, #264]	@ (8001518 <MX_TIM8_Init+0x14c>)
 800140e:	4a43      	ldr	r2, [pc, #268]	@ (800151c <MX_TIM8_Init+0x150>)
 8001410:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001412:	4b41      	ldr	r3, [pc, #260]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001414:	2200      	movs	r2, #0
 8001416:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001418:	4b3f      	ldr	r3, [pc, #252]	@ (8001518 <MX_TIM8_Init+0x14c>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 24000-1;
 800141e:	4b3e      	ldr	r3, [pc, #248]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001420:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001424:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001426:	4b3c      	ldr	r3, [pc, #240]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800142c:	4b3a      	ldr	r3, [pc, #232]	@ (8001518 <MX_TIM8_Init+0x14c>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001432:	4b39      	ldr	r3, [pc, #228]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001438:	4837      	ldr	r0, [pc, #220]	@ (8001518 <MX_TIM8_Init+0x14c>)
 800143a:	f007 fb9b 	bl	8008b74 <HAL_TIM_Base_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001444:	f000 ffe2 	bl	800240c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001448:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800144c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800144e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001452:	4619      	mov	r1, r3
 8001454:	4830      	ldr	r0, [pc, #192]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001456:	f007 ffe9 	bl	800942c <HAL_TIM_ConfigClockSource>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001460:	f000 ffd4 	bl	800240c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001464:	482c      	ldr	r0, [pc, #176]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001466:	f007 fc55 	bl	8008d14 <HAL_TIM_PWM_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001470:	f000 ffcc 	bl	800240c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001474:	2300      	movs	r3, #0
 8001476:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001480:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001484:	4619      	mov	r1, r3
 8001486:	4824      	ldr	r0, [pc, #144]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001488:	f008 fd30 	bl	8009eec <HAL_TIMEx_MasterConfigSynchronization>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001492:	f000 ffbb 	bl	800240c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001496:	2360      	movs	r3, #96	@ 0x60
 8001498:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149e:	2300      	movs	r3, #0
 80014a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014b2:	220c      	movs	r2, #12
 80014b4:	4619      	mov	r1, r3
 80014b6:	4818      	ldr	r0, [pc, #96]	@ (8001518 <MX_TIM8_Init+0x14c>)
 80014b8:	f007 fea4 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80014c2:	f000 ffa3 	bl	800240c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	4619      	mov	r1, r3
 80014fa:	4807      	ldr	r0, [pc, #28]	@ (8001518 <MX_TIM8_Init+0x14c>)
 80014fc:	f008 fd84 	bl	800a008 <HAL_TIMEx_ConfigBreakDeadTime>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001506:	f000 ff81 	bl	800240c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800150a:	4803      	ldr	r0, [pc, #12]	@ (8001518 <MX_TIM8_Init+0x14c>)
 800150c:	f001 f9f6 	bl	80028fc <HAL_TIM_MspPostInit>

}
 8001510:	bf00      	nop
 8001512:	3768      	adds	r7, #104	@ 0x68
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	24000440 	.word	0x24000440
 800151c:	40010400 	.word	0x40010400

08001520 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08e      	sub	sp, #56	@ 0x38
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001526:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001540:	463b      	mov	r3, r7
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
 800154c:	611a      	str	r2, [r3, #16]
 800154e:	615a      	str	r2, [r3, #20]
 8001550:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001552:	4b2d      	ldr	r3, [pc, #180]	@ (8001608 <MX_TIM12_Init+0xe8>)
 8001554:	4a2d      	ldr	r2, [pc, #180]	@ (800160c <MX_TIM12_Init+0xec>)
 8001556:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001558:	4b2b      	ldr	r3, [pc, #172]	@ (8001608 <MX_TIM12_Init+0xe8>)
 800155a:	2200      	movs	r2, #0
 800155c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155e:	4b2a      	ldr	r3, [pc, #168]	@ (8001608 <MX_TIM12_Init+0xe8>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 24000-1;
 8001564:	4b28      	ldr	r3, [pc, #160]	@ (8001608 <MX_TIM12_Init+0xe8>)
 8001566:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800156a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156c:	4b26      	ldr	r3, [pc, #152]	@ (8001608 <MX_TIM12_Init+0xe8>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001572:	4b25      	ldr	r3, [pc, #148]	@ (8001608 <MX_TIM12_Init+0xe8>)
 8001574:	2280      	movs	r2, #128	@ 0x80
 8001576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001578:	4823      	ldr	r0, [pc, #140]	@ (8001608 <MX_TIM12_Init+0xe8>)
 800157a:	f007 fafb 	bl	8008b74 <HAL_TIM_Base_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM12_Init+0x68>
  {
    Error_Handler();
 8001584:	f000 ff42 	bl	800240c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001588:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800158c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800158e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001592:	4619      	mov	r1, r3
 8001594:	481c      	ldr	r0, [pc, #112]	@ (8001608 <MX_TIM12_Init+0xe8>)
 8001596:	f007 ff49 	bl	800942c <HAL_TIM_ConfigClockSource>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM12_Init+0x84>
  {
    Error_Handler();
 80015a0:	f000 ff34 	bl	800240c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80015a4:	4818      	ldr	r0, [pc, #96]	@ (8001608 <MX_TIM12_Init+0xe8>)
 80015a6:	f007 fbb5 	bl	8008d14 <HAL_TIM_PWM_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM12_Init+0x94>
  {
    Error_Handler();
 80015b0:	f000 ff2c 	bl	800240c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	4619      	mov	r1, r3
 80015c2:	4811      	ldr	r0, [pc, #68]	@ (8001608 <MX_TIM12_Init+0xe8>)
 80015c4:	f008 fc92 	bl	8009eec <HAL_TIMEx_MasterConfigSynchronization>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 80015ce:	f000 ff1d 	bl	800240c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d2:	2360      	movs	r3, #96	@ 0x60
 80015d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015e2:	463b      	mov	r3, r7
 80015e4:	2204      	movs	r2, #4
 80015e6:	4619      	mov	r1, r3
 80015e8:	4807      	ldr	r0, [pc, #28]	@ (8001608 <MX_TIM12_Init+0xe8>)
 80015ea:	f007 fe0b 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM12_Init+0xd8>
  {
    Error_Handler();
 80015f4:	f000 ff0a 	bl	800240c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80015f8:	4803      	ldr	r0, [pc, #12]	@ (8001608 <MX_TIM12_Init+0xe8>)
 80015fa:	f001 f97f 	bl	80028fc <HAL_TIM_MspPostInit>

}
 80015fe:	bf00      	nop
 8001600:	3738      	adds	r7, #56	@ 0x38
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	2400048c 	.word	0x2400048c
 800160c:	40001800 	.word	0x40001800

08001610 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	615a      	str	r2, [r3, #20]
 8001626:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001628:	4b1e      	ldr	r3, [pc, #120]	@ (80016a4 <MX_TIM13_Init+0x94>)
 800162a:	4a1f      	ldr	r2, [pc, #124]	@ (80016a8 <MX_TIM13_Init+0x98>)
 800162c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800162e:	4b1d      	ldr	r3, [pc, #116]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001630:	2200      	movs	r2, #0
 8001632:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 24000-1;
 800163a:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <MX_TIM13_Init+0x94>)
 800163c:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001640:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001642:	4b18      	ldr	r3, [pc, #96]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001648:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <MX_TIM13_Init+0x94>)
 800164a:	2280      	movs	r2, #128	@ 0x80
 800164c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800164e:	4815      	ldr	r0, [pc, #84]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001650:	f007 fa90 	bl	8008b74 <HAL_TIM_Base_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800165a:	f000 fed7 	bl	800240c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800165e:	4811      	ldr	r0, [pc, #68]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001660:	f007 fb58 	bl	8008d14 <HAL_TIM_PWM_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800166a:	f000 fecf 	bl	800240c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166e:	2360      	movs	r3, #96	@ 0x60
 8001670:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	4619      	mov	r1, r3
 8001684:	4807      	ldr	r0, [pc, #28]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001686:	f007 fdbd 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001690:	f000 febc 	bl	800240c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001694:	4803      	ldr	r0, [pc, #12]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001696:	f001 f931 	bl	80028fc <HAL_TIM_MspPostInit>

}
 800169a:	bf00      	nop
 800169c:	3720      	adds	r7, #32
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	240004d8 	.word	0x240004d8
 80016a8:	40001c00 	.word	0x40001c00

080016ac <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
 80016c0:	615a      	str	r2, [r3, #20]
 80016c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80016c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001744 <MX_TIM14_Init+0x98>)
 80016c8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80016ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 24000-1;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016d8:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80016dc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016de:	4b18      	ldr	r3, [pc, #96]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016e4:	4b16      	ldr	r3, [pc, #88]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016e6:	2280      	movs	r2, #128	@ 0x80
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80016ea:	4815      	ldr	r0, [pc, #84]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016ec:	f007 fa42 	bl	8008b74 <HAL_TIM_Base_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80016f6:	f000 fe89 	bl	800240c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80016fa:	4811      	ldr	r0, [pc, #68]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016fc:	f007 fb0a 	bl	8008d14 <HAL_TIM_PWM_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001706:	f000 fe81 	bl	800240c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800170a:	2360      	movs	r3, #96	@ 0x60
 800170c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2200      	movs	r2, #0
 800171e:	4619      	mov	r1, r3
 8001720:	4807      	ldr	r0, [pc, #28]	@ (8001740 <MX_TIM14_Init+0x94>)
 8001722:	f007 fd6f 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800172c:	f000 fe6e 	bl	800240c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001730:	4803      	ldr	r0, [pc, #12]	@ (8001740 <MX_TIM14_Init+0x94>)
 8001732:	f001 f8e3 	bl	80028fc <HAL_TIM_MspPostInit>

}
 8001736:	bf00      	nop
 8001738:	3720      	adds	r7, #32
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	24000524 	.word	0x24000524
 8001744:	40002000 	.word	0x40002000

08001748 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b09a      	sub	sp, #104	@ 0x68
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001768:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
 8001778:	615a      	str	r2, [r3, #20]
 800177a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	222c      	movs	r2, #44	@ 0x2c
 8001780:	2100      	movs	r1, #0
 8001782:	4618      	mov	r0, r3
 8001784:	f00b fe3d 	bl	800d402 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001788:	4b45      	ldr	r3, [pc, #276]	@ (80018a0 <MX_TIM15_Init+0x158>)
 800178a:	4a46      	ldr	r2, [pc, #280]	@ (80018a4 <MX_TIM15_Init+0x15c>)
 800178c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800178e:	4b44      	ldr	r3, [pc, #272]	@ (80018a0 <MX_TIM15_Init+0x158>)
 8001790:	2200      	movs	r2, #0
 8001792:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001794:	4b42      	ldr	r3, [pc, #264]	@ (80018a0 <MX_TIM15_Init+0x158>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 24000-1;
 800179a:	4b41      	ldr	r3, [pc, #260]	@ (80018a0 <MX_TIM15_Init+0x158>)
 800179c:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80017a0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a2:	4b3f      	ldr	r3, [pc, #252]	@ (80018a0 <MX_TIM15_Init+0x158>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80017a8:	4b3d      	ldr	r3, [pc, #244]	@ (80018a0 <MX_TIM15_Init+0x158>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ae:	4b3c      	ldr	r3, [pc, #240]	@ (80018a0 <MX_TIM15_Init+0x158>)
 80017b0:	2280      	movs	r2, #128	@ 0x80
 80017b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80017b4:	483a      	ldr	r0, [pc, #232]	@ (80018a0 <MX_TIM15_Init+0x158>)
 80017b6:	f007 f9dd 	bl	8008b74 <HAL_TIM_Base_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80017c0:	f000 fe24 	bl	800240c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80017ca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80017ce:	4619      	mov	r1, r3
 80017d0:	4833      	ldr	r0, [pc, #204]	@ (80018a0 <MX_TIM15_Init+0x158>)
 80017d2:	f007 fe2b 	bl	800942c <HAL_TIM_ConfigClockSource>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80017dc:	f000 fe16 	bl	800240c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80017e0:	482f      	ldr	r0, [pc, #188]	@ (80018a0 <MX_TIM15_Init+0x158>)
 80017e2:	f007 fa97 	bl	8008d14 <HAL_TIM_PWM_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80017ec:	f000 fe0e 	bl	800240c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f0:	2300      	movs	r3, #0
 80017f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80017f8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80017fc:	4619      	mov	r1, r3
 80017fe:	4828      	ldr	r0, [pc, #160]	@ (80018a0 <MX_TIM15_Init+0x158>)
 8001800:	f008 fb74 	bl	8009eec <HAL_TIMEx_MasterConfigSynchronization>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800180a:	f000 fdff 	bl	800240c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800180e:	2360      	movs	r3, #96	@ 0x60
 8001810:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001816:	2300      	movs	r3, #0
 8001818:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800181a:	2300      	movs	r3, #0
 800181c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001826:	2300      	movs	r3, #0
 8001828:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800182a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800182e:	2200      	movs	r2, #0
 8001830:	4619      	mov	r1, r3
 8001832:	481b      	ldr	r0, [pc, #108]	@ (80018a0 <MX_TIM15_Init+0x158>)
 8001834:	f007 fce6 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 800183e:	f000 fde5 	bl	800240c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001842:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001846:	2204      	movs	r2, #4
 8001848:	4619      	mov	r1, r3
 800184a:	4815      	ldr	r0, [pc, #84]	@ (80018a0 <MX_TIM15_Init+0x158>)
 800184c:	f007 fcda 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM15_Init+0x112>
  {
    Error_Handler();
 8001856:	f000 fdd9 	bl	800240c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800186e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001872:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	4619      	mov	r1, r3
 8001880:	4807      	ldr	r0, [pc, #28]	@ (80018a0 <MX_TIM15_Init+0x158>)
 8001882:	f008 fbc1 	bl	800a008 <HAL_TIMEx_ConfigBreakDeadTime>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM15_Init+0x148>
  {
    Error_Handler();
 800188c:	f000 fdbe 	bl	800240c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001890:	4803      	ldr	r0, [pc, #12]	@ (80018a0 <MX_TIM15_Init+0x158>)
 8001892:	f001 f833 	bl	80028fc <HAL_TIM_MspPostInit>

}
 8001896:	bf00      	nop
 8001898:	3768      	adds	r7, #104	@ 0x68
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	24000570 	.word	0x24000570
 80018a4:	40014000 	.word	0x40014000

080018a8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b092      	sub	sp, #72	@ 0x48
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	611a      	str	r2, [r3, #16]
 80018be:	615a      	str	r2, [r3, #20]
 80018c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018c2:	463b      	mov	r3, r7
 80018c4:	222c      	movs	r2, #44	@ 0x2c
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f00b fd9a 	bl	800d402 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80018ce:	4b31      	ldr	r3, [pc, #196]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018d0:	4a31      	ldr	r2, [pc, #196]	@ (8001998 <MX_TIM16_Init+0xf0>)
 80018d2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80018d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018da:	4b2e      	ldr	r3, [pc, #184]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 24000-1;
 80018e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018e2:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80018e6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018ee:	4b29      	ldr	r3, [pc, #164]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018f4:	4b27      	ldr	r3, [pc, #156]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018f6:	2280      	movs	r2, #128	@ 0x80
 80018f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018fa:	4826      	ldr	r0, [pc, #152]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018fc:	f007 f93a 	bl	8008b74 <HAL_TIM_Base_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001906:	f000 fd81 	bl	800240c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800190a:	4822      	ldr	r0, [pc, #136]	@ (8001994 <MX_TIM16_Init+0xec>)
 800190c:	f007 fa02 	bl	8008d14 <HAL_TIM_PWM_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001916:	f000 fd79 	bl	800240c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800191a:	2360      	movs	r3, #96	@ 0x60
 800191c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001922:	2300      	movs	r3, #0
 8001924:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001926:	2300      	movs	r3, #0
 8001928:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800192e:	2300      	movs	r3, #0
 8001930:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001936:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800193a:	2200      	movs	r2, #0
 800193c:	4619      	mov	r1, r3
 800193e:	4815      	ldr	r0, [pc, #84]	@ (8001994 <MX_TIM16_Init+0xec>)
 8001940:	f007 fc60 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800194a:	f000 fd5f 	bl	800240c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001962:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001966:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001970:	463b      	mov	r3, r7
 8001972:	4619      	mov	r1, r3
 8001974:	4807      	ldr	r0, [pc, #28]	@ (8001994 <MX_TIM16_Init+0xec>)
 8001976:	f008 fb47 	bl	800a008 <HAL_TIMEx_ConfigBreakDeadTime>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001980:	f000 fd44 	bl	800240c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001984:	4803      	ldr	r0, [pc, #12]	@ (8001994 <MX_TIM16_Init+0xec>)
 8001986:	f000 ffb9 	bl	80028fc <HAL_TIM_MspPostInit>

}
 800198a:	bf00      	nop
 800198c:	3748      	adds	r7, #72	@ 0x48
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	240005bc 	.word	0x240005bc
 8001998:	40014400 	.word	0x40014400

0800199c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019a0:	4b25      	ldr	r3, [pc, #148]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019a2:	4a26      	ldr	r2, [pc, #152]	@ (8001a3c <MX_UART4_Init+0xa0>)
 80019a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80019a6:	4b24      	ldr	r3, [pc, #144]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019ae:	4b22      	ldr	r3, [pc, #136]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019b4:	4b20      	ldr	r3, [pc, #128]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019c2:	220c      	movs	r2, #12
 80019c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019d2:	4b19      	ldr	r3, [pc, #100]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019d8:	4b17      	ldr	r3, [pc, #92]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019de:	4b16      	ldr	r3, [pc, #88]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019e4:	4814      	ldr	r0, [pc, #80]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019e6:	f008 fbab 	bl	800a140 <HAL_UART_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80019f0:	f000 fd0c 	bl	800240c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019f4:	2100      	movs	r1, #0
 80019f6:	4810      	ldr	r0, [pc, #64]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019f8:	f00a fefb 	bl	800c7f2 <HAL_UARTEx_SetTxFifoThreshold>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001a02:	f000 fd03 	bl	800240c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a06:	2100      	movs	r1, #0
 8001a08:	480b      	ldr	r0, [pc, #44]	@ (8001a38 <MX_UART4_Init+0x9c>)
 8001a0a:	f00a ff30 	bl	800c86e <HAL_UARTEx_SetRxFifoThreshold>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001a14:	f000 fcfa 	bl	800240c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001a18:	4807      	ldr	r0, [pc, #28]	@ (8001a38 <MX_UART4_Init+0x9c>)
 8001a1a:	f00a feb1 	bl	800c780 <HAL_UARTEx_DisableFifoMode>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001a24:	f000 fcf2 	bl	800240c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */
  UART4->CR1 |= (USART_CR1_TE|USART_CR1_RXNEIE|USART_CR1_RE|USART_CR1_UE);
 8001a28:	4b04      	ldr	r3, [pc, #16]	@ (8001a3c <MX_UART4_Init+0xa0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a03      	ldr	r2, [pc, #12]	@ (8001a3c <MX_UART4_Init+0xa0>)
 8001a2e:	f043 032d 	orr.w	r3, r3, #45	@ 0x2d
 8001a32:	6013      	str	r3, [r2, #0]
  /* USER CODE END UART4_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	24000608 	.word	0x24000608
 8001a3c:	40004c00 	.word	0x40004c00

08001a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	@ 0x30
 8001a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a46:	f107 031c 	add.w	r3, r7, #28
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
 8001a54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a56:	4b59      	ldr	r3, [pc, #356]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a5c:	4a57      	ldr	r2, [pc, #348]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a5e:	f043 0310 	orr.w	r3, r3, #16
 8001a62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a66:	4b55      	ldr	r3, [pc, #340]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a74:	4b51      	ldr	r3, [pc, #324]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a7a:	4a50      	ldr	r2, [pc, #320]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a7c:	f043 0304 	orr.w	r3, r3, #4
 8001a80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a84:	4b4d      	ldr	r3, [pc, #308]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a92:	4b4a      	ldr	r3, [pc, #296]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a98:	4a48      	ldr	r2, [pc, #288]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aa2:	4b46      	ldr	r3, [pc, #280]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab0:	4b42      	ldr	r3, [pc, #264]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab6:	4a41      	ldr	r2, [pc, #260]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ac0:	4b3e      	ldr	r3, [pc, #248]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	4b3b      	ldr	r3, [pc, #236]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ad4:	4a39      	ldr	r2, [pc, #228]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001ad6:	f043 0302 	orr.w	r3, r3, #2
 8001ada:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ade:	4b37      	ldr	r3, [pc, #220]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aec:	4b33      	ldr	r3, [pc, #204]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001af2:	4a32      	ldr	r2, [pc, #200]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001af4:	f043 0308 	orr.w	r3, r3, #8
 8001af8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001afc:	4b2f      	ldr	r3, [pc, #188]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f249 519f 	movw	r1, #38303	@ 0x959f
 8001b10:	482b      	ldr	r0, [pc, #172]	@ (8001bc0 <MX_GPIO_Init+0x180>)
 8001b12:	f002 fc8b 	bl	800442c <HAL_GPIO_WritePin>
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001b1c:	4829      	ldr	r0, [pc, #164]	@ (8001bc4 <MX_GPIO_Init+0x184>)
 8001b1e:	f002 fc85 	bl	800442c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8001b28:	4827      	ldr	r0, [pc, #156]	@ (8001bc8 <MX_GPIO_Init+0x188>)
 8001b2a:	f002 fc7f 	bl	800442c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f640 71f7 	movw	r1, #4087	@ 0xff7
 8001b34:	4825      	ldr	r0, [pc, #148]	@ (8001bcc <MX_GPIO_Init+0x18c>)
 8001b36:	f002 fc79 	bl	800442c <HAL_GPIO_WritePin>
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : TIM1_CH3_PH_Pin TIM1_CH4_PH_Pin TIM2_CH1_PH_Pin TIM8_CH4_PH_Pin
                           TIM12_CH2_PH_Pin TIM13_CH1_PH_Pin TIM14_CH1_PH_Pin TIM15_CH1_PH_Pin
                           TIM1_CH1_PH_Pin TIM1_CH2_PH_Pin */
  GPIO_InitStruct.Pin = TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 8001b3a:	f249 539f 	movw	r3, #38303	@ 0x959f
 8001b3e:	61fb      	str	r3, [r7, #28]
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b40:	2301      	movs	r3, #1
 8001b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	4619      	mov	r1, r3
 8001b52:	481b      	ldr	r0, [pc, #108]	@ (8001bc0 <MX_GPIO_Init+0x180>)
 8001b54:	f002 faba 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH4_PH_Pin TIM5_CH2_PH_Pin TIM5_CH3_PH_Pin TIM4_CH3_PH_Pin */
  GPIO_InitStruct.Pin = TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin;
 8001b58:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6a:	f107 031c 	add.w	r3, r7, #28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4814      	ldr	r0, [pc, #80]	@ (8001bc4 <MX_GPIO_Init+0x184>)
 8001b72:	f002 faab 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH1_PH_Pin TIM4_CH2_PH_Pin */
  GPIO_InitStruct.Pin = TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin;
 8001b76:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b88:	f107 031c 	add.w	r3, r7, #28
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	480e      	ldr	r0, [pc, #56]	@ (8001bc8 <MX_GPIO_Init+0x188>)
 8001b90:	f002 fa9c 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pins : HRTIM_CHC1_PH_Pin HRTIM_CHC2_PH_Pin HRTIM_CHD1_PH_Pin HRTIM_CHD2_PH_Pin
                           TIM15_CH2_PH_Pin TIM16_CH1_PH_Pin LPTIM1_OUT_PH_Pin HRTIM_CHA1_PH_Pin
                           HRTIM_CHA2_PH_Pin HRTIM_CHB1_PH_Pin HRTIM_CHB2_PH_Pin */
  GPIO_InitStruct.Pin = HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 8001b94:	f640 73f7 	movw	r3, #4087	@ 0xff7
 8001b98:	61fb      	str	r3, [r7, #28]
                          |TIM15_CH2_PH_Pin|TIM16_CH1_PH_Pin|LPTIM1_OUT_PH_Pin|HRTIM_CHA1_PH_Pin
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	4619      	mov	r1, r3
 8001bac:	4807      	ldr	r0, [pc, #28]	@ (8001bcc <MX_GPIO_Init+0x18c>)
 8001bae:	f002 fa8d 	bl	80040cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bb2:	bf00      	nop
 8001bb4:	3730      	adds	r7, #48	@ 0x30
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	58024400 	.word	0x58024400
 8001bc0:	58021000 	.word	0x58021000
 8001bc4:	58020800 	.word	0x58020800
 8001bc8:	58020400 	.word	0x58020400
 8001bcc:	58020c00 	.word	0x58020c00

08001bd0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bd0:	b4b0      	push	{r4, r5, r7}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	static int i = 0;  // index for actuator update
	static int t = 0; // variable to track time
	const int period = 10; // number of timer rollovers between updates
 8001bd8:	230a      	movs	r3, #10
 8001bda:	617b      	str	r3, [r7, #20]
	const double step = 0.3;// max step size in volts
 8001bdc:	a32e      	add	r3, pc, #184	@ (adr r3, 8001c98 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	//Used to account for period in time clicks for UART Output
		sys_timer+= 24000;
 8001be6:	4b24      	ldr	r3, [pc, #144]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bec:	f645 51c0 	movw	r1, #24000	@ 0x5dc0
 8001bf0:	1854      	adds	r4, r2, r1
 8001bf2:	f143 0500 	adc.w	r5, r3, #0
 8001bf6:	4b20      	ldr	r3, [pc, #128]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001bf8:	e9c3 4500 	strd	r4, r5, [r3]

	//Used to account for period in time-scale for UART Output
		period_ticks ++;
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	3301      	adds	r3, #1
 8001c02:	4a1e      	ldr	r2, [pc, #120]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001c04:	6013      	str	r3, [r2, #0]


    if (htim==&htim1){
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a1d      	ldr	r2, [pc, #116]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d12d      	bne.n	8001c6a <HAL_TIM_PeriodElapsedCallback+0x9a>
    	t+=1;
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	4a1b      	ldr	r2, [pc, #108]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001c16:	6013      	str	r3, [r2, #0]
    	if(t%period == 0)
 8001c18:	4b1a      	ldr	r3, [pc, #104]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	fb93 f2f2 	sdiv	r2, r3, r2
 8001c22:	6979      	ldr	r1, [r7, #20]
 8001c24:	fb01 f202 	mul.w	r2, r1, r2
 8001c28:	1a9b      	subs	r3, r3, r2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d11d      	bne.n	8001c6a <HAL_TIM_PeriodElapsedCallback+0x9a>
    	{
    		if(i>=SIN_PERIOD) i = 0;
 8001c2e:	4b16      	ldr	r3, [pc, #88]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c36:	db02      	blt.n	8001c3e <HAL_TIM_PeriodElapsedCallback+0x6e>
 8001c38:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
    		//update the output
    		ref = sine_vals[i]*step;
 8001c3e:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a12      	ldr	r2, [pc, #72]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4413      	add	r3, r2
 8001c48:	ed93 6b00 	vldr	d6, [r3]
 8001c4c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001c50:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c54:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001c56:	ed83 7b00 	vstr	d7, [r3]
			// inform main that the actuators need an update
    		i+=1;
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	4a09      	ldr	r2, [pc, #36]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001c62:	6013      	str	r3, [r2, #0]
			ctrl_tmr_expired = TRUE;
 8001c64:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
    	}
	}

}
 8001c6a:	bf00      	nop
 8001c6c:	371c      	adds	r7, #28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bcb0      	pop	{r4, r5, r7}
 8001c72:	4770      	bx	lr
 8001c74:	f3af 8000 	nop.w
 8001c78:	240025e8 	.word	0x240025e8
 8001c7c:	240025f0 	.word	0x240025f0
 8001c80:	24000310 	.word	0x24000310
 8001c84:	240026d4 	.word	0x240026d4
 8001c88:	240026d8 	.word	0x240026d8
 8001c8c:	240006a8 	.word	0x240006a8
 8001c90:	240006a0 	.word	0x240006a0
 8001c94:	2400069c 	.word	0x2400069c
 8001c98:	33333333 	.word	0x33333333
 8001c9c:	3fd33333 	.word	0x3fd33333

08001ca0 <UART_update>:

/*Writes commands into the circular buffer as they are sent,
once the elements is equal to the command length, a flag is sent*/
void UART_update(){
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
			uint8_t c;
			c = UART4->RDR;
 8001ca6:	4b13      	ldr	r3, [pc, #76]	@ (8001cf4 <UART_update+0x54>)
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001caa:	71fb      	strb	r3, [r7, #7]
			write_buffer(rxp, c);
 8001cac:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <UART_update+0x58>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	79fa      	ldrb	r2, [r7, #7]
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f000 f8dd 	bl	8001e74 <write_buffer>

			num=get_num_elements(rxp);
 8001cba:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <UART_update+0x58>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f92a 	bl	8001f18 <get_num_elements>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cfc <UART_update+0x5c>)
 8001cca:	701a      	strb	r2, [r3, #0]
			if(num == CMD_LENGTH){
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <UART_update+0x5c>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b36      	cmp	r3, #54	@ 0x36
 8001cd2:	d102      	bne.n	8001cda <UART_update+0x3a>
				cmd_ready = TRUE;
 8001cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d00 <UART_update+0x60>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	701a      	strb	r2, [r3, #0]
			}

	HAL_UART_Receive_IT(&huart4, rx_buff, sizeof(rx_buff));
 8001cda:	2201      	movs	r2, #1
 8001cdc:	4909      	ldr	r1, [pc, #36]	@ (8001d04 <UART_update+0x64>)
 8001cde:	480a      	ldr	r0, [pc, #40]	@ (8001d08 <UART_update+0x68>)
 8001ce0:	f008 fb0c 	bl	800a2fc <HAL_UART_Receive_IT>
	data_ready = FALSE;
 8001ce4:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <UART_update+0x6c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40004c00 	.word	0x40004c00
 8001cf8:	24000000 	.word	0x24000000
 8001cfc:	240026ce 	.word	0x240026ce
 8001d00:	240026cd 	.word	0x240026cd
 8001d04:	240026d0 	.word	0x240026d0
 8001d08:	24000608 	.word	0x24000608
 8001d0c:	240025f4 	.word	0x240025f4

08001d10 <command_update>:

/*Function that is called once the number of elements in the buffer
is equal to the command length. Fills elements into an array to print */
void command_update(){
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0

	int n;
	n = get_num_elements(rxp);
 8001d16:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <command_update+0x6c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 f8fc 	bl	8001f18 <get_num_elements>
 8001d20:	6078      	str	r0, [r7, #4]

	for(index = 0; index <= CMD_LENGTH ; index ++){
 8001d22:	4b17      	ldr	r3, [pc, #92]	@ (8001d80 <command_update+0x70>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
 8001d28:	e015      	b.n	8001d56 <command_update+0x46>
		 circ_buff_message[index] = read_from_buffer(rxp);
 8001d2a:	4b14      	ldr	r3, [pc, #80]	@ (8001d7c <command_update+0x6c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a14      	ldr	r2, [pc, #80]	@ (8001d80 <command_update+0x70>)
 8001d30:	f992 2000 	ldrsb.w	r2, [r2]
 8001d34:	4614      	mov	r4, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 f8c6 	bl	8001ec8 <read_from_buffer>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4b10      	ldr	r3, [pc, #64]	@ (8001d84 <command_update+0x74>)
 8001d42:	551a      	strb	r2, [r3, r4]
	for(index = 0; index <= CMD_LENGTH ; index ++){
 8001d44:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <command_update+0x70>)
 8001d46:	f993 3000 	ldrsb.w	r3, [r3]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	b25a      	sxtb	r2, r3
 8001d52:	4b0b      	ldr	r3, [pc, #44]	@ (8001d80 <command_update+0x70>)
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	4b0a      	ldr	r3, [pc, #40]	@ (8001d80 <command_update+0x70>)
 8001d58:	f993 3000 	ldrsb.w	r3, [r3]
 8001d5c:	2b36      	cmp	r3, #54	@ 0x36
 8001d5e:	dde4      	ble.n	8001d2a <command_update+0x1a>
	 }
	HAL_UART_Transmit(&huart4, circ_buff_message, sizeof(circ_buff_message), 10);
 8001d60:	230a      	movs	r3, #10
 8001d62:	2264      	movs	r2, #100	@ 0x64
 8001d64:	4907      	ldr	r1, [pc, #28]	@ (8001d84 <command_update+0x74>)
 8001d66:	4808      	ldr	r0, [pc, #32]	@ (8001d88 <command_update+0x78>)
 8001d68:	f008 fa3a 	bl	800a1e0 <HAL_UART_Transmit>

	cmd_ready = FALSE;
 8001d6c:	4b07      	ldr	r3, [pc, #28]	@ (8001d8c <command_update+0x7c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd90      	pop	{r4, r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	24000000 	.word	0x24000000
 8001d80:	240026cc 	.word	0x240026cc
 8001d84:	24002668 	.word	0x24002668
 8001d88:	24000608 	.word	0x24000608
 8001d8c:	240026cd 	.word	0x240026cd

08001d90 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef*huart)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	data_ready = TRUE;
 8001d98:	4b04      	ldr	r3, [pc, #16]	@ (8001dac <HAL_UART_RxCpltCallback+0x1c>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	701a      	strb	r2, [r3, #0]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	240025f4 	.word	0x240025f4

08001db0 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef*huart)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 __NOP();
 8001db8:	bf00      	nop
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <init_buffer>:
    }
    return 0; /*no data available*/
}


static void init_buffer(struct circular_buffer *buf) {
 8001dc6:	b480      	push	{r7}
 8001dc8:	b085      	sub	sp, #20
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
    int i;
    buf->read_index = 0; /*initialize read index to 0 */
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
    buf->write_index = 0; /*initialize write index to 0 */
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	605a      	str	r2, [r3, #4]
    buf->size = BUFFER_LENGTH; /*Set size to buffer length const*/
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2264      	movs	r2, #100	@ 0x64
 8001dde:	609a      	str	r2, [r3, #8]
    for (i = 0; i < BUFFER_LENGTH; i++) { /*initialize data to zero*/
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	e008      	b.n	8001df8 <init_buffer+0x32>
        buf->data[i] = 0;
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	330c      	adds	r3, #12
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < BUFFER_LENGTH; i++) { /*initialize data to zero*/
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	3301      	adds	r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2b63      	cmp	r3, #99	@ 0x63
 8001dfc:	ddf3      	ble.n	8001de6 <init_buffer+0x20>
    } /*end for */
}
 8001dfe:	bf00      	nop
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <is_buffer_empty>:

/* function int is_buffer_empty(struct circular_buffer *buf)
 * takes a pointer to a circular buffer and compares the read and write indices
 * if they are equal then the buffer is empty
 */
static int8_t is_buffer_empty(struct circular_buffer *buf) {
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
    if (buf->read_index == buf->write_index) { //if read = write then the buffer is empty
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d101      	bne.n	8001e24 <is_buffer_empty+0x18>
        return TRUE;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <is_buffer_empty+0x1a>
    }
    return FALSE;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <is_buffer_full>:

/*  bufFull(struct oBuffer *buf)
 * takes a pointer to a circular buffer and compares the read and write indices
 * if write+1 = read, then the buffer is full.
 */
static int8_t is_buffer_full(struct circular_buffer *buf) {
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
    /* write index +1 == read index is full,  the mod provides wrap around*/
    if ((buf->write_index + 1) % BUFFER_LENGTH == buf->read_index) {
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <is_buffer_full+0x3c>)
 8001e44:	fb83 1302 	smull	r1, r3, r3, r2
 8001e48:	1159      	asrs	r1, r3, #5
 8001e4a:	17d3      	asrs	r3, r2, #31
 8001e4c:	1acb      	subs	r3, r1, r3
 8001e4e:	2164      	movs	r1, #100	@ 0x64
 8001e50:	fb01 f303 	mul.w	r3, r1, r3
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d101      	bne.n	8001e62 <is_buffer_full+0x2e>
        return TRUE;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <is_buffer_full+0x30>
    }
    return FALSE;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	51eb851f 	.word	0x51eb851f

08001e74 <write_buffer>:

/* writeBuffer( (struct oBuffer *buf, unsigned char c)
 * takes a pointer to a circular buffer and a char to be written
 * returns SUCCESS or ERROR
 */
static int8_t write_buffer(struct circular_buffer *buf, unsigned char c) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	70fb      	strb	r3, [r7, #3]
    if (is_buffer_full(buf) == FALSE) {
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ffd7 	bl	8001e34 <is_buffer_full>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d116      	bne.n	8001eba <write_buffer+0x46>
        buf->data[buf->write_index] = c;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	4413      	add	r3, r2
 8001e94:	78fa      	ldrb	r2, [r7, #3]
 8001e96:	731a      	strb	r2, [r3, #12]
        /*increment the write index and wrap using modulus arithmetic */
        buf->write_index = (buf->write_index + 1) % BUFFER_LENGTH;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <write_buffer+0x50>)
 8001ea0:	fb83 1302 	smull	r1, r3, r3, r2
 8001ea4:	1159      	asrs	r1, r3, #5
 8001ea6:	17d3      	asrs	r3, r2, #31
 8001ea8:	1acb      	subs	r3, r1, r3
 8001eaa:	2164      	movs	r1, #100	@ 0x64
 8001eac:	fb01 f303 	mul.w	r3, r1, r3
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6053      	str	r3, [r2, #4]
        return SUCCESS;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e000      	b.n	8001ebc <write_buffer+0x48>
    }
    return ERROR; /*no data written*/
 8001eba:	2301      	movs	r3, #1
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	51eb851f 	.word	0x51eb851f

08001ec8 <read_from_buffer>:
 * takes a pointer to a circular buffer
 * returns the value from the buffer
 * the read index is incremented and wrapped using modulus arithmetic
 * Returns 0 if the buffer is empty or the pointer is invalid
 */
static unsigned char read_from_buffer(struct circular_buffer *buf) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
    unsigned char val;
    if (is_buffer_empty(buf) == FALSE) {
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ff9b 	bl	8001e0c <is_buffer_empty>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d116      	bne.n	8001f0a <read_from_buffer+0x42>
        val = buf->data[buf->read_index]; //get the char from the buffer
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	7b1b      	ldrb	r3, [r3, #12]
 8001ee6:	73fb      	strb	r3, [r7, #15]
        /*increment the read index and wrap using modulus arithmetic*/
        buf->read_index = (buf->read_index + 1) % BUFFER_LENGTH;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <read_from_buffer+0x4c>)
 8001ef0:	fb83 1302 	smull	r1, r3, r3, r2
 8001ef4:	1159      	asrs	r1, r3, #5
 8001ef6:	17d3      	asrs	r3, r2, #31
 8001ef8:	1acb      	subs	r3, r1, r3
 8001efa:	2164      	movs	r1, #100	@ 0x64
 8001efc:	fb01 f303 	mul.w	r3, r1, r3
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6013      	str	r3, [r2, #0]
        return val;
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	e000      	b.n	8001f0c <read_from_buffer+0x44>
    }
    return 0;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	51eb851f 	.word	0x51eb851f

08001f18 <get_num_elements>:

static int get_num_elements(struct circular_buffer *buf) {
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
    if (buf != NULL) {
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d013      	beq.n	8001f4e <get_num_elements+0x36>
        if (buf->write_index < buf->read_index) { /*test for wrap around*/
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	da07      	bge.n	8001f42 <get_num_elements+0x2a>
            return (buf->write_index + BUFFER_LENGTH - buf->read_index);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	e006      	b.n	8001f50 <get_num_elements+0x38>
        } else {
            return (buf->write_index - buf->read_index);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	e000      	b.n	8001f50 <get_num_elements+0x38>
        }
    }
    return 0;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	0000      	movs	r0, r0
	...

08001f60 <control_update>:


static void control_update(double ref)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	ed87 0b00 	vstr	d0, [r7]
	// sign bit of the command fed to phase input on the h-bridge
	static int phase=GPIO_PIN_SET;
	//int new_phase = {0};
	static uint16_t dutycycle=0;
	uint16_t new_dc;
	double absref = 0;
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// indicate interrupt operation
//	HAL_GPIO_TogglePin(UPDATE_GPIO_Port, UPDATE_Pin);

	// set the sign of the move (phase)
	if(ref < 0){
 8001f76:	ed97 7b00 	vldr	d7, [r7]
 8001f7a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f82:	d505      	bpl.n	8001f90 <control_update+0x30>
		phase = GPIO_PIN_RESET; // reverse direction
 8001f84:	4b01      	ldr	r3, [pc, #4]	@ (8001f8c <control_update+0x2c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	e004      	b.n	8001f96 <control_update+0x36>
 8001f8c:	24000004 	.word	0x24000004
	} else {
		phase = GPIO_PIN_SET; //forward direction
 8001f90:	4ba3      	ldr	r3, [pc, #652]	@ (8002220 <control_update+0x2c0>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
	}
	// update the phase if it has changed
//	if(new_phase != phase){

		//Timer 1
		HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, phase);  //Starts the phase generation on each of the pins (Channels)
 8001f96:	4ba2      	ldr	r3, [pc, #648]	@ (8002220 <control_update+0x2c0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	48a0      	ldr	r0, [pc, #640]	@ (8002224 <control_update+0x2c4>)
 8001fa2:	f002 fa43 	bl	800442c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, phase);
 8001fa6:	4b9e      	ldr	r3, [pc, #632]	@ (8002220 <control_update+0x2c0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	2102      	movs	r1, #2
 8001fb0:	489c      	ldr	r0, [pc, #624]	@ (8002224 <control_update+0x2c4>)
 8001fb2:	f002 fa3b 	bl	800442c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, phase);
 8001fb6:	4b9a      	ldr	r3, [pc, #616]	@ (8002220 <control_update+0x2c0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	2104      	movs	r1, #4
 8001fc0:	4898      	ldr	r0, [pc, #608]	@ (8002224 <control_update+0x2c4>)
 8001fc2:	f002 fa33 	bl	800442c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, phase);
 8001fc6:	4b96      	ldr	r3, [pc, #600]	@ (8002220 <control_update+0x2c0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	2108      	movs	r1, #8
 8001fd0:	4894      	ldr	r0, [pc, #592]	@ (8002224 <control_update+0x2c4>)
 8001fd2:	f002 fa2b 	bl	800442c <HAL_GPIO_WritePin>
		//End Timer 1


		//Timer 2
		HAL_GPIO_WritePin(TIM2_CH1_PH_GPIO_Port, TIM2_CH1_PH_Pin, phase);
 8001fd6:	4b92      	ldr	r3, [pc, #584]	@ (8002220 <control_update+0x2c0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	461a      	mov	r2, r3
 8001fde:	2110      	movs	r1, #16
 8001fe0:	4890      	ldr	r0, [pc, #576]	@ (8002224 <control_update+0x2c4>)
 8001fe2:	f002 fa23 	bl	800442c <HAL_GPIO_WritePin>
		//End Timer 2

		//Timer 4
		HAL_GPIO_WritePin(TIM4_CH1_PH_GPIO_Port, TIM4_CH1_PH_Pin, phase);
 8001fe6:	4b8e      	ldr	r3, [pc, #568]	@ (8002220 <control_update+0x2c0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ff2:	488d      	ldr	r0, [pc, #564]	@ (8002228 <control_update+0x2c8>)
 8001ff4:	f002 fa1a 	bl	800442c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM4_CH2_PH_GPIO_Port, TIM4_CH2_PH_Pin, phase);
 8001ff8:	4b89      	ldr	r3, [pc, #548]	@ (8002220 <control_update+0x2c0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	461a      	mov	r2, r3
 8002000:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002004:	4888      	ldr	r0, [pc, #544]	@ (8002228 <control_update+0x2c8>)
 8002006:	f002 fa11 	bl	800442c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM4_CH3_PH_GPIO_Port, TIM4_CH3_PH_Pin, phase);
 800200a:	4b85      	ldr	r3, [pc, #532]	@ (8002220 <control_update+0x2c0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	461a      	mov	r2, r3
 8002012:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002016:	4885      	ldr	r0, [pc, #532]	@ (800222c <control_update+0x2cc>)
 8002018:	f002 fa08 	bl	800442c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM4_CH4_PH_GPIO_Port, TIM4_CH4_PH_Pin, phase);
 800201c:	4b80      	ldr	r3, [pc, #512]	@ (8002220 <control_update+0x2c0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002028:	4880      	ldr	r0, [pc, #512]	@ (800222c <control_update+0x2cc>)
 800202a:	f002 f9ff 	bl	800442c <HAL_GPIO_WritePin>
		//End Timer 4


		//Timer 5
		HAL_GPIO_WritePin(TIM5_CH2_PH_GPIO_Port, TIM5_CH2_PH_Pin, phase);
 800202e:	4b7c      	ldr	r3, [pc, #496]	@ (8002220 <control_update+0x2c0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	461a      	mov	r2, r3
 8002036:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800203a:	487c      	ldr	r0, [pc, #496]	@ (800222c <control_update+0x2cc>)
 800203c:	f002 f9f6 	bl	800442c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM5_CH3_PH_GPIO_Port, TIM5_CH3_PH_Pin, phase);
 8002040:	4b77      	ldr	r3, [pc, #476]	@ (8002220 <control_update+0x2c0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	461a      	mov	r2, r3
 8002048:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800204c:	4877      	ldr	r0, [pc, #476]	@ (800222c <control_update+0x2cc>)
 800204e:	f002 f9ed 	bl	800442c <HAL_GPIO_WritePin>
		//End Timer 5


		//Timer 8
		HAL_GPIO_WritePin(TIM8_CH4_PH_GPIO_Port, TIM8_CH4_PH_Pin, phase);
 8002052:	4b73      	ldr	r3, [pc, #460]	@ (8002220 <control_update+0x2c0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	2180      	movs	r1, #128	@ 0x80
 800205c:	4871      	ldr	r0, [pc, #452]	@ (8002224 <control_update+0x2c4>)
 800205e:	f002 f9e5 	bl	800442c <HAL_GPIO_WritePin>
		//End Timer 8


		//Timer 12
		HAL_GPIO_WritePin(TIM12_CH2_PH_GPIO_Port, TIM12_CH2_PH_Pin, phase);
 8002062:	4b6f      	ldr	r3, [pc, #444]	@ (8002220 <control_update+0x2c0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	b2db      	uxtb	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800206e:	486d      	ldr	r0, [pc, #436]	@ (8002224 <control_update+0x2c4>)
 8002070:	f002 f9dc 	bl	800442c <HAL_GPIO_WritePin>
		//End Timer 12


		//Timer 13
		HAL_GPIO_WritePin(TIM13_CH1_PH_GPIO_Port, TIM13_CH1_PH_Pin, phase);
 8002074:	4b6a      	ldr	r3, [pc, #424]	@ (8002220 <control_update+0x2c0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002080:	4868      	ldr	r0, [pc, #416]	@ (8002224 <control_update+0x2c4>)
 8002082:	f002 f9d3 	bl	800442c <HAL_GPIO_WritePin>
		//End Timer 13


		//Timer 14
		HAL_GPIO_WritePin(TIM14_CH1_PH_GPIO_Port, TIM14_CH1_PH_Pin, phase);
 8002086:	4b66      	ldr	r3, [pc, #408]	@ (8002220 <control_update+0x2c0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002092:	4864      	ldr	r0, [pc, #400]	@ (8002224 <control_update+0x2c4>)
 8002094:	f002 f9ca 	bl	800442c <HAL_GPIO_WritePin>
		//End Timer 14


		//Timer 15
		HAL_GPIO_WritePin(TIM15_CH1_PH_GPIO_Port, TIM15_CH1_PH_Pin, phase);
 8002098:	4b61      	ldr	r3, [pc, #388]	@ (8002220 <control_update+0x2c0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	461a      	mov	r2, r3
 80020a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020a4:	485f      	ldr	r0, [pc, #380]	@ (8002224 <control_update+0x2c4>)
 80020a6:	f002 f9c1 	bl	800442c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM15_CH2_PH_GPIO_Port, TIM15_CH2_PH_Pin, phase);
 80020aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002220 <control_update+0x2c0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	2101      	movs	r1, #1
 80020b4:	485e      	ldr	r0, [pc, #376]	@ (8002230 <control_update+0x2d0>)
 80020b6:	f002 f9b9 	bl	800442c <HAL_GPIO_WritePin>
		//End Timer 15


		//Timer 16
		HAL_GPIO_WritePin(TIM16_CH1_PH_GPIO_Port, TIM16_CH1_PH_Pin, phase);
 80020ba:	4b59      	ldr	r3, [pc, #356]	@ (8002220 <control_update+0x2c0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	2102      	movs	r1, #2
 80020c4:	485a      	ldr	r0, [pc, #360]	@ (8002230 <control_update+0x2d0>)
 80020c6:	f002 f9b1 	bl	800442c <HAL_GPIO_WritePin>
		//End Timer 16


		//HRTIM CODE HERE **************
		//High Resolution Timer CHA
		HAL_GPIO_WritePin(HRTIM_CHA1_PH_GPIO_Port, HRTIM_CHA1_PH_Pin, phase);
 80020ca:	4b55      	ldr	r3, [pc, #340]	@ (8002220 <control_update+0x2c0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	2110      	movs	r1, #16
 80020d4:	4856      	ldr	r0, [pc, #344]	@ (8002230 <control_update+0x2d0>)
 80020d6:	f002 f9a9 	bl	800442c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHA2_PH_GPIO_Port, HRTIM_CHA2_PH_Pin, phase);
 80020da:	4b51      	ldr	r3, [pc, #324]	@ (8002220 <control_update+0x2c0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	461a      	mov	r2, r3
 80020e2:	2120      	movs	r1, #32
 80020e4:	4852      	ldr	r0, [pc, #328]	@ (8002230 <control_update+0x2d0>)
 80020e6:	f002 f9a1 	bl	800442c <HAL_GPIO_WritePin>
		//End High HRTIM CHA

		//High Resolution Timer CHB
		HAL_GPIO_WritePin(HRTIM_CHB1_PH_GPIO_Port, HRTIM_CHB1_PH_Pin, phase);
 80020ea:	4b4d      	ldr	r3, [pc, #308]	@ (8002220 <control_update+0x2c0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	2140      	movs	r1, #64	@ 0x40
 80020f4:	484e      	ldr	r0, [pc, #312]	@ (8002230 <control_update+0x2d0>)
 80020f6:	f002 f999 	bl	800442c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHB2_PH_GPIO_Port, HRTIM_CHB2_PH_Pin, phase);
 80020fa:	4b49      	ldr	r3, [pc, #292]	@ (8002220 <control_update+0x2c0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	461a      	mov	r2, r3
 8002102:	2180      	movs	r1, #128	@ 0x80
 8002104:	484a      	ldr	r0, [pc, #296]	@ (8002230 <control_update+0x2d0>)
 8002106:	f002 f991 	bl	800442c <HAL_GPIO_WritePin>
		//End High HRTIM CHB

		//High Resolution Timer CHC
		HAL_GPIO_WritePin(HRTIM_CHC1_PH_GPIO_Port, HRTIM_CHC1_PH_Pin, phase);
 800210a:	4b45      	ldr	r3, [pc, #276]	@ (8002220 <control_update+0x2c0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	461a      	mov	r2, r3
 8002112:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002116:	4846      	ldr	r0, [pc, #280]	@ (8002230 <control_update+0x2d0>)
 8002118:	f002 f988 	bl	800442c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHC2_PH_GPIO_Port, HRTIM_CHC2_PH_Pin, phase);
 800211c:	4b40      	ldr	r3, [pc, #256]	@ (8002220 <control_update+0x2c0>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	461a      	mov	r2, r3
 8002124:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002128:	4841      	ldr	r0, [pc, #260]	@ (8002230 <control_update+0x2d0>)
 800212a:	f002 f97f 	bl	800442c <HAL_GPIO_WritePin>
		//End High HRTIM CHC

		//High Resolution Timer CHD
		HAL_GPIO_WritePin(HRTIM_CHD1_PH_GPIO_Port, HRTIM_CHD1_PH_Pin, phase);
 800212e:	4b3c      	ldr	r3, [pc, #240]	@ (8002220 <control_update+0x2c0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800213a:	483d      	ldr	r0, [pc, #244]	@ (8002230 <control_update+0x2d0>)
 800213c:	f002 f976 	bl	800442c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHD2_PH_GPIO_Port, HRTIM_CHD2_PH_Pin, phase);
 8002140:	4b37      	ldr	r3, [pc, #220]	@ (8002220 <control_update+0x2c0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800214c:	4838      	ldr	r0, [pc, #224]	@ (8002230 <control_update+0x2d0>)
 800214e:	f002 f96d 	bl	800442c <HAL_GPIO_WritePin>
		//End High HRTIM CHD
		//END HRTIM CODE


		//Low Power Timer
		HAL_GPIO_WritePin(LPTIM1_OUT_PH_GPIO_Port, LPTIM1_OUT_PH_Pin, phase);
 8002152:	4b33      	ldr	r3, [pc, #204]	@ (8002220 <control_update+0x2c0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	2104      	movs	r1, #4
 800215c:	4834      	ldr	r0, [pc, #208]	@ (8002230 <control_update+0x2d0>)
 800215e:	f002 f965 	bl	800442c <HAL_GPIO_WritePin>


//	}

	// calculate the dutycycle
	absref = fabs(ref); // duty cycle must be positive
 8002162:	ed97 7b00 	vldr	d7, [r7]
 8002166:	eeb0 7bc7 	vabs.f64	d7, d7
 800216a:	ed87 7b04 	vstr	d7, [r7, #16]
	new_dc = calc_dutycycle(absref,VSS);
 800216e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8002218 <control_update+0x2b8>
 8002172:	eeb0 1b47 	vmov.f64	d1, d7
 8002176:	ed97 0b04 	vldr	d0, [r7, #16]
 800217a:	f000 f8b9 	bl	80022f0 <calc_dutycycle>
 800217e:	4603      	mov	r3, r0
 8002180:	81fb      	strh	r3, [r7, #14]
	// if new dutycycle is different than the old dutycycle
	if(new_dc != dutycycle){
 8002182:	4b2c      	ldr	r3, [pc, #176]	@ (8002234 <control_update+0x2d4>)
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	89fa      	ldrh	r2, [r7, #14]
 8002188:	429a      	cmp	r2, r3
 800218a:	f000 809b 	beq.w	80022c4 <control_update+0x364>
		// then save new dutycycle
		dutycycle = new_dc;
 800218e:	4a29      	ldr	r2, [pc, #164]	@ (8002234 <control_update+0x2d4>)
 8002190:	89fb      	ldrh	r3, [r7, #14]
 8002192:	8013      	strh	r3, [r2, #0]
		//set the new timer dutycycle register
		//Timer 1
		TIM1->CCR1 = dutycycle;   //Calls the duty cycle on the timers at the desired channel
 8002194:	4b27      	ldr	r3, [pc, #156]	@ (8002234 <control_update+0x2d4>)
 8002196:	881a      	ldrh	r2, [r3, #0]
 8002198:	4b27      	ldr	r3, [pc, #156]	@ (8002238 <control_update+0x2d8>)
 800219a:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = dutycycle;
 800219c:	4b25      	ldr	r3, [pc, #148]	@ (8002234 <control_update+0x2d4>)
 800219e:	881a      	ldrh	r2, [r3, #0]
 80021a0:	4b25      	ldr	r3, [pc, #148]	@ (8002238 <control_update+0x2d8>)
 80021a2:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = dutycycle;
 80021a4:	4b23      	ldr	r3, [pc, #140]	@ (8002234 <control_update+0x2d4>)
 80021a6:	881a      	ldrh	r2, [r3, #0]
 80021a8:	4b23      	ldr	r3, [pc, #140]	@ (8002238 <control_update+0x2d8>)
 80021aa:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = dutycycle;
 80021ac:	4b21      	ldr	r3, [pc, #132]	@ (8002234 <control_update+0x2d4>)
 80021ae:	881a      	ldrh	r2, [r3, #0]
 80021b0:	4b21      	ldr	r3, [pc, #132]	@ (8002238 <control_update+0x2d8>)
 80021b2:	641a      	str	r2, [r3, #64]	@ 0x40
		//End Timer 1


		//Timer 2
		TIM2->CCR1 = dutycycle;
 80021b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002234 <control_update+0x2d4>)
 80021b6:	881a      	ldrh	r2, [r3, #0]
 80021b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80021bc:	635a      	str	r2, [r3, #52]	@ 0x34
		//End Timer 2

		//Timer 4
		TIM4->CCR1 = dutycycle;
 80021be:	4b1d      	ldr	r3, [pc, #116]	@ (8002234 <control_update+0x2d4>)
 80021c0:	881a      	ldrh	r2, [r3, #0]
 80021c2:	4b1e      	ldr	r3, [pc, #120]	@ (800223c <control_update+0x2dc>)
 80021c4:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM4->CCR2 = dutycycle;
 80021c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002234 <control_update+0x2d4>)
 80021c8:	881a      	ldrh	r2, [r3, #0]
 80021ca:	4b1c      	ldr	r3, [pc, #112]	@ (800223c <control_update+0x2dc>)
 80021cc:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM4->CCR3 = dutycycle;
 80021ce:	4b19      	ldr	r3, [pc, #100]	@ (8002234 <control_update+0x2d4>)
 80021d0:	881a      	ldrh	r2, [r3, #0]
 80021d2:	4b1a      	ldr	r3, [pc, #104]	@ (800223c <control_update+0x2dc>)
 80021d4:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM4->CCR4 = dutycycle;
 80021d6:	4b17      	ldr	r3, [pc, #92]	@ (8002234 <control_update+0x2d4>)
 80021d8:	881a      	ldrh	r2, [r3, #0]
 80021da:	4b18      	ldr	r3, [pc, #96]	@ (800223c <control_update+0x2dc>)
 80021dc:	641a      	str	r2, [r3, #64]	@ 0x40
		//End Timer 4


		//Timer 5
		TIM5->CCR2 = dutycycle;
 80021de:	4b15      	ldr	r3, [pc, #84]	@ (8002234 <control_update+0x2d4>)
 80021e0:	881a      	ldrh	r2, [r3, #0]
 80021e2:	4b17      	ldr	r3, [pc, #92]	@ (8002240 <control_update+0x2e0>)
 80021e4:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM5->CCR3 = dutycycle;
 80021e6:	4b13      	ldr	r3, [pc, #76]	@ (8002234 <control_update+0x2d4>)
 80021e8:	881a      	ldrh	r2, [r3, #0]
 80021ea:	4b15      	ldr	r3, [pc, #84]	@ (8002240 <control_update+0x2e0>)
 80021ec:	63da      	str	r2, [r3, #60]	@ 0x3c
		//End Timer 5


		//Timer 8
		TIM8->CCR4 = dutycycle;
 80021ee:	4b11      	ldr	r3, [pc, #68]	@ (8002234 <control_update+0x2d4>)
 80021f0:	881a      	ldrh	r2, [r3, #0]
 80021f2:	4b14      	ldr	r3, [pc, #80]	@ (8002244 <control_update+0x2e4>)
 80021f4:	641a      	str	r2, [r3, #64]	@ 0x40
		//End Timer 8


		//Timer 12
		TIM12->CCR2 = dutycycle;
 80021f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002234 <control_update+0x2d4>)
 80021f8:	881a      	ldrh	r2, [r3, #0]
 80021fa:	4b13      	ldr	r3, [pc, #76]	@ (8002248 <control_update+0x2e8>)
 80021fc:	639a      	str	r2, [r3, #56]	@ 0x38
		//End Timer 12


		//Timer 13
		TIM13->CCR1 = dutycycle;
 80021fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002234 <control_update+0x2d4>)
 8002200:	881a      	ldrh	r2, [r3, #0]
 8002202:	4b12      	ldr	r3, [pc, #72]	@ (800224c <control_update+0x2ec>)
 8002204:	635a      	str	r2, [r3, #52]	@ 0x34
		//End Timer 13


		//Timer 14
		TIM14->CCR1 = dutycycle;
 8002206:	4b0b      	ldr	r3, [pc, #44]	@ (8002234 <control_update+0x2d4>)
 8002208:	881a      	ldrh	r2, [r3, #0]
 800220a:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <control_update+0x2f0>)
 800220c:	635a      	str	r2, [r3, #52]	@ 0x34
		//End Timer 14


		//Timer 15
		TIM15->CCR1 = dutycycle;
 800220e:	4b09      	ldr	r3, [pc, #36]	@ (8002234 <control_update+0x2d4>)
 8002210:	881a      	ldrh	r2, [r3, #0]
 8002212:	e01f      	b.n	8002254 <control_update+0x2f4>
 8002214:	f3af 8000 	nop.w
 8002218:	cccccccd 	.word	0xcccccccd
 800221c:	3ffccccc 	.word	0x3ffccccc
 8002220:	24000004 	.word	0x24000004
 8002224:	58021000 	.word	0x58021000
 8002228:	58020400 	.word	0x58020400
 800222c:	58020800 	.word	0x58020800
 8002230:	58020c00 	.word	0x58020c00
 8002234:	240026dc 	.word	0x240026dc
 8002238:	40010000 	.word	0x40010000
 800223c:	40000800 	.word	0x40000800
 8002240:	40000c00 	.word	0x40000c00
 8002244:	40010400 	.word	0x40010400
 8002248:	40001800 	.word	0x40001800
 800224c:	40001c00 	.word	0x40001c00
 8002250:	40002000 	.word	0x40002000
 8002254:	4b1f      	ldr	r3, [pc, #124]	@ (80022d4 <control_update+0x374>)
 8002256:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM15->CCR2 = dutycycle;
 8002258:	4b1f      	ldr	r3, [pc, #124]	@ (80022d8 <control_update+0x378>)
 800225a:	881a      	ldrh	r2, [r3, #0]
 800225c:	4b1d      	ldr	r3, [pc, #116]	@ (80022d4 <control_update+0x374>)
 800225e:	639a      	str	r2, [r3, #56]	@ 0x38
		//End Timer 15


		//Timer 16
		TIM16->CCR1 = dutycycle;
 8002260:	4b1d      	ldr	r3, [pc, #116]	@ (80022d8 <control_update+0x378>)
 8002262:	881a      	ldrh	r2, [r3, #0]
 8002264:	4b1d      	ldr	r3, [pc, #116]	@ (80022dc <control_update+0x37c>)
 8002266:	635a      	str	r2, [r3, #52]	@ 0x34
		//End Timer 16


		//HRTIM CODE GOES HERE ********
		//HRTIM CHA
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP1xR = dutycycle;
 8002268:	4b1b      	ldr	r3, [pc, #108]	@ (80022d8 <control_update+0x378>)
 800226a:	881a      	ldrh	r2, [r3, #0]
 800226c:	4b1c      	ldr	r3, [pc, #112]	@ (80022e0 <control_update+0x380>)
 800226e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP2xR = dutycycle;
 8002272:	4b19      	ldr	r3, [pc, #100]	@ (80022d8 <control_update+0x378>)
 8002274:	881a      	ldrh	r2, [r3, #0]
 8002276:	4b1a      	ldr	r3, [pc, #104]	@ (80022e0 <control_update+0x380>)
 8002278:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		//End HRTIM CHA

		//HRTIM CHB
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP1xR = dutycycle;
 800227c:	4b16      	ldr	r3, [pc, #88]	@ (80022d8 <control_update+0x378>)
 800227e:	881a      	ldrh	r2, [r3, #0]
 8002280:	4b17      	ldr	r3, [pc, #92]	@ (80022e0 <control_update+0x380>)
 8002282:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP2xR = dutycycle;
 8002286:	4b14      	ldr	r3, [pc, #80]	@ (80022d8 <control_update+0x378>)
 8002288:	881a      	ldrh	r2, [r3, #0]
 800228a:	4b15      	ldr	r3, [pc, #84]	@ (80022e0 <control_update+0x380>)
 800228c:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
		//End HRTIM CHB

		//HRTIM CHC
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP1xR = dutycycle;
 8002290:	4b11      	ldr	r3, [pc, #68]	@ (80022d8 <control_update+0x378>)
 8002292:	881a      	ldrh	r2, [r3, #0]
 8002294:	4b12      	ldr	r3, [pc, #72]	@ (80022e0 <control_update+0x380>)
 8002296:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP2xR = dutycycle;
 800229a:	4b0f      	ldr	r3, [pc, #60]	@ (80022d8 <control_update+0x378>)
 800229c:	881a      	ldrh	r2, [r3, #0]
 800229e:	4b10      	ldr	r3, [pc, #64]	@ (80022e0 <control_update+0x380>)
 80022a0:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
		//End HRTIM CHC

		//HRTIM CHD
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = dutycycle;
 80022a4:	4b0c      	ldr	r3, [pc, #48]	@ (80022d8 <control_update+0x378>)
 80022a6:	881a      	ldrh	r2, [r3, #0]
 80022a8:	4b0d      	ldr	r3, [pc, #52]	@ (80022e0 <control_update+0x380>)
 80022aa:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP2xR = dutycycle;
 80022ae:	4b0a      	ldr	r3, [pc, #40]	@ (80022d8 <control_update+0x378>)
 80022b0:	881a      	ldrh	r2, [r3, #0]
 80022b2:	4b0b      	ldr	r3, [pc, #44]	@ (80022e0 <control_update+0x380>)
 80022b4:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
		//End HRTIM CHD
		//END HRTIM CODE HERE


		//LPTIM1
		LPTIM1->CMP = dutycycle/2;
 80022b8:	4b07      	ldr	r3, [pc, #28]	@ (80022d8 <control_update+0x378>)
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	085b      	lsrs	r3, r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	4b08      	ldr	r3, [pc, #32]	@ (80022e4 <control_update+0x384>)
 80022c2:	615a      	str	r2, [r3, #20]
		//End LPTIM1

	}

	// reset timer flag
	ctrl_tmr_expired = FALSE;
 80022c4:	4b08      	ldr	r3, [pc, #32]	@ (80022e8 <control_update+0x388>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]
}
 80022ca:	bf00      	nop
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40014000 	.word	0x40014000
 80022d8:	240026dc 	.word	0x240026dc
 80022dc:	40014400 	.word	0x40014400
 80022e0:	40017400 	.word	0x40017400
 80022e4:	40002400 	.word	0x40002400
 80022e8:	2400069c 	.word	0x2400069c
 80022ec:	00000000 	.word	0x00000000

080022f0 <calc_dutycycle>:

static uint16_t calc_dutycycle(double cmd, double vss)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	ed87 0b02 	vstr	d0, [r7, #8]
 80022fa:	ed87 1b00 	vstr	d1, [r7]
	//	@ param cmd command voltage
	//	@ param vss supply voltage
	//	@ return dutycycle

	// duty cycle variable
	uint16_t dc={0};
 80022fe:	2300      	movs	r3, #0
 8002300:	82fb      	strh	r3, [r7, #22]

	dc = (uint16_t)(cmd/vss * (double)PERIOD);
 8002302:	ed97 5b02 	vldr	d5, [r7, #8]
 8002306:	ed97 6b00 	vldr	d6, [r7]
 800230a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800230e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8002340 <calc_dutycycle+0x50>
 8002312:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002316:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800231a:	ee17 3a90 	vmov	r3, s15
 800231e:	82fb      	strh	r3, [r7, #22]
	// keep the dutycycle within the period of the PWM signal
	if(dc>PERIOD) dc = PERIOD;
 8002320:	8afb      	ldrh	r3, [r7, #22]
 8002322:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8002326:	4293      	cmp	r3, r2
 8002328:	d902      	bls.n	8002330 <calc_dutycycle+0x40>
 800232a:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 800232e:	82fb      	strh	r3, [r7, #22]

	return dc;
 8002330:	8afb      	ldrh	r3, [r7, #22]
}
 8002332:	4618      	mov	r0, r3
 8002334:	371c      	adds	r7, #28
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	00000000 	.word	0x00000000
 8002344:	40d76fc0 	.word	0x40d76fc0

08002348 <gen_sine>:

static void gen_sine(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
	int i = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
	double scale = TWO_PI/SIN_PERIOD;
 8002352:	a316      	add	r3, pc, #88	@ (adr r3, 80023ac <gen_sine+0x64>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	e9c7 2300 	strd	r2, r3, [r7]
	for(i=0; i<SIN_PERIOD; i++ )
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	e017      	b.n	8002392 <gen_sine+0x4a>
	{
		sine_vals[i] = sin(i*scale);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	ee07 3a90 	vmov	s15, r3
 8002368:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800236c:	ed97 7b00 	vldr	d7, [r7]
 8002370:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002374:	eeb0 0b47 	vmov.f64	d0, d7
 8002378:	f00c fefa 	bl	800f170 <sin>
 800237c:	eeb0 7b40 	vmov.f64	d7, d0
 8002380:	4a09      	ldr	r2, [pc, #36]	@ (80023a8 <gen_sine+0x60>)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	ed83 7b00 	vstr	d7, [r3]
	for(i=0; i<SIN_PERIOD; i++ )
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3301      	adds	r3, #1
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002398:	dbe3      	blt.n	8002362 <gen_sine+0x1a>
	}
}
 800239a:	bf00      	nop
 800239c:	bf00      	nop
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	f3af 8000 	nop.w
 80023a8:	240006a8 	.word	0x240006a8
 80023ac:	b68b71c3 	.word	0xb68b71c3
 80023b0:	3f79bc65 	.word	0x3f79bc65

080023b4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80023ba:	463b      	mov	r3, r7
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80023c6:	f001 f8a5 	bl	8003514 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80023ca:	2301      	movs	r3, #1
 80023cc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80023d6:	231f      	movs	r3, #31
 80023d8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80023da:	2387      	movs	r3, #135	@ 0x87
 80023dc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80023de:	2300      	movs	r3, #0
 80023e0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80023e2:	2300      	movs	r3, #0
 80023e4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80023e6:	2301      	movs	r3, #1
 80023e8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80023ea:	2301      	movs	r3, #1
 80023ec:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80023f6:	463b      	mov	r3, r7
 80023f8:	4618      	mov	r0, r3
 80023fa:	f001 f8c3 	bl	8003584 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80023fe:	2004      	movs	r0, #4
 8002400:	f001 f8a0 	bl	8003544 <HAL_MPU_Enable>

}
 8002404:	bf00      	nop
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002410:	b672      	cpsid	i
}
 8002412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002414:	bf00      	nop
 8002416:	e7fd      	b.n	8002414 <Error_Handler+0x8>

08002418 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241e:	4b0a      	ldr	r3, [pc, #40]	@ (8002448 <HAL_MspInit+0x30>)
 8002420:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002424:	4a08      	ldr	r2, [pc, #32]	@ (8002448 <HAL_MspInit+0x30>)
 8002426:	f043 0302 	orr.w	r3, r3, #2
 800242a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800242e:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <HAL_MspInit+0x30>)
 8002430:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	58024400 	.word	0x58024400

0800244c <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b0b4      	sub	sp, #208	@ 0xd0
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002454:	f107 0310 	add.w	r3, r7, #16
 8002458:	22c0      	movs	r2, #192	@ 0xc0
 800245a:	2100      	movs	r1, #0
 800245c:	4618      	mov	r0, r3
 800245e:	f00a ffd0 	bl	800d402 <memset>
  if(hhrtim->Instance==HRTIM1)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a14      	ldr	r2, [pc, #80]	@ (80024b8 <HAL_HRTIM_MspInit+0x6c>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d121      	bne.n	80024b0 <HAL_HRTIM_MspInit+0x64>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 800246c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8002478:	2300      	movs	r3, #0
 800247a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800247e:	f107 0310 	add.w	r3, r7, #16
 8002482:	4618      	mov	r0, r3
 8002484:	f004 fd4a 	bl	8006f1c <HAL_RCCEx_PeriphCLKConfig>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 800248e:	f7ff ffbd 	bl	800240c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8002492:	4b0a      	ldr	r3, [pc, #40]	@ (80024bc <HAL_HRTIM_MspInit+0x70>)
 8002494:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002498:	4a08      	ldr	r2, [pc, #32]	@ (80024bc <HAL_HRTIM_MspInit+0x70>)
 800249a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800249e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024a2:	4b06      	ldr	r3, [pc, #24]	@ (80024bc <HAL_HRTIM_MspInit+0x70>)
 80024a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 80024b0:	bf00      	nop
 80024b2:	37d0      	adds	r7, #208	@ 0xd0
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40017400 	.word	0x40017400
 80024bc:	58024400 	.word	0x58024400

080024c0 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	@ 0x28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a23      	ldr	r2, [pc, #140]	@ (800256c <HAL_HRTIM_MspPostInit+0xac>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d13f      	bne.n	8002562 <HAL_HRTIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e2:	4b23      	ldr	r3, [pc, #140]	@ (8002570 <HAL_HRTIM_MspPostInit+0xb0>)
 80024e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024e8:	4a21      	ldr	r2, [pc, #132]	@ (8002570 <HAL_HRTIM_MspPostInit+0xb0>)
 80024ea:	f043 0304 	orr.w	r3, r3, #4
 80024ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002570 <HAL_HRTIM_MspPostInit+0xb0>)
 80024f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002500:	4b1b      	ldr	r3, [pc, #108]	@ (8002570 <HAL_HRTIM_MspPostInit+0xb0>)
 8002502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002506:	4a1a      	ldr	r2, [pc, #104]	@ (8002570 <HAL_HRTIM_MspPostInit+0xb0>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002510:	4b17      	ldr	r3, [pc, #92]	@ (8002570 <HAL_HRTIM_MspPostInit+0xb0>)
 8002512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> HRTIM_CHC1
    PA10     ------> HRTIM_CHC2
    PA11     ------> HRTIM_CHD1
    PA12     ------> HRTIM_CHD2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800251e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002524:	2302      	movs	r3, #2
 8002526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252c:	2303      	movs	r3, #3
 800252e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8002530:	2301      	movs	r3, #1
 8002532:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002534:	f107 0314 	add.w	r3, r7, #20
 8002538:	4619      	mov	r1, r3
 800253a:	480e      	ldr	r0, [pc, #56]	@ (8002574 <HAL_HRTIM_MspPostInit+0xb4>)
 800253c:	f001 fdc6 	bl	80040cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002540:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002544:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002546:	2302      	movs	r3, #2
 8002548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254e:	2303      	movs	r3, #3
 8002550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8002552:	2302      	movs	r3, #2
 8002554:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002556:	f107 0314 	add.w	r3, r7, #20
 800255a:	4619      	mov	r1, r3
 800255c:	4806      	ldr	r0, [pc, #24]	@ (8002578 <HAL_HRTIM_MspPostInit+0xb8>)
 800255e:	f001 fdb5 	bl	80040cc <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8002562:	bf00      	nop
 8002564:	3728      	adds	r7, #40	@ 0x28
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40017400 	.word	0x40017400
 8002570:	58024400 	.word	0x58024400
 8002574:	58020800 	.word	0x58020800
 8002578:	58020000 	.word	0x58020000

0800257c <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b0ba      	sub	sp, #232	@ 0xe8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002584:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002594:	f107 0310 	add.w	r3, r7, #16
 8002598:	22c0      	movs	r2, #192	@ 0xc0
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f00a ff30 	bl	800d402 <memset>
  if(hlptim->Instance==LPTIM1)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a2b      	ldr	r2, [pc, #172]	@ (8002654 <HAL_LPTIM_MspInit+0xd8>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d14e      	bne.n	800264a <HAL_LPTIM_MspInit+0xce>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80025ac:	f04f 0220 	mov.w	r2, #32
 80025b0:	f04f 0300 	mov.w	r3, #0
 80025b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025be:	f107 0310 	add.w	r3, r7, #16
 80025c2:	4618      	mov	r0, r3
 80025c4:	f004 fcaa 	bl	8006f1c <HAL_RCCEx_PeriphCLKConfig>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_LPTIM_MspInit+0x56>
    {
      Error_Handler();
 80025ce:	f7ff ff1d 	bl	800240c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80025d2:	4b21      	ldr	r3, [pc, #132]	@ (8002658 <HAL_LPTIM_MspInit+0xdc>)
 80025d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002658 <HAL_LPTIM_MspInit+0xdc>)
 80025da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80025e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002658 <HAL_LPTIM_MspInit+0xdc>)
 80025e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025f0:	4b19      	ldr	r3, [pc, #100]	@ (8002658 <HAL_LPTIM_MspInit+0xdc>)
 80025f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025f6:	4a18      	ldr	r2, [pc, #96]	@ (8002658 <HAL_LPTIM_MspInit+0xdc>)
 80025f8:	f043 0308 	orr.w	r3, r3, #8
 80025fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002600:	4b15      	ldr	r3, [pc, #84]	@ (8002658 <HAL_LPTIM_MspInit+0xdc>)
 8002602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration
    PD13     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800260e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002612:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	2300      	movs	r3, #0
 8002624:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8002628:	2301      	movs	r3, #1
 800262a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800262e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002632:	4619      	mov	r1, r3
 8002634:	4809      	ldr	r0, [pc, #36]	@ (800265c <HAL_LPTIM_MspInit+0xe0>)
 8002636:	f001 fd49 	bl	80040cc <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800263a:	2200      	movs	r2, #0
 800263c:	2100      	movs	r1, #0
 800263e:	205d      	movs	r0, #93	@ 0x5d
 8002640:	f000 ff33 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002644:	205d      	movs	r0, #93	@ 0x5d
 8002646:	f000 ff4a 	bl	80034de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800264a:	bf00      	nop
 800264c:	37e8      	adds	r7, #232	@ 0xe8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40002400 	.word	0x40002400
 8002658:	58024400 	.word	0x58024400
 800265c:	58020c00 	.word	0x58020c00

08002660 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08c      	sub	sp, #48	@ 0x30
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a99      	ldr	r2, [pc, #612]	@ (80028d4 <HAL_TIM_Base_MspInit+0x274>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d117      	bne.n	80026a2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002672:	4b99      	ldr	r3, [pc, #612]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 8002674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002678:	4a97      	ldr	r2, [pc, #604]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002682:	4b95      	ldr	r3, [pc, #596]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 8002684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800268e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002690:	2200      	movs	r2, #0
 8002692:	2100      	movs	r1, #0
 8002694:	2019      	movs	r0, #25
 8002696:	f000 ff08 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800269a:	2019      	movs	r0, #25
 800269c:	f000 ff1f 	bl	80034de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80026a0:	e113      	b.n	80028ca <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM2)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026aa:	d117      	bne.n	80026dc <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026ac:	4b8a      	ldr	r3, [pc, #552]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 80026ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026b2:	4a89      	ldr	r2, [pc, #548]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026bc:	4b86      	ldr	r3, [pc, #536]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 80026be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	201c      	movs	r0, #28
 80026d0:	f000 feeb 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026d4:	201c      	movs	r0, #28
 80026d6:	f000 ff02 	bl	80034de <HAL_NVIC_EnableIRQ>
}
 80026da:	e0f6      	b.n	80028ca <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM4)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a7e      	ldr	r2, [pc, #504]	@ (80028dc <HAL_TIM_Base_MspInit+0x27c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d117      	bne.n	8002716 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026e6:	4b7c      	ldr	r3, [pc, #496]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 80026e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026ec:	4a7a      	ldr	r2, [pc, #488]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 80026ee:	f043 0304 	orr.w	r3, r3, #4
 80026f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026f6:	4b78      	ldr	r3, [pc, #480]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 80026f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	627b      	str	r3, [r7, #36]	@ 0x24
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002704:	2200      	movs	r2, #0
 8002706:	2100      	movs	r1, #0
 8002708:	201e      	movs	r0, #30
 800270a:	f000 fece 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800270e:	201e      	movs	r0, #30
 8002710:	f000 fee5 	bl	80034de <HAL_NVIC_EnableIRQ>
}
 8002714:	e0d9      	b.n	80028ca <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM5)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a71      	ldr	r2, [pc, #452]	@ (80028e0 <HAL_TIM_Base_MspInit+0x280>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d117      	bne.n	8002750 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002720:	4b6d      	ldr	r3, [pc, #436]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 8002722:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002726:	4a6c      	ldr	r2, [pc, #432]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 8002728:	f043 0308 	orr.w	r3, r3, #8
 800272c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002730:	4b69      	ldr	r3, [pc, #420]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 8002732:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	623b      	str	r3, [r7, #32]
 800273c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800273e:	2200      	movs	r2, #0
 8002740:	2100      	movs	r1, #0
 8002742:	2032      	movs	r0, #50	@ 0x32
 8002744:	f000 feb1 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002748:	2032      	movs	r0, #50	@ 0x32
 800274a:	f000 fec8 	bl	80034de <HAL_NVIC_EnableIRQ>
}
 800274e:	e0bc      	b.n	80028ca <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM8)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a63      	ldr	r2, [pc, #396]	@ (80028e4 <HAL_TIM_Base_MspInit+0x284>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d127      	bne.n	80027aa <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800275a:	4b5f      	ldr	r3, [pc, #380]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 800275c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002760:	4a5d      	ldr	r2, [pc, #372]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 8002762:	f043 0302 	orr.w	r3, r3, #2
 8002766:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800276a:	4b5b      	ldr	r3, [pc, #364]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 800276c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	61fb      	str	r3, [r7, #28]
 8002776:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002778:	2200      	movs	r2, #0
 800277a:	2100      	movs	r1, #0
 800277c:	202b      	movs	r0, #43	@ 0x2b
 800277e:	f000 fe94 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002782:	202b      	movs	r0, #43	@ 0x2b
 8002784:	f000 feab 	bl	80034de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002788:	2200      	movs	r2, #0
 800278a:	2100      	movs	r1, #0
 800278c:	202c      	movs	r0, #44	@ 0x2c
 800278e:	f000 fe8c 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002792:	202c      	movs	r0, #44	@ 0x2c
 8002794:	f000 fea3 	bl	80034de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002798:	2200      	movs	r2, #0
 800279a:	2100      	movs	r1, #0
 800279c:	202d      	movs	r0, #45	@ 0x2d
 800279e:	f000 fe84 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80027a2:	202d      	movs	r0, #45	@ 0x2d
 80027a4:	f000 fe9b 	bl	80034de <HAL_NVIC_EnableIRQ>
}
 80027a8:	e08f      	b.n	80028ca <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM12)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a4e      	ldr	r2, [pc, #312]	@ (80028e8 <HAL_TIM_Base_MspInit+0x288>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d117      	bne.n	80027e4 <HAL_TIM_Base_MspInit+0x184>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80027b4:	4b48      	ldr	r3, [pc, #288]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 80027b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027ba:	4a47      	ldr	r2, [pc, #284]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 80027bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80027c4:	4b44      	ldr	r3, [pc, #272]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 80027c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ce:	61bb      	str	r3, [r7, #24]
 80027d0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80027d2:	2200      	movs	r2, #0
 80027d4:	2100      	movs	r1, #0
 80027d6:	202b      	movs	r0, #43	@ 0x2b
 80027d8:	f000 fe67 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80027dc:	202b      	movs	r0, #43	@ 0x2b
 80027de:	f000 fe7e 	bl	80034de <HAL_NVIC_EnableIRQ>
}
 80027e2:	e072      	b.n	80028ca <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM13)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a40      	ldr	r2, [pc, #256]	@ (80028ec <HAL_TIM_Base_MspInit+0x28c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d117      	bne.n	800281e <HAL_TIM_Base_MspInit+0x1be>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80027ee:	4b3a      	ldr	r3, [pc, #232]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 80027f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027f4:	4a38      	ldr	r2, [pc, #224]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 80027f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027fa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80027fe:	4b36      	ldr	r3, [pc, #216]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 8002800:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800280c:	2200      	movs	r2, #0
 800280e:	2100      	movs	r1, #0
 8002810:	202c      	movs	r0, #44	@ 0x2c
 8002812:	f000 fe4a 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002816:	202c      	movs	r0, #44	@ 0x2c
 8002818:	f000 fe61 	bl	80034de <HAL_NVIC_EnableIRQ>
}
 800281c:	e055      	b.n	80028ca <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM14)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a33      	ldr	r2, [pc, #204]	@ (80028f0 <HAL_TIM_Base_MspInit+0x290>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d117      	bne.n	8002858 <HAL_TIM_Base_MspInit+0x1f8>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002828:	4b2b      	ldr	r3, [pc, #172]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 800282a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800282e:	4a2a      	ldr	r2, [pc, #168]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 8002830:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002834:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002838:	4b27      	ldr	r3, [pc, #156]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 800283a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800283e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002846:	2200      	movs	r2, #0
 8002848:	2100      	movs	r1, #0
 800284a:	202d      	movs	r0, #45	@ 0x2d
 800284c:	f000 fe2d 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002850:	202d      	movs	r0, #45	@ 0x2d
 8002852:	f000 fe44 	bl	80034de <HAL_NVIC_EnableIRQ>
}
 8002856:	e038      	b.n	80028ca <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM15)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a25      	ldr	r2, [pc, #148]	@ (80028f4 <HAL_TIM_Base_MspInit+0x294>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d117      	bne.n	8002892 <HAL_TIM_Base_MspInit+0x232>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002862:	4b1d      	ldr	r3, [pc, #116]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 8002864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002868:	4a1b      	ldr	r2, [pc, #108]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 800286a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800286e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002872:	4b19      	ldr	r3, [pc, #100]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 8002874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002878:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8002880:	2200      	movs	r2, #0
 8002882:	2100      	movs	r1, #0
 8002884:	2074      	movs	r0, #116	@ 0x74
 8002886:	f000 fe10 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800288a:	2074      	movs	r0, #116	@ 0x74
 800288c:	f000 fe27 	bl	80034de <HAL_NVIC_EnableIRQ>
}
 8002890:	e01b      	b.n	80028ca <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM16)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a18      	ldr	r2, [pc, #96]	@ (80028f8 <HAL_TIM_Base_MspInit+0x298>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d116      	bne.n	80028ca <HAL_TIM_Base_MspInit+0x26a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800289c:	4b0e      	ldr	r3, [pc, #56]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 800289e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028a2:	4a0d      	ldr	r2, [pc, #52]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 80028a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028ac:	4b0a      	ldr	r3, [pc, #40]	@ (80028d8 <HAL_TIM_Base_MspInit+0x278>)
 80028ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80028ba:	2200      	movs	r2, #0
 80028bc:	2100      	movs	r1, #0
 80028be:	2075      	movs	r0, #117	@ 0x75
 80028c0:	f000 fdf3 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80028c4:	2075      	movs	r0, #117	@ 0x75
 80028c6:	f000 fe0a 	bl	80034de <HAL_NVIC_EnableIRQ>
}
 80028ca:	bf00      	nop
 80028cc:	3730      	adds	r7, #48	@ 0x30
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40010000 	.word	0x40010000
 80028d8:	58024400 	.word	0x58024400
 80028dc:	40000800 	.word	0x40000800
 80028e0:	40000c00 	.word	0x40000c00
 80028e4:	40010400 	.word	0x40010400
 80028e8:	40001800 	.word	0x40001800
 80028ec:	40001c00 	.word	0x40001c00
 80028f0:	40002000 	.word	0x40002000
 80028f4:	40014000 	.word	0x40014000
 80028f8:	40014400 	.word	0x40014400

080028fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b092      	sub	sp, #72	@ 0x48
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002904:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4aa4      	ldr	r2, [pc, #656]	@ (8002bac <HAL_TIM_MspPostInit+0x2b0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d120      	bne.n	8002960 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800291e:	4ba4      	ldr	r3, [pc, #656]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 8002920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002924:	4aa2      	ldr	r2, [pc, #648]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 8002926:	f043 0310 	orr.w	r3, r3, #16
 800292a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800292e:	4ba0      	ldr	r3, [pc, #640]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 8002930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	633b      	str	r3, [r7, #48]	@ 0x30
 800293a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800293c:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8002940:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002942:	2302      	movs	r3, #2
 8002944:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294a:	2300      	movs	r3, #0
 800294c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800294e:	2301      	movs	r3, #1
 8002950:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002952:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002956:	4619      	mov	r1, r3
 8002958:	4896      	ldr	r0, [pc, #600]	@ (8002bb4 <HAL_TIM_MspPostInit+0x2b8>)
 800295a:	f001 fbb7 	bl	80040cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800295e:	e189      	b.n	8002c74 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM2)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002968:	d11f      	bne.n	80029aa <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296a:	4b91      	ldr	r3, [pc, #580]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 800296c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002970:	4a8f      	ldr	r2, [pc, #572]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800297a:	4b8d      	ldr	r3, [pc, #564]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 800297c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002988:	2301      	movs	r3, #1
 800298a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298c:	2302      	movs	r3, #2
 800298e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002994:	2300      	movs	r3, #0
 8002996:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002998:	2301      	movs	r3, #1
 800299a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80029a0:	4619      	mov	r1, r3
 80029a2:	4885      	ldr	r0, [pc, #532]	@ (8002bb8 <HAL_TIM_MspPostInit+0x2bc>)
 80029a4:	f001 fb92 	bl	80040cc <HAL_GPIO_Init>
}
 80029a8:	e164      	b.n	8002c74 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM4)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a83      	ldr	r2, [pc, #524]	@ (8002bbc <HAL_TIM_MspPostInit+0x2c0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d13f      	bne.n	8002a34 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029b4:	4b7e      	ldr	r3, [pc, #504]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 80029b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029ba:	4a7d      	ldr	r2, [pc, #500]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 80029bc:	f043 0308 	orr.w	r3, r3, #8
 80029c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029c4:	4b7a      	ldr	r3, [pc, #488]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 80029c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d2:	4b77      	ldr	r3, [pc, #476]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 80029d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029d8:	4a75      	ldr	r2, [pc, #468]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 80029da:	f043 0302 	orr.w	r3, r3, #2
 80029de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029e2:	4b73      	ldr	r3, [pc, #460]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 80029e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80029f0:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80029f4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f6:	2302      	movs	r3, #2
 80029f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fe:	2300      	movs	r3, #0
 8002a00:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a02:	2302      	movs	r3, #2
 8002a04:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a06:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	486c      	ldr	r0, [pc, #432]	@ (8002bc0 <HAL_TIM_MspPostInit+0x2c4>)
 8002a0e:	f001 fb5d 	bl	80040cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a12:	2380      	movs	r3, #128	@ 0x80
 8002a14:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a16:	2302      	movs	r3, #2
 8002a18:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a22:	2302      	movs	r3, #2
 8002a24:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a26:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4865      	ldr	r0, [pc, #404]	@ (8002bc4 <HAL_TIM_MspPostInit+0x2c8>)
 8002a2e:	f001 fb4d 	bl	80040cc <HAL_GPIO_Init>
}
 8002a32:	e11f      	b.n	8002c74 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM5)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a63      	ldr	r2, [pc, #396]	@ (8002bc8 <HAL_TIM_MspPostInit+0x2cc>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d11f      	bne.n	8002a7e <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3e:	4b5c      	ldr	r3, [pc, #368]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 8002a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a44:	4a5a      	ldr	r2, [pc, #360]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a4e:	4b58      	ldr	r3, [pc, #352]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 8002a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	623b      	str	r3, [r7, #32]
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002a5c:	2306      	movs	r3, #6
 8002a5e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a60:	2302      	movs	r3, #2
 8002a62:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a70:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a74:	4619      	mov	r1, r3
 8002a76:	4850      	ldr	r0, [pc, #320]	@ (8002bb8 <HAL_TIM_MspPostInit+0x2bc>)
 8002a78:	f001 fb28 	bl	80040cc <HAL_GPIO_Init>
}
 8002a7c:	e0fa      	b.n	8002c74 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM8)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a52      	ldr	r2, [pc, #328]	@ (8002bcc <HAL_TIM_MspPostInit+0x2d0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d120      	bne.n	8002aca <HAL_TIM_MspPostInit+0x1ce>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a88:	4b49      	ldr	r3, [pc, #292]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 8002a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a8e:	4a48      	ldr	r2, [pc, #288]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 8002a90:	f043 0304 	orr.w	r3, r3, #4
 8002a94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a98:	4b45      	ldr	r3, [pc, #276]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 8002a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	61fb      	str	r3, [r7, #28]
 8002aa4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002aa6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002aaa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aac:	2302      	movs	r3, #2
 8002aae:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002abc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4843      	ldr	r0, [pc, #268]	@ (8002bd0 <HAL_TIM_MspPostInit+0x2d4>)
 8002ac4:	f001 fb02 	bl	80040cc <HAL_GPIO_Init>
}
 8002ac8:	e0d4      	b.n	8002c74 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM12)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a41      	ldr	r2, [pc, #260]	@ (8002bd4 <HAL_TIM_MspPostInit+0x2d8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d120      	bne.n	8002b16 <HAL_TIM_MspPostInit+0x21a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad4:	4b36      	ldr	r3, [pc, #216]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 8002ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ada:	4a35      	ldr	r2, [pc, #212]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 8002adc:	f043 0302 	orr.w	r3, r3, #2
 8002ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ae4:	4b32      	ldr	r3, [pc, #200]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 8002ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	61bb      	str	r3, [r7, #24]
 8002af0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002af2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002af6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af8:	2302      	movs	r3, #2
 8002afa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b00:	2300      	movs	r3, #0
 8002b02:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002b04:	2302      	movs	r3, #2
 8002b06:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b08:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	482d      	ldr	r0, [pc, #180]	@ (8002bc4 <HAL_TIM_MspPostInit+0x2c8>)
 8002b10:	f001 fadc 	bl	80040cc <HAL_GPIO_Init>
}
 8002b14:	e0ae      	b.n	8002c74 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM13)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2f      	ldr	r2, [pc, #188]	@ (8002bd8 <HAL_TIM_MspPostInit+0x2dc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d11f      	bne.n	8002b60 <HAL_TIM_MspPostInit+0x264>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b20:	4b23      	ldr	r3, [pc, #140]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 8002b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b26:	4a22      	ldr	r2, [pc, #136]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b30:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 8002b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b3e:	2340      	movs	r3, #64	@ 0x40
 8002b40:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b42:	2302      	movs	r3, #2
 8002b44:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002b4e:	2309      	movs	r3, #9
 8002b50:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b52:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002b56:	4619      	mov	r1, r3
 8002b58:	4817      	ldr	r0, [pc, #92]	@ (8002bb8 <HAL_TIM_MspPostInit+0x2bc>)
 8002b5a:	f001 fab7 	bl	80040cc <HAL_GPIO_Init>
}
 8002b5e:	e089      	b.n	8002c74 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM14)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a1d      	ldr	r2, [pc, #116]	@ (8002bdc <HAL_TIM_MspPostInit+0x2e0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d13a      	bne.n	8002be0 <HAL_TIM_MspPostInit+0x2e4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6a:	4b11      	ldr	r3, [pc, #68]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 8002b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b70:	4a0f      	ldr	r2, [pc, #60]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb0 <HAL_TIM_MspPostInit+0x2b4>)
 8002b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b88:	2380      	movs	r3, #128	@ 0x80
 8002b8a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b94:	2300      	movs	r3, #0
 8002b96:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002b98:	2309      	movs	r3, #9
 8002b9a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4805      	ldr	r0, [pc, #20]	@ (8002bb8 <HAL_TIM_MspPostInit+0x2bc>)
 8002ba4:	f001 fa92 	bl	80040cc <HAL_GPIO_Init>
}
 8002ba8:	e064      	b.n	8002c74 <HAL_TIM_MspPostInit+0x378>
 8002baa:	bf00      	nop
 8002bac:	40010000 	.word	0x40010000
 8002bb0:	58024400 	.word	0x58024400
 8002bb4:	58021000 	.word	0x58021000
 8002bb8:	58020000 	.word	0x58020000
 8002bbc:	40000800 	.word	0x40000800
 8002bc0:	58020c00 	.word	0x58020c00
 8002bc4:	58020400 	.word	0x58020400
 8002bc8:	40000c00 	.word	0x40000c00
 8002bcc:	40010400 	.word	0x40010400
 8002bd0:	58020800 	.word	0x58020800
 8002bd4:	40001800 	.word	0x40001800
 8002bd8:	40001c00 	.word	0x40001c00
 8002bdc:	40002000 	.word	0x40002000
  else if(htim->Instance==TIM15)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a25      	ldr	r2, [pc, #148]	@ (8002c7c <HAL_TIM_MspPostInit+0x380>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d11f      	bne.n	8002c2a <HAL_TIM_MspPostInit+0x32e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bea:	4b25      	ldr	r3, [pc, #148]	@ (8002c80 <HAL_TIM_MspPostInit+0x384>)
 8002bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bf0:	4a23      	ldr	r2, [pc, #140]	@ (8002c80 <HAL_TIM_MspPostInit+0x384>)
 8002bf2:	f043 0310 	orr.w	r3, r3, #16
 8002bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bfa:	4b21      	ldr	r3, [pc, #132]	@ (8002c80 <HAL_TIM_MspPostInit+0x384>)
 8002bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002c08:	2360      	movs	r3, #96	@ 0x60
 8002c0a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c14:	2300      	movs	r3, #0
 8002c16:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002c18:	2304      	movs	r3, #4
 8002c1a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c1c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c20:	4619      	mov	r1, r3
 8002c22:	4818      	ldr	r0, [pc, #96]	@ (8002c84 <HAL_TIM_MspPostInit+0x388>)
 8002c24:	f001 fa52 	bl	80040cc <HAL_GPIO_Init>
}
 8002c28:	e024      	b.n	8002c74 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM16)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a16      	ldr	r2, [pc, #88]	@ (8002c88 <HAL_TIM_MspPostInit+0x38c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d11f      	bne.n	8002c74 <HAL_TIM_MspPostInit+0x378>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c34:	4b12      	ldr	r3, [pc, #72]	@ (8002c80 <HAL_TIM_MspPostInit+0x384>)
 8002c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c3a:	4a11      	ldr	r2, [pc, #68]	@ (8002c80 <HAL_TIM_MspPostInit+0x384>)
 8002c3c:	f043 0302 	orr.w	r3, r3, #2
 8002c40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c44:	4b0e      	ldr	r3, [pc, #56]	@ (8002c80 <HAL_TIM_MspPostInit+0x384>)
 8002c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c56:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c60:	2300      	movs	r3, #0
 8002c62:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002c64:	2301      	movs	r3, #1
 8002c66:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c68:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4807      	ldr	r0, [pc, #28]	@ (8002c8c <HAL_TIM_MspPostInit+0x390>)
 8002c70:	f001 fa2c 	bl	80040cc <HAL_GPIO_Init>
}
 8002c74:	bf00      	nop
 8002c76:	3748      	adds	r7, #72	@ 0x48
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40014000 	.word	0x40014000
 8002c80:	58024400 	.word	0x58024400
 8002c84:	58021000 	.word	0x58021000
 8002c88:	40014400 	.word	0x40014400
 8002c8c:	58020400 	.word	0x58020400

08002c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b0ba      	sub	sp, #232	@ 0xe8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c98:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
 8002ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ca8:	f107 0310 	add.w	r3, r7, #16
 8002cac:	22c0      	movs	r2, #192	@ 0xc0
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f00a fba6 	bl	800d402 <memset>
  if(huart->Instance==UART4)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a2b      	ldr	r2, [pc, #172]	@ (8002d68 <HAL_UART_MspInit+0xd8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d14e      	bne.n	8002d5e <HAL_UART_MspInit+0xce>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002cc0:	f04f 0202 	mov.w	r2, #2
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cd2:	f107 0310 	add.w	r3, r7, #16
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f004 f920 	bl	8006f1c <HAL_RCCEx_PeriphCLKConfig>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002ce2:	f7ff fb93 	bl	800240c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002ce6:	4b21      	ldr	r3, [pc, #132]	@ (8002d6c <HAL_UART_MspInit+0xdc>)
 8002ce8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cec:	4a1f      	ldr	r2, [pc, #124]	@ (8002d6c <HAL_UART_MspInit+0xdc>)
 8002cee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002cf2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d6c <HAL_UART_MspInit+0xdc>)
 8002cf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d04:	4b19      	ldr	r3, [pc, #100]	@ (8002d6c <HAL_UART_MspInit+0xdc>)
 8002d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d0a:	4a18      	ldr	r2, [pc, #96]	@ (8002d6c <HAL_UART_MspInit+0xdc>)
 8002d0c:	f043 0304 	orr.w	r3, r3, #4
 8002d10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d14:	4b15      	ldr	r3, [pc, #84]	@ (8002d6c <HAL_UART_MspInit+0xdc>)
 8002d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	60bb      	str	r3, [r7, #8]
 8002d20:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d22:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002d26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d36:	2300      	movs	r3, #0
 8002d38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002d3c:	2308      	movs	r3, #8
 8002d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d42:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002d46:	4619      	mov	r1, r3
 8002d48:	4809      	ldr	r0, [pc, #36]	@ (8002d70 <HAL_UART_MspInit+0xe0>)
 8002d4a:	f001 f9bf 	bl	80040cc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2100      	movs	r1, #0
 8002d52:	2034      	movs	r0, #52	@ 0x34
 8002d54:	f000 fba9 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002d58:	2034      	movs	r0, #52	@ 0x34
 8002d5a:	f000 fbc0 	bl	80034de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002d5e:	bf00      	nop
 8002d60:	37e8      	adds	r7, #232	@ 0xe8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40004c00 	.word	0x40004c00
 8002d6c:	58024400 	.word	0x58024400
 8002d70:	58020800 	.word	0x58020800

08002d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d78:	bf00      	nop
 8002d7a:	e7fd      	b.n	8002d78 <NMI_Handler+0x4>

08002d7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d80:	bf00      	nop
 8002d82:	e7fd      	b.n	8002d80 <HardFault_Handler+0x4>

08002d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d88:	bf00      	nop
 8002d8a:	e7fd      	b.n	8002d88 <MemManage_Handler+0x4>

08002d8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d90:	bf00      	nop
 8002d92:	e7fd      	b.n	8002d90 <BusFault_Handler+0x4>

08002d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d98:	bf00      	nop
 8002d9a:	e7fd      	b.n	8002d98 <UsageFault_Handler+0x4>

08002d9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002daa:	b480      	push	{r7}
 8002dac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dbc:	bf00      	nop
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dca:	f000 fa67 	bl	800329c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002dd8:	4802      	ldr	r0, [pc, #8]	@ (8002de4 <TIM1_UP_IRQHandler+0x10>)
 8002dda:	f006 f90b 	bl	8008ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	24000310 	.word	0x24000310

08002de8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002dec:	4802      	ldr	r0, [pc, #8]	@ (8002df8 <TIM2_IRQHandler+0x10>)
 8002dee:	f006 f901 	bl	8008ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	2400035c 	.word	0x2400035c

08002dfc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002e00:	4802      	ldr	r0, [pc, #8]	@ (8002e0c <TIM4_IRQHandler+0x10>)
 8002e02:	f006 f8f7 	bl	8008ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	240003a8 	.word	0x240003a8

08002e10 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002e14:	4803      	ldr	r0, [pc, #12]	@ (8002e24 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8002e16:	f006 f8ed 	bl	8008ff4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8002e1a:	4803      	ldr	r0, [pc, #12]	@ (8002e28 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8002e1c:	f006 f8ea 	bl	8008ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	24000440 	.word	0x24000440
 8002e28:	2400048c 	.word	0x2400048c

08002e2c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002e30:	4803      	ldr	r0, [pc, #12]	@ (8002e40 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8002e32:	f006 f8df 	bl	8008ff4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8002e36:	4803      	ldr	r0, [pc, #12]	@ (8002e44 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8002e38:	f006 f8dc 	bl	8008ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002e3c:	bf00      	nop
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	24000440 	.word	0x24000440
 8002e44:	240004d8 	.word	0x240004d8

08002e48 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002e4c:	4803      	ldr	r0, [pc, #12]	@ (8002e5c <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8002e4e:	f006 f8d1 	bl	8008ff4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8002e52:	4803      	ldr	r0, [pc, #12]	@ (8002e60 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8002e54:	f006 f8ce 	bl	8008ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002e58:	bf00      	nop
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	24000440 	.word	0x24000440
 8002e60:	24000524 	.word	0x24000524

08002e64 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002e68:	4802      	ldr	r0, [pc, #8]	@ (8002e74 <TIM5_IRQHandler+0x10>)
 8002e6a:	f006 f8c3 	bl	8008ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	240003f4 	.word	0x240003f4

08002e78 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002e7c:	4802      	ldr	r0, [pc, #8]	@ (8002e88 <UART4_IRQHandler+0x10>)
 8002e7e:	f007 fa89 	bl	800a394 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	24000608 	.word	0x24000608

08002e8c <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002e90:	4802      	ldr	r0, [pc, #8]	@ (8002e9c <LPTIM1_IRQHandler+0x10>)
 8002e92:	f002 fd31 	bl	80058f8 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	240002d8 	.word	0x240002d8

08002ea0 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002ea4:	4802      	ldr	r0, [pc, #8]	@ (8002eb0 <TIM15_IRQHandler+0x10>)
 8002ea6:	f006 f8a5 	bl	8008ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	24000570 	.word	0x24000570

08002eb4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002eb8:	4802      	ldr	r0, [pc, #8]	@ (8002ec4 <TIM16_IRQHandler+0x10>)
 8002eba:	f006 f89b 	bl	8008ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	240005bc 	.word	0x240005bc

08002ec8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return 1;
 8002ecc:	2301      	movs	r3, #1
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <_kill>:

int _kill(int pid, int sig)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ee2:	f00a fae1 	bl	800d4a8 <__errno>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2216      	movs	r2, #22
 8002eea:	601a      	str	r2, [r3, #0]
  return -1;
 8002eec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <_exit>:

void _exit (int status)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f00:	f04f 31ff 	mov.w	r1, #4294967295
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7ff ffe7 	bl	8002ed8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f0a:	bf00      	nop
 8002f0c:	e7fd      	b.n	8002f0a <_exit+0x12>

08002f0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b086      	sub	sp, #24
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	e00a      	b.n	8002f36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f20:	f3af 8000 	nop.w
 8002f24:	4601      	mov	r1, r0
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	1c5a      	adds	r2, r3, #1
 8002f2a:	60ba      	str	r2, [r7, #8]
 8002f2c:	b2ca      	uxtb	r2, r1
 8002f2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	3301      	adds	r3, #1
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	dbf0      	blt.n	8002f20 <_read+0x12>
  }

  return len;
 8002f3e:	687b      	ldr	r3, [r7, #4]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	e009      	b.n	8002f6e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	60ba      	str	r2, [r7, #8]
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	dbf1      	blt.n	8002f5a <_write+0x12>
  }
  return len;
 8002f76:	687b      	ldr	r3, [r7, #4]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <_close>:

int _close(int file)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fa8:	605a      	str	r2, [r3, #4]
  return 0;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <_isatty>:

int _isatty(int file)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002fc0:	2301      	movs	r3, #1
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b085      	sub	sp, #20
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ff0:	4a14      	ldr	r2, [pc, #80]	@ (8003044 <_sbrk+0x5c>)
 8002ff2:	4b15      	ldr	r3, [pc, #84]	@ (8003048 <_sbrk+0x60>)
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ffc:	4b13      	ldr	r3, [pc, #76]	@ (800304c <_sbrk+0x64>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d102      	bne.n	800300a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003004:	4b11      	ldr	r3, [pc, #68]	@ (800304c <_sbrk+0x64>)
 8003006:	4a12      	ldr	r2, [pc, #72]	@ (8003050 <_sbrk+0x68>)
 8003008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800300a:	4b10      	ldr	r3, [pc, #64]	@ (800304c <_sbrk+0x64>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4413      	add	r3, r2
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	429a      	cmp	r2, r3
 8003016:	d207      	bcs.n	8003028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003018:	f00a fa46 	bl	800d4a8 <__errno>
 800301c:	4603      	mov	r3, r0
 800301e:	220c      	movs	r2, #12
 8003020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003022:	f04f 33ff 	mov.w	r3, #4294967295
 8003026:	e009      	b.n	800303c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003028:	4b08      	ldr	r3, [pc, #32]	@ (800304c <_sbrk+0x64>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800302e:	4b07      	ldr	r3, [pc, #28]	@ (800304c <_sbrk+0x64>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4413      	add	r3, r2
 8003036:	4a05      	ldr	r2, [pc, #20]	@ (800304c <_sbrk+0x64>)
 8003038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800303a:	68fb      	ldr	r3, [r7, #12]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	24080000 	.word	0x24080000
 8003048:	00000400 	.word	0x00000400
 800304c:	240026e0 	.word	0x240026e0
 8003050:	24002838 	.word	0x24002838

08003054 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003058:	4b37      	ldr	r3, [pc, #220]	@ (8003138 <SystemInit+0xe4>)
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305e:	4a36      	ldr	r2, [pc, #216]	@ (8003138 <SystemInit+0xe4>)
 8003060:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003064:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003068:	4b34      	ldr	r3, [pc, #208]	@ (800313c <SystemInit+0xe8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	2b06      	cmp	r3, #6
 8003072:	d807      	bhi.n	8003084 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003074:	4b31      	ldr	r3, [pc, #196]	@ (800313c <SystemInit+0xe8>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f023 030f 	bic.w	r3, r3, #15
 800307c:	4a2f      	ldr	r2, [pc, #188]	@ (800313c <SystemInit+0xe8>)
 800307e:	f043 0307 	orr.w	r3, r3, #7
 8003082:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003084:	4b2e      	ldr	r3, [pc, #184]	@ (8003140 <SystemInit+0xec>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a2d      	ldr	r2, [pc, #180]	@ (8003140 <SystemInit+0xec>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003090:	4b2b      	ldr	r3, [pc, #172]	@ (8003140 <SystemInit+0xec>)
 8003092:	2200      	movs	r2, #0
 8003094:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003096:	4b2a      	ldr	r3, [pc, #168]	@ (8003140 <SystemInit+0xec>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4929      	ldr	r1, [pc, #164]	@ (8003140 <SystemInit+0xec>)
 800309c:	4b29      	ldr	r3, [pc, #164]	@ (8003144 <SystemInit+0xf0>)
 800309e:	4013      	ands	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80030a2:	4b26      	ldr	r3, [pc, #152]	@ (800313c <SystemInit+0xe8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d007      	beq.n	80030be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80030ae:	4b23      	ldr	r3, [pc, #140]	@ (800313c <SystemInit+0xe8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 030f 	bic.w	r3, r3, #15
 80030b6:	4a21      	ldr	r2, [pc, #132]	@ (800313c <SystemInit+0xe8>)
 80030b8:	f043 0307 	orr.w	r3, r3, #7
 80030bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80030be:	4b20      	ldr	r3, [pc, #128]	@ (8003140 <SystemInit+0xec>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80030c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003140 <SystemInit+0xec>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80030ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003140 <SystemInit+0xec>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80030d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003140 <SystemInit+0xec>)
 80030d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003148 <SystemInit+0xf4>)
 80030d4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80030d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003140 <SystemInit+0xec>)
 80030d8:	4a1c      	ldr	r2, [pc, #112]	@ (800314c <SystemInit+0xf8>)
 80030da:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80030dc:	4b18      	ldr	r3, [pc, #96]	@ (8003140 <SystemInit+0xec>)
 80030de:	4a1c      	ldr	r2, [pc, #112]	@ (8003150 <SystemInit+0xfc>)
 80030e0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80030e2:	4b17      	ldr	r3, [pc, #92]	@ (8003140 <SystemInit+0xec>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80030e8:	4b15      	ldr	r3, [pc, #84]	@ (8003140 <SystemInit+0xec>)
 80030ea:	4a19      	ldr	r2, [pc, #100]	@ (8003150 <SystemInit+0xfc>)
 80030ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80030ee:	4b14      	ldr	r3, [pc, #80]	@ (8003140 <SystemInit+0xec>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80030f4:	4b12      	ldr	r3, [pc, #72]	@ (8003140 <SystemInit+0xec>)
 80030f6:	4a16      	ldr	r2, [pc, #88]	@ (8003150 <SystemInit+0xfc>)
 80030f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80030fa:	4b11      	ldr	r3, [pc, #68]	@ (8003140 <SystemInit+0xec>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003100:	4b0f      	ldr	r3, [pc, #60]	@ (8003140 <SystemInit+0xec>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a0e      	ldr	r2, [pc, #56]	@ (8003140 <SystemInit+0xec>)
 8003106:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800310a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800310c:	4b0c      	ldr	r3, [pc, #48]	@ (8003140 <SystemInit+0xec>)
 800310e:	2200      	movs	r2, #0
 8003110:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003112:	4b10      	ldr	r3, [pc, #64]	@ (8003154 <SystemInit+0x100>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	4b10      	ldr	r3, [pc, #64]	@ (8003158 <SystemInit+0x104>)
 8003118:	4013      	ands	r3, r2
 800311a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800311e:	d202      	bcs.n	8003126 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003120:	4b0e      	ldr	r3, [pc, #56]	@ (800315c <SystemInit+0x108>)
 8003122:	2201      	movs	r2, #1
 8003124:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003126:	4b0e      	ldr	r3, [pc, #56]	@ (8003160 <SystemInit+0x10c>)
 8003128:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800312c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800312e:	bf00      	nop
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	e000ed00 	.word	0xe000ed00
 800313c:	52002000 	.word	0x52002000
 8003140:	58024400 	.word	0x58024400
 8003144:	eaf6ed7f 	.word	0xeaf6ed7f
 8003148:	02020200 	.word	0x02020200
 800314c:	01ff0000 	.word	0x01ff0000
 8003150:	01010280 	.word	0x01010280
 8003154:	5c001000 	.word	0x5c001000
 8003158:	ffff0000 	.word	0xffff0000
 800315c:	51008108 	.word	0x51008108
 8003160:	52004000 	.word	0x52004000

08003164 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003164:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800319c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003168:	f7ff ff74 	bl	8003054 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800316c:	480c      	ldr	r0, [pc, #48]	@ (80031a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800316e:	490d      	ldr	r1, [pc, #52]	@ (80031a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003170:	4a0d      	ldr	r2, [pc, #52]	@ (80031a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003174:	e002      	b.n	800317c <LoopCopyDataInit>

08003176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800317a:	3304      	adds	r3, #4

0800317c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800317c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800317e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003180:	d3f9      	bcc.n	8003176 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003182:	4a0a      	ldr	r2, [pc, #40]	@ (80031ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003184:	4c0a      	ldr	r4, [pc, #40]	@ (80031b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003188:	e001      	b.n	800318e <LoopFillZerobss>

0800318a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800318a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800318c:	3204      	adds	r2, #4

0800318e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800318e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003190:	d3fb      	bcc.n	800318a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003192:	f00a f98f 	bl	800d4b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003196:	f7fd fa73 	bl	8000680 <main>
  bx  lr
 800319a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800319c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80031a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80031a4:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 80031a8:	080102b0 	.word	0x080102b0
  ldr r2, =_sbss
 80031ac:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 80031b0:	24002834 	.word	0x24002834

080031b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031b4:	e7fe      	b.n	80031b4 <ADC3_IRQHandler>
	...

080031b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031be:	2003      	movs	r0, #3
 80031c0:	f000 f968 	bl	8003494 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031c4:	f003 fcd4 	bl	8006b70 <HAL_RCC_GetSysClockFreq>
 80031c8:	4602      	mov	r2, r0
 80031ca:	4b15      	ldr	r3, [pc, #84]	@ (8003220 <HAL_Init+0x68>)
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	0a1b      	lsrs	r3, r3, #8
 80031d0:	f003 030f 	and.w	r3, r3, #15
 80031d4:	4913      	ldr	r1, [pc, #76]	@ (8003224 <HAL_Init+0x6c>)
 80031d6:	5ccb      	ldrb	r3, [r1, r3]
 80031d8:	f003 031f 	and.w	r3, r3, #31
 80031dc:	fa22 f303 	lsr.w	r3, r2, r3
 80031e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003220 <HAL_Init+0x68>)
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	4a0e      	ldr	r2, [pc, #56]	@ (8003224 <HAL_Init+0x6c>)
 80031ec:	5cd3      	ldrb	r3, [r2, r3]
 80031ee:	f003 031f 	and.w	r3, r3, #31
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
 80031f8:	4a0b      	ldr	r2, [pc, #44]	@ (8003228 <HAL_Init+0x70>)
 80031fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031fc:	4a0b      	ldr	r2, [pc, #44]	@ (800322c <HAL_Init+0x74>)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003202:	200f      	movs	r0, #15
 8003204:	f000 f814 	bl	8003230 <HAL_InitTick>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e002      	b.n	8003218 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003212:	f7ff f901 	bl	8002418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	58024400 	.word	0x58024400
 8003224:	0800fd20 	.word	0x0800fd20
 8003228:	2400000c 	.word	0x2400000c
 800322c:	24000008 	.word	0x24000008

08003230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003238:	4b15      	ldr	r3, [pc, #84]	@ (8003290 <HAL_InitTick+0x60>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e021      	b.n	8003288 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003244:	4b13      	ldr	r3, [pc, #76]	@ (8003294 <HAL_InitTick+0x64>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4b11      	ldr	r3, [pc, #68]	@ (8003290 <HAL_InitTick+0x60>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	4619      	mov	r1, r3
 800324e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003252:	fbb3 f3f1 	udiv	r3, r3, r1
 8003256:	fbb2 f3f3 	udiv	r3, r2, r3
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f94d 	bl	80034fa <HAL_SYSTICK_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e00e      	b.n	8003288 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b0f      	cmp	r3, #15
 800326e:	d80a      	bhi.n	8003286 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003270:	2200      	movs	r2, #0
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	f04f 30ff 	mov.w	r0, #4294967295
 8003278:	f000 f917 	bl	80034aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800327c:	4a06      	ldr	r2, [pc, #24]	@ (8003298 <HAL_InitTick+0x68>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	e000      	b.n	8003288 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
}
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	24000014 	.word	0x24000014
 8003294:	24000008 	.word	0x24000008
 8003298:	24000010 	.word	0x24000010

0800329c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032a0:	4b06      	ldr	r3, [pc, #24]	@ (80032bc <HAL_IncTick+0x20>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	4b06      	ldr	r3, [pc, #24]	@ (80032c0 <HAL_IncTick+0x24>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4413      	add	r3, r2
 80032ac:	4a04      	ldr	r2, [pc, #16]	@ (80032c0 <HAL_IncTick+0x24>)
 80032ae:	6013      	str	r3, [r2, #0]
}
 80032b0:	bf00      	nop
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	24000014 	.word	0x24000014
 80032c0:	240026e4 	.word	0x240026e4

080032c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return uwTick;
 80032c8:	4b03      	ldr	r3, [pc, #12]	@ (80032d8 <HAL_GetTick+0x14>)
 80032ca:	681b      	ldr	r3, [r3, #0]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	240026e4 	.word	0x240026e4

080032dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80032e0:	4b03      	ldr	r3, [pc, #12]	@ (80032f0 <HAL_GetREVID+0x14>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	0c1b      	lsrs	r3, r3, #16
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	5c001000 	.word	0x5c001000

080032f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003304:	4b0b      	ldr	r3, [pc, #44]	@ (8003334 <__NVIC_SetPriorityGrouping+0x40>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003310:	4013      	ands	r3, r2
 8003312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800331c:	4b06      	ldr	r3, [pc, #24]	@ (8003338 <__NVIC_SetPriorityGrouping+0x44>)
 800331e:	4313      	orrs	r3, r2
 8003320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003322:	4a04      	ldr	r2, [pc, #16]	@ (8003334 <__NVIC_SetPriorityGrouping+0x40>)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	60d3      	str	r3, [r2, #12]
}
 8003328:	bf00      	nop
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	e000ed00 	.word	0xe000ed00
 8003338:	05fa0000 	.word	0x05fa0000

0800333c <__NVIC_GetPriorityGrouping>:
>>>>>>> main
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000394:	4b04      	ldr	r3, [pc, #16]	@ (80003a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	0a1b      	lsrs	r3, r3, #8
 800039a:	f003 0307 	and.w	r3, r3, #7
}
 800039e:	4618      	mov	r0, r3
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	e000ed00 	.word	0xe000ed00

080003ac <__NVIC_EnableIRQ>:
=======
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003340:	4b04      	ldr	r3, [pc, #16]	@ (8003354 <__NVIC_GetPriorityGrouping+0x18>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	0a1b      	lsrs	r3, r3, #8
 8003346:	f003 0307 	and.w	r3, r3, #7
}
 800334a:	4618      	mov	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	e000ed00 	.word	0xe000ed00

08003358 <__NVIC_EnableIRQ>:
>>>>>>> main
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80003b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	db0b      	blt.n	80003d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003be:	88fb      	ldrh	r3, [r7, #6]
 80003c0:	f003 021f 	and.w	r2, r3, #31
 80003c4:	4907      	ldr	r1, [pc, #28]	@ (80003e4 <__NVIC_EnableIRQ+0x38>)
 80003c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003ca:	095b      	lsrs	r3, r3, #5
 80003cc:	2001      	movs	r0, #1
 80003ce:	fa00 f202 	lsl.w	r2, r0, r2
 80003d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	e000e100 	.word	0xe000e100

080003e8 <__NVIC_SetPriority>:
=======
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003366:	2b00      	cmp	r3, #0
 8003368:	db0b      	blt.n	8003382 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800336a:	88fb      	ldrh	r3, [r7, #6]
 800336c:	f003 021f 	and.w	r2, r3, #31
 8003370:	4907      	ldr	r1, [pc, #28]	@ (8003390 <__NVIC_EnableIRQ+0x38>)
 8003372:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	2001      	movs	r0, #1
 800337a:	fa00 f202 	lsl.w	r2, r0, r2
 800337e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	e000e100 	.word	0xe000e100

08003394 <__NVIC_SetPriority>:
>>>>>>> main
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	6039      	str	r1, [r7, #0]
 80003f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80003f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db0a      	blt.n	8000412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	490c      	ldr	r1, [pc, #48]	@ (8000434 <__NVIC_SetPriority+0x4c>)
 8000402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000406:	0112      	lsls	r2, r2, #4
 8000408:	b2d2      	uxtb	r2, r2
 800040a:	440b      	add	r3, r1
 800040c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
=======
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	6039      	str	r1, [r7, #0]
 800339e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	db0a      	blt.n	80033be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	490c      	ldr	r1, [pc, #48]	@ (80033e0 <__NVIC_SetPriority+0x4c>)
 80033ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033b2:	0112      	lsls	r2, r2, #4
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	440b      	add	r3, r1
 80033b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
>>>>>>> main
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8000410:	e00a      	b.n	8000428 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	b2da      	uxtb	r2, r3
 8000416:	4908      	ldr	r1, [pc, #32]	@ (8000438 <__NVIC_SetPriority+0x50>)
 8000418:	88fb      	ldrh	r3, [r7, #6]
 800041a:	f003 030f 	and.w	r3, r3, #15
 800041e:	3b04      	subs	r3, #4
 8000420:	0112      	lsls	r2, r2, #4
 8000422:	b2d2      	uxtb	r2, r2
 8000424:	440b      	add	r3, r1
 8000426:	761a      	strb	r2, [r3, #24]
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr
 8000434:	e000e100 	.word	0xe000e100
 8000438:	e000ed00 	.word	0xe000ed00

0800043c <NVIC_EncodePriority>:
=======
 80033bc:	e00a      	b.n	80033d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	4908      	ldr	r1, [pc, #32]	@ (80033e4 <__NVIC_SetPriority+0x50>)
 80033c4:	88fb      	ldrh	r3, [r7, #6]
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	3b04      	subs	r3, #4
 80033cc:	0112      	lsls	r2, r2, #4
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	440b      	add	r3, r1
 80033d2:	761a      	strb	r2, [r3, #24]
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	e000e100 	.word	0xe000e100
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <NVIC_EncodePriority>:
>>>>>>> main
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 800043c:	b480      	push	{r7}
 800043e:	b089      	sub	sp, #36	@ 0x24
 8000440:	af00      	add	r7, sp, #0
 8000442:	60f8      	str	r0, [r7, #12]
 8000444:	60b9      	str	r1, [r7, #8]
 8000446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	f003 0307 	and.w	r3, r3, #7
 800044e:	61fb      	str	r3, [r7, #28]
=======
 80033e8:	b480      	push	{r7}
 80033ea:	b089      	sub	sp, #36	@ 0x24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	61fb      	str	r3, [r7, #28]
>>>>>>> main
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8000450:	69fb      	ldr	r3, [r7, #28]
 8000452:	f1c3 0307 	rsb	r3, r3, #7
 8000456:	2b04      	cmp	r3, #4
 8000458:	bf28      	it	cs
 800045a:	2304      	movcs	r3, #4
 800045c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800045e:	69fb      	ldr	r3, [r7, #28]
 8000460:	3304      	adds	r3, #4
 8000462:	2b06      	cmp	r3, #6
 8000464:	d902      	bls.n	800046c <NVIC_EncodePriority+0x30>
 8000466:	69fb      	ldr	r3, [r7, #28]
 8000468:	3b03      	subs	r3, #3
 800046a:	e000      	b.n	800046e <NVIC_EncodePriority+0x32>
 800046c:	2300      	movs	r3, #0
 800046e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000470:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000474:	69bb      	ldr	r3, [r7, #24]
 8000476:	fa02 f303 	lsl.w	r3, r2, r3
 800047a:	43da      	mvns	r2, r3
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	401a      	ands	r2, r3
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000484:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	fa01 f303 	lsl.w	r3, r1, r3
 800048e:	43d9      	mvns	r1, r3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000494:	4313      	orrs	r3, r2
         );
}
 8000496:	4618      	mov	r0, r3
 8000498:	3724      	adds	r7, #36	@ 0x24
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr

080004a2 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80004a2:	b480      	push	{r7}
 80004a4:	b083      	sub	sp, #12
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f043 0201 	orr.w	r2, r3, #1
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	601a      	str	r2, [r3, #0]
}
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr

080004c2 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 80004c2:	b480      	push	{r7}
 80004c4:	b083      	sub	sp, #12
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	601a      	str	r2, [r3, #0]
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b089      	sub	sp, #36	@ 0x24
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
 80004ea:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	3308      	adds	r3, #8
 80004f0:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	e853 3f00 	ldrex	r3, [r3]
 80004f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	075b      	lsls	r3, r3, #29
 8000504:	4313      	orrs	r3, r2
 8000506:	61fb      	str	r3, [r7, #28]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	3308      	adds	r3, #8
 800050c:	69fa      	ldr	r2, [r7, #28]
 800050e:	61ba      	str	r2, [r7, #24]
 8000510:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000512:	6979      	ldr	r1, [r7, #20]
 8000514:	69ba      	ldr	r2, [r7, #24]
 8000516:	e841 2300 	strex	r3, r2, [r1]
 800051a:	613b      	str	r3, [r7, #16]
   return(result);
 800051c:	693b      	ldr	r3, [r7, #16]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d1e4      	bne.n	80004ec <LL_USART_SetTXFIFOThreshold+0xa>
}
 8000522:	bf00      	nop
 8000524:	bf00      	nop
 8000526:	3724      	adds	r7, #36	@ 0x24
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000530:	b480      	push	{r7}
 8000532:	b089      	sub	sp, #36	@ 0x24
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	3308      	adds	r3, #8
 800053e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	e853 3f00 	ldrex	r3, [r3]
 8000546:	60bb      	str	r3, [r7, #8]
   return(result);
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	065b      	lsls	r3, r3, #25
 8000552:	4313      	orrs	r3, r2
 8000554:	61fb      	str	r3, [r7, #28]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	3308      	adds	r3, #8
 800055a:	69fa      	ldr	r2, [r7, #28]
 800055c:	61ba      	str	r2, [r7, #24]
 800055e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000560:	6979      	ldr	r1, [r7, #20]
 8000562:	69ba      	ldr	r2, [r7, #24]
 8000564:	e841 2300 	strex	r3, r2, [r1]
 8000568:	613b      	str	r3, [r7, #16]
   return(result);
 800056a:	693b      	ldr	r3, [r7, #16]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d1e4      	bne.n	800053a <LL_USART_SetRXFIFOThreshold+0xa>
}
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	3724      	adds	r7, #36	@ 0x24
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800057e:	b480      	push	{r7}
 8000580:	b083      	sub	sp, #12
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	689b      	ldr	r3, [r3, #8]
 8000596:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	609a      	str	r2, [r3, #8]
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80005be:	d101      	bne.n	80005c4 <LL_USART_IsActiveFlag_TEACK+0x1a>
 80005c0:	2301      	movs	r3, #1
 80005c2:	e000      	b.n	80005c6 <LL_USART_IsActiveFlag_TEACK+0x1c>
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b083      	sub	sp, #12
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80005e6:	d101      	bne.n	80005ec <LL_USART_IsActiveFlag_REACK+0x1a>
 80005e8:	2301      	movs	r3, #1
 80005ea:	e000      	b.n	80005ee <LL_USART_IsActiveFlag_REACK+0x1c>
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b083      	sub	sp, #12
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
 8000602:	460b      	mov	r3, r1
 8000604:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8000606:	78fa      	ldrb	r2, [r7, #3]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 8000620:	4b0a      	ldr	r3, [pc, #40]	@ (800064c <LL_AHB4_GRP1_EnableClock+0x34>)
 8000622:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000626:	4909      	ldr	r1, [pc, #36]	@ (800064c <LL_AHB4_GRP1_EnableClock+0x34>)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4313      	orrs	r3, r2
 800062c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8000630:	4b06      	ldr	r3, [pc, #24]	@ (800064c <LL_AHB4_GRP1_EnableClock+0x34>)
 8000632:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4013      	ands	r3, r2
 800063a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800063c:	68fb      	ldr	r3, [r7, #12]
}
 800063e:	bf00      	nop
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	58024400 	.word	0x58024400

08000650 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8000658:	4b0a      	ldr	r3, [pc, #40]	@ (8000684 <LL_APB1_GRP1_EnableClock+0x34>)
 800065a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800065e:	4909      	ldr	r1, [pc, #36]	@ (8000684 <LL_APB1_GRP1_EnableClock+0x34>)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4313      	orrs	r3, r2
 8000664:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <LL_APB1_GRP1_EnableClock+0x34>)
 800066a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4013      	ands	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000674:	68fb      	ldr	r3, [r7, #12]
}
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	58024400 	.word	0x58024400

08000688 <LL_MPU_Enable>:
  *         @arg @ref LL_MPU_CTRL_PRIVILEGED_DEFAULT
  *         @arg @ref LL_MPU_CTRL_HFNMI_PRIVDEF
  * @retval None
  */
__STATIC_INLINE void LL_MPU_Enable(uint32_t Options)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU*/
  WRITE_REG(MPU->CTRL, (MPU_CTRL_ENABLE_Msk | Options));
 8000690:	4a08      	ldr	r2, [pc, #32]	@ (80006b4 <LL_MPU_Enable+0x2c>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800069a:	f3bf 8f4f 	dsb	sy
}
 800069e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a0:	f3bf 8f6f 	isb	sy
}
 80006a4:	bf00      	nop
  /* Ensure MPU settings take effects */
  __DSB();
  /* Sequence instruction fetches using update settings */
  __ISB();
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000ed90 	.word	0xe000ed90

080006b8 <LL_MPU_Disable>:
  * @brief  Disable MPU
  * @rmtoll MPU_CTRL     ENABLE        LL_MPU_Disable
  * @retval None
  */
__STATIC_INLINE void LL_MPU_Disable(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80006bc:	f3bf 8f5f 	dmb	sy
}
 80006c0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();
  /* Disable MPU*/
  WRITE_REG(MPU->CTRL, 0U);
 80006c2:	4b04      	ldr	r3, [pc, #16]	@ (80006d4 <LL_MPU_Disable+0x1c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	605a      	str	r2, [r3, #4]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000ed90 	.word	0xe000ed90

080006d8 <LL_MPU_ConfigRegion>:
  *         @arg @ref LL_MPU_ACCESS_BUFFERABLE or @ref LL_MPU_ACCESS_NOT_BUFFERABLE
  * @note   For cortex-M4 only 8 regions are available i.e only values from LL_MPU_REGION_NUMBER0 to LL_MPU_REGION_NUMBER7 are possible.
  * @retval None
  */
__STATIC_INLINE void LL_MPU_ConfigRegion(uint32_t Region, uint32_t SubRegionDisable, uint32_t Address, uint32_t Attributes)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
 80006e4:	603b      	str	r3, [r7, #0]
  /* Set Region number */
  WRITE_REG(MPU->RNR, Region);
 80006e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000714 <LL_MPU_ConfigRegion+0x3c>)
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	6093      	str	r3, [r2, #8]
  /* Set base address */
  WRITE_REG(MPU->RBAR, (Address & 0xFFFFFFE0U));
 80006ec:	4a09      	ldr	r2, [pc, #36]	@ (8000714 <LL_MPU_ConfigRegion+0x3c>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f023 031f 	bic.w	r3, r3, #31
 80006f4:	60d3      	str	r3, [r2, #12]
  /* Configure MPU */
  WRITE_REG(MPU->RASR, (MPU_RASR_ENABLE_Msk | Attributes | (SubRegionDisable << MPU_RASR_SRD_Pos)));
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	021a      	lsls	r2, r3, #8
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	4a05      	ldr	r2, [pc, #20]	@ (8000714 <LL_MPU_ConfigRegion+0x3c>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6113      	str	r3, [r2, #16]
}
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000ed90 	.word	0xe000ed90

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800071c:	f002 fb56 	bl	8002dcc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000720:	f003 f9dc 	bl	8003adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000724:	f000 f986 	bl	8000a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000728:	f001 fa24 	bl	8001b74 <MX_GPIO_Init>
  MX_TIM1_Init();
 800072c:	f000 fc34 	bl	8000f98 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000730:	f000 fd02 	bl	8001138 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000734:	f000 fd76 	bl	8001224 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000738:	f000 fe0c 	bl	8001354 <MX_TIM5_Init>
  MX_TIM8_Init();
 800073c:	f000 fe8c 	bl	8001458 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000740:	f000 ff34 	bl	80015ac <MX_TIM12_Init>
  MX_TIM13_Init();
 8000744:	f000 ffaa 	bl	800169c <MX_TIM13_Init>
  MX_TIM14_Init();
 8000748:	f000 fff6 	bl	8001738 <MX_TIM14_Init>
  MX_TIM15_Init();
 800074c:	f001 f842 	bl	80017d4 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000750:	f001 f8f0 	bl	8001934 <MX_TIM16_Init>
  MX_HRTIM_Init();
 8000754:	f000 fa1c 	bl	8000b90 <MX_HRTIM_Init>
  MX_LPTIM1_Init();
 8000758:	f000 fbf0 	bl	8000f3c <MX_LPTIM1_Init>
  MX_UART4_Init();
 800075c:	f001 f964 	bl	8001a28 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */


  //Timer 1
  HAL_TIM_Base_Start_IT(&htim1);
 8000760:	4895      	ldr	r0, [pc, #596]	@ (80009b8 <main+0x2a0>)
 8000762:	f007 fdfb 	bl	800835c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);    //Starts the PWM on each of the desired channels
 8000766:	2100      	movs	r1, #0
 8000768:	4893      	ldr	r0, [pc, #588]	@ (80009b8 <main+0x2a0>)
 800076a:	f007 fed1 	bl	8008510 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800076e:	2104      	movs	r1, #4
 8000770:	4891      	ldr	r0, [pc, #580]	@ (80009b8 <main+0x2a0>)
 8000772:	f007 fecd 	bl	8008510 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000776:	2108      	movs	r1, #8
 8000778:	488f      	ldr	r0, [pc, #572]	@ (80009b8 <main+0x2a0>)
 800077a:	f007 fec9 	bl	8008510 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800077e:	210c      	movs	r1, #12
 8000780:	488d      	ldr	r0, [pc, #564]	@ (80009b8 <main+0x2a0>)
 8000782:	f007 fec5 	bl	8008510 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, GPIO_PIN_SET);   //Sets the pin to 1
 8000786:	2201      	movs	r2, #1
 8000788:	2101      	movs	r1, #1
 800078a:	488c      	ldr	r0, [pc, #560]	@ (80009bc <main+0x2a4>)
 800078c:	f003 fd04 	bl	8004198 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	2102      	movs	r1, #2
 8000794:	4889      	ldr	r0, [pc, #548]	@ (80009bc <main+0x2a4>)
 8000796:	f003 fcff 	bl	8004198 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	2104      	movs	r1, #4
 800079e:	4887      	ldr	r0, [pc, #540]	@ (80009bc <main+0x2a4>)
 80007a0:	f003 fcfa 	bl	8004198 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2108      	movs	r1, #8
 80007a8:	4884      	ldr	r0, [pc, #528]	@ (80009bc <main+0x2a4>)
 80007aa:	f003 fcf5 	bl	8004198 <HAL_GPIO_WritePin>
  			 *
  			 */
  //End Timer 1

  //Timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 80007ae:	4884      	ldr	r0, [pc, #528]	@ (80009c0 <main+0x2a8>)
 80007b0:	f007 fdd4 	bl	800835c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007b4:	2100      	movs	r1, #0
 80007b6:	4882      	ldr	r0, [pc, #520]	@ (80009c0 <main+0x2a8>)
 80007b8:	f007 feaa 	bl	8008510 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM2_CH1_PH_GPIO_Port, TIM2_CH1_PH_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2110      	movs	r1, #16
 80007c0:	487e      	ldr	r0, [pc, #504]	@ (80009bc <main+0x2a4>)
 80007c2:	f003 fce9 	bl	8004198 <HAL_GPIO_WritePin>
  //End Timer 2

  //Timer 4
  HAL_TIM_Base_Start_IT(&htim4);
 80007c6:	487f      	ldr	r0, [pc, #508]	@ (80009c4 <main+0x2ac>)
 80007c8:	f007 fdc8 	bl	800835c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80007cc:	2100      	movs	r1, #0
 80007ce:	487d      	ldr	r0, [pc, #500]	@ (80009c4 <main+0x2ac>)
 80007d0:	f007 fe9e 	bl	8008510 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80007d4:	2104      	movs	r1, #4
 80007d6:	487b      	ldr	r0, [pc, #492]	@ (80009c4 <main+0x2ac>)
 80007d8:	f007 fe9a 	bl	8008510 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80007dc:	2108      	movs	r1, #8
 80007de:	4879      	ldr	r0, [pc, #484]	@ (80009c4 <main+0x2ac>)
 80007e0:	f007 fe96 	bl	8008510 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80007e4:	210c      	movs	r1, #12
 80007e6:	4877      	ldr	r0, [pc, #476]	@ (80009c4 <main+0x2ac>)
 80007e8:	f007 fe92 	bl	8008510 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM4_CH1_PH_GPIO_Port, TIM4_CH1_PH_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007f2:	4875      	ldr	r0, [pc, #468]	@ (80009c8 <main+0x2b0>)
 80007f4:	f003 fcd0 	bl	8004198 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH2_PH_GPIO_Port, TIM4_CH2_PH_Pin, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007fe:	4872      	ldr	r0, [pc, #456]	@ (80009c8 <main+0x2b0>)
 8000800:	f003 fcca 	bl	8004198 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH3_PH_GPIO_Port, TIM4_CH3_PH_Pin, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800080a:	4870      	ldr	r0, [pc, #448]	@ (80009cc <main+0x2b4>)
 800080c:	f003 fcc4 	bl	8004198 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH4_PH_GPIO_Port, TIM4_CH4_PH_Pin, GPIO_PIN_SET);
 8000810:	2201      	movs	r2, #1
 8000812:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000816:	486d      	ldr	r0, [pc, #436]	@ (80009cc <main+0x2b4>)
 8000818:	f003 fcbe 	bl	8004198 <HAL_GPIO_WritePin>
  //End Timer 4

  //Timer 5
  HAL_TIM_Base_Start_IT(&htim5);
 800081c:	486c      	ldr	r0, [pc, #432]	@ (80009d0 <main+0x2b8>)
 800081e:	f007 fd9d 	bl	800835c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000822:	2104      	movs	r1, #4
 8000824:	486a      	ldr	r0, [pc, #424]	@ (80009d0 <main+0x2b8>)
 8000826:	f007 fe73 	bl	8008510 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800082a:	2108      	movs	r1, #8
 800082c:	4868      	ldr	r0, [pc, #416]	@ (80009d0 <main+0x2b8>)
 800082e:	f007 fe6f 	bl	8008510 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM5_CH2_PH_GPIO_Port, TIM5_CH2_PH_Pin, GPIO_PIN_SET);
 8000832:	2201      	movs	r2, #1
 8000834:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000838:	4864      	ldr	r0, [pc, #400]	@ (80009cc <main+0x2b4>)
 800083a:	f003 fcad 	bl	8004198 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM5_CH3_PH_GPIO_Port, TIM5_CH3_PH_Pin, GPIO_PIN_SET);
 800083e:	2201      	movs	r2, #1
 8000840:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000844:	4861      	ldr	r0, [pc, #388]	@ (80009cc <main+0x2b4>)
 8000846:	f003 fca7 	bl	8004198 <HAL_GPIO_WritePin>
  //End Timer 5

  //Timer 8
  HAL_TIM_Base_Start_IT(&htim8);
 800084a:	4862      	ldr	r0, [pc, #392]	@ (80009d4 <main+0x2bc>)
 800084c:	f007 fd86 	bl	800835c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000850:	210c      	movs	r1, #12
 8000852:	4860      	ldr	r0, [pc, #384]	@ (80009d4 <main+0x2bc>)
 8000854:	f007 fe5c 	bl	8008510 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM8_CH4_PH_GPIO_Port, TIM8_CH4_PH_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2180      	movs	r1, #128	@ 0x80
 800085c:	4857      	ldr	r0, [pc, #348]	@ (80009bc <main+0x2a4>)
 800085e:	f003 fc9b 	bl	8004198 <HAL_GPIO_WritePin>
  //End Timer 8

  //Timer 12
  HAL_TIM_Base_Start_IT(&htim12);
 8000862:	485d      	ldr	r0, [pc, #372]	@ (80009d8 <main+0x2c0>)
 8000864:	f007 fd7a 	bl	800835c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000868:	2104      	movs	r1, #4
 800086a:	485b      	ldr	r0, [pc, #364]	@ (80009d8 <main+0x2c0>)
 800086c:	f007 fe50 	bl	8008510 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM12_CH2_PH_GPIO_Port, TIM12_CH2_PH_Pin, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000876:	4851      	ldr	r0, [pc, #324]	@ (80009bc <main+0x2a4>)
 8000878:	f003 fc8e 	bl	8004198 <HAL_GPIO_WritePin>
  //End Timer 12

  //Timer 13
  HAL_TIM_Base_Start_IT(&htim13);
 800087c:	4857      	ldr	r0, [pc, #348]	@ (80009dc <main+0x2c4>)
 800087e:	f007 fd6d 	bl	800835c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8000882:	2100      	movs	r1, #0
 8000884:	4855      	ldr	r0, [pc, #340]	@ (80009dc <main+0x2c4>)
 8000886:	f007 fe43 	bl	8008510 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM13_CH1_PH_GPIO_Port, TIM13_CH1_PH_Pin, GPIO_PIN_SET);
 800088a:	2201      	movs	r2, #1
 800088c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000890:	484a      	ldr	r0, [pc, #296]	@ (80009bc <main+0x2a4>)
 8000892:	f003 fc81 	bl	8004198 <HAL_GPIO_WritePin>
  //End Timer 13

  //Timer 14
  HAL_TIM_Base_Start_IT(&htim14);
 8000896:	4852      	ldr	r0, [pc, #328]	@ (80009e0 <main+0x2c8>)
 8000898:	f007 fd60 	bl	800835c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 800089c:	2100      	movs	r1, #0
 800089e:	4850      	ldr	r0, [pc, #320]	@ (80009e0 <main+0x2c8>)
 80008a0:	f007 fe36 	bl	8008510 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM14_CH1_PH_GPIO_Port, TIM14_CH1_PH_Pin, GPIO_PIN_SET);
 80008a4:	2201      	movs	r2, #1
 80008a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008aa:	4844      	ldr	r0, [pc, #272]	@ (80009bc <main+0x2a4>)
 80008ac:	f003 fc74 	bl	8004198 <HAL_GPIO_WritePin>
  //End Timer 14

  //Timer 15
  HAL_TIM_Base_Start_IT(&htim15);
 80008b0:	484c      	ldr	r0, [pc, #304]	@ (80009e4 <main+0x2cc>)
 80008b2:	f007 fd53 	bl	800835c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80008b6:	2100      	movs	r1, #0
 80008b8:	484a      	ldr	r0, [pc, #296]	@ (80009e4 <main+0x2cc>)
 80008ba:	f007 fe29 	bl	8008510 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80008be:	2104      	movs	r1, #4
 80008c0:	4848      	ldr	r0, [pc, #288]	@ (80009e4 <main+0x2cc>)
 80008c2:	f007 fe25 	bl	8008510 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM15_CH1_PH_GPIO_Port, TIM15_CH1_PH_Pin, GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008cc:	483b      	ldr	r0, [pc, #236]	@ (80009bc <main+0x2a4>)
 80008ce:	f003 fc63 	bl	8004198 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM15_CH2_PH_GPIO_Port, TIM15_CH2_PH_Pin, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2101      	movs	r1, #1
 80008d6:	4844      	ldr	r0, [pc, #272]	@ (80009e8 <main+0x2d0>)
 80008d8:	f003 fc5e 	bl	8004198 <HAL_GPIO_WritePin>
  //End Timer 15

  //Timer 16
  HAL_TIM_Base_Start_IT(&htim16);
 80008dc:	4843      	ldr	r0, [pc, #268]	@ (80009ec <main+0x2d4>)
 80008de:	f007 fd3d 	bl	800835c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80008e2:	2100      	movs	r1, #0
 80008e4:	4841      	ldr	r0, [pc, #260]	@ (80009ec <main+0x2d4>)
 80008e6:	f007 fe13 	bl	8008510 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM16_CH1_PH_GPIO_Port, TIM16_CH1_PH_Pin, GPIO_PIN_SET);
 80008ea:	2201      	movs	r2, #1
 80008ec:	2102      	movs	r1, #2
 80008ee:	483e      	ldr	r0, [pc, #248]	@ (80009e8 <main+0x2d0>)
 80008f0:	f003 fc52 	bl	8004198 <HAL_GPIO_WritePin>
  //End Timer 16

  //HRTIM CODE GOES HERE *******
     // Enable output
  HRTIM1->sCommonRegs.OENR = HRTIM_OENR_TA1OEN + HRTIM_OENR_TA2OEN +
 80008f4:	4b3e      	ldr	r3, [pc, #248]	@ (80009f0 <main+0x2d8>)
 80008f6:	22ff      	movs	r2, #255	@ 0xff
 80008f8:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
     	 	HRTIM_OENR_TB1OEN + HRTIM_OENR_TB2OEN + HRTIM_OENR_TC1OEN + HRTIM_OENR_TC2OEN + HRTIM_OENR_TD1OEN + HRTIM_OENR_TD2OEN;
     //Start Timer
  HRTIM1->sMasterRegs.MCR = HRTIM_MCR_TACEN + HRTIM_MCR_TBCEN + HRTIM_MCR_TCCEN + HRTIM_MCR_TDCEN;
 80008fc:	4b3c      	ldr	r3, [pc, #240]	@ (80009f0 <main+0x2d8>)
 80008fe:	f44f 12f0 	mov.w	r2, #1966080	@ 0x1e0000
 8000902:	601a      	str	r2, [r3, #0]
  //END HRTIM CODE

	//Low-Power Timer
  HAL_LPTIM_Counter_Start_IT(&hlptim1, LPTIM_ARR_ARR);
 8000904:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000908:	483a      	ldr	r0, [pc, #232]	@ (80009f4 <main+0x2dc>)
 800090a:	f004 fe44 	bl	8005596 <HAL_LPTIM_Counter_Start_IT>
  HAL_LPTIM_PWM_Start(&hlptim1, LPTIM_ARR_ARR, LPTIM_CMP_CMP);
 800090e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000912:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000916:	4837      	ldr	r0, [pc, #220]	@ (80009f4 <main+0x2dc>)
 8000918:	f004 fdf0 	bl	80054fc <HAL_LPTIM_PWM_Start>
  HAL_GPIO_WritePin(LPTIM1_OUT_PH_GPIO_Port, LPTIM1_OUT_PH_Pin, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	2104      	movs	r1, #4
 8000920:	4831      	ldr	r0, [pc, #196]	@ (80009e8 <main+0x2d0>)
 8000922:	f003 fc39 	bl	8004198 <HAL_GPIO_WritePin>
  LPTIM1->ARR = (12000 - 1);
 8000926:	4b34      	ldr	r3, [pc, #208]	@ (80009f8 <main+0x2e0>)
 8000928:	f642 62df 	movw	r2, #11999	@ 0x2edf
 800092c:	619a      	str	r2, [r3, #24]
  //End Low Power Timer

  //Timer Synchronization
  TIM1->CNT = 0;
 800092e:	4b33      	ldr	r3, [pc, #204]	@ (80009fc <main+0x2e4>)
 8000930:	2200      	movs	r2, #0
 8000932:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM2->CNT = 0;
 8000934:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000938:	2200      	movs	r2, #0
 800093a:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM4->CNT = 0;
 800093c:	4b30      	ldr	r3, [pc, #192]	@ (8000a00 <main+0x2e8>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM5->CNT = 0;
 8000942:	4b30      	ldr	r3, [pc, #192]	@ (8000a04 <main+0x2ec>)
 8000944:	2200      	movs	r2, #0
 8000946:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM8->CNT = 0;
 8000948:	4b2f      	ldr	r3, [pc, #188]	@ (8000a08 <main+0x2f0>)
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM12->CNT = 0;
 800094e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a0c <main+0x2f4>)
 8000950:	2200      	movs	r2, #0
 8000952:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM13->CNT = 0;
 8000954:	4b2e      	ldr	r3, [pc, #184]	@ (8000a10 <main+0x2f8>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM14->CNT = 0;
 800095a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a14 <main+0x2fc>)
 800095c:	2200      	movs	r2, #0
 800095e:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM15->CNT = 0;
 8000960:	4b2d      	ldr	r3, [pc, #180]	@ (8000a18 <main+0x300>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM16->CNT = 0;
 8000966:	4b2d      	ldr	r3, [pc, #180]	@ (8000a1c <main+0x304>)
 8000968:	2200      	movs	r2, #0
 800096a:	625a      	str	r2, [r3, #36]	@ 0x24
  LPTIM1->CNT = 0;
 800096c:	4b22      	ldr	r3, [pc, #136]	@ (80009f8 <main+0x2e0>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]

  // used to send sine wave output to the actuators if so desired
  gen_sine();
 8000972:	f002 f9f5 	bl	8002d60 <gen_sine>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init_buffer(rxp);
 8000976:	4b2a      	ldr	r3, [pc, #168]	@ (8000a20 <main+0x308>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4618      	mov	r0, r3
 800097c:	f001 fb02 	bl	8001f84 <init_buffer>
  data_ready = FALSE;
 8000980:	4b28      	ldr	r3, [pc, #160]	@ (8000a24 <main+0x30c>)
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
//  HAL_UART_Receive_IT(&huart4, rx_buff, sizeof(rx_buff));

  while (1)
  {
	  if(ctrl_tmr_expired == TRUE) control_update(ref); //Sets flag for timer interrupt
 8000986:	4b28      	ldr	r3, [pc, #160]	@ (8000a28 <main+0x310>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d106      	bne.n	800099c <main+0x284>
 800098e:	4b27      	ldr	r3, [pc, #156]	@ (8000a2c <main+0x314>)
 8000990:	ed93 7b00 	vldr	d7, [r3]
 8000994:	eeb0 0b47 	vmov.f64	d0, d7
 8000998:	f001 fb92 	bl	80020c0 <control_update>
	  if(data_ready == TRUE) UART_update(); //Sets flag when a message is received
 800099c:	4b21      	ldr	r3, [pc, #132]	@ (8000a24 <main+0x30c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d101      	bne.n	80009a8 <main+0x290>
 80009a4:	f001 fa04 	bl	8001db0 <UART_update>
	  if(cmd_ready == TRUE) command_update(); //Sets flag once message is ready to send
 80009a8:	4b21      	ldr	r3, [pc, #132]	@ (8000a30 <main+0x318>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d1ea      	bne.n	8000986 <main+0x26e>
 80009b0:	f001 fa0e 	bl	8001dd0 <command_update>
	  if(ctrl_tmr_expired == TRUE) control_update(ref); //Sets flag for timer interrupt
 80009b4:	e7e7      	b.n	8000986 <main+0x26e>
 80009b6:	bf00      	nop
 80009b8:	24000318 	.word	0x24000318
 80009bc:	58021000 	.word	0x58021000
 80009c0:	24000364 	.word	0x24000364
 80009c4:	240003b0 	.word	0x240003b0
 80009c8:	58020400 	.word	0x58020400
 80009cc:	58020800 	.word	0x58020800
 80009d0:	240003fc 	.word	0x240003fc
 80009d4:	24000448 	.word	0x24000448
 80009d8:	24000494 	.word	0x24000494
 80009dc:	240004e0 	.word	0x240004e0
 80009e0:	2400052c 	.word	0x2400052c
 80009e4:	24000578 	.word	0x24000578
 80009e8:	58020c00 	.word	0x58020c00
 80009ec:	240005c4 	.word	0x240005c4
 80009f0:	40017400 	.word	0x40017400
 80009f4:	240002e0 	.word	0x240002e0
 80009f8:	40002400 	.word	0x40002400
 80009fc:	40010000 	.word	0x40010000
 8000a00:	40000800 	.word	0x40000800
 8000a04:	40000c00 	.word	0x40000c00
 8000a08:	40010400 	.word	0x40010400
 8000a0c:	40001800 	.word	0x40001800
 8000a10:	40001c00 	.word	0x40001c00
 8000a14:	40002000 	.word	0x40002000
 8000a18:	40014000 	.word	0x40014000
 8000a1c:	40014400 	.word	0x40014400
 8000a20:	24000000 	.word	0x24000000
 8000a24:	24002560 	.word	0x24002560
 8000a28:	24000610 	.word	0x24000610
 8000a2c:	24000618 	.word	0x24000618
 8000a30:	24003575 	.word	0x24003575

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b09e      	sub	sp, #120	@ 0x78
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a3e:	224c      	movs	r2, #76	@ 0x4c
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f00a fd42 	bl	800b4cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	2220      	movs	r2, #32
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f00a fd3b 	bl	800b4cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a56:	2002      	movs	r0, #2
 8000a58:	f005 f8f6 	bl	8005c48 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	4b48      	ldr	r3, [pc, #288]	@ (8000b84 <SystemClock_Config+0x150>)
 8000a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a64:	4a47      	ldr	r2, [pc, #284]	@ (8000b84 <SystemClock_Config+0x150>)
 8000a66:	f023 0301 	bic.w	r3, r3, #1
 8000a6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a6c:	4b45      	ldr	r3, [pc, #276]	@ (8000b84 <SystemClock_Config+0x150>)
 8000a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	4b44      	ldr	r3, [pc, #272]	@ (8000b88 <SystemClock_Config+0x154>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	4a43      	ldr	r2, [pc, #268]	@ (8000b88 <SystemClock_Config+0x154>)
 8000a7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a80:	6193      	str	r3, [r2, #24]
 8000a82:	4b41      	ldr	r3, [pc, #260]	@ (8000b88 <SystemClock_Config+0x154>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a8e:	bf00      	nop
 8000a90:	4b3d      	ldr	r3, [pc, #244]	@ (8000b88 <SystemClock_Config+0x154>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a9c:	d1f8      	bne.n	8000a90 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	4b3b      	ldr	r3, [pc, #236]	@ (8000b8c <SystemClock_Config+0x158>)
 8000aa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000aa4:	4a39      	ldr	r2, [pc, #228]	@ (8000b8c <SystemClock_Config+0x158>)
 8000aa6:	f043 0302 	orr.w	r3, r3, #2
 8000aaa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000aae:	4b37      	ldr	r3, [pc, #220]	@ (8000b8c <SystemClock_Config+0x158>)
 8000ab0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ab4:	f003 0302 	and.w	r3, r3, #2
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000abc:	2300      	movs	r3, #0
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	4b31      	ldr	r3, [pc, #196]	@ (8000b88 <SystemClock_Config+0x154>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a30      	ldr	r2, [pc, #192]	@ (8000b88 <SystemClock_Config+0x154>)
 8000ac6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b2e      	ldr	r3, [pc, #184]	@ (8000b88 <SystemClock_Config+0x154>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b84 <SystemClock_Config+0x150>)
 8000ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ada:	4a2a      	ldr	r2, [pc, #168]	@ (8000b84 <SystemClock_Config+0x150>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000ae2:	4b28      	ldr	r3, [pc, #160]	@ (8000b84 <SystemClock_Config+0x150>)
 8000ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aee:	bf00      	nop
 8000af0:	4b25      	ldr	r3, [pc, #148]	@ (8000b88 <SystemClock_Config+0x154>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000af8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000afc:	d1f8      	bne.n	8000af0 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000afe:	2301      	movs	r3, #1
 8000b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b06:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000b14:	2350      	movs	r3, #80	@ 0x50
 8000b16:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b24:	230c      	movs	r3, #12
 8000b26:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b34:	4618      	mov	r0, r3
 8000b36:	f005 f8c1 	bl	8005cbc <HAL_RCC_OscConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000b40:	f002 f956 	bl	8002df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b44:	233f      	movs	r3, #63	@ 0x3f
 8000b46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b50:	2308      	movs	r3, #8
 8000b52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b54:	2340      	movs	r3, #64	@ 0x40
 8000b56:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b58:	2340      	movs	r3, #64	@ 0x40
 8000b5a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b60:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b62:	2340      	movs	r3, #64	@ 0x40
 8000b64:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f005 fcff 	bl	8006570 <HAL_RCC_ClockConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000b78:	f002 f93a 	bl	8002df0 <Error_Handler>
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	3778      	adds	r7, #120	@ 0x78
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	58000400 	.word	0x58000400
 8000b88:	58024800 	.word	0x58024800
 8000b8c:	58024400 	.word	0x58024400

08000b90 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b0aa      	sub	sp, #168	@ 0xa8
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_EventCfgTypeDef pEventCfg = {0};
 8000b96:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	611a      	str	r2, [r3, #16]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000ba6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000bb4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bb8:	2254      	movs	r2, #84	@ 0x54
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f00a fc85 	bl	800b4cc <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8000bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2220      	movs	r2, #32
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f00a fc79 	bl	800b4cc <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */


  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8000bda:	4bc4      	ldr	r3, [pc, #784]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000bdc:	4ac4      	ldr	r2, [pc, #784]	@ (8000ef0 <MX_HRTIM_Init+0x360>)
 8000bde:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000be0:	4bc2      	ldr	r3, [pc, #776]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000be6:	4bc1      	ldr	r3, [pc, #772]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8000bec:	48bf      	ldr	r0, [pc, #764]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000bee:	f003 faed 	bl	80041cc <HAL_HRTIM_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_HRTIM_Init+0x6c>
  {
    Error_Handler();
 8000bf8:	f002 f8fa 	bl	8002df0 <Error_Handler>
  }
  if (HAL_HRTIM_EventPrescalerConfig(&hhrtim, HRTIM_EVENTPRESCALER_DIV1) != HAL_OK)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	48bb      	ldr	r0, [pc, #748]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000c00:	f003 fc0b 	bl	800441a <HAL_HRTIM_EventPrescalerConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_HRTIM_Init+0x7e>
  {
    Error_Handler();
 8000c0a:	f002 f8f1 	bl	8002df0 <Error_Handler>
  }
  pEventCfg.Source = HRTIM_EVENTSRC_3;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  pEventCfg.Polarity = HRTIM_EVENTPOLARITY_HIGH;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pEventCfg.Sensitivity = HRTIM_EVENTSENSITIVITY_RISINGEDGE;
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  pEventCfg.FastMode = HRTIM_EVENTFASTMODE_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_HRTIM_EventConfig(&hhrtim, HRTIM_EVENT_1, &pEventCfg) != HAL_OK)
 8000c26:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	48af      	ldr	r0, [pc, #700]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000c30:	f003 fbc4 	bl	80043bc <HAL_HRTIM_EventConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_HRTIM_Init+0xae>
  {
    Error_Handler();
 8000c3a:	f002 f8d9 	bl	8002df0 <Error_Handler>
  }
  pTimeBaseCfg.Period = 24000-1;
 8000c3e:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 8000c42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000c46:	2300      	movs	r3, #0
 8000c48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000c4c:	2305      	movs	r3, #5
 8000c4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000c52:	2308      	movs	r3, #8
 8000c54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000c58:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	2100      	movs	r1, #0
 8000c60:	48a2      	ldr	r0, [pc, #648]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000c62:	f003 fb83 	bl	800436c <HAL_HRTIM_TimeBaseConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_HRTIM_Init+0xe0>
  {
    Error_Handler();
 8000c6c:	f002 f8c0 	bl	8002df0 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.DMASrcAddress = 0x0000;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.DMADstAddress = 0x0000;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.DMASize = 0x1;
 8000c80:	2301      	movs	r3, #1
 8000c82:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000c84:	2300      	movs	r3, #0
 8000c86:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8000c94:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c98:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_EEV_1;
 8000cbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 8000cc4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000cc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8000ccc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4885      	ldr	r0, [pc, #532]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000cd6:	f003 fbd9 	bl	800448c <HAL_HRTIM_WaveformTimerConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_HRTIM_Init+0x154>
  {
    Error_Handler();
 8000ce0:	f002 f886 	bl	8002df0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8000ce4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ce8:	461a      	mov	r2, r3
 8000cea:	2101      	movs	r1, #1
 8000cec:	487f      	ldr	r0, [pc, #508]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000cee:	f003 fbcd 	bl	800448c <HAL_HRTIM_WaveformTimerConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_HRTIM_Init+0x16c>
  {
    Error_Handler();
 8000cf8:	f002 f87a 	bl	8002df0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8000cfc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d00:	461a      	mov	r2, r3
 8000d02:	2102      	movs	r1, #2
 8000d04:	4879      	ldr	r0, [pc, #484]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000d06:	f003 fbc1 	bl	800448c <HAL_HRTIM_WaveformTimerConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_HRTIM_Init+0x184>
  {
    Error_Handler();
 8000d10:	f002 f86e 	bl	8002df0 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8000d14:	2300      	movs	r3, #0
 8000d16:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 8000d18:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	2103      	movs	r1, #3
 8000d20:	4872      	ldr	r0, [pc, #456]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000d22:	f003 fbb3 	bl	800448c <HAL_HRTIM_WaveformTimerConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_HRTIM_Init+0x1a0>
  {
    Error_Handler();
 8000d2c:	f002 f860 	bl	8002df0 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x00005A00/2;
 8000d30:	f44f 5334 	mov.w	r3, #11520	@ 0x2d00
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000d36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	486b      	ldr	r0, [pc, #428]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000d40:	f003 fc16 	bl	8004570 <HAL_HRTIM_WaveformCompareConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_HRTIM_Init+0x1be>
  {
    Error_Handler();
 8000d4a:	f002 f851 	bl	8002df0 <Error_Handler>
  }
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62bb      	str	r3, [r7, #40]	@ 0x28
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000d56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4863      	ldr	r0, [pc, #396]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000d60:	f003 fc06 	bl	8004570 <HAL_HRTIM_WaveformCompareConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_HRTIM_Init+0x1de>
  {
    Error_Handler();
 8000d6a:	f002 f841 	bl	8002df0 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000d6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d72:	2202      	movs	r2, #2
 8000d74:	2101      	movs	r1, #1
 8000d76:	485d      	ldr	r0, [pc, #372]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000d78:	f003 fbfa 	bl	8004570 <HAL_HRTIM_WaveformCompareConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_HRTIM_Init+0x1f6>
  {
    Error_Handler();
 8000d82:	f002 f835 	bl	8002df0 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000d86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	2102      	movs	r1, #2
 8000d8e:	4857      	ldr	r0, [pc, #348]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000d90:	f003 fbee 	bl	8004570 <HAL_HRTIM_WaveformCompareConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_HRTIM_Init+0x20e>
  {
    Error_Handler();
 8000d9a:	f002 f829 	bl	8002df0 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000d9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da2:	2202      	movs	r2, #2
 8000da4:	2103      	movs	r1, #3
 8000da6:	4851      	ldr	r0, [pc, #324]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000da8:	f003 fbe2 	bl	8004570 <HAL_HRTIM_WaveformCompareConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_HRTIM_Init+0x226>
  {
    Error_Handler();
 8000db2:	f002 f81d 	bl	8002df0 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_EEV_1|HRTIM_OUTPUTSET_TIMPER;
 8000dba:	4b4e      	ldr	r3, [pc, #312]	@ (8000ef4 <MX_HRTIM_Init+0x364>)
 8000dbc:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8000dbe:	2308      	movs	r3, #8
 8000dc0:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4843      	ldr	r0, [pc, #268]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000dde:	f003 fd35 	bl	800484c <HAL_HRTIM_WaveformOutputConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_HRTIM_Init+0x25c>
  {
    Error_Handler();
 8000de8:	f002 f802 	bl	8002df0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2204      	movs	r2, #4
 8000df0:	2101      	movs	r1, #1
 8000df2:	483e      	ldr	r0, [pc, #248]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000df4:	f003 fd2a 	bl	800484c <HAL_HRTIM_WaveformOutputConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_HRTIM_Init+0x272>
  {
    Error_Handler();
 8000dfe:	f001 fff7 	bl	8002df0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2210      	movs	r2, #16
 8000e06:	2102      	movs	r1, #2
 8000e08:	4838      	ldr	r0, [pc, #224]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000e0a:	f003 fd1f 	bl	800484c <HAL_HRTIM_WaveformOutputConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_HRTIM_Init+0x288>
  {
    Error_Handler();
 8000e14:	f001 ffec 	bl	8002df0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	2240      	movs	r2, #64	@ 0x40
 8000e1c:	2103      	movs	r1, #3
 8000e1e:	4833      	ldr	r0, [pc, #204]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000e20:	f003 fd14 	bl	800484c <HAL_HRTIM_WaveformOutputConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_HRTIM_Init+0x29e>
  {
    Error_Handler();
 8000e2a:	f001 ffe1 	bl	8002df0 <Error_Handler>
  }
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8000e2e:	2310      	movs	r3, #16
 8000e30:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2202      	movs	r2, #2
 8000e36:	2100      	movs	r1, #0
 8000e38:	482c      	ldr	r0, [pc, #176]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000e3a:	f003 fd07 	bl	800484c <HAL_HRTIM_WaveformOutputConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_HRTIM_Init+0x2b8>
  {
    Error_Handler();
 8000e44:	f001 ffd4 	bl	8002df0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2208      	movs	r2, #8
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	4827      	ldr	r0, [pc, #156]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000e50:	f003 fcfc 	bl	800484c <HAL_HRTIM_WaveformOutputConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_HRTIM_Init+0x2ce>
  {
    Error_Handler();
 8000e5a:	f001 ffc9 	bl	8002df0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2220      	movs	r2, #32
 8000e62:	2102      	movs	r1, #2
 8000e64:	4821      	ldr	r0, [pc, #132]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000e66:	f003 fcf1 	bl	800484c <HAL_HRTIM_WaveformOutputConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_HRTIM_Init+0x2e4>
  {
    Error_Handler();
 8000e70:	f001 ffbe 	bl	8002df0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2280      	movs	r2, #128	@ 0x80
 8000e78:	2103      	movs	r1, #3
 8000e7a:	481c      	ldr	r0, [pc, #112]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000e7c:	f003 fce6 	bl	800484c <HAL_HRTIM_WaveformOutputConfig>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_HRTIM_Init+0x2fa>
  {
    Error_Handler();
 8000e86:	f001 ffb3 	bl	8002df0 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8000e8a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2101      	movs	r1, #1
 8000e92:	4816      	ldr	r0, [pc, #88]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000e94:	f003 fa6a 	bl	800436c <HAL_HRTIM_TimeBaseConfig>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_HRTIM_Init+0x312>
  {
    Error_Handler();
 8000e9e:	f001 ffa7 	bl	8002df0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	4810      	ldr	r0, [pc, #64]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000eac:	f003 fb60 	bl	8004570 <HAL_HRTIM_WaveformCompareConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_HRTIM_Init+0x32a>
  {
    Error_Handler();
 8000eb6:	f001 ff9b 	bl	8002df0 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8000eba:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	480a      	ldr	r0, [pc, #40]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000ec4:	f003 fa52 	bl	800436c <HAL_HRTIM_TimeBaseConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_HRTIM_Init+0x342>
  {
    Error_Handler();
 8000ece:	f001 ff8f 	bl	8002df0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000ed2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	2102      	movs	r1, #2
 8000eda:	4804      	ldr	r0, [pc, #16]	@ (8000eec <MX_HRTIM_Init+0x35c>)
 8000edc:	f003 fb48 	bl	8004570 <HAL_HRTIM_WaveformCompareConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d008      	beq.n	8000ef8 <MX_HRTIM_Init+0x368>
  {
    Error_Handler();
 8000ee6:	f001 ff83 	bl	8002df0 <Error_Handler>
 8000eea:	e005      	b.n	8000ef8 <MX_HRTIM_Init+0x368>
 8000eec:	24000204 	.word	0x24000204
 8000ef0:	40017400 	.word	0x40017400
 8000ef4:	00200004 	.word	0x00200004
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000ef8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000efc:	461a      	mov	r2, r3
 8000efe:	2103      	movs	r1, #3
 8000f00:	480d      	ldr	r0, [pc, #52]	@ (8000f38 <MX_HRTIM_Init+0x3a8>)
 8000f02:	f003 fa33 	bl	800436c <HAL_HRTIM_TimeBaseConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_HRTIM_Init+0x380>
  {
    Error_Handler();
 8000f0c:	f001 ff70 	bl	8002df0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000f10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f14:	2201      	movs	r2, #1
 8000f16:	2103      	movs	r1, #3
 8000f18:	4807      	ldr	r0, [pc, #28]	@ (8000f38 <MX_HRTIM_Init+0x3a8>)
 8000f1a:	f003 fb29 	bl	8004570 <HAL_HRTIM_WaveformCompareConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_HRTIM_Init+0x398>
  {
    Error_Handler();
 8000f24:	f001 ff64 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8000f28:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <MX_HRTIM_Init+0x3a8>)
 8000f2a:	f001 ffbb 	bl	8002ea4 <HAL_HRTIM_MspPostInit>

}
 8000f2e:	bf00      	nop
 8000f30:	37a8      	adds	r7, #168	@ 0xa8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	24000204 	.word	0x24000204

08000f3c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000f40:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <MX_LPTIM1_Init+0x54>)
 8000f42:	4a14      	ldr	r2, [pc, #80]	@ (8000f94 <MX_LPTIM1_Init+0x58>)
 8000f44:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000f46:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <MX_LPTIM1_Init+0x54>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000f4c:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <MX_LPTIM1_Init+0x54>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <MX_LPTIM1_Init+0x54>)
 8000f54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f58:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_LOW;
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f90 <MX_LPTIM1_Init+0x54>)
 8000f5c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000f60:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <MX_LPTIM1_Init+0x54>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000f68:	4b09      	ldr	r3, [pc, #36]	@ (8000f90 <MX_LPTIM1_Init+0x54>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <MX_LPTIM1_Init+0x54>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <MX_LPTIM1_Init+0x54>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000f7a:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <MX_LPTIM1_Init+0x54>)
 8000f7c:	f004 fa0e 	bl	800539c <HAL_LPTIM_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8000f86:	f001 ff33 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	240002e0 	.word	0x240002e0
 8000f94:	40002400 	.word	0x40002400

08000f98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b09a      	sub	sp, #104	@ 0x68
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
 8000fc8:	615a      	str	r2, [r3, #20]
 8000fca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	222c      	movs	r2, #44	@ 0x2c
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f00a fa7a 	bl	800b4cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fd8:	4b55      	ldr	r3, [pc, #340]	@ (8001130 <MX_TIM1_Init+0x198>)
 8000fda:	4a56      	ldr	r2, [pc, #344]	@ (8001134 <MX_TIM1_Init+0x19c>)
 8000fdc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fde:	4b54      	ldr	r3, [pc, #336]	@ (8001130 <MX_TIM1_Init+0x198>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe4:	4b52      	ldr	r3, [pc, #328]	@ (8001130 <MX_TIM1_Init+0x198>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000-1;
 8000fea:	4b51      	ldr	r3, [pc, #324]	@ (8001130 <MX_TIM1_Init+0x198>)
 8000fec:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000ff0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff2:	4b4f      	ldr	r3, [pc, #316]	@ (8001130 <MX_TIM1_Init+0x198>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ff8:	4b4d      	ldr	r3, [pc, #308]	@ (8001130 <MX_TIM1_Init+0x198>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ffe:	4b4c      	ldr	r3, [pc, #304]	@ (8001130 <MX_TIM1_Init+0x198>)
 8001000:	2280      	movs	r2, #128	@ 0x80
 8001002:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001004:	484a      	ldr	r0, [pc, #296]	@ (8001130 <MX_TIM1_Init+0x198>)
 8001006:	f007 f951 	bl	80082ac <HAL_TIM_Base_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001010:	f001 feee 	bl	8002df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001014:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001018:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800101a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800101e:	4619      	mov	r1, r3
 8001020:	4843      	ldr	r0, [pc, #268]	@ (8001130 <MX_TIM1_Init+0x198>)
 8001022:	f007 fd9f 	bl	8008b64 <HAL_TIM_ConfigClockSource>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800102c:	f001 fee0 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001030:	483f      	ldr	r0, [pc, #252]	@ (8001130 <MX_TIM1_Init+0x198>)
 8001032:	f007 fa0b 	bl	800844c <HAL_TIM_PWM_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800103c:	f001 fed8 	bl	8002df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001040:	2320      	movs	r3, #32
 8001042:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800104c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001050:	4619      	mov	r1, r3
 8001052:	4837      	ldr	r0, [pc, #220]	@ (8001130 <MX_TIM1_Init+0x198>)
 8001054:	f008 fae6 	bl	8009624 <HAL_TIMEx_MasterConfigSynchronization>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800105e:	f001 fec7 	bl	8002df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001062:	2360      	movs	r3, #96	@ 0x60
 8001064:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800106a:	2300      	movs	r3, #0
 800106c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800106e:	2300      	movs	r3, #0
 8001070:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800107a:	2300      	movs	r3, #0
 800107c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800107e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001082:	2200      	movs	r2, #0
 8001084:	4619      	mov	r1, r3
 8001086:	482a      	ldr	r0, [pc, #168]	@ (8001130 <MX_TIM1_Init+0x198>)
 8001088:	f007 fc58 	bl	800893c <HAL_TIM_PWM_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001092:	f001 fead 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001096:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800109a:	2204      	movs	r2, #4
 800109c:	4619      	mov	r1, r3
 800109e:	4824      	ldr	r0, [pc, #144]	@ (8001130 <MX_TIM1_Init+0x198>)
 80010a0:	f007 fc4c 	bl	800893c <HAL_TIM_PWM_ConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80010aa:	f001 fea1 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010b2:	2208      	movs	r2, #8
 80010b4:	4619      	mov	r1, r3
 80010b6:	481e      	ldr	r0, [pc, #120]	@ (8001130 <MX_TIM1_Init+0x198>)
 80010b8:	f007 fc40 	bl	800893c <HAL_TIM_PWM_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80010c2:	f001 fe95 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010ca:	220c      	movs	r2, #12
 80010cc:	4619      	mov	r1, r3
 80010ce:	4818      	ldr	r0, [pc, #96]	@ (8001130 <MX_TIM1_Init+0x198>)
 80010d0:	f007 fc34 	bl	800893c <HAL_TIM_PWM_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80010da:	f001 fe89 	bl	8002df0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001100:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	4619      	mov	r1, r3
 8001112:	4807      	ldr	r0, [pc, #28]	@ (8001130 <MX_TIM1_Init+0x198>)
 8001114:	f008 fb14 	bl	8009740 <HAL_TIMEx_ConfigBreakDeadTime>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 800111e:	f001 fe67 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001122:	4803      	ldr	r0, [pc, #12]	@ (8001130 <MX_TIM1_Init+0x198>)
 8001124:	f002 f8dc 	bl	80032e0 <HAL_TIM_MspPostInit>

}
 8001128:	bf00      	nop
 800112a:	3768      	adds	r7, #104	@ 0x68
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	24000318 	.word	0x24000318
 8001134:	40010000 	.word	0x40010000

08001138 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08e      	sub	sp, #56	@ 0x38
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001158:	463b      	mov	r3, r7
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]
 8001166:	615a      	str	r2, [r3, #20]
 8001168:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800116a:	4b2d      	ldr	r3, [pc, #180]	@ (8001220 <MX_TIM2_Init+0xe8>)
 800116c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001170:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001172:	4b2b      	ldr	r3, [pc, #172]	@ (8001220 <MX_TIM2_Init+0xe8>)
 8001174:	2200      	movs	r2, #0
 8001176:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001178:	4b29      	ldr	r3, [pc, #164]	@ (8001220 <MX_TIM2_Init+0xe8>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000-1;
 800117e:	4b28      	ldr	r3, [pc, #160]	@ (8001220 <MX_TIM2_Init+0xe8>)
 8001180:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001184:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001186:	4b26      	ldr	r3, [pc, #152]	@ (8001220 <MX_TIM2_Init+0xe8>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800118c:	4b24      	ldr	r3, [pc, #144]	@ (8001220 <MX_TIM2_Init+0xe8>)
 800118e:	2280      	movs	r2, #128	@ 0x80
 8001190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001192:	4823      	ldr	r0, [pc, #140]	@ (8001220 <MX_TIM2_Init+0xe8>)
 8001194:	f007 f88a 	bl	80082ac <HAL_TIM_Base_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800119e:	f001 fe27 	bl	8002df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ac:	4619      	mov	r1, r3
 80011ae:	481c      	ldr	r0, [pc, #112]	@ (8001220 <MX_TIM2_Init+0xe8>)
 80011b0:	f007 fcd8 	bl	8008b64 <HAL_TIM_ConfigClockSource>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80011ba:	f001 fe19 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011be:	4818      	ldr	r0, [pc, #96]	@ (8001220 <MX_TIM2_Init+0xe8>)
 80011c0:	f007 f944 	bl	800844c <HAL_TIM_PWM_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80011ca:	f001 fe11 	bl	8002df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	4810      	ldr	r0, [pc, #64]	@ (8001220 <MX_TIM2_Init+0xe8>)
 80011de:	f008 fa21 	bl	8009624 <HAL_TIMEx_MasterConfigSynchronization>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80011e8:	f001 fe02 	bl	8002df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ec:	2360      	movs	r3, #96	@ 0x60
 80011ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011fc:	463b      	mov	r3, r7
 80011fe:	2200      	movs	r2, #0
 8001200:	4619      	mov	r1, r3
 8001202:	4807      	ldr	r0, [pc, #28]	@ (8001220 <MX_TIM2_Init+0xe8>)
 8001204:	f007 fb9a 	bl	800893c <HAL_TIM_PWM_ConfigChannel>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800120e:	f001 fdef 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001212:	4803      	ldr	r0, [pc, #12]	@ (8001220 <MX_TIM2_Init+0xe8>)
 8001214:	f002 f864 	bl	80032e0 <HAL_TIM_MspPostInit>

}
 8001218:	bf00      	nop
 800121a:	3738      	adds	r7, #56	@ 0x38
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	24000364 	.word	0x24000364

08001224 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08e      	sub	sp, #56	@ 0x38
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001244:	463b      	mov	r3, r7
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]
 8001252:	615a      	str	r2, [r3, #20]
 8001254:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001256:	4b3d      	ldr	r3, [pc, #244]	@ (800134c <MX_TIM4_Init+0x128>)
 8001258:	4a3d      	ldr	r2, [pc, #244]	@ (8001350 <MX_TIM4_Init+0x12c>)
 800125a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800125c:	4b3b      	ldr	r3, [pc, #236]	@ (800134c <MX_TIM4_Init+0x128>)
 800125e:	2200      	movs	r2, #0
 8001260:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001262:	4b3a      	ldr	r3, [pc, #232]	@ (800134c <MX_TIM4_Init+0x128>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 24000-1;
 8001268:	4b38      	ldr	r3, [pc, #224]	@ (800134c <MX_TIM4_Init+0x128>)
 800126a:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800126e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001270:	4b36      	ldr	r3, [pc, #216]	@ (800134c <MX_TIM4_Init+0x128>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001276:	4b35      	ldr	r3, [pc, #212]	@ (800134c <MX_TIM4_Init+0x128>)
 8001278:	2280      	movs	r2, #128	@ 0x80
 800127a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800127c:	4833      	ldr	r0, [pc, #204]	@ (800134c <MX_TIM4_Init+0x128>)
 800127e:	f007 f815 	bl	80082ac <HAL_TIM_Base_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001288:	f001 fdb2 	bl	8002df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001290:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001292:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001296:	4619      	mov	r1, r3
 8001298:	482c      	ldr	r0, [pc, #176]	@ (800134c <MX_TIM4_Init+0x128>)
 800129a:	f007 fc63 	bl	8008b64 <HAL_TIM_ConfigClockSource>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80012a4:	f001 fda4 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012a8:	4828      	ldr	r0, [pc, #160]	@ (800134c <MX_TIM4_Init+0x128>)
 80012aa:	f007 f8cf 	bl	800844c <HAL_TIM_PWM_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80012b4:	f001 fd9c 	bl	8002df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	4619      	mov	r1, r3
 80012c6:	4821      	ldr	r0, [pc, #132]	@ (800134c <MX_TIM4_Init+0x128>)
 80012c8:	f008 f9ac 	bl	8009624 <HAL_TIMEx_MasterConfigSynchronization>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80012d2:	f001 fd8d 	bl	8002df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d6:	2360      	movs	r3, #96	@ 0x60
 80012d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e6:	463b      	mov	r3, r7
 80012e8:	2200      	movs	r2, #0
 80012ea:	4619      	mov	r1, r3
 80012ec:	4817      	ldr	r0, [pc, #92]	@ (800134c <MX_TIM4_Init+0x128>)
 80012ee:	f007 fb25 	bl	800893c <HAL_TIM_PWM_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80012f8:	f001 fd7a 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012fc:	463b      	mov	r3, r7
 80012fe:	2204      	movs	r2, #4
 8001300:	4619      	mov	r1, r3
 8001302:	4812      	ldr	r0, [pc, #72]	@ (800134c <MX_TIM4_Init+0x128>)
 8001304:	f007 fb1a 	bl	800893c <HAL_TIM_PWM_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800130e:	f001 fd6f 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001312:	463b      	mov	r3, r7
 8001314:	2208      	movs	r2, #8
 8001316:	4619      	mov	r1, r3
 8001318:	480c      	ldr	r0, [pc, #48]	@ (800134c <MX_TIM4_Init+0x128>)
 800131a:	f007 fb0f 	bl	800893c <HAL_TIM_PWM_ConfigChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001324:	f001 fd64 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001328:	463b      	mov	r3, r7
 800132a:	220c      	movs	r2, #12
 800132c:	4619      	mov	r1, r3
 800132e:	4807      	ldr	r0, [pc, #28]	@ (800134c <MX_TIM4_Init+0x128>)
 8001330:	f007 fb04 	bl	800893c <HAL_TIM_PWM_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 800133a:	f001 fd59 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800133e:	4803      	ldr	r0, [pc, #12]	@ (800134c <MX_TIM4_Init+0x128>)
 8001340:	f001 ffce 	bl	80032e0 <HAL_TIM_MspPostInit>

}
 8001344:	bf00      	nop
 8001346:	3738      	adds	r7, #56	@ 0x38
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	240003b0 	.word	0x240003b0
 8001350:	40000800 	.word	0x40000800

08001354 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08e      	sub	sp, #56	@ 0x38
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001374:	463b      	mov	r3, r7
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]
 8001382:	615a      	str	r2, [r3, #20]
 8001384:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001386:	4b32      	ldr	r3, [pc, #200]	@ (8001450 <MX_TIM5_Init+0xfc>)
 8001388:	4a32      	ldr	r2, [pc, #200]	@ (8001454 <MX_TIM5_Init+0x100>)
 800138a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800138c:	4b30      	ldr	r3, [pc, #192]	@ (8001450 <MX_TIM5_Init+0xfc>)
 800138e:	2200      	movs	r2, #0
 8001390:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001392:	4b2f      	ldr	r3, [pc, #188]	@ (8001450 <MX_TIM5_Init+0xfc>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 24000-1;
 8001398:	4b2d      	ldr	r3, [pc, #180]	@ (8001450 <MX_TIM5_Init+0xfc>)
 800139a:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800139e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001450 <MX_TIM5_Init+0xfc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001450 <MX_TIM5_Init+0xfc>)
 80013a8:	2280      	movs	r2, #128	@ 0x80
 80013aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013ac:	4828      	ldr	r0, [pc, #160]	@ (8001450 <MX_TIM5_Init+0xfc>)
 80013ae:	f006 ff7d 	bl	80082ac <HAL_TIM_Base_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80013b8:	f001 fd1a 	bl	8002df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013c6:	4619      	mov	r1, r3
 80013c8:	4821      	ldr	r0, [pc, #132]	@ (8001450 <MX_TIM5_Init+0xfc>)
 80013ca:	f007 fbcb 	bl	8008b64 <HAL_TIM_ConfigClockSource>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80013d4:	f001 fd0c 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80013d8:	481d      	ldr	r0, [pc, #116]	@ (8001450 <MX_TIM5_Init+0xfc>)
 80013da:	f007 f837 	bl	800844c <HAL_TIM_PWM_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80013e4:	f001 fd04 	bl	8002df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4619      	mov	r1, r3
 80013f6:	4816      	ldr	r0, [pc, #88]	@ (8001450 <MX_TIM5_Init+0xfc>)
 80013f8:	f008 f914 	bl	8009624 <HAL_TIMEx_MasterConfigSynchronization>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001402:	f001 fcf5 	bl	8002df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001406:	2360      	movs	r3, #96	@ 0x60
 8001408:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001416:	463b      	mov	r3, r7
 8001418:	2204      	movs	r2, #4
 800141a:	4619      	mov	r1, r3
 800141c:	480c      	ldr	r0, [pc, #48]	@ (8001450 <MX_TIM5_Init+0xfc>)
 800141e:	f007 fa8d 	bl	800893c <HAL_TIM_PWM_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001428:	f001 fce2 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800142c:	463b      	mov	r3, r7
 800142e:	2208      	movs	r2, #8
 8001430:	4619      	mov	r1, r3
 8001432:	4807      	ldr	r0, [pc, #28]	@ (8001450 <MX_TIM5_Init+0xfc>)
 8001434:	f007 fa82 	bl	800893c <HAL_TIM_PWM_ConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 800143e:	f001 fcd7 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001442:	4803      	ldr	r0, [pc, #12]	@ (8001450 <MX_TIM5_Init+0xfc>)
 8001444:	f001 ff4c 	bl	80032e0 <HAL_TIM_MspPostInit>

}
 8001448:	bf00      	nop
 800144a:	3738      	adds	r7, #56	@ 0x38
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	240003fc 	.word	0x240003fc
 8001454:	40000c00 	.word	0x40000c00

08001458 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b09a      	sub	sp, #104	@ 0x68
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001478:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
 8001488:	615a      	str	r2, [r3, #20]
 800148a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	222c      	movs	r2, #44	@ 0x2c
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f00a f81a 	bl	800b4cc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001498:	4b42      	ldr	r3, [pc, #264]	@ (80015a4 <MX_TIM8_Init+0x14c>)
 800149a:	4a43      	ldr	r2, [pc, #268]	@ (80015a8 <MX_TIM8_Init+0x150>)
 800149c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800149e:	4b41      	ldr	r3, [pc, #260]	@ (80015a4 <MX_TIM8_Init+0x14c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a4:	4b3f      	ldr	r3, [pc, #252]	@ (80015a4 <MX_TIM8_Init+0x14c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 24000-1;
 80014aa:	4b3e      	ldr	r3, [pc, #248]	@ (80015a4 <MX_TIM8_Init+0x14c>)
 80014ac:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80014b0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b2:	4b3c      	ldr	r3, [pc, #240]	@ (80015a4 <MX_TIM8_Init+0x14c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014b8:	4b3a      	ldr	r3, [pc, #232]	@ (80015a4 <MX_TIM8_Init+0x14c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014be:	4b39      	ldr	r3, [pc, #228]	@ (80015a4 <MX_TIM8_Init+0x14c>)
 80014c0:	2280      	movs	r2, #128	@ 0x80
 80014c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80014c4:	4837      	ldr	r0, [pc, #220]	@ (80015a4 <MX_TIM8_Init+0x14c>)
 80014c6:	f006 fef1 	bl	80082ac <HAL_TIM_Base_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80014d0:	f001 fc8e 	bl	8002df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014d8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80014da:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80014de:	4619      	mov	r1, r3
 80014e0:	4830      	ldr	r0, [pc, #192]	@ (80015a4 <MX_TIM8_Init+0x14c>)
 80014e2:	f007 fb3f 	bl	8008b64 <HAL_TIM_ConfigClockSource>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80014ec:	f001 fc80 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80014f0:	482c      	ldr	r0, [pc, #176]	@ (80015a4 <MX_TIM8_Init+0x14c>)
 80014f2:	f006 ffab 	bl	800844c <HAL_TIM_PWM_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80014fc:	f001 fc78 	bl	8002df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001500:	2300      	movs	r3, #0
 8001502:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001504:	2300      	movs	r3, #0
 8001506:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800150c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001510:	4619      	mov	r1, r3
 8001512:	4824      	ldr	r0, [pc, #144]	@ (80015a4 <MX_TIM8_Init+0x14c>)
 8001514:	f008 f886 	bl	8009624 <HAL_TIMEx_MasterConfigSynchronization>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800151e:	f001 fc67 	bl	8002df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001522:	2360      	movs	r3, #96	@ 0x60
 8001524:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800152a:	2300      	movs	r3, #0
 800152c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800153a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800153e:	220c      	movs	r2, #12
 8001540:	4619      	mov	r1, r3
 8001542:	4818      	ldr	r0, [pc, #96]	@ (80015a4 <MX_TIM8_Init+0x14c>)
 8001544:	f007 f9fa 	bl	800893c <HAL_TIM_PWM_ConfigChannel>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800154e:	f001 fc4f 	bl	8002df0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001566:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800156a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001574:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001578:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	4619      	mov	r1, r3
 8001586:	4807      	ldr	r0, [pc, #28]	@ (80015a4 <MX_TIM8_Init+0x14c>)
 8001588:	f008 f8da 	bl	8009740 <HAL_TIMEx_ConfigBreakDeadTime>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001592:	f001 fc2d 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001596:	4803      	ldr	r0, [pc, #12]	@ (80015a4 <MX_TIM8_Init+0x14c>)
 8001598:	f001 fea2 	bl	80032e0 <HAL_TIM_MspPostInit>

}
 800159c:	bf00      	nop
 800159e:	3768      	adds	r7, #104	@ 0x68
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	24000448 	.word	0x24000448
 80015a8:	40010400 	.word	0x40010400

080015ac <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08e      	sub	sp, #56	@ 0x38
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015cc:	463b      	mov	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]
 80015da:	615a      	str	r2, [r3, #20]
 80015dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80015de:	4b2d      	ldr	r3, [pc, #180]	@ (8001694 <MX_TIM12_Init+0xe8>)
 80015e0:	4a2d      	ldr	r2, [pc, #180]	@ (8001698 <MX_TIM12_Init+0xec>)
 80015e2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80015e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001694 <MX_TIM12_Init+0xe8>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001694 <MX_TIM12_Init+0xe8>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 24000-1;
 80015f0:	4b28      	ldr	r3, [pc, #160]	@ (8001694 <MX_TIM12_Init+0xe8>)
 80015f2:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80015f6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f8:	4b26      	ldr	r3, [pc, #152]	@ (8001694 <MX_TIM12_Init+0xe8>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015fe:	4b25      	ldr	r3, [pc, #148]	@ (8001694 <MX_TIM12_Init+0xe8>)
 8001600:	2280      	movs	r2, #128	@ 0x80
 8001602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001604:	4823      	ldr	r0, [pc, #140]	@ (8001694 <MX_TIM12_Init+0xe8>)
 8001606:	f006 fe51 	bl	80082ac <HAL_TIM_Base_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM12_Init+0x68>
  {
    Error_Handler();
 8001610:	f001 fbee 	bl	8002df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001614:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001618:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800161a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800161e:	4619      	mov	r1, r3
 8001620:	481c      	ldr	r0, [pc, #112]	@ (8001694 <MX_TIM12_Init+0xe8>)
 8001622:	f007 fa9f 	bl	8008b64 <HAL_TIM_ConfigClockSource>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM12_Init+0x84>
  {
    Error_Handler();
 800162c:	f001 fbe0 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001630:	4818      	ldr	r0, [pc, #96]	@ (8001694 <MX_TIM12_Init+0xe8>)
 8001632:	f006 ff0b 	bl	800844c <HAL_TIM_PWM_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM12_Init+0x94>
  {
    Error_Handler();
 800163c:	f001 fbd8 	bl	8002df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4619      	mov	r1, r3
 800164e:	4811      	ldr	r0, [pc, #68]	@ (8001694 <MX_TIM12_Init+0xe8>)
 8001650:	f007 ffe8 	bl	8009624 <HAL_TIMEx_MasterConfigSynchronization>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 800165a:	f001 fbc9 	bl	8002df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800165e:	2360      	movs	r3, #96	@ 0x60
 8001660:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800166e:	463b      	mov	r3, r7
 8001670:	2204      	movs	r2, #4
 8001672:	4619      	mov	r1, r3
 8001674:	4807      	ldr	r0, [pc, #28]	@ (8001694 <MX_TIM12_Init+0xe8>)
 8001676:	f007 f961 	bl	800893c <HAL_TIM_PWM_ConfigChannel>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM12_Init+0xd8>
  {
    Error_Handler();
 8001680:	f001 fbb6 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001684:	4803      	ldr	r0, [pc, #12]	@ (8001694 <MX_TIM12_Init+0xe8>)
 8001686:	f001 fe2b 	bl	80032e0 <HAL_TIM_MspPostInit>

}
 800168a:	bf00      	nop
 800168c:	3738      	adds	r7, #56	@ 0x38
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	24000494 	.word	0x24000494
 8001698:	40001800 	.word	0x40001800

0800169c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
 80016b0:	615a      	str	r2, [r3, #20]
 80016b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80016b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001730 <MX_TIM13_Init+0x94>)
 80016b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001734 <MX_TIM13_Init+0x98>)
 80016b8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80016ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001730 <MX_TIM13_Init+0x94>)
 80016bc:	2200      	movs	r2, #0
 80016be:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001730 <MX_TIM13_Init+0x94>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 24000-1;
 80016c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <MX_TIM13_Init+0x94>)
 80016c8:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80016cc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ce:	4b18      	ldr	r3, [pc, #96]	@ (8001730 <MX_TIM13_Init+0x94>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016d4:	4b16      	ldr	r3, [pc, #88]	@ (8001730 <MX_TIM13_Init+0x94>)
 80016d6:	2280      	movs	r2, #128	@ 0x80
 80016d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80016da:	4815      	ldr	r0, [pc, #84]	@ (8001730 <MX_TIM13_Init+0x94>)
 80016dc:	f006 fde6 	bl	80082ac <HAL_TIM_Base_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80016e6:	f001 fb83 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80016ea:	4811      	ldr	r0, [pc, #68]	@ (8001730 <MX_TIM13_Init+0x94>)
 80016ec:	f006 feae 	bl	800844c <HAL_TIM_PWM_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80016f6:	f001 fb7b 	bl	8002df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016fa:	2360      	movs	r3, #96	@ 0x60
 80016fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2200      	movs	r2, #0
 800170e:	4619      	mov	r1, r3
 8001710:	4807      	ldr	r0, [pc, #28]	@ (8001730 <MX_TIM13_Init+0x94>)
 8001712:	f007 f913 	bl	800893c <HAL_TIM_PWM_ConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 800171c:	f001 fb68 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001720:	4803      	ldr	r0, [pc, #12]	@ (8001730 <MX_TIM13_Init+0x94>)
 8001722:	f001 fddd 	bl	80032e0 <HAL_TIM_MspPostInit>

}
 8001726:	bf00      	nop
 8001728:	3720      	adds	r7, #32
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	240004e0 	.word	0x240004e0
 8001734:	40001c00 	.word	0x40001c00

08001738 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
 800174c:	615a      	str	r2, [r3, #20]
 800174e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001750:	4b1e      	ldr	r3, [pc, #120]	@ (80017cc <MX_TIM14_Init+0x94>)
 8001752:	4a1f      	ldr	r2, [pc, #124]	@ (80017d0 <MX_TIM14_Init+0x98>)
 8001754:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001756:	4b1d      	ldr	r3, [pc, #116]	@ (80017cc <MX_TIM14_Init+0x94>)
 8001758:	2200      	movs	r2, #0
 800175a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175c:	4b1b      	ldr	r3, [pc, #108]	@ (80017cc <MX_TIM14_Init+0x94>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 24000-1;
 8001762:	4b1a      	ldr	r3, [pc, #104]	@ (80017cc <MX_TIM14_Init+0x94>)
 8001764:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001768:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176a:	4b18      	ldr	r3, [pc, #96]	@ (80017cc <MX_TIM14_Init+0x94>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001770:	4b16      	ldr	r3, [pc, #88]	@ (80017cc <MX_TIM14_Init+0x94>)
 8001772:	2280      	movs	r2, #128	@ 0x80
 8001774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001776:	4815      	ldr	r0, [pc, #84]	@ (80017cc <MX_TIM14_Init+0x94>)
 8001778:	f006 fd98 	bl	80082ac <HAL_TIM_Base_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001782:	f001 fb35 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001786:	4811      	ldr	r0, [pc, #68]	@ (80017cc <MX_TIM14_Init+0x94>)
 8001788:	f006 fe60 	bl	800844c <HAL_TIM_PWM_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001792:	f001 fb2d 	bl	8002df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001796:	2360      	movs	r3, #96	@ 0x60
 8001798:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2200      	movs	r2, #0
 80017aa:	4619      	mov	r1, r3
 80017ac:	4807      	ldr	r0, [pc, #28]	@ (80017cc <MX_TIM14_Init+0x94>)
 80017ae:	f007 f8c5 	bl	800893c <HAL_TIM_PWM_ConfigChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80017b8:	f001 fb1a 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80017bc:	4803      	ldr	r0, [pc, #12]	@ (80017cc <MX_TIM14_Init+0x94>)
 80017be:	f001 fd8f 	bl	80032e0 <HAL_TIM_MspPostInit>

}
 80017c2:	bf00      	nop
 80017c4:	3720      	adds	r7, #32
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2400052c 	.word	0x2400052c
 80017d0:	40002000 	.word	0x40002000

080017d4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b09a      	sub	sp, #104	@ 0x68
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017da:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
 8001804:	615a      	str	r2, [r3, #20]
 8001806:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	222c      	movs	r2, #44	@ 0x2c
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f009 fe5c 	bl	800b4cc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001814:	4b45      	ldr	r3, [pc, #276]	@ (800192c <MX_TIM15_Init+0x158>)
 8001816:	4a46      	ldr	r2, [pc, #280]	@ (8001930 <MX_TIM15_Init+0x15c>)
 8001818:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800181a:	4b44      	ldr	r3, [pc, #272]	@ (800192c <MX_TIM15_Init+0x158>)
 800181c:	2200      	movs	r2, #0
 800181e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001820:	4b42      	ldr	r3, [pc, #264]	@ (800192c <MX_TIM15_Init+0x158>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 24000-1;
 8001826:	4b41      	ldr	r3, [pc, #260]	@ (800192c <MX_TIM15_Init+0x158>)
 8001828:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800182c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182e:	4b3f      	ldr	r3, [pc, #252]	@ (800192c <MX_TIM15_Init+0x158>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001834:	4b3d      	ldr	r3, [pc, #244]	@ (800192c <MX_TIM15_Init+0x158>)
 8001836:	2200      	movs	r2, #0
 8001838:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800183a:	4b3c      	ldr	r3, [pc, #240]	@ (800192c <MX_TIM15_Init+0x158>)
 800183c:	2280      	movs	r2, #128	@ 0x80
 800183e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001840:	483a      	ldr	r0, [pc, #232]	@ (800192c <MX_TIM15_Init+0x158>)
 8001842:	f006 fd33 	bl	80082ac <HAL_TIM_Base_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 800184c:	f001 fad0 	bl	8002df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001850:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001854:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001856:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800185a:	4619      	mov	r1, r3
 800185c:	4833      	ldr	r0, [pc, #204]	@ (800192c <MX_TIM15_Init+0x158>)
 800185e:	f007 f981 	bl	8008b64 <HAL_TIM_ConfigClockSource>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001868:	f001 fac2 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800186c:	482f      	ldr	r0, [pc, #188]	@ (800192c <MX_TIM15_Init+0x158>)
 800186e:	f006 fded 	bl	800844c <HAL_TIM_PWM_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001878:	f001 faba 	bl	8002df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187c:	2300      	movs	r3, #0
 800187e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001884:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001888:	4619      	mov	r1, r3
 800188a:	4828      	ldr	r0, [pc, #160]	@ (800192c <MX_TIM15_Init+0x158>)
 800188c:	f007 feca 	bl	8009624 <HAL_TIMEx_MasterConfigSynchronization>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001896:	f001 faab 	bl	8002df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800189a:	2360      	movs	r3, #96	@ 0x60
 800189c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a2:	2300      	movs	r3, #0
 80018a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018a6:	2300      	movs	r3, #0
 80018a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018b2:	2300      	movs	r3, #0
 80018b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018ba:	2200      	movs	r2, #0
 80018bc:	4619      	mov	r1, r3
 80018be:	481b      	ldr	r0, [pc, #108]	@ (800192c <MX_TIM15_Init+0x158>)
 80018c0:	f007 f83c 	bl	800893c <HAL_TIM_PWM_ConfigChannel>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80018ca:	f001 fa91 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018d2:	2204      	movs	r2, #4
 80018d4:	4619      	mov	r1, r3
 80018d6:	4815      	ldr	r0, [pc, #84]	@ (800192c <MX_TIM15_Init+0x158>)
 80018d8:	f007 f830 	bl	800893c <HAL_TIM_PWM_ConfigChannel>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM15_Init+0x112>
  {
    Error_Handler();
 80018e2:	f001 fa85 	bl	8002df0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	4619      	mov	r1, r3
 800190c:	4807      	ldr	r0, [pc, #28]	@ (800192c <MX_TIM15_Init+0x158>)
 800190e:	f007 ff17 	bl	8009740 <HAL_TIMEx_ConfigBreakDeadTime>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM15_Init+0x148>
  {
    Error_Handler();
 8001918:	f001 fa6a 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800191c:	4803      	ldr	r0, [pc, #12]	@ (800192c <MX_TIM15_Init+0x158>)
 800191e:	f001 fcdf 	bl	80032e0 <HAL_TIM_MspPostInit>

}
 8001922:	bf00      	nop
 8001924:	3768      	adds	r7, #104	@ 0x68
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	24000578 	.word	0x24000578
 8001930:	40014000 	.word	0x40014000

08001934 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b092      	sub	sp, #72	@ 0x48
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800193a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
 8001948:	611a      	str	r2, [r3, #16]
 800194a:	615a      	str	r2, [r3, #20]
 800194c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800194e:	463b      	mov	r3, r7
 8001950:	222c      	movs	r2, #44	@ 0x2c
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f009 fdb9 	bl	800b4cc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800195a:	4b31      	ldr	r3, [pc, #196]	@ (8001a20 <MX_TIM16_Init+0xec>)
 800195c:	4a31      	ldr	r2, [pc, #196]	@ (8001a24 <MX_TIM16_Init+0xf0>)
 800195e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001960:	4b2f      	ldr	r3, [pc, #188]	@ (8001a20 <MX_TIM16_Init+0xec>)
 8001962:	2200      	movs	r2, #0
 8001964:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001966:	4b2e      	ldr	r3, [pc, #184]	@ (8001a20 <MX_TIM16_Init+0xec>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 24000-1;
 800196c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a20 <MX_TIM16_Init+0xec>)
 800196e:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001972:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001974:	4b2a      	ldr	r3, [pc, #168]	@ (8001a20 <MX_TIM16_Init+0xec>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800197a:	4b29      	ldr	r3, [pc, #164]	@ (8001a20 <MX_TIM16_Init+0xec>)
 800197c:	2200      	movs	r2, #0
 800197e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001980:	4b27      	ldr	r3, [pc, #156]	@ (8001a20 <MX_TIM16_Init+0xec>)
 8001982:	2280      	movs	r2, #128	@ 0x80
 8001984:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001986:	4826      	ldr	r0, [pc, #152]	@ (8001a20 <MX_TIM16_Init+0xec>)
 8001988:	f006 fc90 	bl	80082ac <HAL_TIM_Base_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001992:	f001 fa2d 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001996:	4822      	ldr	r0, [pc, #136]	@ (8001a20 <MX_TIM16_Init+0xec>)
 8001998:	f006 fd58 	bl	800844c <HAL_TIM_PWM_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80019a2:	f001 fa25 	bl	8002df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019a6:	2360      	movs	r3, #96	@ 0x60
 80019a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ae:	2300      	movs	r3, #0
 80019b0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019b2:	2300      	movs	r3, #0
 80019b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019ba:	2300      	movs	r3, #0
 80019bc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019c6:	2200      	movs	r2, #0
 80019c8:	4619      	mov	r1, r3
 80019ca:	4815      	ldr	r0, [pc, #84]	@ (8001a20 <MX_TIM16_Init+0xec>)
 80019cc:	f006 ffb6 	bl	800893c <HAL_TIM_PWM_ConfigChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80019d6:	f001 fa0b 	bl	8002df0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80019fc:	463b      	mov	r3, r7
 80019fe:	4619      	mov	r1, r3
 8001a00:	4807      	ldr	r0, [pc, #28]	@ (8001a20 <MX_TIM16_Init+0xec>)
 8001a02:	f007 fe9d 	bl	8009740 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001a0c:	f001 f9f0 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001a10:	4803      	ldr	r0, [pc, #12]	@ (8001a20 <MX_TIM16_Init+0xec>)
 8001a12:	f001 fc65 	bl	80032e0 <HAL_TIM_MspPostInit>

}
 8001a16:	bf00      	nop
 8001a18:	3748      	adds	r7, #72	@ 0x48
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	240005c4 	.word	0x240005c4
 8001a24:	40014400 	.word	0x40014400

08001a28 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b0be      	sub	sp, #248	@ 0xf8
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef UART_InitStruct = {0};
 8001a2e:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001a32:	2220      	movs	r2, #32
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f009 fd48 	bl	800b4cc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
 8001a4c:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a4e:	463b      	mov	r3, r7
 8001a50:	22c0      	movs	r2, #192	@ 0xc0
 8001a52:	2100      	movs	r1, #0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f009 fd39 	bl	800b4cc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a5a:	f04f 0202 	mov.w	r2, #2
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a6a:	463b      	mov	r3, r7
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f005 f8af 	bl	8006bd0 <HAL_RCCEx_PeriphCLKConfig>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_UART4_Init+0x54>
  {
    Error_Handler();
 8001a78:	f001 f9ba 	bl	8002df0 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8001a7c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001a80:	f7fe fde6 	bl	8000650 <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8001a84:	2004      	movs	r0, #4
 8001a86:	f7fe fdc7 	bl	8000618 <LL_AHB4_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8001a8a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a92:	2302      	movs	r3, #2
 8001a94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001aaa:	2308      	movs	r3, #8
 8001aac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab0:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	482d      	ldr	r0, [pc, #180]	@ (8001b6c <MX_UART4_Init+0x144>)
 8001ab8:	f007 ffb8 	bl	8009a2c <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001abc:	f7fe fc68 	bl	8000390 <__NVIC_GetPriorityGrouping>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fcb8 	bl	800043c <NVIC_EncodePriority>
 8001acc:	4603      	mov	r3, r0
 8001ace:	4619      	mov	r1, r3
 8001ad0:	2034      	movs	r0, #52	@ 0x34
 8001ad2:	f7fe fc89 	bl	80003e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8001ad6:	2034      	movs	r0, #52	@ 0x34
 8001ad8:	f7fe fc68 	bl	80003ac <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  UART_InitStruct.BaudRate = 115200;
 8001ae2:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001ae6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  UART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001afc:	230c      	movs	r3, #12
 8001afe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_USART_Init(UART4, &UART_InitStruct);
 8001b0e:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001b12:	4619      	mov	r1, r3
 8001b14:	4816      	ldr	r0, [pc, #88]	@ (8001b70 <MX_UART4_Init+0x148>)
 8001b16:	f008 ff37 	bl	800a988 <LL_USART_Init>
  LL_USART_DisableFIFO(UART4);
 8001b1a:	4815      	ldr	r0, [pc, #84]	@ (8001b70 <MX_UART4_Init+0x148>)
 8001b1c:	f7fe fcd1 	bl	80004c2 <LL_USART_DisableFIFO>
  LL_USART_SetTXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 8001b20:	2100      	movs	r1, #0
 8001b22:	4813      	ldr	r0, [pc, #76]	@ (8001b70 <MX_UART4_Init+0x148>)
 8001b24:	f7fe fcdd 	bl	80004e2 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4811      	ldr	r0, [pc, #68]	@ (8001b70 <MX_UART4_Init+0x148>)
 8001b2c:	f7fe fd00 	bl	8000530 <LL_USART_SetRXFIFOThreshold>
  LL_USART_ConfigAsyncMode(UART4);
 8001b30:	480f      	ldr	r0, [pc, #60]	@ (8001b70 <MX_UART4_Init+0x148>)
 8001b32:	f7fe fd24 	bl	800057e <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType UART4 */

  /* USER CODE END WKUPType UART4 */

  LL_USART_Enable(UART4);
 8001b36:	480e      	ldr	r0, [pc, #56]	@ (8001b70 <MX_UART4_Init+0x148>)
 8001b38:	f7fe fcb3 	bl	80004a2 <LL_USART_Enable>

  /* Polling UART4 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(UART4))) || (!(LL_USART_IsActiveFlag_REACK(UART4))))
 8001b3c:	bf00      	nop
 8001b3e:	480c      	ldr	r0, [pc, #48]	@ (8001b70 <MX_UART4_Init+0x148>)
 8001b40:	f7fe fd33 	bl	80005aa <LL_USART_IsActiveFlag_TEACK>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f9      	beq.n	8001b3e <MX_UART4_Init+0x116>
 8001b4a:	4809      	ldr	r0, [pc, #36]	@ (8001b70 <MX_UART4_Init+0x148>)
 8001b4c:	f7fe fd41 	bl	80005d2 <LL_USART_IsActiveFlag_REACK>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f3      	beq.n	8001b3e <MX_UART4_Init+0x116>
  {
  }
  /* USER CODE BEGIN UART4_Init 2 */
  UART4->CR1 |= (USART_CR1_TE|USART_CR1_RXNEIE|USART_CR1_RE|USART_CR1_UE);
 8001b56:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <MX_UART4_Init+0x148>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a05      	ldr	r2, [pc, #20]	@ (8001b70 <MX_UART4_Init+0x148>)
 8001b5c:	f043 032d 	orr.w	r3, r3, #45	@ 0x2d
 8001b60:	6013      	str	r3, [r2, #0]
  /* USER CODE END UART4_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	37f8      	adds	r7, #248	@ 0xf8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	58020800 	.word	0x58020800
 8001b70:	40004c00 	.word	0x40004c00

08001b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08c      	sub	sp, #48	@ 0x30
 8001b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7a:	f107 031c 	add.w	r3, r7, #28
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
 8001b88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b8a:	4b59      	ldr	r3, [pc, #356]	@ (8001cf0 <MX_GPIO_Init+0x17c>)
 8001b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b90:	4a57      	ldr	r2, [pc, #348]	@ (8001cf0 <MX_GPIO_Init+0x17c>)
 8001b92:	f043 0310 	orr.w	r3, r3, #16
 8001b96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b9a:	4b55      	ldr	r3, [pc, #340]	@ (8001cf0 <MX_GPIO_Init+0x17c>)
 8001b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ba0:	f003 0310 	and.w	r3, r3, #16
 8001ba4:	61bb      	str	r3, [r7, #24]
 8001ba6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba8:	4b51      	ldr	r3, [pc, #324]	@ (8001cf0 <MX_GPIO_Init+0x17c>)
 8001baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bae:	4a50      	ldr	r2, [pc, #320]	@ (8001cf0 <MX_GPIO_Init+0x17c>)
 8001bb0:	f043 0304 	orr.w	r3, r3, #4
 8001bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bb8:	4b4d      	ldr	r3, [pc, #308]	@ (8001cf0 <MX_GPIO_Init+0x17c>)
 8001bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8001cf0 <MX_GPIO_Init+0x17c>)
 8001bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bcc:	4a48      	ldr	r2, [pc, #288]	@ (8001cf0 <MX_GPIO_Init+0x17c>)
 8001bce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bd6:	4b46      	ldr	r3, [pc, #280]	@ (8001cf0 <MX_GPIO_Init+0x17c>)
 8001bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be4:	4b42      	ldr	r3, [pc, #264]	@ (8001cf0 <MX_GPIO_Init+0x17c>)
 8001be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bea:	4a41      	ldr	r2, [pc, #260]	@ (8001cf0 <MX_GPIO_Init+0x17c>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bf4:	4b3e      	ldr	r3, [pc, #248]	@ (8001cf0 <MX_GPIO_Init+0x17c>)
 8001bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c02:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf0 <MX_GPIO_Init+0x17c>)
 8001c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c08:	4a39      	ldr	r2, [pc, #228]	@ (8001cf0 <MX_GPIO_Init+0x17c>)
 8001c0a:	f043 0302 	orr.w	r3, r3, #2
 8001c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c12:	4b37      	ldr	r3, [pc, #220]	@ (8001cf0 <MX_GPIO_Init+0x17c>)
 8001c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c20:	4b33      	ldr	r3, [pc, #204]	@ (8001cf0 <MX_GPIO_Init+0x17c>)
 8001c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c26:	4a32      	ldr	r2, [pc, #200]	@ (8001cf0 <MX_GPIO_Init+0x17c>)
 8001c28:	f043 0308 	orr.w	r3, r3, #8
 8001c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c30:	4b2f      	ldr	r3, [pc, #188]	@ (8001cf0 <MX_GPIO_Init+0x17c>)
 8001c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f249 519f 	movw	r1, #38303	@ 0x959f
 8001c44:	482b      	ldr	r0, [pc, #172]	@ (8001cf4 <MX_GPIO_Init+0x180>)
 8001c46:	f002 faa7 	bl	8004198 <HAL_GPIO_WritePin>
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin, GPIO_PIN_RESET);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001c50:	4829      	ldr	r0, [pc, #164]	@ (8001cf8 <MX_GPIO_Init+0x184>)
 8001c52:	f002 faa1 	bl	8004198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin, GPIO_PIN_RESET);
 8001c56:	2200      	movs	r2, #0
 8001c58:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8001c5c:	4827      	ldr	r0, [pc, #156]	@ (8001cfc <MX_GPIO_Init+0x188>)
 8001c5e:	f002 fa9b 	bl	8004198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 8001c62:	2200      	movs	r2, #0
 8001c64:	f640 71f7 	movw	r1, #4087	@ 0xff7
 8001c68:	4825      	ldr	r0, [pc, #148]	@ (8001d00 <MX_GPIO_Init+0x18c>)
 8001c6a:	f002 fa95 	bl	8004198 <HAL_GPIO_WritePin>
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : TIM1_CH3_PH_Pin TIM1_CH4_PH_Pin TIM2_CH1_PH_Pin TIM8_CH4_PH_Pin
                           TIM12_CH2_PH_Pin TIM13_CH1_PH_Pin TIM14_CH1_PH_Pin TIM15_CH1_PH_Pin
                           TIM1_CH1_PH_Pin TIM1_CH2_PH_Pin */
  GPIO_InitStruct.Pin = TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 8001c6e:	f249 539f 	movw	r3, #38303	@ 0x959f
 8001c72:	61fb      	str	r3, [r7, #28]
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c74:	2301      	movs	r3, #1
 8001c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c80:	f107 031c 	add.w	r3, r7, #28
 8001c84:	4619      	mov	r1, r3
 8001c86:	481b      	ldr	r0, [pc, #108]	@ (8001cf4 <MX_GPIO_Init+0x180>)
 8001c88:	f002 f8d6 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH4_PH_Pin TIM5_CH2_PH_Pin TIM5_CH3_PH_Pin TIM4_CH3_PH_Pin */
  GPIO_InitStruct.Pin = TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin;
 8001c8c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c92:	2301      	movs	r3, #1
 8001c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4814      	ldr	r0, [pc, #80]	@ (8001cf8 <MX_GPIO_Init+0x184>)
 8001ca6:	f002 f8c7 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH1_PH_Pin TIM4_CH2_PH_Pin */
  GPIO_InitStruct.Pin = TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin;
 8001caa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbc:	f107 031c 	add.w	r3, r7, #28
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	480e      	ldr	r0, [pc, #56]	@ (8001cfc <MX_GPIO_Init+0x188>)
 8001cc4:	f002 f8b8 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : HRTIM_CHC1_PH_Pin HRTIM_CHC2_PH_Pin HRTIM_CHD1_PH_Pin HRTIM_CHD2_PH_Pin
                           TIM15_CH2_PH_Pin TIM16_CH1_PH_Pin LPTIM1_OUT_PH_Pin HRTIM_CHA1_PH_Pin
                           HRTIM_CHA2_PH_Pin HRTIM_CHB1_PH_Pin HRTIM_CHB2_PH_Pin */
  GPIO_InitStruct.Pin = HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 8001cc8:	f640 73f7 	movw	r3, #4087	@ 0xff7
 8001ccc:	61fb      	str	r3, [r7, #28]
                          |TIM15_CH2_PH_Pin|TIM16_CH1_PH_Pin|LPTIM1_OUT_PH_Pin|HRTIM_CHA1_PH_Pin
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cda:	f107 031c 	add.w	r3, r7, #28
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4807      	ldr	r0, [pc, #28]	@ (8001d00 <MX_GPIO_Init+0x18c>)
 8001ce2:	f002 f8a9 	bl	8003e38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ce6:	bf00      	nop
 8001ce8:	3730      	adds	r7, #48	@ 0x30
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	58024400 	.word	0x58024400
 8001cf4:	58021000 	.word	0x58021000
 8001cf8:	58020800 	.word	0x58020800
 8001cfc:	58020400 	.word	0x58020400
 8001d00:	58020c00 	.word	0x58020c00
 8001d04:	00000000 	.word	0x00000000

08001d08 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b087      	sub	sp, #28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	static int i = 0;  // index for actuator update
	static int t = 0; // variable to track time
	const int period = 10; // number of timer rollovers between updates
 8001d10:	230a      	movs	r3, #10
 8001d12:	617b      	str	r3, [r7, #20]
	const double step = 0.3;// max step size in volts
 8001d14:	a324      	add	r3, pc, #144	@ (adr r3, 8001da8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	/*//Used to account for period in time clicks for UART Output
		sys_timer+= 24000;
		period_ticks ++;
	*/

    if (htim==&htim1){
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a1b      	ldr	r2, [pc, #108]	@ (8001d90 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d12d      	bne.n	8001d82 <HAL_TIM_PeriodElapsedCallback+0x7a>
    	t+=1;
 8001d26:	4b1b      	ldr	r3, [pc, #108]	@ (8001d94 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	4a19      	ldr	r2, [pc, #100]	@ (8001d94 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001d2e:	6013      	str	r3, [r2, #0]
    	if(t%period == 0)
 8001d30:	4b18      	ldr	r3, [pc, #96]	@ (8001d94 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	fb93 f2f2 	sdiv	r2, r3, r2
 8001d3a:	6979      	ldr	r1, [r7, #20]
 8001d3c:	fb01 f202 	mul.w	r2, r1, r2
 8001d40:	1a9b      	subs	r3, r3, r2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d11d      	bne.n	8001d82 <HAL_TIM_PeriodElapsedCallback+0x7a>
    	{
    		if(i>=SIN_PERIOD) i = 0;
 8001d46:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d4e:	db02      	blt.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0x4e>
 8001d50:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
    		//update the output
    		ref = sine_vals[i]*step;
 8001d56:	4b10      	ldr	r3, [pc, #64]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a10      	ldr	r2, [pc, #64]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	ed93 6b00 	vldr	d6, [r3]
 8001d64:	ed97 7b02 	vldr	d7, [r7, #8]
 8001d68:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001d6e:	ed83 7b00 	vstr	d7, [r3]
			// inform main that the actuators need an update
    		i+=1;
 8001d72:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	3301      	adds	r3, #1
 8001d78:	4a07      	ldr	r2, [pc, #28]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001d7a:	6013      	str	r3, [r2, #0]
			ctrl_tmr_expired = TRUE;
 8001d7c:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]
    	}
	}

}
 8001d82:	bf00      	nop
 8001d84:	371c      	adds	r7, #28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	24000318 	.word	0x24000318
 8001d94:	240035b0 	.word	0x240035b0
 8001d98:	240035b4 	.word	0x240035b4
 8001d9c:	24000620 	.word	0x24000620
 8001da0:	24000618 	.word	0x24000618
 8001da4:	24000610 	.word	0x24000610
 8001da8:	33333333 	.word	0x33333333
 8001dac:	3fd33333 	.word	0x3fd33333

08001db0 <UART_update>:

/*Writes commands into the circular buffer as they are sent,
once the elements is equal to the command length, a flag is sent*/
void UART_update(){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0

	// echo back out the serial port
//	LL_USART_TransmitData8(UART4, recvd_byte);
	// update state machine with the character
	run_state_machine(recvd_byte);
 8001db4:	4b04      	ldr	r3, [pc, #16]	@ (8001dc8 <UART_update+0x18>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f000 f863 	bl	8001e84 <run_state_machine>
	// Clear the flag
	data_ready = FALSE;
 8001dbe:	4b03      	ldr	r3, [pc, #12]	@ (8001dcc <UART_update+0x1c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
	// restart the uart interrupt
//	HAL_UART_Receive_IT(UART4, rx_buff, sizeof(rx_buff));
}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	24002564 	.word	0x24002564
 8001dcc:	24002560 	.word	0x24002560

08001dd0 <command_update>:

/*Function that is called once the number of elements in the buffer
is equal to the command length. Fills elements into an array to print */
void command_update(){
 8001dd0:	b598      	push	{r3, r4, r7, lr}
 8001dd2:	af00      	add	r7, sp, #0

	for(index = 0; index <= CMD_LENGTH ; index ++){
 8001dd4:	4b26      	ldr	r3, [pc, #152]	@ (8001e70 <command_update+0xa0>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
 8001dda:	e015      	b.n	8001e08 <command_update+0x38>
		 cmd_bytes[index] = read_from_buffer(rxp);
 8001ddc:	4b25      	ldr	r3, [pc, #148]	@ (8001e74 <command_update+0xa4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a23      	ldr	r2, [pc, #140]	@ (8001e70 <command_update+0xa0>)
 8001de2:	f992 2000 	ldrsb.w	r2, [r2]
 8001de6:	4614      	mov	r4, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 f943 	bl	8002074 <read_from_buffer>
 8001dee:	4603      	mov	r3, r0
 8001df0:	461a      	mov	r2, r3
 8001df2:	4b21      	ldr	r3, [pc, #132]	@ (8001e78 <command_update+0xa8>)
 8001df4:	551a      	strb	r2, [r3, r4]
	for(index = 0; index <= CMD_LENGTH ; index ++){
 8001df6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e70 <command_update+0xa0>)
 8001df8:	f993 3000 	ldrsb.w	r3, [r3]
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	3301      	adds	r3, #1
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	b25a      	sxtb	r2, r3
 8001e04:	4b1a      	ldr	r3, [pc, #104]	@ (8001e70 <command_update+0xa0>)
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <command_update+0xa0>)
 8001e0a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e0e:	2b36      	cmp	r3, #54	@ 0x36
 8001e10:	dde4      	ble.n	8001ddc <command_update+0xc>
	 }

	for(index = 0; index <= NUM_ACTUATORS ; index ++){
 8001e12:	4b17      	ldr	r3, [pc, #92]	@ (8001e70 <command_update+0xa0>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
 8001e18:	e020      	b.n	8001e5c <command_update+0x8c>
		cmd_ref[index] = (cmd_bytes[(2*index)+1]<<8|cmd_bytes[2*index]);
 8001e1a:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <command_update+0xa0>)
 8001e1c:	f993 3000 	ldrsb.w	r3, [r3]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	3301      	adds	r3, #1
 8001e24:	4a14      	ldr	r2, [pc, #80]	@ (8001e78 <command_update+0xa8>)
 8001e26:	5cd3      	ldrb	r3, [r2, r3]
 8001e28:	021b      	lsls	r3, r3, #8
 8001e2a:	b21a      	sxth	r2, r3
 8001e2c:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <command_update+0xa0>)
 8001e2e:	f993 3000 	ldrsb.w	r3, [r3]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	4910      	ldr	r1, [pc, #64]	@ (8001e78 <command_update+0xa8>)
 8001e36:	5ccb      	ldrb	r3, [r1, r3]
 8001e38:	b21b      	sxth	r3, r3
 8001e3a:	490d      	ldr	r1, [pc, #52]	@ (8001e70 <command_update+0xa0>)
 8001e3c:	f991 1000 	ldrsb.w	r1, [r1]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	b21a      	sxth	r2, r3
 8001e44:	4b0d      	ldr	r3, [pc, #52]	@ (8001e7c <command_update+0xac>)
 8001e46:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	for(index = 0; index <= NUM_ACTUATORS ; index ++){
 8001e4a:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <command_update+0xa0>)
 8001e4c:	f993 3000 	ldrsb.w	r3, [r3]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	3301      	adds	r3, #1
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	b25a      	sxtb	r2, r3
 8001e58:	4b05      	ldr	r3, [pc, #20]	@ (8001e70 <command_update+0xa0>)
 8001e5a:	701a      	strb	r2, [r3, #0]
 8001e5c:	4b04      	ldr	r3, [pc, #16]	@ (8001e70 <command_update+0xa0>)
 8001e5e:	f993 3000 	ldrsb.w	r3, [r3]
 8001e62:	2b1b      	cmp	r3, #27
 8001e64:	ddd9      	ble.n	8001e1a <command_update+0x4a>
	}

//	HAL_UART_Transmit(&huart4, cmd_bytes, sizeof(cmd_bytes), 10);

	cmd_ready = FALSE;
 8001e66:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <command_update+0xb0>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	bd98      	pop	{r3, r4, r7, pc}
 8001e70:	24003574 	.word	0x24003574
 8001e74:	24000000 	.word	0x24000000
 8001e78:	24002d74 	.word	0x24002d74
 8001e7c:	24003578 	.word	0x24003578
 8001e80:	24003575 	.word	0x24003575

08001e84 <run_state_machine>:


static void run_state_machine(uint8_t byte)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
	static int current_state = startByte1;
	static int counter = 0;
	int next_state;

	switch(current_state){
 8001e8e:	4b36      	ldr	r3, [pc, #216]	@ (8001f68 <run_state_machine+0xe4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d85f      	bhi.n	8001f56 <run_state_machine+0xd2>
 8001e96:	a201      	add	r2, pc, #4	@ (adr r2, 8001e9c <run_state_machine+0x18>)
 8001e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9c:	08001eb1 	.word	0x08001eb1
 8001ea0:	08001ec9 	.word	0x08001ec9
 8001ea4:	08001ee5 	.word	0x08001ee5
 8001ea8:	08001f11 	.word	0x08001f11
 8001eac:	08001f27 	.word	0x08001f27
		case startByte1:
			if(byte == start_bytes[0]){
 8001eb0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f6c <run_state_machine+0xe8>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	79fa      	ldrb	r2, [r7, #7]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d102      	bne.n	8001ec0 <run_state_machine+0x3c>
				next_state = startByte2;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	60fb      	str	r3, [r7, #12]
			} else{
				next_state = current_state;
			}
			break;
 8001ebe:	e04b      	b.n	8001f58 <run_state_machine+0xd4>
				next_state = current_state;
 8001ec0:	4b29      	ldr	r3, [pc, #164]	@ (8001f68 <run_state_machine+0xe4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60fb      	str	r3, [r7, #12]
			break;
 8001ec6:	e047      	b.n	8001f58 <run_state_machine+0xd4>
		case(startByte2):
			if(byte == start_bytes[1]){
 8001ec8:	4b28      	ldr	r3, [pc, #160]	@ (8001f6c <run_state_machine+0xe8>)
 8001eca:	785b      	ldrb	r3, [r3, #1]
 8001ecc:	79fa      	ldrb	r2, [r7, #7]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d105      	bne.n	8001ede <run_state_machine+0x5a>
				next_state = storeMessage;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	60fb      	str	r3, [r7, #12]
				counter = 0;
 8001ed6:	4b26      	ldr	r3, [pc, #152]	@ (8001f70 <run_state_machine+0xec>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
			} else{
				next_state = startByte1;
			}
			break;
 8001edc:	e03c      	b.n	8001f58 <run_state_machine+0xd4>
				next_state = startByte1;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
			break;
 8001ee2:	e039      	b.n	8001f58 <run_state_machine+0xd4>
		case(storeMessage):
			if(counter == CMD_LENGTH-1){
 8001ee4:	4b22      	ldr	r3, [pc, #136]	@ (8001f70 <run_state_machine+0xec>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b35      	cmp	r3, #53	@ 0x35
 8001eea:	d102      	bne.n	8001ef2 <run_state_machine+0x6e>
				next_state = endByte1;
 8001eec:	2303      	movs	r3, #3
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	e001      	b.n	8001ef6 <run_state_machine+0x72>
			}else{
				next_state = storeMessage;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	60fb      	str	r3, [r7, #12]
			}
			write_buffer(rxp, byte);
 8001ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f74 <run_state_machine+0xf0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	79fa      	ldrb	r2, [r7, #7]
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f893 	bl	800202a <write_buffer>
			counter++;
 8001f04:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <run_state_machine+0xec>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	4a19      	ldr	r2, [pc, #100]	@ (8001f70 <run_state_machine+0xec>)
 8001f0c:	6013      	str	r3, [r2, #0]
			break;
 8001f0e:	e023      	b.n	8001f58 <run_state_machine+0xd4>
		case(endByte1):
			if(byte == end_bytes[0]){
 8001f10:	4b19      	ldr	r3, [pc, #100]	@ (8001f78 <run_state_machine+0xf4>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	79fa      	ldrb	r2, [r7, #7]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d102      	bne.n	8001f20 <run_state_machine+0x9c>
				next_state = endByte2;
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	60fb      	str	r3, [r7, #12]
			}else{
				next_state = startByte1;
			}
			break;
 8001f1e:	e01b      	b.n	8001f58 <run_state_machine+0xd4>
				next_state = startByte1;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]
			break;
 8001f24:	e018      	b.n	8001f58 <run_state_machine+0xd4>
		case(endByte2):
			if(byte == end_bytes[1]){
 8001f26:	4b14      	ldr	r3, [pc, #80]	@ (8001f78 <run_state_machine+0xf4>)
 8001f28:	785b      	ldrb	r3, [r3, #1]
 8001f2a:	79fa      	ldrb	r2, [r7, #7]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d107      	bne.n	8001f40 <run_state_machine+0xbc>
				cmd_ready = TRUE;
 8001f30:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <run_state_machine+0xf8>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	701a      	strb	r2, [r3, #0]
				LL_USART_TransmitData8(UART4,1);
 8001f36:	2101      	movs	r1, #1
 8001f38:	4811      	ldr	r0, [pc, #68]	@ (8001f80 <run_state_machine+0xfc>)
 8001f3a:	f7fe fb5e 	bl	80005fa <LL_USART_TransmitData8>
 8001f3e:	e007      	b.n	8001f50 <run_state_machine+0xcc>
			}else{
			rxp->read_index = 0;
 8001f40:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <run_state_machine+0xf0>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
			rxp->write_index = 0;
 8001f48:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <run_state_machine+0xf0>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	605a      	str	r2, [r3, #4]
			}
			next_state = startByte1;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
			break;
 8001f54:	e000      	b.n	8001f58 <run_state_machine+0xd4>
		default:
			break;
 8001f56:	bf00      	nop
	}
	current_state = next_state;
 8001f58:	4a03      	ldr	r2, [pc, #12]	@ (8001f68 <run_state_machine+0xe4>)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6013      	str	r3, [r2, #0]
}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	240035b8 	.word	0x240035b8
 8001f6c:	24000004 	.word	0x24000004
 8001f70:	240035bc 	.word	0x240035bc
 8001f74:	24000000 	.word	0x24000000
 8001f78:	24000008 	.word	0x24000008
 8001f7c:	24003575 	.word	0x24003575
 8001f80:	40004c00 	.word	0x40004c00

08001f84 <init_buffer>:
    }
    return 0; /*no data available*/
}


static void init_buffer(struct circular_buffer *buf) {
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
    int i;
    buf->read_index = 0; /*initialize read index to 0 */
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
    buf->write_index = 0; /*initialize write index to 0 */
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	605a      	str	r2, [r3, #4]
    buf->size = BUFFER_LENGTH; /*Set size to buffer length const*/
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f9e:	609a      	str	r2, [r3, #8]
    for (i = 0; i < BUFFER_LENGTH; i++) { /*initialize data to zero*/
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	e008      	b.n	8001fb8 <init_buffer+0x34>
        buf->data[i] = 0;
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4413      	add	r3, r2
 8001fac:	330c      	adds	r3, #12
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < BUFFER_LENGTH; i++) { /*initialize data to zero*/
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fbe:	dbf2      	blt.n	8001fa6 <init_buffer+0x22>
    } /*end for */
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <is_buffer_empty>:

/* function int is_buffer_empty(struct circular_buffer *buf)
 * takes a pointer to a circular buffer and compares the read and write indices
 * if they are equal then the buffer is empty
 */
static int8_t is_buffer_empty(struct circular_buffer *buf) {
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
    if (buf->read_index == buf->write_index) { //if read = write then the buffer is empty
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d101      	bne.n	8001fe6 <is_buffer_empty+0x18>
        return TRUE;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <is_buffer_empty+0x1a>
    }
    return FALSE;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <is_buffer_full>:

/*  bufFull(struct oBuffer *buf)
 * takes a pointer to a circular buffer and compares the read and write indices
 * if write+1 = read, then the buffer is full.
 */
static int8_t is_buffer_full(struct circular_buffer *buf) {
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
    /* write index +1 == read index is full,  the mod provides wrap around*/
    if ((buf->write_index + 1) % BUFFER_LENGTH == buf->read_index) {
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	3301      	adds	r3, #1
 8002002:	425a      	negs	r2, r3
 8002004:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002008:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800200c:	bf58      	it	pl
 800200e:	4253      	negpl	r3, r2
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	4293      	cmp	r3, r2
 8002016:	d101      	bne.n	800201c <is_buffer_full+0x28>
        return TRUE;
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <is_buffer_full+0x2a>
    }
    return FALSE;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <write_buffer>:

/* writeBuffer( (struct oBuffer *buf, unsigned char c)
 * takes a pointer to a circular buffer and a char to be written
 * returns SUCCESS or ERROR
 */
static int8_t write_buffer(struct circular_buffer *buf, unsigned char c) {
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	460b      	mov	r3, r1
 8002034:	70fb      	strb	r3, [r7, #3]
    if (is_buffer_full(buf) == FALSE) {
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff ffdc 	bl	8001ff4 <is_buffer_full>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d113      	bne.n	800206a <write_buffer+0x40>
        buf->data[buf->write_index] = c;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	78fa      	ldrb	r2, [r7, #3]
 800204c:	731a      	strb	r2, [r3, #12]
        /*increment the write index and wrap using modulus arithmetic */
        buf->write_index = (buf->write_index + 1) % BUFFER_LENGTH;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	3301      	adds	r3, #1
 8002054:	425a      	negs	r2, r3
 8002056:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800205a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800205e:	bf58      	it	pl
 8002060:	4253      	negpl	r3, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6053      	str	r3, [r2, #4]
        return SUCCESS;
 8002066:	2300      	movs	r3, #0
 8002068:	e000      	b.n	800206c <write_buffer+0x42>
    }
    return ERROR; /*no data written*/
 800206a:	2301      	movs	r3, #1
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <read_from_buffer>:
 * takes a pointer to a circular buffer
 * returns the value from the buffer
 * the read index is incremented and wrapped using modulus arithmetic
 * Returns 0 if the buffer is empty or the pointer is invalid
 */
static unsigned char read_from_buffer(struct circular_buffer *buf) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
    unsigned char val;
    if (is_buffer_empty(buf) == FALSE) {
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff ffa6 	bl	8001fce <is_buffer_empty>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d113      	bne.n	80020b0 <read_from_buffer+0x3c>
        val = buf->data[buf->read_index]; //get the char from the buffer
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	4413      	add	r3, r2
 8002090:	7b1b      	ldrb	r3, [r3, #12]
 8002092:	73fb      	strb	r3, [r7, #15]
        /*increment the read index and wrap using modulus arithmetic*/
        buf->read_index = (buf->read_index + 1) % BUFFER_LENGTH;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	425a      	negs	r2, r3
 800209c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020a0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80020a4:	bf58      	it	pl
 80020a6:	4253      	negpl	r3, r2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6013      	str	r3, [r2, #0]
        return val;
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	e000      	b.n	80020b2 <read_from_buffer+0x3e>
    }
    return 0;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	0000      	movs	r0, r0
 80020bc:	0000      	movs	r0, r0
	...

080020c0 <control_update>:
    return 0;
}


static void control_update(double ref)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	ed87 0b00 	vstr	d0, [r7]
	// sign bit of the command fed to phase input on the h-bridge
	static int phase=GPIO_PIN_SET;
	static uint16_t dutycycle=0;
	double absref = 0;
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	//Timer 1 channels
	// set the sign of the move (phase)
	if(cmd_ref[T1C1] < 0){
 80020d6:	4b9f      	ldr	r3, [pc, #636]	@ (8002354 <control_update+0x294>)
 80020d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	da03      	bge.n	80020e8 <control_update+0x28>
		phase = GPIO_PIN_RESET; // reverse direction
 80020e0:	4b9d      	ldr	r3, [pc, #628]	@ (8002358 <control_update+0x298>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	e002      	b.n	80020ee <control_update+0x2e>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 80020e8:	4b9b      	ldr	r3, [pc, #620]	@ (8002358 <control_update+0x298>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, phase);  //Starts the phase generation on each of the pins (Channels)
 80020ee:	4b9a      	ldr	r3, [pc, #616]	@ (8002358 <control_update+0x298>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	461a      	mov	r2, r3
 80020f6:	2101      	movs	r1, #1
 80020f8:	4898      	ldr	r0, [pc, #608]	@ (800235c <control_update+0x29c>)
 80020fa:	f002 f84d 	bl	8004198 <HAL_GPIO_WritePin>

	// set the sign of the move (phase)
	if(cmd_ref[T1C2] < 0){
 80020fe:	4b95      	ldr	r3, [pc, #596]	@ (8002354 <control_update+0x294>)
 8002100:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002104:	2b00      	cmp	r3, #0
 8002106:	da03      	bge.n	8002110 <control_update+0x50>
		phase = GPIO_PIN_RESET; // reverse direction
 8002108:	4b93      	ldr	r3, [pc, #588]	@ (8002358 <control_update+0x298>)
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	e002      	b.n	8002116 <control_update+0x56>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 8002110:	4b91      	ldr	r3, [pc, #580]	@ (8002358 <control_update+0x298>)
 8002112:	2201      	movs	r2, #1
 8002114:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, phase);
 8002116:	4b90      	ldr	r3, [pc, #576]	@ (8002358 <control_update+0x298>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	2102      	movs	r1, #2
 8002120:	488e      	ldr	r0, [pc, #568]	@ (800235c <control_update+0x29c>)
 8002122:	f002 f839 	bl	8004198 <HAL_GPIO_WritePin>

	// set the sign of the move (phase)
	if(cmd_ref[T1C3] < 0){
 8002126:	4b8b      	ldr	r3, [pc, #556]	@ (8002354 <control_update+0x294>)
 8002128:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	da03      	bge.n	8002138 <control_update+0x78>
		phase = GPIO_PIN_RESET; // reverse direction
 8002130:	4b89      	ldr	r3, [pc, #548]	@ (8002358 <control_update+0x298>)
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	e002      	b.n	800213e <control_update+0x7e>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 8002138:	4b87      	ldr	r3, [pc, #540]	@ (8002358 <control_update+0x298>)
 800213a:	2201      	movs	r2, #1
 800213c:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, phase);
 800213e:	4b86      	ldr	r3, [pc, #536]	@ (8002358 <control_update+0x298>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	461a      	mov	r2, r3
 8002146:	2104      	movs	r1, #4
 8002148:	4884      	ldr	r0, [pc, #528]	@ (800235c <control_update+0x29c>)
 800214a:	f002 f825 	bl	8004198 <HAL_GPIO_WritePin>

	// set the sign of the move (phase)
	if(cmd_ref[T1C4] < 0){
 800214e:	4b81      	ldr	r3, [pc, #516]	@ (8002354 <control_update+0x294>)
 8002150:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002154:	2b00      	cmp	r3, #0
 8002156:	da03      	bge.n	8002160 <control_update+0xa0>
		phase = GPIO_PIN_RESET; // reverse direction
 8002158:	4b7f      	ldr	r3, [pc, #508]	@ (8002358 <control_update+0x298>)
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	e002      	b.n	8002166 <control_update+0xa6>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 8002160:	4b7d      	ldr	r3, [pc, #500]	@ (8002358 <control_update+0x298>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, phase);
 8002166:	4b7c      	ldr	r3, [pc, #496]	@ (8002358 <control_update+0x298>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	2108      	movs	r1, #8
 8002170:	487a      	ldr	r0, [pc, #488]	@ (800235c <control_update+0x29c>)
 8002172:	f002 f811 	bl	8004198 <HAL_GPIO_WritePin>
	//End Timer 1

	//Timer 2 channel
		// set the sign of the move (phase)
	if(cmd_ref[T2C1] < 0){
 8002176:	4b77      	ldr	r3, [pc, #476]	@ (8002354 <control_update+0x294>)
 8002178:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	da03      	bge.n	8002188 <control_update+0xc8>
		phase = GPIO_PIN_RESET; // reverse direction
 8002180:	4b75      	ldr	r3, [pc, #468]	@ (8002358 <control_update+0x298>)
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	e002      	b.n	800218e <control_update+0xce>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 8002188:	4b73      	ldr	r3, [pc, #460]	@ (8002358 <control_update+0x298>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(TIM2_CH1_PH_GPIO_Port, TIM2_CH1_PH_Pin, phase);
 800218e:	4b72      	ldr	r3, [pc, #456]	@ (8002358 <control_update+0x298>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	461a      	mov	r2, r3
 8002196:	2110      	movs	r1, #16
 8002198:	4870      	ldr	r0, [pc, #448]	@ (800235c <control_update+0x29c>)
 800219a:	f001 fffd 	bl	8004198 <HAL_GPIO_WritePin>
	//End Timer 2

	//Timer 4 channels
	// set the sign of the move (phase)
	if(cmd_ref[T4C1] < 0){
 800219e:	4b6d      	ldr	r3, [pc, #436]	@ (8002354 <control_update+0x294>)
 80021a0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	da03      	bge.n	80021b0 <control_update+0xf0>
		phase = GPIO_PIN_RESET; // reverse direction
 80021a8:	4b6b      	ldr	r3, [pc, #428]	@ (8002358 <control_update+0x298>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	e002      	b.n	80021b6 <control_update+0xf6>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 80021b0:	4b69      	ldr	r3, [pc, #420]	@ (8002358 <control_update+0x298>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(TIM4_CH1_PH_GPIO_Port, TIM4_CH1_PH_Pin, phase);
 80021b6:	4b68      	ldr	r3, [pc, #416]	@ (8002358 <control_update+0x298>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	461a      	mov	r2, r3
 80021be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80021c2:	4867      	ldr	r0, [pc, #412]	@ (8002360 <control_update+0x2a0>)
 80021c4:	f001 ffe8 	bl	8004198 <HAL_GPIO_WritePin>

	// set the sign of the move (phase)
	if(cmd_ref[T4C2] < 0){
 80021c8:	4b62      	ldr	r3, [pc, #392]	@ (8002354 <control_update+0x294>)
 80021ca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	da03      	bge.n	80021da <control_update+0x11a>
		phase = GPIO_PIN_RESET; // reverse direction
 80021d2:	4b61      	ldr	r3, [pc, #388]	@ (8002358 <control_update+0x298>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	e002      	b.n	80021e0 <control_update+0x120>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 80021da:	4b5f      	ldr	r3, [pc, #380]	@ (8002358 <control_update+0x298>)
 80021dc:	2201      	movs	r2, #1
 80021de:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(TIM4_CH2_PH_GPIO_Port, TIM4_CH2_PH_Pin, phase);
 80021e0:	4b5d      	ldr	r3, [pc, #372]	@ (8002358 <control_update+0x298>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80021ec:	485c      	ldr	r0, [pc, #368]	@ (8002360 <control_update+0x2a0>)
 80021ee:	f001 ffd3 	bl	8004198 <HAL_GPIO_WritePin>

	// set the sign of the move (phase)
	if(cmd_ref[T4C3] < 0){
 80021f2:	4b58      	ldr	r3, [pc, #352]	@ (8002354 <control_update+0x294>)
 80021f4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	da03      	bge.n	8002204 <control_update+0x144>
		phase = GPIO_PIN_RESET; // reverse direction
 80021fc:	4b56      	ldr	r3, [pc, #344]	@ (8002358 <control_update+0x298>)
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	e002      	b.n	800220a <control_update+0x14a>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 8002204:	4b54      	ldr	r3, [pc, #336]	@ (8002358 <control_update+0x298>)
 8002206:	2201      	movs	r2, #1
 8002208:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(TIM4_CH3_PH_GPIO_Port, TIM4_CH3_PH_Pin, phase);
 800220a:	4b53      	ldr	r3, [pc, #332]	@ (8002358 <control_update+0x298>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002216:	4853      	ldr	r0, [pc, #332]	@ (8002364 <control_update+0x2a4>)
 8002218:	f001 ffbe 	bl	8004198 <HAL_GPIO_WritePin>

	// set the sign of the move (phase)
	if(cmd_ref[T4C4] < 0){
 800221c:	4b4d      	ldr	r3, [pc, #308]	@ (8002354 <control_update+0x294>)
 800221e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002222:	2b00      	cmp	r3, #0
 8002224:	da03      	bge.n	800222e <control_update+0x16e>
		phase = GPIO_PIN_RESET; // reverse direction
 8002226:	4b4c      	ldr	r3, [pc, #304]	@ (8002358 <control_update+0x298>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	e002      	b.n	8002234 <control_update+0x174>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 800222e:	4b4a      	ldr	r3, [pc, #296]	@ (8002358 <control_update+0x298>)
 8002230:	2201      	movs	r2, #1
 8002232:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(TIM4_CH4_PH_GPIO_Port, TIM4_CH4_PH_Pin, phase);
 8002234:	4b48      	ldr	r3, [pc, #288]	@ (8002358 <control_update+0x298>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	461a      	mov	r2, r3
 800223c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002240:	4848      	ldr	r0, [pc, #288]	@ (8002364 <control_update+0x2a4>)
 8002242:	f001 ffa9 	bl	8004198 <HAL_GPIO_WritePin>
	//End Timer 4


	//Timer 5
	// set the sign of the move (phase)
	if(cmd_ref[T5C2] < 0){
 8002246:	4b43      	ldr	r3, [pc, #268]	@ (8002354 <control_update+0x294>)
 8002248:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800224c:	2b00      	cmp	r3, #0
 800224e:	da03      	bge.n	8002258 <control_update+0x198>
		phase = GPIO_PIN_RESET; // reverse direction
 8002250:	4b41      	ldr	r3, [pc, #260]	@ (8002358 <control_update+0x298>)
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	e002      	b.n	800225e <control_update+0x19e>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 8002258:	4b3f      	ldr	r3, [pc, #252]	@ (8002358 <control_update+0x298>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(TIM5_CH2_PH_GPIO_Port, TIM5_CH2_PH_Pin, phase);
 800225e:	4b3e      	ldr	r3, [pc, #248]	@ (8002358 <control_update+0x298>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	b2db      	uxtb	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800226a:	483e      	ldr	r0, [pc, #248]	@ (8002364 <control_update+0x2a4>)
 800226c:	f001 ff94 	bl	8004198 <HAL_GPIO_WritePin>

	// set the sign of the move (phase)
	if(cmd_ref[T5C3] < 0){
 8002270:	4b38      	ldr	r3, [pc, #224]	@ (8002354 <control_update+0x294>)
 8002272:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002276:	2b00      	cmp	r3, #0
 8002278:	da03      	bge.n	8002282 <control_update+0x1c2>
		phase = GPIO_PIN_RESET; // reverse direction
 800227a:	4b37      	ldr	r3, [pc, #220]	@ (8002358 <control_update+0x298>)
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	e002      	b.n	8002288 <control_update+0x1c8>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 8002282:	4b35      	ldr	r3, [pc, #212]	@ (8002358 <control_update+0x298>)
 8002284:	2201      	movs	r2, #1
 8002286:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(TIM5_CH3_PH_GPIO_Port, TIM5_CH3_PH_Pin, phase);
 8002288:	4b33      	ldr	r3, [pc, #204]	@ (8002358 <control_update+0x298>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002294:	4833      	ldr	r0, [pc, #204]	@ (8002364 <control_update+0x2a4>)
 8002296:	f001 ff7f 	bl	8004198 <HAL_GPIO_WritePin>
    //End Timer 5


    //Timer 8
		// set the sign of the move (phase)
	if(cmd_ref[T8C4] < 0){
 800229a:	4b2e      	ldr	r3, [pc, #184]	@ (8002354 <control_update+0x294>)
 800229c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	da03      	bge.n	80022ac <control_update+0x1ec>
		phase = GPIO_PIN_RESET; // reverse direction
 80022a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002358 <control_update+0x298>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	e002      	b.n	80022b2 <control_update+0x1f2>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 80022ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002358 <control_update+0x298>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(TIM8_CH4_PH_GPIO_Port, TIM8_CH4_PH_Pin, phase);
 80022b2:	4b29      	ldr	r3, [pc, #164]	@ (8002358 <control_update+0x298>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	461a      	mov	r2, r3
 80022ba:	2180      	movs	r1, #128	@ 0x80
 80022bc:	4827      	ldr	r0, [pc, #156]	@ (800235c <control_update+0x29c>)
 80022be:	f001 ff6b 	bl	8004198 <HAL_GPIO_WritePin>
	//End Timer 8


    //Timer 12
	// set the sign of the move (phase)
	if(cmd_ref[T12C2] < 0){
 80022c2:	4b24      	ldr	r3, [pc, #144]	@ (8002354 <control_update+0x294>)
 80022c4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	da03      	bge.n	80022d4 <control_update+0x214>
		phase = GPIO_PIN_RESET; // reverse direction
 80022cc:	4b22      	ldr	r3, [pc, #136]	@ (8002358 <control_update+0x298>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	e002      	b.n	80022da <control_update+0x21a>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 80022d4:	4b20      	ldr	r3, [pc, #128]	@ (8002358 <control_update+0x298>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(TIM12_CH2_PH_GPIO_Port, TIM12_CH2_PH_Pin, phase);
 80022da:	4b1f      	ldr	r3, [pc, #124]	@ (8002358 <control_update+0x298>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	461a      	mov	r2, r3
 80022e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022e6:	481d      	ldr	r0, [pc, #116]	@ (800235c <control_update+0x29c>)
 80022e8:	f001 ff56 	bl	8004198 <HAL_GPIO_WritePin>
    //End Timer 12


    //Timer 13
	// set the sign of the move (phase)
	if(cmd_ref[T13C1] < 0){
 80022ec:	4b19      	ldr	r3, [pc, #100]	@ (8002354 <control_update+0x294>)
 80022ee:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	da03      	bge.n	80022fe <control_update+0x23e>
		phase = GPIO_PIN_RESET; // reverse direction
 80022f6:	4b18      	ldr	r3, [pc, #96]	@ (8002358 <control_update+0x298>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	e002      	b.n	8002304 <control_update+0x244>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 80022fe:	4b16      	ldr	r3, [pc, #88]	@ (8002358 <control_update+0x298>)
 8002300:	2201      	movs	r2, #1
 8002302:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(TIM13_CH1_PH_GPIO_Port, TIM13_CH1_PH_Pin, phase);
 8002304:	4b14      	ldr	r3, [pc, #80]	@ (8002358 <control_update+0x298>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	461a      	mov	r2, r3
 800230c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002310:	4812      	ldr	r0, [pc, #72]	@ (800235c <control_update+0x29c>)
 8002312:	f001 ff41 	bl	8004198 <HAL_GPIO_WritePin>
    //End Timer 13


    //Timer 14
	// set the sign of the move (phase)
	if(cmd_ref[T14C1] < 0){
 8002316:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <control_update+0x294>)
 8002318:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800231c:	2b00      	cmp	r3, #0
 800231e:	da03      	bge.n	8002328 <control_update+0x268>
		phase = GPIO_PIN_RESET; // reverse direction
 8002320:	4b0d      	ldr	r3, [pc, #52]	@ (8002358 <control_update+0x298>)
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	e002      	b.n	800232e <control_update+0x26e>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 8002328:	4b0b      	ldr	r3, [pc, #44]	@ (8002358 <control_update+0x298>)
 800232a:	2201      	movs	r2, #1
 800232c:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(TIM14_CH1_PH_GPIO_Port, TIM14_CH1_PH_Pin, phase);
 800232e:	4b0a      	ldr	r3, [pc, #40]	@ (8002358 <control_update+0x298>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800233a:	4808      	ldr	r0, [pc, #32]	@ (800235c <control_update+0x29c>)
 800233c:	f001 ff2c 	bl	8004198 <HAL_GPIO_WritePin>
    //End Timer 14


    //Timer 15
		// set the sign of the move (phase)
	if(cmd_ref[T15C1] < 0){
 8002340:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <control_update+0x294>)
 8002342:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002346:	2b00      	cmp	r3, #0
 8002348:	da0e      	bge.n	8002368 <control_update+0x2a8>
		phase = GPIO_PIN_RESET; // reverse direction
 800234a:	4b03      	ldr	r3, [pc, #12]	@ (8002358 <control_update+0x298>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	e00d      	b.n	800236e <control_update+0x2ae>
 8002352:	bf00      	nop
 8002354:	24003578 	.word	0x24003578
 8002358:	2400000c 	.word	0x2400000c
 800235c:	58021000 	.word	0x58021000
 8002360:	58020400 	.word	0x58020400
 8002364:	58020800 	.word	0x58020800
	} else {
		phase = GPIO_PIN_SET; //forward direction
 8002368:	4b70      	ldr	r3, [pc, #448]	@ (800252c <control_update+0x46c>)
 800236a:	2201      	movs	r2, #1
 800236c:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(TIM15_CH1_PH_GPIO_Port, TIM15_CH1_PH_Pin, phase);
 800236e:	4b6f      	ldr	r3, [pc, #444]	@ (800252c <control_update+0x46c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800237a:	486d      	ldr	r0, [pc, #436]	@ (8002530 <control_update+0x470>)
 800237c:	f001 ff0c 	bl	8004198 <HAL_GPIO_WritePin>

	// set the sign of the move (phase)
	if(cmd_ref[T15C2] < 0){
 8002380:	4b6c      	ldr	r3, [pc, #432]	@ (8002534 <control_update+0x474>)
 8002382:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002386:	2b00      	cmp	r3, #0
 8002388:	da03      	bge.n	8002392 <control_update+0x2d2>
		phase = GPIO_PIN_RESET; // reverse direction
 800238a:	4b68      	ldr	r3, [pc, #416]	@ (800252c <control_update+0x46c>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	e002      	b.n	8002398 <control_update+0x2d8>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 8002392:	4b66      	ldr	r3, [pc, #408]	@ (800252c <control_update+0x46c>)
 8002394:	2201      	movs	r2, #1
 8002396:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(TIM15_CH2_PH_GPIO_Port, TIM15_CH2_PH_Pin, phase);
 8002398:	4b64      	ldr	r3, [pc, #400]	@ (800252c <control_update+0x46c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	2101      	movs	r1, #1
 80023a2:	4865      	ldr	r0, [pc, #404]	@ (8002538 <control_update+0x478>)
 80023a4:	f001 fef8 	bl	8004198 <HAL_GPIO_WritePin>
   //End Timer 15


   //Timer 16
		// set the sign of the move (phase)
	if(cmd_ref[T16C1] < 0){
 80023a8:	4b62      	ldr	r3, [pc, #392]	@ (8002534 <control_update+0x474>)
 80023aa:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	da03      	bge.n	80023ba <control_update+0x2fa>
		phase = GPIO_PIN_RESET; // reverse direction
 80023b2:	4b5e      	ldr	r3, [pc, #376]	@ (800252c <control_update+0x46c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	e002      	b.n	80023c0 <control_update+0x300>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 80023ba:	4b5c      	ldr	r3, [pc, #368]	@ (800252c <control_update+0x46c>)
 80023bc:	2201      	movs	r2, #1
 80023be:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(TIM16_CH1_PH_GPIO_Port, TIM16_CH1_PH_Pin, phase);
 80023c0:	4b5a      	ldr	r3, [pc, #360]	@ (800252c <control_update+0x46c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	2102      	movs	r1, #2
 80023ca:	485b      	ldr	r0, [pc, #364]	@ (8002538 <control_update+0x478>)
 80023cc:	f001 fee4 	bl	8004198 <HAL_GPIO_WritePin>


    //HRTIM CODE HERE **************
    //High Resolution Timer CHA
	// set the sign of the move (phase)
	if(cmd_ref[HRA1] < 0){
 80023d0:	4b58      	ldr	r3, [pc, #352]	@ (8002534 <control_update+0x474>)
 80023d2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	da03      	bge.n	80023e2 <control_update+0x322>
		phase = GPIO_PIN_RESET; // reverse direction
 80023da:	4b54      	ldr	r3, [pc, #336]	@ (800252c <control_update+0x46c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	e002      	b.n	80023e8 <control_update+0x328>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 80023e2:	4b52      	ldr	r3, [pc, #328]	@ (800252c <control_update+0x46c>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(HRTIM_CHA1_PH_GPIO_Port, HRTIM_CHA1_PH_Pin, phase);
 80023e8:	4b50      	ldr	r3, [pc, #320]	@ (800252c <control_update+0x46c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	2110      	movs	r1, #16
 80023f2:	4851      	ldr	r0, [pc, #324]	@ (8002538 <control_update+0x478>)
 80023f4:	f001 fed0 	bl	8004198 <HAL_GPIO_WritePin>

	// set the sign of the move (phase)
	if(cmd_ref[HRA2] < 0){
 80023f8:	4b4e      	ldr	r3, [pc, #312]	@ (8002534 <control_update+0x474>)
 80023fa:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 80023fe:	2b00      	cmp	r3, #0
 8002400:	da03      	bge.n	800240a <control_update+0x34a>
		phase = GPIO_PIN_RESET; // reverse direction
 8002402:	4b4a      	ldr	r3, [pc, #296]	@ (800252c <control_update+0x46c>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	e002      	b.n	8002410 <control_update+0x350>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 800240a:	4b48      	ldr	r3, [pc, #288]	@ (800252c <control_update+0x46c>)
 800240c:	2201      	movs	r2, #1
 800240e:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(HRTIM_CHA2_PH_GPIO_Port, HRTIM_CHA2_PH_Pin, phase);
 8002410:	4b46      	ldr	r3, [pc, #280]	@ (800252c <control_update+0x46c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	461a      	mov	r2, r3
 8002418:	2120      	movs	r1, #32
 800241a:	4847      	ldr	r0, [pc, #284]	@ (8002538 <control_update+0x478>)
 800241c:	f001 febc 	bl	8004198 <HAL_GPIO_WritePin>
    //End High HRTIM CHA

    //High Resolution Timer CHB
		// set the sign of the move (phase)
	if(cmd_ref[HRB1] < 0){
 8002420:	4b44      	ldr	r3, [pc, #272]	@ (8002534 <control_update+0x474>)
 8002422:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8002426:	2b00      	cmp	r3, #0
 8002428:	da03      	bge.n	8002432 <control_update+0x372>
		phase = GPIO_PIN_RESET; // reverse direction
 800242a:	4b40      	ldr	r3, [pc, #256]	@ (800252c <control_update+0x46c>)
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	e002      	b.n	8002438 <control_update+0x378>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 8002432:	4b3e      	ldr	r3, [pc, #248]	@ (800252c <control_update+0x46c>)
 8002434:	2201      	movs	r2, #1
 8002436:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(HRTIM_CHB1_PH_GPIO_Port, HRTIM_CHB1_PH_Pin, phase);
 8002438:	4b3c      	ldr	r3, [pc, #240]	@ (800252c <control_update+0x46c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	2140      	movs	r1, #64	@ 0x40
 8002442:	483d      	ldr	r0, [pc, #244]	@ (8002538 <control_update+0x478>)
 8002444:	f001 fea8 	bl	8004198 <HAL_GPIO_WritePin>

	// set the sign of the move (phase)
	if(cmd_ref[HRB2] < 0){
 8002448:	4b3a      	ldr	r3, [pc, #232]	@ (8002534 <control_update+0x474>)
 800244a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 800244e:	2b00      	cmp	r3, #0
 8002450:	da03      	bge.n	800245a <control_update+0x39a>
		phase = GPIO_PIN_RESET; // reverse direction
 8002452:	4b36      	ldr	r3, [pc, #216]	@ (800252c <control_update+0x46c>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	e002      	b.n	8002460 <control_update+0x3a0>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 800245a:	4b34      	ldr	r3, [pc, #208]	@ (800252c <control_update+0x46c>)
 800245c:	2201      	movs	r2, #1
 800245e:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(HRTIM_CHB2_PH_GPIO_Port, HRTIM_CHB2_PH_Pin, phase);
 8002460:	4b32      	ldr	r3, [pc, #200]	@ (800252c <control_update+0x46c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	2180      	movs	r1, #128	@ 0x80
 800246a:	4833      	ldr	r0, [pc, #204]	@ (8002538 <control_update+0x478>)
 800246c:	f001 fe94 	bl	8004198 <HAL_GPIO_WritePin>
    //End High HRTIM CHB

    //High Resolution Timer CHC
		// set the sign of the move (phase)
	if(cmd_ref[HRC1] < 0){
 8002470:	4b30      	ldr	r3, [pc, #192]	@ (8002534 <control_update+0x474>)
 8002472:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8002476:	2b00      	cmp	r3, #0
 8002478:	da03      	bge.n	8002482 <control_update+0x3c2>
		phase = GPIO_PIN_RESET; // reverse direction
 800247a:	4b2c      	ldr	r3, [pc, #176]	@ (800252c <control_update+0x46c>)
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e002      	b.n	8002488 <control_update+0x3c8>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 8002482:	4b2a      	ldr	r3, [pc, #168]	@ (800252c <control_update+0x46c>)
 8002484:	2201      	movs	r2, #1
 8002486:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(HRTIM_CHC1_PH_GPIO_Port, HRTIM_CHC1_PH_Pin, phase);
 8002488:	4b28      	ldr	r3, [pc, #160]	@ (800252c <control_update+0x46c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002494:	4828      	ldr	r0, [pc, #160]	@ (8002538 <control_update+0x478>)
 8002496:	f001 fe7f 	bl	8004198 <HAL_GPIO_WritePin>

	// set the sign of the move (phase)
	if(cmd_ref[HRC2] < 0){
 800249a:	4b26      	ldr	r3, [pc, #152]	@ (8002534 <control_update+0x474>)
 800249c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	da03      	bge.n	80024ac <control_update+0x3ec>
		phase = GPIO_PIN_RESET; // reverse direction
 80024a4:	4b21      	ldr	r3, [pc, #132]	@ (800252c <control_update+0x46c>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	e002      	b.n	80024b2 <control_update+0x3f2>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 80024ac:	4b1f      	ldr	r3, [pc, #124]	@ (800252c <control_update+0x46c>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(HRTIM_CHC2_PH_GPIO_Port, HRTIM_CHC2_PH_Pin, phase);
 80024b2:	4b1e      	ldr	r3, [pc, #120]	@ (800252c <control_update+0x46c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024be:	481e      	ldr	r0, [pc, #120]	@ (8002538 <control_update+0x478>)
 80024c0:	f001 fe6a 	bl	8004198 <HAL_GPIO_WritePin>
    //End High HRTIM CHC

    //High Resolution Timer CHD
		// set the sign of the move (phase)
	if(cmd_ref[HRD1] < 0){
 80024c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002534 <control_update+0x474>)
 80024c6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	da03      	bge.n	80024d6 <control_update+0x416>
		phase = GPIO_PIN_RESET; // reverse direction
 80024ce:	4b17      	ldr	r3, [pc, #92]	@ (800252c <control_update+0x46c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	e002      	b.n	80024dc <control_update+0x41c>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 80024d6:	4b15      	ldr	r3, [pc, #84]	@ (800252c <control_update+0x46c>)
 80024d8:	2201      	movs	r2, #1
 80024da:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(HRTIM_CHD1_PH_GPIO_Port, HRTIM_CHD1_PH_Pin, phase);
 80024dc:	4b13      	ldr	r3, [pc, #76]	@ (800252c <control_update+0x46c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80024e8:	4813      	ldr	r0, [pc, #76]	@ (8002538 <control_update+0x478>)
 80024ea:	f001 fe55 	bl	8004198 <HAL_GPIO_WritePin>

// set the sign of the move (phase)
	if(cmd_ref[HRD2] < 0){
 80024ee:	4b11      	ldr	r3, [pc, #68]	@ (8002534 <control_update+0x474>)
 80024f0:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	da03      	bge.n	8002500 <control_update+0x440>
		phase = GPIO_PIN_RESET; // reverse direction
 80024f8:	4b0c      	ldr	r3, [pc, #48]	@ (800252c <control_update+0x46c>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	e002      	b.n	8002506 <control_update+0x446>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 8002500:	4b0a      	ldr	r3, [pc, #40]	@ (800252c <control_update+0x46c>)
 8002502:	2201      	movs	r2, #1
 8002504:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(HRTIM_CHD2_PH_GPIO_Port, HRTIM_CHD2_PH_Pin, phase);
 8002506:	4b09      	ldr	r3, [pc, #36]	@ (800252c <control_update+0x46c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	b2db      	uxtb	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002512:	4809      	ldr	r0, [pc, #36]	@ (8002538 <control_update+0x478>)
 8002514:	f001 fe40 	bl	8004198 <HAL_GPIO_WritePin>
    //End High HRTIM CHD
     //END HRTIM CODE

    //Low Power Timer
	// set the sign of the move (phase)
	if(cmd_ref[LPTIM] < 0){
 8002518:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <control_update+0x474>)
 800251a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 800251e:	2b00      	cmp	r3, #0
 8002520:	da0c      	bge.n	800253c <control_update+0x47c>
		phase = GPIO_PIN_RESET; // reverse direction
 8002522:	4b02      	ldr	r3, [pc, #8]	@ (800252c <control_update+0x46c>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	e00b      	b.n	8002542 <control_update+0x482>
 800252a:	bf00      	nop
 800252c:	2400000c 	.word	0x2400000c
 8002530:	58021000 	.word	0x58021000
 8002534:	24003578 	.word	0x24003578
 8002538:	58020c00 	.word	0x58020c00
	} else {
		phase = GPIO_PIN_SET; //forward direction
 800253c:	4bcc      	ldr	r3, [pc, #816]	@ (8002870 <control_update+0x7b0>)
 800253e:	2201      	movs	r2, #1
 8002540:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(LPTIM1_OUT_PH_GPIO_Port, LPTIM1_OUT_PH_Pin, phase);
 8002542:	4bcb      	ldr	r3, [pc, #812]	@ (8002870 <control_update+0x7b0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	2104      	movs	r1, #4
 800254c:	48c9      	ldr	r0, [pc, #804]	@ (8002874 <control_update+0x7b4>)
 800254e:	f001 fe23 	bl	8004198 <HAL_GPIO_WritePin>

//	}

	//Timer 1
	// calculate the dutycycle
	absref = fabs(cmd_ref[T1C1]); // duty cycle must be positive
 8002552:	4bc9      	ldr	r3, [pc, #804]	@ (8002878 <control_update+0x7b8>)
 8002554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002558:	ee07 3a90 	vmov	s15, r3
 800255c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002560:	eeb0 7bc7 	vabs.f64	d7, d7
 8002564:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002568:	ed97 7b02 	vldr	d7, [r7, #8]
 800256c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002570:	ee17 3a90 	vmov	r3, s15
 8002574:	b29b      	uxth	r3, r3
 8002576:	ed9f 7bbc 	vldr	d7, [pc, #752]	@ 8002868 <control_update+0x7a8>
 800257a:	eeb0 0b47 	vmov.f64	d0, d7
 800257e:	4618      	mov	r0, r3
 8002580:	f000 fbb2 	bl	8002ce8 <calc_dutycycle>
 8002584:	4603      	mov	r3, r0
 8002586:	461a      	mov	r2, r3
 8002588:	4bbc      	ldr	r3, [pc, #752]	@ (800287c <control_update+0x7bc>)
 800258a:	801a      	strh	r2, [r3, #0]
	TIM1->CCR1 = dutycycle;   //Calls the duty cycle on the timers at the desired channel
 800258c:	4bbb      	ldr	r3, [pc, #748]	@ (800287c <control_update+0x7bc>)
 800258e:	881a      	ldrh	r2, [r3, #0]
 8002590:	4bbb      	ldr	r3, [pc, #748]	@ (8002880 <control_update+0x7c0>)
 8002592:	635a      	str	r2, [r3, #52]	@ 0x34

	absref = fabs(cmd_ref[T1C2]); // duty cycle must be positive
 8002594:	4bb8      	ldr	r3, [pc, #736]	@ (8002878 <control_update+0x7b8>)
 8002596:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800259a:	ee07 3a90 	vmov	s15, r3
 800259e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80025a2:	eeb0 7bc7 	vabs.f64	d7, d7
 80025a6:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80025aa:	ed97 7b02 	vldr	d7, [r7, #8]
 80025ae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80025b2:	ee17 3a90 	vmov	r3, s15
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	ed9f 7bab 	vldr	d7, [pc, #684]	@ 8002868 <control_update+0x7a8>
 80025bc:	eeb0 0b47 	vmov.f64	d0, d7
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 fb91 	bl	8002ce8 <calc_dutycycle>
 80025c6:	4603      	mov	r3, r0
 80025c8:	461a      	mov	r2, r3
 80025ca:	4bac      	ldr	r3, [pc, #688]	@ (800287c <control_update+0x7bc>)
 80025cc:	801a      	strh	r2, [r3, #0]
	TIM1->CCR2 = dutycycle;
 80025ce:	4bab      	ldr	r3, [pc, #684]	@ (800287c <control_update+0x7bc>)
 80025d0:	881a      	ldrh	r2, [r3, #0]
 80025d2:	4bab      	ldr	r3, [pc, #684]	@ (8002880 <control_update+0x7c0>)
 80025d4:	639a      	str	r2, [r3, #56]	@ 0x38

	absref = fabs(cmd_ref[T1C3]); // duty cycle must be positive
 80025d6:	4ba8      	ldr	r3, [pc, #672]	@ (8002878 <control_update+0x7b8>)
 80025d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80025dc:	ee07 3a90 	vmov	s15, r3
 80025e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80025e4:	eeb0 7bc7 	vabs.f64	d7, d7
 80025e8:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80025ec:	ed97 7b02 	vldr	d7, [r7, #8]
 80025f0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80025f4:	ee17 3a90 	vmov	r3, s15
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	ed9f 7b9b 	vldr	d7, [pc, #620]	@ 8002868 <control_update+0x7a8>
 80025fe:	eeb0 0b47 	vmov.f64	d0, d7
 8002602:	4618      	mov	r0, r3
 8002604:	f000 fb70 	bl	8002ce8 <calc_dutycycle>
 8002608:	4603      	mov	r3, r0
 800260a:	461a      	mov	r2, r3
 800260c:	4b9b      	ldr	r3, [pc, #620]	@ (800287c <control_update+0x7bc>)
 800260e:	801a      	strh	r2, [r3, #0]
	TIM1->CCR3 = dutycycle;
 8002610:	4b9a      	ldr	r3, [pc, #616]	@ (800287c <control_update+0x7bc>)
 8002612:	881a      	ldrh	r2, [r3, #0]
 8002614:	4b9a      	ldr	r3, [pc, #616]	@ (8002880 <control_update+0x7c0>)
 8002616:	63da      	str	r2, [r3, #60]	@ 0x3c

	absref = fabs(cmd_ref[T1C4]); // duty cycle must be positive
 8002618:	4b97      	ldr	r3, [pc, #604]	@ (8002878 <control_update+0x7b8>)
 800261a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800261e:	ee07 3a90 	vmov	s15, r3
 8002622:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002626:	eeb0 7bc7 	vabs.f64	d7, d7
 800262a:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 800262e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002632:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002636:	ee17 3a90 	vmov	r3, s15
 800263a:	b29b      	uxth	r3, r3
 800263c:	ed9f 7b8a 	vldr	d7, [pc, #552]	@ 8002868 <control_update+0x7a8>
 8002640:	eeb0 0b47 	vmov.f64	d0, d7
 8002644:	4618      	mov	r0, r3
 8002646:	f000 fb4f 	bl	8002ce8 <calc_dutycycle>
 800264a:	4603      	mov	r3, r0
 800264c:	461a      	mov	r2, r3
 800264e:	4b8b      	ldr	r3, [pc, #556]	@ (800287c <control_update+0x7bc>)
 8002650:	801a      	strh	r2, [r3, #0]
	TIM1->CCR4 = dutycycle;
 8002652:	4b8a      	ldr	r3, [pc, #552]	@ (800287c <control_update+0x7bc>)
 8002654:	881a      	ldrh	r2, [r3, #0]
 8002656:	4b8a      	ldr	r3, [pc, #552]	@ (8002880 <control_update+0x7c0>)
 8002658:	641a      	str	r2, [r3, #64]	@ 0x40
	//End Timer 1

	//Timer 2
	absref = fabs(cmd_ref[T2C1]); // duty cycle must be positive
 800265a:	4b87      	ldr	r3, [pc, #540]	@ (8002878 <control_update+0x7b8>)
 800265c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002660:	ee07 3a90 	vmov	s15, r3
 8002664:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002668:	eeb0 7bc7 	vabs.f64	d7, d7
 800266c:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002670:	ed97 7b02 	vldr	d7, [r7, #8]
 8002674:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002678:	ee17 3a90 	vmov	r3, s15
 800267c:	b29b      	uxth	r3, r3
 800267e:	ed9f 7b7a 	vldr	d7, [pc, #488]	@ 8002868 <control_update+0x7a8>
 8002682:	eeb0 0b47 	vmov.f64	d0, d7
 8002686:	4618      	mov	r0, r3
 8002688:	f000 fb2e 	bl	8002ce8 <calc_dutycycle>
 800268c:	4603      	mov	r3, r0
 800268e:	461a      	mov	r2, r3
 8002690:	4b7a      	ldr	r3, [pc, #488]	@ (800287c <control_update+0x7bc>)
 8002692:	801a      	strh	r2, [r3, #0]
	TIM2->CCR1 = dutycycle;
 8002694:	4b79      	ldr	r3, [pc, #484]	@ (800287c <control_update+0x7bc>)
 8002696:	881a      	ldrh	r2, [r3, #0]
 8002698:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800269c:	635a      	str	r2, [r3, #52]	@ 0x34
	//End Timer 2

	//Timer 4
	absref = fabs(cmd_ref[T4C1]); // duty cycle must be positive
 800269e:	4b76      	ldr	r3, [pc, #472]	@ (8002878 <control_update+0x7b8>)
 80026a0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80026a4:	ee07 3a90 	vmov	s15, r3
 80026a8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80026ac:	eeb0 7bc7 	vabs.f64	d7, d7
 80026b0:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80026b4:	ed97 7b02 	vldr	d7, [r7, #8]
 80026b8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80026bc:	ee17 3a90 	vmov	r3, s15
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	ed9f 7b69 	vldr	d7, [pc, #420]	@ 8002868 <control_update+0x7a8>
 80026c6:	eeb0 0b47 	vmov.f64	d0, d7
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 fb0c 	bl	8002ce8 <calc_dutycycle>
 80026d0:	4603      	mov	r3, r0
 80026d2:	461a      	mov	r2, r3
 80026d4:	4b69      	ldr	r3, [pc, #420]	@ (800287c <control_update+0x7bc>)
 80026d6:	801a      	strh	r2, [r3, #0]
	TIM4->CCR1 = dutycycle;
 80026d8:	4b68      	ldr	r3, [pc, #416]	@ (800287c <control_update+0x7bc>)
 80026da:	881a      	ldrh	r2, [r3, #0]
 80026dc:	4b69      	ldr	r3, [pc, #420]	@ (8002884 <control_update+0x7c4>)
 80026de:	635a      	str	r2, [r3, #52]	@ 0x34

	absref = fabs(cmd_ref[T4C2]); // duty cycle must be positive
 80026e0:	4b65      	ldr	r3, [pc, #404]	@ (8002878 <control_update+0x7b8>)
 80026e2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80026e6:	ee07 3a90 	vmov	s15, r3
 80026ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80026ee:	eeb0 7bc7 	vabs.f64	d7, d7
 80026f2:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80026f6:	ed97 7b02 	vldr	d7, [r7, #8]
 80026fa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80026fe:	ee17 3a90 	vmov	r3, s15
 8002702:	b29b      	uxth	r3, r3
 8002704:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8002868 <control_update+0x7a8>
 8002708:	eeb0 0b47 	vmov.f64	d0, d7
 800270c:	4618      	mov	r0, r3
 800270e:	f000 faeb 	bl	8002ce8 <calc_dutycycle>
 8002712:	4603      	mov	r3, r0
 8002714:	461a      	mov	r2, r3
 8002716:	4b59      	ldr	r3, [pc, #356]	@ (800287c <control_update+0x7bc>)
 8002718:	801a      	strh	r2, [r3, #0]
	TIM4->CCR2 = dutycycle;
 800271a:	4b58      	ldr	r3, [pc, #352]	@ (800287c <control_update+0x7bc>)
 800271c:	881a      	ldrh	r2, [r3, #0]
 800271e:	4b59      	ldr	r3, [pc, #356]	@ (8002884 <control_update+0x7c4>)
 8002720:	639a      	str	r2, [r3, #56]	@ 0x38

	absref = fabs(cmd_ref[T4C3]); // duty cycle must be positive
 8002722:	4b55      	ldr	r3, [pc, #340]	@ (8002878 <control_update+0x7b8>)
 8002724:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002728:	ee07 3a90 	vmov	s15, r3
 800272c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002730:	eeb0 7bc7 	vabs.f64	d7, d7
 8002734:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002738:	ed97 7b02 	vldr	d7, [r7, #8]
 800273c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002740:	ee17 3a90 	vmov	r3, s15
 8002744:	b29b      	uxth	r3, r3
 8002746:	ed9f 7b48 	vldr	d7, [pc, #288]	@ 8002868 <control_update+0x7a8>
 800274a:	eeb0 0b47 	vmov.f64	d0, d7
 800274e:	4618      	mov	r0, r3
 8002750:	f000 faca 	bl	8002ce8 <calc_dutycycle>
 8002754:	4603      	mov	r3, r0
 8002756:	461a      	mov	r2, r3
 8002758:	4b48      	ldr	r3, [pc, #288]	@ (800287c <control_update+0x7bc>)
 800275a:	801a      	strh	r2, [r3, #0]
	TIM4->CCR3 = dutycycle;
 800275c:	4b47      	ldr	r3, [pc, #284]	@ (800287c <control_update+0x7bc>)
 800275e:	881a      	ldrh	r2, [r3, #0]
 8002760:	4b48      	ldr	r3, [pc, #288]	@ (8002884 <control_update+0x7c4>)
 8002762:	63da      	str	r2, [r3, #60]	@ 0x3c

	absref = fabs(cmd_ref[T4C4]); // duty cycle must be positive
 8002764:	4b44      	ldr	r3, [pc, #272]	@ (8002878 <control_update+0x7b8>)
 8002766:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800276a:	ee07 3a90 	vmov	s15, r3
 800276e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002772:	eeb0 7bc7 	vabs.f64	d7, d7
 8002776:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 800277a:	ed97 7b02 	vldr	d7, [r7, #8]
 800277e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002782:	ee17 3a90 	vmov	r3, s15
 8002786:	b29b      	uxth	r3, r3
 8002788:	ed9f 7b37 	vldr	d7, [pc, #220]	@ 8002868 <control_update+0x7a8>
 800278c:	eeb0 0b47 	vmov.f64	d0, d7
 8002790:	4618      	mov	r0, r3
 8002792:	f000 faa9 	bl	8002ce8 <calc_dutycycle>
 8002796:	4603      	mov	r3, r0
 8002798:	461a      	mov	r2, r3
 800279a:	4b38      	ldr	r3, [pc, #224]	@ (800287c <control_update+0x7bc>)
 800279c:	801a      	strh	r2, [r3, #0]
	TIM4->CCR4 = dutycycle;
 800279e:	4b37      	ldr	r3, [pc, #220]	@ (800287c <control_update+0x7bc>)
 80027a0:	881a      	ldrh	r2, [r3, #0]
 80027a2:	4b38      	ldr	r3, [pc, #224]	@ (8002884 <control_update+0x7c4>)
 80027a4:	641a      	str	r2, [r3, #64]	@ 0x40
	//End Timer 4

	//Timer 5
	absref = fabs(cmd_ref[T5C2]); // duty cycle must be positive
 80027a6:	4b34      	ldr	r3, [pc, #208]	@ (8002878 <control_update+0x7b8>)
 80027a8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80027ac:	ee07 3a90 	vmov	s15, r3
 80027b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80027b4:	eeb0 7bc7 	vabs.f64	d7, d7
 80027b8:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80027bc:	ed97 7b02 	vldr	d7, [r7, #8]
 80027c0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80027c4:	ee17 3a90 	vmov	r3, s15
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	ed9f 7b27 	vldr	d7, [pc, #156]	@ 8002868 <control_update+0x7a8>
 80027ce:	eeb0 0b47 	vmov.f64	d0, d7
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 fa88 	bl	8002ce8 <calc_dutycycle>
 80027d8:	4603      	mov	r3, r0
 80027da:	461a      	mov	r2, r3
 80027dc:	4b27      	ldr	r3, [pc, #156]	@ (800287c <control_update+0x7bc>)
 80027de:	801a      	strh	r2, [r3, #0]
	TIM5->CCR2 = dutycycle;
 80027e0:	4b26      	ldr	r3, [pc, #152]	@ (800287c <control_update+0x7bc>)
 80027e2:	881a      	ldrh	r2, [r3, #0]
 80027e4:	4b28      	ldr	r3, [pc, #160]	@ (8002888 <control_update+0x7c8>)
 80027e6:	639a      	str	r2, [r3, #56]	@ 0x38

	absref = fabs(cmd_ref[T5C3]); // duty cycle must be positive
 80027e8:	4b23      	ldr	r3, [pc, #140]	@ (8002878 <control_update+0x7b8>)
 80027ea:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80027f6:	eeb0 7bc7 	vabs.f64	d7, d7
 80027fa:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80027fe:	ed97 7b02 	vldr	d7, [r7, #8]
 8002802:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002806:	ee17 3a90 	vmov	r3, s15
 800280a:	b29b      	uxth	r3, r3
 800280c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8002868 <control_update+0x7a8>
 8002810:	eeb0 0b47 	vmov.f64	d0, d7
 8002814:	4618      	mov	r0, r3
 8002816:	f000 fa67 	bl	8002ce8 <calc_dutycycle>
 800281a:	4603      	mov	r3, r0
 800281c:	461a      	mov	r2, r3
 800281e:	4b17      	ldr	r3, [pc, #92]	@ (800287c <control_update+0x7bc>)
 8002820:	801a      	strh	r2, [r3, #0]
	TIM5->CCR3 = dutycycle;
 8002822:	4b16      	ldr	r3, [pc, #88]	@ (800287c <control_update+0x7bc>)
 8002824:	881a      	ldrh	r2, [r3, #0]
 8002826:	4b18      	ldr	r3, [pc, #96]	@ (8002888 <control_update+0x7c8>)
 8002828:	63da      	str	r2, [r3, #60]	@ 0x3c
	//End Timer 5

	//Timer 8
	absref = fabs(cmd_ref[T8C4]); // duty cycle must be positive
 800282a:	4b13      	ldr	r3, [pc, #76]	@ (8002878 <control_update+0x7b8>)
 800282c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002830:	ee07 3a90 	vmov	s15, r3
 8002834:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002838:	eeb0 7bc7 	vabs.f64	d7, d7
 800283c:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002840:	ed97 7b02 	vldr	d7, [r7, #8]
 8002844:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002848:	ee17 3a90 	vmov	r3, s15
 800284c:	b29b      	uxth	r3, r3
 800284e:	ed9f 7b06 	vldr	d7, [pc, #24]	@ 8002868 <control_update+0x7a8>
 8002852:	eeb0 0b47 	vmov.f64	d0, d7
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fa46 	bl	8002ce8 <calc_dutycycle>
 800285c:	4603      	mov	r3, r0
 800285e:	461a      	mov	r2, r3
 8002860:	4b06      	ldr	r3, [pc, #24]	@ (800287c <control_update+0x7bc>)
 8002862:	801a      	strh	r2, [r3, #0]
 8002864:	e012      	b.n	800288c <control_update+0x7cc>
 8002866:	bf00      	nop
 8002868:	cccccccd 	.word	0xcccccccd
 800286c:	3ffccccc 	.word	0x3ffccccc
 8002870:	2400000c 	.word	0x2400000c
 8002874:	58020c00 	.word	0x58020c00
 8002878:	24003578 	.word	0x24003578
 800287c:	240035c0 	.word	0x240035c0
 8002880:	40010000 	.word	0x40010000
 8002884:	40000800 	.word	0x40000800
 8002888:	40000c00 	.word	0x40000c00
	TIM8->CCR4 = dutycycle;
 800288c:	4bce      	ldr	r3, [pc, #824]	@ (8002bc8 <control_update+0xb08>)
 800288e:	881a      	ldrh	r2, [r3, #0]
 8002890:	4bce      	ldr	r3, [pc, #824]	@ (8002bcc <control_update+0xb0c>)
 8002892:	641a      	str	r2, [r3, #64]	@ 0x40
	//End Timer 8

	//Timer 12
	absref = fabs(cmd_ref[T12C2]); // duty cycle must be positive
 8002894:	4bce      	ldr	r3, [pc, #824]	@ (8002bd0 <control_update+0xb10>)
 8002896:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800289a:	ee07 3a90 	vmov	s15, r3
 800289e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80028a2:	eeb0 7bc7 	vabs.f64	d7, d7
 80028a6:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80028aa:	ed97 7b02 	vldr	d7, [r7, #8]
 80028ae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80028b2:	ee17 3a90 	vmov	r3, s15
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	ed9f 7bc1 	vldr	d7, [pc, #772]	@ 8002bc0 <control_update+0xb00>
 80028bc:	eeb0 0b47 	vmov.f64	d0, d7
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 fa11 	bl	8002ce8 <calc_dutycycle>
 80028c6:	4603      	mov	r3, r0
 80028c8:	461a      	mov	r2, r3
 80028ca:	4bbf      	ldr	r3, [pc, #764]	@ (8002bc8 <control_update+0xb08>)
 80028cc:	801a      	strh	r2, [r3, #0]
	TIM12->CCR2 = dutycycle;
 80028ce:	4bbe      	ldr	r3, [pc, #760]	@ (8002bc8 <control_update+0xb08>)
 80028d0:	881a      	ldrh	r2, [r3, #0]
 80028d2:	4bc0      	ldr	r3, [pc, #768]	@ (8002bd4 <control_update+0xb14>)
 80028d4:	639a      	str	r2, [r3, #56]	@ 0x38
	//End Timer 12

	//Timer 13
	absref = fabs(cmd_ref[T13C1]); // duty cycle must be positive
 80028d6:	4bbe      	ldr	r3, [pc, #760]	@ (8002bd0 <control_update+0xb10>)
 80028d8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80028dc:	ee07 3a90 	vmov	s15, r3
 80028e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80028e4:	eeb0 7bc7 	vabs.f64	d7, d7
 80028e8:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80028ec:	ed97 7b02 	vldr	d7, [r7, #8]
 80028f0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80028f4:	ee17 3a90 	vmov	r3, s15
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8002bc0 <control_update+0xb00>
 80028fe:	eeb0 0b47 	vmov.f64	d0, d7
 8002902:	4618      	mov	r0, r3
 8002904:	f000 f9f0 	bl	8002ce8 <calc_dutycycle>
 8002908:	4603      	mov	r3, r0
 800290a:	461a      	mov	r2, r3
 800290c:	4bae      	ldr	r3, [pc, #696]	@ (8002bc8 <control_update+0xb08>)
 800290e:	801a      	strh	r2, [r3, #0]
	TIM13->CCR1 = dutycycle;
 8002910:	4bad      	ldr	r3, [pc, #692]	@ (8002bc8 <control_update+0xb08>)
 8002912:	881a      	ldrh	r2, [r3, #0]
 8002914:	4bb0      	ldr	r3, [pc, #704]	@ (8002bd8 <control_update+0xb18>)
 8002916:	635a      	str	r2, [r3, #52]	@ 0x34
	//End Timer 13

	//Timer 14
	absref = fabs(cmd_ref[T14C1]); // duty cycle must be positive
 8002918:	4bad      	ldr	r3, [pc, #692]	@ (8002bd0 <control_update+0xb10>)
 800291a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800291e:	ee07 3a90 	vmov	s15, r3
 8002922:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002926:	eeb0 7bc7 	vabs.f64	d7, d7
 800292a:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 800292e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002932:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002936:	ee17 3a90 	vmov	r3, s15
 800293a:	b29b      	uxth	r3, r3
 800293c:	ed9f 7ba0 	vldr	d7, [pc, #640]	@ 8002bc0 <control_update+0xb00>
 8002940:	eeb0 0b47 	vmov.f64	d0, d7
 8002944:	4618      	mov	r0, r3
 8002946:	f000 f9cf 	bl	8002ce8 <calc_dutycycle>
 800294a:	4603      	mov	r3, r0
 800294c:	461a      	mov	r2, r3
 800294e:	4b9e      	ldr	r3, [pc, #632]	@ (8002bc8 <control_update+0xb08>)
 8002950:	801a      	strh	r2, [r3, #0]
	TIM14->CCR1 = dutycycle;
 8002952:	4b9d      	ldr	r3, [pc, #628]	@ (8002bc8 <control_update+0xb08>)
 8002954:	881a      	ldrh	r2, [r3, #0]
 8002956:	4ba1      	ldr	r3, [pc, #644]	@ (8002bdc <control_update+0xb1c>)
 8002958:	635a      	str	r2, [r3, #52]	@ 0x34
	//End Timer 14

	//Timer 15
	absref = fabs(cmd_ref[T15C1]); // duty cycle must be positive
 800295a:	4b9d      	ldr	r3, [pc, #628]	@ (8002bd0 <control_update+0xb10>)
 800295c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002960:	ee07 3a90 	vmov	s15, r3
 8002964:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002968:	eeb0 7bc7 	vabs.f64	d7, d7
 800296c:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002970:	ed97 7b02 	vldr	d7, [r7, #8]
 8002974:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002978:	ee17 3a90 	vmov	r3, s15
 800297c:	b29b      	uxth	r3, r3
 800297e:	ed9f 7b90 	vldr	d7, [pc, #576]	@ 8002bc0 <control_update+0xb00>
 8002982:	eeb0 0b47 	vmov.f64	d0, d7
 8002986:	4618      	mov	r0, r3
 8002988:	f000 f9ae 	bl	8002ce8 <calc_dutycycle>
 800298c:	4603      	mov	r3, r0
 800298e:	461a      	mov	r2, r3
 8002990:	4b8d      	ldr	r3, [pc, #564]	@ (8002bc8 <control_update+0xb08>)
 8002992:	801a      	strh	r2, [r3, #0]
	TIM15->CCR1 = dutycycle;
 8002994:	4b8c      	ldr	r3, [pc, #560]	@ (8002bc8 <control_update+0xb08>)
 8002996:	881a      	ldrh	r2, [r3, #0]
 8002998:	4b91      	ldr	r3, [pc, #580]	@ (8002be0 <control_update+0xb20>)
 800299a:	635a      	str	r2, [r3, #52]	@ 0x34

	absref = fabs(cmd_ref[T15C2]); // duty cycle must be positive
 800299c:	4b8c      	ldr	r3, [pc, #560]	@ (8002bd0 <control_update+0xb10>)
 800299e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80029a2:	ee07 3a90 	vmov	s15, r3
 80029a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80029aa:	eeb0 7bc7 	vabs.f64	d7, d7
 80029ae:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80029b2:	ed97 7b02 	vldr	d7, [r7, #8]
 80029b6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80029ba:	ee17 3a90 	vmov	r3, s15
 80029be:	b29b      	uxth	r3, r3
 80029c0:	ed9f 7b7f 	vldr	d7, [pc, #508]	@ 8002bc0 <control_update+0xb00>
 80029c4:	eeb0 0b47 	vmov.f64	d0, d7
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 f98d 	bl	8002ce8 <calc_dutycycle>
 80029ce:	4603      	mov	r3, r0
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b7d      	ldr	r3, [pc, #500]	@ (8002bc8 <control_update+0xb08>)
 80029d4:	801a      	strh	r2, [r3, #0]
	TIM15->CCR2 = dutycycle;
 80029d6:	4b7c      	ldr	r3, [pc, #496]	@ (8002bc8 <control_update+0xb08>)
 80029d8:	881a      	ldrh	r2, [r3, #0]
 80029da:	4b81      	ldr	r3, [pc, #516]	@ (8002be0 <control_update+0xb20>)
 80029dc:	639a      	str	r2, [r3, #56]	@ 0x38
	//End Timer 15

	//Timer 16
	absref = fabs(cmd_ref[T16C1]); // duty cycle must be positive
 80029de:	4b7c      	ldr	r3, [pc, #496]	@ (8002bd0 <control_update+0xb10>)
 80029e0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80029e4:	ee07 3a90 	vmov	s15, r3
 80029e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80029ec:	eeb0 7bc7 	vabs.f64	d7, d7
 80029f0:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80029f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80029f8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80029fc:	ee17 3a90 	vmov	r3, s15
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	ed9f 7b6f 	vldr	d7, [pc, #444]	@ 8002bc0 <control_update+0xb00>
 8002a06:	eeb0 0b47 	vmov.f64	d0, d7
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 f96c 	bl	8002ce8 <calc_dutycycle>
 8002a10:	4603      	mov	r3, r0
 8002a12:	461a      	mov	r2, r3
 8002a14:	4b6c      	ldr	r3, [pc, #432]	@ (8002bc8 <control_update+0xb08>)
 8002a16:	801a      	strh	r2, [r3, #0]
	TIM16->CCR1 = dutycycle;
 8002a18:	4b6b      	ldr	r3, [pc, #428]	@ (8002bc8 <control_update+0xb08>)
 8002a1a:	881a      	ldrh	r2, [r3, #0]
 8002a1c:	4b71      	ldr	r3, [pc, #452]	@ (8002be4 <control_update+0xb24>)
 8002a1e:	635a      	str	r2, [r3, #52]	@ 0x34
	//End Timer 16

	//HRTIM CODE GOES HERE ********
	//HRTIM CHA
	absref = fabs(cmd_ref[HRA1]); // duty cycle must be positive
 8002a20:	4b6b      	ldr	r3, [pc, #428]	@ (8002bd0 <control_update+0xb10>)
 8002a22:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a2e:	eeb0 7bc7 	vabs.f64	d7, d7
 8002a32:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002a36:	ed97 7b02 	vldr	d7, [r7, #8]
 8002a3a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002a3e:	ee17 3a90 	vmov	r3, s15
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	ed9f 7b5e 	vldr	d7, [pc, #376]	@ 8002bc0 <control_update+0xb00>
 8002a48:	eeb0 0b47 	vmov.f64	d0, d7
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 f94b 	bl	8002ce8 <calc_dutycycle>
 8002a52:	4603      	mov	r3, r0
 8002a54:	461a      	mov	r2, r3
 8002a56:	4b5c      	ldr	r3, [pc, #368]	@ (8002bc8 <control_update+0xb08>)
 8002a58:	801a      	strh	r2, [r3, #0]
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP1xR = dutycycle;
 8002a5a:	4b5b      	ldr	r3, [pc, #364]	@ (8002bc8 <control_update+0xb08>)
 8002a5c:	881a      	ldrh	r2, [r3, #0]
 8002a5e:	4b62      	ldr	r3, [pc, #392]	@ (8002be8 <control_update+0xb28>)
 8002a60:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

	absref = fabs(cmd_ref[HRA2]); // duty cycle must be positive
 8002a64:	4b5a      	ldr	r3, [pc, #360]	@ (8002bd0 <control_update+0xb10>)
 8002a66:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8002a6a:	ee07 3a90 	vmov	s15, r3
 8002a6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a72:	eeb0 7bc7 	vabs.f64	d7, d7
 8002a76:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002a7a:	ed97 7b02 	vldr	d7, [r7, #8]
 8002a7e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002a82:	ee17 3a90 	vmov	r3, s15
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	ed9f 7b4d 	vldr	d7, [pc, #308]	@ 8002bc0 <control_update+0xb00>
 8002a8c:	eeb0 0b47 	vmov.f64	d0, d7
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 f929 	bl	8002ce8 <calc_dutycycle>
 8002a96:	4603      	mov	r3, r0
 8002a98:	461a      	mov	r2, r3
 8002a9a:	4b4b      	ldr	r3, [pc, #300]	@ (8002bc8 <control_update+0xb08>)
 8002a9c:	801a      	strh	r2, [r3, #0]
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP2xR = dutycycle;
 8002a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8002bc8 <control_update+0xb08>)
 8002aa0:	881a      	ldrh	r2, [r3, #0]
 8002aa2:	4b51      	ldr	r3, [pc, #324]	@ (8002be8 <control_update+0xb28>)
 8002aa4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	//End HRTIM CHA

	//HRTIM CHB
	absref = fabs(cmd_ref[HRB1]); // duty cycle must be positive
 8002aa8:	4b49      	ldr	r3, [pc, #292]	@ (8002bd0 <control_update+0xb10>)
 8002aaa:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8002aae:	ee07 3a90 	vmov	s15, r3
 8002ab2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ab6:	eeb0 7bc7 	vabs.f64	d7, d7
 8002aba:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002abe:	ed97 7b02 	vldr	d7, [r7, #8]
 8002ac2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002ac6:	ee17 3a90 	vmov	r3, s15
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	ed9f 7b3c 	vldr	d7, [pc, #240]	@ 8002bc0 <control_update+0xb00>
 8002ad0:	eeb0 0b47 	vmov.f64	d0, d7
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 f907 	bl	8002ce8 <calc_dutycycle>
 8002ada:	4603      	mov	r3, r0
 8002adc:	461a      	mov	r2, r3
 8002ade:	4b3a      	ldr	r3, [pc, #232]	@ (8002bc8 <control_update+0xb08>)
 8002ae0:	801a      	strh	r2, [r3, #0]
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP1xR = dutycycle;
 8002ae2:	4b39      	ldr	r3, [pc, #228]	@ (8002bc8 <control_update+0xb08>)
 8002ae4:	881a      	ldrh	r2, [r3, #0]
 8002ae6:	4b40      	ldr	r3, [pc, #256]	@ (8002be8 <control_update+0xb28>)
 8002ae8:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

	absref = fabs(cmd_ref[HRB2]); // duty cycle must be positive
 8002aec:	4b38      	ldr	r3, [pc, #224]	@ (8002bd0 <control_update+0xb10>)
 8002aee:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8002af2:	ee07 3a90 	vmov	s15, r3
 8002af6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002afa:	eeb0 7bc7 	vabs.f64	d7, d7
 8002afe:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002b02:	ed97 7b02 	vldr	d7, [r7, #8]
 8002b06:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002b0a:	ee17 3a90 	vmov	r3, s15
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8002bc0 <control_update+0xb00>
 8002b14:	eeb0 0b47 	vmov.f64	d0, d7
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 f8e5 	bl	8002ce8 <calc_dutycycle>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	461a      	mov	r2, r3
 8002b22:	4b29      	ldr	r3, [pc, #164]	@ (8002bc8 <control_update+0xb08>)
 8002b24:	801a      	strh	r2, [r3, #0]
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP2xR = dutycycle;
 8002b26:	4b28      	ldr	r3, [pc, #160]	@ (8002bc8 <control_update+0xb08>)
 8002b28:	881a      	ldrh	r2, [r3, #0]
 8002b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8002be8 <control_update+0xb28>)
 8002b2c:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
	//End HRTIM CHB

	//HRTIM CHC
	absref = fabs(cmd_ref[HRC1]); // duty cycle must be positive
 8002b30:	4b27      	ldr	r3, [pc, #156]	@ (8002bd0 <control_update+0xb10>)
 8002b32:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8002b36:	ee07 3a90 	vmov	s15, r3
 8002b3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b3e:	eeb0 7bc7 	vabs.f64	d7, d7
 8002b42:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002b46:	ed97 7b02 	vldr	d7, [r7, #8]
 8002b4a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002b4e:	ee17 3a90 	vmov	r3, s15
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 8002bc0 <control_update+0xb00>
 8002b58:	eeb0 0b47 	vmov.f64	d0, d7
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 f8c3 	bl	8002ce8 <calc_dutycycle>
 8002b62:	4603      	mov	r3, r0
 8002b64:	461a      	mov	r2, r3
 8002b66:	4b18      	ldr	r3, [pc, #96]	@ (8002bc8 <control_update+0xb08>)
 8002b68:	801a      	strh	r2, [r3, #0]
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP1xR = dutycycle;
 8002b6a:	4b17      	ldr	r3, [pc, #92]	@ (8002bc8 <control_update+0xb08>)
 8002b6c:	881a      	ldrh	r2, [r3, #0]
 8002b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002be8 <control_update+0xb28>)
 8002b70:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c

	absref = fabs(cmd_ref[HRC2]); // duty cycle must be positive
 8002b74:	4b16      	ldr	r3, [pc, #88]	@ (8002bd0 <control_update+0xb10>)
 8002b76:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8002b7a:	ee07 3a90 	vmov	s15, r3
 8002b7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b82:	eeb0 7bc7 	vabs.f64	d7, d7
 8002b86:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002b8a:	ed97 7b02 	vldr	d7, [r7, #8]
 8002b8e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002b92:	ee17 3a90 	vmov	r3, s15
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8002bc0 <control_update+0xb00>
 8002b9c:	eeb0 0b47 	vmov.f64	d0, d7
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 f8a1 	bl	8002ce8 <calc_dutycycle>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b07      	ldr	r3, [pc, #28]	@ (8002bc8 <control_update+0xb08>)
 8002bac:	801a      	strh	r2, [r3, #0]
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP2xR = dutycycle;
 8002bae:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <control_update+0xb08>)
 8002bb0:	881a      	ldrh	r2, [r3, #0]
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002be8 <control_update+0xb28>)
 8002bb4:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
 8002bb8:	e018      	b.n	8002bec <control_update+0xb2c>
 8002bba:	bf00      	nop
 8002bbc:	f3af 8000 	nop.w
 8002bc0:	cccccccd 	.word	0xcccccccd
 8002bc4:	3ffccccc 	.word	0x3ffccccc
 8002bc8:	240035c0 	.word	0x240035c0
 8002bcc:	40010400 	.word	0x40010400
 8002bd0:	24003578 	.word	0x24003578
 8002bd4:	40001800 	.word	0x40001800
 8002bd8:	40001c00 	.word	0x40001c00
 8002bdc:	40002000 	.word	0x40002000
 8002be0:	40014000 	.word	0x40014000
 8002be4:	40014400 	.word	0x40014400
 8002be8:	40017400 	.word	0x40017400
	//End HRTIM CHC

	//HRTIM CHD
	absref = fabs(cmd_ref[HRD1]); // duty cycle must be positive
 8002bec:	4b38      	ldr	r3, [pc, #224]	@ (8002cd0 <control_update+0xc10>)
 8002bee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8002bf2:	ee07 3a90 	vmov	s15, r3
 8002bf6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002bfa:	eeb0 7bc7 	vabs.f64	d7, d7
 8002bfe:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002c02:	ed97 7b02 	vldr	d7, [r7, #8]
 8002c06:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c0a:	ee17 3a90 	vmov	r3, s15
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8002cc8 <control_update+0xc08>
 8002c14:	eeb0 0b47 	vmov.f64	d0, d7
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 f865 	bl	8002ce8 <calc_dutycycle>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	461a      	mov	r2, r3
 8002c22:	4b2c      	ldr	r3, [pc, #176]	@ (8002cd4 <control_update+0xc14>)
 8002c24:	801a      	strh	r2, [r3, #0]
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = dutycycle;
 8002c26:	4b2b      	ldr	r3, [pc, #172]	@ (8002cd4 <control_update+0xc14>)
 8002c28:	881a      	ldrh	r2, [r3, #0]
 8002c2a:	4b2b      	ldr	r3, [pc, #172]	@ (8002cd8 <control_update+0xc18>)
 8002c2c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

	absref = fabs(cmd_ref[HRD2]); // duty cycle must be positive
 8002c30:	4b27      	ldr	r3, [pc, #156]	@ (8002cd0 <control_update+0xc10>)
 8002c32:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8002c36:	ee07 3a90 	vmov	s15, r3
 8002c3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c3e:	eeb0 7bc7 	vabs.f64	d7, d7
 8002c42:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002c46:	ed97 7b02 	vldr	d7, [r7, #8]
 8002c4a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c4e:	ee17 3a90 	vmov	r3, s15
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8002cc8 <control_update+0xc08>
 8002c58:	eeb0 0b47 	vmov.f64	d0, d7
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 f843 	bl	8002ce8 <calc_dutycycle>
 8002c62:	4603      	mov	r3, r0
 8002c64:	461a      	mov	r2, r3
 8002c66:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd4 <control_update+0xc14>)
 8002c68:	801a      	strh	r2, [r3, #0]
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP2xR = dutycycle;
 8002c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd4 <control_update+0xc14>)
 8002c6c:	881a      	ldrh	r2, [r3, #0]
 8002c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd8 <control_update+0xc18>)
 8002c70:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
	//End HRTIM CHD
	//END HRTIM CODE HERE

	//LPTIM1
	absref = fabs(cmd_ref[LPTIM]); // duty cycle must be positive
 8002c74:	4b16      	ldr	r3, [pc, #88]	@ (8002cd0 <control_update+0xc10>)
 8002c76:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8002c7a:	ee07 3a90 	vmov	s15, r3
 8002c7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c82:	eeb0 7bc7 	vabs.f64	d7, d7
 8002c86:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002c8a:	ed97 7b02 	vldr	d7, [r7, #8]
 8002c8e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c92:	ee17 3a90 	vmov	r3, s15
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8002cc8 <control_update+0xc08>
 8002c9c:	eeb0 0b47 	vmov.f64	d0, d7
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 f821 	bl	8002ce8 <calc_dutycycle>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd4 <control_update+0xc14>)
 8002cac:	801a      	strh	r2, [r3, #0]
	LPTIM1->CMP = dutycycle/2;
 8002cae:	4b09      	ldr	r3, [pc, #36]	@ (8002cd4 <control_update+0xc14>)
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	085b      	lsrs	r3, r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	4b09      	ldr	r3, [pc, #36]	@ (8002cdc <control_update+0xc1c>)
 8002cb8:	615a      	str	r2, [r3, #20]
	//End LPTIM1

	// reset timer flag
	ctrl_tmr_expired = FALSE;
 8002cba:	4b09      	ldr	r3, [pc, #36]	@ (8002ce0 <control_update+0xc20>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
}
 8002cc0:	bf00      	nop
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	cccccccd 	.word	0xcccccccd
 8002ccc:	3ffccccc 	.word	0x3ffccccc
 8002cd0:	24003578 	.word	0x24003578
 8002cd4:	240035c0 	.word	0x240035c0
 8002cd8:	40017400 	.word	0x40017400
 8002cdc:	40002400 	.word	0x40002400
 8002ce0:	24000610 	.word	0x24000610
 8002ce4:	00000000 	.word	0x00000000

08002ce8 <calc_dutycycle>:
//	@ param cmd command voltage
//	@ param vss supply voltage
//	@ return dutycycle

static uint16_t calc_dutycycle(uint16_t cmd, double vss)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b089      	sub	sp, #36	@ 0x24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	ed87 0b00 	vstr	d0, [r7]
 8002cf4:	81fb      	strh	r3, [r7, #14]
	// duty cycle variable
	uint16_t dc={0};
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	83fb      	strh	r3, [r7, #30]
	double scale = 1.8/15000; // rough calibration of v/nm
 8002cfa:	a317      	add	r3, pc, #92	@ (adr r3, 8002d58 <calc_dutycycle+0x70>)
 8002cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d00:	e9c7 2304 	strd	r2, r3, [r7, #16]

	dc = (uint16_t)((cmd*scale)/vss * (double)PERIOD);
 8002d04:	89fb      	ldrh	r3, [r7, #14]
 8002d06:	ee07 3a90 	vmov	s15, r3
 8002d0a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002d0e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002d12:	ee26 5b07 	vmul.f64	d5, d6, d7
 8002d16:	ed97 6b00 	vldr	d6, [r7]
 8002d1a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002d1e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8002d50 <calc_dutycycle+0x68>
 8002d22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d26:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002d2a:	ee17 3a90 	vmov	r3, s15
 8002d2e:	83fb      	strh	r3, [r7, #30]
	// keep the dutycycle within the period of the PWM signal
	if(dc>PERIOD) dc = PERIOD;
 8002d30:	8bfb      	ldrh	r3, [r7, #30]
 8002d32:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d902      	bls.n	8002d40 <calc_dutycycle+0x58>
 8002d3a:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 8002d3e:	83fb      	strh	r3, [r7, #30]

	return dc;
 8002d40:	8bfb      	ldrh	r3, [r7, #30]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3724      	adds	r7, #36	@ 0x24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	00000000 	.word	0x00000000
 8002d54:	40d76fc0 	.word	0x40d76fc0
 8002d58:	4d551d69 	.word	0x4d551d69
 8002d5c:	3f1f7510 	.word	0x3f1f7510

08002d60 <gen_sine>:

static void gen_sine(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
	int i = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
	double scale = TWO_PI/SIN_PERIOD;
 8002d6a:	a316      	add	r3, pc, #88	@ (adr r3, 8002dc4 <gen_sine+0x64>)
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	e9c7 2300 	strd	r2, r3, [r7]
	for(i=0; i<SIN_PERIOD; i++ )
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	e017      	b.n	8002daa <gen_sine+0x4a>
	{
		sine_vals[i] = sin(i*scale);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	ee07 3a90 	vmov	s15, r3
 8002d80:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002d84:	ed97 7b00 	vldr	d7, [r7]
 8002d88:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d8c:	eeb0 0b47 	vmov.f64	d0, d7
 8002d90:	f00a fa92 	bl	800d2b8 <sin>
 8002d94:	eeb0 7b40 	vmov.f64	d7, d0
 8002d98:	4a09      	ldr	r2, [pc, #36]	@ (8002dc0 <gen_sine+0x60>)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	4413      	add	r3, r2
 8002da0:	ed83 7b00 	vstr	d7, [r3]
	for(i=0; i<SIN_PERIOD; i++ )
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	3301      	adds	r3, #1
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002db0:	dbe3      	blt.n	8002d7a <gen_sine+0x1a>
	}
}
 8002db2:	bf00      	nop
 8002db4:	bf00      	nop
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	f3af 8000 	nop.w
 8002dc0:	24000620 	.word	0x24000620
 8002dc4:	b68b71c3 	.word	0xb68b71c3
 8002dc8:	3f79bc65 	.word	0x3f79bc65

08002dcc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0

  /* Disables the MPU */
  LL_MPU_Disable();
 8002dd0:	f7fd fc72 	bl	80006b8 <LL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  LL_MPU_ConfigRegion(LL_MPU_REGION_NUMBER0, 0x87, 0x0, LL_MPU_REGION_SIZE_4GB|LL_MPU_TEX_LEVEL0|LL_MPU_REGION_NO_ACCESS|LL_MPU_INSTRUCTION_ACCESS_DISABLE|LL_MPU_ACCESS_SHAREABLE|LL_MPU_ACCESS_NOT_CACHEABLE|LL_MPU_ACCESS_NOT_BUFFERABLE);
 8002dd4:	4b05      	ldr	r3, [pc, #20]	@ (8002dec <MPU_Config+0x20>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2187      	movs	r1, #135	@ 0x87
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f7fd fc7c 	bl	80006d8 <LL_MPU_ConfigRegion>
  /* Enables the MPU */
  LL_MPU_Enable(LL_MPU_CTRL_PRIVILEGED_DEFAULT);
 8002de0:	2004      	movs	r0, #4
 8002de2:	f7fd fc51 	bl	8000688 <LL_MPU_Enable>

}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	1004003e 	.word	0x1004003e

08002df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002df4:	b672      	cpsid	i
}
 8002df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002df8:	bf00      	nop
 8002dfa:	e7fd      	b.n	8002df8 <Error_Handler+0x8>

08002dfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e02:	4b0a      	ldr	r3, [pc, #40]	@ (8002e2c <HAL_MspInit+0x30>)
 8002e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e08:	4a08      	ldr	r2, [pc, #32]	@ (8002e2c <HAL_MspInit+0x30>)
 8002e0a:	f043 0302 	orr.w	r3, r3, #2
 8002e0e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002e12:	4b06      	ldr	r3, [pc, #24]	@ (8002e2c <HAL_MspInit+0x30>)
 8002e14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	607b      	str	r3, [r7, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	58024400 	.word	0x58024400

08002e30 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b0b4      	sub	sp, #208	@ 0xd0
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e38:	f107 0310 	add.w	r3, r7, #16
 8002e3c:	22c0      	movs	r2, #192	@ 0xc0
 8002e3e:	2100      	movs	r1, #0
 8002e40:	4618      	mov	r0, r3
 8002e42:	f008 fb43 	bl	800b4cc <memset>
  if(hhrtim->Instance==HRTIM1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a14      	ldr	r2, [pc, #80]	@ (8002e9c <HAL_HRTIM_MspInit+0x6c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d121      	bne.n	8002e94 <HAL_HRTIM_MspInit+0x64>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8002e50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e62:	f107 0310 	add.w	r3, r7, #16
 8002e66:	4618      	mov	r0, r3
 8002e68:	f003 feb2 	bl	8006bd0 <HAL_RCCEx_PeriphCLKConfig>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8002e72:	f7ff ffbd 	bl	8002df0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8002e76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea0 <HAL_HRTIM_MspInit+0x70>)
 8002e78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e7c:	4a08      	ldr	r2, [pc, #32]	@ (8002ea0 <HAL_HRTIM_MspInit+0x70>)
 8002e7e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002e82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e86:	4b06      	ldr	r3, [pc, #24]	@ (8002ea0 <HAL_HRTIM_MspInit+0x70>)
 8002e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8002e94:	bf00      	nop
 8002e96:	37d0      	adds	r7, #208	@ 0xd0
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40017400 	.word	0x40017400
 8002ea0:	58024400 	.word	0x58024400

08002ea4 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08a      	sub	sp, #40	@ 0x28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eac:	f107 0314 	add.w	r3, r7, #20
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a23      	ldr	r2, [pc, #140]	@ (8002f50 <HAL_HRTIM_MspPostInit+0xac>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d13f      	bne.n	8002f46 <HAL_HRTIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec6:	4b23      	ldr	r3, [pc, #140]	@ (8002f54 <HAL_HRTIM_MspPostInit+0xb0>)
 8002ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ecc:	4a21      	ldr	r2, [pc, #132]	@ (8002f54 <HAL_HRTIM_MspPostInit+0xb0>)
 8002ece:	f043 0304 	orr.w	r3, r3, #4
 8002ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8002f54 <HAL_HRTIM_MspPostInit+0xb0>)
 8002ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f54 <HAL_HRTIM_MspPostInit+0xb0>)
 8002ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eea:	4a1a      	ldr	r2, [pc, #104]	@ (8002f54 <HAL_HRTIM_MspPostInit+0xb0>)
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ef4:	4b17      	ldr	r3, [pc, #92]	@ (8002f54 <HAL_HRTIM_MspPostInit+0xb0>)
 8002ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> HRTIM_CHC1
    PA10     ------> HRTIM_CHC2
    PA11     ------> HRTIM_CHD1
    PA12     ------> HRTIM_CHD2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002f02:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f10:	2303      	movs	r3, #3
 8002f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8002f14:	2301      	movs	r3, #1
 8002f16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f18:	f107 0314 	add.w	r3, r7, #20
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	480e      	ldr	r0, [pc, #56]	@ (8002f58 <HAL_HRTIM_MspPostInit+0xb4>)
 8002f20:	f000 ff8a 	bl	8003e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002f24:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002f28:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f32:	2303      	movs	r3, #3
 8002f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8002f36:	2302      	movs	r3, #2
 8002f38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3a:	f107 0314 	add.w	r3, r7, #20
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4806      	ldr	r0, [pc, #24]	@ (8002f5c <HAL_HRTIM_MspPostInit+0xb8>)
 8002f42:	f000 ff79 	bl	8003e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8002f46:	bf00      	nop
 8002f48:	3728      	adds	r7, #40	@ 0x28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40017400 	.word	0x40017400
 8002f54:	58024400 	.word	0x58024400
 8002f58:	58020800 	.word	0x58020800
 8002f5c:	58020000 	.word	0x58020000

08002f60 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b0ba      	sub	sp, #232	@ 0xe8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f68:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	605a      	str	r2, [r3, #4]
 8002f72:	609a      	str	r2, [r3, #8]
 8002f74:	60da      	str	r2, [r3, #12]
 8002f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f78:	f107 0310 	add.w	r3, r7, #16
 8002f7c:	22c0      	movs	r2, #192	@ 0xc0
 8002f7e:	2100      	movs	r1, #0
 8002f80:	4618      	mov	r0, r3
 8002f82:	f008 faa3 	bl	800b4cc <memset>
  if(hlptim->Instance==LPTIM1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a2b      	ldr	r2, [pc, #172]	@ (8003038 <HAL_LPTIM_MspInit+0xd8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d14e      	bne.n	800302e <HAL_LPTIM_MspInit+0xce>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002f90:	f04f 0220 	mov.w	r2, #32
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fa2:	f107 0310 	add.w	r3, r7, #16
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f003 fe12 	bl	8006bd0 <HAL_RCCEx_PeriphCLKConfig>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_LPTIM_MspInit+0x56>
    {
      Error_Handler();
 8002fb2:	f7ff ff1d 	bl	8002df0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002fb6:	4b21      	ldr	r3, [pc, #132]	@ (800303c <HAL_LPTIM_MspInit+0xdc>)
 8002fb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fbc:	4a1f      	ldr	r2, [pc, #124]	@ (800303c <HAL_LPTIM_MspInit+0xdc>)
 8002fbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fc2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800303c <HAL_LPTIM_MspInit+0xdc>)
 8002fc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fd4:	4b19      	ldr	r3, [pc, #100]	@ (800303c <HAL_LPTIM_MspInit+0xdc>)
 8002fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fda:	4a18      	ldr	r2, [pc, #96]	@ (800303c <HAL_LPTIM_MspInit+0xdc>)
 8002fdc:	f043 0308 	orr.w	r3, r3, #8
 8002fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002fe4:	4b15      	ldr	r3, [pc, #84]	@ (800303c <HAL_LPTIM_MspInit+0xdc>)
 8002fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration
    PD13     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002ff2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003000:	2300      	movs	r3, #0
 8003002:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003006:	2300      	movs	r3, #0
 8003008:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 800300c:	2301      	movs	r3, #1
 800300e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003012:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003016:	4619      	mov	r1, r3
 8003018:	4809      	ldr	r0, [pc, #36]	@ (8003040 <HAL_LPTIM_MspInit+0xe0>)
 800301a:	f000 ff0d 	bl	8003e38 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800301e:	2200      	movs	r2, #0
 8003020:	2100      	movs	r1, #0
 8003022:	205d      	movs	r0, #93	@ 0x5d
 8003024:	f000 fed3 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8003028:	205d      	movs	r0, #93	@ 0x5d
 800302a:	f000 feea 	bl	8003e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800302e:	bf00      	nop
 8003030:	37e8      	adds	r7, #232	@ 0xe8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40002400 	.word	0x40002400
 800303c:	58024400 	.word	0x58024400
 8003040:	58020c00 	.word	0x58020c00

08003044 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08c      	sub	sp, #48	@ 0x30
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a99      	ldr	r2, [pc, #612]	@ (80032b8 <HAL_TIM_Base_MspInit+0x274>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d117      	bne.n	8003086 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003056:	4b99      	ldr	r3, [pc, #612]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 8003058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800305c:	4a97      	ldr	r2, [pc, #604]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003066:	4b95      	ldr	r3, [pc, #596]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 8003068:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003074:	2200      	movs	r2, #0
 8003076:	2100      	movs	r1, #0
 8003078:	2019      	movs	r0, #25
 800307a:	f000 fea8 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800307e:	2019      	movs	r0, #25
 8003080:	f000 febf 	bl	8003e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003084:	e113      	b.n	80032ae <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM2)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800308e:	d117      	bne.n	80030c0 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003090:	4b8a      	ldr	r3, [pc, #552]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 8003092:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003096:	4a89      	ldr	r2, [pc, #548]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80030a0:	4b86      	ldr	r3, [pc, #536]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 80030a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80030ae:	2200      	movs	r2, #0
 80030b0:	2100      	movs	r1, #0
 80030b2:	201c      	movs	r0, #28
 80030b4:	f000 fe8b 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80030b8:	201c      	movs	r0, #28
 80030ba:	f000 fea2 	bl	8003e02 <HAL_NVIC_EnableIRQ>
}
 80030be:	e0f6      	b.n	80032ae <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM4)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a7e      	ldr	r2, [pc, #504]	@ (80032c0 <HAL_TIM_Base_MspInit+0x27c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d117      	bne.n	80030fa <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030ca:	4b7c      	ldr	r3, [pc, #496]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 80030cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030d0:	4a7a      	ldr	r2, [pc, #488]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 80030d2:	f043 0304 	orr.w	r3, r3, #4
 80030d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80030da:	4b78      	ldr	r3, [pc, #480]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 80030dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80030e8:	2200      	movs	r2, #0
 80030ea:	2100      	movs	r1, #0
 80030ec:	201e      	movs	r0, #30
 80030ee:	f000 fe6e 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80030f2:	201e      	movs	r0, #30
 80030f4:	f000 fe85 	bl	8003e02 <HAL_NVIC_EnableIRQ>
}
 80030f8:	e0d9      	b.n	80032ae <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM5)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a71      	ldr	r2, [pc, #452]	@ (80032c4 <HAL_TIM_Base_MspInit+0x280>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d117      	bne.n	8003134 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003104:	4b6d      	ldr	r3, [pc, #436]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 8003106:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800310a:	4a6c      	ldr	r2, [pc, #432]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 800310c:	f043 0308 	orr.w	r3, r3, #8
 8003110:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003114:	4b69      	ldr	r3, [pc, #420]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 8003116:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	623b      	str	r3, [r7, #32]
 8003120:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003122:	2200      	movs	r2, #0
 8003124:	2100      	movs	r1, #0
 8003126:	2032      	movs	r0, #50	@ 0x32
 8003128:	f000 fe51 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800312c:	2032      	movs	r0, #50	@ 0x32
 800312e:	f000 fe68 	bl	8003e02 <HAL_NVIC_EnableIRQ>
}
 8003132:	e0bc      	b.n	80032ae <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM8)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a63      	ldr	r2, [pc, #396]	@ (80032c8 <HAL_TIM_Base_MspInit+0x284>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d127      	bne.n	800318e <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800313e:	4b5f      	ldr	r3, [pc, #380]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 8003140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003144:	4a5d      	ldr	r2, [pc, #372]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 8003146:	f043 0302 	orr.w	r3, r3, #2
 800314a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800314e:	4b5b      	ldr	r3, [pc, #364]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 8003150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	61fb      	str	r3, [r7, #28]
 800315a:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800315c:	2200      	movs	r2, #0
 800315e:	2100      	movs	r1, #0
 8003160:	202b      	movs	r0, #43	@ 0x2b
 8003162:	f000 fe34 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003166:	202b      	movs	r0, #43	@ 0x2b
 8003168:	f000 fe4b 	bl	8003e02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800316c:	2200      	movs	r2, #0
 800316e:	2100      	movs	r1, #0
 8003170:	202c      	movs	r0, #44	@ 0x2c
 8003172:	f000 fe2c 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003176:	202c      	movs	r0, #44	@ 0x2c
 8003178:	f000 fe43 	bl	8003e02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800317c:	2200      	movs	r2, #0
 800317e:	2100      	movs	r1, #0
 8003180:	202d      	movs	r0, #45	@ 0x2d
 8003182:	f000 fe24 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003186:	202d      	movs	r0, #45	@ 0x2d
 8003188:	f000 fe3b 	bl	8003e02 <HAL_NVIC_EnableIRQ>
}
 800318c:	e08f      	b.n	80032ae <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM12)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a4e      	ldr	r2, [pc, #312]	@ (80032cc <HAL_TIM_Base_MspInit+0x288>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d117      	bne.n	80031c8 <HAL_TIM_Base_MspInit+0x184>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003198:	4b48      	ldr	r3, [pc, #288]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 800319a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800319e:	4a47      	ldr	r2, [pc, #284]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 80031a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80031a8:	4b44      	ldr	r3, [pc, #272]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 80031aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b2:	61bb      	str	r3, [r7, #24]
 80031b4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80031b6:	2200      	movs	r2, #0
 80031b8:	2100      	movs	r1, #0
 80031ba:	202b      	movs	r0, #43	@ 0x2b
 80031bc:	f000 fe07 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80031c0:	202b      	movs	r0, #43	@ 0x2b
 80031c2:	f000 fe1e 	bl	8003e02 <HAL_NVIC_EnableIRQ>
}
 80031c6:	e072      	b.n	80032ae <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM13)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a40      	ldr	r2, [pc, #256]	@ (80032d0 <HAL_TIM_Base_MspInit+0x28c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d117      	bne.n	8003202 <HAL_TIM_Base_MspInit+0x1be>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80031d2:	4b3a      	ldr	r3, [pc, #232]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 80031d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031d8:	4a38      	ldr	r2, [pc, #224]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 80031da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80031e2:	4b36      	ldr	r3, [pc, #216]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 80031e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80031f0:	2200      	movs	r2, #0
 80031f2:	2100      	movs	r1, #0
 80031f4:	202c      	movs	r0, #44	@ 0x2c
 80031f6:	f000 fdea 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80031fa:	202c      	movs	r0, #44	@ 0x2c
 80031fc:	f000 fe01 	bl	8003e02 <HAL_NVIC_EnableIRQ>
}
 8003200:	e055      	b.n	80032ae <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM14)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a33      	ldr	r2, [pc, #204]	@ (80032d4 <HAL_TIM_Base_MspInit+0x290>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d117      	bne.n	800323c <HAL_TIM_Base_MspInit+0x1f8>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800320c:	4b2b      	ldr	r3, [pc, #172]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 800320e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003212:	4a2a      	ldr	r2, [pc, #168]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 8003214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003218:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800321c:	4b27      	ldr	r3, [pc, #156]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 800321e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800322a:	2200      	movs	r2, #0
 800322c:	2100      	movs	r1, #0
 800322e:	202d      	movs	r0, #45	@ 0x2d
 8003230:	f000 fdcd 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003234:	202d      	movs	r0, #45	@ 0x2d
 8003236:	f000 fde4 	bl	8003e02 <HAL_NVIC_EnableIRQ>
}
 800323a:	e038      	b.n	80032ae <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM15)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a25      	ldr	r2, [pc, #148]	@ (80032d8 <HAL_TIM_Base_MspInit+0x294>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d117      	bne.n	8003276 <HAL_TIM_Base_MspInit+0x232>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003246:	4b1d      	ldr	r3, [pc, #116]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 8003248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800324c:	4a1b      	ldr	r2, [pc, #108]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 800324e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003252:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003256:	4b19      	ldr	r3, [pc, #100]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 8003258:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800325c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8003264:	2200      	movs	r2, #0
 8003266:	2100      	movs	r1, #0
 8003268:	2074      	movs	r0, #116	@ 0x74
 800326a:	f000 fdb0 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800326e:	2074      	movs	r0, #116	@ 0x74
 8003270:	f000 fdc7 	bl	8003e02 <HAL_NVIC_EnableIRQ>
}
 8003274:	e01b      	b.n	80032ae <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM16)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a18      	ldr	r2, [pc, #96]	@ (80032dc <HAL_TIM_Base_MspInit+0x298>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d116      	bne.n	80032ae <HAL_TIM_Base_MspInit+0x26a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003280:	4b0e      	ldr	r3, [pc, #56]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 8003282:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003286:	4a0d      	ldr	r2, [pc, #52]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 8003288:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800328c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003290:	4b0a      	ldr	r3, [pc, #40]	@ (80032bc <HAL_TIM_Base_MspInit+0x278>)
 8003292:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800329e:	2200      	movs	r2, #0
 80032a0:	2100      	movs	r1, #0
 80032a2:	2075      	movs	r0, #117	@ 0x75
 80032a4:	f000 fd93 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80032a8:	2075      	movs	r0, #117	@ 0x75
 80032aa:	f000 fdaa 	bl	8003e02 <HAL_NVIC_EnableIRQ>
}
 80032ae:	bf00      	nop
 80032b0:	3730      	adds	r7, #48	@ 0x30
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40010000 	.word	0x40010000
 80032bc:	58024400 	.word	0x58024400
 80032c0:	40000800 	.word	0x40000800
 80032c4:	40000c00 	.word	0x40000c00
 80032c8:	40010400 	.word	0x40010400
 80032cc:	40001800 	.word	0x40001800
 80032d0:	40001c00 	.word	0x40001c00
 80032d4:	40002000 	.word	0x40002000
 80032d8:	40014000 	.word	0x40014000
 80032dc:	40014400 	.word	0x40014400

080032e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b092      	sub	sp, #72	@ 0x48
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	605a      	str	r2, [r3, #4]
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	60da      	str	r2, [r3, #12]
 80032f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4aa4      	ldr	r2, [pc, #656]	@ (8003590 <HAL_TIM_MspPostInit+0x2b0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d120      	bne.n	8003344 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003302:	4ba4      	ldr	r3, [pc, #656]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 8003304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003308:	4aa2      	ldr	r2, [pc, #648]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 800330a:	f043 0310 	orr.w	r3, r3, #16
 800330e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003312:	4ba0      	ldr	r3, [pc, #640]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 8003314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	633b      	str	r3, [r7, #48]	@ 0x30
 800331e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8003320:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8003324:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003326:	2302      	movs	r3, #2
 8003328:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332a:	2300      	movs	r3, #0
 800332c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332e:	2300      	movs	r3, #0
 8003330:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003332:	2301      	movs	r3, #1
 8003334:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003336:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800333a:	4619      	mov	r1, r3
 800333c:	4896      	ldr	r0, [pc, #600]	@ (8003598 <HAL_TIM_MspPostInit+0x2b8>)
 800333e:	f000 fd7b 	bl	8003e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8003342:	e189      	b.n	8003658 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM2)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800334c:	d11f      	bne.n	800338e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800334e:	4b91      	ldr	r3, [pc, #580]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 8003350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003354:	4a8f      	ldr	r2, [pc, #572]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800335e:	4b8d      	ldr	r3, [pc, #564]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 8003360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800336a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800336c:	2301      	movs	r3, #1
 800336e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003370:	2302      	movs	r3, #2
 8003372:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003374:	2300      	movs	r3, #0
 8003376:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003378:	2300      	movs	r3, #0
 800337a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800337c:	2301      	movs	r3, #1
 800337e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003380:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003384:	4619      	mov	r1, r3
 8003386:	4885      	ldr	r0, [pc, #532]	@ (800359c <HAL_TIM_MspPostInit+0x2bc>)
 8003388:	f000 fd56 	bl	8003e38 <HAL_GPIO_Init>
}
 800338c:	e164      	b.n	8003658 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM4)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a83      	ldr	r2, [pc, #524]	@ (80035a0 <HAL_TIM_MspPostInit+0x2c0>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d13f      	bne.n	8003418 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003398:	4b7e      	ldr	r3, [pc, #504]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 800339a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800339e:	4a7d      	ldr	r2, [pc, #500]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 80033a0:	f043 0308 	orr.w	r3, r3, #8
 80033a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033a8:	4b7a      	ldr	r3, [pc, #488]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 80033aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033b6:	4b77      	ldr	r3, [pc, #476]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 80033b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033bc:	4a75      	ldr	r2, [pc, #468]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 80033be:	f043 0302 	orr.w	r3, r3, #2
 80033c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033c6:	4b73      	ldr	r3, [pc, #460]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 80033c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80033d4:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80033d8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033da:	2302      	movs	r3, #2
 80033dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e2:	2300      	movs	r3, #0
 80033e4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033e6:	2302      	movs	r3, #2
 80033e8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80033ee:	4619      	mov	r1, r3
 80033f0:	486c      	ldr	r0, [pc, #432]	@ (80035a4 <HAL_TIM_MspPostInit+0x2c4>)
 80033f2:	f000 fd21 	bl	8003e38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80033f6:	2380      	movs	r3, #128	@ 0x80
 80033f8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fa:	2302      	movs	r3, #2
 80033fc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003402:	2300      	movs	r3, #0
 8003404:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003406:	2302      	movs	r3, #2
 8003408:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800340a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800340e:	4619      	mov	r1, r3
 8003410:	4865      	ldr	r0, [pc, #404]	@ (80035a8 <HAL_TIM_MspPostInit+0x2c8>)
 8003412:	f000 fd11 	bl	8003e38 <HAL_GPIO_Init>
}
 8003416:	e11f      	b.n	8003658 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM5)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a63      	ldr	r2, [pc, #396]	@ (80035ac <HAL_TIM_MspPostInit+0x2cc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d11f      	bne.n	8003462 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003422:	4b5c      	ldr	r3, [pc, #368]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 8003424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003428:	4a5a      	ldr	r2, [pc, #360]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003432:	4b58      	ldr	r3, [pc, #352]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 8003434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	623b      	str	r3, [r7, #32]
 800343e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003440:	2306      	movs	r3, #6
 8003442:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003444:	2302      	movs	r3, #2
 8003446:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003448:	2300      	movs	r3, #0
 800344a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344c:	2300      	movs	r3, #0
 800344e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003450:	2302      	movs	r3, #2
 8003452:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003454:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003458:	4619      	mov	r1, r3
 800345a:	4850      	ldr	r0, [pc, #320]	@ (800359c <HAL_TIM_MspPostInit+0x2bc>)
 800345c:	f000 fcec 	bl	8003e38 <HAL_GPIO_Init>
}
 8003460:	e0fa      	b.n	8003658 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM8)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a52      	ldr	r2, [pc, #328]	@ (80035b0 <HAL_TIM_MspPostInit+0x2d0>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d120      	bne.n	80034ae <HAL_TIM_MspPostInit+0x1ce>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800346c:	4b49      	ldr	r3, [pc, #292]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 800346e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003472:	4a48      	ldr	r2, [pc, #288]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 8003474:	f043 0304 	orr.w	r3, r3, #4
 8003478:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800347c:	4b45      	ldr	r3, [pc, #276]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 800347e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	61fb      	str	r3, [r7, #28]
 8003488:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800348a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800348e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003490:	2302      	movs	r3, #2
 8003492:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003494:	2300      	movs	r3, #0
 8003496:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003498:	2300      	movs	r3, #0
 800349a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800349c:	2303      	movs	r3, #3
 800349e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034a0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80034a4:	4619      	mov	r1, r3
 80034a6:	4843      	ldr	r0, [pc, #268]	@ (80035b4 <HAL_TIM_MspPostInit+0x2d4>)
 80034a8:	f000 fcc6 	bl	8003e38 <HAL_GPIO_Init>
}
 80034ac:	e0d4      	b.n	8003658 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM12)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a41      	ldr	r2, [pc, #260]	@ (80035b8 <HAL_TIM_MspPostInit+0x2d8>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d120      	bne.n	80034fa <HAL_TIM_MspPostInit+0x21a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b8:	4b36      	ldr	r3, [pc, #216]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 80034ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034be:	4a35      	ldr	r2, [pc, #212]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 80034c0:	f043 0302 	orr.w	r3, r3, #2
 80034c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034c8:	4b32      	ldr	r3, [pc, #200]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 80034ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	61bb      	str	r3, [r7, #24]
 80034d4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80034d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034da:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034dc:	2302      	movs	r3, #2
 80034de:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e4:	2300      	movs	r3, #0
 80034e6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80034e8:	2302      	movs	r3, #2
 80034ea:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80034f0:	4619      	mov	r1, r3
 80034f2:	482d      	ldr	r0, [pc, #180]	@ (80035a8 <HAL_TIM_MspPostInit+0x2c8>)
 80034f4:	f000 fca0 	bl	8003e38 <HAL_GPIO_Init>
}
 80034f8:	e0ae      	b.n	8003658 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM13)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a2f      	ldr	r2, [pc, #188]	@ (80035bc <HAL_TIM_MspPostInit+0x2dc>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d11f      	bne.n	8003544 <HAL_TIM_MspPostInit+0x264>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003504:	4b23      	ldr	r3, [pc, #140]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 8003506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800350a:	4a22      	ldr	r2, [pc, #136]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003514:	4b1f      	ldr	r3, [pc, #124]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 8003516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003522:	2340      	movs	r3, #64	@ 0x40
 8003524:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003526:	2302      	movs	r3, #2
 8003528:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352a:	2300      	movs	r3, #0
 800352c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352e:	2300      	movs	r3, #0
 8003530:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003532:	2309      	movs	r3, #9
 8003534:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003536:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800353a:	4619      	mov	r1, r3
 800353c:	4817      	ldr	r0, [pc, #92]	@ (800359c <HAL_TIM_MspPostInit+0x2bc>)
 800353e:	f000 fc7b 	bl	8003e38 <HAL_GPIO_Init>
}
 8003542:	e089      	b.n	8003658 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM14)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a1d      	ldr	r2, [pc, #116]	@ (80035c0 <HAL_TIM_MspPostInit+0x2e0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d13a      	bne.n	80035c4 <HAL_TIM_MspPostInit+0x2e4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800354e:	4b11      	ldr	r3, [pc, #68]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 8003550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003554:	4a0f      	ldr	r2, [pc, #60]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800355e:	4b0d      	ldr	r3, [pc, #52]	@ (8003594 <HAL_TIM_MspPostInit+0x2b4>)
 8003560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800356c:	2380      	movs	r3, #128	@ 0x80
 800356e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003570:	2302      	movs	r3, #2
 8003572:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	2300      	movs	r3, #0
 8003576:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003578:	2300      	movs	r3, #0
 800357a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800357c:	2309      	movs	r3, #9
 800357e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003580:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003584:	4619      	mov	r1, r3
 8003586:	4805      	ldr	r0, [pc, #20]	@ (800359c <HAL_TIM_MspPostInit+0x2bc>)
 8003588:	f000 fc56 	bl	8003e38 <HAL_GPIO_Init>
}
 800358c:	e064      	b.n	8003658 <HAL_TIM_MspPostInit+0x378>
 800358e:	bf00      	nop
 8003590:	40010000 	.word	0x40010000
 8003594:	58024400 	.word	0x58024400
 8003598:	58021000 	.word	0x58021000
 800359c:	58020000 	.word	0x58020000
 80035a0:	40000800 	.word	0x40000800
 80035a4:	58020c00 	.word	0x58020c00
 80035a8:	58020400 	.word	0x58020400
 80035ac:	40000c00 	.word	0x40000c00
 80035b0:	40010400 	.word	0x40010400
 80035b4:	58020800 	.word	0x58020800
 80035b8:	40001800 	.word	0x40001800
 80035bc:	40001c00 	.word	0x40001c00
 80035c0:	40002000 	.word	0x40002000
  else if(htim->Instance==TIM15)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a25      	ldr	r2, [pc, #148]	@ (8003660 <HAL_TIM_MspPostInit+0x380>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d11f      	bne.n	800360e <HAL_TIM_MspPostInit+0x32e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035ce:	4b25      	ldr	r3, [pc, #148]	@ (8003664 <HAL_TIM_MspPostInit+0x384>)
 80035d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035d4:	4a23      	ldr	r2, [pc, #140]	@ (8003664 <HAL_TIM_MspPostInit+0x384>)
 80035d6:	f043 0310 	orr.w	r3, r3, #16
 80035da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035de:	4b21      	ldr	r3, [pc, #132]	@ (8003664 <HAL_TIM_MspPostInit+0x384>)
 80035e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035e4:	f003 0310 	and.w	r3, r3, #16
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80035ec:	2360      	movs	r3, #96	@ 0x60
 80035ee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f0:	2302      	movs	r3, #2
 80035f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f8:	2300      	movs	r3, #0
 80035fa:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80035fc:	2304      	movs	r3, #4
 80035fe:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003600:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003604:	4619      	mov	r1, r3
 8003606:	4818      	ldr	r0, [pc, #96]	@ (8003668 <HAL_TIM_MspPostInit+0x388>)
 8003608:	f000 fc16 	bl	8003e38 <HAL_GPIO_Init>
}
 800360c:	e024      	b.n	8003658 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM16)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a16      	ldr	r2, [pc, #88]	@ (800366c <HAL_TIM_MspPostInit+0x38c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d11f      	bne.n	8003658 <HAL_TIM_MspPostInit+0x378>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003618:	4b12      	ldr	r3, [pc, #72]	@ (8003664 <HAL_TIM_MspPostInit+0x384>)
 800361a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800361e:	4a11      	ldr	r2, [pc, #68]	@ (8003664 <HAL_TIM_MspPostInit+0x384>)
 8003620:	f043 0302 	orr.w	r3, r3, #2
 8003624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003628:	4b0e      	ldr	r3, [pc, #56]	@ (8003664 <HAL_TIM_MspPostInit+0x384>)
 800362a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	60bb      	str	r3, [r7, #8]
 8003634:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003636:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800363a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363c:	2302      	movs	r3, #2
 800363e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003640:	2300      	movs	r3, #0
 8003642:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003644:	2300      	movs	r3, #0
 8003646:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8003648:	2301      	movs	r3, #1
 800364a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800364c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003650:	4619      	mov	r1, r3
 8003652:	4807      	ldr	r0, [pc, #28]	@ (8003670 <HAL_TIM_MspPostInit+0x390>)
 8003654:	f000 fbf0 	bl	8003e38 <HAL_GPIO_Init>
}
 8003658:	bf00      	nop
 800365a:	3748      	adds	r7, #72	@ 0x48
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40014000 	.word	0x40014000
 8003664:	58024400 	.word	0x58024400
 8003668:	58021000 	.word	0x58021000
 800366c:	40014400 	.word	0x40014400
 8003670:	58020400 	.word	0x58020400

08003674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003678:	bf00      	nop
 800367a:	e7fd      	b.n	8003678 <NMI_Handler+0x4>

0800367c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003680:	bf00      	nop
 8003682:	e7fd      	b.n	8003680 <HardFault_Handler+0x4>

08003684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003688:	bf00      	nop
 800368a:	e7fd      	b.n	8003688 <MemManage_Handler+0x4>

0800368c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003690:	bf00      	nop
 8003692:	e7fd      	b.n	8003690 <BusFault_Handler+0x4>

08003694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003698:	bf00      	nop
 800369a:	e7fd      	b.n	8003698 <UsageFault_Handler+0x4>

0800369c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036a0:	bf00      	nop
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036aa:	b480      	push	{r7}
 80036ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036ae:	bf00      	nop
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036bc:	bf00      	nop
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036ca:	f000 fa79 	bl	8003bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036ce:	bf00      	nop
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80036d8:	4802      	ldr	r0, [pc, #8]	@ (80036e4 <TIM1_UP_IRQHandler+0x10>)
 80036da:	f005 f827 	bl	800872c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	24000318 	.word	0x24000318

080036e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80036ec:	4802      	ldr	r0, [pc, #8]	@ (80036f8 <TIM2_IRQHandler+0x10>)
 80036ee:	f005 f81d 	bl	800872c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	24000364 	.word	0x24000364

080036fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003700:	4802      	ldr	r0, [pc, #8]	@ (800370c <TIM4_IRQHandler+0x10>)
 8003702:	f005 f813 	bl	800872c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	240003b0 	.word	0x240003b0

08003710 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003714:	4803      	ldr	r0, [pc, #12]	@ (8003724 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8003716:	f005 f809 	bl	800872c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800371a:	4803      	ldr	r0, [pc, #12]	@ (8003728 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 800371c:	f005 f806 	bl	800872c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003720:	bf00      	nop
 8003722:	bd80      	pop	{r7, pc}
 8003724:	24000448 	.word	0x24000448
 8003728:	24000494 	.word	0x24000494

0800372c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003730:	4803      	ldr	r0, [pc, #12]	@ (8003740 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8003732:	f004 fffb 	bl	800872c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8003736:	4803      	ldr	r0, [pc, #12]	@ (8003744 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8003738:	f004 fff8 	bl	800872c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800373c:	bf00      	nop
 800373e:	bd80      	pop	{r7, pc}
 8003740:	24000448 	.word	0x24000448
 8003744:	240004e0 	.word	0x240004e0

08003748 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800374c:	4803      	ldr	r0, [pc, #12]	@ (800375c <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 800374e:	f004 ffed 	bl	800872c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8003752:	4803      	ldr	r0, [pc, #12]	@ (8003760 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8003754:	f004 ffea 	bl	800872c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003758:	bf00      	nop
 800375a:	bd80      	pop	{r7, pc}
 800375c:	24000448 	.word	0x24000448
 8003760:	2400052c 	.word	0x2400052c

08003764 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003768:	4802      	ldr	r0, [pc, #8]	@ (8003774 <TIM5_IRQHandler+0x10>)
 800376a:	f004 ffdf 	bl	800872c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800376e:	bf00      	nop
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	240003fc 	.word	0x240003fc

08003778 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART4_IRQn 0 */
	if(UART4->CR1 & USART_CR1_RXNEIE){
 800377c:	4b09      	ldr	r3, [pc, #36]	@ (80037a4 <UART4_IRQHandler+0x2c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	2b00      	cmp	r3, #0
 8003786:	d007      	beq.n	8003798 <UART4_IRQHandler+0x20>
		recvd_byte = UART4->RDR;
 8003788:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <UART4_IRQHandler+0x2c>)
 800378a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378c:	b2da      	uxtb	r2, r3
 800378e:	4b06      	ldr	r3, [pc, #24]	@ (80037a8 <UART4_IRQHandler+0x30>)
 8003790:	701a      	strb	r2, [r3, #0]
		data_ready = TRUE;
 8003792:	4b06      	ldr	r3, [pc, #24]	@ (80037ac <UART4_IRQHandler+0x34>)
 8003794:	2201      	movs	r2, #1
 8003796:	601a      	str	r2, [r3, #0]

  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
 }
 8003798:	bf00      	nop
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40004c00 	.word	0x40004c00
 80037a8:	24002564 	.word	0x24002564
 80037ac:	24002560 	.word	0x24002560

080037b0 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80037b4:	4802      	ldr	r0, [pc, #8]	@ (80037c0 <LPTIM1_IRQHandler+0x10>)
 80037b6:	f001 ff55 	bl	8005664 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80037ba:	bf00      	nop
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	240002e0 	.word	0x240002e0

080037c4 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80037c8:	4802      	ldr	r0, [pc, #8]	@ (80037d4 <TIM15_IRQHandler+0x10>)
 80037ca:	f004 ffaf 	bl	800872c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	24000578 	.word	0x24000578

080037d8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80037dc:	4802      	ldr	r0, [pc, #8]	@ (80037e8 <TIM16_IRQHandler+0x10>)
 80037de:	f004 ffa5 	bl	800872c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	240005c4 	.word	0x240005c4

080037ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return 1;
 80037f0:	2301      	movs	r3, #1
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <_kill>:

int _kill(int pid, int sig)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003806:	f007 fe6d 	bl	800b4e4 <__errno>
 800380a:	4603      	mov	r3, r0
 800380c:	2216      	movs	r2, #22
 800380e:	601a      	str	r2, [r3, #0]
  return -1;
 8003810:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <_exit>:

void _exit (int status)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003824:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff ffe7 	bl	80037fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800382e:	bf00      	nop
 8003830:	e7fd      	b.n	800382e <_exit+0x12>

08003832 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b086      	sub	sp, #24
 8003836:	af00      	add	r7, sp, #0
 8003838:	60f8      	str	r0, [r7, #12]
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	e00a      	b.n	800385a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003844:	f3af 8000 	nop.w
 8003848:	4601      	mov	r1, r0
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	60ba      	str	r2, [r7, #8]
 8003850:	b2ca      	uxtb	r2, r1
 8003852:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	3301      	adds	r3, #1
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	429a      	cmp	r2, r3
 8003860:	dbf0      	blt.n	8003844 <_read+0x12>
  }

  return len;
 8003862:	687b      	ldr	r3, [r7, #4]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	e009      	b.n	8003892 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	60ba      	str	r2, [r7, #8]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	3301      	adds	r3, #1
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	429a      	cmp	r2, r3
 8003898:	dbf1      	blt.n	800387e <_write+0x12>
  }
  return len;
 800389a:	687b      	ldr	r3, [r7, #4]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <_close>:

int _close(int file)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80038ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80038cc:	605a      	str	r2, [r3, #4]
  return 0;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <_isatty>:

int _isatty(int file)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80038e4:	2301      	movs	r3, #1
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b085      	sub	sp, #20
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003914:	4a14      	ldr	r2, [pc, #80]	@ (8003968 <_sbrk+0x5c>)
 8003916:	4b15      	ldr	r3, [pc, #84]	@ (800396c <_sbrk+0x60>)
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003920:	4b13      	ldr	r3, [pc, #76]	@ (8003970 <_sbrk+0x64>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d102      	bne.n	800392e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003928:	4b11      	ldr	r3, [pc, #68]	@ (8003970 <_sbrk+0x64>)
 800392a:	4a12      	ldr	r2, [pc, #72]	@ (8003974 <_sbrk+0x68>)
 800392c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800392e:	4b10      	ldr	r3, [pc, #64]	@ (8003970 <_sbrk+0x64>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4413      	add	r3, r2
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	429a      	cmp	r2, r3
 800393a:	d207      	bcs.n	800394c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800393c:	f007 fdd2 	bl	800b4e4 <__errno>
 8003940:	4603      	mov	r3, r0
 8003942:	220c      	movs	r2, #12
 8003944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003946:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800394a:	e009      	b.n	8003960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800394c:	4b08      	ldr	r3, [pc, #32]	@ (8003970 <_sbrk+0x64>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003952:	4b07      	ldr	r3, [pc, #28]	@ (8003970 <_sbrk+0x64>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4413      	add	r3, r2
 800395a:	4a05      	ldr	r2, [pc, #20]	@ (8003970 <_sbrk+0x64>)
 800395c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800395e:	68fb      	ldr	r3, [r7, #12]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	24080000 	.word	0x24080000
 800396c:	00000400 	.word	0x00000400
 8003970:	240035c4 	.word	0x240035c4
 8003974:	24003718 	.word	0x24003718

08003978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800397c:	4b37      	ldr	r3, [pc, #220]	@ (8003a5c <SystemInit+0xe4>)
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003982:	4a36      	ldr	r2, [pc, #216]	@ (8003a5c <SystemInit+0xe4>)
 8003984:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003988:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800398c:	4b34      	ldr	r3, [pc, #208]	@ (8003a60 <SystemInit+0xe8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 030f 	and.w	r3, r3, #15
 8003994:	2b06      	cmp	r3, #6
 8003996:	d807      	bhi.n	80039a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003998:	4b31      	ldr	r3, [pc, #196]	@ (8003a60 <SystemInit+0xe8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f023 030f 	bic.w	r3, r3, #15
 80039a0:	4a2f      	ldr	r2, [pc, #188]	@ (8003a60 <SystemInit+0xe8>)
 80039a2:	f043 0307 	orr.w	r3, r3, #7
 80039a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80039a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003a64 <SystemInit+0xec>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a2d      	ldr	r2, [pc, #180]	@ (8003a64 <SystemInit+0xec>)
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80039b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003a64 <SystemInit+0xec>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80039ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003a64 <SystemInit+0xec>)
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	4929      	ldr	r1, [pc, #164]	@ (8003a64 <SystemInit+0xec>)
 80039c0:	4b29      	ldr	r3, [pc, #164]	@ (8003a68 <SystemInit+0xf0>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80039c6:	4b26      	ldr	r3, [pc, #152]	@ (8003a60 <SystemInit+0xe8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80039d2:	4b23      	ldr	r3, [pc, #140]	@ (8003a60 <SystemInit+0xe8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 030f 	bic.w	r3, r3, #15
 80039da:	4a21      	ldr	r2, [pc, #132]	@ (8003a60 <SystemInit+0xe8>)
 80039dc:	f043 0307 	orr.w	r3, r3, #7
 80039e0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80039e2:	4b20      	ldr	r3, [pc, #128]	@ (8003a64 <SystemInit+0xec>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80039e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003a64 <SystemInit+0xec>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80039ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003a64 <SystemInit+0xec>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80039f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a64 <SystemInit+0xec>)
 80039f6:	4a1d      	ldr	r2, [pc, #116]	@ (8003a6c <SystemInit+0xf4>)
 80039f8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80039fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003a64 <SystemInit+0xec>)
 80039fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003a70 <SystemInit+0xf8>)
 80039fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003a00:	4b18      	ldr	r3, [pc, #96]	@ (8003a64 <SystemInit+0xec>)
 8003a02:	4a1c      	ldr	r2, [pc, #112]	@ (8003a74 <SystemInit+0xfc>)
 8003a04:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003a06:	4b17      	ldr	r3, [pc, #92]	@ (8003a64 <SystemInit+0xec>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003a0c:	4b15      	ldr	r3, [pc, #84]	@ (8003a64 <SystemInit+0xec>)
 8003a0e:	4a19      	ldr	r2, [pc, #100]	@ (8003a74 <SystemInit+0xfc>)
 8003a10:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003a12:	4b14      	ldr	r3, [pc, #80]	@ (8003a64 <SystemInit+0xec>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003a18:	4b12      	ldr	r3, [pc, #72]	@ (8003a64 <SystemInit+0xec>)
 8003a1a:	4a16      	ldr	r2, [pc, #88]	@ (8003a74 <SystemInit+0xfc>)
 8003a1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003a1e:	4b11      	ldr	r3, [pc, #68]	@ (8003a64 <SystemInit+0xec>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003a24:	4b0f      	ldr	r3, [pc, #60]	@ (8003a64 <SystemInit+0xec>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a0e      	ldr	r2, [pc, #56]	@ (8003a64 <SystemInit+0xec>)
 8003a2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003a30:	4b0c      	ldr	r3, [pc, #48]	@ (8003a64 <SystemInit+0xec>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003a36:	4b10      	ldr	r3, [pc, #64]	@ (8003a78 <SystemInit+0x100>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4b10      	ldr	r3, [pc, #64]	@ (8003a7c <SystemInit+0x104>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a42:	d202      	bcs.n	8003a4a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003a44:	4b0e      	ldr	r3, [pc, #56]	@ (8003a80 <SystemInit+0x108>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a84 <SystemInit+0x10c>)
 8003a4c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003a50:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003a52:	bf00      	nop
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	e000ed00 	.word	0xe000ed00
 8003a60:	52002000 	.word	0x52002000
 8003a64:	58024400 	.word	0x58024400
 8003a68:	eaf6ed7f 	.word	0xeaf6ed7f
 8003a6c:	02020200 	.word	0x02020200
 8003a70:	01ff0000 	.word	0x01ff0000
 8003a74:	01010280 	.word	0x01010280
 8003a78:	5c001000 	.word	0x5c001000
 8003a7c:	ffff0000 	.word	0xffff0000
 8003a80:	51008108 	.word	0x51008108
 8003a84:	52004000 	.word	0x52004000

08003a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003a88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ac0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a8c:	f7ff ff74 	bl	8003978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a90:	480c      	ldr	r0, [pc, #48]	@ (8003ac4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a92:	490d      	ldr	r1, [pc, #52]	@ (8003ac8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a94:	4a0d      	ldr	r2, [pc, #52]	@ (8003acc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a98:	e002      	b.n	8003aa0 <LoopCopyDataInit>

08003a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a9e:	3304      	adds	r3, #4

08003aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003aa4:	d3f9      	bcc.n	8003a9a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003aa8:	4c0a      	ldr	r4, [pc, #40]	@ (8003ad4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003aac:	e001      	b.n	8003ab2 <LoopFillZerobss>

08003aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ab0:	3204      	adds	r2, #4

08003ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ab4:	d3fb      	bcc.n	8003aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ab6:	f007 fd1b 	bl	800b4f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003aba:	f7fc fe2d 	bl	8000718 <main>
  bx  lr
 8003abe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ac0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003ac4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003ac8:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8003acc:	0800e410 	.word	0x0800e410
  ldr r2, =_sbss
 8003ad0:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8003ad4:	24003718 	.word	0x24003718

08003ad8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ad8:	e7fe      	b.n	8003ad8 <ADC3_IRQHandler>
	...

08003adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ae2:	2003      	movs	r0, #3
 8003ae4:	f000 f968 	bl	8003db8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ae8:	f002 fef8 	bl	80068dc <HAL_RCC_GetSysClockFreq>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4b15      	ldr	r3, [pc, #84]	@ (8003b44 <HAL_Init+0x68>)
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	f003 030f 	and.w	r3, r3, #15
 8003af8:	4913      	ldr	r1, [pc, #76]	@ (8003b48 <HAL_Init+0x6c>)
 8003afa:	5ccb      	ldrb	r3, [r1, r3]
 8003afc:	f003 031f 	and.w	r3, r3, #31
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
 8003b04:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b06:	4b0f      	ldr	r3, [pc, #60]	@ (8003b44 <HAL_Init+0x68>)
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	4a0e      	ldr	r2, [pc, #56]	@ (8003b48 <HAL_Init+0x6c>)
 8003b10:	5cd3      	ldrb	r3, [r2, r3]
 8003b12:	f003 031f 	and.w	r3, r3, #31
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1c:	4a0b      	ldr	r2, [pc, #44]	@ (8003b4c <HAL_Init+0x70>)
 8003b1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b20:	4a0b      	ldr	r2, [pc, #44]	@ (8003b50 <HAL_Init+0x74>)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b26:	200f      	movs	r0, #15
 8003b28:	f000 f814 	bl	8003b54 <HAL_InitTick>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e002      	b.n	8003b3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003b36:	f7ff f961 	bl	8002dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	58024400 	.word	0x58024400
 8003b48:	0800de68 	.word	0x0800de68
 8003b4c:	24000014 	.word	0x24000014
 8003b50:	24000010 	.word	0x24000010

08003b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003b5c:	4b15      	ldr	r3, [pc, #84]	@ (8003bb4 <HAL_InitTick+0x60>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e021      	b.n	8003bac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003b68:	4b13      	ldr	r3, [pc, #76]	@ (8003bb8 <HAL_InitTick+0x64>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	4b11      	ldr	r3, [pc, #68]	@ (8003bb4 <HAL_InitTick+0x60>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	4619      	mov	r1, r3
 8003b72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 f94d 	bl	8003e1e <HAL_SYSTICK_Config>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e00e      	b.n	8003bac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b0f      	cmp	r3, #15
 8003b92:	d80a      	bhi.n	8003baa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b94:	2200      	movs	r2, #0
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b9c:	f000 f917 	bl	8003dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ba0:	4a06      	ldr	r2, [pc, #24]	@ (8003bbc <HAL_InitTick+0x68>)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e000      	b.n	8003bac <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	2400001c 	.word	0x2400001c
 8003bb8:	24000010 	.word	0x24000010
 8003bbc:	24000018 	.word	0x24000018

08003bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003bc4:	4b06      	ldr	r3, [pc, #24]	@ (8003be0 <HAL_IncTick+0x20>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4b06      	ldr	r3, [pc, #24]	@ (8003be4 <HAL_IncTick+0x24>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4413      	add	r3, r2
 8003bd0:	4a04      	ldr	r2, [pc, #16]	@ (8003be4 <HAL_IncTick+0x24>)
 8003bd2:	6013      	str	r3, [r2, #0]
}
 8003bd4:	bf00      	nop
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	2400001c 	.word	0x2400001c
 8003be4:	240035c8 	.word	0x240035c8

08003be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  return uwTick;
 8003bec:	4b03      	ldr	r3, [pc, #12]	@ (8003bfc <HAL_GetTick+0x14>)
 8003bee:	681b      	ldr	r3, [r3, #0]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	240035c8 	.word	0x240035c8

08003c00 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003c04:	4b03      	ldr	r3, [pc, #12]	@ (8003c14 <HAL_GetREVID+0x14>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	0c1b      	lsrs	r3, r3, #16
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	5c001000 	.word	0x5c001000

08003c18 <__NVIC_SetPriorityGrouping>:
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c28:	4b0b      	ldr	r3, [pc, #44]	@ (8003c58 <__NVIC_SetPriorityGrouping+0x40>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c34:	4013      	ands	r3, r2
 8003c36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c40:	4b06      	ldr	r3, [pc, #24]	@ (8003c5c <__NVIC_SetPriorityGrouping+0x44>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c46:	4a04      	ldr	r2, [pc, #16]	@ (8003c58 <__NVIC_SetPriorityGrouping+0x40>)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	60d3      	str	r3, [r2, #12]
}
 8003c4c:	bf00      	nop
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	e000ed00 	.word	0xe000ed00
 8003c5c:	05fa0000 	.word	0x05fa0000

08003c60 <__NVIC_GetPriorityGrouping>:
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c64:	4b04      	ldr	r3, [pc, #16]	@ (8003c78 <__NVIC_GetPriorityGrouping+0x18>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	0a1b      	lsrs	r3, r3, #8
 8003c6a:	f003 0307 	and.w	r3, r3, #7
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	e000ed00 	.word	0xe000ed00

08003c7c <__NVIC_EnableIRQ>:
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	db0b      	blt.n	8003ca6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c8e:	88fb      	ldrh	r3, [r7, #6]
 8003c90:	f003 021f 	and.w	r2, r3, #31
 8003c94:	4907      	ldr	r1, [pc, #28]	@ (8003cb4 <__NVIC_EnableIRQ+0x38>)
 8003c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	e000e100 	.word	0xe000e100

08003cb8 <__NVIC_SetPriority>:
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	6039      	str	r1, [r7, #0]
 8003cc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003cc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	db0a      	blt.n	8003ce2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	490c      	ldr	r1, [pc, #48]	@ (8003d04 <__NVIC_SetPriority+0x4c>)
 8003cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cd6:	0112      	lsls	r2, r2, #4
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	440b      	add	r3, r1
 8003cdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003ce0:	e00a      	b.n	8003cf8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	4908      	ldr	r1, [pc, #32]	@ (8003d08 <__NVIC_SetPriority+0x50>)
 8003ce8:	88fb      	ldrh	r3, [r7, #6]
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	3b04      	subs	r3, #4
 8003cf0:	0112      	lsls	r2, r2, #4
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	761a      	strb	r2, [r3, #24]
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	e000e100 	.word	0xe000e100
 8003d08:	e000ed00 	.word	0xe000ed00

08003d0c <NVIC_EncodePriority>:
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b089      	sub	sp, #36	@ 0x24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f1c3 0307 	rsb	r3, r3, #7
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	bf28      	it	cs
 8003d2a:	2304      	movcs	r3, #4
 8003d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	3304      	adds	r3, #4
 8003d32:	2b06      	cmp	r3, #6
 8003d34:	d902      	bls.n	8003d3c <NVIC_EncodePriority+0x30>
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	3b03      	subs	r3, #3
 8003d3a:	e000      	b.n	8003d3e <NVIC_EncodePriority+0x32>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43da      	mvns	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	401a      	ands	r2, r3
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5e:	43d9      	mvns	r1, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d64:	4313      	orrs	r3, r2
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3724      	adds	r7, #36	@ 0x24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
	...

08003d74 <SysTick_Config>:
=======
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f1c3 0307 	rsb	r3, r3, #7
 8003402:	2b04      	cmp	r3, #4
 8003404:	bf28      	it	cs
 8003406:	2304      	movcs	r3, #4
 8003408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	3304      	adds	r3, #4
 800340e:	2b06      	cmp	r3, #6
 8003410:	d902      	bls.n	8003418 <NVIC_EncodePriority+0x30>
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3b03      	subs	r3, #3
 8003416:	e000      	b.n	800341a <NVIC_EncodePriority+0x32>
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800341c:	f04f 32ff 	mov.w	r2, #4294967295
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43da      	mvns	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	401a      	ands	r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003430:	f04f 31ff 	mov.w	r1, #4294967295
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	fa01 f303 	lsl.w	r3, r1, r3
 800343a:	43d9      	mvns	r1, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003440:	4313      	orrs	r3, r2
         );
}
 8003442:	4618      	mov	r0, r3
 8003444:	3724      	adds	r7, #36	@ 0x24
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <SysTick_Config>:
>>>>>>> main
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d84:	d301      	bcc.n	8003d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d86:	2301      	movs	r3, #1
 8003d88:	e00f      	b.n	8003daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003db4 <SysTick_Config+0x40>)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d92:	210f      	movs	r1, #15
 8003d94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d98:	f7ff ff8e 	bl	8003cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d9c:	4b05      	ldr	r3, [pc, #20]	@ (8003db4 <SysTick_Config+0x40>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003da2:	4b04      	ldr	r3, [pc, #16]	@ (8003db4 <SysTick_Config+0x40>)
 8003da4:	2207      	movs	r2, #7
 8003da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	e000e010 	.word	0xe000e010

08003db8 <HAL_NVIC_SetPriorityGrouping>:
=======
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3b01      	subs	r3, #1
 800345c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003460:	d301      	bcc.n	8003466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003462:	2301      	movs	r3, #1
 8003464:	e00f      	b.n	8003486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003466:	4a0a      	ldr	r2, [pc, #40]	@ (8003490 <SysTick_Config+0x40>)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3b01      	subs	r3, #1
 800346c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800346e:	210f      	movs	r1, #15
 8003470:	f04f 30ff 	mov.w	r0, #4294967295
 8003474:	f7ff ff8e 	bl	8003394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003478:	4b05      	ldr	r3, [pc, #20]	@ (8003490 <SysTick_Config+0x40>)
 800347a:	2200      	movs	r2, #0
 800347c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800347e:	4b04      	ldr	r3, [pc, #16]	@ (8003490 <SysTick_Config+0x40>)
 8003480:	2207      	movs	r2, #7
 8003482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	e000e010 	.word	0xe000e010

08003494 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> main
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
=======
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
>>>>>>> main
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff ff29 	bl	8003c18 <__NVIC_SetPriorityGrouping>
}
 8003dc6:	bf00      	nop
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_NVIC_SetPriority>:
=======
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff ff29 	bl	80032f4 <__NVIC_SetPriorityGrouping>
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_NVIC_SetPriority>:
>>>>>>> main
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b086      	sub	sp, #24
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	60b9      	str	r1, [r7, #8]
 8003dd8:	607a      	str	r2, [r7, #4]
 8003dda:	81fb      	strh	r3, [r7, #14]
=======
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b086      	sub	sp, #24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	4603      	mov	r3, r0
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	81fb      	strh	r3, [r7, #14]
>>>>>>> main

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8003ddc:	f7ff ff40 	bl	8003c60 <__NVIC_GetPriorityGrouping>
 8003de0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	68b9      	ldr	r1, [r7, #8]
 8003de6:	6978      	ldr	r0, [r7, #20]
 8003de8:	f7ff ff90 	bl	8003d0c <NVIC_EncodePriority>
 8003dec:	4602      	mov	r2, r0
 8003dee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003df2:	4611      	mov	r1, r2
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff ff5f 	bl	8003cb8 <__NVIC_SetPriority>
}
 8003dfa:	bf00      	nop
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_NVIC_EnableIRQ>:
=======
 80034b8:	f7ff ff40 	bl	800333c <__NVIC_GetPriorityGrouping>
 80034bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	6978      	ldr	r0, [r7, #20]
 80034c4:	f7ff ff90 	bl	80033e8 <NVIC_EncodePriority>
 80034c8:	4602      	mov	r2, r0
 80034ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034ce:	4611      	mov	r1, r2
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff ff5f 	bl	8003394 <__NVIC_SetPriority>
}
 80034d6:	bf00      	nop
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_NVIC_EnableIRQ>:
>>>>>>> main
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	4603      	mov	r3, r0
 8003e0a:	80fb      	strh	r3, [r7, #6]
=======
 80034de:	b580      	push	{r7, lr}
 80034e0:	b082      	sub	sp, #8
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	4603      	mov	r3, r0
 80034e6:	80fb      	strh	r3, [r7, #6]
>>>>>>> main
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8003e0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff ff33 	bl	8003c7c <__NVIC_EnableIRQ>
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_SYSTICK_Config>:
=======
 80034e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff ff33 	bl	8003358 <__NVIC_EnableIRQ>
}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_SYSTICK_Config>:
>>>>>>> main
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff ffa4 	bl	8003d74 <SysTick_Config>
 8003e2c:	4603      	mov	r3, r0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <HAL_GPIO_Init>:
=======
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff ffa4 	bl	8003450 <SysTick_Config>
 8003508:	4603      	mov	r3, r0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003518:	f3bf 8f5f 	dmb	sy
}
 800351c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800351e:	4b07      	ldr	r3, [pc, #28]	@ (800353c <HAL_MPU_Disable+0x28>)
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	4a06      	ldr	r2, [pc, #24]	@ (800353c <HAL_MPU_Disable+0x28>)
 8003524:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003528:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800352a:	4b05      	ldr	r3, [pc, #20]	@ (8003540 <HAL_MPU_Disable+0x2c>)
 800352c:	2200      	movs	r2, #0
 800352e:	605a      	str	r2, [r3, #4]
}
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	e000ed00 	.word	0xe000ed00
 8003540:	e000ed90 	.word	0xe000ed90

08003544 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800354c:	4a0b      	ldr	r2, [pc, #44]	@ (800357c <HAL_MPU_Enable+0x38>)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003556:	4b0a      	ldr	r3, [pc, #40]	@ (8003580 <HAL_MPU_Enable+0x3c>)
 8003558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355a:	4a09      	ldr	r2, [pc, #36]	@ (8003580 <HAL_MPU_Enable+0x3c>)
 800355c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003560:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003562:	f3bf 8f4f 	dsb	sy
}
 8003566:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003568:	f3bf 8f6f 	isb	sy
}
 800356c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	e000ed90 	.word	0xe000ed90
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	785a      	ldrb	r2, [r3, #1]
 8003590:	4b1b      	ldr	r3, [pc, #108]	@ (8003600 <HAL_MPU_ConfigRegion+0x7c>)
 8003592:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003594:	4b1a      	ldr	r3, [pc, #104]	@ (8003600 <HAL_MPU_ConfigRegion+0x7c>)
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	4a19      	ldr	r2, [pc, #100]	@ (8003600 <HAL_MPU_ConfigRegion+0x7c>)
 800359a:	f023 0301 	bic.w	r3, r3, #1
 800359e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80035a0:	4a17      	ldr	r2, [pc, #92]	@ (8003600 <HAL_MPU_ConfigRegion+0x7c>)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	7b1b      	ldrb	r3, [r3, #12]
 80035ac:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	7adb      	ldrb	r3, [r3, #11]
 80035b2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	7a9b      	ldrb	r3, [r3, #10]
 80035ba:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80035bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	7b5b      	ldrb	r3, [r3, #13]
 80035c2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80035c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	7b9b      	ldrb	r3, [r3, #14]
 80035ca:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80035cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	7bdb      	ldrb	r3, [r3, #15]
 80035d2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80035d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	7a5b      	ldrb	r3, [r3, #9]
 80035da:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80035dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	7a1b      	ldrb	r3, [r3, #8]
 80035e2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80035e4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	7812      	ldrb	r2, [r2, #0]
 80035ea:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035ec:	4a04      	ldr	r2, [pc, #16]	@ (8003600 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80035ee:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035f0:	6113      	str	r3, [r2, #16]
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	e000ed90 	.word	0xe000ed90

08003604 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800360c:	f7ff fe5a 	bl	80032c4 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e2dc      	b.n	8003bd6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d008      	beq.n	800363a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2280      	movs	r2, #128	@ 0x80
 800362c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e2cd      	b.n	8003bd6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a76      	ldr	r2, [pc, #472]	@ (8003818 <HAL_DMA_Abort+0x214>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d04a      	beq.n	80036da <HAL_DMA_Abort+0xd6>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a74      	ldr	r2, [pc, #464]	@ (800381c <HAL_DMA_Abort+0x218>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d045      	beq.n	80036da <HAL_DMA_Abort+0xd6>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a73      	ldr	r2, [pc, #460]	@ (8003820 <HAL_DMA_Abort+0x21c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d040      	beq.n	80036da <HAL_DMA_Abort+0xd6>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a71      	ldr	r2, [pc, #452]	@ (8003824 <HAL_DMA_Abort+0x220>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d03b      	beq.n	80036da <HAL_DMA_Abort+0xd6>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a70      	ldr	r2, [pc, #448]	@ (8003828 <HAL_DMA_Abort+0x224>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d036      	beq.n	80036da <HAL_DMA_Abort+0xd6>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a6e      	ldr	r2, [pc, #440]	@ (800382c <HAL_DMA_Abort+0x228>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d031      	beq.n	80036da <HAL_DMA_Abort+0xd6>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a6d      	ldr	r2, [pc, #436]	@ (8003830 <HAL_DMA_Abort+0x22c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d02c      	beq.n	80036da <HAL_DMA_Abort+0xd6>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a6b      	ldr	r2, [pc, #428]	@ (8003834 <HAL_DMA_Abort+0x230>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d027      	beq.n	80036da <HAL_DMA_Abort+0xd6>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a6a      	ldr	r2, [pc, #424]	@ (8003838 <HAL_DMA_Abort+0x234>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d022      	beq.n	80036da <HAL_DMA_Abort+0xd6>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a68      	ldr	r2, [pc, #416]	@ (800383c <HAL_DMA_Abort+0x238>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d01d      	beq.n	80036da <HAL_DMA_Abort+0xd6>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a67      	ldr	r2, [pc, #412]	@ (8003840 <HAL_DMA_Abort+0x23c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d018      	beq.n	80036da <HAL_DMA_Abort+0xd6>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a65      	ldr	r2, [pc, #404]	@ (8003844 <HAL_DMA_Abort+0x240>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d013      	beq.n	80036da <HAL_DMA_Abort+0xd6>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a64      	ldr	r2, [pc, #400]	@ (8003848 <HAL_DMA_Abort+0x244>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00e      	beq.n	80036da <HAL_DMA_Abort+0xd6>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a62      	ldr	r2, [pc, #392]	@ (800384c <HAL_DMA_Abort+0x248>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d009      	beq.n	80036da <HAL_DMA_Abort+0xd6>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a61      	ldr	r2, [pc, #388]	@ (8003850 <HAL_DMA_Abort+0x24c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d004      	beq.n	80036da <HAL_DMA_Abort+0xd6>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a5f      	ldr	r2, [pc, #380]	@ (8003854 <HAL_DMA_Abort+0x250>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d101      	bne.n	80036de <HAL_DMA_Abort+0xda>
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <HAL_DMA_Abort+0xdc>
 80036de:	2300      	movs	r3, #0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d013      	beq.n	800370c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 021e 	bic.w	r2, r2, #30
 80036f2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695a      	ldr	r2, [r3, #20]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003702:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	e00a      	b.n	8003722 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 020e 	bic.w	r2, r2, #14
 800371a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a3c      	ldr	r2, [pc, #240]	@ (8003818 <HAL_DMA_Abort+0x214>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d072      	beq.n	8003812 <HAL_DMA_Abort+0x20e>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a3a      	ldr	r2, [pc, #232]	@ (800381c <HAL_DMA_Abort+0x218>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d06d      	beq.n	8003812 <HAL_DMA_Abort+0x20e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a39      	ldr	r2, [pc, #228]	@ (8003820 <HAL_DMA_Abort+0x21c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d068      	beq.n	8003812 <HAL_DMA_Abort+0x20e>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a37      	ldr	r2, [pc, #220]	@ (8003824 <HAL_DMA_Abort+0x220>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d063      	beq.n	8003812 <HAL_DMA_Abort+0x20e>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a36      	ldr	r2, [pc, #216]	@ (8003828 <HAL_DMA_Abort+0x224>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d05e      	beq.n	8003812 <HAL_DMA_Abort+0x20e>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a34      	ldr	r2, [pc, #208]	@ (800382c <HAL_DMA_Abort+0x228>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d059      	beq.n	8003812 <HAL_DMA_Abort+0x20e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a33      	ldr	r2, [pc, #204]	@ (8003830 <HAL_DMA_Abort+0x22c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d054      	beq.n	8003812 <HAL_DMA_Abort+0x20e>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a31      	ldr	r2, [pc, #196]	@ (8003834 <HAL_DMA_Abort+0x230>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d04f      	beq.n	8003812 <HAL_DMA_Abort+0x20e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a30      	ldr	r2, [pc, #192]	@ (8003838 <HAL_DMA_Abort+0x234>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d04a      	beq.n	8003812 <HAL_DMA_Abort+0x20e>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a2e      	ldr	r2, [pc, #184]	@ (800383c <HAL_DMA_Abort+0x238>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d045      	beq.n	8003812 <HAL_DMA_Abort+0x20e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a2d      	ldr	r2, [pc, #180]	@ (8003840 <HAL_DMA_Abort+0x23c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d040      	beq.n	8003812 <HAL_DMA_Abort+0x20e>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a2b      	ldr	r2, [pc, #172]	@ (8003844 <HAL_DMA_Abort+0x240>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d03b      	beq.n	8003812 <HAL_DMA_Abort+0x20e>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a2a      	ldr	r2, [pc, #168]	@ (8003848 <HAL_DMA_Abort+0x244>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d036      	beq.n	8003812 <HAL_DMA_Abort+0x20e>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a28      	ldr	r2, [pc, #160]	@ (800384c <HAL_DMA_Abort+0x248>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d031      	beq.n	8003812 <HAL_DMA_Abort+0x20e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a27      	ldr	r2, [pc, #156]	@ (8003850 <HAL_DMA_Abort+0x24c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d02c      	beq.n	8003812 <HAL_DMA_Abort+0x20e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a25      	ldr	r2, [pc, #148]	@ (8003854 <HAL_DMA_Abort+0x250>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d027      	beq.n	8003812 <HAL_DMA_Abort+0x20e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a24      	ldr	r2, [pc, #144]	@ (8003858 <HAL_DMA_Abort+0x254>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d022      	beq.n	8003812 <HAL_DMA_Abort+0x20e>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a22      	ldr	r2, [pc, #136]	@ (800385c <HAL_DMA_Abort+0x258>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d01d      	beq.n	8003812 <HAL_DMA_Abort+0x20e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a21      	ldr	r2, [pc, #132]	@ (8003860 <HAL_DMA_Abort+0x25c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d018      	beq.n	8003812 <HAL_DMA_Abort+0x20e>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003864 <HAL_DMA_Abort+0x260>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d013      	beq.n	8003812 <HAL_DMA_Abort+0x20e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003868 <HAL_DMA_Abort+0x264>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00e      	beq.n	8003812 <HAL_DMA_Abort+0x20e>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a1c      	ldr	r2, [pc, #112]	@ (800386c <HAL_DMA_Abort+0x268>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d009      	beq.n	8003812 <HAL_DMA_Abort+0x20e>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a1b      	ldr	r2, [pc, #108]	@ (8003870 <HAL_DMA_Abort+0x26c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d004      	beq.n	8003812 <HAL_DMA_Abort+0x20e>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a19      	ldr	r2, [pc, #100]	@ (8003874 <HAL_DMA_Abort+0x270>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d132      	bne.n	8003878 <HAL_DMA_Abort+0x274>
 8003812:	2301      	movs	r3, #1
 8003814:	e031      	b.n	800387a <HAL_DMA_Abort+0x276>
 8003816:	bf00      	nop
 8003818:	40020010 	.word	0x40020010
 800381c:	40020028 	.word	0x40020028
 8003820:	40020040 	.word	0x40020040
 8003824:	40020058 	.word	0x40020058
 8003828:	40020070 	.word	0x40020070
 800382c:	40020088 	.word	0x40020088
 8003830:	400200a0 	.word	0x400200a0
 8003834:	400200b8 	.word	0x400200b8
 8003838:	40020410 	.word	0x40020410
 800383c:	40020428 	.word	0x40020428
 8003840:	40020440 	.word	0x40020440
 8003844:	40020458 	.word	0x40020458
 8003848:	40020470 	.word	0x40020470
 800384c:	40020488 	.word	0x40020488
 8003850:	400204a0 	.word	0x400204a0
 8003854:	400204b8 	.word	0x400204b8
 8003858:	58025408 	.word	0x58025408
 800385c:	5802541c 	.word	0x5802541c
 8003860:	58025430 	.word	0x58025430
 8003864:	58025444 	.word	0x58025444
 8003868:	58025458 	.word	0x58025458
 800386c:	5802546c 	.word	0x5802546c
 8003870:	58025480 	.word	0x58025480
 8003874:	58025494 	.word	0x58025494
 8003878:	2300      	movs	r3, #0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d007      	beq.n	800388e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003888:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800388c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a6d      	ldr	r2, [pc, #436]	@ (8003a48 <HAL_DMA_Abort+0x444>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d04a      	beq.n	800392e <HAL_DMA_Abort+0x32a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a6b      	ldr	r2, [pc, #428]	@ (8003a4c <HAL_DMA_Abort+0x448>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d045      	beq.n	800392e <HAL_DMA_Abort+0x32a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a6a      	ldr	r2, [pc, #424]	@ (8003a50 <HAL_DMA_Abort+0x44c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d040      	beq.n	800392e <HAL_DMA_Abort+0x32a>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a68      	ldr	r2, [pc, #416]	@ (8003a54 <HAL_DMA_Abort+0x450>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d03b      	beq.n	800392e <HAL_DMA_Abort+0x32a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a67      	ldr	r2, [pc, #412]	@ (8003a58 <HAL_DMA_Abort+0x454>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d036      	beq.n	800392e <HAL_DMA_Abort+0x32a>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a65      	ldr	r2, [pc, #404]	@ (8003a5c <HAL_DMA_Abort+0x458>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d031      	beq.n	800392e <HAL_DMA_Abort+0x32a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a64      	ldr	r2, [pc, #400]	@ (8003a60 <HAL_DMA_Abort+0x45c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d02c      	beq.n	800392e <HAL_DMA_Abort+0x32a>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a62      	ldr	r2, [pc, #392]	@ (8003a64 <HAL_DMA_Abort+0x460>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d027      	beq.n	800392e <HAL_DMA_Abort+0x32a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a61      	ldr	r2, [pc, #388]	@ (8003a68 <HAL_DMA_Abort+0x464>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d022      	beq.n	800392e <HAL_DMA_Abort+0x32a>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a5f      	ldr	r2, [pc, #380]	@ (8003a6c <HAL_DMA_Abort+0x468>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d01d      	beq.n	800392e <HAL_DMA_Abort+0x32a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a5e      	ldr	r2, [pc, #376]	@ (8003a70 <HAL_DMA_Abort+0x46c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d018      	beq.n	800392e <HAL_DMA_Abort+0x32a>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a5c      	ldr	r2, [pc, #368]	@ (8003a74 <HAL_DMA_Abort+0x470>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d013      	beq.n	800392e <HAL_DMA_Abort+0x32a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a5b      	ldr	r2, [pc, #364]	@ (8003a78 <HAL_DMA_Abort+0x474>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d00e      	beq.n	800392e <HAL_DMA_Abort+0x32a>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a59      	ldr	r2, [pc, #356]	@ (8003a7c <HAL_DMA_Abort+0x478>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d009      	beq.n	800392e <HAL_DMA_Abort+0x32a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a58      	ldr	r2, [pc, #352]	@ (8003a80 <HAL_DMA_Abort+0x47c>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d004      	beq.n	800392e <HAL_DMA_Abort+0x32a>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a56      	ldr	r2, [pc, #344]	@ (8003a84 <HAL_DMA_Abort+0x480>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d108      	bne.n	8003940 <HAL_DMA_Abort+0x33c>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0201 	bic.w	r2, r2, #1
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	e007      	b.n	8003950 <HAL_DMA_Abort+0x34c>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0201 	bic.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003950:	e013      	b.n	800397a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003952:	f7ff fcb7 	bl	80032c4 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b05      	cmp	r3, #5
 800395e:	d90c      	bls.n	800397a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2203      	movs	r2, #3
 800396a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e12d      	b.n	8003bd6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1e5      	bne.n	8003952 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a2f      	ldr	r2, [pc, #188]	@ (8003a48 <HAL_DMA_Abort+0x444>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d04a      	beq.n	8003a26 <HAL_DMA_Abort+0x422>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a2d      	ldr	r2, [pc, #180]	@ (8003a4c <HAL_DMA_Abort+0x448>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d045      	beq.n	8003a26 <HAL_DMA_Abort+0x422>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a2c      	ldr	r2, [pc, #176]	@ (8003a50 <HAL_DMA_Abort+0x44c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d040      	beq.n	8003a26 <HAL_DMA_Abort+0x422>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a2a      	ldr	r2, [pc, #168]	@ (8003a54 <HAL_DMA_Abort+0x450>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d03b      	beq.n	8003a26 <HAL_DMA_Abort+0x422>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a29      	ldr	r2, [pc, #164]	@ (8003a58 <HAL_DMA_Abort+0x454>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d036      	beq.n	8003a26 <HAL_DMA_Abort+0x422>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a27      	ldr	r2, [pc, #156]	@ (8003a5c <HAL_DMA_Abort+0x458>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d031      	beq.n	8003a26 <HAL_DMA_Abort+0x422>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a26      	ldr	r2, [pc, #152]	@ (8003a60 <HAL_DMA_Abort+0x45c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d02c      	beq.n	8003a26 <HAL_DMA_Abort+0x422>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a24      	ldr	r2, [pc, #144]	@ (8003a64 <HAL_DMA_Abort+0x460>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d027      	beq.n	8003a26 <HAL_DMA_Abort+0x422>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a23      	ldr	r2, [pc, #140]	@ (8003a68 <HAL_DMA_Abort+0x464>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d022      	beq.n	8003a26 <HAL_DMA_Abort+0x422>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a21      	ldr	r2, [pc, #132]	@ (8003a6c <HAL_DMA_Abort+0x468>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d01d      	beq.n	8003a26 <HAL_DMA_Abort+0x422>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a20      	ldr	r2, [pc, #128]	@ (8003a70 <HAL_DMA_Abort+0x46c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d018      	beq.n	8003a26 <HAL_DMA_Abort+0x422>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003a74 <HAL_DMA_Abort+0x470>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d013      	beq.n	8003a26 <HAL_DMA_Abort+0x422>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1d      	ldr	r2, [pc, #116]	@ (8003a78 <HAL_DMA_Abort+0x474>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00e      	beq.n	8003a26 <HAL_DMA_Abort+0x422>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8003a7c <HAL_DMA_Abort+0x478>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d009      	beq.n	8003a26 <HAL_DMA_Abort+0x422>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1a      	ldr	r2, [pc, #104]	@ (8003a80 <HAL_DMA_Abort+0x47c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d004      	beq.n	8003a26 <HAL_DMA_Abort+0x422>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a18      	ldr	r2, [pc, #96]	@ (8003a84 <HAL_DMA_Abort+0x480>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d101      	bne.n	8003a2a <HAL_DMA_Abort+0x426>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <HAL_DMA_Abort+0x428>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d02b      	beq.n	8003a88 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a34:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a3a:	f003 031f 	and.w	r3, r3, #31
 8003a3e:	223f      	movs	r2, #63	@ 0x3f
 8003a40:	409a      	lsls	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	609a      	str	r2, [r3, #8]
 8003a46:	e02a      	b.n	8003a9e <HAL_DMA_Abort+0x49a>
 8003a48:	40020010 	.word	0x40020010
 8003a4c:	40020028 	.word	0x40020028
 8003a50:	40020040 	.word	0x40020040
 8003a54:	40020058 	.word	0x40020058
 8003a58:	40020070 	.word	0x40020070
 8003a5c:	40020088 	.word	0x40020088
 8003a60:	400200a0 	.word	0x400200a0
 8003a64:	400200b8 	.word	0x400200b8
 8003a68:	40020410 	.word	0x40020410
 8003a6c:	40020428 	.word	0x40020428
 8003a70:	40020440 	.word	0x40020440
 8003a74:	40020458 	.word	0x40020458
 8003a78:	40020470 	.word	0x40020470
 8003a7c:	40020488 	.word	0x40020488
 8003a80:	400204a0 	.word	0x400204a0
 8003a84:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a92:	f003 031f 	and.w	r3, r3, #31
 8003a96:	2201      	movs	r2, #1
 8003a98:	409a      	lsls	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a4f      	ldr	r2, [pc, #316]	@ (8003be0 <HAL_DMA_Abort+0x5dc>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d072      	beq.n	8003b8e <HAL_DMA_Abort+0x58a>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a4d      	ldr	r2, [pc, #308]	@ (8003be4 <HAL_DMA_Abort+0x5e0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d06d      	beq.n	8003b8e <HAL_DMA_Abort+0x58a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a4c      	ldr	r2, [pc, #304]	@ (8003be8 <HAL_DMA_Abort+0x5e4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d068      	beq.n	8003b8e <HAL_DMA_Abort+0x58a>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a4a      	ldr	r2, [pc, #296]	@ (8003bec <HAL_DMA_Abort+0x5e8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d063      	beq.n	8003b8e <HAL_DMA_Abort+0x58a>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a49      	ldr	r2, [pc, #292]	@ (8003bf0 <HAL_DMA_Abort+0x5ec>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d05e      	beq.n	8003b8e <HAL_DMA_Abort+0x58a>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a47      	ldr	r2, [pc, #284]	@ (8003bf4 <HAL_DMA_Abort+0x5f0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d059      	beq.n	8003b8e <HAL_DMA_Abort+0x58a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a46      	ldr	r2, [pc, #280]	@ (8003bf8 <HAL_DMA_Abort+0x5f4>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d054      	beq.n	8003b8e <HAL_DMA_Abort+0x58a>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a44      	ldr	r2, [pc, #272]	@ (8003bfc <HAL_DMA_Abort+0x5f8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d04f      	beq.n	8003b8e <HAL_DMA_Abort+0x58a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a43      	ldr	r2, [pc, #268]	@ (8003c00 <HAL_DMA_Abort+0x5fc>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d04a      	beq.n	8003b8e <HAL_DMA_Abort+0x58a>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a41      	ldr	r2, [pc, #260]	@ (8003c04 <HAL_DMA_Abort+0x600>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d045      	beq.n	8003b8e <HAL_DMA_Abort+0x58a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a40      	ldr	r2, [pc, #256]	@ (8003c08 <HAL_DMA_Abort+0x604>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d040      	beq.n	8003b8e <HAL_DMA_Abort+0x58a>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a3e      	ldr	r2, [pc, #248]	@ (8003c0c <HAL_DMA_Abort+0x608>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d03b      	beq.n	8003b8e <HAL_DMA_Abort+0x58a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a3d      	ldr	r2, [pc, #244]	@ (8003c10 <HAL_DMA_Abort+0x60c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d036      	beq.n	8003b8e <HAL_DMA_Abort+0x58a>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a3b      	ldr	r2, [pc, #236]	@ (8003c14 <HAL_DMA_Abort+0x610>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d031      	beq.n	8003b8e <HAL_DMA_Abort+0x58a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a3a      	ldr	r2, [pc, #232]	@ (8003c18 <HAL_DMA_Abort+0x614>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d02c      	beq.n	8003b8e <HAL_DMA_Abort+0x58a>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a38      	ldr	r2, [pc, #224]	@ (8003c1c <HAL_DMA_Abort+0x618>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d027      	beq.n	8003b8e <HAL_DMA_Abort+0x58a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a37      	ldr	r2, [pc, #220]	@ (8003c20 <HAL_DMA_Abort+0x61c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d022      	beq.n	8003b8e <HAL_DMA_Abort+0x58a>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a35      	ldr	r2, [pc, #212]	@ (8003c24 <HAL_DMA_Abort+0x620>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d01d      	beq.n	8003b8e <HAL_DMA_Abort+0x58a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a34      	ldr	r2, [pc, #208]	@ (8003c28 <HAL_DMA_Abort+0x624>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d018      	beq.n	8003b8e <HAL_DMA_Abort+0x58a>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a32      	ldr	r2, [pc, #200]	@ (8003c2c <HAL_DMA_Abort+0x628>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d013      	beq.n	8003b8e <HAL_DMA_Abort+0x58a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a31      	ldr	r2, [pc, #196]	@ (8003c30 <HAL_DMA_Abort+0x62c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d00e      	beq.n	8003b8e <HAL_DMA_Abort+0x58a>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a2f      	ldr	r2, [pc, #188]	@ (8003c34 <HAL_DMA_Abort+0x630>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d009      	beq.n	8003b8e <HAL_DMA_Abort+0x58a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a2e      	ldr	r2, [pc, #184]	@ (8003c38 <HAL_DMA_Abort+0x634>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d004      	beq.n	8003b8e <HAL_DMA_Abort+0x58a>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a2c      	ldr	r2, [pc, #176]	@ (8003c3c <HAL_DMA_Abort+0x638>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d101      	bne.n	8003b92 <HAL_DMA_Abort+0x58e>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <HAL_DMA_Abort+0x590>
 8003b92:	2300      	movs	r3, #0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d015      	beq.n	8003bc4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003ba0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00c      	beq.n	8003bc4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bb8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003bc2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40020010 	.word	0x40020010
 8003be4:	40020028 	.word	0x40020028
 8003be8:	40020040 	.word	0x40020040
 8003bec:	40020058 	.word	0x40020058
 8003bf0:	40020070 	.word	0x40020070
 8003bf4:	40020088 	.word	0x40020088
 8003bf8:	400200a0 	.word	0x400200a0
 8003bfc:	400200b8 	.word	0x400200b8
 8003c00:	40020410 	.word	0x40020410
 8003c04:	40020428 	.word	0x40020428
 8003c08:	40020440 	.word	0x40020440
 8003c0c:	40020458 	.word	0x40020458
 8003c10:	40020470 	.word	0x40020470
 8003c14:	40020488 	.word	0x40020488
 8003c18:	400204a0 	.word	0x400204a0
 8003c1c:	400204b8 	.word	0x400204b8
 8003c20:	58025408 	.word	0x58025408
 8003c24:	5802541c 	.word	0x5802541c
 8003c28:	58025430 	.word	0x58025430
 8003c2c:	58025444 	.word	0x58025444
 8003c30:	58025458 	.word	0x58025458
 8003c34:	5802546c 	.word	0x5802546c
 8003c38:	58025480 	.word	0x58025480
 8003c3c:	58025494 	.word	0x58025494

08003c40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e237      	b.n	80040c2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d004      	beq.n	8003c68 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2280      	movs	r2, #128	@ 0x80
 8003c62:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e22c      	b.n	80040c2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a5c      	ldr	r2, [pc, #368]	@ (8003de0 <HAL_DMA_Abort_IT+0x1a0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d04a      	beq.n	8003d08 <HAL_DMA_Abort_IT+0xc8>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a5b      	ldr	r2, [pc, #364]	@ (8003de4 <HAL_DMA_Abort_IT+0x1a4>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d045      	beq.n	8003d08 <HAL_DMA_Abort_IT+0xc8>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a59      	ldr	r2, [pc, #356]	@ (8003de8 <HAL_DMA_Abort_IT+0x1a8>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d040      	beq.n	8003d08 <HAL_DMA_Abort_IT+0xc8>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a58      	ldr	r2, [pc, #352]	@ (8003dec <HAL_DMA_Abort_IT+0x1ac>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d03b      	beq.n	8003d08 <HAL_DMA_Abort_IT+0xc8>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a56      	ldr	r2, [pc, #344]	@ (8003df0 <HAL_DMA_Abort_IT+0x1b0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d036      	beq.n	8003d08 <HAL_DMA_Abort_IT+0xc8>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a55      	ldr	r2, [pc, #340]	@ (8003df4 <HAL_DMA_Abort_IT+0x1b4>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d031      	beq.n	8003d08 <HAL_DMA_Abort_IT+0xc8>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a53      	ldr	r2, [pc, #332]	@ (8003df8 <HAL_DMA_Abort_IT+0x1b8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d02c      	beq.n	8003d08 <HAL_DMA_Abort_IT+0xc8>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a52      	ldr	r2, [pc, #328]	@ (8003dfc <HAL_DMA_Abort_IT+0x1bc>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d027      	beq.n	8003d08 <HAL_DMA_Abort_IT+0xc8>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a50      	ldr	r2, [pc, #320]	@ (8003e00 <HAL_DMA_Abort_IT+0x1c0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d022      	beq.n	8003d08 <HAL_DMA_Abort_IT+0xc8>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a4f      	ldr	r2, [pc, #316]	@ (8003e04 <HAL_DMA_Abort_IT+0x1c4>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d01d      	beq.n	8003d08 <HAL_DMA_Abort_IT+0xc8>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a4d      	ldr	r2, [pc, #308]	@ (8003e08 <HAL_DMA_Abort_IT+0x1c8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d018      	beq.n	8003d08 <HAL_DMA_Abort_IT+0xc8>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a4c      	ldr	r2, [pc, #304]	@ (8003e0c <HAL_DMA_Abort_IT+0x1cc>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d013      	beq.n	8003d08 <HAL_DMA_Abort_IT+0xc8>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a4a      	ldr	r2, [pc, #296]	@ (8003e10 <HAL_DMA_Abort_IT+0x1d0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00e      	beq.n	8003d08 <HAL_DMA_Abort_IT+0xc8>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a49      	ldr	r2, [pc, #292]	@ (8003e14 <HAL_DMA_Abort_IT+0x1d4>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d009      	beq.n	8003d08 <HAL_DMA_Abort_IT+0xc8>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a47      	ldr	r2, [pc, #284]	@ (8003e18 <HAL_DMA_Abort_IT+0x1d8>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d004      	beq.n	8003d08 <HAL_DMA_Abort_IT+0xc8>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a46      	ldr	r2, [pc, #280]	@ (8003e1c <HAL_DMA_Abort_IT+0x1dc>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d101      	bne.n	8003d0c <HAL_DMA_Abort_IT+0xcc>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e000      	b.n	8003d0e <HAL_DMA_Abort_IT+0xce>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 8086 	beq.w	8003e20 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2204      	movs	r2, #4
 8003d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a2f      	ldr	r2, [pc, #188]	@ (8003de0 <HAL_DMA_Abort_IT+0x1a0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d04a      	beq.n	8003dbc <HAL_DMA_Abort_IT+0x17c>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a2e      	ldr	r2, [pc, #184]	@ (8003de4 <HAL_DMA_Abort_IT+0x1a4>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d045      	beq.n	8003dbc <HAL_DMA_Abort_IT+0x17c>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a2c      	ldr	r2, [pc, #176]	@ (8003de8 <HAL_DMA_Abort_IT+0x1a8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d040      	beq.n	8003dbc <HAL_DMA_Abort_IT+0x17c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a2b      	ldr	r2, [pc, #172]	@ (8003dec <HAL_DMA_Abort_IT+0x1ac>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d03b      	beq.n	8003dbc <HAL_DMA_Abort_IT+0x17c>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a29      	ldr	r2, [pc, #164]	@ (8003df0 <HAL_DMA_Abort_IT+0x1b0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d036      	beq.n	8003dbc <HAL_DMA_Abort_IT+0x17c>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a28      	ldr	r2, [pc, #160]	@ (8003df4 <HAL_DMA_Abort_IT+0x1b4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d031      	beq.n	8003dbc <HAL_DMA_Abort_IT+0x17c>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a26      	ldr	r2, [pc, #152]	@ (8003df8 <HAL_DMA_Abort_IT+0x1b8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d02c      	beq.n	8003dbc <HAL_DMA_Abort_IT+0x17c>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a25      	ldr	r2, [pc, #148]	@ (8003dfc <HAL_DMA_Abort_IT+0x1bc>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d027      	beq.n	8003dbc <HAL_DMA_Abort_IT+0x17c>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a23      	ldr	r2, [pc, #140]	@ (8003e00 <HAL_DMA_Abort_IT+0x1c0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d022      	beq.n	8003dbc <HAL_DMA_Abort_IT+0x17c>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a22      	ldr	r2, [pc, #136]	@ (8003e04 <HAL_DMA_Abort_IT+0x1c4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d01d      	beq.n	8003dbc <HAL_DMA_Abort_IT+0x17c>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a20      	ldr	r2, [pc, #128]	@ (8003e08 <HAL_DMA_Abort_IT+0x1c8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d018      	beq.n	8003dbc <HAL_DMA_Abort_IT+0x17c>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a1f      	ldr	r2, [pc, #124]	@ (8003e0c <HAL_DMA_Abort_IT+0x1cc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d013      	beq.n	8003dbc <HAL_DMA_Abort_IT+0x17c>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a1d      	ldr	r2, [pc, #116]	@ (8003e10 <HAL_DMA_Abort_IT+0x1d0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00e      	beq.n	8003dbc <HAL_DMA_Abort_IT+0x17c>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a1c      	ldr	r2, [pc, #112]	@ (8003e14 <HAL_DMA_Abort_IT+0x1d4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d009      	beq.n	8003dbc <HAL_DMA_Abort_IT+0x17c>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a1a      	ldr	r2, [pc, #104]	@ (8003e18 <HAL_DMA_Abort_IT+0x1d8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d004      	beq.n	8003dbc <HAL_DMA_Abort_IT+0x17c>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a19      	ldr	r2, [pc, #100]	@ (8003e1c <HAL_DMA_Abort_IT+0x1dc>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d108      	bne.n	8003dce <HAL_DMA_Abort_IT+0x18e>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0201 	bic.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	e178      	b.n	80040c0 <HAL_DMA_Abort_IT+0x480>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0201 	bic.w	r2, r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	e16f      	b.n	80040c0 <HAL_DMA_Abort_IT+0x480>
 8003de0:	40020010 	.word	0x40020010
 8003de4:	40020028 	.word	0x40020028
 8003de8:	40020040 	.word	0x40020040
 8003dec:	40020058 	.word	0x40020058
 8003df0:	40020070 	.word	0x40020070
 8003df4:	40020088 	.word	0x40020088
 8003df8:	400200a0 	.word	0x400200a0
 8003dfc:	400200b8 	.word	0x400200b8
 8003e00:	40020410 	.word	0x40020410
 8003e04:	40020428 	.word	0x40020428
 8003e08:	40020440 	.word	0x40020440
 8003e0c:	40020458 	.word	0x40020458
 8003e10:	40020470 	.word	0x40020470
 8003e14:	40020488 	.word	0x40020488
 8003e18:	400204a0 	.word	0x400204a0
 8003e1c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 020e 	bic.w	r2, r2, #14
 8003e2e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a6c      	ldr	r2, [pc, #432]	@ (8003fe8 <HAL_DMA_Abort_IT+0x3a8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d04a      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x290>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a6b      	ldr	r2, [pc, #428]	@ (8003fec <HAL_DMA_Abort_IT+0x3ac>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d045      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x290>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a69      	ldr	r2, [pc, #420]	@ (8003ff0 <HAL_DMA_Abort_IT+0x3b0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d040      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x290>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a68      	ldr	r2, [pc, #416]	@ (8003ff4 <HAL_DMA_Abort_IT+0x3b4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d03b      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x290>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a66      	ldr	r2, [pc, #408]	@ (8003ff8 <HAL_DMA_Abort_IT+0x3b8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d036      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x290>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a65      	ldr	r2, [pc, #404]	@ (8003ffc <HAL_DMA_Abort_IT+0x3bc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d031      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x290>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a63      	ldr	r2, [pc, #396]	@ (8004000 <HAL_DMA_Abort_IT+0x3c0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d02c      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x290>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a62      	ldr	r2, [pc, #392]	@ (8004004 <HAL_DMA_Abort_IT+0x3c4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d027      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x290>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a60      	ldr	r2, [pc, #384]	@ (8004008 <HAL_DMA_Abort_IT+0x3c8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d022      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x290>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a5f      	ldr	r2, [pc, #380]	@ (800400c <HAL_DMA_Abort_IT+0x3cc>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d01d      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x290>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a5d      	ldr	r2, [pc, #372]	@ (8004010 <HAL_DMA_Abort_IT+0x3d0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d018      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x290>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a5c      	ldr	r2, [pc, #368]	@ (8004014 <HAL_DMA_Abort_IT+0x3d4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d013      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x290>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a5a      	ldr	r2, [pc, #360]	@ (8004018 <HAL_DMA_Abort_IT+0x3d8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00e      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x290>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a59      	ldr	r2, [pc, #356]	@ (800401c <HAL_DMA_Abort_IT+0x3dc>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d009      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x290>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a57      	ldr	r2, [pc, #348]	@ (8004020 <HAL_DMA_Abort_IT+0x3e0>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d004      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x290>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a56      	ldr	r2, [pc, #344]	@ (8004024 <HAL_DMA_Abort_IT+0x3e4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d108      	bne.n	8003ee2 <HAL_DMA_Abort_IT+0x2a2>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0201 	bic.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	e007      	b.n	8003ef2 <HAL_DMA_Abort_IT+0x2b2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0201 	bic.w	r2, r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a3c      	ldr	r2, [pc, #240]	@ (8003fe8 <HAL_DMA_Abort_IT+0x3a8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d072      	beq.n	8003fe2 <HAL_DMA_Abort_IT+0x3a2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a3a      	ldr	r2, [pc, #232]	@ (8003fec <HAL_DMA_Abort_IT+0x3ac>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d06d      	beq.n	8003fe2 <HAL_DMA_Abort_IT+0x3a2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a39      	ldr	r2, [pc, #228]	@ (8003ff0 <HAL_DMA_Abort_IT+0x3b0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d068      	beq.n	8003fe2 <HAL_DMA_Abort_IT+0x3a2>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a37      	ldr	r2, [pc, #220]	@ (8003ff4 <HAL_DMA_Abort_IT+0x3b4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d063      	beq.n	8003fe2 <HAL_DMA_Abort_IT+0x3a2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a36      	ldr	r2, [pc, #216]	@ (8003ff8 <HAL_DMA_Abort_IT+0x3b8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d05e      	beq.n	8003fe2 <HAL_DMA_Abort_IT+0x3a2>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a34      	ldr	r2, [pc, #208]	@ (8003ffc <HAL_DMA_Abort_IT+0x3bc>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d059      	beq.n	8003fe2 <HAL_DMA_Abort_IT+0x3a2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a33      	ldr	r2, [pc, #204]	@ (8004000 <HAL_DMA_Abort_IT+0x3c0>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d054      	beq.n	8003fe2 <HAL_DMA_Abort_IT+0x3a2>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a31      	ldr	r2, [pc, #196]	@ (8004004 <HAL_DMA_Abort_IT+0x3c4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d04f      	beq.n	8003fe2 <HAL_DMA_Abort_IT+0x3a2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a30      	ldr	r2, [pc, #192]	@ (8004008 <HAL_DMA_Abort_IT+0x3c8>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d04a      	beq.n	8003fe2 <HAL_DMA_Abort_IT+0x3a2>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a2e      	ldr	r2, [pc, #184]	@ (800400c <HAL_DMA_Abort_IT+0x3cc>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d045      	beq.n	8003fe2 <HAL_DMA_Abort_IT+0x3a2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a2d      	ldr	r2, [pc, #180]	@ (8004010 <HAL_DMA_Abort_IT+0x3d0>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d040      	beq.n	8003fe2 <HAL_DMA_Abort_IT+0x3a2>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a2b      	ldr	r2, [pc, #172]	@ (8004014 <HAL_DMA_Abort_IT+0x3d4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d03b      	beq.n	8003fe2 <HAL_DMA_Abort_IT+0x3a2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a2a      	ldr	r2, [pc, #168]	@ (8004018 <HAL_DMA_Abort_IT+0x3d8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d036      	beq.n	8003fe2 <HAL_DMA_Abort_IT+0x3a2>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a28      	ldr	r2, [pc, #160]	@ (800401c <HAL_DMA_Abort_IT+0x3dc>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d031      	beq.n	8003fe2 <HAL_DMA_Abort_IT+0x3a2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a27      	ldr	r2, [pc, #156]	@ (8004020 <HAL_DMA_Abort_IT+0x3e0>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d02c      	beq.n	8003fe2 <HAL_DMA_Abort_IT+0x3a2>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a25      	ldr	r2, [pc, #148]	@ (8004024 <HAL_DMA_Abort_IT+0x3e4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d027      	beq.n	8003fe2 <HAL_DMA_Abort_IT+0x3a2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a24      	ldr	r2, [pc, #144]	@ (8004028 <HAL_DMA_Abort_IT+0x3e8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d022      	beq.n	8003fe2 <HAL_DMA_Abort_IT+0x3a2>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a22      	ldr	r2, [pc, #136]	@ (800402c <HAL_DMA_Abort_IT+0x3ec>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d01d      	beq.n	8003fe2 <HAL_DMA_Abort_IT+0x3a2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a21      	ldr	r2, [pc, #132]	@ (8004030 <HAL_DMA_Abort_IT+0x3f0>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d018      	beq.n	8003fe2 <HAL_DMA_Abort_IT+0x3a2>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8004034 <HAL_DMA_Abort_IT+0x3f4>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d013      	beq.n	8003fe2 <HAL_DMA_Abort_IT+0x3a2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8004038 <HAL_DMA_Abort_IT+0x3f8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d00e      	beq.n	8003fe2 <HAL_DMA_Abort_IT+0x3a2>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1c      	ldr	r2, [pc, #112]	@ (800403c <HAL_DMA_Abort_IT+0x3fc>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d009      	beq.n	8003fe2 <HAL_DMA_Abort_IT+0x3a2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1b      	ldr	r2, [pc, #108]	@ (8004040 <HAL_DMA_Abort_IT+0x400>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d004      	beq.n	8003fe2 <HAL_DMA_Abort_IT+0x3a2>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a19      	ldr	r2, [pc, #100]	@ (8004044 <HAL_DMA_Abort_IT+0x404>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d132      	bne.n	8004048 <HAL_DMA_Abort_IT+0x408>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e031      	b.n	800404a <HAL_DMA_Abort_IT+0x40a>
 8003fe6:	bf00      	nop
 8003fe8:	40020010 	.word	0x40020010
 8003fec:	40020028 	.word	0x40020028
 8003ff0:	40020040 	.word	0x40020040
 8003ff4:	40020058 	.word	0x40020058
 8003ff8:	40020070 	.word	0x40020070
 8003ffc:	40020088 	.word	0x40020088
 8004000:	400200a0 	.word	0x400200a0
 8004004:	400200b8 	.word	0x400200b8
 8004008:	40020410 	.word	0x40020410
 800400c:	40020428 	.word	0x40020428
 8004010:	40020440 	.word	0x40020440
 8004014:	40020458 	.word	0x40020458
 8004018:	40020470 	.word	0x40020470
 800401c:	40020488 	.word	0x40020488
 8004020:	400204a0 	.word	0x400204a0
 8004024:	400204b8 	.word	0x400204b8
 8004028:	58025408 	.word	0x58025408
 800402c:	5802541c 	.word	0x5802541c
 8004030:	58025430 	.word	0x58025430
 8004034:	58025444 	.word	0x58025444
 8004038:	58025458 	.word	0x58025458
 800403c:	5802546c 	.word	0x5802546c
 8004040:	58025480 	.word	0x58025480
 8004044:	58025494 	.word	0x58025494
 8004048:	2300      	movs	r3, #0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d028      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004058:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800405c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004062:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004068:	f003 031f 	and.w	r3, r3, #31
 800406c:	2201      	movs	r2, #1
 800406e:	409a      	lsls	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800407c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00c      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004090:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004094:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800409e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop

080040cc <HAL_GPIO_Init>:
>>>>>>> main
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8003e38:	b480      	push	{r7}
 8003e3a:	b089      	sub	sp, #36	@ 0x24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	61fb      	str	r3, [r7, #28]
=======
 80040cc:	b480      	push	{r7}
 80040ce:	b089      	sub	sp, #36	@ 0x24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	61fb      	str	r3, [r7, #28]
>>>>>>> main
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
<<<<<<< HEAD
 8003e46:	4b89      	ldr	r3, [pc, #548]	@ (800406c <HAL_GPIO_Init+0x234>)
 8003e48:	617b      	str	r3, [r7, #20]
=======
 80040da:	4b89      	ldr	r3, [pc, #548]	@ (8004300 <HAL_GPIO_Init+0x234>)
 80040dc:	617b      	str	r3, [r7, #20]
>>>>>>> main
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
<<<<<<< HEAD
 8003e4a:	e194      	b.n	8004176 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	2101      	movs	r1, #1
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	fa01 f303 	lsl.w	r3, r1, r3
 8003e58:	4013      	ands	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 8186 	beq.w	8004170 <HAL_GPIO_Init+0x338>
=======
 80040de:	e194      	b.n	800440a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	2101      	movs	r1, #1
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ec:	4013      	ands	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 8186 	beq.w	8004404 <HAL_GPIO_Init+0x338>
>>>>>>> main
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
<<<<<<< HEAD
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 0303 	and.w	r3, r3, #3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d005      	beq.n	8003e7c <HAL_GPIO_Init+0x44>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f003 0303 	and.w	r3, r3, #3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d130      	bne.n	8003ede <HAL_GPIO_Init+0xa6>
=======
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 0303 	and.w	r3, r3, #3
 8004100:	2b01      	cmp	r3, #1
 8004102:	d005      	beq.n	8004110 <HAL_GPIO_Init+0x44>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f003 0303 	and.w	r3, r3, #3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d130      	bne.n	8004172 <HAL_GPIO_Init+0xa6>
>>>>>>> main
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< HEAD
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	2203      	movs	r2, #3
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	4013      	ands	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	68da      	ldr	r2, [r3, #12]
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	091b      	lsrs	r3, r3, #4
 8003ec8:	f003 0201 	and.w	r2, r3, #1
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d017      	beq.n	8003f1a <HAL_GPIO_Init+0xe2>
=======
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	2203      	movs	r2, #3
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	43db      	mvns	r3, r3
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	4013      	ands	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	4313      	orrs	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004146:	2201      	movs	r2, #1
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	43db      	mvns	r3, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4013      	ands	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	091b      	lsrs	r3, r3, #4
 800415c:	f003 0201 	and.w	r2, r3, #1
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4313      	orrs	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	2b03      	cmp	r3, #3
 800417c:	d017      	beq.n	80041ae <HAL_GPIO_Init+0xe2>
>>>>>>> main
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	2203      	movs	r2, #3
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	60da      	str	r2, [r3, #12]
=======
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	2203      	movs	r2, #3
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43db      	mvns	r3, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4013      	ands	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	60da      	str	r2, [r3, #12]
>>>>>>> main
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d123      	bne.n	8003f6e <HAL_GPIO_Init+0x136>
=======
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d123      	bne.n	8004202 <HAL_GPIO_Init+0x136>
>>>>>>> main
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	08da      	lsrs	r2, r3, #3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	3208      	adds	r2, #8
 8003f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	220f      	movs	r2, #15
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	43db      	mvns	r3, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4013      	ands	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	691a      	ldr	r2, [r3, #16]
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	08da      	lsrs	r2, r3, #3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3208      	adds	r2, #8
 8003f68:	69b9      	ldr	r1, [r7, #24]
 8003f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	08da      	lsrs	r2, r3, #3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3208      	adds	r2, #8
 80041c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	220f      	movs	r2, #15
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	43db      	mvns	r3, r3
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	4013      	ands	r3, r2
 80041dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	691a      	ldr	r2, [r3, #16]
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	08da      	lsrs	r2, r3, #3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3208      	adds	r2, #8
 80041fc:	69b9      	ldr	r1, [r7, #24]
 80041fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> main
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	2203      	movs	r2, #3
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4013      	ands	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f003 0203 	and.w	r2, r3, #3
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	601a      	str	r2, [r3, #0]
=======
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	2203      	movs	r2, #3
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	43db      	mvns	r3, r3
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	4013      	ands	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f003 0203 	and.w	r2, r3, #3
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4313      	orrs	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	601a      	str	r2, [r3, #0]
>>>>>>> main

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< HEAD
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 80e0 	beq.w	8004170 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fb0:	4b2f      	ldr	r3, [pc, #188]	@ (8004070 <HAL_GPIO_Init+0x238>)
 8003fb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003fb6:	4a2e      	ldr	r2, [pc, #184]	@ (8004070 <HAL_GPIO_Init+0x238>)
 8003fb8:	f043 0302 	orr.w	r3, r3, #2
 8003fbc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8004070 <HAL_GPIO_Init+0x238>)
 8003fc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fce:	4a29      	ldr	r2, [pc, #164]	@ (8004074 <HAL_GPIO_Init+0x23c>)
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	089b      	lsrs	r3, r3, #2
 8003fd4:	3302      	adds	r3, #2
 8003fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	220f      	movs	r2, #15
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	43db      	mvns	r3, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a20      	ldr	r2, [pc, #128]	@ (8004078 <HAL_GPIO_Init+0x240>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d052      	beq.n	80040a0 <HAL_GPIO_Init+0x268>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800407c <HAL_GPIO_Init+0x244>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d031      	beq.n	8004066 <HAL_GPIO_Init+0x22e>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a1e      	ldr	r2, [pc, #120]	@ (8004080 <HAL_GPIO_Init+0x248>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d02b      	beq.n	8004062 <HAL_GPIO_Init+0x22a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a1d      	ldr	r2, [pc, #116]	@ (8004084 <HAL_GPIO_Init+0x24c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d025      	beq.n	800405e <HAL_GPIO_Init+0x226>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a1c      	ldr	r2, [pc, #112]	@ (8004088 <HAL_GPIO_Init+0x250>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d01f      	beq.n	800405a <HAL_GPIO_Init+0x222>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a1b      	ldr	r2, [pc, #108]	@ (800408c <HAL_GPIO_Init+0x254>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d019      	beq.n	8004056 <HAL_GPIO_Init+0x21e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a1a      	ldr	r2, [pc, #104]	@ (8004090 <HAL_GPIO_Init+0x258>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d013      	beq.n	8004052 <HAL_GPIO_Init+0x21a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a19      	ldr	r2, [pc, #100]	@ (8004094 <HAL_GPIO_Init+0x25c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00d      	beq.n	800404e <HAL_GPIO_Init+0x216>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a18      	ldr	r2, [pc, #96]	@ (8004098 <HAL_GPIO_Init+0x260>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d007      	beq.n	800404a <HAL_GPIO_Init+0x212>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a17      	ldr	r2, [pc, #92]	@ (800409c <HAL_GPIO_Init+0x264>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d101      	bne.n	8004046 <HAL_GPIO_Init+0x20e>
 8004042:	2309      	movs	r3, #9
 8004044:	e02d      	b.n	80040a2 <HAL_GPIO_Init+0x26a>
 8004046:	230a      	movs	r3, #10
 8004048:	e02b      	b.n	80040a2 <HAL_GPIO_Init+0x26a>
 800404a:	2308      	movs	r3, #8
 800404c:	e029      	b.n	80040a2 <HAL_GPIO_Init+0x26a>
 800404e:	2307      	movs	r3, #7
 8004050:	e027      	b.n	80040a2 <HAL_GPIO_Init+0x26a>
 8004052:	2306      	movs	r3, #6
 8004054:	e025      	b.n	80040a2 <HAL_GPIO_Init+0x26a>
 8004056:	2305      	movs	r3, #5
 8004058:	e023      	b.n	80040a2 <HAL_GPIO_Init+0x26a>
 800405a:	2304      	movs	r3, #4
 800405c:	e021      	b.n	80040a2 <HAL_GPIO_Init+0x26a>
 800405e:	2303      	movs	r3, #3
 8004060:	e01f      	b.n	80040a2 <HAL_GPIO_Init+0x26a>
 8004062:	2302      	movs	r3, #2
 8004064:	e01d      	b.n	80040a2 <HAL_GPIO_Init+0x26a>
 8004066:	2301      	movs	r3, #1
 8004068:	e01b      	b.n	80040a2 <HAL_GPIO_Init+0x26a>
 800406a:	bf00      	nop
 800406c:	58000080 	.word	0x58000080
 8004070:	58024400 	.word	0x58024400
 8004074:	58000400 	.word	0x58000400
 8004078:	58020000 	.word	0x58020000
 800407c:	58020400 	.word	0x58020400
 8004080:	58020800 	.word	0x58020800
 8004084:	58020c00 	.word	0x58020c00
 8004088:	58021000 	.word	0x58021000
 800408c:	58021400 	.word	0x58021400
 8004090:	58021800 	.word	0x58021800
 8004094:	58021c00 	.word	0x58021c00
 8004098:	58022000 	.word	0x58022000
 800409c:	58022400 	.word	0x58022400
 80040a0:	2300      	movs	r3, #0
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	f002 0203 	and.w	r2, r2, #3
 80040a8:	0092      	lsls	r2, r2, #2
 80040aa:	4093      	lsls	r3, r2
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040b2:	4938      	ldr	r1, [pc, #224]	@ (8004194 <HAL_GPIO_Init+0x35c>)
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	089b      	lsrs	r3, r3, #2
 80040b8:	3302      	adds	r3, #2
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	43db      	mvns	r3, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4013      	ands	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80040e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80040ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004114:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	43db      	mvns	r3, r3
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4013      	ands	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	43db      	mvns	r3, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4013      	ands	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	601a      	str	r2, [r3, #0]
=======
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 80e0 	beq.w	8004404 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004244:	4b2f      	ldr	r3, [pc, #188]	@ (8004304 <HAL_GPIO_Init+0x238>)
 8004246:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800424a:	4a2e      	ldr	r2, [pc, #184]	@ (8004304 <HAL_GPIO_Init+0x238>)
 800424c:	f043 0302 	orr.w	r3, r3, #2
 8004250:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004254:	4b2b      	ldr	r3, [pc, #172]	@ (8004304 <HAL_GPIO_Init+0x238>)
 8004256:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004262:	4a29      	ldr	r2, [pc, #164]	@ (8004308 <HAL_GPIO_Init+0x23c>)
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	089b      	lsrs	r3, r3, #2
 8004268:	3302      	adds	r3, #2
 800426a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800426e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	220f      	movs	r2, #15
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43db      	mvns	r3, r3
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	4013      	ands	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a20      	ldr	r2, [pc, #128]	@ (800430c <HAL_GPIO_Init+0x240>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d052      	beq.n	8004334 <HAL_GPIO_Init+0x268>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a1f      	ldr	r2, [pc, #124]	@ (8004310 <HAL_GPIO_Init+0x244>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d031      	beq.n	80042fa <HAL_GPIO_Init+0x22e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a1e      	ldr	r2, [pc, #120]	@ (8004314 <HAL_GPIO_Init+0x248>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d02b      	beq.n	80042f6 <HAL_GPIO_Init+0x22a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004318 <HAL_GPIO_Init+0x24c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d025      	beq.n	80042f2 <HAL_GPIO_Init+0x226>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a1c      	ldr	r2, [pc, #112]	@ (800431c <HAL_GPIO_Init+0x250>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d01f      	beq.n	80042ee <HAL_GPIO_Init+0x222>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004320 <HAL_GPIO_Init+0x254>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d019      	beq.n	80042ea <HAL_GPIO_Init+0x21e>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a1a      	ldr	r2, [pc, #104]	@ (8004324 <HAL_GPIO_Init+0x258>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d013      	beq.n	80042e6 <HAL_GPIO_Init+0x21a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a19      	ldr	r2, [pc, #100]	@ (8004328 <HAL_GPIO_Init+0x25c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00d      	beq.n	80042e2 <HAL_GPIO_Init+0x216>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a18      	ldr	r2, [pc, #96]	@ (800432c <HAL_GPIO_Init+0x260>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d007      	beq.n	80042de <HAL_GPIO_Init+0x212>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a17      	ldr	r2, [pc, #92]	@ (8004330 <HAL_GPIO_Init+0x264>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d101      	bne.n	80042da <HAL_GPIO_Init+0x20e>
 80042d6:	2309      	movs	r3, #9
 80042d8:	e02d      	b.n	8004336 <HAL_GPIO_Init+0x26a>
 80042da:	230a      	movs	r3, #10
 80042dc:	e02b      	b.n	8004336 <HAL_GPIO_Init+0x26a>
 80042de:	2308      	movs	r3, #8
 80042e0:	e029      	b.n	8004336 <HAL_GPIO_Init+0x26a>
 80042e2:	2307      	movs	r3, #7
 80042e4:	e027      	b.n	8004336 <HAL_GPIO_Init+0x26a>
 80042e6:	2306      	movs	r3, #6
 80042e8:	e025      	b.n	8004336 <HAL_GPIO_Init+0x26a>
 80042ea:	2305      	movs	r3, #5
 80042ec:	e023      	b.n	8004336 <HAL_GPIO_Init+0x26a>
 80042ee:	2304      	movs	r3, #4
 80042f0:	e021      	b.n	8004336 <HAL_GPIO_Init+0x26a>
 80042f2:	2303      	movs	r3, #3
 80042f4:	e01f      	b.n	8004336 <HAL_GPIO_Init+0x26a>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e01d      	b.n	8004336 <HAL_GPIO_Init+0x26a>
 80042fa:	2301      	movs	r3, #1
 80042fc:	e01b      	b.n	8004336 <HAL_GPIO_Init+0x26a>
 80042fe:	bf00      	nop
 8004300:	58000080 	.word	0x58000080
 8004304:	58024400 	.word	0x58024400
 8004308:	58000400 	.word	0x58000400
 800430c:	58020000 	.word	0x58020000
 8004310:	58020400 	.word	0x58020400
 8004314:	58020800 	.word	0x58020800
 8004318:	58020c00 	.word	0x58020c00
 800431c:	58021000 	.word	0x58021000
 8004320:	58021400 	.word	0x58021400
 8004324:	58021800 	.word	0x58021800
 8004328:	58021c00 	.word	0x58021c00
 800432c:	58022000 	.word	0x58022000
 8004330:	58022400 	.word	0x58022400
 8004334:	2300      	movs	r3, #0
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	f002 0203 	and.w	r2, r2, #3
 800433c:	0092      	lsls	r2, r2, #2
 800433e:	4093      	lsls	r3, r2
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	4313      	orrs	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004346:	4938      	ldr	r1, [pc, #224]	@ (8004428 <HAL_GPIO_Init+0x35c>)
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	089b      	lsrs	r3, r3, #2
 800434c:	3302      	adds	r3, #2
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	43db      	mvns	r3, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	4013      	ands	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800437a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004382:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	43db      	mvns	r3, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4013      	ands	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80043a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	43db      	mvns	r3, r3
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4013      	ands	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	43db      	mvns	r3, r3
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	4013      	ands	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	601a      	str	r2, [r3, #0]
>>>>>>> main
      }
    }

    position++;
<<<<<<< HEAD
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	3301      	adds	r3, #1
 8004174:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	fa22 f303 	lsr.w	r3, r2, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	f47f ae63 	bne.w	8003e4c <HAL_GPIO_Init+0x14>
  }
}
 8004186:	bf00      	nop
 8004188:	bf00      	nop
 800418a:	3724      	adds	r7, #36	@ 0x24
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	58000400 	.word	0x58000400

08004198 <HAL_GPIO_WritePin>:
=======
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	3301      	adds	r3, #1
 8004408:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	fa22 f303 	lsr.w	r3, r2, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	f47f ae63 	bne.w	80040e0 <HAL_GPIO_Init+0x14>
  }
}
 800441a:	bf00      	nop
 800441c:	bf00      	nop
 800441e:	3724      	adds	r7, #36	@ 0x24
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	58000400 	.word	0x58000400

0800442c <HAL_GPIO_WritePin>:
>>>>>>> main
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	807b      	strh	r3, [r7, #2]
 80041a4:	4613      	mov	r3, r2
 80041a6:	707b      	strb	r3, [r7, #1]
=======
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	807b      	strh	r3, [r7, #2]
 8004438:	4613      	mov	r3, r2
 800443a:	707b      	strb	r3, [r7, #1]
>>>>>>> main
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 80041a8:	787b      	ldrb	r3, [r7, #1]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041ae:	887a      	ldrh	r2, [r7, #2]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	619a      	str	r2, [r3, #24]
=======
 800443c:	787b      	ldrb	r3, [r7, #1]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004442:	887a      	ldrh	r2, [r7, #2]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	619a      	str	r2, [r3, #24]
>>>>>>> main
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
<<<<<<< HEAD
 80041b4:	e003      	b.n	80041be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80041b6:	887b      	ldrh	r3, [r7, #2]
 80041b8:	041a      	lsls	r2, r3, #16
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	619a      	str	r2, [r3, #24]
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
	...

080041cc <HAL_HRTIM_Init>:
=======
 8004448:	e003      	b.n	8004452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800444a:	887b      	ldrh	r3, [r7, #2]
 800444c:	041a      	lsls	r2, r3, #16
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	619a      	str	r2, [r3, #24]
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
	...

08004460 <HAL_HRTIM_Init>:
>>>>>>> main
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
<<<<<<< HEAD
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
=======
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
>>>>>>> main
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
<<<<<<< HEAD
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e0bd      	b.n	800435a <HAL_HRTIM_Init+0x18e>
=======
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e0bd      	b.n	80045ee <HAL_HRTIM_Init+0x18e>
>>>>>>> main
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
<<<<<<< HEAD
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2202      	movs	r2, #2
 80041e2:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d031      	beq.n	8004286 <HAL_HRTIM_Init+0xba>
=======
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2202      	movs	r2, #2
 8004476:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d031      	beq.n	800451a <HAL_HRTIM_Init+0xba>
>>>>>>> main
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
<<<<<<< HEAD
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a4f      	ldr	r2, [pc, #316]	@ (8004364 <HAL_HRTIM_Init+0x198>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d10e      	bne.n	800424a <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 800422c:	4b4e      	ldr	r3, [pc, #312]	@ (8004368 <HAL_HRTIM_Init+0x19c>)
 800422e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004232:	4a4d      	ldr	r2, [pc, #308]	@ (8004368 <HAL_HRTIM_Init+0x19c>)
 8004234:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004238:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800423c:	4b4a      	ldr	r3, [pc, #296]	@ (8004368 <HAL_HRTIM_Init+0x19c>)
 800423e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004242:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004258:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4313      	orrs	r3, r2
 8004266:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800426e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7fe fdd2 	bl	8002e30 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d012      	beq.n	80042be <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042a6:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	601a      	str	r2, [r3, #0]
=======
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a4f      	ldr	r2, [pc, #316]	@ (80045f8 <HAL_HRTIM_Init+0x198>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d10e      	bne.n	80044de <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80044c0:	4b4e      	ldr	r3, [pc, #312]	@ (80045fc <HAL_HRTIM_Init+0x19c>)
 80044c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044c6:	4a4d      	ldr	r2, [pc, #308]	@ (80045fc <HAL_HRTIM_Init+0x19c>)
 80044c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80044cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80044d0:	4b4a      	ldr	r3, [pc, #296]	@ (80045fc <HAL_HRTIM_Init+0x19c>)
 80044d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80044ec:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004502:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4313      	orrs	r3, r2
 8004510:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fd ff96 	bl	800244c <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d012      	beq.n	8004552 <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800453a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	601a      	str	r2, [r3, #0]
>>>>>>> main
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
<<<<<<< HEAD
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80042ce:	2300      	movs	r3, #0
 80042d0:	75fb      	strb	r3, [r7, #23]
 80042d2:	e03e      	b.n	8004352 <HAL_HRTIM_Init+0x186>
=======
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8004562:	2300      	movs	r3, #0
 8004564:	75fb      	strb	r3, [r7, #23]
 8004566:	e03e      	b.n	80045e6 <HAL_HRTIM_Init+0x186>
>>>>>>> main
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
<<<<<<< HEAD
 80042d4:	7dfa      	ldrb	r2, [r7, #23]
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	3318      	adds	r3, #24
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80042e8:	7dfa      	ldrb	r2, [r7, #23]
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	1a9b      	subs	r3, r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	331c      	adds	r3, #28
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80042fc:	7dfa      	ldrb	r2, [r7, #23]
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	1a9b      	subs	r3, r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	3320      	adds	r3, #32
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8004310:	7dfa      	ldrb	r2, [r7, #23]
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	4613      	mov	r3, r2
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	1a9b      	subs	r3, r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	3324      	adds	r3, #36	@ 0x24
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8004324:	7dfa      	ldrb	r2, [r7, #23]
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	1a9b      	subs	r3, r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	3328      	adds	r3, #40	@ 0x28
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8004338:	7dfa      	ldrb	r2, [r7, #23]
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	1a9b      	subs	r3, r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	3330      	adds	r3, #48	@ 0x30
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800434c:	7dfb      	ldrb	r3, [r7, #23]
 800434e:	3301      	adds	r3, #1
 8004350:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8004352:	7dfb      	ldrb	r3, [r7, #23]
 8004354:	2b05      	cmp	r3, #5
 8004356:	d9bd      	bls.n	80042d4 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40017400 	.word	0x40017400
 8004368:	58024400 	.word	0x58024400

0800436c <HAL_HRTIM_TimeBaseConfig>:
=======
 8004568:	7dfa      	ldrb	r2, [r7, #23]
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	4613      	mov	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	3318      	adds	r3, #24
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 800457c:	7dfa      	ldrb	r2, [r7, #23]
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	4613      	mov	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	331c      	adds	r3, #28
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8004590:	7dfa      	ldrb	r2, [r7, #23]
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	4613      	mov	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	1a9b      	subs	r3, r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	3320      	adds	r3, #32
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80045a4:	7dfa      	ldrb	r2, [r7, #23]
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	3324      	adds	r3, #36	@ 0x24
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80045b8:	7dfa      	ldrb	r2, [r7, #23]
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	4613      	mov	r3, r2
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	1a9b      	subs	r3, r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	440b      	add	r3, r1
 80045c6:	3328      	adds	r3, #40	@ 0x28
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80045cc:	7dfa      	ldrb	r2, [r7, #23]
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	4613      	mov	r3, r2
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	1a9b      	subs	r3, r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	440b      	add	r3, r1
 80045da:	3330      	adds	r3, #48	@ 0x30
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
 80045e2:	3301      	adds	r3, #1
 80045e4:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 80045e6:	7dfb      	ldrb	r3, [r7, #23]
 80045e8:	2b05      	cmp	r3, #5
 80045ea:	d9bd      	bls.n	8004568 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40017400 	.word	0x40017400
 80045fc:	58024400 	.word	0x58024400

08004600 <HAL_HRTIM_TimeBaseConfig>:
>>>>>>> main
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
<<<<<<< HEAD
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
=======
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
>>>>>>> main
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
<<<<<<< HEAD
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d101      	bne.n	8004388 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8004384:	2302      	movs	r3, #2
 8004386:	e015      	b.n	80043b4 <HAL_HRTIM_TimeBaseConfig+0x48>
=======
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d101      	bne.n	800461c <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8004618:	2302      	movs	r3, #2
 800461a:	e015      	b.n	8004648 <HAL_HRTIM_TimeBaseConfig+0x48>
>>>>>>> main
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
<<<<<<< HEAD
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b05      	cmp	r3, #5
 8004394:	d104      	bne.n	80043a0 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 fa88 	bl	80048ae <HRTIM_MasterBase_Config>
 800439e:	e004      	b.n	80043aa <HAL_HRTIM_TimeBaseConfig+0x3e>
=======
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b05      	cmp	r3, #5
 8004628:	d104      	bne.n	8004634 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 fa88 	bl	8004b42 <HRTIM_MasterBase_Config>
 8004632:	e004      	b.n	800463e <HAL_HRTIM_TimeBaseConfig+0x3e>
>>>>>>> main
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
<<<<<<< HEAD
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	68b9      	ldr	r1, [r7, #8]
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 fab1 	bl	800490c <HRTIM_TimingUnitBase_Config>
=======
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	68b9      	ldr	r1, [r7, #8]
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 fab1 	bl	8004ba0 <HRTIM_TimingUnitBase_Config>
>>>>>>> main
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
<<<<<<< HEAD
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_HRTIM_EventConfig>:
=======
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_HRTIM_EventConfig>:
>>>>>>> main
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Event,
                                        const HRTIM_EventCfgTypeDef* pEventCfg)
{
<<<<<<< HEAD
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
=======
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
>>>>>>> main
  assert_param(IS_HRTIM_EVENTPOLARITY(pEventCfg->Sensitivity, pEventCfg->Polarity));
  assert_param(IS_HRTIM_EVENTSENSITIVITY(pEventCfg->Sensitivity));
  assert_param(IS_HRTIM_EVENTFASTMODE(Event, pEventCfg->FastMode));
  assert_param(IS_HRTIM_EVENTFILTER(Event, pEventCfg->Filter));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
<<<<<<< HEAD
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d101      	bne.n	80043d8 <HAL_HRTIM_EventConfig+0x1c>
  {
     return HAL_BUSY;
 80043d4:	2302      	movs	r3, #2
 80043d6:	e01c      	b.n	8004412 <HAL_HRTIM_EventConfig+0x56>
=======
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d101      	bne.n	800466c <HAL_HRTIM_EventConfig+0x1c>
  {
     return HAL_BUSY;
 8004668:	2302      	movs	r3, #2
 800466a:	e01c      	b.n	80046a6 <HAL_HRTIM_EventConfig+0x56>
>>>>>>> main
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
<<<<<<< HEAD
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <HAL_HRTIM_EventConfig+0x2a>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e015      	b.n	8004412 <HAL_HRTIM_EventConfig+0x56>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2202      	movs	r2, #2
 80043f2:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the event channel */
  HRTIM_EventConfig(hhrtim, Event, pEventCfg);
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 fd44 	bl	8004e88 <HRTIM_EventConfig>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_HRTIM_EventPrescalerConfig>:
=======
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_HRTIM_EventConfig+0x2a>
 8004676:	2302      	movs	r3, #2
 8004678:	e015      	b.n	80046a6 <HAL_HRTIM_EventConfig+0x56>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2202      	movs	r2, #2
 8004686:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the event channel */
  HRTIM_EventConfig(hhrtim, Event, pEventCfg);
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 fd44 	bl	800511c <HRTIM_EventConfig>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_HRTIM_EventPrescalerConfig>:
>>>>>>> main
  * @note This function must be called before starting the timer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
<<<<<<< HEAD
 800441a:	b480      	push	{r7}
 800441c:	b083      	sub	sp, #12
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	6039      	str	r1, [r7, #0]
=======
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	6039      	str	r1, [r7, #0]
>>>>>>> main
  /* Check parameters */
  assert_param(IS_HRTIM_EVENTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
<<<<<<< HEAD
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d101      	bne.n	8004434 <HAL_HRTIM_EventPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 8004430:	2302      	movs	r3, #2
 8004432:	e025      	b.n	8004480 <HAL_HRTIM_EventPrescalerConfig+0x66>
=======
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d101      	bne.n	80046c8 <HAL_HRTIM_EventPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 80046c4:	2302      	movs	r3, #2
 80046c6:	e025      	b.n	8004714 <HAL_HRTIM_EventPrescalerConfig+0x66>
>>>>>>> main
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
<<<<<<< HEAD
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_HRTIM_EventPrescalerConfig+0x28>
 800443e:	2302      	movs	r3, #2
 8004440:	e01e      	b.n	8004480 <HAL_HRTIM_EventPrescalerConfig+0x66>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2202      	movs	r2, #2
 800444e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 800445a:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_HRTIM_WaveformTimerConfig>:
=======
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d101      	bne.n	80046d6 <HAL_HRTIM_EventPrescalerConfig+0x28>
 80046d2:	2302      	movs	r3, #2
 80046d4:	e01e      	b.n	8004714 <HAL_HRTIM_EventPrescalerConfig+0x66>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2202      	movs	r2, #2
 80046e2:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 80046ee:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_HRTIM_WaveformTimerConfig>:
>>>>>>> main
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
<<<<<<< HEAD
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
=======
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
>>>>>>> main
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
<<<<<<< HEAD
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d101      	bne.n	80044a8 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80044a4:	2302      	movs	r3, #2
 80044a6:	e05f      	b.n	8004568 <HAL_HRTIM_WaveformTimerConfig+0xdc>
=======
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d101      	bne.n	800473c <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8004738:	2302      	movs	r3, #2
 800473a:	e05f      	b.n	80047fc <HAL_HRTIM_WaveformTimerConfig+0xdc>
>>>>>>> main
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
<<<<<<< HEAD
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e058      	b.n	8004568 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2202      	movs	r2, #2
 80044c2:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b05      	cmp	r3, #5
 80044ca:	d104      	bne.n	80044d6 <HAL_HRTIM_WaveformTimerConfig+0x4a>
=======
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004742:	2b01      	cmp	r3, #1
 8004744:	d101      	bne.n	800474a <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8004746:	2302      	movs	r3, #2
 8004748:	e058      	b.n	80047fc <HAL_HRTIM_WaveformTimerConfig+0xdc>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2202      	movs	r2, #2
 8004756:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b05      	cmp	r3, #5
 800475e:	d104      	bne.n	800476a <HAL_HRTIM_WaveformTimerConfig+0x4a>
>>>>>>> main
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
<<<<<<< HEAD
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 fa5c 	bl	800498c <HRTIM_MasterWaveform_Config>
 80044d4:	e004      	b.n	80044e0 <HAL_HRTIM_WaveformTimerConfig+0x54>
=======
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 fa5c 	bl	8004c20 <HRTIM_MasterWaveform_Config>
 8004768:	e004      	b.n	8004774 <HAL_HRTIM_WaveformTimerConfig+0x54>
>>>>>>> main
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
<<<<<<< HEAD
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	68b9      	ldr	r1, [r7, #8]
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 fabc 	bl	8004a58 <HRTIM_TimingUnitWaveform_Config>
=======
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 fabc 	bl	8004cec <HRTIM_TimingUnitWaveform_Config>
>>>>>>> main
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
<<<<<<< HEAD
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6819      	ldr	r1, [r3, #0]
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	4613      	mov	r3, r2
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4403      	add	r3, r0
 80044f2:	3320      	adds	r3, #32
 80044f4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6859      	ldr	r1, [r3, #4]
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	4613      	mov	r3, r2
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	1a9b      	subs	r3, r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4403      	add	r3, r0
 8004508:	3324      	adds	r3, #36	@ 0x24
 800450a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6899      	ldr	r1, [r3, #8]
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	4613      	mov	r3, r2
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	1a9b      	subs	r3, r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4403      	add	r3, r0
 800451e:	3328      	adds	r3, #40	@ 0x28
 8004520:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68d9      	ldr	r1, [r3, #12]
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	4613      	mov	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	1a9b      	subs	r3, r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4403      	add	r3, r0
 8004534:	332c      	adds	r3, #44	@ 0x2c
 8004536:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6919      	ldr	r1, [r3, #16]
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	4613      	mov	r3, r2
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	1a9b      	subs	r3, r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4403      	add	r3, r0
 800454a:	3330      	adds	r3, #48	@ 0x30
 800454c:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fec1 	bl	80052d8 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_HRTIM_WaveformCompareConfig>:
=======
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6819      	ldr	r1, [r3, #0]
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	4613      	mov	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4403      	add	r3, r0
 8004786:	3320      	adds	r3, #32
 8004788:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6859      	ldr	r1, [r3, #4]
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	4613      	mov	r3, r2
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	1a9b      	subs	r3, r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4403      	add	r3, r0
 800479c:	3324      	adds	r3, #36	@ 0x24
 800479e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6899      	ldr	r1, [r3, #8]
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	4613      	mov	r3, r2
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	1a9b      	subs	r3, r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4403      	add	r3, r0
 80047b2:	3328      	adds	r3, #40	@ 0x28
 80047b4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68d9      	ldr	r1, [r3, #12]
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	4613      	mov	r3, r2
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4403      	add	r3, r0
 80047c8:	332c      	adds	r3, #44	@ 0x2c
 80047ca:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6919      	ldr	r1, [r3, #16]
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	4613      	mov	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4403      	add	r3, r0
 80047de:	3330      	adds	r3, #48	@ 0x30
 80047e0:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80047e2:	68b9      	ldr	r1, [r7, #8]
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 fec1 	bl	800556c <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_HRTIM_WaveformCompareConfig>:
>>>>>>> main
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
<<<<<<< HEAD
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	603b      	str	r3, [r7, #0]
=======
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
 8004810:	603b      	str	r3, [r7, #0]
>>>>>>> main
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
<<<<<<< HEAD
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d101      	bne.n	800458e <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 800458a:	2302      	movs	r3, #2
 800458c:	e157      	b.n	800483e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
=======
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d101      	bne.n	8004822 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 800481e:	2302      	movs	r3, #2
 8004820:	e157      	b.n	8004ad2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
>>>>>>> main
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
<<<<<<< HEAD
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004594:	2b01      	cmp	r3, #1
 8004596:	d101      	bne.n	800459c <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8004598:	2302      	movs	r3, #2
 800459a:	e150      	b.n	800483e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b05      	cmp	r3, #5
 80045b0:	d140      	bne.n	8004634 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	2b07      	cmp	r3, #7
 80045b8:	d82a      	bhi.n	8004610 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 80045ba:	a201      	add	r2, pc, #4	@ (adr r2, 80045c0 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 80045bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c0:	080045e1 	.word	0x080045e1
 80045c4:	080045ed 	.word	0x080045ed
 80045c8:	08004611 	.word	0x08004611
 80045cc:	080045f9 	.word	0x080045f9
 80045d0:	08004611 	.word	0x08004611
 80045d4:	08004611 	.word	0x08004611
 80045d8:	08004611 	.word	0x08004611
 80045dc:	08004605 	.word	0x08004605
=======
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 800482c:	2302      	movs	r3, #2
 800482e:	e150      	b.n	8004ad2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b05      	cmp	r3, #5
 8004844:	d140      	bne.n	80048c8 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3b01      	subs	r3, #1
 800484a:	2b07      	cmp	r3, #7
 800484c:	d82a      	bhi.n	80048a4 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 800484e:	a201      	add	r2, pc, #4	@ (adr r2, 8004854 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8004850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004854:	08004875 	.word	0x08004875
 8004858:	08004881 	.word	0x08004881
 800485c:	080048a5 	.word	0x080048a5
 8004860:	0800488d 	.word	0x0800488d
 8004864:	080048a5 	.word	0x080048a5
 8004868:	080048a5 	.word	0x080048a5
 800486c:	080048a5 	.word	0x080048a5
 8004870:	08004899 	.word	0x08004899
>>>>>>> main
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
<<<<<<< HEAD
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	6812      	ldr	r2, [r2, #0]
 80045e8:	61da      	str	r2, [r3, #28]
        break;
 80045ea:	e01a      	b.n	8004622 <HAL_HRTIM_WaveformCompareConfig+0xb2>
=======
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	61da      	str	r2, [r3, #28]
        break;
 800487e:	e01a      	b.n	80048b6 <HAL_HRTIM_WaveformCompareConfig+0xb2>
>>>>>>> main
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
<<<<<<< HEAD
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	6812      	ldr	r2, [r2, #0]
 80045f4:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 80045f6:	e014      	b.n	8004622 <HAL_HRTIM_WaveformCompareConfig+0xb2>
=======
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	6812      	ldr	r2, [r2, #0]
 8004888:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 800488a:	e014      	b.n	80048b6 <HAL_HRTIM_WaveformCompareConfig+0xb2>
>>>>>>> main
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
<<<<<<< HEAD
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 8004602:	e00e      	b.n	8004622 <HAL_HRTIM_WaveformCompareConfig+0xb2>
=======
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	6812      	ldr	r2, [r2, #0]
 8004894:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 8004896:	e00e      	b.n	80048b6 <HAL_HRTIM_WaveformCompareConfig+0xb2>
>>>>>>> main
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
<<<<<<< HEAD
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	6812      	ldr	r2, [r2, #0]
 800460c:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 800460e:	e008      	b.n	8004622 <HAL_HRTIM_WaveformCompareConfig+0xb2>
=======
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	6812      	ldr	r2, [r2, #0]
 80048a0:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 80048a2:	e008      	b.n	80048b6 <HAL_HRTIM_WaveformCompareConfig+0xb2>
>>>>>>> main
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
<<<<<<< HEAD
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2207      	movs	r2, #7
 8004614:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

        break;
 8004620:	bf00      	nop
=======
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2207      	movs	r2, #7
 80048a8:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

        break;
 80048b4:	bf00      	nop
>>>>>>> main
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
<<<<<<< HEAD
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b07      	cmp	r3, #7
 800462c:	f040 80fe 	bne.w	800482c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e104      	b.n	800483e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
=======
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b07      	cmp	r3, #7
 80048c0:	f040 80fe 	bne.w	8004ac0 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e104      	b.n	8004ad2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
>>>>>>> main
    }

  }
  else
  {
    switch (CompareUnit)
<<<<<<< HEAD
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3b01      	subs	r3, #1
 8004638:	2b07      	cmp	r3, #7
 800463a:	f200 80e3 	bhi.w	8004804 <HAL_HRTIM_WaveformCompareConfig+0x294>
 800463e:	a201      	add	r2, pc, #4	@ (adr r2, 8004644 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8004640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004644:	08004665 	.word	0x08004665
 8004648:	08004679 	.word	0x08004679
 800464c:	08004805 	.word	0x08004805
 8004650:	08004735 	.word	0x08004735
 8004654:	08004805 	.word	0x08004805
 8004658:	08004805 	.word	0x08004805
 800465c:	08004805 	.word	0x08004805
 8004660:	08004749 	.word	0x08004749
=======
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3b01      	subs	r3, #1
 80048cc:	2b07      	cmp	r3, #7
 80048ce:	f200 80e3 	bhi.w	8004a98 <HAL_HRTIM_WaveformCompareConfig+0x294>
 80048d2:	a201      	add	r2, pc, #4	@ (adr r2, 80048d8 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80048d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d8:	080048f9 	.word	0x080048f9
 80048dc:	0800490d 	.word	0x0800490d
 80048e0:	08004a99 	.word	0x08004a99
 80048e4:	080049c9 	.word	0x080049c9
 80048e8:	08004a99 	.word	0x08004a99
 80048ec:	08004a99 	.word	0x08004a99
 80048f0:	08004a99 	.word	0x08004a99
 80048f4:	080049dd 	.word	0x080049dd
>>>>>>> main
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
<<<<<<< HEAD
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6819      	ldr	r1, [r3, #0]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	01db      	lsls	r3, r3, #7
 8004670:	440b      	add	r3, r1
 8004672:	339c      	adds	r3, #156	@ 0x9c
 8004674:	601a      	str	r2, [r3, #0]
        break;
 8004676:	e0d1      	b.n	800481c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
=======
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6819      	ldr	r1, [r3, #0]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	01db      	lsls	r3, r3, #7
 8004904:	440b      	add	r3, r1
 8004906:	339c      	adds	r3, #156	@ 0x9c
 8004908:	601a      	str	r2, [r3, #0]
        break;
 800490a:	e0d1      	b.n	8004ab0 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
>>>>>>> main
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
<<<<<<< HEAD
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6819      	ldr	r1, [r3, #0]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	01db      	lsls	r3, r3, #7
 8004684:	440b      	add	r3, r1
 8004686:	33a4      	adds	r3, #164	@ 0xa4
 8004688:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d03f      	beq.n	8004712 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
=======
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6819      	ldr	r1, [r3, #0]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	01db      	lsls	r3, r3, #7
 8004918:	440b      	add	r3, r1
 800491a:	33a4      	adds	r3, #164	@ 0xa4
 800491c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d03f      	beq.n	80049a6 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
>>>>>>> main
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
<<<<<<< HEAD
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	3301      	adds	r3, #1
 800469a:	01db      	lsls	r3, r3, #7
 800469c:	4413      	add	r3, r2
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	6811      	ldr	r1, [r2, #0]
 80046a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	3301      	adds	r3, #1
 80046ac:	01db      	lsls	r3, r3, #7
 80046ae:	440b      	add	r3, r1
 80046b0:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	3301      	adds	r3, #1
 80046ba:	01db      	lsls	r3, r3, #7
 80046bc:	4413      	add	r3, r2
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	68f9      	ldr	r1, [r7, #12]
 80046c6:	6809      	ldr	r1, [r1, #0]
 80046c8:	431a      	orrs	r2, r3
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	3301      	adds	r3, #1
 80046ce:	01db      	lsls	r3, r3, #7
 80046d0:	440b      	add	r3, r1
 80046d2:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046dc:	d109      	bne.n	80046f2 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6819      	ldr	r1, [r3, #0]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	01db      	lsls	r3, r3, #7
 80046ea:	440b      	add	r3, r1
 80046ec:	339c      	adds	r3, #156	@ 0x9c
 80046ee:	601a      	str	r2, [r3, #0]
=======
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	3301      	adds	r3, #1
 800492e:	01db      	lsls	r3, r3, #7
 8004930:	4413      	add	r3, r2
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	6811      	ldr	r1, [r2, #0]
 8004938:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	3301      	adds	r3, #1
 8004940:	01db      	lsls	r3, r3, #7
 8004942:	440b      	add	r3, r1
 8004944:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	3301      	adds	r3, #1
 800494e:	01db      	lsls	r3, r3, #7
 8004950:	4413      	add	r3, r2
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	68f9      	ldr	r1, [r7, #12]
 800495a:	6809      	ldr	r1, [r1, #0]
 800495c:	431a      	orrs	r2, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	3301      	adds	r3, #1
 8004962:	01db      	lsls	r3, r3, #7
 8004964:	440b      	add	r3, r1
 8004966:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004970:	d109      	bne.n	8004986 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6819      	ldr	r1, [r3, #0]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	01db      	lsls	r3, r3, #7
 800497e:	440b      	add	r3, r1
 8004980:	339c      	adds	r3, #156	@ 0x9c
 8004982:	601a      	str	r2, [r3, #0]
>>>>>>> main
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
<<<<<<< HEAD
 80046f0:	e091      	b.n	8004816 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80046fa:	f040 808c 	bne.w	8004816 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6819      	ldr	r1, [r3, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	01db      	lsls	r3, r3, #7
 800470a:	440b      	add	r3, r1
 800470c:	33a8      	adds	r3, #168	@ 0xa8
 800470e:	601a      	str	r2, [r3, #0]
         break;
 8004710:	e081      	b.n	8004816 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	3301      	adds	r3, #1
 800471a:	01db      	lsls	r3, r3, #7
 800471c:	4413      	add	r3, r2
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	6811      	ldr	r1, [r2, #0]
 8004724:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	3301      	adds	r3, #1
 800472c:	01db      	lsls	r3, r3, #7
 800472e:	440b      	add	r3, r1
 8004730:	601a      	str	r2, [r3, #0]
         break;
 8004732:	e070      	b.n	8004816 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
=======
 8004984:	e091      	b.n	8004aaa <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800498e:	f040 808c 	bne.w	8004aaa <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6819      	ldr	r1, [r3, #0]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	01db      	lsls	r3, r3, #7
 800499e:	440b      	add	r3, r1
 80049a0:	33a8      	adds	r3, #168	@ 0xa8
 80049a2:	601a      	str	r2, [r3, #0]
         break;
 80049a4:	e081      	b.n	8004aaa <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	3301      	adds	r3, #1
 80049ae:	01db      	lsls	r3, r3, #7
 80049b0:	4413      	add	r3, r2
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	6811      	ldr	r1, [r2, #0]
 80049b8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	3301      	adds	r3, #1
 80049c0:	01db      	lsls	r3, r3, #7
 80049c2:	440b      	add	r3, r1
 80049c4:	601a      	str	r2, [r3, #0]
         break;
 80049c6:	e070      	b.n	8004aaa <HAL_HRTIM_WaveformCompareConfig+0x2a6>
>>>>>>> main
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
<<<<<<< HEAD
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6819      	ldr	r1, [r3, #0]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	01db      	lsls	r3, r3, #7
 8004740:	440b      	add	r3, r1
 8004742:	33a8      	adds	r3, #168	@ 0xa8
 8004744:	601a      	str	r2, [r3, #0]
        break;
 8004746:	e069      	b.n	800481c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
=======
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6819      	ldr	r1, [r3, #0]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	01db      	lsls	r3, r3, #7
 80049d4:	440b      	add	r3, r1
 80049d6:	33a8      	adds	r3, #168	@ 0xa8
 80049d8:	601a      	str	r2, [r3, #0]
        break;
 80049da:	e069      	b.n	8004ab0 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
>>>>>>> main
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
<<<<<<< HEAD
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6819      	ldr	r1, [r3, #0]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	01db      	lsls	r3, r3, #7
 8004754:	440b      	add	r3, r1
 8004756:	33ac      	adds	r3, #172	@ 0xac
 8004758:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d03f      	beq.n	80047e2 <HAL_HRTIM_WaveformCompareConfig+0x272>
=======
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6819      	ldr	r1, [r3, #0]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	01db      	lsls	r3, r3, #7
 80049e8:	440b      	add	r3, r1
 80049ea:	33ac      	adds	r3, #172	@ 0xac
 80049ec:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d03f      	beq.n	8004a76 <HAL_HRTIM_WaveformCompareConfig+0x272>
>>>>>>> main
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
<<<<<<< HEAD
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	3301      	adds	r3, #1
 800476a:	01db      	lsls	r3, r3, #7
 800476c:	4413      	add	r3, r2
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	6811      	ldr	r1, [r2, #0]
 8004774:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	3301      	adds	r3, #1
 800477c:	01db      	lsls	r3, r3, #7
 800477e:	440b      	add	r3, r1
 8004780:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	3301      	adds	r3, #1
 800478a:	01db      	lsls	r3, r3, #7
 800478c:	4413      	add	r3, r2
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	68f9      	ldr	r1, [r7, #12]
 8004798:	6809      	ldr	r1, [r1, #0]
 800479a:	431a      	orrs	r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	3301      	adds	r3, #1
 80047a0:	01db      	lsls	r3, r3, #7
 80047a2:	440b      	add	r3, r1
 80047a4:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047ae:	d109      	bne.n	80047c4 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6819      	ldr	r1, [r3, #0]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	01db      	lsls	r3, r3, #7
 80047bc:	440b      	add	r3, r1
 80047be:	339c      	adds	r3, #156	@ 0x9c
 80047c0:	601a      	str	r2, [r3, #0]
=======
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	3301      	adds	r3, #1
 80049fe:	01db      	lsls	r3, r3, #7
 8004a00:	4413      	add	r3, r2
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	6811      	ldr	r1, [r2, #0]
 8004a08:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	01db      	lsls	r3, r3, #7
 8004a12:	440b      	add	r3, r1
 8004a14:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	01db      	lsls	r3, r3, #7
 8004a20:	4413      	add	r3, r2
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	68f9      	ldr	r1, [r7, #12]
 8004a2c:	6809      	ldr	r1, [r1, #0]
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	3301      	adds	r3, #1
 8004a34:	01db      	lsls	r3, r3, #7
 8004a36:	440b      	add	r3, r1
 8004a38:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a42:	d109      	bne.n	8004a58 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6819      	ldr	r1, [r3, #0]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	01db      	lsls	r3, r3, #7
 8004a50:	440b      	add	r3, r1
 8004a52:	339c      	adds	r3, #156	@ 0x9c
 8004a54:	601a      	str	r2, [r3, #0]
>>>>>>> main
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
<<<<<<< HEAD
 80047c2:	e02a      	b.n	800481a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047cc:	d125      	bne.n	800481a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6819      	ldr	r1, [r3, #0]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	01db      	lsls	r3, r3, #7
 80047da:	440b      	add	r3, r1
 80047dc:	33a8      	adds	r3, #168	@ 0xa8
 80047de:	601a      	str	r2, [r3, #0]
         break;
 80047e0:	e01b      	b.n	800481a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	3301      	adds	r3, #1
 80047ea:	01db      	lsls	r3, r3, #7
 80047ec:	4413      	add	r3, r2
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	6811      	ldr	r1, [r2, #0]
 80047f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	3301      	adds	r3, #1
 80047fc:	01db      	lsls	r3, r3, #7
 80047fe:	440b      	add	r3, r1
 8004800:	601a      	str	r2, [r3, #0]
         break;
 8004802:	e00a      	b.n	800481a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
=======
 8004a56:	e02a      	b.n	8004aae <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a60:	d125      	bne.n	8004aae <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6819      	ldr	r1, [r3, #0]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	01db      	lsls	r3, r3, #7
 8004a6e:	440b      	add	r3, r1
 8004a70:	33a8      	adds	r3, #168	@ 0xa8
 8004a72:	601a      	str	r2, [r3, #0]
         break;
 8004a74:	e01b      	b.n	8004aae <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	01db      	lsls	r3, r3, #7
 8004a80:	4413      	add	r3, r2
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	6811      	ldr	r1, [r2, #0]
 8004a88:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	01db      	lsls	r3, r3, #7
 8004a92:	440b      	add	r3, r1
 8004a94:	601a      	str	r2, [r3, #0]
         break;
 8004a96:	e00a      	b.n	8004aae <HAL_HRTIM_WaveformCompareConfig+0x2aa>
>>>>>>> main
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
<<<<<<< HEAD
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2207      	movs	r2, #7
 8004808:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

      break;
 8004814:	e002      	b.n	800481c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8004816:	bf00      	nop
 8004818:	e000      	b.n	800481c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800481a:	bf00      	nop
=======
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2207      	movs	r2, #7
 8004a9c:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

      break;
 8004aa8:	e002      	b.n	8004ab0 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8004aaa:	bf00      	nop
 8004aac:	e000      	b.n	8004ab0 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8004aae:	bf00      	nop
>>>>>>> main
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
<<<<<<< HEAD
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b07      	cmp	r3, #7
 8004826:	d101      	bne.n	800482c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e008      	b.n	800483e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
=======
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b07      	cmp	r3, #7
 8004aba:	d101      	bne.n	8004ac0 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e008      	b.n	8004ad2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
>>>>>>> main
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
<<<<<<< HEAD
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop

0800484c <HAL_HRTIM_WaveformOutputConfig>:
=======
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop

08004ae0 <HAL_HRTIM_WaveformOutputConfig>:
>>>>>>> main
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
<<<<<<< HEAD
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
 8004858:	603b      	str	r3, [r7, #0]
=======
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]
>>>>>>> main
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
<<<<<<< HEAD
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d101      	bne.n	800486a <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8004866:	2302      	movs	r3, #2
 8004868:	e01d      	b.n	80048a6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
=======
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d101      	bne.n	8004afe <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8004afa:	2302      	movs	r3, #2
 8004afc:	e01d      	b.n	8004b3a <HAL_HRTIM_WaveformOutputConfig+0x5a>
>>>>>>> main
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
<<<<<<< HEAD
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8004874:	2302      	movs	r3, #2
 8004876:	e016      	b.n	80048a6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	68b9      	ldr	r1, [r7, #8]
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 fa22 	bl	8004cd8 <HRTIM_OutputConfig>
=======
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d101      	bne.n	8004b0c <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8004b08:	2302      	movs	r3, #2
 8004b0a:	e016      	b.n	8004b3a <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 fa22 	bl	8004f6c <HRTIM_OutputConfig>
>>>>>>> main
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
<<<<<<< HEAD
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HRTIM_MasterBase_Config>:
=======
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <HRTIM_MasterBase_Config>:
>>>>>>> main
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
<<<<<<< HEAD
 80048ae:	b480      	push	{r7}
 80048b0:	b085      	sub	sp, #20
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	6039      	str	r1, [r7, #0]
=======
 8004b42:	b480      	push	{r7}
 8004b44:	b085      	sub	sp, #20
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	6039      	str	r1, [r7, #0]
>>>>>>> main
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
<<<<<<< HEAD
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0307 	bic.w	r3, r3, #7
 80048c6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f023 0318 	bic.w	r3, r3, #24
 80048d8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	6812      	ldr	r2, [r2, #0]
 80048f4:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	6852      	ldr	r2, [r2, #4]
 80048fe:	619a      	str	r2, [r3, #24]
}
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HRTIM_TimingUnitBase_Config>:
=======
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0307 	bic.w	r3, r3, #7
 8004b5a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f023 0318 	bic.w	r3, r3, #24
 8004b6c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	6812      	ldr	r2, [r2, #0]
 8004b88:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	6852      	ldr	r2, [r2, #4]
 8004b92:	619a      	str	r2, [r3, #24]
}
 8004b94:	bf00      	nop
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HRTIM_TimingUnitBase_Config>:
>>>>>>> main
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
<<<<<<< HEAD
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
=======
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
>>>>>>> main
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
<<<<<<< HEAD
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	3301      	adds	r3, #1
 8004920:	01db      	lsls	r3, r3, #7
 8004922:	4413      	add	r3, r2
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f023 0307 	bic.w	r3, r3, #7
 800492e:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f023 0318 	bic.w	r3, r3, #24
 8004940:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4313      	orrs	r3, r2
 800494a:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	3301      	adds	r3, #1
 8004954:	01db      	lsls	r3, r3, #7
 8004956:	4413      	add	r3, r2
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6819      	ldr	r1, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	01db      	lsls	r3, r3, #7
 8004968:	440b      	add	r3, r1
 800496a:	3394      	adds	r3, #148	@ 0x94
 800496c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6819      	ldr	r1, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	01db      	lsls	r3, r3, #7
 800497a:	440b      	add	r3, r1
 800497c:	3398      	adds	r3, #152	@ 0x98
 800497e:	601a      	str	r2, [r3, #0]
}
 8004980:	bf00      	nop
 8004982:	371c      	adds	r7, #28
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HRTIM_MasterWaveform_Config>:
=======
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	01db      	lsls	r3, r3, #7
 8004bb6:	4413      	add	r3, r2
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f023 0307 	bic.w	r3, r3, #7
 8004bc2:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f023 0318 	bic.w	r3, r3, #24
 8004bd4:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	3301      	adds	r3, #1
 8004be8:	01db      	lsls	r3, r3, #7
 8004bea:	4413      	add	r3, r2
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6819      	ldr	r1, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	01db      	lsls	r3, r3, #7
 8004bfc:	440b      	add	r3, r1
 8004bfe:	3394      	adds	r3, #148	@ 0x94
 8004c00:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6819      	ldr	r1, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	01db      	lsls	r3, r3, #7
 8004c0e:	440b      	add	r3, r1
 8004c10:	3398      	adds	r3, #152	@ 0x98
 8004c12:	601a      	str	r2, [r3, #0]
}
 8004c14:	bf00      	nop
 8004c16:	371c      	adds	r7, #28
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HRTIM_MasterWaveform_Config>:
>>>>>>> main
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
<<<<<<< HEAD
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
=======
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
>>>>>>> main
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
<<<<<<< HEAD
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 80049a6:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0320 	bic.w	r3, r3, #32
 80049ae:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049c0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049d2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	69db      	ldr	r3, [r3, #28]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80049e4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80049f6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004a08:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004a1c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]
=======
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8004c3a:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0320 	bic.w	r3, r3, #32
 8004c42:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c54:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c66:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004c78:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]
>>>>>>> main

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004c8a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004c9c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004cb0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
<<<<<<< HEAD
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a2e:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8004a4c:	bf00      	nop
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HRTIM_TimingUnitWaveform_Config>:
=======
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cc2:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8004ce0:	bf00      	nop
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HRTIM_TimingUnitWaveform_Config>:
>>>>>>> main
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
<<<<<<< HEAD
 8004a58:	b480      	push	{r7}
 8004a5a:	b08b      	sub	sp, #44	@ 0x2c
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
=======
 8004cec:	b480      	push	{r7}
 8004cee:	b08b      	sub	sp, #44	@ 0x2c
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
>>>>>>> main
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
<<<<<<< HEAD
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	01db      	lsls	r3, r3, #7
 8004a6e:	4413      	add	r3, r2
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	6811      	ldr	r1, [r2, #0]
 8004a76:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	01db      	lsls	r3, r3, #7
 8004a80:	440b      	add	r3, r1
 8004a82:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	01db      	lsls	r3, r3, #7
 8004a8e:	4413      	add	r3, r2
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	01db      	lsls	r3, r3, #7
 8004a9c:	4413      	add	r3, r2
 8004a9e:	33e8      	adds	r3, #232	@ 0xe8
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	01db      	lsls	r3, r3, #7
 8004aac:	4413      	add	r3, r2
 8004aae:	33e4      	adds	r3, #228	@ 0xe4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8004abc:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8004abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac0:	f023 0320 	bic.w	r3, r3, #32
 8004ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004acc:	4313      	orrs	r3, r2
 8004ace:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004af0:	4313      	orrs	r3, r2
 8004af2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8004af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004afa:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b02:	4313      	orrs	r3, r2
 8004b04:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8004b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b08:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b14:	4313      	orrs	r3, r2
 8004b16:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8004b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b26:	4313      	orrs	r3, r2
 8004b28:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004b30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b3a:	d103      	bne.n	8004b44 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b42:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	01db      	lsls	r3, r3, #7
 8004d02:	4413      	add	r3, r2
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	6811      	ldr	r1, [r2, #0]
 8004d0a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	3301      	adds	r3, #1
 8004d12:	01db      	lsls	r3, r3, #7
 8004d14:	440b      	add	r3, r1
 8004d16:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	01db      	lsls	r3, r3, #7
 8004d22:	4413      	add	r3, r2
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	01db      	lsls	r3, r3, #7
 8004d30:	4413      	add	r3, r2
 8004d32:	33e8      	adds	r3, #232	@ 0xe8
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	01db      	lsls	r3, r3, #7
 8004d40:	4413      	add	r3, r2
 8004d42:	33e4      	adds	r3, #228	@ 0xe4
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8004d50:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8004d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d54:	f023 0320 	bic.w	r3, r3, #32
 8004d58:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d60:	4313      	orrs	r3, r2
 8004d62:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8004d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d72:	4313      	orrs	r3, r2
 8004d74:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8004d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d78:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d84:	4313      	orrs	r3, r2
 8004d86:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8004d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d96:	4313      	orrs	r3, r2
 8004d98:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9c:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004da0:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004da8:	4313      	orrs	r3, r2
 8004daa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8004dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004db2:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dce:	d103      	bne.n	8004dd8 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dd6:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> main
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
<<<<<<< HEAD
 8004b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b52:	4313      	orrs	r3, r2
 8004b54:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8004b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b64:	4313      	orrs	r3, r2
 8004b66:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8004b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6a:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8004b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b76:	4313      	orrs	r3, r2
 8004b78:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	f023 031f 	bic.w	r3, r3, #31
 8004b80:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b86:	f003 031f 	and.w	r3, r3, #31
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b96:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d108      	bne.n	8004bbc <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bb0:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb6:	6a3a      	ldr	r2, [r7, #32]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	623b      	str	r3, [r7, #32]
=======
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dde:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004de6:	4313      	orrs	r3, r2
 8004de8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8004dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004df0:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfe:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8004e02:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	f023 031f 	bic.w	r3, r3, #31
 8004e14:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1a:	f003 031f 	and.w	r3, r3, #31
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004e2a:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d108      	bne.n	8004e50 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e44:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4a:	6a3a      	ldr	r2, [r7, #32]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	623b      	str	r3, [r7, #32]
>>>>>>> main

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
<<<<<<< HEAD
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc0:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8004bc4:	d004      	beq.n	8004bd0 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bca:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8004bce:	d103      	bne.n	8004bd8 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bd4:	2b40      	cmp	r3, #64	@ 0x40
 8004bd6:	d108      	bne.n	8004bea <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8004bde:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be4:	6a3a      	ldr	r2, [r7, #32]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	623b      	str	r3, [r7, #32]
=======
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e54:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8004e58:	d004      	beq.n	8004e64 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e5e:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8004e62:	d103      	bne.n	8004e6c <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e68:	2b40      	cmp	r3, #64	@ 0x40
 8004e6a:	d108      	bne.n	8004e7e <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8004e6c:	6a3b      	ldr	r3, [r7, #32]
 8004e6e:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8004e72:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e78:	6a3a      	ldr	r2, [r7, #32]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	623b      	str	r3, [r7, #32]
>>>>>>> main
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
<<<<<<< HEAD
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bee:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d843      	bhi.n	8004c7e <HRTIM_TimingUnitWaveform_Config+0x226>
 8004bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bfc <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8004bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfc:	08004c11 	.word	0x08004c11
 8004c00:	08004c27 	.word	0x08004c27
 8004c04:	08004c3d 	.word	0x08004c3d
 8004c08:	08004c53 	.word	0x08004c53
 8004c0c:	08004c69 	.word	0x08004c69
=======
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e82:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d843      	bhi.n	8004f12 <HRTIM_TimingUnitWaveform_Config+0x226>
 8004e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e90 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8004e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e90:	08004ea5 	.word	0x08004ea5
 8004e94:	08004ebb 	.word	0x08004ebb
 8004e98:	08004ed1 	.word	0x08004ed1
 8004e9c:	08004ee7 	.word	0x08004ee7
 8004ea0:	08004efd 	.word	0x08004efd
>>>>>>> main
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
<<<<<<< HEAD
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004c16:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	69fa      	ldr	r2, [r7, #28]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	61fb      	str	r3, [r7, #28]
      break;
 8004c24:	e02c      	b.n	8004c80 <HRTIM_TimingUnitWaveform_Config+0x228>
=======
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004eaa:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	61fb      	str	r3, [r7, #28]
      break;
 8004eb8:	e02c      	b.n	8004f14 <HRTIM_TimingUnitWaveform_Config+0x228>
>>>>>>> main
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
<<<<<<< HEAD
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c2c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	69fa      	ldr	r2, [r7, #28]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	61fb      	str	r3, [r7, #28]
      break;
 8004c3a:	e021      	b.n	8004c80 <HRTIM_TimingUnitWaveform_Config+0x228>
=======
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ec0:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	69fa      	ldr	r2, [r7, #28]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	61fb      	str	r3, [r7, #28]
      break;
 8004ece:	e021      	b.n	8004f14 <HRTIM_TimingUnitWaveform_Config+0x228>
>>>>>>> main
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
<<<<<<< HEAD
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004c42:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	69fa      	ldr	r2, [r7, #28]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	61fb      	str	r3, [r7, #28]
      break;
 8004c50:	e016      	b.n	8004c80 <HRTIM_TimingUnitWaveform_Config+0x228>
=======
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004ed6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	69fa      	ldr	r2, [r7, #28]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	61fb      	str	r3, [r7, #28]
      break;
 8004ee4:	e016      	b.n	8004f14 <HRTIM_TimingUnitWaveform_Config+0x228>
>>>>>>> main
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
<<<<<<< HEAD
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004c58:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	69fa      	ldr	r2, [r7, #28]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	61fb      	str	r3, [r7, #28]
      break;
 8004c66:	e00b      	b.n	8004c80 <HRTIM_TimingUnitWaveform_Config+0x228>
=======
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004eec:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	61fb      	str	r3, [r7, #28]
      break;
 8004efa:	e00b      	b.n	8004f14 <HRTIM_TimingUnitWaveform_Config+0x228>
>>>>>>> main
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
<<<<<<< HEAD
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c6e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c74:	015b      	lsls	r3, r3, #5
 8004c76:	69fa      	ldr	r2, [r7, #28]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	61fb      	str	r3, [r7, #28]
      break;
 8004c7c:	e000      	b.n	8004c80 <HRTIM_TimingUnitWaveform_Config+0x228>
=======
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f02:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f08:	015b      	lsls	r3, r3, #5
 8004f0a:	69fa      	ldr	r2, [r7, #28]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	61fb      	str	r3, [r7, #28]
      break;
 8004f10:	e000      	b.n	8004f14 <HRTIM_TimingUnitWaveform_Config+0x228>
>>>>>>> main
    }

  default:
    break;
<<<<<<< HEAD
 8004c7e:	bf00      	nop
=======
 8004f12:	bf00      	nop
>>>>>>> main
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
<<<<<<< HEAD
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	3301      	adds	r3, #1
 8004c88:	01db      	lsls	r3, r3, #7
 8004c8a:	4413      	add	r3, r2
 8004c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c8e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	01db      	lsls	r3, r3, #7
 8004c98:	4413      	add	r3, r2
 8004c9a:	33e8      	adds	r3, #232	@ 0xe8
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	01db      	lsls	r3, r3, #7
 8004ca8:	4413      	add	r3, r2
 8004caa:	33e4      	adds	r3, #228	@ 0xe4
 8004cac:	6a3a      	ldr	r2, [r7, #32]
 8004cae:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	01db      	lsls	r3, r3, #7
 8004cb8:	4413      	add	r3, r2
 8004cba:	33d4      	adds	r3, #212	@ 0xd4
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	69fa      	ldr	r2, [r7, #28]
 8004cc6:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8004cca:	bf00      	nop
 8004ccc:	372c      	adds	r7, #44	@ 0x2c
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop

08004cd8 <HRTIM_OutputConfig>:
=======
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	01db      	lsls	r3, r3, #7
 8004f1e:	4413      	add	r3, r2
 8004f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f22:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	01db      	lsls	r3, r3, #7
 8004f2c:	4413      	add	r3, r2
 8004f2e:	33e8      	adds	r3, #232	@ 0xe8
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	01db      	lsls	r3, r3, #7
 8004f3c:	4413      	add	r3, r2
 8004f3e:	33e4      	adds	r3, #228	@ 0xe4
 8004f40:	6a3a      	ldr	r2, [r7, #32]
 8004f42:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	01db      	lsls	r3, r3, #7
 8004f4c:	4413      	add	r3, r2
 8004f4e:	33d4      	adds	r3, #212	@ 0xd4
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8004f5e:	bf00      	nop
 8004f60:	372c      	adds	r7, #44	@ 0x2c
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop

08004f6c <HRTIM_OutputConfig>:
>>>>>>> main
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
<<<<<<< HEAD
 8004cd8:	b480      	push	{r7}
 8004cda:	b089      	sub	sp, #36	@ 0x24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	603b      	str	r3, [r7, #0]
=======
 8004f6c:	b480      	push	{r7}
 8004f6e:	b089      	sub	sp, #36	@ 0x24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
 8004f78:	603b      	str	r3, [r7, #0]
>>>>>>> main
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
<<<<<<< HEAD
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	01db      	lsls	r3, r3, #7
 8004cf2:	4413      	add	r3, r2
 8004cf4:	33e4      	adds	r3, #228	@ 0xe4
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	01db      	lsls	r3, r3, #7
 8004d02:	4413      	add	r3, r2
 8004d04:	33b8      	adds	r3, #184	@ 0xb8
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	617b      	str	r3, [r7, #20]

  switch (Output)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d10:	d04d      	beq.n	8004dae <HRTIM_OutputConfig+0xd6>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d18:	d85e      	bhi.n	8004dd8 <HRTIM_OutputConfig+0x100>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d20:	d032      	beq.n	8004d88 <HRTIM_OutputConfig+0xb0>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d28:	d856      	bhi.n	8004dd8 <HRTIM_OutputConfig+0x100>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b80      	cmp	r3, #128	@ 0x80
 8004d2e:	d03e      	beq.n	8004dae <HRTIM_OutputConfig+0xd6>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b80      	cmp	r3, #128	@ 0x80
 8004d34:	d850      	bhi.n	8004dd8 <HRTIM_OutputConfig+0x100>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b40      	cmp	r3, #64	@ 0x40
 8004d3a:	d025      	beq.n	8004d88 <HRTIM_OutputConfig+0xb0>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b40      	cmp	r3, #64	@ 0x40
 8004d40:	d84a      	bhi.n	8004dd8 <HRTIM_OutputConfig+0x100>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d01f      	beq.n	8004d88 <HRTIM_OutputConfig+0xb0>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d044      	beq.n	8004dd8 <HRTIM_OutputConfig+0x100>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d841      	bhi.n	8004dd8 <HRTIM_OutputConfig+0x100>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d33e      	bcc.n	8004dd8 <HRTIM_OutputConfig+0x100>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3b02      	subs	r3, #2
 8004d5e:	2201      	movs	r2, #1
 8004d60:	409a      	lsls	r2, r3
 8004d62:	4b48      	ldr	r3, [pc, #288]	@ (8004e84 <HRTIM_OutputConfig+0x1ac>)
 8004d64:	4013      	ands	r3, r2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	bf14      	ite	ne
 8004d6a:	2301      	movne	r3, #1
 8004d6c:	2300      	moveq	r3, #0
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d11c      	bne.n	8004dae <HRTIM_OutputConfig+0xd6>
 8004d74:	f244 0304 	movw	r3, #16388	@ 0x4004
 8004d78:	4013      	ands	r3, r2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	bf14      	ite	ne
 8004d7e:	2301      	movne	r3, #1
 8004d80:	2300      	moveq	r3, #0
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d027      	beq.n	8004dd8 <HRTIM_OutputConfig+0x100>
=======
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	01db      	lsls	r3, r3, #7
 8004f86:	4413      	add	r3, r2
 8004f88:	33e4      	adds	r3, #228	@ 0xe4
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	01db      	lsls	r3, r3, #7
 8004f96:	4413      	add	r3, r2
 8004f98:	33b8      	adds	r3, #184	@ 0xb8
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	617b      	str	r3, [r7, #20]

  switch (Output)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fa4:	d04d      	beq.n	8005042 <HRTIM_OutputConfig+0xd6>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fac:	d85e      	bhi.n	800506c <HRTIM_OutputConfig+0x100>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fb4:	d032      	beq.n	800501c <HRTIM_OutputConfig+0xb0>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fbc:	d856      	bhi.n	800506c <HRTIM_OutputConfig+0x100>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b80      	cmp	r3, #128	@ 0x80
 8004fc2:	d03e      	beq.n	8005042 <HRTIM_OutputConfig+0xd6>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b80      	cmp	r3, #128	@ 0x80
 8004fc8:	d850      	bhi.n	800506c <HRTIM_OutputConfig+0x100>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b40      	cmp	r3, #64	@ 0x40
 8004fce:	d025      	beq.n	800501c <HRTIM_OutputConfig+0xb0>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b40      	cmp	r3, #64	@ 0x40
 8004fd4:	d84a      	bhi.n	800506c <HRTIM_OutputConfig+0x100>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d01f      	beq.n	800501c <HRTIM_OutputConfig+0xb0>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d044      	beq.n	800506c <HRTIM_OutputConfig+0x100>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b20      	cmp	r3, #32
 8004fe6:	d841      	bhi.n	800506c <HRTIM_OutputConfig+0x100>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d33e      	bcc.n	800506c <HRTIM_OutputConfig+0x100>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	3b02      	subs	r3, #2
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	409a      	lsls	r2, r3
 8004ff6:	4b48      	ldr	r3, [pc, #288]	@ (8005118 <HRTIM_OutputConfig+0x1ac>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	bf14      	ite	ne
 8004ffe:	2301      	movne	r3, #1
 8005000:	2300      	moveq	r3, #0
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d11c      	bne.n	8005042 <HRTIM_OutputConfig+0xd6>
 8005008:	f244 0304 	movw	r3, #16388	@ 0x4004
 800500c:	4013      	ands	r3, r2
 800500e:	2b00      	cmp	r3, #0
 8005010:	bf14      	ite	ne
 8005012:	2301      	movne	r3, #1
 8005014:	2300      	moveq	r3, #0
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d027      	beq.n	800506c <HRTIM_OutputConfig+0x100>
>>>>>>> main
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
<<<<<<< HEAD
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6819      	ldr	r1, [r3, #0]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	01db      	lsls	r3, r3, #7
 8004d94:	440b      	add	r3, r1
 8004d96:	33bc      	adds	r3, #188	@ 0xbc
 8004d98:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6819      	ldr	r1, [r3, #0]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	01db      	lsls	r3, r3, #7
 8004da6:	440b      	add	r3, r1
 8004da8:	33c0      	adds	r3, #192	@ 0xc0
 8004daa:	601a      	str	r2, [r3, #0]
      break;
 8004dac:	e015      	b.n	8004dda <HRTIM_OutputConfig+0x102>
=======
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6819      	ldr	r1, [r3, #0]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	01db      	lsls	r3, r3, #7
 8005028:	440b      	add	r3, r1
 800502a:	33bc      	adds	r3, #188	@ 0xbc
 800502c:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6819      	ldr	r1, [r3, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	01db      	lsls	r3, r3, #7
 800503a:	440b      	add	r3, r1
 800503c:	33c0      	adds	r3, #192	@ 0xc0
 800503e:	601a      	str	r2, [r3, #0]
      break;
 8005040:	e015      	b.n	800506e <HRTIM_OutputConfig+0x102>
>>>>>>> main
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
<<<<<<< HEAD
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6819      	ldr	r1, [r3, #0]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	01db      	lsls	r3, r3, #7
 8004dba:	440b      	add	r3, r1
 8004dbc:	33c4      	adds	r3, #196	@ 0xc4
 8004dbe:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6819      	ldr	r1, [r3, #0]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	01db      	lsls	r3, r3, #7
 8004dcc:	440b      	add	r3, r1
 8004dce:	33c8      	adds	r3, #200	@ 0xc8
 8004dd0:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8004dd2:	2310      	movs	r3, #16
 8004dd4:	61bb      	str	r3, [r7, #24]
      break;
 8004dd6:	e000      	b.n	8004dda <HRTIM_OutputConfig+0x102>
=======
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6819      	ldr	r1, [r3, #0]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	01db      	lsls	r3, r3, #7
 800504e:	440b      	add	r3, r1
 8005050:	33c4      	adds	r3, #196	@ 0xc4
 8005052:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6819      	ldr	r1, [r3, #0]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	01db      	lsls	r3, r3, #7
 8005060:	440b      	add	r3, r1
 8005062:	33c8      	adds	r3, #200	@ 0xc8
 8005064:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8005066:	2310      	movs	r3, #16
 8005068:	61bb      	str	r3, [r7, #24]
      break;
 800506a:	e000      	b.n	800506e <HRTIM_OutputConfig+0x102>
>>>>>>> main
    }

  default:
    break;
<<<<<<< HEAD
 8004dd8:	bf00      	nop
=======
 800506c:	bf00      	nop
>>>>>>> main
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
<<<<<<< HEAD
 8004dda:	22fe      	movs	r2, #254	@ 0xfe
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8004de2:	43db      	mvns	r3, r3
 8004de4:	69fa      	ldr	r2, [r7, #28]
 8004de6:	4013      	ands	r3, r2
 8004de8:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	69fa      	ldr	r2, [r7, #28]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	69fa      	ldr	r2, [r7, #28]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	691a      	ldr	r2, [r3, #16]
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	69fa      	ldr	r2, [r7, #28]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	695a      	ldr	r2, [r3, #20]
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	699a      	ldr	r2, [r3, #24]
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	69fa      	ldr	r2, [r7, #28]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	61fb      	str	r3, [r7, #28]
=======
 800506e:	22fe      	movs	r2, #254	@ 0xfe
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8005076:	43db      	mvns	r3, r3
 8005078:	69fa      	ldr	r2, [r7, #28]
 800507a:	4013      	ands	r3, r2
 800507c:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	69fa      	ldr	r2, [r7, #28]
 800508a:	4313      	orrs	r3, r2
 800508c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	fa02 f303 	lsl.w	r3, r2, r3
 8005098:	69fa      	ldr	r2, [r7, #28]
 800509a:	4313      	orrs	r3, r2
 800509c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	69fa      	ldr	r2, [r7, #28]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	695a      	ldr	r2, [r3, #20]
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	699a      	ldr	r2, [r3, #24]
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	69fa      	ldr	r2, [r7, #28]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	61fb      	str	r3, [r7, #28]
>>>>>>> main
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
<<<<<<< HEAD
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	2b08      	cmp	r3, #8
 8004e40:	d111      	bne.n	8004e66 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10c      	bne.n	8004e66 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d107      	bne.n	8004e66 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	69da      	ldr	r2, [r3, #28]
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	69fa      	ldr	r2, [r7, #28]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	61fb      	str	r3, [r7, #28]
=======
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	2b08      	cmp	r3, #8
 80050d4:	d111      	bne.n	80050fa <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10c      	bne.n	80050fa <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d107      	bne.n	80050fa <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	69da      	ldr	r2, [r3, #28]
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	fa02 f303 	lsl.w	r3, r2, r3
 80050f4:	69fa      	ldr	r2, [r7, #28]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	61fb      	str	r3, [r7, #28]
>>>>>>> main
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
<<<<<<< HEAD
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	01db      	lsls	r3, r3, #7
 8004e6e:	4413      	add	r3, r2
 8004e70:	33e4      	adds	r3, #228	@ 0xe4
 8004e72:	69fa      	ldr	r2, [r7, #28]
 8004e74:	601a      	str	r2, [r3, #0]
}
 8004e76:	bf00      	nop
 8004e78:	3724      	adds	r7, #36	@ 0x24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40000041 	.word	0x40000041

08004e88 <HRTIM_EventConfig>:
=======
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	01db      	lsls	r3, r3, #7
 8005102:	4413      	add	r3, r2
 8005104:	33e4      	adds	r3, #228	@ 0xe4
 8005106:	69fa      	ldr	r2, [r7, #28]
 8005108:	601a      	str	r2, [r3, #0]
}
 800510a:	bf00      	nop
 800510c:	3724      	adds	r7, #36	@ 0x24
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40000041 	.word	0x40000041

0800511c <HRTIM_EventConfig>:
>>>>>>> main
  * @retval None
  */
static void HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                              uint32_t Event,
                              const HRTIM_EventCfgTypeDef *pEventCfg)
{
<<<<<<< HEAD
 8004e88:	b480      	push	{r7}
 8004e8a:	b089      	sub	sp, #36	@ 0x24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
=======
 800511c:	b480      	push	{r7}
 800511e:	b089      	sub	sp, #36	@ 0x24
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
>>>>>>> main
  uint32_t hrtim_eecr1;
  uint32_t hrtim_eecr2;
  uint32_t hrtim_eecr3;

  /* Configure external event channel */
  hrtim_eecr1 = hhrtim->Instance->sCommonRegs.EECR1;
<<<<<<< HEAD
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 8004e9c:	61fb      	str	r3, [r7, #28]
  hrtim_eecr2 = hhrtim->Instance->sCommonRegs.EECR2;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 8004ea6:	61bb      	str	r3, [r7, #24]
  hrtim_eecr3 = hhrtim->Instance->sCommonRegs.EECR3;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 8004eb0:	617b      	str	r3, [r7, #20]

  switch (Event)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b0a      	cmp	r3, #10
 8004eb6:	f200 8208 	bhi.w	80052ca <HRTIM_EventConfig+0x442>
 8004eba:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec0 <HRTIM_EventConfig+0x38>)
 8004ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec0:	08004eed 	.word	0x08004eed
 8004ec4:	08004f0d 	.word	0x08004f0d
 8004ec8:	08004f63 	.word	0x08004f63
 8004ecc:	08004fbf 	.word	0x08004fbf
 8004ed0:	0800501d 	.word	0x0800501d
 8004ed4:	0800507b 	.word	0x0800507b
 8004ed8:	080050d9 	.word	0x080050d9
 8004edc:	08005137 	.word	0x08005137
 8004ee0:	0800519b 	.word	0x0800519b
 8004ee4:	080051ff 	.word	0x080051ff
 8004ee8:	08005265 	.word	0x08005265
=======
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 8005130:	61fb      	str	r3, [r7, #28]
  hrtim_eecr2 = hhrtim->Instance->sCommonRegs.EECR2;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800513a:	61bb      	str	r3, [r7, #24]
  hrtim_eecr3 = hhrtim->Instance->sCommonRegs.EECR3;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 8005144:	617b      	str	r3, [r7, #20]

  switch (Event)
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b0a      	cmp	r3, #10
 800514a:	f200 8208 	bhi.w	800555e <HRTIM_EventConfig+0x442>
 800514e:	a201      	add	r2, pc, #4	@ (adr r2, 8005154 <HRTIM_EventConfig+0x38>)
 8005150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005154:	08005181 	.word	0x08005181
 8005158:	080051a1 	.word	0x080051a1
 800515c:	080051f7 	.word	0x080051f7
 8005160:	08005253 	.word	0x08005253
 8005164:	080052b1 	.word	0x080052b1
 8005168:	0800530f 	.word	0x0800530f
 800516c:	0800536d 	.word	0x0800536d
 8005170:	080053cb 	.word	0x080053cb
 8005174:	0800542f 	.word	0x0800542f
 8005178:	08005493 	.word	0x08005493
 800517c:	080054f9 	.word	0x080054f9
>>>>>>> main
  {
  case HRTIM_EVENT_NONE:
    {
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR1 = 0U;
<<<<<<< HEAD
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      hhrtim->Instance->sCommonRegs.EECR2 = 0U;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = 0U;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8004f0a:	e1df      	b.n	80052cc <HRTIM_EventConfig+0x444>
=======
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2200      	movs	r2, #0
 8005186:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      hhrtim->Instance->sCommonRegs.EECR2 = 0U;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2200      	movs	r2, #0
 8005190:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = 0U;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2200      	movs	r2, #0
 800519a:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 800519e:	e1df      	b.n	8005560 <HRTIM_EventConfig+0x444>
>>>>>>> main
    }

  case HRTIM_EVENT_1:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE1SRC | HRTIM_EECR1_EE1POL | HRTIM_EECR1_EE1SNS | HRTIM_EECR1_EE1FAST);
<<<<<<< HEAD
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004f12:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Source & HRTIM_EECR1_EE1SRC);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0303 	and.w	r3, r3, #3
 8004f1c:	69fa      	ldr	r2, [r7, #28]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Polarity & HRTIM_EECR1_EE1POL);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f003 0304 	and.w	r3, r3, #4
 8004f2a:	69fa      	ldr	r2, [r7, #28]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 0318 	and.w	r3, r3, #24
 8004f38:	69fa      	ldr	r2, [r7, #28]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE1FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69fa      	ldr	r2, [r7, #28]
 8004f44:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE1FAST bit) */
      hrtim_eecr1 |= (pEventCfg->FastMode  & HRTIM_EECR1_EE1FAST);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f003 0320 	and.w	r3, r3, #32
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69fa      	ldr	r2, [r7, #28]
 8004f5c:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8004f60:	e1b4      	b.n	80052cc <HRTIM_EventConfig+0x444>
=======
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80051a6:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Source & HRTIM_EECR1_EE1SRC);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0303 	and.w	r3, r3, #3
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Polarity & HRTIM_EECR1_EE1POL);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	69fa      	ldr	r2, [r7, #28]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f003 0318 	and.w	r3, r3, #24
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE1FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69fa      	ldr	r2, [r7, #28]
 80051d8:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE1FAST bit) */
      hrtim_eecr1 |= (pEventCfg->FastMode  & HRTIM_EECR1_EE1FAST);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	f003 0320 	and.w	r3, r3, #32
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69fa      	ldr	r2, [r7, #28]
 80051f0:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 80051f4:	e1b4      	b.n	8005560 <HRTIM_EventConfig+0x444>
>>>>>>> main
    }

  case HRTIM_EVENT_2:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE2SRC | HRTIM_EECR1_EE2POL | HRTIM_EECR1_EE2SNS | HRTIM_EECR1_EE2FAST);
<<<<<<< HEAD
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 8004f68:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 6U) & HRTIM_EECR1_EE2SRC);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	019b      	lsls	r3, r3, #6
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR1_EE2POL);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	019b      	lsls	r3, r3, #6
 8004f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	019b      	lsls	r3, r3, #6
 8004f8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE2FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	69fa      	ldr	r2, [r7, #28]
 8004f9e:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE2FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	019b      	lsls	r3, r3, #6
 8004fa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fac:	69fa      	ldr	r2, [r7, #28]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69fa      	ldr	r2, [r7, #28]
 8004fb8:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8004fbc:	e186      	b.n	80052cc <HRTIM_EventConfig+0x444>
=======
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 80051fc:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 6U) & HRTIM_EECR1_EE2SRC);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	019b      	lsls	r3, r3, #6
 8005204:	b2db      	uxtb	r3, r3
 8005206:	69fa      	ldr	r2, [r7, #28]
 8005208:	4313      	orrs	r3, r2
 800520a:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR1_EE2POL);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	019b      	lsls	r3, r3, #6
 8005212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	4313      	orrs	r3, r2
 800521a:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	019b      	lsls	r3, r3, #6
 8005222:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005226:	69fa      	ldr	r2, [r7, #28]
 8005228:	4313      	orrs	r3, r2
 800522a:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE2FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	69fa      	ldr	r2, [r7, #28]
 8005232:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE2FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	019b      	lsls	r3, r3, #6
 800523c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005240:	69fa      	ldr	r2, [r7, #28]
 8005242:	4313      	orrs	r3, r2
 8005244:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69fa      	ldr	r2, [r7, #28]
 800524c:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8005250:	e186      	b.n	8005560 <HRTIM_EventConfig+0x444>
>>>>>>> main
    }

  case HRTIM_EVENT_3:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE3SRC | HRTIM_EECR1_EE3POL | HRTIM_EECR1_EE3SNS | HRTIM_EECR1_EE3FAST);
<<<<<<< HEAD
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004fc4:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 12U) & HRTIM_EECR1_EE3SRC);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	031b      	lsls	r3, r3, #12
 8004fcc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004fd0:	69fa      	ldr	r2, [r7, #28]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR1_EE3POL);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	031b      	lsls	r3, r3, #12
 8004fdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fe0:	69fa      	ldr	r2, [r7, #28]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	031b      	lsls	r3, r3, #12
 8004fec:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8004ff0:	69fa      	ldr	r2, [r7, #28]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE3FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69fa      	ldr	r2, [r7, #28]
 8004ffc:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE3FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	031b      	lsls	r3, r3, #12
 8005006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800500a:	69fa      	ldr	r2, [r7, #28]
 800500c:	4313      	orrs	r3, r2
 800500e:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	69fa      	ldr	r2, [r7, #28]
 8005016:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 800501a:	e157      	b.n	80052cc <HRTIM_EventConfig+0x444>
=======
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005258:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 12U) & HRTIM_EECR1_EE3SRC);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	031b      	lsls	r3, r3, #12
 8005260:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005264:	69fa      	ldr	r2, [r7, #28]
 8005266:	4313      	orrs	r3, r2
 8005268:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR1_EE3POL);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	031b      	lsls	r3, r3, #12
 8005270:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005274:	69fa      	ldr	r2, [r7, #28]
 8005276:	4313      	orrs	r3, r2
 8005278:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	031b      	lsls	r3, r3, #12
 8005280:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8005284:	69fa      	ldr	r2, [r7, #28]
 8005286:	4313      	orrs	r3, r2
 8005288:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE3FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE3FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	031b      	lsls	r3, r3, #12
 800529a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800529e:	69fa      	ldr	r2, [r7, #28]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69fa      	ldr	r2, [r7, #28]
 80052aa:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 80052ae:	e157      	b.n	8005560 <HRTIM_EventConfig+0x444>
>>>>>>> main
    }

  case HRTIM_EVENT_4:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE4SRC | HRTIM_EECR1_EE4POL | HRTIM_EECR1_EE4SNS | HRTIM_EECR1_EE4FAST);
<<<<<<< HEAD
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	f423 037c 	bic.w	r3, r3, #16515072	@ 0xfc0000
 8005022:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 18U) & HRTIM_EECR1_EE4SRC);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	049b      	lsls	r3, r3, #18
 800502a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800502e:	69fa      	ldr	r2, [r7, #28]
 8005030:	4313      	orrs	r3, r2
 8005032:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR1_EE4POL);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	049b      	lsls	r3, r3, #18
 800503a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800503e:	69fa      	ldr	r2, [r7, #28]
 8005040:	4313      	orrs	r3, r2
 8005042:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	049b      	lsls	r3, r3, #18
 800504a:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	4313      	orrs	r3, r2
 8005052:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE4FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	69fa      	ldr	r2, [r7, #28]
 800505a:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE4FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	049b      	lsls	r3, r3, #18
 8005064:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005068:	69fa      	ldr	r2, [r7, #28]
 800506a:	4313      	orrs	r3, r2
 800506c:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8005078:	e128      	b.n	80052cc <HRTIM_EventConfig+0x444>
=======
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f423 037c 	bic.w	r3, r3, #16515072	@ 0xfc0000
 80052b6:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 18U) & HRTIM_EECR1_EE4SRC);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	049b      	lsls	r3, r3, #18
 80052be:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80052c2:	69fa      	ldr	r2, [r7, #28]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR1_EE4POL);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	049b      	lsls	r3, r3, #18
 80052ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052d2:	69fa      	ldr	r2, [r7, #28]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	049b      	lsls	r3, r3, #18
 80052de:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 80052e2:	69fa      	ldr	r2, [r7, #28]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE4FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE4FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	049b      	lsls	r3, r3, #18
 80052f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052fc:	69fa      	ldr	r2, [r7, #28]
 80052fe:	4313      	orrs	r3, r2
 8005300:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69fa      	ldr	r2, [r7, #28]
 8005308:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 800530c:	e128      	b.n	8005560 <HRTIM_EventConfig+0x444>
>>>>>>> main
    }

  case HRTIM_EVENT_5:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE5SRC | HRTIM_EECR1_EE5POL | HRTIM_EECR1_EE5SNS | HRTIM_EECR1_EE5FAST);
<<<<<<< HEAD
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8005080:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 24U) & HRTIM_EECR1_EE5SRC);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	061b      	lsls	r3, r3, #24
 8005088:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	4313      	orrs	r3, r2
 8005090:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR1_EE5POL);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	061b      	lsls	r3, r3, #24
 8005098:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800509c:	69fa      	ldr	r2, [r7, #28]
 800509e:	4313      	orrs	r3, r2
 80050a0:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	061b      	lsls	r3, r3, #24
 80050a8:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 80050ac:	69fa      	ldr	r2, [r7, #28]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE5FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69fa      	ldr	r2, [r7, #28]
 80050b8:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE5FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	061b      	lsls	r3, r3, #24
 80050c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050c6:	69fa      	ldr	r2, [r7, #28]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	69fa      	ldr	r2, [r7, #28]
 80050d2:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 80050d6:	e0f9      	b.n	80052cc <HRTIM_EventConfig+0x444>
=======
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8005314:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 24U) & HRTIM_EECR1_EE5SRC);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	061b      	lsls	r3, r3, #24
 800531c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005320:	69fa      	ldr	r2, [r7, #28]
 8005322:	4313      	orrs	r3, r2
 8005324:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR1_EE5POL);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	061b      	lsls	r3, r3, #24
 800532c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	4313      	orrs	r3, r2
 8005334:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	061b      	lsls	r3, r3, #24
 800533c:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8005340:	69fa      	ldr	r2, [r7, #28]
 8005342:	4313      	orrs	r3, r2
 8005344:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE5FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE5FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	061b      	lsls	r3, r3, #24
 8005356:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800535a:	69fa      	ldr	r2, [r7, #28]
 800535c:	4313      	orrs	r3, r2
 800535e:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 800536a:	e0f9      	b.n	8005560 <HRTIM_EventConfig+0x444>
>>>>>>> main
    }

  case HRTIM_EVENT_6:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE6SRC | HRTIM_EECR2_EE6POL | HRTIM_EECR2_EE6SNS);
<<<<<<< HEAD
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	f023 031f 	bic.w	r3, r3, #31
 80050de:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Source & HRTIM_EECR2_EE6SRC);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0303 	and.w	r3, r3, #3
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Polarity & HRTIM_EECR2_EE6POL);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 0318 	and.w	r3, r3, #24
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	4313      	orrs	r3, r2
 8005108:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE6F);
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f023 030f 	bic.w	r3, r3, #15
 8005110:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f003 030f 	and.w	r3, r3, #15
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4313      	orrs	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005134:	e0ca      	b.n	80052cc <HRTIM_EventConfig+0x444>
=======
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	f023 031f 	bic.w	r3, r3, #31
 8005372:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Source & HRTIM_EECR2_EE6SRC);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0303 	and.w	r3, r3, #3
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	4313      	orrs	r3, r2
 8005380:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Polarity & HRTIM_EECR2_EE6POL);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	4313      	orrs	r3, r2
 800538e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 0318 	and.w	r3, r3, #24
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	4313      	orrs	r3, r2
 800539c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE6F);
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f023 030f 	bic.w	r3, r3, #15
 80053a4:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 80053c8:	e0ca      	b.n	8005560 <HRTIM_EventConfig+0x444>
>>>>>>> main
    }

  case HRTIM_EVENT_7:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE7SRC | HRTIM_EECR2_EE7POL | HRTIM_EECR2_EE7SNS);
<<<<<<< HEAD
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 800513c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	019b      	lsls	r3, r3, #6
 8005144:	b2db      	uxtb	r3, r3
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	4313      	orrs	r3, r2
 800514a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR2_EE7POL);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	019b      	lsls	r3, r3, #6
 8005152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	4313      	orrs	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	019b      	lsls	r3, r3, #6
 8005162:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	4313      	orrs	r3, r2
 800516a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE7F);
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f423 7370 	bic.w	r3, r3, #960	@ 0x3c0
 8005172:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	019b      	lsls	r3, r3, #6
 800517a:	f403 7370 	and.w	r3, r3, #960	@ 0x3c0
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005198:	e098      	b.n	80052cc <HRTIM_EventConfig+0x444>
=======
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 80053d0:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	019b      	lsls	r3, r3, #6
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	4313      	orrs	r3, r2
 80053de:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR2_EE7POL);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	019b      	lsls	r3, r3, #6
 80053e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	019b      	lsls	r3, r3, #6
 80053f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE7F);
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f423 7370 	bic.w	r3, r3, #960	@ 0x3c0
 8005406:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	019b      	lsls	r3, r3, #6
 800540e:	f403 7370 	and.w	r3, r3, #960	@ 0x3c0
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	4313      	orrs	r3, r2
 8005416:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 800542c:	e098      	b.n	8005560 <HRTIM_EventConfig+0x444>
>>>>>>> main
    }

  case HRTIM_EVENT_8:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE8SRC | HRTIM_EECR2_EE8POL | HRTIM_EECR2_EE8SNS);
<<<<<<< HEAD
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	f423 33f8 	bic.w	r3, r3, #126976	@ 0x1f000
 80051a0:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	031b      	lsls	r3, r3, #12
 80051a8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR2_EE8POL);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	031b      	lsls	r3, r3, #12
 80051b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	4313      	orrs	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	031b      	lsls	r3, r3, #12
 80051c8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE8F);
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051d8:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	031b      	lsls	r3, r3, #12
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 80051fc:	e066      	b.n	80052cc <HRTIM_EventConfig+0x444>
=======
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	f423 33f8 	bic.w	r3, r3, #126976	@ 0x1f000
 8005434:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	031b      	lsls	r3, r3, #12
 800543c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	4313      	orrs	r3, r2
 8005444:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR2_EE8POL);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	031b      	lsls	r3, r3, #12
 800544c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	4313      	orrs	r3, r2
 8005454:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	031b      	lsls	r3, r3, #12
 800545c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	4313      	orrs	r3, r2
 8005464:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE8F);
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800546c:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	031b      	lsls	r3, r3, #12
 8005474:	b29b      	uxth	r3, r3
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4313      	orrs	r3, r2
 800547a:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005490:	e066      	b.n	8005560 <HRTIM_EventConfig+0x444>
>>>>>>> main
    }

  case HRTIM_EVENT_9:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE9SRC | HRTIM_EECR2_EE9POL | HRTIM_EECR2_EE9SNS);
<<<<<<< HEAD
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	f423 03f8 	bic.w	r3, r3, #8126464	@ 0x7c0000
 8005204:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	049b      	lsls	r3, r3, #18
 800520c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	4313      	orrs	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR2_EE9POL);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	049b      	lsls	r3, r3, #18
 800521c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	4313      	orrs	r3, r2
 8005224:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	049b      	lsls	r3, r3, #18
 800522c:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	4313      	orrs	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE9F);
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 800523c:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	049b      	lsls	r3, r3, #18
 8005244:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	4313      	orrs	r3, r2
 800524c:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005262:	e033      	b.n	80052cc <HRTIM_EventConfig+0x444>
=======
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	f423 03f8 	bic.w	r3, r3, #8126464	@ 0x7c0000
 8005498:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	049b      	lsls	r3, r3, #18
 80054a0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR2_EE9POL);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	049b      	lsls	r3, r3, #18
 80054b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	049b      	lsls	r3, r3, #18
 80054c0:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE9F);
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 80054d0:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	049b      	lsls	r3, r3, #18
 80054d8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	4313      	orrs	r3, r2
 80054e0:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 80054f6:	e033      	b.n	8005560 <HRTIM_EventConfig+0x444>
>>>>>>> main
    }

  case HRTIM_EVENT_10:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE10SRC | HRTIM_EECR2_EE10POL | HRTIM_EECR2_EE10SNS);
<<<<<<< HEAD
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 800526a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	061b      	lsls	r3, r3, #24
 8005272:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	4313      	orrs	r3, r2
 800527a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	061b      	lsls	r3, r3, #24
 8005282:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	4313      	orrs	r3, r2
 800528a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	061b      	lsls	r3, r3, #24
 8005292:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	4313      	orrs	r3, r2
 800529a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE10F);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80052a2:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	061b      	lsls	r3, r3, #24
 80052aa:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 80052c8:	e000      	b.n	80052cc <HRTIM_EventConfig+0x444>
=======
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 80054fe:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	061b      	lsls	r3, r3, #24
 8005506:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	4313      	orrs	r3, r2
 800550e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	061b      	lsls	r3, r3, #24
 8005516:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	4313      	orrs	r3, r2
 800551e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	061b      	lsls	r3, r3, #24
 8005526:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	4313      	orrs	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE10F);
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8005536:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	061b      	lsls	r3, r3, #24
 800553e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 800555c:	e000      	b.n	8005560 <HRTIM_EventConfig+0x444>
>>>>>>> main
    }

  default:
    break;
<<<<<<< HEAD
 80052ca:	bf00      	nop
  }
}
 80052cc:	bf00      	nop
 80052ce:	3724      	adds	r7, #36	@ 0x24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HRTIM_ForceRegistersUpdate>:
=======
 800555e:	bf00      	nop
  }
}
 8005560:	bf00      	nop
 8005562:	3724      	adds	r7, #36	@ 0x24
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HRTIM_ForceRegistersUpdate>:
>>>>>>> main
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
<<<<<<< HEAD
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b05      	cmp	r3, #5
 80052e6:	d851      	bhi.n	800538c <HRTIM_ForceRegistersUpdate+0xb4>
 80052e8:	a201      	add	r2, pc, #4	@ (adr r2, 80052f0 <HRTIM_ForceRegistersUpdate+0x18>)
 80052ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ee:	bf00      	nop
 80052f0:	0800531f 	.word	0x0800531f
 80052f4:	08005335 	.word	0x08005335
 80052f8:	0800534b 	.word	0x0800534b
 80052fc:	08005361 	.word	0x08005361
 8005300:	08005377 	.word	0x08005377
 8005304:	08005309 	.word	0x08005309
=======
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b05      	cmp	r3, #5
 800557a:	d851      	bhi.n	8005620 <HRTIM_ForceRegistersUpdate+0xb4>
 800557c:	a201      	add	r2, pc, #4	@ (adr r2, 8005584 <HRTIM_ForceRegistersUpdate+0x18>)
 800557e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005582:	bf00      	nop
 8005584:	080055b3 	.word	0x080055b3
 8005588:	080055c9 	.word	0x080055c9
 800558c:	080055df 	.word	0x080055df
 8005590:	080055f5 	.word	0x080055f5
 8005594:	0800560b 	.word	0x0800560b
 8005598:	0800559d 	.word	0x0800559d
>>>>>>> main
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
<<<<<<< HEAD
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f042 0201 	orr.w	r2, r2, #1
 8005318:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800531c:	e037      	b.n	800538e <HRTIM_ForceRegistersUpdate+0xb6>
=======
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f042 0201 	orr.w	r2, r2, #1
 80055ac:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80055b0:	e037      	b.n	8005622 <HRTIM_ForceRegistersUpdate+0xb6>
>>>>>>> main
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
<<<<<<< HEAD
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0202 	orr.w	r2, r2, #2
 800532e:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005332:	e02c      	b.n	800538e <HRTIM_ForceRegistersUpdate+0xb6>
=======
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0202 	orr.w	r2, r2, #2
 80055c2:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80055c6:	e02c      	b.n	8005622 <HRTIM_ForceRegistersUpdate+0xb6>
>>>>>>> main
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
<<<<<<< HEAD
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f042 0204 	orr.w	r2, r2, #4
 8005344:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005348:	e021      	b.n	800538e <HRTIM_ForceRegistersUpdate+0xb6>
=======
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f042 0204 	orr.w	r2, r2, #4
 80055d8:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80055dc:	e021      	b.n	8005622 <HRTIM_ForceRegistersUpdate+0xb6>
>>>>>>> main
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
<<<<<<< HEAD
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0208 	orr.w	r2, r2, #8
 800535a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800535e:	e016      	b.n	800538e <HRTIM_ForceRegistersUpdate+0xb6>
=======
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0208 	orr.w	r2, r2, #8
 80055ee:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80055f2:	e016      	b.n	8005622 <HRTIM_ForceRegistersUpdate+0xb6>
>>>>>>> main
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
<<<<<<< HEAD
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f042 0210 	orr.w	r2, r2, #16
 8005370:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005374:	e00b      	b.n	800538e <HRTIM_ForceRegistersUpdate+0xb6>
=======
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f042 0210 	orr.w	r2, r2, #16
 8005604:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005608:	e00b      	b.n	8005622 <HRTIM_ForceRegistersUpdate+0xb6>
>>>>>>> main
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
<<<<<<< HEAD
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0220 	orr.w	r2, r2, #32
 8005386:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800538a:	e000      	b.n	800538e <HRTIM_ForceRegistersUpdate+0xb6>
=======
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0220 	orr.w	r2, r2, #32
 800561a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800561e:	e000      	b.n	8005622 <HRTIM_ForceRegistersUpdate+0xb6>
>>>>>>> main
    }

  default:
    break;
<<<<<<< HEAD
 800538c:	bf00      	nop
  }
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop

0800539c <HAL_LPTIM_Init>:
=======
 8005620:	bf00      	nop
  }
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop

08005630 <HAL_LPTIM_Init>:
>>>>>>> main
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
<<<<<<< HEAD
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
=======
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
>>>>>>> main
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
<<<<<<< HEAD
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e097      	b.n	80054de <HAL_LPTIM_Init+0x142>
=======
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e097      	b.n	8005772 <HAL_LPTIM_Init+0x142>
>>>>>>> main
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
<<<<<<< HEAD
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b01      	cmp	r3, #1
=======
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b01      	cmp	r3, #1
>>>>>>> main
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
<<<<<<< HEAD
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d106      	bne.n	80053ce <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
=======
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d106      	bne.n	8005662 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
>>>>>>> main

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
<<<<<<< HEAD
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7fd fdc9 	bl	8002f60 <HAL_LPTIM_MspInit>
=======
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7fc ff8d 	bl	800257c <HAL_LPTIM_MspInit>
>>>>>>> main
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
<<<<<<< HEAD
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2202      	movs	r2, #2
 80053d2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d004      	beq.n	80053f0 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053ee:	d103      	bne.n	80053f8 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 031e 	bic.w	r3, r3, #30
 80053f6:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005400:	4293      	cmp	r3, r2
 8005402:	d003      	beq.n	800540c <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4b38      	ldr	r3, [pc, #224]	@ (80054e8 <HAL_LPTIM_Init+0x14c>)
 8005408:	4013      	ands	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
=======
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2202      	movs	r2, #2
 8005666:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d004      	beq.n	8005684 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005682:	d103      	bne.n	800568c <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 031e 	bic.w	r3, r3, #30
 800568a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005694:	4293      	cmp	r3, r2
 8005696:	d003      	beq.n	80056a0 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4b38      	ldr	r3, [pc, #224]	@ (800577c <HAL_LPTIM_Init+0x14c>)
 800569c:	4013      	ands	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]
>>>>>>> main
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
<<<<<<< HEAD
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4b37      	ldr	r3, [pc, #220]	@ (80054ec <HAL_LPTIM_Init+0x150>)
 8005410:	4013      	ands	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
=======
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4b37      	ldr	r3, [pc, #220]	@ (8005780 <HAL_LPTIM_Init+0x150>)
 80056a4:	4013      	ands	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]
>>>>>>> main
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
<<<<<<< HEAD
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800541c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8005422:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8005428:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 800542e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
=======
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80056b0:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80056b6:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 80056bc:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 80056c2:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]
>>>>>>> main

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
<<<<<<< HEAD
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d107      	bne.n	800544e <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005446:	4313      	orrs	r3, r2
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]
=======
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d107      	bne.n	80056e2 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80056da:	4313      	orrs	r3, r2
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]
>>>>>>> main
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
<<<<<<< HEAD
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d004      	beq.n	8005460 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800545e:	d107      	bne.n	8005470 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8005468:	4313      	orrs	r3, r2
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4313      	orrs	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]
=======
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d004      	beq.n	80056f4 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056f2:	d107      	bne.n	8005704 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80056fc:	4313      	orrs	r3, r2
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	4313      	orrs	r3, r2
 8005702:	60fb      	str	r3, [r7, #12]
>>>>>>> main
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
<<<<<<< HEAD
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005478:	4293      	cmp	r3, r2
 800547a:	d00a      	beq.n	8005492 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005484:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800548a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]
=======
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800570c:	4293      	cmp	r3, r2
 800570e:	d00a      	beq.n	8005726 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005718:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800571e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]
>>>>>>> main
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
<<<<<<< HEAD
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a14      	ldr	r2, [pc, #80]	@ (80054f0 <HAL_LPTIM_Init+0x154>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d004      	beq.n	80054ae <HAL_LPTIM_Init+0x112>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a12      	ldr	r2, [pc, #72]	@ (80054f4 <HAL_LPTIM_Init+0x158>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d108      	bne.n	80054c0 <HAL_LPTIM_Init+0x124>
=======
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a14      	ldr	r2, [pc, #80]	@ (8005784 <HAL_LPTIM_Init+0x154>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d004      	beq.n	8005742 <HAL_LPTIM_Init+0x112>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a12      	ldr	r2, [pc, #72]	@ (8005788 <HAL_LPTIM_Init+0x158>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d108      	bne.n	8005754 <HAL_LPTIM_Init+0x124>
>>>>>>> main
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
<<<<<<< HEAD
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	625a      	str	r2, [r3, #36]	@ 0x24
 80054be:	e009      	b.n	80054d4 <HAL_LPTIM_Init+0x138>
=======
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	625a      	str	r2, [r3, #36]	@ 0x24
 8005752:	e009      	b.n	8005768 <HAL_LPTIM_Init+0x138>
>>>>>>> main
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
<<<<<<< HEAD
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a0c      	ldr	r2, [pc, #48]	@ (80054f8 <HAL_LPTIM_Init+0x15c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d104      	bne.n	80054d4 <HAL_LPTIM_Init+0x138>
=======
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a0c      	ldr	r2, [pc, #48]	@ (800578c <HAL_LPTIM_Init+0x15c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d104      	bne.n	8005768 <HAL_LPTIM_Init+0x138>
>>>>>>> main
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
<<<<<<< HEAD
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80054d2:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005766:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> main
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
<<<<<<< HEAD
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	ffff1f3f 	.word	0xffff1f3f
 80054ec:	ff19f1fe 	.word	0xff19f1fe
 80054f0:	40002400 	.word	0x40002400
 80054f4:	58002400 	.word	0x58002400
 80054f8:	58002800 	.word	0x58002800

080054fc <HAL_LPTIM_PWM_Start>:
=======
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	ffff1f3f 	.word	0xffff1f3f
 8005780:	ff19f1fe 	.word	0xff19f1fe
 8005784:	40002400 	.word	0x40002400
 8005788:	58002400 	.word	0x58002400
 800578c:	58002800 	.word	0x58002800

08005790 <HAL_LPTIM_PWM_Start>:
>>>>>>> main
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
<<<<<<< HEAD
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
=======
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
>>>>>>> main
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
<<<<<<< HEAD
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Reset WAVE bit to set PWM mode */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800551e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691a      	ldr	r2, [r3, #16]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2210      	movs	r2, #16
 8005536:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005540:	2110      	movs	r1, #16
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 f97e 	bl	8005844 <LPTIM_WaitForFlag>
 8005548:	4603      	mov	r3, r0
 800554a:	2b03      	cmp	r3, #3
 800554c:	d101      	bne.n	8005552 <HAL_LPTIM_PWM_Start+0x56>
  {
    return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e01d      	b.n	800558e <HAL_LPTIM_PWM_Start+0x92>
=======
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Reset WAVE bit to set PWM mode */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80057b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691a      	ldr	r2, [r3, #16]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0201 	orr.w	r2, r2, #1
 80057c2:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2210      	movs	r2, #16
 80057ca:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80057d4:	2110      	movs	r1, #16
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 f97e 	bl	8005ad8 <LPTIM_WaitForFlag>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b03      	cmp	r3, #3
 80057e0:	d101      	bne.n	80057e6 <HAL_LPTIM_PWM_Start+0x56>
  {
    return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e01d      	b.n	8005822 <HAL_LPTIM_PWM_Start+0x92>
>>>>>>> main
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
<<<<<<< HEAD
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2208      	movs	r2, #8
 8005558:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8005562:	2108      	movs	r1, #8
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 f96d 	bl	8005844 <LPTIM_WaitForFlag>
 800556a:	4603      	mov	r3, r0
 800556c:	2b03      	cmp	r3, #3
 800556e:	d101      	bne.n	8005574 <HAL_LPTIM_PWM_Start+0x78>
  {
    return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e00c      	b.n	800558e <HAL_LPTIM_PWM_Start+0x92>
=======
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2208      	movs	r2, #8
 80057ec:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80057f6:	2108      	movs	r1, #8
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 f96d 	bl	8005ad8 <LPTIM_WaitForFlag>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b03      	cmp	r3, #3
 8005802:	d101      	bne.n	8005808 <HAL_LPTIM_PWM_Start+0x78>
  {
    return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e00c      	b.n	8005822 <HAL_LPTIM_PWM_Start+0x92>
>>>>>>> main
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
<<<<<<< HEAD
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691a      	ldr	r2, [r3, #16]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0204 	orr.w	r2, r2, #4
 8005582:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_LPTIM_Counter_Start_IT>:
=======
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691a      	ldr	r2, [r3, #16]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0204 	orr.w	r2, r2, #4
 8005816:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_LPTIM_Counter_Start_IT>:
>>>>>>> main
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
<<<<<<< HEAD
 8005596:	b580      	push	{r7, lr}
 8005598:	b082      	sub	sp, #8
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
 800559e:	6039      	str	r1, [r7, #0]
=======
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	6039      	str	r1, [r7, #0]
>>>>>>> main
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
<<<<<<< HEAD
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d00c      	beq.n	80055ca <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055b8:	d107      	bne.n	80055ca <HAL_LPTIM_Counter_Start_IT+0x34>
=======
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d00c      	beq.n	800585e <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005848:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800584c:	d107      	bne.n	800585e <HAL_LPTIM_Counter_Start_IT+0x34>
>>>>>>> main
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
<<<<<<< HEAD
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 80055c8:	60da      	str	r2, [r3, #12]
=======
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 800585c:	60da      	str	r2, [r3, #12]
>>>>>>> main
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
<<<<<<< HEAD
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	691a      	ldr	r2, [r3, #16]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f042 0201 	orr.w	r2, r2, #1
 80055d8:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2210      	movs	r2, #16
 80055e0:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80055ea:	2110      	movs	r1, #16
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f929 	bl	8005844 <LPTIM_WaitForFlag>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b03      	cmp	r3, #3
 80055f6:	d101      	bne.n	80055fc <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e02f      	b.n	800565c <HAL_LPTIM_Counter_Start_IT+0xc6>
=======
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	691a      	ldr	r2, [r3, #16]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f042 0201 	orr.w	r2, r2, #1
 800586c:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2210      	movs	r2, #16
 8005874:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800587e:	2110      	movs	r1, #16
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f929 	bl	8005ad8 <LPTIM_WaitForFlag>
 8005886:	4603      	mov	r3, r0
 8005888:	2b03      	cmp	r3, #3
 800588a:	d101      	bne.n	8005890 <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e02f      	b.n	80058f0 <HAL_LPTIM_Counter_Start_IT+0xc6>
>>>>>>> main
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
<<<<<<< HEAD
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f951 	bl	80058a4 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f90f 	bl	8005826 <HAL_LPTIM_GetState>
 8005608:	4603      	mov	r3, r0
 800560a:	2b03      	cmp	r3, #3
 800560c:	d101      	bne.n	8005612 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e024      	b.n	800565c <HAL_LPTIM_Counter_Start_IT+0xc6>
=======
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f951 	bl	8005b38 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f90f 	bl	8005aba <HAL_LPTIM_GetState>
 800589c:	4603      	mov	r3, r0
 800589e:	2b03      	cmp	r3, #3
 80058a0:	d101      	bne.n	80058a6 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e024      	b.n	80058f0 <HAL_LPTIM_Counter_Start_IT+0xc6>
>>>>>>> main
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
<<<<<<< HEAD
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0210 	orr.w	r2, r2, #16
 8005620:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f042 0202 	orr.w	r2, r2, #2
 8005630:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	691a      	ldr	r2, [r3, #16]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f042 0201 	orr.w	r2, r2, #1
 8005640:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	691a      	ldr	r2, [r3, #16]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f042 0204 	orr.w	r2, r2, #4
 8005650:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_LPTIM_IRQHandler>:
=======
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f042 0210 	orr.w	r2, r2, #16
 80058b4:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f042 0202 	orr.w	r2, r2, #2
 80058c4:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	691a      	ldr	r2, [r3, #16]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f042 0201 	orr.w	r2, r2, #1
 80058d4:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f042 0204 	orr.w	r2, r2, #4
 80058e4:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_LPTIM_IRQHandler>:
>>>>>>> main
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
<<<<<<< HEAD
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b01      	cmp	r3, #1
 8005678:	d10d      	bne.n	8005696 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b01      	cmp	r3, #1
 8005686:	d106      	bne.n	8005696 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2201      	movs	r2, #1
 800568e:	605a      	str	r2, [r3, #4]
=======
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b01      	cmp	r3, #1
 800590c:	d10d      	bne.n	800592a <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b01      	cmp	r3, #1
 800591a:	d106      	bne.n	800592a <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2201      	movs	r2, #1
 8005922:	605a      	str	r2, [r3, #4]
>>>>>>> main

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
<<<<<<< HEAD
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f882 	bl	800579a <HAL_LPTIM_CompareMatchCallback>
=======
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f882 	bl	8005a2e <HAL_LPTIM_CompareMatchCallback>
>>>>>>> main
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
<<<<<<< HEAD
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d10d      	bne.n	80056c0 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d106      	bne.n	80056c0 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2202      	movs	r2, #2
 80056b8:	605a      	str	r2, [r3, #4]
=======
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b02      	cmp	r3, #2
 8005936:	d10d      	bne.n	8005954 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b02      	cmp	r3, #2
 8005944:	d106      	bne.n	8005954 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2202      	movs	r2, #2
 800594c:	605a      	str	r2, [r3, #4]
>>>>>>> main

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
<<<<<<< HEAD
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f877 	bl	80057ae <HAL_LPTIM_AutoReloadMatchCallback>
=======
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f877 	bl	8005a42 <HAL_LPTIM_AutoReloadMatchCallback>
>>>>>>> main
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
<<<<<<< HEAD
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0304 	and.w	r3, r3, #4
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d10d      	bne.n	80056ea <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	2b04      	cmp	r3, #4
 80056da:	d106      	bne.n	80056ea <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2204      	movs	r2, #4
 80056e2:	605a      	str	r2, [r3, #4]
=======
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b04      	cmp	r3, #4
 8005960:	d10d      	bne.n	800597e <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b04      	cmp	r3, #4
 800596e:	d106      	bne.n	800597e <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2204      	movs	r2, #4
 8005976:	605a      	str	r2, [r3, #4]
>>>>>>> main

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
<<<<<<< HEAD
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f86c 	bl	80057c2 <HAL_LPTIM_TriggerCallback>
=======
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f86c 	bl	8005a56 <HAL_LPTIM_TriggerCallback>
>>>>>>> main
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
<<<<<<< HEAD
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0308 	and.w	r3, r3, #8
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d10d      	bne.n	8005714 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f003 0308 	and.w	r3, r3, #8
 8005702:	2b08      	cmp	r3, #8
 8005704:	d106      	bne.n	8005714 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2208      	movs	r2, #8
 800570c:	605a      	str	r2, [r3, #4]
=======
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0308 	and.w	r3, r3, #8
 8005988:	2b08      	cmp	r3, #8
 800598a:	d10d      	bne.n	80059a8 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b08      	cmp	r3, #8
 8005998:	d106      	bne.n	80059a8 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2208      	movs	r2, #8
 80059a0:	605a      	str	r2, [r3, #4]
>>>>>>> main

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
<<<<<<< HEAD
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f861 	bl	80057d6 <HAL_LPTIM_CompareWriteCallback>
=======
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f861 	bl	8005a6a <HAL_LPTIM_CompareWriteCallback>
>>>>>>> main
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
<<<<<<< HEAD
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0310 	and.w	r3, r3, #16
 800571e:	2b10      	cmp	r3, #16
 8005720:	d10d      	bne.n	800573e <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f003 0310 	and.w	r3, r3, #16
 800572c:	2b10      	cmp	r3, #16
 800572e:	d106      	bne.n	800573e <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2210      	movs	r2, #16
 8005736:	605a      	str	r2, [r3, #4]
=======
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0310 	and.w	r3, r3, #16
 80059b2:	2b10      	cmp	r3, #16
 80059b4:	d10d      	bne.n	80059d2 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f003 0310 	and.w	r3, r3, #16
 80059c0:	2b10      	cmp	r3, #16
 80059c2:	d106      	bne.n	80059d2 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2210      	movs	r2, #16
 80059ca:	605a      	str	r2, [r3, #4]
>>>>>>> main

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
<<<<<<< HEAD
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f856 	bl	80057ea <HAL_LPTIM_AutoReloadWriteCallback>
=======
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f856 	bl	8005a7e <HAL_LPTIM_AutoReloadWriteCallback>
>>>>>>> main
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
<<<<<<< HEAD
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0320 	and.w	r3, r3, #32
 8005748:	2b20      	cmp	r3, #32
 800574a:	d10d      	bne.n	8005768 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b20      	cmp	r3, #32
 8005758:	d106      	bne.n	8005768 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2220      	movs	r2, #32
 8005760:	605a      	str	r2, [r3, #4]
=======
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0320 	and.w	r3, r3, #32
 80059dc:	2b20      	cmp	r3, #32
 80059de:	d10d      	bne.n	80059fc <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 0320 	and.w	r3, r3, #32
 80059ea:	2b20      	cmp	r3, #32
 80059ec:	d106      	bne.n	80059fc <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2220      	movs	r2, #32
 80059f4:	605a      	str	r2, [r3, #4]
>>>>>>> main

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
<<<<<<< HEAD
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f84b 	bl	80057fe <HAL_LPTIM_DirectionUpCallback>
=======
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f84b 	bl	8005a92 <HAL_LPTIM_DirectionUpCallback>
>>>>>>> main
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
<<<<<<< HEAD
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005772:	2b40      	cmp	r3, #64	@ 0x40
 8005774:	d10d      	bne.n	8005792 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005780:	2b40      	cmp	r3, #64	@ 0x40
 8005782:	d106      	bne.n	8005792 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2240      	movs	r2, #64	@ 0x40
 800578a:	605a      	str	r2, [r3, #4]
=======
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a06:	2b40      	cmp	r3, #64	@ 0x40
 8005a08:	d10d      	bne.n	8005a26 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a14:	2b40      	cmp	r3, #64	@ 0x40
 8005a16:	d106      	bne.n	8005a26 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2240      	movs	r2, #64	@ 0x40
 8005a1e:	605a      	str	r2, [r3, #4]
>>>>>>> main

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
<<<<<<< HEAD
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f840 	bl	8005812 <HAL_LPTIM_DirectionDownCallback>
=======
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f840 	bl	8005aa6 <HAL_LPTIM_DirectionDownCallback>
>>>>>>> main
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8005792:	bf00      	nop
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <HAL_LPTIM_CompareMatchCallback>:
=======
 8005a26:	bf00      	nop
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <HAL_LPTIM_CompareMatchCallback>:
>>>>>>> main
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
<<<<<<< HEAD
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
=======
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80057a2:	bf00      	nop
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <HAL_LPTIM_AutoReloadMatchCallback>:
=======
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <HAL_LPTIM_AutoReloadMatchCallback>:
>>>>>>> main
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
<<<<<<< HEAD
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
=======
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <HAL_LPTIM_TriggerCallback>:
=======
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <HAL_LPTIM_TriggerCallback>:
>>>>>>> main
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
<<<<<<< HEAD
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
=======
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <HAL_LPTIM_CompareWriteCallback>:
=======
 8005a5e:	bf00      	nop
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <HAL_LPTIM_CompareWriteCallback>:
>>>>>>> main
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
<<<<<<< HEAD
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
=======
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <HAL_LPTIM_AutoReloadWriteCallback>:
=======
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <HAL_LPTIM_AutoReloadWriteCallback>:
>>>>>>> main
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
<<<<<<< HEAD
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
=======
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <HAL_LPTIM_DirectionUpCallback>:
=======
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <HAL_LPTIM_DirectionUpCallback>:
>>>>>>> main
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
<<<<<<< HEAD
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
=======
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <HAL_LPTIM_DirectionDownCallback>:
=======
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <HAL_LPTIM_DirectionDownCallback>:
>>>>>>> main
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
<<<<<<< HEAD
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
=======
 8005aa6:	b480      	push	{r7}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800581a:	bf00      	nop
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <HAL_LPTIM_GetState>:
=======
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <HAL_LPTIM_GetState>:
>>>>>>> main
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
<<<<<<< HEAD
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005834:	b2db      	uxtb	r3, r3
}
 8005836:	4618      	mov	r0, r3
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
	...

08005844 <LPTIM_WaitForFlag>:
=======
 8005aba:	b480      	push	{r7}
 8005abc:	b083      	sub	sp, #12
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005ac8:	b2db      	uxtb	r3, r3
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
	...

08005ad8 <LPTIM_WaitForFlag>:
>>>>>>> main
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
<<<<<<< HEAD
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8005852:	4b12      	ldr	r3, [pc, #72]	@ (800589c <LPTIM_WaitForFlag+0x58>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a12      	ldr	r2, [pc, #72]	@ (80058a0 <LPTIM_WaitForFlag+0x5c>)
 8005858:	fba2 2303 	umull	r2, r3, r2, r3
 800585c:	0b9b      	lsrs	r3, r3, #14
 800585e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005862:	fb02 f303 	mul.w	r3, r2, r3
 8005866:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	3b01      	subs	r3, #1
 800586c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	4013      	ands	r3, r2
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	429a      	cmp	r2, r3
 8005886:	d002      	beq.n	800588e <LPTIM_WaitForFlag+0x4a>
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1ec      	bne.n	8005868 <LPTIM_WaitForFlag+0x24>

  return result;
 800588e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	24000010 	.word	0x24000010
 80058a0:	d1b71759 	.word	0xd1b71759

080058a4 <LPTIM_Disable>:
=======
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8005ae6:	4b12      	ldr	r3, [pc, #72]	@ (8005b30 <LPTIM_WaitForFlag+0x58>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a12      	ldr	r2, [pc, #72]	@ (8005b34 <LPTIM_WaitForFlag+0x5c>)
 8005aec:	fba2 2303 	umull	r2, r3, r2, r3
 8005af0:	0b9b      	lsrs	r3, r3, #14
 8005af2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005af6:	fb02 f303 	mul.w	r3, r2, r3
 8005afa:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	4013      	ands	r3, r2
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d002      	beq.n	8005b22 <LPTIM_WaitForFlag+0x4a>
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1ec      	bne.n	8005afc <LPTIM_WaitForFlag+0x24>

  return result;
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	24000008 	.word	0x24000008
 8005b34:	d1b71759 	.word	0xd1b71759

08005b38 <LPTIM_Disable>:
>>>>>>> main
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
<<<<<<< HEAD
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08c      	sub	sp, #48	@ 0x30
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80058ac:	2300      	movs	r3, #0
 80058ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058b0:	f3ef 8310 	mrs	r3, PRIMASK
 80058b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80058b6:	68fb      	ldr	r3, [r7, #12]
=======
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08c      	sub	sp, #48	@ 0x30
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8005b40:	2300      	movs	r3, #0
 8005b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b44:	f3ef 8310 	mrs	r3, PRIMASK
 8005b48:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
>>>>>>> main
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
<<<<<<< HEAD
 80058b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058ba:	2301      	movs	r3, #1
 80058bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f383 8810 	msr	PRIMASK, r3
}
 80058c4:	bf00      	nop
=======
 8005b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b4e:	2301      	movs	r3, #1
 8005b50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f383 8810 	msr	PRIMASK, r3
}
 8005b58:	bf00      	nop
>>>>>>> main
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
<<<<<<< HEAD
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a81      	ldr	r2, [pc, #516]	@ (8005ad0 <LPTIM_Disable+0x22c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d02d      	beq.n	800592c <LPTIM_Disable+0x88>
 80058d0:	4a7f      	ldr	r2, [pc, #508]	@ (8005ad0 <LPTIM_Disable+0x22c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d830      	bhi.n	8005938 <LPTIM_Disable+0x94>
 80058d6:	4a7f      	ldr	r2, [pc, #508]	@ (8005ad4 <LPTIM_Disable+0x230>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d021      	beq.n	8005920 <LPTIM_Disable+0x7c>
 80058dc:	4a7d      	ldr	r2, [pc, #500]	@ (8005ad4 <LPTIM_Disable+0x230>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d82a      	bhi.n	8005938 <LPTIM_Disable+0x94>
 80058e2:	4a7d      	ldr	r2, [pc, #500]	@ (8005ad8 <LPTIM_Disable+0x234>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d015      	beq.n	8005914 <LPTIM_Disable+0x70>
 80058e8:	4a7b      	ldr	r2, [pc, #492]	@ (8005ad8 <LPTIM_Disable+0x234>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d824      	bhi.n	8005938 <LPTIM_Disable+0x94>
 80058ee:	4a7b      	ldr	r2, [pc, #492]	@ (8005adc <LPTIM_Disable+0x238>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d003      	beq.n	80058fc <LPTIM_Disable+0x58>
 80058f4:	4a7a      	ldr	r2, [pc, #488]	@ (8005ae0 <LPTIM_Disable+0x23c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d006      	beq.n	8005908 <LPTIM_Disable+0x64>
=======
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a81      	ldr	r2, [pc, #516]	@ (8005d64 <LPTIM_Disable+0x22c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d02d      	beq.n	8005bc0 <LPTIM_Disable+0x88>
 8005b64:	4a7f      	ldr	r2, [pc, #508]	@ (8005d64 <LPTIM_Disable+0x22c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d830      	bhi.n	8005bcc <LPTIM_Disable+0x94>
 8005b6a:	4a7f      	ldr	r2, [pc, #508]	@ (8005d68 <LPTIM_Disable+0x230>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d021      	beq.n	8005bb4 <LPTIM_Disable+0x7c>
 8005b70:	4a7d      	ldr	r2, [pc, #500]	@ (8005d68 <LPTIM_Disable+0x230>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d82a      	bhi.n	8005bcc <LPTIM_Disable+0x94>
 8005b76:	4a7d      	ldr	r2, [pc, #500]	@ (8005d6c <LPTIM_Disable+0x234>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d015      	beq.n	8005ba8 <LPTIM_Disable+0x70>
 8005b7c:	4a7b      	ldr	r2, [pc, #492]	@ (8005d6c <LPTIM_Disable+0x234>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d824      	bhi.n	8005bcc <LPTIM_Disable+0x94>
 8005b82:	4a7b      	ldr	r2, [pc, #492]	@ (8005d70 <LPTIM_Disable+0x238>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d003      	beq.n	8005b90 <LPTIM_Disable+0x58>
 8005b88:	4a7a      	ldr	r2, [pc, #488]	@ (8005d74 <LPTIM_Disable+0x23c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d006      	beq.n	8005b9c <LPTIM_Disable+0x64>
>>>>>>> main
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
<<<<<<< HEAD
 80058fa:	e01d      	b.n	8005938 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80058fc:	4b79      	ldr	r3, [pc, #484]	@ (8005ae4 <LPTIM_Disable+0x240>)
 80058fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005900:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005904:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005906:	e018      	b.n	800593a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005908:	4b76      	ldr	r3, [pc, #472]	@ (8005ae4 <LPTIM_Disable+0x240>)
 800590a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800590c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005910:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005912:	e012      	b.n	800593a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8005914:	4b73      	ldr	r3, [pc, #460]	@ (8005ae4 <LPTIM_Disable+0x240>)
 8005916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005918:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800591c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800591e:	e00c      	b.n	800593a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8005920:	4b70      	ldr	r3, [pc, #448]	@ (8005ae4 <LPTIM_Disable+0x240>)
 8005922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005924:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005928:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800592a:	e006      	b.n	800593a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 800592c:	4b6d      	ldr	r3, [pc, #436]	@ (8005ae4 <LPTIM_Disable+0x240>)
 800592e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005930:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005934:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005936:	e000      	b.n	800593a <LPTIM_Disable+0x96>
      break;
 8005938:	bf00      	nop
=======
 8005b8e:	e01d      	b.n	8005bcc <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005b90:	4b79      	ldr	r3, [pc, #484]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b94:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005b9a:	e018      	b.n	8005bce <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005b9c:	4b76      	ldr	r3, [pc, #472]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ba0:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005ba6:	e012      	b.n	8005bce <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8005ba8:	4b73      	ldr	r3, [pc, #460]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bac:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005bb2:	e00c      	b.n	8005bce <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8005bb4:	4b70      	ldr	r3, [pc, #448]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005bbe:	e006      	b.n	8005bce <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8005bc0:	4b6d      	ldr	r3, [pc, #436]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005bca:	e000      	b.n	8005bce <LPTIM_Disable+0x96>
      break;
 8005bcc:	bf00      	nop
>>>>>>> main
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
<<<<<<< HEAD
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005960:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a5a      	ldr	r2, [pc, #360]	@ (8005ad0 <LPTIM_Disable+0x22c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d059      	beq.n	8005a20 <LPTIM_Disable+0x17c>
 800596c:	4a58      	ldr	r2, [pc, #352]	@ (8005ad0 <LPTIM_Disable+0x22c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d867      	bhi.n	8005a42 <LPTIM_Disable+0x19e>
 8005972:	4a58      	ldr	r2, [pc, #352]	@ (8005ad4 <LPTIM_Disable+0x230>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d042      	beq.n	80059fe <LPTIM_Disable+0x15a>
 8005978:	4a56      	ldr	r2, [pc, #344]	@ (8005ad4 <LPTIM_Disable+0x230>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d861      	bhi.n	8005a42 <LPTIM_Disable+0x19e>
 800597e:	4a56      	ldr	r2, [pc, #344]	@ (8005ad8 <LPTIM_Disable+0x234>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d02b      	beq.n	80059dc <LPTIM_Disable+0x138>
 8005984:	4a54      	ldr	r2, [pc, #336]	@ (8005ad8 <LPTIM_Disable+0x234>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d85b      	bhi.n	8005a42 <LPTIM_Disable+0x19e>
 800598a:	4a54      	ldr	r2, [pc, #336]	@ (8005adc <LPTIM_Disable+0x238>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d003      	beq.n	8005998 <LPTIM_Disable+0xf4>
 8005990:	4a53      	ldr	r2, [pc, #332]	@ (8005ae0 <LPTIM_Disable+0x23c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d011      	beq.n	80059ba <LPTIM_Disable+0x116>
=======
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf4:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a5a      	ldr	r2, [pc, #360]	@ (8005d64 <LPTIM_Disable+0x22c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d059      	beq.n	8005cb4 <LPTIM_Disable+0x17c>
 8005c00:	4a58      	ldr	r2, [pc, #352]	@ (8005d64 <LPTIM_Disable+0x22c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d867      	bhi.n	8005cd6 <LPTIM_Disable+0x19e>
 8005c06:	4a58      	ldr	r2, [pc, #352]	@ (8005d68 <LPTIM_Disable+0x230>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d042      	beq.n	8005c92 <LPTIM_Disable+0x15a>
 8005c0c:	4a56      	ldr	r2, [pc, #344]	@ (8005d68 <LPTIM_Disable+0x230>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d861      	bhi.n	8005cd6 <LPTIM_Disable+0x19e>
 8005c12:	4a56      	ldr	r2, [pc, #344]	@ (8005d6c <LPTIM_Disable+0x234>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d02b      	beq.n	8005c70 <LPTIM_Disable+0x138>
 8005c18:	4a54      	ldr	r2, [pc, #336]	@ (8005d6c <LPTIM_Disable+0x234>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d85b      	bhi.n	8005cd6 <LPTIM_Disable+0x19e>
 8005c1e:	4a54      	ldr	r2, [pc, #336]	@ (8005d70 <LPTIM_Disable+0x238>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d003      	beq.n	8005c2c <LPTIM_Disable+0xf4>
 8005c24:	4a53      	ldr	r2, [pc, #332]	@ (8005d74 <LPTIM_Disable+0x23c>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d011      	beq.n	8005c4e <LPTIM_Disable+0x116>
>>>>>>> main
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
<<<<<<< HEAD
 8005996:	e054      	b.n	8005a42 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8005998:	4b52      	ldr	r3, [pc, #328]	@ (8005ae4 <LPTIM_Disable+0x240>)
 800599a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800599e:	4a51      	ldr	r2, [pc, #324]	@ (8005ae4 <LPTIM_Disable+0x240>)
 80059a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80059a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80059a8:	4b4e      	ldr	r3, [pc, #312]	@ (8005ae4 <LPTIM_Disable+0x240>)
 80059aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059ae:	4a4d      	ldr	r2, [pc, #308]	@ (8005ae4 <LPTIM_Disable+0x240>)
 80059b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      break;
 80059b8:	e044      	b.n	8005a44 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80059ba:	4b4a      	ldr	r3, [pc, #296]	@ (8005ae4 <LPTIM_Disable+0x240>)
 80059bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059c0:	4a48      	ldr	r2, [pc, #288]	@ (8005ae4 <LPTIM_Disable+0x240>)
 80059c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80059c6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80059ca:	4b46      	ldr	r3, [pc, #280]	@ (8005ae4 <LPTIM_Disable+0x240>)
 80059cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059d0:	4a44      	ldr	r2, [pc, #272]	@ (8005ae4 <LPTIM_Disable+0x240>)
 80059d2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059d6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 80059da:	e033      	b.n	8005a44 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 80059dc:	4b41      	ldr	r3, [pc, #260]	@ (8005ae4 <LPTIM_Disable+0x240>)
 80059de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059e2:	4a40      	ldr	r2, [pc, #256]	@ (8005ae4 <LPTIM_Disable+0x240>)
 80059e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80059e8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 80059ec:	4b3d      	ldr	r3, [pc, #244]	@ (8005ae4 <LPTIM_Disable+0x240>)
 80059ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059f2:	4a3c      	ldr	r2, [pc, #240]	@ (8005ae4 <LPTIM_Disable+0x240>)
 80059f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059f8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 80059fc:	e022      	b.n	8005a44 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 80059fe:	4b39      	ldr	r3, [pc, #228]	@ (8005ae4 <LPTIM_Disable+0x240>)
 8005a00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a04:	4a37      	ldr	r2, [pc, #220]	@ (8005ae4 <LPTIM_Disable+0x240>)
 8005a06:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005a0a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8005a0e:	4b35      	ldr	r3, [pc, #212]	@ (8005ae4 <LPTIM_Disable+0x240>)
 8005a10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a14:	4a33      	ldr	r2, [pc, #204]	@ (8005ae4 <LPTIM_Disable+0x240>)
 8005a16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a1a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8005a1e:	e011      	b.n	8005a44 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8005a20:	4b30      	ldr	r3, [pc, #192]	@ (8005ae4 <LPTIM_Disable+0x240>)
 8005a22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a26:	4a2f      	ldr	r2, [pc, #188]	@ (8005ae4 <LPTIM_Disable+0x240>)
 8005a28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005a2c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8005a30:	4b2c      	ldr	r3, [pc, #176]	@ (8005ae4 <LPTIM_Disable+0x240>)
 8005a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a36:	4a2b      	ldr	r2, [pc, #172]	@ (8005ae4 <LPTIM_Disable+0x240>)
 8005a38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a3c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8005a40:	e000      	b.n	8005a44 <LPTIM_Disable+0x1a0>
      break;
 8005a42:	bf00      	nop
=======
 8005c2a:	e054      	b.n	8005cd6 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8005c2c:	4b52      	ldr	r3, [pc, #328]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c32:	4a51      	ldr	r2, [pc, #324]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005c34:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8005c3c:	4b4e      	ldr	r3, [pc, #312]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c42:	4a4d      	ldr	r2, [pc, #308]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005c44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      break;
 8005c4c:	e044      	b.n	8005cd8 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8005c4e:	4b4a      	ldr	r3, [pc, #296]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005c50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c54:	4a48      	ldr	r2, [pc, #288]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005c56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c5a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8005c5e:	4b46      	ldr	r3, [pc, #280]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005c60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c64:	4a44      	ldr	r2, [pc, #272]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005c66:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c6a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8005c6e:	e033      	b.n	8005cd8 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8005c70:	4b41      	ldr	r3, [pc, #260]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005c72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c76:	4a40      	ldr	r2, [pc, #256]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005c78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005c7c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8005c80:	4b3d      	ldr	r3, [pc, #244]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c86:	4a3c      	ldr	r2, [pc, #240]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005c88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c8c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8005c90:	e022      	b.n	8005cd8 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8005c92:	4b39      	ldr	r3, [pc, #228]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005c94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c98:	4a37      	ldr	r2, [pc, #220]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005c9a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005c9e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8005ca2:	4b35      	ldr	r3, [pc, #212]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005ca4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ca8:	4a33      	ldr	r2, [pc, #204]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005caa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cae:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8005cb2:	e011      	b.n	8005cd8 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8005cb4:	4b30      	ldr	r3, [pc, #192]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005cb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cba:	4a2f      	ldr	r2, [pc, #188]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005cbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005cc0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8005cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cca:	4a2b      	ldr	r2, [pc, #172]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005ccc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cd0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8005cd4:	e000      	b.n	8005cd8 <LPTIM_Disable+0x1a0>
      break;
 8005cd6:	bf00      	nop
>>>>>>> main
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
<<<<<<< HEAD
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d103      	bne.n	8005a52 <LPTIM_Disable+0x1ae>
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 80d1 	beq.w	8005bf4 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a1e      	ldr	r2, [pc, #120]	@ (8005ad0 <LPTIM_Disable+0x22c>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d031      	beq.n	8005ac0 <LPTIM_Disable+0x21c>
 8005a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ad0 <LPTIM_Disable+0x22c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d842      	bhi.n	8005ae8 <LPTIM_Disable+0x244>
 8005a62:	4a1c      	ldr	r2, [pc, #112]	@ (8005ad4 <LPTIM_Disable+0x230>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d024      	beq.n	8005ab2 <LPTIM_Disable+0x20e>
 8005a68:	4a1a      	ldr	r2, [pc, #104]	@ (8005ad4 <LPTIM_Disable+0x230>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d83c      	bhi.n	8005ae8 <LPTIM_Disable+0x244>
 8005a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ad8 <LPTIM_Disable+0x234>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d017      	beq.n	8005aa4 <LPTIM_Disable+0x200>
 8005a74:	4a18      	ldr	r2, [pc, #96]	@ (8005ad8 <LPTIM_Disable+0x234>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d836      	bhi.n	8005ae8 <LPTIM_Disable+0x244>
 8005a7a:	4a18      	ldr	r2, [pc, #96]	@ (8005adc <LPTIM_Disable+0x238>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d003      	beq.n	8005a88 <LPTIM_Disable+0x1e4>
 8005a80:	4a17      	ldr	r2, [pc, #92]	@ (8005ae0 <LPTIM_Disable+0x23c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d007      	beq.n	8005a96 <LPTIM_Disable+0x1f2>
=======
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d103      	bne.n	8005ce6 <LPTIM_Disable+0x1ae>
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 80d1 	beq.w	8005e88 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a1e      	ldr	r2, [pc, #120]	@ (8005d64 <LPTIM_Disable+0x22c>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d031      	beq.n	8005d54 <LPTIM_Disable+0x21c>
 8005cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8005d64 <LPTIM_Disable+0x22c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d842      	bhi.n	8005d7c <LPTIM_Disable+0x244>
 8005cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8005d68 <LPTIM_Disable+0x230>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d024      	beq.n	8005d46 <LPTIM_Disable+0x20e>
 8005cfc:	4a1a      	ldr	r2, [pc, #104]	@ (8005d68 <LPTIM_Disable+0x230>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d83c      	bhi.n	8005d7c <LPTIM_Disable+0x244>
 8005d02:	4a1a      	ldr	r2, [pc, #104]	@ (8005d6c <LPTIM_Disable+0x234>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d017      	beq.n	8005d38 <LPTIM_Disable+0x200>
 8005d08:	4a18      	ldr	r2, [pc, #96]	@ (8005d6c <LPTIM_Disable+0x234>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d836      	bhi.n	8005d7c <LPTIM_Disable+0x244>
 8005d0e:	4a18      	ldr	r2, [pc, #96]	@ (8005d70 <LPTIM_Disable+0x238>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d003      	beq.n	8005d1c <LPTIM_Disable+0x1e4>
 8005d14:	4a17      	ldr	r2, [pc, #92]	@ (8005d74 <LPTIM_Disable+0x23c>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d007      	beq.n	8005d2a <LPTIM_Disable+0x1f2>
>>>>>>> main
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
<<<<<<< HEAD
 8005a86:	e02f      	b.n	8005ae8 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8005a88:	4b16      	ldr	r3, [pc, #88]	@ (8005ae4 <LPTIM_Disable+0x240>)
 8005a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a8c:	4a15      	ldr	r2, [pc, #84]	@ (8005ae4 <LPTIM_Disable+0x240>)
 8005a8e:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8005a92:	6553      	str	r3, [r2, #84]	@ 0x54
        break;
 8005a94:	e029      	b.n	8005aea <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8005a96:	4b13      	ldr	r3, [pc, #76]	@ (8005ae4 <LPTIM_Disable+0x240>)
 8005a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a9a:	4a12      	ldr	r2, [pc, #72]	@ (8005ae4 <LPTIM_Disable+0x240>)
 8005a9c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8005aa0:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005aa2:	e022      	b.n	8005aea <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8005aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8005ae4 <LPTIM_Disable+0x240>)
 8005aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aa8:	4a0e      	ldr	r2, [pc, #56]	@ (8005ae4 <LPTIM_Disable+0x240>)
 8005aaa:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005aae:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005ab0:	e01b      	b.n	8005aea <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8005ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ae4 <LPTIM_Disable+0x240>)
 8005ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab6:	4a0b      	ldr	r2, [pc, #44]	@ (8005ae4 <LPTIM_Disable+0x240>)
 8005ab8:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005abc:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005abe:	e014      	b.n	8005aea <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8005ac0:	4b08      	ldr	r3, [pc, #32]	@ (8005ae4 <LPTIM_Disable+0x240>)
 8005ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac4:	4a07      	ldr	r2, [pc, #28]	@ (8005ae4 <LPTIM_Disable+0x240>)
 8005ac6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005aca:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005acc:	e00d      	b.n	8005aea <LPTIM_Disable+0x246>
 8005ace:	bf00      	nop
 8005ad0:	58003000 	.word	0x58003000
 8005ad4:	58002c00 	.word	0x58002c00
 8005ad8:	58002800 	.word	0x58002800
 8005adc:	40002400 	.word	0x40002400
 8005ae0:	58002400 	.word	0x58002400
 8005ae4:	58024400 	.word	0x58024400
        break;
 8005ae8:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d01a      	beq.n	8005b26 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691a      	ldr	r2, [r3, #16]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0201 	orr.w	r2, r2, #1
 8005afe:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	69fa      	ldr	r2, [r7, #28]
 8005b06:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8005b08:	2108      	movs	r1, #8
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7ff fe9a 	bl	8005844 <LPTIM_WaitForFlag>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b03      	cmp	r3, #3
 8005b14:	d103      	bne.n	8005b1e <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2203      	movs	r2, #3
 8005b1a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2208      	movs	r2, #8
 8005b24:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d01a      	beq.n	8005b62 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691a      	ldr	r2, [r3, #16]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0201 	orr.w	r2, r2, #1
 8005b3a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005b44:	2110      	movs	r1, #16
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7ff fe7c 	bl	8005844 <LPTIM_WaitForFlag>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d103      	bne.n	8005b5a <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2203      	movs	r2, #3
 8005b56:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2210      	movs	r2, #16
 8005b60:	605a      	str	r2, [r3, #4]
=======
 8005d1a:	e02f      	b.n	8005d7c <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8005d1c:	4b16      	ldr	r3, [pc, #88]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d20:	4a15      	ldr	r2, [pc, #84]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005d22:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8005d26:	6553      	str	r3, [r2, #84]	@ 0x54
        break;
 8005d28:	e029      	b.n	8005d7e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8005d2a:	4b13      	ldr	r3, [pc, #76]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d2e:	4a12      	ldr	r2, [pc, #72]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005d30:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8005d34:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005d36:	e022      	b.n	8005d7e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8005d38:	4b0f      	ldr	r3, [pc, #60]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d3c:	4a0e      	ldr	r2, [pc, #56]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005d3e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005d42:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005d44:	e01b      	b.n	8005d7e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8005d46:	4b0c      	ldr	r3, [pc, #48]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d4a:	4a0b      	ldr	r2, [pc, #44]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005d4c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005d50:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005d52:	e014      	b.n	8005d7e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8005d54:	4b08      	ldr	r3, [pc, #32]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d58:	4a07      	ldr	r2, [pc, #28]	@ (8005d78 <LPTIM_Disable+0x240>)
 8005d5a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005d5e:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005d60:	e00d      	b.n	8005d7e <LPTIM_Disable+0x246>
 8005d62:	bf00      	nop
 8005d64:	58003000 	.word	0x58003000
 8005d68:	58002c00 	.word	0x58002c00
 8005d6c:	58002800 	.word	0x58002800
 8005d70:	40002400 	.word	0x40002400
 8005d74:	58002400 	.word	0x58002400
 8005d78:	58024400 	.word	0x58024400
        break;
 8005d7c:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d01a      	beq.n	8005dba <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	691a      	ldr	r2, [r3, #16]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0201 	orr.w	r2, r2, #1
 8005d92:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	69fa      	ldr	r2, [r7, #28]
 8005d9a:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8005d9c:	2108      	movs	r1, #8
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7ff fe9a 	bl	8005ad8 <LPTIM_WaitForFlag>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b03      	cmp	r3, #3
 8005da8:	d103      	bne.n	8005db2 <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2203      	movs	r2, #3
 8005dae:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2208      	movs	r2, #8
 8005db8:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d01a      	beq.n	8005df6 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	691a      	ldr	r2, [r3, #16]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0201 	orr.w	r2, r2, #1
 8005dce:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005dd8:	2110      	movs	r1, #16
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7ff fe7c 	bl	8005ad8 <LPTIM_WaitForFlag>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d103      	bne.n	8005dee <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2203      	movs	r2, #3
 8005dea:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2210      	movs	r2, #16
 8005df4:	605a      	str	r2, [r3, #4]
>>>>>>> main
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
<<<<<<< HEAD
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a32      	ldr	r2, [pc, #200]	@ (8005c30 <LPTIM_Disable+0x38c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d039      	beq.n	8005be0 <LPTIM_Disable+0x33c>
 8005b6c:	4a30      	ldr	r2, [pc, #192]	@ (8005c30 <LPTIM_Disable+0x38c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d83f      	bhi.n	8005bf2 <LPTIM_Disable+0x34e>
 8005b72:	4a30      	ldr	r2, [pc, #192]	@ (8005c34 <LPTIM_Disable+0x390>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d02a      	beq.n	8005bce <LPTIM_Disable+0x32a>
 8005b78:	4a2e      	ldr	r2, [pc, #184]	@ (8005c34 <LPTIM_Disable+0x390>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d839      	bhi.n	8005bf2 <LPTIM_Disable+0x34e>
 8005b7e:	4a2e      	ldr	r2, [pc, #184]	@ (8005c38 <LPTIM_Disable+0x394>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d01b      	beq.n	8005bbc <LPTIM_Disable+0x318>
 8005b84:	4a2c      	ldr	r2, [pc, #176]	@ (8005c38 <LPTIM_Disable+0x394>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d833      	bhi.n	8005bf2 <LPTIM_Disable+0x34e>
 8005b8a:	4a2c      	ldr	r2, [pc, #176]	@ (8005c3c <LPTIM_Disable+0x398>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d003      	beq.n	8005b98 <LPTIM_Disable+0x2f4>
 8005b90:	4a2b      	ldr	r2, [pc, #172]	@ (8005c40 <LPTIM_Disable+0x39c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d009      	beq.n	8005baa <LPTIM_Disable+0x306>
=======
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a32      	ldr	r2, [pc, #200]	@ (8005ec4 <LPTIM_Disable+0x38c>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d039      	beq.n	8005e74 <LPTIM_Disable+0x33c>
 8005e00:	4a30      	ldr	r2, [pc, #192]	@ (8005ec4 <LPTIM_Disable+0x38c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d83f      	bhi.n	8005e86 <LPTIM_Disable+0x34e>
 8005e06:	4a30      	ldr	r2, [pc, #192]	@ (8005ec8 <LPTIM_Disable+0x390>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d02a      	beq.n	8005e62 <LPTIM_Disable+0x32a>
 8005e0c:	4a2e      	ldr	r2, [pc, #184]	@ (8005ec8 <LPTIM_Disable+0x390>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d839      	bhi.n	8005e86 <LPTIM_Disable+0x34e>
 8005e12:	4a2e      	ldr	r2, [pc, #184]	@ (8005ecc <LPTIM_Disable+0x394>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d01b      	beq.n	8005e50 <LPTIM_Disable+0x318>
 8005e18:	4a2c      	ldr	r2, [pc, #176]	@ (8005ecc <LPTIM_Disable+0x394>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d833      	bhi.n	8005e86 <LPTIM_Disable+0x34e>
 8005e1e:	4a2c      	ldr	r2, [pc, #176]	@ (8005ed0 <LPTIM_Disable+0x398>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d003      	beq.n	8005e2c <LPTIM_Disable+0x2f4>
 8005e24:	4a2b      	ldr	r2, [pc, #172]	@ (8005ed4 <LPTIM_Disable+0x39c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d009      	beq.n	8005e3e <LPTIM_Disable+0x306>
>>>>>>> main
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
<<<<<<< HEAD
 8005b96:	e02c      	b.n	8005bf2 <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8005b98:	4b2a      	ldr	r3, [pc, #168]	@ (8005c44 <LPTIM_Disable+0x3a0>)
 8005b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b9c:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8005ba0:	4928      	ldr	r1, [pc, #160]	@ (8005c44 <LPTIM_Disable+0x3a0>)
 8005ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	654b      	str	r3, [r1, #84]	@ 0x54
        break;
 8005ba8:	e024      	b.n	8005bf4 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8005baa:	4b26      	ldr	r3, [pc, #152]	@ (8005c44 <LPTIM_Disable+0x3a0>)
 8005bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bae:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005bb2:	4924      	ldr	r1, [pc, #144]	@ (8005c44 <LPTIM_Disable+0x3a0>)
 8005bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8005bba:	e01b      	b.n	8005bf4 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8005bbc:	4b21      	ldr	r3, [pc, #132]	@ (8005c44 <LPTIM_Disable+0x3a0>)
 8005bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005bc4:	491f      	ldr	r1, [pc, #124]	@ (8005c44 <LPTIM_Disable+0x3a0>)
 8005bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8005bcc:	e012      	b.n	8005bf4 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8005bce:	4b1d      	ldr	r3, [pc, #116]	@ (8005c44 <LPTIM_Disable+0x3a0>)
 8005bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005bd6:	491b      	ldr	r1, [pc, #108]	@ (8005c44 <LPTIM_Disable+0x3a0>)
 8005bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8005bde:	e009      	b.n	8005bf4 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8005be0:	4b18      	ldr	r3, [pc, #96]	@ (8005c44 <LPTIM_Disable+0x3a0>)
 8005be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005be4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005be8:	4916      	ldr	r1, [pc, #88]	@ (8005c44 <LPTIM_Disable+0x3a0>)
 8005bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bec:	4313      	orrs	r3, r2
 8005bee:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8005bf0:	e000      	b.n	8005bf4 <LPTIM_Disable+0x350>
        break;
 8005bf2:	bf00      	nop
=======
 8005e2a:	e02c      	b.n	8005e86 <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8005e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8005ed8 <LPTIM_Disable+0x3a0>)
 8005e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e30:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8005e34:	4928      	ldr	r1, [pc, #160]	@ (8005ed8 <LPTIM_Disable+0x3a0>)
 8005e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	654b      	str	r3, [r1, #84]	@ 0x54
        break;
 8005e3c:	e024      	b.n	8005e88 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8005e3e:	4b26      	ldr	r3, [pc, #152]	@ (8005ed8 <LPTIM_Disable+0x3a0>)
 8005e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e42:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005e46:	4924      	ldr	r1, [pc, #144]	@ (8005ed8 <LPTIM_Disable+0x3a0>)
 8005e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8005e4e:	e01b      	b.n	8005e88 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8005e50:	4b21      	ldr	r3, [pc, #132]	@ (8005ed8 <LPTIM_Disable+0x3a0>)
 8005e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e54:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e58:	491f      	ldr	r1, [pc, #124]	@ (8005ed8 <LPTIM_Disable+0x3a0>)
 8005e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8005e60:	e012      	b.n	8005e88 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8005e62:	4b1d      	ldr	r3, [pc, #116]	@ (8005ed8 <LPTIM_Disable+0x3a0>)
 8005e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e6a:	491b      	ldr	r1, [pc, #108]	@ (8005ed8 <LPTIM_Disable+0x3a0>)
 8005e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8005e72:	e009      	b.n	8005e88 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8005e74:	4b18      	ldr	r3, [pc, #96]	@ (8005ed8 <LPTIM_Disable+0x3a0>)
 8005e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e78:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e7c:	4916      	ldr	r1, [pc, #88]	@ (8005ed8 <LPTIM_Disable+0x3a0>)
 8005e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e80:	4313      	orrs	r3, r2
 8005e82:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8005e84:	e000      	b.n	8005e88 <LPTIM_Disable+0x350>
        break;
 8005e86:	bf00      	nop
>>>>>>> main
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
<<<<<<< HEAD
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691a      	ldr	r2, [r3, #16]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0201 	bic.w	r2, r2, #1
 8005c02:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c0a:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6a3a      	ldr	r2, [r7, #32]
 8005c12:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f383 8810 	msr	PRIMASK, r3
}
 8005c26:	bf00      	nop
=======
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	691a      	ldr	r2, [r3, #16]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0201 	bic.w	r2, r2, #1
 8005e96:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e9e:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6a3a      	ldr	r2, [r7, #32]
 8005ea6:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	625a      	str	r2, [r3, #36]	@ 0x24
 8005eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f383 8810 	msr	PRIMASK, r3
}
 8005eba:	bf00      	nop
>>>>>>> main

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
<<<<<<< HEAD
 8005c28:	bf00      	nop
 8005c2a:	3730      	adds	r7, #48	@ 0x30
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	58003000 	.word	0x58003000
 8005c34:	58002c00 	.word	0x58002c00
 8005c38:	58002800 	.word	0x58002800
 8005c3c:	40002400 	.word	0x40002400
 8005c40:	58002400 	.word	0x58002400
 8005c44:	58024400 	.word	0x58024400

08005c48 <HAL_PWREx_ConfigSupply>:
=======
 8005ebc:	bf00      	nop
 8005ebe:	3730      	adds	r7, #48	@ 0x30
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	58003000 	.word	0x58003000
 8005ec8:	58002c00 	.word	0x58002c00
 8005ecc:	58002800 	.word	0x58002800
 8005ed0:	40002400 	.word	0x40002400
 8005ed4:	58002400 	.word	0x58002400
 8005ed8:	58024400 	.word	0x58024400

08005edc <HAL_PWREx_ConfigSupply>:
>>>>>>> main
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
<<<<<<< HEAD
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
=======
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
>>>>>>> main
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
<<<<<<< HEAD
 8005c50:	4b19      	ldr	r3, [pc, #100]	@ (8005cb8 <HAL_PWREx_ConfigSupply+0x70>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f003 0304 	and.w	r3, r3, #4
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	d00a      	beq.n	8005c72 <HAL_PWREx_ConfigSupply+0x2a>
=======
 8005ee4:	4b19      	ldr	r3, [pc, #100]	@ (8005f4c <HAL_PWREx_ConfigSupply+0x70>)
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d00a      	beq.n	8005f06 <HAL_PWREx_ConfigSupply+0x2a>
>>>>>>> main
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
<<<<<<< HEAD
 8005c5c:	4b16      	ldr	r3, [pc, #88]	@ (8005cb8 <HAL_PWREx_ConfigSupply+0x70>)
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d001      	beq.n	8005c6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e01f      	b.n	8005cae <HAL_PWREx_ConfigSupply+0x66>
=======
 8005ef0:	4b16      	ldr	r3, [pc, #88]	@ (8005f4c <HAL_PWREx_ConfigSupply+0x70>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f003 0307 	and.w	r3, r3, #7
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d001      	beq.n	8005f02 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e01f      	b.n	8005f42 <HAL_PWREx_ConfigSupply+0x66>
>>>>>>> main
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
<<<<<<< HEAD
 8005c6e:	2300      	movs	r3, #0
 8005c70:	e01d      	b.n	8005cae <HAL_PWREx_ConfigSupply+0x66>
=======
 8005f02:	2300      	movs	r3, #0
 8005f04:	e01d      	b.n	8005f42 <HAL_PWREx_ConfigSupply+0x66>
>>>>>>> main
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
<<<<<<< HEAD
 8005c72:	4b11      	ldr	r3, [pc, #68]	@ (8005cb8 <HAL_PWREx_ConfigSupply+0x70>)
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f023 0207 	bic.w	r2, r3, #7
 8005c7a:	490f      	ldr	r1, [pc, #60]	@ (8005cb8 <HAL_PWREx_ConfigSupply+0x70>)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005c82:	f7fd ffb1 	bl	8003be8 <HAL_GetTick>
 8005c86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c88:	e009      	b.n	8005c9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005c8a:	f7fd ffad 	bl	8003be8 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c98:	d901      	bls.n	8005c9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e007      	b.n	8005cae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c9e:	4b06      	ldr	r3, [pc, #24]	@ (8005cb8 <HAL_PWREx_ConfigSupply+0x70>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ca6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005caa:	d1ee      	bne.n	8005c8a <HAL_PWREx_ConfigSupply+0x42>
=======
 8005f06:	4b11      	ldr	r3, [pc, #68]	@ (8005f4c <HAL_PWREx_ConfigSupply+0x70>)
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f023 0207 	bic.w	r2, r3, #7
 8005f0e:	490f      	ldr	r1, [pc, #60]	@ (8005f4c <HAL_PWREx_ConfigSupply+0x70>)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005f16:	f7fd f9d5 	bl	80032c4 <HAL_GetTick>
 8005f1a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f1c:	e009      	b.n	8005f32 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005f1e:	f7fd f9d1 	bl	80032c4 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f2c:	d901      	bls.n	8005f32 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e007      	b.n	8005f42 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f32:	4b06      	ldr	r3, [pc, #24]	@ (8005f4c <HAL_PWREx_ConfigSupply+0x70>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f3e:	d1ee      	bne.n	8005f1e <HAL_PWREx_ConfigSupply+0x42>
>>>>>>> main
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
<<<<<<< HEAD
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	58024800 	.word	0x58024800

08005cbc <HAL_RCC_OscConfig>:
=======
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	58024800 	.word	0x58024800

08005f50 <HAL_RCC_OscConfig>:
>>>>>>> main
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b08c      	sub	sp, #48	@ 0x30
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
=======
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08c      	sub	sp, #48	@ 0x30
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
>>>>>>> main
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d102      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	f000 bc48 	b.w	8006560 <HAL_RCC_OscConfig+0x8a4>
=======
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d102      	bne.n	8005f64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	f000 bc48 	b.w	80067f4 <HAL_RCC_OscConfig+0x8a4>
>>>>>>> main
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 8088 	beq.w	8005dee <HAL_RCC_OscConfig+0x132>
=======
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 8088 	beq.w	8006082 <HAL_RCC_OscConfig+0x132>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 8005cde:	4b99      	ldr	r3, [pc, #612]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ce8:	4b96      	ldr	r3, [pc, #600]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cec:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf0:	2b10      	cmp	r3, #16
 8005cf2:	d007      	beq.n	8005d04 <HAL_RCC_OscConfig+0x48>
 8005cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf6:	2b18      	cmp	r3, #24
 8005cf8:	d111      	bne.n	8005d1e <HAL_RCC_OscConfig+0x62>
 8005cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfc:	f003 0303 	and.w	r3, r3, #3
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d10c      	bne.n	8005d1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d04:	4b8f      	ldr	r3, [pc, #572]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d06d      	beq.n	8005dec <HAL_RCC_OscConfig+0x130>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d169      	bne.n	8005dec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	f000 bc21 	b.w	8006560 <HAL_RCC_OscConfig+0x8a4>
=======
 8005f72:	4b99      	ldr	r3, [pc, #612]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f7c:	4b96      	ldr	r3, [pc, #600]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8005f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f80:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f84:	2b10      	cmp	r3, #16
 8005f86:	d007      	beq.n	8005f98 <HAL_RCC_OscConfig+0x48>
 8005f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f8a:	2b18      	cmp	r3, #24
 8005f8c:	d111      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x62>
 8005f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f90:	f003 0303 	and.w	r3, r3, #3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d10c      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f98:	4b8f      	ldr	r3, [pc, #572]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d06d      	beq.n	8006080 <HAL_RCC_OscConfig+0x130>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d169      	bne.n	8006080 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	f000 bc21 	b.w	80067f4 <HAL_RCC_OscConfig+0x8a4>
>>>>>>> main
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d26:	d106      	bne.n	8005d36 <HAL_RCC_OscConfig+0x7a>
 8005d28:	4b86      	ldr	r3, [pc, #536]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a85      	ldr	r2, [pc, #532]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005d2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	e02e      	b.n	8005d94 <HAL_RCC_OscConfig+0xd8>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10c      	bne.n	8005d58 <HAL_RCC_OscConfig+0x9c>
 8005d3e:	4b81      	ldr	r3, [pc, #516]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a80      	ldr	r2, [pc, #512]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005d44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	4b7e      	ldr	r3, [pc, #504]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a7d      	ldr	r2, [pc, #500]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005d50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d54:	6013      	str	r3, [r2, #0]
 8005d56:	e01d      	b.n	8005d94 <HAL_RCC_OscConfig+0xd8>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d60:	d10c      	bne.n	8005d7c <HAL_RCC_OscConfig+0xc0>
 8005d62:	4b78      	ldr	r3, [pc, #480]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a77      	ldr	r2, [pc, #476]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005d68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	4b75      	ldr	r3, [pc, #468]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a74      	ldr	r2, [pc, #464]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	e00b      	b.n	8005d94 <HAL_RCC_OscConfig+0xd8>
 8005d7c:	4b71      	ldr	r3, [pc, #452]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a70      	ldr	r2, [pc, #448]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	4b6e      	ldr	r3, [pc, #440]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a6d      	ldr	r2, [pc, #436]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005d8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d013      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d9c:	f7fd ff24 	bl	8003be8 <HAL_GetTick>
 8005da0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005da2:	e008      	b.n	8005db6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005da4:	f7fd ff20 	bl	8003be8 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b64      	cmp	r3, #100	@ 0x64
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e3d4      	b.n	8006560 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005db6:	4b63      	ldr	r3, [pc, #396]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0f0      	beq.n	8005da4 <HAL_RCC_OscConfig+0xe8>
 8005dc2:	e014      	b.n	8005dee <HAL_RCC_OscConfig+0x132>
=======
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fba:	d106      	bne.n	8005fca <HAL_RCC_OscConfig+0x7a>
 8005fbc:	4b86      	ldr	r3, [pc, #536]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a85      	ldr	r2, [pc, #532]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8005fc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fc6:	6013      	str	r3, [r2, #0]
 8005fc8:	e02e      	b.n	8006028 <HAL_RCC_OscConfig+0xd8>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10c      	bne.n	8005fec <HAL_RCC_OscConfig+0x9c>
 8005fd2:	4b81      	ldr	r3, [pc, #516]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a80      	ldr	r2, [pc, #512]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8005fd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	4b7e      	ldr	r3, [pc, #504]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a7d      	ldr	r2, [pc, #500]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8005fe4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	e01d      	b.n	8006028 <HAL_RCC_OscConfig+0xd8>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ff4:	d10c      	bne.n	8006010 <HAL_RCC_OscConfig+0xc0>
 8005ff6:	4b78      	ldr	r3, [pc, #480]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a77      	ldr	r2, [pc, #476]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8005ffc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	4b75      	ldr	r3, [pc, #468]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a74      	ldr	r2, [pc, #464]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8006008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800600c:	6013      	str	r3, [r2, #0]
 800600e:	e00b      	b.n	8006028 <HAL_RCC_OscConfig+0xd8>
 8006010:	4b71      	ldr	r3, [pc, #452]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a70      	ldr	r2, [pc, #448]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8006016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	4b6e      	ldr	r3, [pc, #440]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a6d      	ldr	r2, [pc, #436]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8006022:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d013      	beq.n	8006058 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006030:	f7fd f948 	bl	80032c4 <HAL_GetTick>
 8006034:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006038:	f7fd f944 	bl	80032c4 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b64      	cmp	r3, #100	@ 0x64
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e3d4      	b.n	80067f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800604a:	4b63      	ldr	r3, [pc, #396]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0f0      	beq.n	8006038 <HAL_RCC_OscConfig+0xe8>
 8006056:	e014      	b.n	8006082 <HAL_RCC_OscConfig+0x132>
>>>>>>> main
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8005dc4:	f7fd ff10 	bl	8003be8 <HAL_GetTick>
 8005dc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005dca:	e008      	b.n	8005dde <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dcc:	f7fd ff0c 	bl	8003be8 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b64      	cmp	r3, #100	@ 0x64
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e3c0      	b.n	8006560 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005dde:	4b59      	ldr	r3, [pc, #356]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1f0      	bne.n	8005dcc <HAL_RCC_OscConfig+0x110>
 8005dea:	e000      	b.n	8005dee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dec:	bf00      	nop
=======
 8006058:	f7fd f934 	bl	80032c4 <HAL_GetTick>
 800605c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006060:	f7fd f930 	bl	80032c4 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b64      	cmp	r3, #100	@ 0x64
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e3c0      	b.n	80067f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006072:	4b59      	ldr	r3, [pc, #356]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1f0      	bne.n	8006060 <HAL_RCC_OscConfig+0x110>
 800607e:	e000      	b.n	8006082 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006080:	bf00      	nop
>>>>>>> main
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 80ca 	beq.w	8005f90 <HAL_RCC_OscConfig+0x2d4>
=======
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 80ca 	beq.w	8006224 <HAL_RCC_OscConfig+0x2d4>
>>>>>>> main
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 8005dfc:	4b51      	ldr	r3, [pc, #324]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e04:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e06:	4b4f      	ldr	r3, [pc, #316]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d007      	beq.n	8005e22 <HAL_RCC_OscConfig+0x166>
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	2b18      	cmp	r3, #24
 8005e16:	d156      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x20a>
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d151      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e22:	4b48      	ldr	r3, [pc, #288]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0304 	and.w	r3, r3, #4
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d005      	beq.n	8005e3a <HAL_RCC_OscConfig+0x17e>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e392      	b.n	8006560 <HAL_RCC_OscConfig+0x8a4>
=======
 8006090:	4b51      	ldr	r3, [pc, #324]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006098:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800609a:	4b4f      	ldr	r3, [pc, #316]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 800609c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800609e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d007      	beq.n	80060b6 <HAL_RCC_OscConfig+0x166>
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	2b18      	cmp	r3, #24
 80060aa:	d156      	bne.n	800615a <HAL_RCC_OscConfig+0x20a>
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	f003 0303 	and.w	r3, r3, #3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d151      	bne.n	800615a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060b6:	4b48      	ldr	r3, [pc, #288]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0304 	and.w	r3, r3, #4
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d005      	beq.n	80060ce <HAL_RCC_OscConfig+0x17e>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e392      	b.n	80067f4 <HAL_RCC_OscConfig+0x8a4>
>>>>>>> main
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
<<<<<<< HEAD
 8005e3a:	4b42      	ldr	r3, [pc, #264]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f023 0219 	bic.w	r2, r3, #25
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	493f      	ldr	r1, [pc, #252]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e4c:	f7fd fecc 	bl	8003be8 <HAL_GetTick>
 8005e50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e52:	e008      	b.n	8005e66 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e54:	f7fd fec8 	bl	8003be8 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e37c      	b.n	8006560 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e66:	4b37      	ldr	r3, [pc, #220]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0304 	and.w	r3, r3, #4
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0f0      	beq.n	8005e54 <HAL_RCC_OscConfig+0x198>
=======
 80060ce:	4b42      	ldr	r3, [pc, #264]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f023 0219 	bic.w	r2, r3, #25
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	493f      	ldr	r1, [pc, #252]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e0:	f7fd f8f0 	bl	80032c4 <HAL_GetTick>
 80060e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060e6:	e008      	b.n	80060fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060e8:	f7fd f8ec 	bl	80032c4 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e37c      	b.n	80067f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060fa:	4b37      	ldr	r3, [pc, #220]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0304 	and.w	r3, r3, #4
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0f0      	beq.n	80060e8 <HAL_RCC_OscConfig+0x198>
>>>>>>> main
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8005e72:	f7fd fec5 	bl	8003c00 <HAL_GetREVID>
 8005e76:	4603      	mov	r3, r0
 8005e78:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d817      	bhi.n	8005eb0 <HAL_RCC_OscConfig+0x1f4>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	2b40      	cmp	r3, #64	@ 0x40
 8005e86:	d108      	bne.n	8005e9a <HAL_RCC_OscConfig+0x1de>
 8005e88:	4b2e      	ldr	r3, [pc, #184]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005e90:	4a2c      	ldr	r2, [pc, #176]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005e92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e96:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e98:	e07a      	b.n	8005f90 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	031b      	lsls	r3, r3, #12
 8005ea8:	4926      	ldr	r1, [pc, #152]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005eae:	e06f      	b.n	8005f90 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eb0:	4b24      	ldr	r3, [pc, #144]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	061b      	lsls	r3, r3, #24
 8005ebe:	4921      	ldr	r1, [pc, #132]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ec4:	e064      	b.n	8005f90 <HAL_RCC_OscConfig+0x2d4>
=======
 8006106:	f7fd f8e9 	bl	80032dc <HAL_GetREVID>
 800610a:	4603      	mov	r3, r0
 800610c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006110:	4293      	cmp	r3, r2
 8006112:	d817      	bhi.n	8006144 <HAL_RCC_OscConfig+0x1f4>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	2b40      	cmp	r3, #64	@ 0x40
 800611a:	d108      	bne.n	800612e <HAL_RCC_OscConfig+0x1de>
 800611c:	4b2e      	ldr	r3, [pc, #184]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006124:	4a2c      	ldr	r2, [pc, #176]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8006126:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800612a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800612c:	e07a      	b.n	8006224 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800612e:	4b2a      	ldr	r3, [pc, #168]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	031b      	lsls	r3, r3, #12
 800613c:	4926      	ldr	r1, [pc, #152]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 800613e:	4313      	orrs	r3, r2
 8006140:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006142:	e06f      	b.n	8006224 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006144:	4b24      	ldr	r3, [pc, #144]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	061b      	lsls	r3, r3, #24
 8006152:	4921      	ldr	r1, [pc, #132]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8006154:	4313      	orrs	r3, r2
 8006156:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006158:	e064      	b.n	8006224 <HAL_RCC_OscConfig+0x2d4>
>>>>>>> main
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
<<<<<<< HEAD
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d047      	beq.n	8005f5e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ece:	4b1d      	ldr	r3, [pc, #116]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f023 0219 	bic.w	r2, r3, #25
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	491a      	ldr	r1, [pc, #104]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee0:	f7fd fe82 	bl	8003be8 <HAL_GetTick>
 8005ee4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ee8:	f7fd fe7e 	bl	8003be8 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e332      	b.n	8006560 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005efa:	4b12      	ldr	r3, [pc, #72]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0304 	and.w	r3, r3, #4
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0f0      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x22c>
=======
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d047      	beq.n	80061f2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006162:	4b1d      	ldr	r3, [pc, #116]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f023 0219 	bic.w	r2, r3, #25
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	491a      	ldr	r1, [pc, #104]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8006170:	4313      	orrs	r3, r2
 8006172:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006174:	f7fd f8a6 	bl	80032c4 <HAL_GetTick>
 8006178:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800617a:	e008      	b.n	800618e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800617c:	f7fd f8a2 	bl	80032c4 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d901      	bls.n	800618e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e332      	b.n	80067f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800618e:	4b12      	ldr	r3, [pc, #72]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0304 	and.w	r3, r3, #4
 8006196:	2b00      	cmp	r3, #0
 8006198:	d0f0      	beq.n	800617c <HAL_RCC_OscConfig+0x22c>
>>>>>>> main
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8005f06:	f7fd fe7b 	bl	8003c00 <HAL_GetREVID>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d819      	bhi.n	8005f48 <HAL_RCC_OscConfig+0x28c>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	2b40      	cmp	r3, #64	@ 0x40
 8005f1a:	d108      	bne.n	8005f2e <HAL_RCC_OscConfig+0x272>
 8005f1c:	4b09      	ldr	r3, [pc, #36]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005f24:	4a07      	ldr	r2, [pc, #28]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f2a:	6053      	str	r3, [r2, #4]
 8005f2c:	e030      	b.n	8005f90 <HAL_RCC_OscConfig+0x2d4>
 8005f2e:	4b05      	ldr	r3, [pc, #20]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	031b      	lsls	r3, r3, #12
 8005f3c:	4901      	ldr	r1, [pc, #4]	@ (8005f44 <HAL_RCC_OscConfig+0x288>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	604b      	str	r3, [r1, #4]
 8005f42:	e025      	b.n	8005f90 <HAL_RCC_OscConfig+0x2d4>
 8005f44:	58024400 	.word	0x58024400
 8005f48:	4b9a      	ldr	r3, [pc, #616]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	061b      	lsls	r3, r3, #24
 8005f56:	4997      	ldr	r1, [pc, #604]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	604b      	str	r3, [r1, #4]
 8005f5c:	e018      	b.n	8005f90 <HAL_RCC_OscConfig+0x2d4>
=======
 800619a:	f7fd f89f 	bl	80032dc <HAL_GetREVID>
 800619e:	4603      	mov	r3, r0
 80061a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d819      	bhi.n	80061dc <HAL_RCC_OscConfig+0x28c>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	2b40      	cmp	r3, #64	@ 0x40
 80061ae:	d108      	bne.n	80061c2 <HAL_RCC_OscConfig+0x272>
 80061b0:	4b09      	ldr	r3, [pc, #36]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80061b8:	4a07      	ldr	r2, [pc, #28]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 80061ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061be:	6053      	str	r3, [r2, #4]
 80061c0:	e030      	b.n	8006224 <HAL_RCC_OscConfig+0x2d4>
 80061c2:	4b05      	ldr	r3, [pc, #20]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	031b      	lsls	r3, r3, #12
 80061d0:	4901      	ldr	r1, [pc, #4]	@ (80061d8 <HAL_RCC_OscConfig+0x288>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	604b      	str	r3, [r1, #4]
 80061d6:	e025      	b.n	8006224 <HAL_RCC_OscConfig+0x2d4>
 80061d8:	58024400 	.word	0x58024400
 80061dc:	4b9a      	ldr	r3, [pc, #616]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	061b      	lsls	r3, r3, #24
 80061ea:	4997      	ldr	r1, [pc, #604]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	604b      	str	r3, [r1, #4]
 80061f0:	e018      	b.n	8006224 <HAL_RCC_OscConfig+0x2d4>
>>>>>>> main
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8005f5e:	4b95      	ldr	r3, [pc, #596]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a94      	ldr	r2, [pc, #592]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 8005f64:	f023 0301 	bic.w	r3, r3, #1
 8005f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f6a:	f7fd fe3d 	bl	8003be8 <HAL_GetTick>
 8005f6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f70:	e008      	b.n	8005f84 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f72:	f7fd fe39 	bl	8003be8 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d901      	bls.n	8005f84 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e2ed      	b.n	8006560 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f84:	4b8b      	ldr	r3, [pc, #556]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1f0      	bne.n	8005f72 <HAL_RCC_OscConfig+0x2b6>
=======
 80061f2:	4b95      	ldr	r3, [pc, #596]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a94      	ldr	r2, [pc, #592]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 80061f8:	f023 0301 	bic.w	r3, r3, #1
 80061fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061fe:	f7fd f861 	bl	80032c4 <HAL_GetTick>
 8006202:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006204:	e008      	b.n	8006218 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006206:	f7fd f85d 	bl	80032c4 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	2b02      	cmp	r3, #2
 8006212:	d901      	bls.n	8006218 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e2ed      	b.n	80067f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006218:	4b8b      	ldr	r3, [pc, #556]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1f0      	bne.n	8006206 <HAL_RCC_OscConfig+0x2b6>
>>>>>>> main
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
<<<<<<< HEAD
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0310 	and.w	r3, r3, #16
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 80a9 	beq.w	80060f0 <HAL_RCC_OscConfig+0x434>
=======
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0310 	and.w	r3, r3, #16
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 80a9 	beq.w	8006384 <HAL_RCC_OscConfig+0x434>
>>>>>>> main
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 8005f9e:	4b85      	ldr	r3, [pc, #532]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fa6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fa8:	4b82      	ldr	r3, [pc, #520]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 8005faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d007      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x308>
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	2b18      	cmp	r3, #24
 8005fb8:	d13a      	bne.n	8006030 <HAL_RCC_OscConfig+0x374>
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f003 0303 	and.w	r3, r3, #3
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d135      	bne.n	8006030 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fc4:	4b7b      	ldr	r3, [pc, #492]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d005      	beq.n	8005fdc <HAL_RCC_OscConfig+0x320>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	2b80      	cmp	r3, #128	@ 0x80
 8005fd6:	d001      	beq.n	8005fdc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e2c1      	b.n	8006560 <HAL_RCC_OscConfig+0x8a4>
=======
 8006232:	4b85      	ldr	r3, [pc, #532]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800623a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800623c:	4b82      	ldr	r3, [pc, #520]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 800623e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006240:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	2b08      	cmp	r3, #8
 8006246:	d007      	beq.n	8006258 <HAL_RCC_OscConfig+0x308>
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	2b18      	cmp	r3, #24
 800624c:	d13a      	bne.n	80062c4 <HAL_RCC_OscConfig+0x374>
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f003 0303 	and.w	r3, r3, #3
 8006254:	2b01      	cmp	r3, #1
 8006256:	d135      	bne.n	80062c4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006258:	4b7b      	ldr	r3, [pc, #492]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006260:	2b00      	cmp	r3, #0
 8006262:	d005      	beq.n	8006270 <HAL_RCC_OscConfig+0x320>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	69db      	ldr	r3, [r3, #28]
 8006268:	2b80      	cmp	r3, #128	@ 0x80
 800626a:	d001      	beq.n	8006270 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e2c1      	b.n	80067f4 <HAL_RCC_OscConfig+0x8a4>
>>>>>>> main
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
<<<<<<< HEAD
 8005fdc:	f7fd fe10 	bl	8003c00 <HAL_GetREVID>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d817      	bhi.n	800601a <HAL_RCC_OscConfig+0x35e>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	2b20      	cmp	r3, #32
 8005ff0:	d108      	bne.n	8006004 <HAL_RCC_OscConfig+0x348>
 8005ff2:	4b70      	ldr	r3, [pc, #448]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005ffa:	4a6e      	ldr	r2, [pc, #440]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 8005ffc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006000:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006002:	e075      	b.n	80060f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006004:	4b6b      	ldr	r3, [pc, #428]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	069b      	lsls	r3, r3, #26
 8006012:	4968      	ldr	r1, [pc, #416]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 8006014:	4313      	orrs	r3, r2
 8006016:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006018:	e06a      	b.n	80060f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800601a:	4b66      	ldr	r3, [pc, #408]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	061b      	lsls	r3, r3, #24
 8006028:	4962      	ldr	r1, [pc, #392]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 800602a:	4313      	orrs	r3, r2
 800602c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800602e:	e05f      	b.n	80060f0 <HAL_RCC_OscConfig+0x434>
=======
 8006270:	f7fd f834 	bl	80032dc <HAL_GetREVID>
 8006274:	4603      	mov	r3, r0
 8006276:	f241 0203 	movw	r2, #4099	@ 0x1003
 800627a:	4293      	cmp	r3, r2
 800627c:	d817      	bhi.n	80062ae <HAL_RCC_OscConfig+0x35e>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	2b20      	cmp	r3, #32
 8006284:	d108      	bne.n	8006298 <HAL_RCC_OscConfig+0x348>
 8006286:	4b70      	ldr	r3, [pc, #448]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800628e:	4a6e      	ldr	r2, [pc, #440]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 8006290:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006294:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006296:	e075      	b.n	8006384 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006298:	4b6b      	ldr	r3, [pc, #428]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	069b      	lsls	r3, r3, #26
 80062a6:	4968      	ldr	r1, [pc, #416]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062ac:	e06a      	b.n	8006384 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062ae:	4b66      	ldr	r3, [pc, #408]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	061b      	lsls	r3, r3, #24
 80062bc:	4962      	ldr	r1, [pc, #392]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062c2:	e05f      	b.n	8006384 <HAL_RCC_OscConfig+0x434>
>>>>>>> main
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
<<<<<<< HEAD
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	69db      	ldr	r3, [r3, #28]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d042      	beq.n	80060be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006038:	4b5e      	ldr	r3, [pc, #376]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a5d      	ldr	r2, [pc, #372]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 800603e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006044:	f7fd fdd0 	bl	8003be8 <HAL_GetTick>
 8006048:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800604a:	e008      	b.n	800605e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800604c:	f7fd fdcc 	bl	8003be8 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b02      	cmp	r3, #2
 8006058:	d901      	bls.n	800605e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e280      	b.n	8006560 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800605e:	4b55      	ldr	r3, [pc, #340]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0f0      	beq.n	800604c <HAL_RCC_OscConfig+0x390>
=======
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d042      	beq.n	8006352 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80062cc:	4b5e      	ldr	r3, [pc, #376]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a5d      	ldr	r2, [pc, #372]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 80062d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d8:	f7fc fff4 	bl	80032c4 <HAL_GetTick>
 80062dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062de:	e008      	b.n	80062f2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80062e0:	f7fc fff0 	bl	80032c4 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d901      	bls.n	80062f2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e280      	b.n	80067f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062f2:	4b55      	ldr	r3, [pc, #340]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0f0      	beq.n	80062e0 <HAL_RCC_OscConfig+0x390>
>>>>>>> main
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
<<<<<<< HEAD
 800606a:	f7fd fdc9 	bl	8003c00 <HAL_GetREVID>
 800606e:	4603      	mov	r3, r0
 8006070:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006074:	4293      	cmp	r3, r2
 8006076:	d817      	bhi.n	80060a8 <HAL_RCC_OscConfig+0x3ec>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	2b20      	cmp	r3, #32
 800607e:	d108      	bne.n	8006092 <HAL_RCC_OscConfig+0x3d6>
 8006080:	4b4c      	ldr	r3, [pc, #304]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006088:	4a4a      	ldr	r2, [pc, #296]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 800608a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800608e:	6053      	str	r3, [r2, #4]
 8006090:	e02e      	b.n	80060f0 <HAL_RCC_OscConfig+0x434>
 8006092:	4b48      	ldr	r3, [pc, #288]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	069b      	lsls	r3, r3, #26
 80060a0:	4944      	ldr	r1, [pc, #272]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	604b      	str	r3, [r1, #4]
 80060a6:	e023      	b.n	80060f0 <HAL_RCC_OscConfig+0x434>
 80060a8:	4b42      	ldr	r3, [pc, #264]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	061b      	lsls	r3, r3, #24
 80060b6:	493f      	ldr	r1, [pc, #252]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	60cb      	str	r3, [r1, #12]
 80060bc:	e018      	b.n	80060f0 <HAL_RCC_OscConfig+0x434>
=======
 80062fe:	f7fc ffed 	bl	80032dc <HAL_GetREVID>
 8006302:	4603      	mov	r3, r0
 8006304:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006308:	4293      	cmp	r3, r2
 800630a:	d817      	bhi.n	800633c <HAL_RCC_OscConfig+0x3ec>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	2b20      	cmp	r3, #32
 8006312:	d108      	bne.n	8006326 <HAL_RCC_OscConfig+0x3d6>
 8006314:	4b4c      	ldr	r3, [pc, #304]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800631c:	4a4a      	ldr	r2, [pc, #296]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 800631e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006322:	6053      	str	r3, [r2, #4]
 8006324:	e02e      	b.n	8006384 <HAL_RCC_OscConfig+0x434>
 8006326:	4b48      	ldr	r3, [pc, #288]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	069b      	lsls	r3, r3, #26
 8006334:	4944      	ldr	r1, [pc, #272]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 8006336:	4313      	orrs	r3, r2
 8006338:	604b      	str	r3, [r1, #4]
 800633a:	e023      	b.n	8006384 <HAL_RCC_OscConfig+0x434>
 800633c:	4b42      	ldr	r3, [pc, #264]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	061b      	lsls	r3, r3, #24
 800634a:	493f      	ldr	r1, [pc, #252]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 800634c:	4313      	orrs	r3, r2
 800634e:	60cb      	str	r3, [r1, #12]
 8006350:	e018      	b.n	8006384 <HAL_RCC_OscConfig+0x434>
>>>>>>> main
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
<<<<<<< HEAD
 80060be:	4b3d      	ldr	r3, [pc, #244]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a3c      	ldr	r2, [pc, #240]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 80060c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ca:	f7fd fd8d 	bl	8003be8 <HAL_GetTick>
 80060ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060d0:	e008      	b.n	80060e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80060d2:	f7fd fd89 	bl	8003be8 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d901      	bls.n	80060e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e23d      	b.n	8006560 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060e4:	4b33      	ldr	r3, [pc, #204]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1f0      	bne.n	80060d2 <HAL_RCC_OscConfig+0x416>
=======
 8006352:	4b3d      	ldr	r3, [pc, #244]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a3c      	ldr	r2, [pc, #240]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 8006358:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800635c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800635e:	f7fc ffb1 	bl	80032c4 <HAL_GetTick>
 8006362:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006364:	e008      	b.n	8006378 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006366:	f7fc ffad 	bl	80032c4 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	2b02      	cmp	r3, #2
 8006372:	d901      	bls.n	8006378 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e23d      	b.n	80067f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006378:	4b33      	ldr	r3, [pc, #204]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1f0      	bne.n	8006366 <HAL_RCC_OscConfig+0x416>
>>>>>>> main
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0308 	and.w	r3, r3, #8
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d036      	beq.n	800616a <HAL_RCC_OscConfig+0x4ae>
=======
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0308 	and.w	r3, r3, #8
 800638c:	2b00      	cmp	r3, #0
 800638e:	d036      	beq.n	80063fe <HAL_RCC_OscConfig+0x4ae>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
<<<<<<< HEAD
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d019      	beq.n	8006138 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006104:	4b2b      	ldr	r3, [pc, #172]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 8006106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006108:	4a2a      	ldr	r2, [pc, #168]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 800610a:	f043 0301 	orr.w	r3, r3, #1
 800610e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006110:	f7fd fd6a 	bl	8003be8 <HAL_GetTick>
 8006114:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006116:	e008      	b.n	800612a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006118:	f7fd fd66 	bl	8003be8 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e21a      	b.n	8006560 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800612a:	4b22      	ldr	r3, [pc, #136]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 800612c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0f0      	beq.n	8006118 <HAL_RCC_OscConfig+0x45c>
 8006136:	e018      	b.n	800616a <HAL_RCC_OscConfig+0x4ae>
=======
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d019      	beq.n	80063cc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006398:	4b2b      	ldr	r3, [pc, #172]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 800639a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800639c:	4a2a      	ldr	r2, [pc, #168]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 800639e:	f043 0301 	orr.w	r3, r3, #1
 80063a2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a4:	f7fc ff8e 	bl	80032c4 <HAL_GetTick>
 80063a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80063aa:	e008      	b.n	80063be <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063ac:	f7fc ff8a 	bl	80032c4 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d901      	bls.n	80063be <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e21a      	b.n	80067f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80063be:	4b22      	ldr	r3, [pc, #136]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 80063c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d0f0      	beq.n	80063ac <HAL_RCC_OscConfig+0x45c>
 80063ca:	e018      	b.n	80063fe <HAL_RCC_OscConfig+0x4ae>
>>>>>>> main
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8006138:	4b1e      	ldr	r3, [pc, #120]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 800613a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800613c:	4a1d      	ldr	r2, [pc, #116]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 800613e:	f023 0301 	bic.w	r3, r3, #1
 8006142:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006144:	f7fd fd50 	bl	8003be8 <HAL_GetTick>
 8006148:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800614a:	e008      	b.n	800615e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800614c:	f7fd fd4c 	bl	8003be8 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e200      	b.n	8006560 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800615e:	4b15      	ldr	r3, [pc, #84]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 8006160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1f0      	bne.n	800614c <HAL_RCC_OscConfig+0x490>
=======
 80063cc:	4b1e      	ldr	r3, [pc, #120]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 80063ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 80063d2:	f023 0301 	bic.w	r3, r3, #1
 80063d6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d8:	f7fc ff74 	bl	80032c4 <HAL_GetTick>
 80063dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063de:	e008      	b.n	80063f2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063e0:	f7fc ff70 	bl	80032c4 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e200      	b.n	80067f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063f2:	4b15      	ldr	r3, [pc, #84]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 80063f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1f0      	bne.n	80063e0 <HAL_RCC_OscConfig+0x490>
>>>>>>> main
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
<<<<<<< HEAD
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b00      	cmp	r3, #0
 8006174:	d039      	beq.n	80061ea <HAL_RCC_OscConfig+0x52e>
=======
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0320 	and.w	r3, r3, #32
 8006406:	2b00      	cmp	r3, #0
 8006408:	d039      	beq.n	800647e <HAL_RCC_OscConfig+0x52e>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
<<<<<<< HEAD
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d01c      	beq.n	80061b8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800617e:	4b0d      	ldr	r3, [pc, #52]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a0c      	ldr	r2, [pc, #48]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 8006184:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006188:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800618a:	f7fd fd2d 	bl	8003be8 <HAL_GetTick>
 800618e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006190:	e008      	b.n	80061a4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006192:	f7fd fd29 	bl	8003be8 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d901      	bls.n	80061a4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e1dd      	b.n	8006560 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061a4:	4b03      	ldr	r3, [pc, #12]	@ (80061b4 <HAL_RCC_OscConfig+0x4f8>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0f0      	beq.n	8006192 <HAL_RCC_OscConfig+0x4d6>
 80061b0:	e01b      	b.n	80061ea <HAL_RCC_OscConfig+0x52e>
 80061b2:	bf00      	nop
 80061b4:	58024400 	.word	0x58024400
=======
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d01c      	beq.n	800644c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006412:	4b0d      	ldr	r3, [pc, #52]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a0c      	ldr	r2, [pc, #48]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 8006418:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800641c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800641e:	f7fc ff51 	bl	80032c4 <HAL_GetTick>
 8006422:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006424:	e008      	b.n	8006438 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006426:	f7fc ff4d 	bl	80032c4 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d901      	bls.n	8006438 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e1dd      	b.n	80067f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006438:	4b03      	ldr	r3, [pc, #12]	@ (8006448 <HAL_RCC_OscConfig+0x4f8>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d0f0      	beq.n	8006426 <HAL_RCC_OscConfig+0x4d6>
 8006444:	e01b      	b.n	800647e <HAL_RCC_OscConfig+0x52e>
 8006446:	bf00      	nop
 8006448:	58024400 	.word	0x58024400
>>>>>>> main
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
<<<<<<< HEAD
 80061b8:	4b9b      	ldr	r3, [pc, #620]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a9a      	ldr	r2, [pc, #616]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 80061be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061c4:	f7fd fd10 	bl	8003be8 <HAL_GetTick>
 80061c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80061ca:	e008      	b.n	80061de <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061cc:	f7fd fd0c 	bl	8003be8 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e1c0      	b.n	8006560 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80061de:	4b92      	ldr	r3, [pc, #584]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1f0      	bne.n	80061cc <HAL_RCC_OscConfig+0x510>
=======
 800644c:	4b9b      	ldr	r3, [pc, #620]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a9a      	ldr	r2, [pc, #616]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 8006452:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006456:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006458:	f7fc ff34 	bl	80032c4 <HAL_GetTick>
 800645c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800645e:	e008      	b.n	8006472 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006460:	f7fc ff30 	bl	80032c4 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b02      	cmp	r3, #2
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e1c0      	b.n	80067f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006472:	4b92      	ldr	r3, [pc, #584]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1f0      	bne.n	8006460 <HAL_RCC_OscConfig+0x510>
>>>>>>> main
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0304 	and.w	r3, r3, #4
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 8081 	beq.w	80062fa <HAL_RCC_OscConfig+0x63e>
=======
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0304 	and.w	r3, r3, #4
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 8081 	beq.w	800658e <HAL_RCC_OscConfig+0x63e>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
<<<<<<< HEAD
 80061f8:	4b8c      	ldr	r3, [pc, #560]	@ (800642c <HAL_RCC_OscConfig+0x770>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a8b      	ldr	r2, [pc, #556]	@ (800642c <HAL_RCC_OscConfig+0x770>)
 80061fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006202:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006204:	f7fd fcf0 	bl	8003be8 <HAL_GetTick>
 8006208:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800620a:	e008      	b.n	800621e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800620c:	f7fd fcec 	bl	8003be8 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b64      	cmp	r3, #100	@ 0x64
 8006218:	d901      	bls.n	800621e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e1a0      	b.n	8006560 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800621e:	4b83      	ldr	r3, [pc, #524]	@ (800642c <HAL_RCC_OscConfig+0x770>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006226:	2b00      	cmp	r3, #0
 8006228:	d0f0      	beq.n	800620c <HAL_RCC_OscConfig+0x550>
=======
 800648c:	4b8c      	ldr	r3, [pc, #560]	@ (80066c0 <HAL_RCC_OscConfig+0x770>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a8b      	ldr	r2, [pc, #556]	@ (80066c0 <HAL_RCC_OscConfig+0x770>)
 8006492:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006496:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006498:	f7fc ff14 	bl	80032c4 <HAL_GetTick>
 800649c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800649e:	e008      	b.n	80064b2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064a0:	f7fc ff10 	bl	80032c4 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b64      	cmp	r3, #100	@ 0x64
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e1a0      	b.n	80067f4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064b2:	4b83      	ldr	r3, [pc, #524]	@ (80066c0 <HAL_RCC_OscConfig+0x770>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0f0      	beq.n	80064a0 <HAL_RCC_OscConfig+0x550>
>>>>>>> main
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d106      	bne.n	8006240 <HAL_RCC_OscConfig+0x584>
 8006232:	4b7d      	ldr	r3, [pc, #500]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 8006234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006236:	4a7c      	ldr	r2, [pc, #496]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 8006238:	f043 0301 	orr.w	r3, r3, #1
 800623c:	6713      	str	r3, [r2, #112]	@ 0x70
 800623e:	e02d      	b.n	800629c <HAL_RCC_OscConfig+0x5e0>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10c      	bne.n	8006262 <HAL_RCC_OscConfig+0x5a6>
 8006248:	4b77      	ldr	r3, [pc, #476]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 800624a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800624c:	4a76      	ldr	r2, [pc, #472]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 800624e:	f023 0301 	bic.w	r3, r3, #1
 8006252:	6713      	str	r3, [r2, #112]	@ 0x70
 8006254:	4b74      	ldr	r3, [pc, #464]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 8006256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006258:	4a73      	ldr	r2, [pc, #460]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 800625a:	f023 0304 	bic.w	r3, r3, #4
 800625e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006260:	e01c      	b.n	800629c <HAL_RCC_OscConfig+0x5e0>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	2b05      	cmp	r3, #5
 8006268:	d10c      	bne.n	8006284 <HAL_RCC_OscConfig+0x5c8>
 800626a:	4b6f      	ldr	r3, [pc, #444]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 800626c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800626e:	4a6e      	ldr	r2, [pc, #440]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 8006270:	f043 0304 	orr.w	r3, r3, #4
 8006274:	6713      	str	r3, [r2, #112]	@ 0x70
 8006276:	4b6c      	ldr	r3, [pc, #432]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 8006278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800627a:	4a6b      	ldr	r2, [pc, #428]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 800627c:	f043 0301 	orr.w	r3, r3, #1
 8006280:	6713      	str	r3, [r2, #112]	@ 0x70
 8006282:	e00b      	b.n	800629c <HAL_RCC_OscConfig+0x5e0>
 8006284:	4b68      	ldr	r3, [pc, #416]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 8006286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006288:	4a67      	ldr	r2, [pc, #412]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 800628a:	f023 0301 	bic.w	r3, r3, #1
 800628e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006290:	4b65      	ldr	r3, [pc, #404]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 8006292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006294:	4a64      	ldr	r2, [pc, #400]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 8006296:	f023 0304 	bic.w	r3, r3, #4
 800629a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d015      	beq.n	80062d0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a4:	f7fd fca0 	bl	8003be8 <HAL_GetTick>
 80062a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062aa:	e00a      	b.n	80062c2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ac:	f7fd fc9c 	bl	8003be8 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e14e      	b.n	8006560 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062c2:	4b59      	ldr	r3, [pc, #356]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 80062c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0ee      	beq.n	80062ac <HAL_RCC_OscConfig+0x5f0>
 80062ce:	e014      	b.n	80062fa <HAL_RCC_OscConfig+0x63e>
=======
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d106      	bne.n	80064d4 <HAL_RCC_OscConfig+0x584>
 80064c6:	4b7d      	ldr	r3, [pc, #500]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 80064c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ca:	4a7c      	ldr	r2, [pc, #496]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 80064cc:	f043 0301 	orr.w	r3, r3, #1
 80064d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80064d2:	e02d      	b.n	8006530 <HAL_RCC_OscConfig+0x5e0>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10c      	bne.n	80064f6 <HAL_RCC_OscConfig+0x5a6>
 80064dc:	4b77      	ldr	r3, [pc, #476]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 80064de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064e0:	4a76      	ldr	r2, [pc, #472]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 80064e2:	f023 0301 	bic.w	r3, r3, #1
 80064e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80064e8:	4b74      	ldr	r3, [pc, #464]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 80064ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ec:	4a73      	ldr	r2, [pc, #460]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 80064ee:	f023 0304 	bic.w	r3, r3, #4
 80064f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80064f4:	e01c      	b.n	8006530 <HAL_RCC_OscConfig+0x5e0>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	2b05      	cmp	r3, #5
 80064fc:	d10c      	bne.n	8006518 <HAL_RCC_OscConfig+0x5c8>
 80064fe:	4b6f      	ldr	r3, [pc, #444]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 8006500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006502:	4a6e      	ldr	r2, [pc, #440]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 8006504:	f043 0304 	orr.w	r3, r3, #4
 8006508:	6713      	str	r3, [r2, #112]	@ 0x70
 800650a:	4b6c      	ldr	r3, [pc, #432]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 800650c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800650e:	4a6b      	ldr	r2, [pc, #428]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 8006510:	f043 0301 	orr.w	r3, r3, #1
 8006514:	6713      	str	r3, [r2, #112]	@ 0x70
 8006516:	e00b      	b.n	8006530 <HAL_RCC_OscConfig+0x5e0>
 8006518:	4b68      	ldr	r3, [pc, #416]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 800651a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800651c:	4a67      	ldr	r2, [pc, #412]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 800651e:	f023 0301 	bic.w	r3, r3, #1
 8006522:	6713      	str	r3, [r2, #112]	@ 0x70
 8006524:	4b65      	ldr	r3, [pc, #404]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 8006526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006528:	4a64      	ldr	r2, [pc, #400]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 800652a:	f023 0304 	bic.w	r3, r3, #4
 800652e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d015      	beq.n	8006564 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006538:	f7fc fec4 	bl	80032c4 <HAL_GetTick>
 800653c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800653e:	e00a      	b.n	8006556 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006540:	f7fc fec0 	bl	80032c4 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800654e:	4293      	cmp	r3, r2
 8006550:	d901      	bls.n	8006556 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e14e      	b.n	80067f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006556:	4b59      	ldr	r3, [pc, #356]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 8006558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d0ee      	beq.n	8006540 <HAL_RCC_OscConfig+0x5f0>
 8006562:	e014      	b.n	800658e <HAL_RCC_OscConfig+0x63e>
>>>>>>> main
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 80062d0:	f7fd fc8a 	bl	8003be8 <HAL_GetTick>
 80062d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062d6:	e00a      	b.n	80062ee <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062d8:	f7fd fc86 	bl	8003be8 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e138      	b.n	8006560 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062ee:	4b4e      	ldr	r3, [pc, #312]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 80062f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1ee      	bne.n	80062d8 <HAL_RCC_OscConfig+0x61c>
=======
 8006564:	f7fc feae 	bl	80032c4 <HAL_GetTick>
 8006568:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800656a:	e00a      	b.n	8006582 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800656c:	f7fc feaa 	bl	80032c4 <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800657a:	4293      	cmp	r3, r2
 800657c:	d901      	bls.n	8006582 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e138      	b.n	80067f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006582:	4b4e      	ldr	r3, [pc, #312]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 8006584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1ee      	bne.n	800656c <HAL_RCC_OscConfig+0x61c>
>>>>>>> main
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 812d 	beq.w	800655e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006304:	4b48      	ldr	r3, [pc, #288]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800630c:	2b18      	cmp	r3, #24
 800630e:	f000 80bd 	beq.w	800648c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006316:	2b02      	cmp	r3, #2
 8006318:	f040 809e 	bne.w	8006458 <HAL_RCC_OscConfig+0x79c>
=======
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 812d 	beq.w	80067f2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006598:	4b48      	ldr	r3, [pc, #288]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065a0:	2b18      	cmp	r3, #24
 80065a2:	f000 80bd 	beq.w	8006720 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	f040 809e 	bne.w	80066ec <HAL_RCC_OscConfig+0x79c>
>>>>>>> main
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 800631c:	4b42      	ldr	r3, [pc, #264]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a41      	ldr	r2, [pc, #260]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 8006322:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006328:	f7fd fc5e 	bl	8003be8 <HAL_GetTick>
 800632c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800632e:	e008      	b.n	8006342 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006330:	f7fd fc5a 	bl	8003be8 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b02      	cmp	r3, #2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e10e      	b.n	8006560 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006342:	4b39      	ldr	r3, [pc, #228]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1f0      	bne.n	8006330 <HAL_RCC_OscConfig+0x674>
=======
 80065b0:	4b42      	ldr	r3, [pc, #264]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a41      	ldr	r2, [pc, #260]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 80065b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065bc:	f7fc fe82 	bl	80032c4 <HAL_GetTick>
 80065c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065c4:	f7fc fe7e 	bl	80032c4 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e10e      	b.n	80067f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065d6:	4b39      	ldr	r3, [pc, #228]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1f0      	bne.n	80065c4 <HAL_RCC_OscConfig+0x674>
>>>>>>> main
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 800634e:	4b36      	ldr	r3, [pc, #216]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 8006350:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006352:	4b37      	ldr	r3, [pc, #220]	@ (8006430 <HAL_RCC_OscConfig+0x774>)
 8006354:	4013      	ands	r3, r2
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800635e:	0112      	lsls	r2, r2, #4
 8006360:	430a      	orrs	r2, r1
 8006362:	4931      	ldr	r1, [pc, #196]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 8006364:	4313      	orrs	r3, r2
 8006366:	628b      	str	r3, [r1, #40]	@ 0x28
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800636c:	3b01      	subs	r3, #1
 800636e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006376:	3b01      	subs	r3, #1
 8006378:	025b      	lsls	r3, r3, #9
 800637a:	b29b      	uxth	r3, r3
 800637c:	431a      	orrs	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006382:	3b01      	subs	r3, #1
 8006384:	041b      	lsls	r3, r3, #16
 8006386:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006390:	3b01      	subs	r3, #1
 8006392:	061b      	lsls	r3, r3, #24
 8006394:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006398:	4923      	ldr	r1, [pc, #140]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 800639a:	4313      	orrs	r3, r2
 800639c:	630b      	str	r3, [r1, #48]	@ 0x30
=======
 80065e2:	4b36      	ldr	r3, [pc, #216]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 80065e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065e6:	4b37      	ldr	r3, [pc, #220]	@ (80066c4 <HAL_RCC_OscConfig+0x774>)
 80065e8:	4013      	ands	r3, r2
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80065f2:	0112      	lsls	r2, r2, #4
 80065f4:	430a      	orrs	r2, r1
 80065f6:	4931      	ldr	r1, [pc, #196]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006600:	3b01      	subs	r3, #1
 8006602:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800660a:	3b01      	subs	r3, #1
 800660c:	025b      	lsls	r3, r3, #9
 800660e:	b29b      	uxth	r3, r3
 8006610:	431a      	orrs	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006616:	3b01      	subs	r3, #1
 8006618:	041b      	lsls	r3, r3, #16
 800661a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800661e:	431a      	orrs	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006624:	3b01      	subs	r3, #1
 8006626:	061b      	lsls	r3, r3, #24
 8006628:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800662c:	4923      	ldr	r1, [pc, #140]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 800662e:	4313      	orrs	r3, r2
 8006630:	630b      	str	r3, [r1, #48]	@ 0x30
>>>>>>> main
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
<<<<<<< HEAD
 800639e:	4b22      	ldr	r3, [pc, #136]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 80063a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a2:	4a21      	ldr	r2, [pc, #132]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 80063a4:	f023 0301 	bic.w	r3, r3, #1
 80063a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80063aa:	4b1f      	ldr	r3, [pc, #124]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 80063ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063ae:	4b21      	ldr	r3, [pc, #132]	@ (8006434 <HAL_RCC_OscConfig+0x778>)
 80063b0:	4013      	ands	r3, r2
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80063b6:	00d2      	lsls	r2, r2, #3
 80063b8:	491b      	ldr	r1, [pc, #108]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80063be:	4b1a      	ldr	r3, [pc, #104]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 80063c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c2:	f023 020c 	bic.w	r2, r3, #12
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ca:	4917      	ldr	r1, [pc, #92]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80063d0:	4b15      	ldr	r3, [pc, #84]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 80063d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d4:	f023 0202 	bic.w	r2, r3, #2
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063dc:	4912      	ldr	r1, [pc, #72]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80063e2:	4b11      	ldr	r3, [pc, #68]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 80063e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e6:	4a10      	ldr	r2, [pc, #64]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 80063e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 80063f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f2:	4a0d      	ldr	r2, [pc, #52]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 80063f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80063fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 80063fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fe:	4a0a      	ldr	r2, [pc, #40]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 8006400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006404:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006406:	4b08      	ldr	r3, [pc, #32]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 8006408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640a:	4a07      	ldr	r2, [pc, #28]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 800640c:	f043 0301 	orr.w	r3, r3, #1
 8006410:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006412:	4b05      	ldr	r3, [pc, #20]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a04      	ldr	r2, [pc, #16]	@ (8006428 <HAL_RCC_OscConfig+0x76c>)
 8006418:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800641c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800641e:	f7fd fbe3 	bl	8003be8 <HAL_GetTick>
 8006422:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006424:	e011      	b.n	800644a <HAL_RCC_OscConfig+0x78e>
 8006426:	bf00      	nop
 8006428:	58024400 	.word	0x58024400
 800642c:	58024800 	.word	0x58024800
 8006430:	fffffc0c 	.word	0xfffffc0c
 8006434:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006438:	f7fd fbd6 	bl	8003be8 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e08a      	b.n	8006560 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800644a:	4b47      	ldr	r3, [pc, #284]	@ (8006568 <HAL_RCC_OscConfig+0x8ac>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d0f0      	beq.n	8006438 <HAL_RCC_OscConfig+0x77c>
 8006456:	e082      	b.n	800655e <HAL_RCC_OscConfig+0x8a2>
=======
 8006632:	4b22      	ldr	r3, [pc, #136]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 8006634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006636:	4a21      	ldr	r2, [pc, #132]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 8006638:	f023 0301 	bic.w	r3, r3, #1
 800663c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800663e:	4b1f      	ldr	r3, [pc, #124]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 8006640:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006642:	4b21      	ldr	r3, [pc, #132]	@ (80066c8 <HAL_RCC_OscConfig+0x778>)
 8006644:	4013      	ands	r3, r2
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800664a:	00d2      	lsls	r2, r2, #3
 800664c:	491b      	ldr	r1, [pc, #108]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 800664e:	4313      	orrs	r3, r2
 8006650:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006652:	4b1a      	ldr	r3, [pc, #104]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 8006654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006656:	f023 020c 	bic.w	r2, r3, #12
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665e:	4917      	ldr	r1, [pc, #92]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 8006660:	4313      	orrs	r3, r2
 8006662:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006664:	4b15      	ldr	r3, [pc, #84]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 8006666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006668:	f023 0202 	bic.w	r2, r3, #2
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006670:	4912      	ldr	r1, [pc, #72]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 8006672:	4313      	orrs	r3, r2
 8006674:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006676:	4b11      	ldr	r3, [pc, #68]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 8006678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667a:	4a10      	ldr	r2, [pc, #64]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 800667c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006680:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006682:	4b0e      	ldr	r3, [pc, #56]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 8006684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006686:	4a0d      	ldr	r2, [pc, #52]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 8006688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800668c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800668e:	4b0b      	ldr	r3, [pc, #44]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 8006690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006692:	4a0a      	ldr	r2, [pc, #40]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 8006694:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006698:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800669a:	4b08      	ldr	r3, [pc, #32]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 800669c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669e:	4a07      	ldr	r2, [pc, #28]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 80066a0:	f043 0301 	orr.w	r3, r3, #1
 80066a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066a6:	4b05      	ldr	r3, [pc, #20]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a04      	ldr	r2, [pc, #16]	@ (80066bc <HAL_RCC_OscConfig+0x76c>)
 80066ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b2:	f7fc fe07 	bl	80032c4 <HAL_GetTick>
 80066b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066b8:	e011      	b.n	80066de <HAL_RCC_OscConfig+0x78e>
 80066ba:	bf00      	nop
 80066bc:	58024400 	.word	0x58024400
 80066c0:	58024800 	.word	0x58024800
 80066c4:	fffffc0c 	.word	0xfffffc0c
 80066c8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066cc:	f7fc fdfa 	bl	80032c4 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d901      	bls.n	80066de <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e08a      	b.n	80067f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066de:	4b47      	ldr	r3, [pc, #284]	@ (80067fc <HAL_RCC_OscConfig+0x8ac>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d0f0      	beq.n	80066cc <HAL_RCC_OscConfig+0x77c>
 80066ea:	e082      	b.n	80067f2 <HAL_RCC_OscConfig+0x8a2>
>>>>>>> main
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8006458:	4b43      	ldr	r3, [pc, #268]	@ (8006568 <HAL_RCC_OscConfig+0x8ac>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a42      	ldr	r2, [pc, #264]	@ (8006568 <HAL_RCC_OscConfig+0x8ac>)
 800645e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006464:	f7fd fbc0 	bl	8003be8 <HAL_GetTick>
 8006468:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800646a:	e008      	b.n	800647e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800646c:	f7fd fbbc 	bl	8003be8 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b02      	cmp	r3, #2
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e070      	b.n	8006560 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800647e:	4b3a      	ldr	r3, [pc, #232]	@ (8006568 <HAL_RCC_OscConfig+0x8ac>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1f0      	bne.n	800646c <HAL_RCC_OscConfig+0x7b0>
 800648a:	e068      	b.n	800655e <HAL_RCC_OscConfig+0x8a2>
=======
 80066ec:	4b43      	ldr	r3, [pc, #268]	@ (80067fc <HAL_RCC_OscConfig+0x8ac>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a42      	ldr	r2, [pc, #264]	@ (80067fc <HAL_RCC_OscConfig+0x8ac>)
 80066f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f8:	f7fc fde4 	bl	80032c4 <HAL_GetTick>
 80066fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066fe:	e008      	b.n	8006712 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006700:	f7fc fde0 	bl	80032c4 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b02      	cmp	r3, #2
 800670c:	d901      	bls.n	8006712 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e070      	b.n	80067f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006712:	4b3a      	ldr	r3, [pc, #232]	@ (80067fc <HAL_RCC_OscConfig+0x8ac>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1f0      	bne.n	8006700 <HAL_RCC_OscConfig+0x7b0>
 800671e:	e068      	b.n	80067f2 <HAL_RCC_OscConfig+0x8a2>
>>>>>>> main
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
<<<<<<< HEAD
 800648c:	4b36      	ldr	r3, [pc, #216]	@ (8006568 <HAL_RCC_OscConfig+0x8ac>)
 800648e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006490:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006492:	4b35      	ldr	r3, [pc, #212]	@ (8006568 <HAL_RCC_OscConfig+0x8ac>)
 8006494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006496:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649c:	2b01      	cmp	r3, #1
 800649e:	d031      	beq.n	8006504 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f003 0203 	and.w	r2, r3, #3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d12a      	bne.n	8006504 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	091b      	lsrs	r3, r3, #4
 80064b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d122      	bne.n	8006504 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d11a      	bne.n	8006504 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	0a5b      	lsrs	r3, r3, #9
 80064d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064dc:	429a      	cmp	r2, r3
 80064de:	d111      	bne.n	8006504 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	0c1b      	lsrs	r3, r3, #16
 80064e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d108      	bne.n	8006504 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	0e1b      	lsrs	r3, r3, #24
 80064f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006500:	429a      	cmp	r2, r3
 8006502:	d001      	beq.n	8006508 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e02b      	b.n	8006560 <HAL_RCC_OscConfig+0x8a4>
=======
 8006720:	4b36      	ldr	r3, [pc, #216]	@ (80067fc <HAL_RCC_OscConfig+0x8ac>)
 8006722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006724:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006726:	4b35      	ldr	r3, [pc, #212]	@ (80067fc <HAL_RCC_OscConfig+0x8ac>)
 8006728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800672a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006730:	2b01      	cmp	r3, #1
 8006732:	d031      	beq.n	8006798 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f003 0203 	and.w	r2, r3, #3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800673e:	429a      	cmp	r2, r3
 8006740:	d12a      	bne.n	8006798 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	091b      	lsrs	r3, r3, #4
 8006746:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800674e:	429a      	cmp	r2, r3
 8006750:	d122      	bne.n	8006798 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800675c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800675e:	429a      	cmp	r2, r3
 8006760:	d11a      	bne.n	8006798 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	0a5b      	lsrs	r3, r3, #9
 8006766:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800676e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006770:	429a      	cmp	r2, r3
 8006772:	d111      	bne.n	8006798 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	0c1b      	lsrs	r3, r3, #16
 8006778:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006780:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006782:	429a      	cmp	r2, r3
 8006784:	d108      	bne.n	8006798 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	0e1b      	lsrs	r3, r3, #24
 800678a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006792:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006794:	429a      	cmp	r2, r3
 8006796:	d001      	beq.n	800679c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e02b      	b.n	80067f4 <HAL_RCC_OscConfig+0x8a4>
>>>>>>> main
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
<<<<<<< HEAD
 8006508:	4b17      	ldr	r3, [pc, #92]	@ (8006568 <HAL_RCC_OscConfig+0x8ac>)
 800650a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800650c:	08db      	lsrs	r3, r3, #3
 800650e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006512:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	429a      	cmp	r2, r3
 800651c:	d01f      	beq.n	800655e <HAL_RCC_OscConfig+0x8a2>
=======
 800679c:	4b17      	ldr	r3, [pc, #92]	@ (80067fc <HAL_RCC_OscConfig+0x8ac>)
 800679e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067a0:	08db      	lsrs	r3, r3, #3
 80067a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067a6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d01f      	beq.n	80067f2 <HAL_RCC_OscConfig+0x8a2>
>>>>>>> main
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
<<<<<<< HEAD
 800651e:	4b12      	ldr	r3, [pc, #72]	@ (8006568 <HAL_RCC_OscConfig+0x8ac>)
 8006520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006522:	4a11      	ldr	r2, [pc, #68]	@ (8006568 <HAL_RCC_OscConfig+0x8ac>)
 8006524:	f023 0301 	bic.w	r3, r3, #1
 8006528:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800652a:	f7fd fb5d 	bl	8003be8 <HAL_GetTick>
 800652e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006530:	bf00      	nop
 8006532:	f7fd fb59 	bl	8003be8 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653a:	4293      	cmp	r3, r2
 800653c:	d0f9      	beq.n	8006532 <HAL_RCC_OscConfig+0x876>
=======
 80067b2:	4b12      	ldr	r3, [pc, #72]	@ (80067fc <HAL_RCC_OscConfig+0x8ac>)
 80067b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b6:	4a11      	ldr	r2, [pc, #68]	@ (80067fc <HAL_RCC_OscConfig+0x8ac>)
 80067b8:	f023 0301 	bic.w	r3, r3, #1
 80067bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80067be:	f7fc fd81 	bl	80032c4 <HAL_GetTick>
 80067c2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80067c4:	bf00      	nop
 80067c6:	f7fc fd7d 	bl	80032c4 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d0f9      	beq.n	80067c6 <HAL_RCC_OscConfig+0x876>
>>>>>>> main
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
<<<<<<< HEAD
 800653e:	4b0a      	ldr	r3, [pc, #40]	@ (8006568 <HAL_RCC_OscConfig+0x8ac>)
 8006540:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006542:	4b0a      	ldr	r3, [pc, #40]	@ (800656c <HAL_RCC_OscConfig+0x8b0>)
 8006544:	4013      	ands	r3, r2
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800654a:	00d2      	lsls	r2, r2, #3
 800654c:	4906      	ldr	r1, [pc, #24]	@ (8006568 <HAL_RCC_OscConfig+0x8ac>)
 800654e:	4313      	orrs	r3, r2
 8006550:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006552:	4b05      	ldr	r3, [pc, #20]	@ (8006568 <HAL_RCC_OscConfig+0x8ac>)
 8006554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006556:	4a04      	ldr	r2, [pc, #16]	@ (8006568 <HAL_RCC_OscConfig+0x8ac>)
 8006558:	f043 0301 	orr.w	r3, r3, #1
 800655c:	62d3      	str	r3, [r2, #44]	@ 0x2c
=======
 80067d2:	4b0a      	ldr	r3, [pc, #40]	@ (80067fc <HAL_RCC_OscConfig+0x8ac>)
 80067d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006800 <HAL_RCC_OscConfig+0x8b0>)
 80067d8:	4013      	ands	r3, r2
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80067de:	00d2      	lsls	r2, r2, #3
 80067e0:	4906      	ldr	r1, [pc, #24]	@ (80067fc <HAL_RCC_OscConfig+0x8ac>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80067e6:	4b05      	ldr	r3, [pc, #20]	@ (80067fc <HAL_RCC_OscConfig+0x8ac>)
 80067e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ea:	4a04      	ldr	r2, [pc, #16]	@ (80067fc <HAL_RCC_OscConfig+0x8ac>)
 80067ec:	f043 0301 	orr.w	r3, r3, #1
 80067f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
>>>>>>> main
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3730      	adds	r7, #48	@ 0x30
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	58024400 	.word	0x58024400
 800656c:	ffff0007 	.word	0xffff0007

08006570 <HAL_RCC_ClockConfig>:
=======
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3730      	adds	r7, #48	@ 0x30
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	58024400 	.word	0x58024400
 8006800:	ffff0007 	.word	0xffff0007

08006804 <HAL_RCC_ClockConfig>:
>>>>>>> main
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
=======
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
>>>>>>> main
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e19c      	b.n	80068be <HAL_RCC_ClockConfig+0x34e>
=======
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e19c      	b.n	8006b52 <HAL_RCC_ClockConfig+0x34e>
>>>>>>> main
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8006584:	4b8a      	ldr	r3, [pc, #552]	@ (80067b0 <HAL_RCC_ClockConfig+0x240>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 030f 	and.w	r3, r3, #15
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d910      	bls.n	80065b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006592:	4b87      	ldr	r3, [pc, #540]	@ (80067b0 <HAL_RCC_ClockConfig+0x240>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f023 020f 	bic.w	r2, r3, #15
 800659a:	4985      	ldr	r1, [pc, #532]	@ (80067b0 <HAL_RCC_ClockConfig+0x240>)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	4313      	orrs	r3, r2
 80065a0:	600b      	str	r3, [r1, #0]
=======
 8006818:	4b8a      	ldr	r3, [pc, #552]	@ (8006a44 <HAL_RCC_ClockConfig+0x240>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 030f 	and.w	r3, r3, #15
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	429a      	cmp	r2, r3
 8006824:	d910      	bls.n	8006848 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006826:	4b87      	ldr	r3, [pc, #540]	@ (8006a44 <HAL_RCC_ClockConfig+0x240>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f023 020f 	bic.w	r2, r3, #15
 800682e:	4985      	ldr	r1, [pc, #532]	@ (8006a44 <HAL_RCC_ClockConfig+0x240>)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	4313      	orrs	r3, r2
 8006834:	600b      	str	r3, [r1, #0]
>>>>>>> main

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 80065a2:	4b83      	ldr	r3, [pc, #524]	@ (80067b0 <HAL_RCC_ClockConfig+0x240>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 030f 	and.w	r3, r3, #15
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d001      	beq.n	80065b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e184      	b.n	80068be <HAL_RCC_ClockConfig+0x34e>
=======
 8006836:	4b83      	ldr	r3, [pc, #524]	@ (8006a44 <HAL_RCC_ClockConfig+0x240>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	429a      	cmp	r2, r3
 8006842:	d001      	beq.n	8006848 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e184      	b.n	8006b52 <HAL_RCC_ClockConfig+0x34e>
>>>>>>> main

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
<<<<<<< HEAD
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d010      	beq.n	80065e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	691a      	ldr	r2, [r3, #16]
 80065c4:	4b7b      	ldr	r3, [pc, #492]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d908      	bls.n	80065e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80065d0:	4b78      	ldr	r3, [pc, #480]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	4975      	ldr	r1, [pc, #468]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	618b      	str	r3, [r1, #24]
=======
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b00      	cmp	r3, #0
 8006852:	d010      	beq.n	8006876 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	691a      	ldr	r2, [r3, #16]
 8006858:	4b7b      	ldr	r3, [pc, #492]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006860:	429a      	cmp	r2, r3
 8006862:	d908      	bls.n	8006876 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006864:	4b78      	ldr	r3, [pc, #480]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	4975      	ldr	r1, [pc, #468]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 8006872:	4313      	orrs	r3, r2
 8006874:	618b      	str	r3, [r1, #24]
>>>>>>> main
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0308 	and.w	r3, r3, #8
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d010      	beq.n	8006610 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	695a      	ldr	r2, [r3, #20]
 80065f2:	4b70      	ldr	r3, [pc, #448]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d908      	bls.n	8006610 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80065fe:	4b6d      	ldr	r3, [pc, #436]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	496a      	ldr	r1, [pc, #424]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 800660c:	4313      	orrs	r3, r2
 800660e:	61cb      	str	r3, [r1, #28]
=======
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0308 	and.w	r3, r3, #8
 800687e:	2b00      	cmp	r3, #0
 8006880:	d010      	beq.n	80068a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	695a      	ldr	r2, [r3, #20]
 8006886:	4b70      	ldr	r3, [pc, #448]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800688e:	429a      	cmp	r2, r3
 8006890:	d908      	bls.n	80068a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006892:	4b6d      	ldr	r3, [pc, #436]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	496a      	ldr	r1, [pc, #424]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	61cb      	str	r3, [r1, #28]
>>>>>>> main
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0310 	and.w	r3, r3, #16
 8006618:	2b00      	cmp	r3, #0
 800661a:	d010      	beq.n	800663e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	699a      	ldr	r2, [r3, #24]
 8006620:	4b64      	ldr	r3, [pc, #400]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006628:	429a      	cmp	r2, r3
 800662a:	d908      	bls.n	800663e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800662c:	4b61      	ldr	r3, [pc, #388]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	495e      	ldr	r1, [pc, #376]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 800663a:	4313      	orrs	r3, r2
 800663c:	61cb      	str	r3, [r1, #28]
=======
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0310 	and.w	r3, r3, #16
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d010      	beq.n	80068d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	699a      	ldr	r2, [r3, #24]
 80068b4:	4b64      	ldr	r3, [pc, #400]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 80068b6:	69db      	ldr	r3, [r3, #28]
 80068b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80068bc:	429a      	cmp	r2, r3
 80068be:	d908      	bls.n	80068d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80068c0:	4b61      	ldr	r3, [pc, #388]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	495e      	ldr	r1, [pc, #376]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	61cb      	str	r3, [r1, #28]
>>>>>>> main
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
<<<<<<< HEAD
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0320 	and.w	r3, r3, #32
 8006646:	2b00      	cmp	r3, #0
 8006648:	d010      	beq.n	800666c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69da      	ldr	r2, [r3, #28]
 800664e:	4b59      	ldr	r3, [pc, #356]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006656:	429a      	cmp	r2, r3
 8006658:	d908      	bls.n	800666c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800665a:	4b56      	ldr	r3, [pc, #344]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	4953      	ldr	r1, [pc, #332]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 8006668:	4313      	orrs	r3, r2
 800666a:	620b      	str	r3, [r1, #32]
=======
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0320 	and.w	r3, r3, #32
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d010      	beq.n	8006900 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	69da      	ldr	r2, [r3, #28]
 80068e2:	4b59      	ldr	r3, [pc, #356]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d908      	bls.n	8006900 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80068ee:	4b56      	ldr	r3, [pc, #344]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	4953      	ldr	r1, [pc, #332]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	620b      	str	r3, [r1, #32]
>>>>>>> main
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d010      	beq.n	800669a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68da      	ldr	r2, [r3, #12]
 800667c:	4b4d      	ldr	r3, [pc, #308]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	f003 030f 	and.w	r3, r3, #15
 8006684:	429a      	cmp	r2, r3
 8006686:	d908      	bls.n	800669a <HAL_RCC_ClockConfig+0x12a>
=======
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0302 	and.w	r3, r3, #2
 8006908:	2b00      	cmp	r3, #0
 800690a:	d010      	beq.n	800692e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	4b4d      	ldr	r3, [pc, #308]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	f003 030f 	and.w	r3, r3, #15
 8006918:	429a      	cmp	r2, r3
 800691a:	d908      	bls.n	800692e <HAL_RCC_ClockConfig+0x12a>
>>>>>>> main
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8006688:	4b4a      	ldr	r3, [pc, #296]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	f023 020f 	bic.w	r2, r3, #15
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	4947      	ldr	r1, [pc, #284]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 8006696:	4313      	orrs	r3, r2
 8006698:	618b      	str	r3, [r1, #24]
=======
 800691c:	4b4a      	ldr	r3, [pc, #296]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	f023 020f 	bic.w	r2, r3, #15
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	4947      	ldr	r1, [pc, #284]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 800692a:	4313      	orrs	r3, r2
 800692c:	618b      	str	r3, [r1, #24]
>>>>>>> main
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d055      	beq.n	8006752 <HAL_RCC_ClockConfig+0x1e2>
=======
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d055      	beq.n	80069e6 <HAL_RCC_ClockConfig+0x1e2>
>>>>>>> main
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
<<<<<<< HEAD
 80066a6:	4b43      	ldr	r3, [pc, #268]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	4940      	ldr	r1, [pc, #256]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	618b      	str	r3, [r1, #24]
=======
 800693a:	4b43      	ldr	r3, [pc, #268]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	4940      	ldr	r1, [pc, #256]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 8006948:	4313      	orrs	r3, r2
 800694a:	618b      	str	r3, [r1, #24]
>>>>>>> main
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d107      	bne.n	80066d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066c0:	4b3c      	ldr	r3, [pc, #240]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d121      	bne.n	8006710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e0f6      	b.n	80068be <HAL_RCC_ClockConfig+0x34e>
=======
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	2b02      	cmp	r3, #2
 8006952:	d107      	bne.n	8006964 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006954:	4b3c      	ldr	r3, [pc, #240]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d121      	bne.n	80069a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e0f6      	b.n	8006b52 <HAL_RCC_ClockConfig+0x34e>
>>>>>>> main
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	2b03      	cmp	r3, #3
 80066d6:	d107      	bne.n	80066e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066d8:	4b36      	ldr	r3, [pc, #216]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d115      	bne.n	8006710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e0ea      	b.n	80068be <HAL_RCC_ClockConfig+0x34e>
=======
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	2b03      	cmp	r3, #3
 800696a:	d107      	bne.n	800697c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800696c:	4b36      	ldr	r3, [pc, #216]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d115      	bne.n	80069a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e0ea      	b.n	8006b52 <HAL_RCC_ClockConfig+0x34e>
>>>>>>> main
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
<<<<<<< HEAD
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d107      	bne.n	8006700 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066f0:	4b30      	ldr	r3, [pc, #192]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d109      	bne.n	8006710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e0de      	b.n	80068be <HAL_RCC_ClockConfig+0x34e>
=======
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d107      	bne.n	8006994 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006984:	4b30      	ldr	r3, [pc, #192]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800698c:	2b00      	cmp	r3, #0
 800698e:	d109      	bne.n	80069a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e0de      	b.n	8006b52 <HAL_RCC_ClockConfig+0x34e>
>>>>>>> main
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
<<<<<<< HEAD
 8006700:	4b2c      	ldr	r3, [pc, #176]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	2b00      	cmp	r3, #0
 800670a:	d101      	bne.n	8006710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e0d6      	b.n	80068be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006710:	4b28      	ldr	r3, [pc, #160]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	f023 0207 	bic.w	r2, r3, #7
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	4925      	ldr	r1, [pc, #148]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 800671e:	4313      	orrs	r3, r2
 8006720:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006722:	f7fd fa61 	bl	8003be8 <HAL_GetTick>
 8006726:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006728:	e00a      	b.n	8006740 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800672a:	f7fd fa5d 	bl	8003be8 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006738:	4293      	cmp	r3, r2
 800673a:	d901      	bls.n	8006740 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e0be      	b.n	80068be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006740:	4b1c      	ldr	r3, [pc, #112]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	00db      	lsls	r3, r3, #3
 800674e:	429a      	cmp	r2, r3
 8006750:	d1eb      	bne.n	800672a <HAL_RCC_ClockConfig+0x1ba>
=======
 8006994:	4b2c      	ldr	r3, [pc, #176]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0304 	and.w	r3, r3, #4
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e0d6      	b.n	8006b52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069a4:	4b28      	ldr	r3, [pc, #160]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	f023 0207 	bic.w	r2, r3, #7
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	4925      	ldr	r1, [pc, #148]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069b6:	f7fc fc85 	bl	80032c4 <HAL_GetTick>
 80069ba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069bc:	e00a      	b.n	80069d4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069be:	f7fc fc81 	bl	80032c4 <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d901      	bls.n	80069d4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e0be      	b.n	8006b52 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069d4:	4b1c      	ldr	r3, [pc, #112]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d1eb      	bne.n	80069be <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> main

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d010      	beq.n	8006780 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	4b14      	ldr	r3, [pc, #80]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	f003 030f 	and.w	r3, r3, #15
 800676a:	429a      	cmp	r2, r3
 800676c:	d208      	bcs.n	8006780 <HAL_RCC_ClockConfig+0x210>
=======
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d010      	beq.n	8006a14 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	4b14      	ldr	r3, [pc, #80]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	f003 030f 	and.w	r3, r3, #15
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d208      	bcs.n	8006a14 <HAL_RCC_ClockConfig+0x210>
>>>>>>> main
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 800676e:	4b11      	ldr	r3, [pc, #68]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	f023 020f 	bic.w	r2, r3, #15
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	490e      	ldr	r1, [pc, #56]	@ (80067b4 <HAL_RCC_ClockConfig+0x244>)
 800677c:	4313      	orrs	r3, r2
 800677e:	618b      	str	r3, [r1, #24]
=======
 8006a02:	4b11      	ldr	r3, [pc, #68]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	f023 020f 	bic.w	r2, r3, #15
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	490e      	ldr	r1, [pc, #56]	@ (8006a48 <HAL_RCC_ClockConfig+0x244>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	618b      	str	r3, [r1, #24]
>>>>>>> main
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8006780:	4b0b      	ldr	r3, [pc, #44]	@ (80067b0 <HAL_RCC_ClockConfig+0x240>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 030f 	and.w	r3, r3, #15
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	429a      	cmp	r2, r3
 800678c:	d214      	bcs.n	80067b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800678e:	4b08      	ldr	r3, [pc, #32]	@ (80067b0 <HAL_RCC_ClockConfig+0x240>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f023 020f 	bic.w	r2, r3, #15
 8006796:	4906      	ldr	r1, [pc, #24]	@ (80067b0 <HAL_RCC_ClockConfig+0x240>)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	4313      	orrs	r3, r2
 800679c:	600b      	str	r3, [r1, #0]
=======
 8006a14:	4b0b      	ldr	r3, [pc, #44]	@ (8006a44 <HAL_RCC_ClockConfig+0x240>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 030f 	and.w	r3, r3, #15
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d214      	bcs.n	8006a4c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a22:	4b08      	ldr	r3, [pc, #32]	@ (8006a44 <HAL_RCC_ClockConfig+0x240>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f023 020f 	bic.w	r2, r3, #15
 8006a2a:	4906      	ldr	r1, [pc, #24]	@ (8006a44 <HAL_RCC_ClockConfig+0x240>)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	600b      	str	r3, [r1, #0]
>>>>>>> main

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800679e:	4b04      	ldr	r3, [pc, #16]	@ (80067b0 <HAL_RCC_ClockConfig+0x240>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d005      	beq.n	80067b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e086      	b.n	80068be <HAL_RCC_ClockConfig+0x34e>
 80067b0:	52002000 	.word	0x52002000
 80067b4:	58024400 	.word	0x58024400
=======
 8006a32:	4b04      	ldr	r3, [pc, #16]	@ (8006a44 <HAL_RCC_ClockConfig+0x240>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 030f 	and.w	r3, r3, #15
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d005      	beq.n	8006a4c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e086      	b.n	8006b52 <HAL_RCC_ClockConfig+0x34e>
 8006a44:	52002000 	.word	0x52002000
 8006a48:	58024400 	.word	0x58024400
>>>>>>> main
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
<<<<<<< HEAD
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d010      	beq.n	80067e6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	691a      	ldr	r2, [r3, #16]
 80067c8:	4b3f      	ldr	r3, [pc, #252]	@ (80068c8 <HAL_RCC_ClockConfig+0x358>)
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d208      	bcs.n	80067e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067d4:	4b3c      	ldr	r3, [pc, #240]	@ (80068c8 <HAL_RCC_ClockConfig+0x358>)
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	4939      	ldr	r1, [pc, #228]	@ (80068c8 <HAL_RCC_ClockConfig+0x358>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	618b      	str	r3, [r1, #24]
=======
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d010      	beq.n	8006a7a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	691a      	ldr	r2, [r3, #16]
 8006a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8006b5c <HAL_RCC_ClockConfig+0x358>)
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d208      	bcs.n	8006a7a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a68:	4b3c      	ldr	r3, [pc, #240]	@ (8006b5c <HAL_RCC_ClockConfig+0x358>)
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	4939      	ldr	r1, [pc, #228]	@ (8006b5c <HAL_RCC_ClockConfig+0x358>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	618b      	str	r3, [r1, #24]
>>>>>>> main
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0308 	and.w	r3, r3, #8
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d010      	beq.n	8006814 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	695a      	ldr	r2, [r3, #20]
 80067f6:	4b34      	ldr	r3, [pc, #208]	@ (80068c8 <HAL_RCC_ClockConfig+0x358>)
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067fe:	429a      	cmp	r2, r3
 8006800:	d208      	bcs.n	8006814 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006802:	4b31      	ldr	r3, [pc, #196]	@ (80068c8 <HAL_RCC_ClockConfig+0x358>)
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	492e      	ldr	r1, [pc, #184]	@ (80068c8 <HAL_RCC_ClockConfig+0x358>)
 8006810:	4313      	orrs	r3, r2
 8006812:	61cb      	str	r3, [r1, #28]
=======
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0308 	and.w	r3, r3, #8
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d010      	beq.n	8006aa8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	695a      	ldr	r2, [r3, #20]
 8006a8a:	4b34      	ldr	r3, [pc, #208]	@ (8006b5c <HAL_RCC_ClockConfig+0x358>)
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d208      	bcs.n	8006aa8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a96:	4b31      	ldr	r3, [pc, #196]	@ (8006b5c <HAL_RCC_ClockConfig+0x358>)
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	492e      	ldr	r1, [pc, #184]	@ (8006b5c <HAL_RCC_ClockConfig+0x358>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	61cb      	str	r3, [r1, #28]
>>>>>>> main
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0310 	and.w	r3, r3, #16
 800681c:	2b00      	cmp	r3, #0
 800681e:	d010      	beq.n	8006842 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	699a      	ldr	r2, [r3, #24]
 8006824:	4b28      	ldr	r3, [pc, #160]	@ (80068c8 <HAL_RCC_ClockConfig+0x358>)
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800682c:	429a      	cmp	r2, r3
 800682e:	d208      	bcs.n	8006842 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006830:	4b25      	ldr	r3, [pc, #148]	@ (80068c8 <HAL_RCC_ClockConfig+0x358>)
 8006832:	69db      	ldr	r3, [r3, #28]
 8006834:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	4922      	ldr	r1, [pc, #136]	@ (80068c8 <HAL_RCC_ClockConfig+0x358>)
 800683e:	4313      	orrs	r3, r2
 8006840:	61cb      	str	r3, [r1, #28]
=======
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0310 	and.w	r3, r3, #16
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d010      	beq.n	8006ad6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	699a      	ldr	r2, [r3, #24]
 8006ab8:	4b28      	ldr	r3, [pc, #160]	@ (8006b5c <HAL_RCC_ClockConfig+0x358>)
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d208      	bcs.n	8006ad6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ac4:	4b25      	ldr	r3, [pc, #148]	@ (8006b5c <HAL_RCC_ClockConfig+0x358>)
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	4922      	ldr	r1, [pc, #136]	@ (8006b5c <HAL_RCC_ClockConfig+0x358>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	61cb      	str	r3, [r1, #28]
>>>>>>> main
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
<<<<<<< HEAD
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0320 	and.w	r3, r3, #32
 800684a:	2b00      	cmp	r3, #0
 800684c:	d010      	beq.n	8006870 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	69da      	ldr	r2, [r3, #28]
 8006852:	4b1d      	ldr	r3, [pc, #116]	@ (80068c8 <HAL_RCC_ClockConfig+0x358>)
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800685a:	429a      	cmp	r2, r3
 800685c:	d208      	bcs.n	8006870 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800685e:	4b1a      	ldr	r3, [pc, #104]	@ (80068c8 <HAL_RCC_ClockConfig+0x358>)
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	4917      	ldr	r1, [pc, #92]	@ (80068c8 <HAL_RCC_ClockConfig+0x358>)
 800686c:	4313      	orrs	r3, r2
 800686e:	620b      	str	r3, [r1, #32]
=======
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0320 	and.w	r3, r3, #32
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d010      	beq.n	8006b04 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	69da      	ldr	r2, [r3, #28]
 8006ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8006b5c <HAL_RCC_ClockConfig+0x358>)
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d208      	bcs.n	8006b04 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006af2:	4b1a      	ldr	r3, [pc, #104]	@ (8006b5c <HAL_RCC_ClockConfig+0x358>)
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	4917      	ldr	r1, [pc, #92]	@ (8006b5c <HAL_RCC_ClockConfig+0x358>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	620b      	str	r3, [r1, #32]
>>>>>>> main
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
<<<<<<< HEAD
 8006870:	f000 f834 	bl	80068dc <HAL_RCC_GetSysClockFreq>
 8006874:	4602      	mov	r2, r0
 8006876:	4b14      	ldr	r3, [pc, #80]	@ (80068c8 <HAL_RCC_ClockConfig+0x358>)
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	0a1b      	lsrs	r3, r3, #8
 800687c:	f003 030f 	and.w	r3, r3, #15
 8006880:	4912      	ldr	r1, [pc, #72]	@ (80068cc <HAL_RCC_ClockConfig+0x35c>)
 8006882:	5ccb      	ldrb	r3, [r1, r3]
 8006884:	f003 031f 	and.w	r3, r3, #31
 8006888:	fa22 f303 	lsr.w	r3, r2, r3
 800688c:	613b      	str	r3, [r7, #16]
=======
 8006b04:	f000 f834 	bl	8006b70 <HAL_RCC_GetSysClockFreq>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	4b14      	ldr	r3, [pc, #80]	@ (8006b5c <HAL_RCC_ClockConfig+0x358>)
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	0a1b      	lsrs	r3, r3, #8
 8006b10:	f003 030f 	and.w	r3, r3, #15
 8006b14:	4912      	ldr	r1, [pc, #72]	@ (8006b60 <HAL_RCC_ClockConfig+0x35c>)
 8006b16:	5ccb      	ldrb	r3, [r1, r3]
 8006b18:	f003 031f 	and.w	r3, r3, #31
 8006b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b20:	613b      	str	r3, [r7, #16]
>>>>>>> main
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
<<<<<<< HEAD
 800688e:	4b0e      	ldr	r3, [pc, #56]	@ (80068c8 <HAL_RCC_ClockConfig+0x358>)
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	f003 030f 	and.w	r3, r3, #15
 8006896:	4a0d      	ldr	r2, [pc, #52]	@ (80068cc <HAL_RCC_ClockConfig+0x35c>)
 8006898:	5cd3      	ldrb	r3, [r2, r3]
 800689a:	f003 031f 	and.w	r3, r3, #31
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	fa22 f303 	lsr.w	r3, r2, r3
 80068a4:	4a0a      	ldr	r2, [pc, #40]	@ (80068d0 <HAL_RCC_ClockConfig+0x360>)
 80068a6:	6013      	str	r3, [r2, #0]
=======
 8006b22:	4b0e      	ldr	r3, [pc, #56]	@ (8006b5c <HAL_RCC_ClockConfig+0x358>)
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	f003 030f 	and.w	r3, r3, #15
 8006b2a:	4a0d      	ldr	r2, [pc, #52]	@ (8006b60 <HAL_RCC_ClockConfig+0x35c>)
 8006b2c:	5cd3      	ldrb	r3, [r2, r3]
 8006b2e:	f003 031f 	and.w	r3, r3, #31
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	fa22 f303 	lsr.w	r3, r2, r3
 8006b38:	4a0a      	ldr	r2, [pc, #40]	@ (8006b64 <HAL_RCC_ClockConfig+0x360>)
 8006b3a:	6013      	str	r3, [r2, #0]
>>>>>>> main
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
<<<<<<< HEAD
 80068a8:	4a0a      	ldr	r2, [pc, #40]	@ (80068d4 <HAL_RCC_ClockConfig+0x364>)
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	6013      	str	r3, [r2, #0]
=======
 8006b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8006b68 <HAL_RCC_ClockConfig+0x364>)
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	6013      	str	r3, [r2, #0]
>>>>>>> main
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
<<<<<<< HEAD
 80068ae:	4b0a      	ldr	r3, [pc, #40]	@ (80068d8 <HAL_RCC_ClockConfig+0x368>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fd f94e 	bl	8003b54 <HAL_InitTick>
 80068b8:	4603      	mov	r3, r0
 80068ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	58024400 	.word	0x58024400
 80068cc:	0800de68 	.word	0x0800de68
 80068d0:	24000014 	.word	0x24000014
 80068d4:	24000010 	.word	0x24000010
 80068d8:	24000018 	.word	0x24000018

080068dc <HAL_RCC_GetSysClockFreq>:
=======
 8006b42:	4b0a      	ldr	r3, [pc, #40]	@ (8006b6c <HAL_RCC_ClockConfig+0x368>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fc fb72 	bl	8003230 <HAL_InitTick>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	58024400 	.word	0x58024400
 8006b60:	0800fd20 	.word	0x0800fd20
 8006b64:	2400000c 	.word	0x2400000c
 8006b68:	24000008 	.word	0x24000008
 8006b6c:	24000010 	.word	0x24000010

08006b70 <HAL_RCC_GetSysClockFreq>:
>>>>>>> main
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 80068dc:	b480      	push	{r7}
 80068de:	b089      	sub	sp, #36	@ 0x24
 80068e0:	af00      	add	r7, sp, #0
=======
 8006b70:	b480      	push	{r7}
 8006b72:	b089      	sub	sp, #36	@ 0x24
 8006b74:	af00      	add	r7, sp, #0
>>>>>>> main
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
<<<<<<< HEAD
 80068e2:	4bb3      	ldr	r3, [pc, #716]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068ea:	2b18      	cmp	r3, #24
 80068ec:	f200 8155 	bhi.w	8006b9a <HAL_RCC_GetSysClockFreq+0x2be>
 80068f0:	a201      	add	r2, pc, #4	@ (adr r2, 80068f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80068f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f6:	bf00      	nop
 80068f8:	0800695d 	.word	0x0800695d
 80068fc:	08006b9b 	.word	0x08006b9b
 8006900:	08006b9b 	.word	0x08006b9b
 8006904:	08006b9b 	.word	0x08006b9b
 8006908:	08006b9b 	.word	0x08006b9b
 800690c:	08006b9b 	.word	0x08006b9b
 8006910:	08006b9b 	.word	0x08006b9b
 8006914:	08006b9b 	.word	0x08006b9b
 8006918:	08006983 	.word	0x08006983
 800691c:	08006b9b 	.word	0x08006b9b
 8006920:	08006b9b 	.word	0x08006b9b
 8006924:	08006b9b 	.word	0x08006b9b
 8006928:	08006b9b 	.word	0x08006b9b
 800692c:	08006b9b 	.word	0x08006b9b
 8006930:	08006b9b 	.word	0x08006b9b
 8006934:	08006b9b 	.word	0x08006b9b
 8006938:	08006989 	.word	0x08006989
 800693c:	08006b9b 	.word	0x08006b9b
 8006940:	08006b9b 	.word	0x08006b9b
 8006944:	08006b9b 	.word	0x08006b9b
 8006948:	08006b9b 	.word	0x08006b9b
 800694c:	08006b9b 	.word	0x08006b9b
 8006950:	08006b9b 	.word	0x08006b9b
 8006954:	08006b9b 	.word	0x08006b9b
 8006958:	0800698f 	.word	0x0800698f
=======
 8006b76:	4bb3      	ldr	r3, [pc, #716]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b7e:	2b18      	cmp	r3, #24
 8006b80:	f200 8155 	bhi.w	8006e2e <HAL_RCC_GetSysClockFreq+0x2be>
 8006b84:	a201      	add	r2, pc, #4	@ (adr r2, 8006b8c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8a:	bf00      	nop
 8006b8c:	08006bf1 	.word	0x08006bf1
 8006b90:	08006e2f 	.word	0x08006e2f
 8006b94:	08006e2f 	.word	0x08006e2f
 8006b98:	08006e2f 	.word	0x08006e2f
 8006b9c:	08006e2f 	.word	0x08006e2f
 8006ba0:	08006e2f 	.word	0x08006e2f
 8006ba4:	08006e2f 	.word	0x08006e2f
 8006ba8:	08006e2f 	.word	0x08006e2f
 8006bac:	08006c17 	.word	0x08006c17
 8006bb0:	08006e2f 	.word	0x08006e2f
 8006bb4:	08006e2f 	.word	0x08006e2f
 8006bb8:	08006e2f 	.word	0x08006e2f
 8006bbc:	08006e2f 	.word	0x08006e2f
 8006bc0:	08006e2f 	.word	0x08006e2f
 8006bc4:	08006e2f 	.word	0x08006e2f
 8006bc8:	08006e2f 	.word	0x08006e2f
 8006bcc:	08006c1d 	.word	0x08006c1d
 8006bd0:	08006e2f 	.word	0x08006e2f
 8006bd4:	08006e2f 	.word	0x08006e2f
 8006bd8:	08006e2f 	.word	0x08006e2f
 8006bdc:	08006e2f 	.word	0x08006e2f
 8006be0:	08006e2f 	.word	0x08006e2f
 8006be4:	08006e2f 	.word	0x08006e2f
 8006be8:	08006e2f 	.word	0x08006e2f
 8006bec:	08006c23 	.word	0x08006c23
>>>>>>> main
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
<<<<<<< HEAD
 800695c:	4b94      	ldr	r3, [pc, #592]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0320 	and.w	r3, r3, #32
 8006964:	2b00      	cmp	r3, #0
 8006966:	d009      	beq.n	800697c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006968:	4b91      	ldr	r3, [pc, #580]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	08db      	lsrs	r3, r3, #3
 800696e:	f003 0303 	and.w	r3, r3, #3
 8006972:	4a90      	ldr	r2, [pc, #576]	@ (8006bb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006974:	fa22 f303 	lsr.w	r3, r2, r3
 8006978:	61bb      	str	r3, [r7, #24]
=======
 8006bf0:	4b94      	ldr	r3, [pc, #592]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0320 	and.w	r3, r3, #32
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d009      	beq.n	8006c10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bfc:	4b91      	ldr	r3, [pc, #580]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	08db      	lsrs	r3, r3, #3
 8006c02:	f003 0303 	and.w	r3, r3, #3
 8006c06:	4a90      	ldr	r2, [pc, #576]	@ (8006e48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c08:	fa22 f303 	lsr.w	r3, r2, r3
 8006c0c:	61bb      	str	r3, [r7, #24]
>>>>>>> main
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
<<<<<<< HEAD
 800697a:	e111      	b.n	8006ba0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800697c:	4b8d      	ldr	r3, [pc, #564]	@ (8006bb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800697e:	61bb      	str	r3, [r7, #24]
      break;
 8006980:	e10e      	b.n	8006ba0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006982:	4b8d      	ldr	r3, [pc, #564]	@ (8006bb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006984:	61bb      	str	r3, [r7, #24]
      break;
 8006986:	e10b      	b.n	8006ba0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006988:	4b8c      	ldr	r3, [pc, #560]	@ (8006bbc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800698a:	61bb      	str	r3, [r7, #24]
      break;
 800698c:	e108      	b.n	8006ba0 <HAL_RCC_GetSysClockFreq+0x2c4>
=======
 8006c0e:	e111      	b.n	8006e34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006c10:	4b8d      	ldr	r3, [pc, #564]	@ (8006e48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c12:	61bb      	str	r3, [r7, #24]
      break;
 8006c14:	e10e      	b.n	8006e34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006c16:	4b8d      	ldr	r3, [pc, #564]	@ (8006e4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c18:	61bb      	str	r3, [r7, #24]
      break;
 8006c1a:	e10b      	b.n	8006e34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006c1c:	4b8c      	ldr	r3, [pc, #560]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006c1e:	61bb      	str	r3, [r7, #24]
      break;
 8006c20:	e108      	b.n	8006e34 <HAL_RCC_GetSysClockFreq+0x2c4>
>>>>>>> main
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
<<<<<<< HEAD
 800698e:	4b88      	ldr	r3, [pc, #544]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006992:	f003 0303 	and.w	r3, r3, #3
 8006996:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006998:	4b85      	ldr	r3, [pc, #532]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800699a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800699c:	091b      	lsrs	r3, r3, #4
 800699e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80069a4:	4b82      	ldr	r3, [pc, #520]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80069ae:	4b80      	ldr	r3, [pc, #512]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069b2:	08db      	lsrs	r3, r3, #3
 80069b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	fb02 f303 	mul.w	r3, r2, r3
 80069be:	ee07 3a90 	vmov	s15, r3
 80069c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 80e1 	beq.w	8006b94 <HAL_RCC_GetSysClockFreq+0x2b8>
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	f000 8083 	beq.w	8006ae0 <HAL_RCC_GetSysClockFreq+0x204>
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2b02      	cmp	r3, #2
 80069de:	f200 80a1 	bhi.w	8006b24 <HAL_RCC_GetSysClockFreq+0x248>
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d003      	beq.n	80069f0 <HAL_RCC_GetSysClockFreq+0x114>
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d056      	beq.n	8006a9c <HAL_RCC_GetSysClockFreq+0x1c0>
 80069ee:	e099      	b.n	8006b24 <HAL_RCC_GetSysClockFreq+0x248>
=======
 8006c22:	4b88      	ldr	r3, [pc, #544]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c26:	f003 0303 	and.w	r3, r3, #3
 8006c2a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006c2c:	4b85      	ldr	r3, [pc, #532]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c30:	091b      	lsrs	r3, r3, #4
 8006c32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c36:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006c38:	4b82      	ldr	r3, [pc, #520]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006c42:	4b80      	ldr	r3, [pc, #512]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c46:	08db      	lsrs	r3, r3, #3
 8006c48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	fb02 f303 	mul.w	r3, r2, r3
 8006c52:	ee07 3a90 	vmov	s15, r3
 8006c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 80e1 	beq.w	8006e28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	f000 8083 	beq.w	8006d74 <HAL_RCC_GetSysClockFreq+0x204>
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	f200 80a1 	bhi.w	8006db8 <HAL_RCC_GetSysClockFreq+0x248>
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <HAL_RCC_GetSysClockFreq+0x114>
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d056      	beq.n	8006d30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006c82:	e099      	b.n	8006db8 <HAL_RCC_GetSysClockFreq+0x248>
>>>>>>> main
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
<<<<<<< HEAD
 80069f0:	4b6f      	ldr	r3, [pc, #444]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0320 	and.w	r3, r3, #32
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d02d      	beq.n	8006a58 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069fc:	4b6c      	ldr	r3, [pc, #432]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	08db      	lsrs	r3, r3, #3
 8006a02:	f003 0303 	and.w	r3, r3, #3
 8006a06:	4a6b      	ldr	r2, [pc, #428]	@ (8006bb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a08:	fa22 f303 	lsr.w	r3, r2, r3
 8006a0c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	ee07 3a90 	vmov	s15, r3
 8006a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	ee07 3a90 	vmov	s15, r3
 8006a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a26:	4b62      	ldr	r3, [pc, #392]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a2e:	ee07 3a90 	vmov	s15, r3
 8006a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a36:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a3a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a52:	edc7 7a07 	vstr	s15, [r7, #28]
=======
 8006c84:	4b6f      	ldr	r3, [pc, #444]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0320 	and.w	r3, r3, #32
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d02d      	beq.n	8006cec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c90:	4b6c      	ldr	r3, [pc, #432]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	08db      	lsrs	r3, r3, #3
 8006c96:	f003 0303 	and.w	r3, r3, #3
 8006c9a:	4a6b      	ldr	r2, [pc, #428]	@ (8006e48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	ee07 3a90 	vmov	s15, r3
 8006ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	ee07 3a90 	vmov	s15, r3
 8006cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cba:	4b62      	ldr	r3, [pc, #392]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cc2:	ee07 3a90 	vmov	s15, r3
 8006cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cca:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cce:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006e54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ce6:	edc7 7a07 	vstr	s15, [r7, #28]
>>>>>>> main
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
<<<<<<< HEAD
 8006a56:	e087      	b.n	8006b68 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	ee07 3a90 	vmov	s15, r3
 8006a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a62:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006bc4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a6a:	4b51      	ldr	r3, [pc, #324]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a72:	ee07 3a90 	vmov	s15, r3
 8006a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a7e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a9a:	e065      	b.n	8006b68 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	ee07 3a90 	vmov	s15, r3
 8006aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006bc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aae:	4b40      	ldr	r3, [pc, #256]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006abe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ac2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ace:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ada:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006ade:	e043      	b.n	8006b68 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	ee07 3a90 	vmov	s15, r3
 8006ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006bcc <HAL_RCC_GetSysClockFreq+0x2f0>
 8006aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006af2:	4b2f      	ldr	r3, [pc, #188]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b02:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b06:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b22:	e021      	b.n	8006b68 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	ee07 3a90 	vmov	s15, r3
 8006b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006bc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b36:	4b1e      	ldr	r3, [pc, #120]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b3e:	ee07 3a90 	vmov	s15, r3
 8006b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b46:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b4a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b66:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006b68:	4b11      	ldr	r3, [pc, #68]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b6c:	0a5b      	lsrs	r3, r3, #9
 8006b6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b72:	3301      	adds	r3, #1
 8006b74:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	ee07 3a90 	vmov	s15, r3
 8006b7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b80:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b8c:	ee17 3a90 	vmov	r3, s15
 8006b90:	61bb      	str	r3, [r7, #24]
=======
 8006cea:	e087      	b.n	8006dfc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	ee07 3a90 	vmov	s15, r3
 8006cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006e58 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cfe:	4b51      	ldr	r3, [pc, #324]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d06:	ee07 3a90 	vmov	s15, r3
 8006d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d12:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006e54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d2e:	e065      	b.n	8006dfc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	ee07 3a90 	vmov	s15, r3
 8006d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d3a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006e5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d42:	4b40      	ldr	r3, [pc, #256]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d4a:	ee07 3a90 	vmov	s15, r3
 8006d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d52:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d56:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006e54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d72:	e043      	b.n	8006dfc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	ee07 3a90 	vmov	s15, r3
 8006d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d7e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006e60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d86:	4b2f      	ldr	r3, [pc, #188]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d8e:	ee07 3a90 	vmov	s15, r3
 8006d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d96:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d9a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006e54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006db2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006db6:	e021      	b.n	8006dfc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	ee07 3a90 	vmov	s15, r3
 8006dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006e5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dca:	4b1e      	ldr	r3, [pc, #120]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dd2:	ee07 3a90 	vmov	s15, r3
 8006dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dda:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dde:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006e54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006df6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006dfa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006dfc:	4b11      	ldr	r3, [pc, #68]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e00:	0a5b      	lsrs	r3, r3, #9
 8006e02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e06:	3301      	adds	r3, #1
 8006e08:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	ee07 3a90 	vmov	s15, r3
 8006e10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e14:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e20:	ee17 3a90 	vmov	r3, s15
 8006e24:	61bb      	str	r3, [r7, #24]
>>>>>>> main
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
<<<<<<< HEAD
 8006b92:	e005      	b.n	8006ba0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	61bb      	str	r3, [r7, #24]
      break;
 8006b98:	e002      	b.n	8006ba0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006b9a:	4b07      	ldr	r3, [pc, #28]	@ (8006bb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b9c:	61bb      	str	r3, [r7, #24]
      break;
 8006b9e:	bf00      	nop
  }

  return sysclockfreq;
 8006ba0:	69bb      	ldr	r3, [r7, #24]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3724      	adds	r7, #36	@ 0x24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	58024400 	.word	0x58024400
 8006bb4:	03d09000 	.word	0x03d09000
 8006bb8:	003d0900 	.word	0x003d0900
 8006bbc:	016e3600 	.word	0x016e3600
 8006bc0:	46000000 	.word	0x46000000
 8006bc4:	4c742400 	.word	0x4c742400
 8006bc8:	4a742400 	.word	0x4a742400
 8006bcc:	4bb71b00 	.word	0x4bb71b00

08006bd0 <HAL_RCCEx_PeriphCLKConfig>:
=======
 8006e26:	e005      	b.n	8006e34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	61bb      	str	r3, [r7, #24]
      break;
 8006e2c:	e002      	b.n	8006e34 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006e2e:	4b07      	ldr	r3, [pc, #28]	@ (8006e4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e30:	61bb      	str	r3, [r7, #24]
      break;
 8006e32:	bf00      	nop
  }

  return sysclockfreq;
 8006e34:	69bb      	ldr	r3, [r7, #24]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3724      	adds	r7, #36	@ 0x24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	58024400 	.word	0x58024400
 8006e48:	03d09000 	.word	0x03d09000
 8006e4c:	003d0900 	.word	0x003d0900
 8006e50:	016e3600 	.word	0x016e3600
 8006e54:	46000000 	.word	0x46000000
 8006e58:	4c742400 	.word	0x4c742400
 8006e5c:	4a742400 	.word	0x4a742400
 8006e60:	4bb71b00 	.word	0x4bb71b00

08006e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006e6a:	f7ff fe81 	bl	8006b70 <HAL_RCC_GetSysClockFreq>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	4b10      	ldr	r3, [pc, #64]	@ (8006eb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	0a1b      	lsrs	r3, r3, #8
 8006e76:	f003 030f 	and.w	r3, r3, #15
 8006e7a:	490f      	ldr	r1, [pc, #60]	@ (8006eb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e7c:	5ccb      	ldrb	r3, [r1, r3]
 8006e7e:	f003 031f 	and.w	r3, r3, #31
 8006e82:	fa22 f303 	lsr.w	r3, r2, r3
 8006e86:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e88:	4b0a      	ldr	r3, [pc, #40]	@ (8006eb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	f003 030f 	and.w	r3, r3, #15
 8006e90:	4a09      	ldr	r2, [pc, #36]	@ (8006eb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e92:	5cd3      	ldrb	r3, [r2, r3]
 8006e94:	f003 031f 	and.w	r3, r3, #31
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e9e:	4a07      	ldr	r2, [pc, #28]	@ (8006ebc <HAL_RCC_GetHCLKFreq+0x58>)
 8006ea0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ea2:	4a07      	ldr	r2, [pc, #28]	@ (8006ec0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006ea8:	4b04      	ldr	r3, [pc, #16]	@ (8006ebc <HAL_RCC_GetHCLKFreq+0x58>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	58024400 	.word	0x58024400
 8006eb8:	0800fd20 	.word	0x0800fd20
 8006ebc:	2400000c 	.word	0x2400000c
 8006ec0:	24000008 	.word	0x24000008

08006ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006ec8:	f7ff ffcc 	bl	8006e64 <HAL_RCC_GetHCLKFreq>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	4b06      	ldr	r3, [pc, #24]	@ (8006ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	091b      	lsrs	r3, r3, #4
 8006ed4:	f003 0307 	and.w	r3, r3, #7
 8006ed8:	4904      	ldr	r1, [pc, #16]	@ (8006eec <HAL_RCC_GetPCLK1Freq+0x28>)
 8006eda:	5ccb      	ldrb	r3, [r1, r3]
 8006edc:	f003 031f 	and.w	r3, r3, #31
 8006ee0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	58024400 	.word	0x58024400
 8006eec:	0800fd20 	.word	0x0800fd20

08006ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006ef4:	f7ff ffb6 	bl	8006e64 <HAL_RCC_GetHCLKFreq>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	4b06      	ldr	r3, [pc, #24]	@ (8006f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	0a1b      	lsrs	r3, r3, #8
 8006f00:	f003 0307 	and.w	r3, r3, #7
 8006f04:	4904      	ldr	r1, [pc, #16]	@ (8006f18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f06:	5ccb      	ldrb	r3, [r1, r3]
 8006f08:	f003 031f 	and.w	r3, r3, #31
 8006f0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	58024400 	.word	0x58024400
 8006f18:	0800fd20 	.word	0x0800fd20

08006f1c <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> main
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 8006bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bd4:	b0ca      	sub	sp, #296	@ 0x128
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006be2:	2300      	movs	r3, #0
 8006be4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8006f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f20:	b0ca      	sub	sp, #296	@ 0x128
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f28:	2300      	movs	r3, #0
 8006f2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f2e:	2300      	movs	r3, #0
 8006f30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
<<<<<<< HEAD
 8006be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006bf4:	2500      	movs	r5, #0
 8006bf6:	ea54 0305 	orrs.w	r3, r4, r5
 8006bfa:	d049      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c02:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c06:	d02f      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006c08:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c0c:	d828      	bhi.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006c0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c12:	d01a      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006c14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c18:	d822      	bhi.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006c1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c22:	d007      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006c24:	e01c      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x90>
=======
 8006f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006f40:	2500      	movs	r5, #0
 8006f42:	ea54 0305 	orrs.w	r3, r4, r5
 8006f46:	d049      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f52:	d02f      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006f54:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f58:	d828      	bhi.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006f5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f5e:	d01a      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006f60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f64:	d822      	bhi.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006f6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f6e:	d007      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f70:	e01c      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x90>
>>>>>>> main
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< HEAD
 8006c26:	4bb8      	ldr	r3, [pc, #736]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2a:	4ab7      	ldr	r2, [pc, #732]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006c32:	e01a      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
=======
 8006f72:	4bb8      	ldr	r3, [pc, #736]	@ (8007254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f76:	4ab7      	ldr	r2, [pc, #732]	@ (8007254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f7e:	e01a      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
>>>>>>> main

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
<<<<<<< HEAD
 8006c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c38:	3308      	adds	r3, #8
 8006c3a:	2102      	movs	r1, #2
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f001 f9d1 	bl	8007fe4 <RCCEx_PLL2_Config>
 8006c42:	4603      	mov	r3, r0
 8006c44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006c48:	e00f      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c4e:	3328      	adds	r3, #40	@ 0x28
 8006c50:	2102      	movs	r1, #2
 8006c52:	4618      	mov	r0, r3
 8006c54:	f001 fa78 	bl	8008148 <RCCEx_PLL3_Config>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006c5e:	e004      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
=======
 8006f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f84:	3308      	adds	r3, #8
 8006f86:	2102      	movs	r1, #2
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f001 fc8f 	bl	80088ac <RCCEx_PLL2_Config>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f94:	e00f      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f9a:	3328      	adds	r3, #40	@ 0x28
 8006f9c:	2102      	movs	r1, #2
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f001 fd36 	bl	8008a10 <RCCEx_PLL3_Config>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006faa:	e004      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
>>>>>>> main
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 8006c60:	2301      	movs	r3, #1
 8006c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c66:	e000      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006c68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10a      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006c72:	4ba5      	ldr	r3, [pc, #660]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c76:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c80:	4aa1      	ldr	r2, [pc, #644]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c82:	430b      	orrs	r3, r1
 8006c84:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c86:	e003      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xc0>
=======
 8006fac:	2301      	movs	r3, #1
 8006fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fb2:	e000      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10a      	bne.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006fbe:	4ba5      	ldr	r3, [pc, #660]	@ (8007254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fc2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006fcc:	4aa1      	ldr	r2, [pc, #644]	@ (8007254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fce:	430b      	orrs	r3, r1
 8006fd0:	6513      	str	r3, [r2, #80]	@ 0x50
 8006fd2:	e003      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xc0>
>>>>>>> main
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8006c88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8006fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
<<<<<<< HEAD
 8006c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c98:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006c9c:	f04f 0900 	mov.w	r9, #0
 8006ca0:	ea58 0309 	orrs.w	r3, r8, r9
 8006ca4:	d047      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cac:	2b04      	cmp	r3, #4
 8006cae:	d82a      	bhi.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb6:	bf00      	nop
 8006cb8:	08006ccd 	.word	0x08006ccd
 8006cbc:	08006cdb 	.word	0x08006cdb
 8006cc0:	08006cf1 	.word	0x08006cf1
 8006cc4:	08006d0f 	.word	0x08006d0f
 8006cc8:	08006d0f 	.word	0x08006d0f
=======
 8006fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006fe8:	f04f 0900 	mov.w	r9, #0
 8006fec:	ea58 0309 	orrs.w	r3, r8, r9
 8006ff0:	d047      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ff8:	2b04      	cmp	r3, #4
 8006ffa:	d82a      	bhi.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8007004 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007002:	bf00      	nop
 8007004:	08007019 	.word	0x08007019
 8007008:	08007027 	.word	0x08007027
 800700c:	0800703d 	.word	0x0800703d
 8007010:	0800705b 	.word	0x0800705b
 8007014:	0800705b 	.word	0x0800705b
>>>>>>> main
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< HEAD
 8006ccc:	4b8e      	ldr	r3, [pc, #568]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd0:	4a8d      	ldr	r2, [pc, #564]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cd8:	e01a      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x140>
=======
 8007018:	4b8e      	ldr	r3, [pc, #568]	@ (8007254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800701a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701c:	4a8d      	ldr	r2, [pc, #564]	@ (8007254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800701e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007022:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007024:	e01a      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x140>
>>>>>>> main

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 8006cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cde:	3308      	adds	r3, #8
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f001 f97e 	bl	8007fe4 <RCCEx_PLL2_Config>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cee:	e00f      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf4:	3328      	adds	r3, #40	@ 0x28
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f001 fa25 	bl	8008148 <RCCEx_PLL3_Config>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d04:	e004      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x140>
=======
 8007026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800702a:	3308      	adds	r3, #8
 800702c:	2100      	movs	r1, #0
 800702e:	4618      	mov	r0, r3
 8007030:	f001 fc3c 	bl	80088ac <RCCEx_PLL2_Config>
 8007034:	4603      	mov	r3, r0
 8007036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800703a:	e00f      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800703c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007040:	3328      	adds	r3, #40	@ 0x28
 8007042:	2100      	movs	r1, #0
 8007044:	4618      	mov	r0, r3
 8007046:	f001 fce3 	bl	8008a10 <RCCEx_PLL3_Config>
 800704a:	4603      	mov	r3, r0
 800704c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007050:	e004      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x140>
>>>>>>> main
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 8006d06:	2301      	movs	r3, #1
 8006d08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d0c:	e000      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006d0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10a      	bne.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d18:	4b7b      	ldr	r3, [pc, #492]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d1c:	f023 0107 	bic.w	r1, r3, #7
 8006d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d26:	4a78      	ldr	r2, [pc, #480]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d28:	430b      	orrs	r3, r1
 8006d2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d2c:	e003      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x166>
=======
 8007052:	2301      	movs	r3, #1
 8007054:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007058:	e000      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800705a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800705c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10a      	bne.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007064:	4b7b      	ldr	r3, [pc, #492]	@ (8007254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007068:	f023 0107 	bic.w	r1, r3, #7
 800706c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007072:	4a78      	ldr	r2, [pc, #480]	@ (8007254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007074:	430b      	orrs	r3, r1
 8007076:	6513      	str	r3, [r2, #80]	@ 0x50
 8007078:	e003      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x166>
>>>>>>> main
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8006d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 800707a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800707e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
<<<<<<< HEAD
 8006d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006d42:	f04f 0b00 	mov.w	fp, #0
 8006d46:	ea5a 030b 	orrs.w	r3, sl, fp
 8006d4a:	d04c      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d56:	d030      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006d58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d5c:	d829      	bhi.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006d5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d60:	d02d      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006d62:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d64:	d825      	bhi.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006d66:	2b80      	cmp	r3, #128	@ 0x80
 8006d68:	d018      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006d6a:	2b80      	cmp	r3, #128	@ 0x80
 8006d6c:	d821      	bhi.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006d72:	2b40      	cmp	r3, #64	@ 0x40
 8006d74:	d007      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006d76:	e01c      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
=======
 8007082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800708e:	f04f 0b00 	mov.w	fp, #0
 8007092:	ea5a 030b 	orrs.w	r3, sl, fp
 8007096:	d04c      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800709c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800709e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070a2:	d030      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80070a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070a8:	d829      	bhi.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80070aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80070ac:	d02d      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80070ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80070b0:	d825      	bhi.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80070b2:	2b80      	cmp	r3, #128	@ 0x80
 80070b4:	d018      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80070b6:	2b80      	cmp	r3, #128	@ 0x80
 80070b8:	d821      	bhi.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d002      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80070be:	2b40      	cmp	r3, #64	@ 0x40
 80070c0:	d007      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80070c2:	e01c      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
>>>>>>> main
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< HEAD
 8006d78:	4b63      	ldr	r3, [pc, #396]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7c:	4a62      	ldr	r2, [pc, #392]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006d84:	e01c      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
=======
 80070c4:	4b63      	ldr	r3, [pc, #396]	@ (8007254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c8:	4a62      	ldr	r2, [pc, #392]	@ (8007254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80070d0:	e01c      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
>>>>>>> main

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 8006d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d8a:	3308      	adds	r3, #8
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f001 f928 	bl	8007fe4 <RCCEx_PLL2_Config>
 8006d94:	4603      	mov	r3, r0
 8006d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006d9a:	e011      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da0:	3328      	adds	r3, #40	@ 0x28
 8006da2:	2100      	movs	r1, #0
 8006da4:	4618      	mov	r0, r3
 8006da6:	f001 f9cf 	bl	8008148 <RCCEx_PLL3_Config>
 8006daa:	4603      	mov	r3, r0
 8006dac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006db0:	e006      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
=======
 80070d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d6:	3308      	adds	r3, #8
 80070d8:	2100      	movs	r1, #0
 80070da:	4618      	mov	r0, r3
 80070dc:	f001 fbe6 	bl	80088ac <RCCEx_PLL2_Config>
 80070e0:	4603      	mov	r3, r0
 80070e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80070e6:	e011      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ec:	3328      	adds	r3, #40	@ 0x28
 80070ee:	2100      	movs	r1, #0
 80070f0:	4618      	mov	r0, r3
 80070f2:	f001 fc8d 	bl	8008a10 <RCCEx_PLL3_Config>
 80070f6:	4603      	mov	r3, r0
 80070f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80070fc:	e006      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
>>>>>>> main
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 8006db2:	2301      	movs	r3, #1
 8006db4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006db8:	e002      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006dba:	bf00      	nop
 8006dbc:	e000      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10a      	bne.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006dc8:	4b4f      	ldr	r3, [pc, #316]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dcc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dd6:	4a4c      	ldr	r2, [pc, #304]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dd8:	430b      	orrs	r3, r1
 8006dda:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ddc:	e003      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x216>
=======
 80070fe:	2301      	movs	r3, #1
 8007100:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007104:	e002      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007106:	bf00      	nop
 8007108:	e000      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800710a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800710c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10a      	bne.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007114:	4b4f      	ldr	r3, [pc, #316]	@ (8007254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007118:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800711c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007122:	4a4c      	ldr	r2, [pc, #304]	@ (8007254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007124:	430b      	orrs	r3, r1
 8007126:	6513      	str	r3, [r2, #80]	@ 0x50
 8007128:	e003      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x216>
>>>>>>> main
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8006dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006de2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 800712a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800712e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
<<<<<<< HEAD
 8006de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dee:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006df2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006df6:	2300      	movs	r3, #0
 8006df8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006dfc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006e00:	460b      	mov	r3, r1
 8006e02:	4313      	orrs	r3, r2
 8006e04:	d053      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006e0e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e12:	d035      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006e14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e18:	d82e      	bhi.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006e1a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006e1e:	d031      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006e20:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006e24:	d828      	bhi.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006e26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e2a:	d01a      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006e2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e30:	d822      	bhi.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d003      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006e36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e3a:	d007      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006e3c:	e01c      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
=======
 8007132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800713e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007142:	2300      	movs	r3, #0
 8007144:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007148:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800714c:	460b      	mov	r3, r1
 800714e:	4313      	orrs	r3, r2
 8007150:	d053      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007156:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800715a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800715e:	d035      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007160:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007164:	d82e      	bhi.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007166:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800716a:	d031      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800716c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007170:	d828      	bhi.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007172:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007176:	d01a      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007178:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800717c:	d822      	bhi.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800717e:	2b00      	cmp	r3, #0
 8007180:	d003      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007182:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007186:	d007      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007188:	e01c      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
>>>>>>> main
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< HEAD
 8006e3e:	4b32      	ldr	r3, [pc, #200]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e42:	4a31      	ldr	r2, [pc, #196]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e4a:	e01c      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
=======
 800718a:	4b32      	ldr	r3, [pc, #200]	@ (8007254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800718c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800718e:	4a31      	ldr	r2, [pc, #196]	@ (8007254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007194:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007196:	e01c      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
>>>>>>> main

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 8006e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e50:	3308      	adds	r3, #8
 8006e52:	2100      	movs	r1, #0
 8006e54:	4618      	mov	r0, r3
 8006e56:	f001 f8c5 	bl	8007fe4 <RCCEx_PLL2_Config>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006e60:	e011      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e66:	3328      	adds	r3, #40	@ 0x28
 8006e68:	2100      	movs	r1, #0
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f001 f96c 	bl	8008148 <RCCEx_PLL3_Config>
 8006e70:	4603      	mov	r3, r0
 8006e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e76:	e006      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
=======
 8007198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800719c:	3308      	adds	r3, #8
 800719e:	2100      	movs	r1, #0
 80071a0:	4618      	mov	r0, r3
 80071a2:	f001 fb83 	bl	80088ac <RCCEx_PLL2_Config>
 80071a6:	4603      	mov	r3, r0
 80071a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80071ac:	e011      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071b2:	3328      	adds	r3, #40	@ 0x28
 80071b4:	2100      	movs	r1, #0
 80071b6:	4618      	mov	r0, r3
 80071b8:	f001 fc2a 	bl	8008a10 <RCCEx_PLL3_Config>
 80071bc:	4603      	mov	r3, r0
 80071be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071c2:	e006      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
>>>>>>> main
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 8006e78:	2301      	movs	r3, #1
 8006e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e7e:	e002      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006e80:	bf00      	nop
 8006e82:	e000      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10b      	bne.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e92:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006e9e:	4a1a      	ldr	r2, [pc, #104]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ea0:	430b      	orrs	r3, r1
 8006ea2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ea4:	e003      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x2de>
=======
 80071c4:	2301      	movs	r3, #1
 80071c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071ca:	e002      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80071cc:	bf00      	nop
 80071ce:	e000      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80071d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10b      	bne.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80071da:	4b1e      	ldr	r3, [pc, #120]	@ (8007254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071de:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80071e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80071ea:	4a1a      	ldr	r2, [pc, #104]	@ (8007254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071ec:	430b      	orrs	r3, r1
 80071ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80071f0:	e003      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
>>>>>>> main
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8006ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 80071f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
<<<<<<< HEAD
 8006eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006eba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006ec4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006ec8:	460b      	mov	r3, r1
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	d056      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006ed6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006eda:	d038      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006edc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ee0:	d831      	bhi.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006ee2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ee6:	d034      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006ee8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006eec:	d82b      	bhi.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006eee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ef2:	d01d      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006ef4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ef8:	d825      	bhi.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d006      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006efe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f02:	d00a      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006f04:	e01f      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006f06:	bf00      	nop
 8006f08:	58024400 	.word	0x58024400
=======
 80071fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007202:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007206:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800720a:	2300      	movs	r3, #0
 800720c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007210:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007214:	460b      	mov	r3, r1
 8007216:	4313      	orrs	r3, r2
 8007218:	d056      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800721a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800721e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007222:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007226:	d038      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007228:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800722c:	d831      	bhi.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800722e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007232:	d034      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007234:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007238:	d82b      	bhi.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800723a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800723e:	d01d      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007240:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007244:	d825      	bhi.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007246:	2b00      	cmp	r3, #0
 8007248:	d006      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800724a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800724e:	d00a      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007250:	e01f      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007252:	bf00      	nop
 8007254:	58024400 	.word	0x58024400
>>>>>>> main
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< HEAD
 8006f0c:	4ba2      	ldr	r3, [pc, #648]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f10:	4aa1      	ldr	r2, [pc, #644]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f18:	e01c      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x384>
=======
 8007258:	4ba2      	ldr	r3, [pc, #648]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800725a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800725c:	4aa1      	ldr	r2, [pc, #644]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800725e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007262:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007264:	e01c      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
>>>>>>> main

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 8006f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1e:	3308      	adds	r3, #8
 8006f20:	2100      	movs	r1, #0
 8006f22:	4618      	mov	r0, r3
 8006f24:	f001 f85e 	bl	8007fe4 <RCCEx_PLL2_Config>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006f2e:	e011      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f34:	3328      	adds	r3, #40	@ 0x28
 8006f36:	2100      	movs	r1, #0
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f001 f905 	bl	8008148 <RCCEx_PLL3_Config>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f44:	e006      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x384>
=======
 8007266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800726a:	3308      	adds	r3, #8
 800726c:	2100      	movs	r1, #0
 800726e:	4618      	mov	r0, r3
 8007270:	f001 fb1c 	bl	80088ac <RCCEx_PLL2_Config>
 8007274:	4603      	mov	r3, r0
 8007276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800727a:	e011      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800727c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007280:	3328      	adds	r3, #40	@ 0x28
 8007282:	2100      	movs	r1, #0
 8007284:	4618      	mov	r0, r3
 8007286:	f001 fbc3 	bl	8008a10 <RCCEx_PLL3_Config>
 800728a:	4603      	mov	r3, r0
 800728c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007290:	e006      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
>>>>>>> main
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 8006f46:	2301      	movs	r3, #1
 8006f48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f4c:	e002      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006f4e:	bf00      	nop
 8006f50:	e000      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006f52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10b      	bne.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006f5c:	4b8e      	ldr	r3, [pc, #568]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f60:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006f6c:	4a8a      	ldr	r2, [pc, #552]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f6e:	430b      	orrs	r3, r1
 8006f70:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f72:	e003      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
=======
 8007292:	2301      	movs	r3, #1
 8007294:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007298:	e002      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800729a:	bf00      	nop
 800729c:	e000      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800729e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10b      	bne.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80072a8:	4b8e      	ldr	r3, [pc, #568]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072ac:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80072b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80072b8:	4a8a      	ldr	r2, [pc, #552]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072ba:	430b      	orrs	r3, r1
 80072bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80072be:	e003      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
>>>>>>> main
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8006f74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 80072c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
<<<<<<< HEAD
 8006f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006f88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006f92:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006f96:	460b      	mov	r3, r1
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	d03a      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fa2:	2b30      	cmp	r3, #48	@ 0x30
 8006fa4:	d01f      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006fa6:	2b30      	cmp	r3, #48	@ 0x30
 8006fa8:	d819      	bhi.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006faa:	2b20      	cmp	r3, #32
 8006fac:	d00c      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006fae:	2b20      	cmp	r3, #32
 8006fb0:	d815      	bhi.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d019      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006fb6:	2b10      	cmp	r3, #16
 8006fb8:	d111      	bne.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x40e>
=======
 80072c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80072d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80072d8:	2300      	movs	r3, #0
 80072da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80072de:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80072e2:	460b      	mov	r3, r1
 80072e4:	4313      	orrs	r3, r2
 80072e6:	d03a      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80072e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072ee:	2b30      	cmp	r3, #48	@ 0x30
 80072f0:	d01f      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80072f2:	2b30      	cmp	r3, #48	@ 0x30
 80072f4:	d819      	bhi.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80072f6:	2b20      	cmp	r3, #32
 80072f8:	d00c      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80072fa:	2b20      	cmp	r3, #32
 80072fc:	d815      	bhi.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d019      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007302:	2b10      	cmp	r3, #16
 8007304:	d111      	bne.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x40e>
>>>>>>> main
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< HEAD
 8006fba:	4b77      	ldr	r3, [pc, #476]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbe:	4a76      	ldr	r2, [pc, #472]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006fc6:	e011      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x41c>
=======
 8007306:	4b77      	ldr	r3, [pc, #476]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730a:	4a76      	ldr	r2, [pc, #472]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800730c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007310:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007312:	e011      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x41c>
>>>>>>> main

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
<<<<<<< HEAD
 8006fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fcc:	3308      	adds	r3, #8
 8006fce:	2102      	movs	r1, #2
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f001 f807 	bl	8007fe4 <RCCEx_PLL2_Config>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006fdc:	e006      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x41c>
=======
 8007314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007318:	3308      	adds	r3, #8
 800731a:	2102      	movs	r1, #2
 800731c:	4618      	mov	r0, r3
 800731e:	f001 fac5 	bl	80088ac <RCCEx_PLL2_Config>
 8007322:	4603      	mov	r3, r0
 8007324:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007328:	e006      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x41c>
>>>>>>> main
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 8006fde:	2301      	movs	r3, #1
 8006fe0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fe4:	e002      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006fe6:	bf00      	nop
 8006fe8:	e000      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006fea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10a      	bne.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006ff4:	4b68      	ldr	r3, [pc, #416]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ff8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007002:	4a65      	ldr	r2, [pc, #404]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007004:	430b      	orrs	r3, r1
 8007006:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007008:	e003      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x442>
=======
 800732a:	2301      	movs	r3, #1
 800732c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007330:	e002      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007332:	bf00      	nop
 8007334:	e000      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007336:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007338:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10a      	bne.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007340:	4b68      	ldr	r3, [pc, #416]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007344:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800734e:	4a65      	ldr	r2, [pc, #404]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007350:	430b      	orrs	r3, r1
 8007352:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007354:	e003      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x442>
>>>>>>> main
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 800700a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800700e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8007356:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800735a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
<<<<<<< HEAD
 8007012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800701e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007022:	2300      	movs	r3, #0
 8007024:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007028:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800702c:	460b      	mov	r3, r1
 800702e:	4313      	orrs	r3, r2
 8007030:	d051      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007038:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800703c:	d035      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800703e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007042:	d82e      	bhi.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007044:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007048:	d031      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800704a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800704e:	d828      	bhi.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007050:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007054:	d01a      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007056:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800705a:	d822      	bhi.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800705c:	2b00      	cmp	r3, #0
 800705e:	d003      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007060:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007064:	d007      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007066:	e01c      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
=======
 800735e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800736a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800736e:	2300      	movs	r3, #0
 8007370:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007374:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007378:	460b      	mov	r3, r1
 800737a:	4313      	orrs	r3, r2
 800737c:	d051      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800737e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007384:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007388:	d035      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800738a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800738e:	d82e      	bhi.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007390:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007394:	d031      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007396:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800739a:	d828      	bhi.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800739c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073a0:	d01a      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80073a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073a6:	d822      	bhi.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d003      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80073ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073b0:	d007      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80073b2:	e01c      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
>>>>>>> main
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< HEAD
 8007068:	4b4b      	ldr	r3, [pc, #300]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800706a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800706c:	4a4a      	ldr	r2, [pc, #296]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800706e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007072:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007074:	e01c      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707a:	3308      	adds	r3, #8
 800707c:	2100      	movs	r1, #0
 800707e:	4618      	mov	r0, r3
 8007080:	f000 ffb0 	bl	8007fe4 <RCCEx_PLL2_Config>
 8007084:	4603      	mov	r3, r0
 8007086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800708a:	e011      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800708c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007090:	3328      	adds	r3, #40	@ 0x28
 8007092:	2100      	movs	r1, #0
 8007094:	4618      	mov	r0, r3
 8007096:	f001 f857 	bl	8008148 <RCCEx_PLL3_Config>
 800709a:	4603      	mov	r3, r0
 800709c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80070a0:	e006      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
=======
 80073b4:	4b4b      	ldr	r3, [pc, #300]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b8:	4a4a      	ldr	r2, [pc, #296]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80073c0:	e01c      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c6:	3308      	adds	r3, #8
 80073c8:	2100      	movs	r1, #0
 80073ca:	4618      	mov	r0, r3
 80073cc:	f001 fa6e 	bl	80088ac <RCCEx_PLL2_Config>
 80073d0:	4603      	mov	r3, r0
 80073d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80073d6:	e011      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073dc:	3328      	adds	r3, #40	@ 0x28
 80073de:	2100      	movs	r1, #0
 80073e0:	4618      	mov	r0, r3
 80073e2:	f001 fb15 	bl	8008a10 <RCCEx_PLL3_Config>
 80073e6:	4603      	mov	r3, r0
 80073e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80073ec:	e006      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
>>>>>>> main
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 80070a2:	2301      	movs	r3, #1
 80070a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070a8:	e002      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80070aa:	bf00      	nop
 80070ac:	e000      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80070ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10a      	bne.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80070b8:	4b37      	ldr	r3, [pc, #220]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070bc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80070c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070c6:	4a34      	ldr	r2, [pc, #208]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070c8:	430b      	orrs	r3, r1
 80070ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80070cc:	e003      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
=======
 80073ee:	2301      	movs	r3, #1
 80073f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073f4:	e002      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80073f6:	bf00      	nop
 80073f8:	e000      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80073fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10a      	bne.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007404:	4b37      	ldr	r3, [pc, #220]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007408:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800740c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007412:	4a34      	ldr	r2, [pc, #208]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007414:	430b      	orrs	r3, r1
 8007416:	6513      	str	r3, [r2, #80]	@ 0x50
 8007418:	e003      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x506>
>>>>>>> main
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 80070ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 800741a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800741e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
<<<<<<< HEAD
 80070d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070de:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80070e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80070e6:	2300      	movs	r3, #0
 80070e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80070ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80070f0:	460b      	mov	r3, r1
 80070f2:	4313      	orrs	r3, r2
 80070f4:	d056      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80070f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007100:	d033      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007102:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007106:	d82c      	bhi.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007108:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800710c:	d02f      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800710e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007112:	d826      	bhi.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007114:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007118:	d02b      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800711a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800711e:	d820      	bhi.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007120:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007124:	d012      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007126:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800712a:	d81a      	bhi.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800712c:	2b00      	cmp	r3, #0
 800712e:	d022      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007134:	d115      	bne.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x592>
=======
 8007422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800742e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007432:	2300      	movs	r3, #0
 8007434:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007438:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800743c:	460b      	mov	r3, r1
 800743e:	4313      	orrs	r3, r2
 8007440:	d056      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007446:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007448:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800744c:	d033      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800744e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007452:	d82c      	bhi.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007454:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007458:	d02f      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800745a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800745e:	d826      	bhi.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007460:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007464:	d02b      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007466:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800746a:	d820      	bhi.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800746c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007470:	d012      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007472:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007476:	d81a      	bhi.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007478:	2b00      	cmp	r3, #0
 800747a:	d022      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800747c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007480:	d115      	bne.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x592>
>>>>>>> main
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
<<<<<<< HEAD
 8007136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800713a:	3308      	adds	r3, #8
 800713c:	2101      	movs	r1, #1
 800713e:	4618      	mov	r0, r3
 8007140:	f000 ff50 	bl	8007fe4 <RCCEx_PLL2_Config>
 8007144:	4603      	mov	r3, r0
 8007146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800714a:	e015      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800714c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007150:	3328      	adds	r3, #40	@ 0x28
 8007152:	2101      	movs	r1, #1
 8007154:	4618      	mov	r0, r3
 8007156:	f000 fff7 	bl	8008148 <RCCEx_PLL3_Config>
 800715a:	4603      	mov	r3, r0
 800715c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007160:	e00a      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
=======
 8007482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007486:	3308      	adds	r3, #8
 8007488:	2101      	movs	r1, #1
 800748a:	4618      	mov	r0, r3
 800748c:	f001 fa0e 	bl	80088ac <RCCEx_PLL2_Config>
 8007490:	4603      	mov	r3, r0
 8007492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007496:	e015      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800749c:	3328      	adds	r3, #40	@ 0x28
 800749e:	2101      	movs	r1, #1
 80074a0:	4618      	mov	r0, r3
 80074a2:	f001 fab5 	bl	8008a10 <RCCEx_PLL3_Config>
 80074a6:	4603      	mov	r3, r0
 80074a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80074ac:	e00a      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
>>>>>>> main
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 8007162:	2301      	movs	r3, #1
 8007164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007168:	e006      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800716a:	bf00      	nop
 800716c:	e004      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800716e:	bf00      	nop
 8007170:	e002      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007172:	bf00      	nop
 8007174:	e000      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007176:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007178:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10d      	bne.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007180:	4b05      	ldr	r3, [pc, #20]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007184:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800718c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800718e:	4a02      	ldr	r2, [pc, #8]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007190:	430b      	orrs	r3, r1
 8007192:	6513      	str	r3, [r2, #80]	@ 0x50
 8007194:	e006      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007196:	bf00      	nop
 8007198:	58024400 	.word	0x58024400
=======
 80074ae:	2301      	movs	r3, #1
 80074b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074b4:	e006      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80074b6:	bf00      	nop
 80074b8:	e004      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80074ba:	bf00      	nop
 80074bc:	e002      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80074be:	bf00      	nop
 80074c0:	e000      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80074c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10d      	bne.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80074cc:	4b05      	ldr	r3, [pc, #20]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074d0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80074d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074da:	4a02      	ldr	r2, [pc, #8]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074dc:	430b      	orrs	r3, r1
 80074de:	6513      	str	r3, [r2, #80]	@ 0x50
 80074e0:	e006      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80074e2:	bf00      	nop
 80074e4:	58024400 	.word	0x58024400
>>>>>>> main
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 800719c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 80074e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
<<<<<<< HEAD
 80071a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ac:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80071b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071b4:	2300      	movs	r3, #0
 80071b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071ba:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80071be:	460b      	mov	r3, r1
 80071c0:	4313      	orrs	r3, r2
 80071c2:	d055      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80071c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80071cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80071d0:	d033      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80071d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80071d6:	d82c      	bhi.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80071d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071dc:	d02f      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80071de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071e2:	d826      	bhi.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80071e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80071e8:	d02b      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80071ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80071ee:	d820      	bhi.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80071f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071f4:	d012      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80071f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071fa:	d81a      	bhi.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d022      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007200:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007204:	d115      	bne.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x662>
=======
 80074f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80074fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007500:	2300      	movs	r3, #0
 8007502:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007506:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800750a:	460b      	mov	r3, r1
 800750c:	4313      	orrs	r3, r2
 800750e:	d055      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007514:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007518:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800751c:	d033      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800751e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007522:	d82c      	bhi.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007528:	d02f      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800752a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800752e:	d826      	bhi.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007530:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007534:	d02b      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007536:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800753a:	d820      	bhi.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800753c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007540:	d012      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007542:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007546:	d81a      	bhi.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007548:	2b00      	cmp	r3, #0
 800754a:	d022      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800754c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007550:	d115      	bne.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x662>
>>>>>>> main
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
<<<<<<< HEAD
 8007206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800720a:	3308      	adds	r3, #8
 800720c:	2101      	movs	r1, #1
 800720e:	4618      	mov	r0, r3
 8007210:	f000 fee8 	bl	8007fe4 <RCCEx_PLL2_Config>
 8007214:	4603      	mov	r3, r0
 8007216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800721a:	e015      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800721c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007220:	3328      	adds	r3, #40	@ 0x28
 8007222:	2101      	movs	r1, #1
 8007224:	4618      	mov	r0, r3
 8007226:	f000 ff8f 	bl	8008148 <RCCEx_PLL3_Config>
 800722a:	4603      	mov	r3, r0
 800722c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007230:	e00a      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x678>
=======
 8007552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007556:	3308      	adds	r3, #8
 8007558:	2101      	movs	r1, #1
 800755a:	4618      	mov	r0, r3
 800755c:	f001 f9a6 	bl	80088ac <RCCEx_PLL2_Config>
 8007560:	4603      	mov	r3, r0
 8007562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007566:	e015      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800756c:	3328      	adds	r3, #40	@ 0x28
 800756e:	2101      	movs	r1, #1
 8007570:	4618      	mov	r0, r3
 8007572:	f001 fa4d 	bl	8008a10 <RCCEx_PLL3_Config>
 8007576:	4603      	mov	r3, r0
 8007578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800757c:	e00a      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x678>
>>>>>>> main
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 8007232:	2301      	movs	r3, #1
 8007234:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007238:	e006      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800723a:	bf00      	nop
 800723c:	e004      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800723e:	bf00      	nop
 8007240:	e002      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007242:	bf00      	nop
 8007244:	e000      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007246:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007248:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10b      	bne.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007250:	4ba3      	ldr	r3, [pc, #652]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007254:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800725c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007260:	4a9f      	ldr	r2, [pc, #636]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007262:	430b      	orrs	r3, r1
 8007264:	6593      	str	r3, [r2, #88]	@ 0x58
 8007266:	e003      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
=======
 800757e:	2301      	movs	r3, #1
 8007580:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007584:	e006      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007586:	bf00      	nop
 8007588:	e004      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800758a:	bf00      	nop
 800758c:	e002      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800758e:	bf00      	nop
 8007590:	e000      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007592:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10b      	bne.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800759c:	4ba3      	ldr	r3, [pc, #652]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800759e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075a0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80075a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80075ac:	4a9f      	ldr	r2, [pc, #636]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075ae:	430b      	orrs	r3, r1
 80075b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80075b2:	e003      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
>>>>>>> main
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8007268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800726c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 80075b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
<<<<<<< HEAD
 8007270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007278:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800727c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007280:	2300      	movs	r3, #0
 8007282:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007286:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800728a:	460b      	mov	r3, r1
 800728c:	4313      	orrs	r3, r2
 800728e:	d037      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007296:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800729a:	d00e      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800729c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072a0:	d816      	bhi.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d018      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80072a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072aa:	d111      	bne.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x700>
=======
 80075bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80075c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80075cc:	2300      	movs	r3, #0
 80075ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80075d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80075d6:	460b      	mov	r3, r1
 80075d8:	4313      	orrs	r3, r2
 80075da:	d037      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80075dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075e6:	d00e      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80075e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075ec:	d816      	bhi.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d018      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80075f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075f6:	d111      	bne.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x700>
>>>>>>> main
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< HEAD
 80072ac:	4b8c      	ldr	r3, [pc, #560]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b0:	4a8b      	ldr	r2, [pc, #556]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80072b8:	e00f      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x70a>
=======
 80075f8:	4b8c      	ldr	r3, [pc, #560]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fc:	4a8b      	ldr	r2, [pc, #556]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007602:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007604:	e00f      	b.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x70a>
>>>>>>> main

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
<<<<<<< HEAD
 80072ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072be:	3308      	adds	r3, #8
 80072c0:	2101      	movs	r1, #1
 80072c2:	4618      	mov	r0, r3
 80072c4:	f000 fe8e 	bl	8007fe4 <RCCEx_PLL2_Config>
 80072c8:	4603      	mov	r3, r0
 80072ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80072ce:	e004      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x70a>
=======
 8007606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800760a:	3308      	adds	r3, #8
 800760c:	2101      	movs	r1, #1
 800760e:	4618      	mov	r0, r3
 8007610:	f001 f94c 	bl	80088ac <RCCEx_PLL2_Config>
 8007614:	4603      	mov	r3, r0
 8007616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800761a:	e004      	b.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x70a>
>>>>>>> main
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 80072d0:	2301      	movs	r3, #1
 80072d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072d6:	e000      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80072d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d10a      	bne.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80072e2:	4b7f      	ldr	r3, [pc, #508]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072e6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80072ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072f0:	4a7b      	ldr	r2, [pc, #492]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072f2:	430b      	orrs	r3, r1
 80072f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80072f6:	e003      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x730>
=======
 800761c:	2301      	movs	r3, #1
 800761e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007622:	e000      	b.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007624:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10a      	bne.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800762e:	4b7f      	ldr	r3, [pc, #508]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007632:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800763a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800763c:	4a7b      	ldr	r2, [pc, #492]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800763e:	430b      	orrs	r3, r1
 8007640:	6513      	str	r3, [r2, #80]	@ 0x50
 8007642:	e003      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x730>
>>>>>>> main
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 80072f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8007644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007648:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
<<<<<<< HEAD
 8007300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007308:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800730c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007310:	2300      	movs	r3, #0
 8007312:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007316:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800731a:	460b      	mov	r3, r1
 800731c:	4313      	orrs	r3, r2
 800731e:	d039      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007324:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007326:	2b03      	cmp	r3, #3
 8007328:	d81c      	bhi.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800732a:	a201      	add	r2, pc, #4	@ (adr r2, 8007330 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800732c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007330:	0800736d 	.word	0x0800736d
 8007334:	08007341 	.word	0x08007341
 8007338:	0800734f 	.word	0x0800734f
 800733c:	0800736d 	.word	0x0800736d
=======
 800764c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007654:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007658:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800765c:	2300      	movs	r3, #0
 800765e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007662:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007666:	460b      	mov	r3, r1
 8007668:	4313      	orrs	r3, r2
 800766a:	d039      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800766c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007672:	2b03      	cmp	r3, #3
 8007674:	d81c      	bhi.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007676:	a201      	add	r2, pc, #4	@ (adr r2, 800767c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767c:	080076b9 	.word	0x080076b9
 8007680:	0800768d 	.word	0x0800768d
 8007684:	0800769b 	.word	0x0800769b
 8007688:	080076b9 	.word	0x080076b9
>>>>>>> main
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< HEAD
 8007340:	4b67      	ldr	r3, [pc, #412]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007344:	4a66      	ldr	r2, [pc, #408]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800734a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800734c:	e00f      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x79e>
=======
 800768c:	4b67      	ldr	r3, [pc, #412]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800768e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007690:	4a66      	ldr	r2, [pc, #408]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007692:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007696:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007698:	e00f      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
>>>>>>> main

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
<<<<<<< HEAD
 800734e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007352:	3308      	adds	r3, #8
 8007354:	2102      	movs	r1, #2
 8007356:	4618      	mov	r0, r3
 8007358:	f000 fe44 	bl	8007fe4 <RCCEx_PLL2_Config>
 800735c:	4603      	mov	r3, r0
 800735e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007362:	e004      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x79e>
=======
 800769a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800769e:	3308      	adds	r3, #8
 80076a0:	2102      	movs	r1, #2
 80076a2:	4618      	mov	r0, r3
 80076a4:	f001 f902 	bl	80088ac <RCCEx_PLL2_Config>
 80076a8:	4603      	mov	r3, r0
 80076aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80076ae:	e004      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
>>>>>>> main
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 8007364:	2301      	movs	r3, #1
 8007366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800736a:	e000      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800736c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800736e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10a      	bne.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007376:	4b5a      	ldr	r3, [pc, #360]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800737a:	f023 0103 	bic.w	r1, r3, #3
 800737e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007384:	4a56      	ldr	r2, [pc, #344]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007386:	430b      	orrs	r3, r1
 8007388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800738a:	e003      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
=======
 80076b0:	2301      	movs	r3, #1
 80076b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076b6:	e000      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80076b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10a      	bne.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80076c2:	4b5a      	ldr	r3, [pc, #360]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076c6:	f023 0103 	bic.w	r1, r3, #3
 80076ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076d0:	4a56      	ldr	r2, [pc, #344]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076d2:	430b      	orrs	r3, r1
 80076d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80076d6:	e003      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
>>>>>>> main
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 800738c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007390:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 80076d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< HEAD
 8007394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80073a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073a4:	2300      	movs	r3, #0
 80073a6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073aa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80073ae:	460b      	mov	r3, r1
 80073b0:	4313      	orrs	r3, r2
 80073b2:	f000 809f 	beq.w	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x924>
=======
 80076e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80076ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80076f0:	2300      	movs	r3, #0
 80076f2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80076f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80076fa:	460b      	mov	r3, r1
 80076fc:	4313      	orrs	r3, r2
 80076fe:	f000 809f 	beq.w	8007840 <HAL_RCCEx_PeriphCLKConfig+0x924>
>>>>>>> main
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
<<<<<<< HEAD
 80073b6:	4b4b      	ldr	r3, [pc, #300]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a4a      	ldr	r2, [pc, #296]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80073bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073c2:	f7fc fc11 	bl	8003be8 <HAL_GetTick>
 80073c6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073ca:	e00b      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073cc:	f7fc fc0c 	bl	8003be8 <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	2b64      	cmp	r3, #100	@ 0x64
 80073da:	d903      	bls.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073e2:	e005      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073e4:	4b3f      	ldr	r3, [pc, #252]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d0ed      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
=======
 8007702:	4b4b      	ldr	r3, [pc, #300]	@ (8007830 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a4a      	ldr	r2, [pc, #296]	@ (8007830 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800770c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800770e:	f7fb fdd9 	bl	80032c4 <HAL_GetTick>
 8007712:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007716:	e00b      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007718:	f7fb fdd4 	bl	80032c4 <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	2b64      	cmp	r3, #100	@ 0x64
 8007726:	d903      	bls.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800772e:	e005      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007730:	4b3f      	ldr	r3, [pc, #252]	@ (8007830 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0ed      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
>>>>>>> main
      }
    }

    if (ret == HAL_OK)
<<<<<<< HEAD
 80073f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d179      	bne.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80073f8:	4b39      	ldr	r3, [pc, #228]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073fa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80073fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007400:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007404:	4053      	eors	r3, r2
 8007406:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800740a:	2b00      	cmp	r3, #0
 800740c:	d015      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800740e:	4b34      	ldr	r3, [pc, #208]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007412:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007416:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800741a:	4b31      	ldr	r3, [pc, #196]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800741c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800741e:	4a30      	ldr	r2, [pc, #192]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007424:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007426:	4b2e      	ldr	r3, [pc, #184]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800742a:	4a2d      	ldr	r2, [pc, #180]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800742c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007430:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007432:	4a2b      	ldr	r2, [pc, #172]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007434:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007438:	6713      	str	r3, [r2, #112]	@ 0x70
=======
 800773c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007740:	2b00      	cmp	r3, #0
 8007742:	d179      	bne.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007744:	4b39      	ldr	r3, [pc, #228]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007746:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800774c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007750:	4053      	eors	r3, r2
 8007752:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007756:	2b00      	cmp	r3, #0
 8007758:	d015      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800775a:	4b34      	ldr	r3, [pc, #208]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800775c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800775e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007762:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007766:	4b31      	ldr	r3, [pc, #196]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800776a:	4a30      	ldr	r2, [pc, #192]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800776c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007770:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007772:	4b2e      	ldr	r3, [pc, #184]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007776:	4a2d      	ldr	r2, [pc, #180]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007778:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800777c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800777e:	4a2b      	ldr	r2, [pc, #172]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007780:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007784:	6713      	str	r3, [r2, #112]	@ 0x70
>>>>>>> main
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
<<<<<<< HEAD
 800743a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800743e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007446:	d118      	bne.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007448:	f7fc fbce 	bl	8003be8 <HAL_GetTick>
 800744c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007450:	e00d      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007452:	f7fc fbc9 	bl	8003be8 <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800745c:	1ad2      	subs	r2, r2, r3
 800745e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007462:	429a      	cmp	r2, r3
 8007464:	d903      	bls.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800746c:	e005      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800746e:	4b1c      	ldr	r3, [pc, #112]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b00      	cmp	r3, #0
 8007478:	d0eb      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x882>
=======
 8007786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800778a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800778e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007792:	d118      	bne.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007794:	f7fb fd96 	bl	80032c4 <HAL_GetTick>
 8007798:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800779c:	e00d      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800779e:	f7fb fd91 	bl	80032c4 <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80077a8:	1ad2      	subs	r2, r2, r3
 80077aa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d903      	bls.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80077b8:	e005      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077ba:	4b1c      	ldr	r3, [pc, #112]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d0eb      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x882>
>>>>>>> main
          }
        }
      }

      if (ret == HAL_OK)
<<<<<<< HEAD
 800747a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800747e:	2b00      	cmp	r3, #0
 8007480:	d129      	bne.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007486:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800748a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800748e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007492:	d10e      	bne.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007494:	4b12      	ldr	r3, [pc, #72]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800749c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80074a4:	091a      	lsrs	r2, r3, #4
 80074a6:	4b10      	ldr	r3, [pc, #64]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80074a8:	4013      	ands	r3, r2
 80074aa:	4a0d      	ldr	r2, [pc, #52]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074ac:	430b      	orrs	r3, r1
 80074ae:	6113      	str	r3, [r2, #16]
 80074b0:	e005      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80074b2:	4b0b      	ldr	r3, [pc, #44]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	4a0a      	ldr	r2, [pc, #40]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80074bc:	6113      	str	r3, [r2, #16]
 80074be:	4b08      	ldr	r3, [pc, #32]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074c0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80074c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80074ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074ce:	4a04      	ldr	r2, [pc, #16]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074d0:	430b      	orrs	r3, r1
 80074d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80074d4:	e00e      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x924>
=======
 80077c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d129      	bne.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077de:	d10e      	bne.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80077e0:	4b12      	ldr	r3, [pc, #72]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80077e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077f0:	091a      	lsrs	r2, r3, #4
 80077f2:	4b10      	ldr	r3, [pc, #64]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80077f4:	4013      	ands	r3, r2
 80077f6:	4a0d      	ldr	r2, [pc, #52]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077f8:	430b      	orrs	r3, r1
 80077fa:	6113      	str	r3, [r2, #16]
 80077fc:	e005      	b.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80077fe:	4b0b      	ldr	r3, [pc, #44]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	4a0a      	ldr	r2, [pc, #40]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007804:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007808:	6113      	str	r3, [r2, #16]
 800780a:	4b08      	ldr	r3, [pc, #32]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800780c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800780e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007812:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800781a:	4a04      	ldr	r2, [pc, #16]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800781c:	430b      	orrs	r3, r1
 800781e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007820:	e00e      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x924>
>>>>>>> main
      }
      else
      {
        /* set overall return value */
        status = ret;
<<<<<<< HEAD
 80074d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80074de:	e009      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80074e0:	58024400 	.word	0x58024400
 80074e4:	58024800 	.word	0x58024800
 80074e8:	00ffffcf 	.word	0x00ffffcf
=======
 8007822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007826:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800782a:	e009      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800782c:	58024400 	.word	0x58024400
 8007830:	58024800 	.word	0x58024800
 8007834:	00ffffcf 	.word	0x00ffffcf
>>>>>>> main
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 80074ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8007838:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800783c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
<<<<<<< HEAD
 80074f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	f002 0301 	and.w	r3, r2, #1
 8007500:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007504:	2300      	movs	r3, #0
 8007506:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800750a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800750e:	460b      	mov	r3, r1
 8007510:	4313      	orrs	r3, r2
 8007512:	f000 8089 	beq.w	8007628 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800751a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800751c:	2b28      	cmp	r3, #40	@ 0x28
 800751e:	d86b      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007520:	a201      	add	r2, pc, #4	@ (adr r2, 8007528 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007526:	bf00      	nop
 8007528:	08007601 	.word	0x08007601
 800752c:	080075f9 	.word	0x080075f9
 8007530:	080075f9 	.word	0x080075f9
 8007534:	080075f9 	.word	0x080075f9
 8007538:	080075f9 	.word	0x080075f9
 800753c:	080075f9 	.word	0x080075f9
 8007540:	080075f9 	.word	0x080075f9
 8007544:	080075f9 	.word	0x080075f9
 8007548:	080075cd 	.word	0x080075cd
 800754c:	080075f9 	.word	0x080075f9
 8007550:	080075f9 	.word	0x080075f9
 8007554:	080075f9 	.word	0x080075f9
 8007558:	080075f9 	.word	0x080075f9
 800755c:	080075f9 	.word	0x080075f9
 8007560:	080075f9 	.word	0x080075f9
 8007564:	080075f9 	.word	0x080075f9
 8007568:	080075e3 	.word	0x080075e3
 800756c:	080075f9 	.word	0x080075f9
 8007570:	080075f9 	.word	0x080075f9
 8007574:	080075f9 	.word	0x080075f9
 8007578:	080075f9 	.word	0x080075f9
 800757c:	080075f9 	.word	0x080075f9
 8007580:	080075f9 	.word	0x080075f9
 8007584:	080075f9 	.word	0x080075f9
 8007588:	08007601 	.word	0x08007601
 800758c:	080075f9 	.word	0x080075f9
 8007590:	080075f9 	.word	0x080075f9
 8007594:	080075f9 	.word	0x080075f9
 8007598:	080075f9 	.word	0x080075f9
 800759c:	080075f9 	.word	0x080075f9
 80075a0:	080075f9 	.word	0x080075f9
 80075a4:	080075f9 	.word	0x080075f9
 80075a8:	08007601 	.word	0x08007601
 80075ac:	080075f9 	.word	0x080075f9
 80075b0:	080075f9 	.word	0x080075f9
 80075b4:	080075f9 	.word	0x080075f9
 80075b8:	080075f9 	.word	0x080075f9
 80075bc:	080075f9 	.word	0x080075f9
 80075c0:	080075f9 	.word	0x080075f9
 80075c4:	080075f9 	.word	0x080075f9
 80075c8:	08007601 	.word	0x08007601
=======
 8007840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007848:	f002 0301 	and.w	r3, r2, #1
 800784c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007850:	2300      	movs	r3, #0
 8007852:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007856:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800785a:	460b      	mov	r3, r1
 800785c:	4313      	orrs	r3, r2
 800785e:	f000 8089 	beq.w	8007974 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007866:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007868:	2b28      	cmp	r3, #40	@ 0x28
 800786a:	d86b      	bhi.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800786c:	a201      	add	r2, pc, #4	@ (adr r2, 8007874 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800786e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007872:	bf00      	nop
 8007874:	0800794d 	.word	0x0800794d
 8007878:	08007945 	.word	0x08007945
 800787c:	08007945 	.word	0x08007945
 8007880:	08007945 	.word	0x08007945
 8007884:	08007945 	.word	0x08007945
 8007888:	08007945 	.word	0x08007945
 800788c:	08007945 	.word	0x08007945
 8007890:	08007945 	.word	0x08007945
 8007894:	08007919 	.word	0x08007919
 8007898:	08007945 	.word	0x08007945
 800789c:	08007945 	.word	0x08007945
 80078a0:	08007945 	.word	0x08007945
 80078a4:	08007945 	.word	0x08007945
 80078a8:	08007945 	.word	0x08007945
 80078ac:	08007945 	.word	0x08007945
 80078b0:	08007945 	.word	0x08007945
 80078b4:	0800792f 	.word	0x0800792f
 80078b8:	08007945 	.word	0x08007945
 80078bc:	08007945 	.word	0x08007945
 80078c0:	08007945 	.word	0x08007945
 80078c4:	08007945 	.word	0x08007945
 80078c8:	08007945 	.word	0x08007945
 80078cc:	08007945 	.word	0x08007945
 80078d0:	08007945 	.word	0x08007945
 80078d4:	0800794d 	.word	0x0800794d
 80078d8:	08007945 	.word	0x08007945
 80078dc:	08007945 	.word	0x08007945
 80078e0:	08007945 	.word	0x08007945
 80078e4:	08007945 	.word	0x08007945
 80078e8:	08007945 	.word	0x08007945
 80078ec:	08007945 	.word	0x08007945
 80078f0:	08007945 	.word	0x08007945
 80078f4:	0800794d 	.word	0x0800794d
 80078f8:	08007945 	.word	0x08007945
 80078fc:	08007945 	.word	0x08007945
 8007900:	08007945 	.word	0x08007945
 8007904:	08007945 	.word	0x08007945
 8007908:	08007945 	.word	0x08007945
 800790c:	08007945 	.word	0x08007945
 8007910:	08007945 	.word	0x08007945
 8007914:	0800794d 	.word	0x0800794d
>>>>>>> main
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
<<<<<<< HEAD
 80075cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d0:	3308      	adds	r3, #8
 80075d2:	2101      	movs	r1, #1
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 fd05 	bl	8007fe4 <RCCEx_PLL2_Config>
 80075da:	4603      	mov	r3, r0
 80075dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80075e0:	e00f      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e6:	3328      	adds	r3, #40	@ 0x28
 80075e8:	2101      	movs	r1, #1
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fdac 	bl	8008148 <RCCEx_PLL3_Config>
 80075f0:	4603      	mov	r3, r0
 80075f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80075f6:	e004      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xa32>
=======
 8007918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800791c:	3308      	adds	r3, #8
 800791e:	2101      	movs	r1, #1
 8007920:	4618      	mov	r0, r3
 8007922:	f000 ffc3 	bl	80088ac <RCCEx_PLL2_Config>
 8007926:	4603      	mov	r3, r0
 8007928:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800792c:	e00f      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800792e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007932:	3328      	adds	r3, #40	@ 0x28
 8007934:	2101      	movs	r1, #1
 8007936:	4618      	mov	r0, r3
 8007938:	f001 f86a 	bl	8008a10 <RCCEx_PLL3_Config>
 800793c:	4603      	mov	r3, r0
 800793e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007942:	e004      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xa32>
>>>>>>> main
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 80075f8:	2301      	movs	r3, #1
 80075fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075fe:	e000      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10a      	bne.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800760a:	4bbf      	ldr	r3, [pc, #764]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800760c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800760e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007616:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007618:	4abb      	ldr	r2, [pc, #748]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800761a:	430b      	orrs	r3, r1
 800761c:	6553      	str	r3, [r2, #84]	@ 0x54
 800761e:	e003      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0xa58>
=======
 8007944:	2301      	movs	r3, #1
 8007946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800794a:	e000      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800794c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800794e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10a      	bne.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007956:	4bbf      	ldr	r3, [pc, #764]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800795a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800795e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007962:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007964:	4abb      	ldr	r2, [pc, #748]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007966:	430b      	orrs	r3, r1
 8007968:	6553      	str	r3, [r2, #84]	@ 0x54
 800796a:	e003      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xa58>
>>>>>>> main
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8007620:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007624:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 800796c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007970:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
<<<<<<< HEAD
 8007628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	f002 0302 	and.w	r3, r2, #2
 8007634:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007638:	2300      	movs	r3, #0
 800763a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800763e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007642:	460b      	mov	r3, r1
 8007644:	4313      	orrs	r3, r2
 8007646:	d041      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800764c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800764e:	2b05      	cmp	r3, #5
 8007650:	d824      	bhi.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007652:	a201      	add	r2, pc, #4	@ (adr r2, 8007658 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007658:	080076a5 	.word	0x080076a5
 800765c:	08007671 	.word	0x08007671
 8007660:	08007687 	.word	0x08007687
 8007664:	080076a5 	.word	0x080076a5
 8007668:	080076a5 	.word	0x080076a5
 800766c:	080076a5 	.word	0x080076a5
=======
 8007974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797c:	f002 0302 	and.w	r3, r2, #2
 8007980:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007984:	2300      	movs	r3, #0
 8007986:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800798a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800798e:	460b      	mov	r3, r1
 8007990:	4313      	orrs	r3, r2
 8007992:	d041      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007998:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800799a:	2b05      	cmp	r3, #5
 800799c:	d824      	bhi.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800799e:	a201      	add	r2, pc, #4	@ (adr r2, 80079a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80079a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a4:	080079f1 	.word	0x080079f1
 80079a8:	080079bd 	.word	0x080079bd
 80079ac:	080079d3 	.word	0x080079d3
 80079b0:	080079f1 	.word	0x080079f1
 80079b4:	080079f1 	.word	0x080079f1
 80079b8:	080079f1 	.word	0x080079f1
>>>>>>> main
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
<<<<<<< HEAD
 8007670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007674:	3308      	adds	r3, #8
 8007676:	2101      	movs	r1, #1
 8007678:	4618      	mov	r0, r3
 800767a:	f000 fcb3 	bl	8007fe4 <RCCEx_PLL2_Config>
 800767e:	4603      	mov	r3, r0
 8007680:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007684:	e00f      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800768a:	3328      	adds	r3, #40	@ 0x28
 800768c:	2101      	movs	r1, #1
 800768e:	4618      	mov	r0, r3
 8007690:	f000 fd5a 	bl	8008148 <RCCEx_PLL3_Config>
 8007694:	4603      	mov	r3, r0
 8007696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800769a:	e004      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
=======
 80079bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c0:	3308      	adds	r3, #8
 80079c2:	2101      	movs	r1, #1
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 ff71 	bl	80088ac <RCCEx_PLL2_Config>
 80079ca:	4603      	mov	r3, r0
 80079cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80079d0:	e00f      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d6:	3328      	adds	r3, #40	@ 0x28
 80079d8:	2101      	movs	r1, #1
 80079da:	4618      	mov	r0, r3
 80079dc:	f001 f818 	bl	8008a10 <RCCEx_PLL3_Config>
 80079e0:	4603      	mov	r3, r0
 80079e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80079e6:	e004      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
>>>>>>> main
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 800769c:	2301      	movs	r3, #1
 800769e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076a2:	e000      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80076a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10a      	bne.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80076ae:	4b96      	ldr	r3, [pc, #600]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076b2:	f023 0107 	bic.w	r1, r3, #7
 80076b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076bc:	4a92      	ldr	r2, [pc, #584]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076be:	430b      	orrs	r3, r1
 80076c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80076c2:	e003      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	f002 0304 	and.w	r3, r2, #4
 80076d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076dc:	2300      	movs	r3, #0
 80076de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076e2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80076e6:	460b      	mov	r3, r1
 80076e8:	4313      	orrs	r3, r2
 80076ea:	d044      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80076ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076f4:	2b05      	cmp	r3, #5
 80076f6:	d825      	bhi.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80076f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007700 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80076fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fe:	bf00      	nop
 8007700:	0800774d 	.word	0x0800774d
 8007704:	08007719 	.word	0x08007719
 8007708:	0800772f 	.word	0x0800772f
 800770c:	0800774d 	.word	0x0800774d
 8007710:	0800774d 	.word	0x0800774d
 8007714:	0800774d 	.word	0x0800774d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800771c:	3308      	adds	r3, #8
 800771e:	2101      	movs	r1, #1
 8007720:	4618      	mov	r0, r3
 8007722:	f000 fc5f 	bl	8007fe4 <RCCEx_PLL2_Config>
 8007726:	4603      	mov	r3, r0
 8007728:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800772c:	e00f      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800772e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007732:	3328      	adds	r3, #40	@ 0x28
 8007734:	2101      	movs	r1, #1
 8007736:	4618      	mov	r0, r3
 8007738:	f000 fd06 	bl	8008148 <RCCEx_PLL3_Config>
 800773c:	4603      	mov	r3, r0
 800773e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007742:	e004      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800774a:	e000      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800774c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800774e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10b      	bne.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007756:	4b6c      	ldr	r3, [pc, #432]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800775a:	f023 0107 	bic.w	r1, r3, #7
 800775e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007762:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007766:	4a68      	ldr	r2, [pc, #416]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007768:	430b      	orrs	r3, r1
 800776a:	6593      	str	r3, [r2, #88]	@ 0x58
 800776c:	e003      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800776e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007772:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800777a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777e:	f002 0320 	and.w	r3, r2, #32
 8007782:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007786:	2300      	movs	r3, #0
 8007788:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800778c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007790:	460b      	mov	r3, r1
 8007792:	4313      	orrs	r3, r2
 8007794:	d055      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800779a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800779e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077a2:	d033      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80077a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077a8:	d82c      	bhi.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80077aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ae:	d02f      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80077b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077b4:	d826      	bhi.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80077b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80077ba:	d02b      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80077bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80077c0:	d820      	bhi.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80077c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077c6:	d012      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80077c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077cc:	d81a      	bhi.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d022      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80077d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077d6:	d115      	bne.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077dc:	3308      	adds	r3, #8
 80077de:	2100      	movs	r1, #0
 80077e0:	4618      	mov	r0, r3
 80077e2:	f000 fbff 	bl	8007fe4 <RCCEx_PLL2_Config>
 80077e6:	4603      	mov	r3, r0
 80077e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80077ec:	e015      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f2:	3328      	adds	r3, #40	@ 0x28
 80077f4:	2102      	movs	r1, #2
 80077f6:	4618      	mov	r0, r3
 80077f8:	f000 fca6 	bl	8008148 <RCCEx_PLL3_Config>
 80077fc:	4603      	mov	r3, r0
 80077fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007802:	e00a      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800780a:	e006      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800780c:	bf00      	nop
 800780e:	e004      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007810:	bf00      	nop
 8007812:	e002      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007814:	bf00      	nop
 8007816:	e000      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800781a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10b      	bne.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007822:	4b39      	ldr	r3, [pc, #228]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007826:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800782a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800782e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007832:	4a35      	ldr	r2, [pc, #212]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007834:	430b      	orrs	r3, r1
 8007836:	6553      	str	r3, [r2, #84]	@ 0x54
 8007838:	e003      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800783a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800783e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800784e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007852:	2300      	movs	r3, #0
 8007854:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007858:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800785c:	460b      	mov	r3, r1
 800785e:	4313      	orrs	r3, r2
 8007860:	d058      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007866:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800786a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800786e:	d033      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007870:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007874:	d82c      	bhi.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800787a:	d02f      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800787c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007880:	d826      	bhi.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007882:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007886:	d02b      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007888:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800788c:	d820      	bhi.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800788e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007892:	d012      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007894:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007898:	d81a      	bhi.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800789a:	2b00      	cmp	r3, #0
 800789c:	d022      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800789e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078a2:	d115      	bne.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a8:	3308      	adds	r3, #8
 80078aa:	2100      	movs	r1, #0
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 fb99 	bl	8007fe4 <RCCEx_PLL2_Config>
 80078b2:	4603      	mov	r3, r0
 80078b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80078b8:	e015      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078be:	3328      	adds	r3, #40	@ 0x28
 80078c0:	2102      	movs	r1, #2
 80078c2:	4618      	mov	r0, r3
 80078c4:	f000 fc40 	bl	8008148 <RCCEx_PLL3_Config>
 80078c8:	4603      	mov	r3, r0
 80078ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80078ce:	e00a      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078d6:	e006      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80078d8:	bf00      	nop
 80078da:	e004      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80078dc:	bf00      	nop
 80078de:	e002      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80078e0:	bf00      	nop
 80078e2:	e000      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80078e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10e      	bne.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80078ee:	4b06      	ldr	r3, [pc, #24]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078f2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80078f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078fe:	4a02      	ldr	r2, [pc, #8]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007900:	430b      	orrs	r3, r1
 8007902:	6593      	str	r3, [r2, #88]	@ 0x58
 8007904:	e006      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007906:	bf00      	nop
 8007908:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800790c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007910:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007920:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007924:	2300      	movs	r3, #0
 8007926:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800792a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800792e:	460b      	mov	r3, r1
 8007930:	4313      	orrs	r3, r2
 8007932:	d055      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007938:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800793c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007940:	d033      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007942:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007946:	d82c      	bhi.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007948:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800794c:	d02f      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800794e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007952:	d826      	bhi.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007954:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007958:	d02b      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800795a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800795e:	d820      	bhi.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007960:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007964:	d012      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007966:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800796a:	d81a      	bhi.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800796c:	2b00      	cmp	r3, #0
 800796e:	d022      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007970:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007974:	d115      	bne.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800797a:	3308      	adds	r3, #8
 800797c:	2100      	movs	r1, #0
 800797e:	4618      	mov	r0, r3
 8007980:	f000 fb30 	bl	8007fe4 <RCCEx_PLL2_Config>
 8007984:	4603      	mov	r3, r0
 8007986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800798a:	e015      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800798c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007990:	3328      	adds	r3, #40	@ 0x28
 8007992:	2102      	movs	r1, #2
 8007994:	4618      	mov	r0, r3
 8007996:	f000 fbd7 	bl	8008148 <RCCEx_PLL3_Config>
 800799a:	4603      	mov	r3, r0
 800799c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80079a0:	e00a      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079a8:	e006      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80079aa:	bf00      	nop
 80079ac:	e004      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80079ae:	bf00      	nop
 80079b0:	e002      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80079b2:	bf00      	nop
 80079b4:	e000      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80079b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10b      	bne.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80079c0:	4ba1      	ldr	r3, [pc, #644]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079c4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80079c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80079d0:	4a9d      	ldr	r2, [pc, #628]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079d2:	430b      	orrs	r3, r1
 80079d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80079d6:	e003      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
=======
 80079e8:	2301      	movs	r3, #1
 80079ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079ee:	e000      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80079f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10a      	bne.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80079fa:	4b96      	ldr	r3, [pc, #600]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079fe:	f023 0107 	bic.w	r1, r3, #7
 8007a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a08:	4a92      	ldr	r2, [pc, #584]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a0a:	430b      	orrs	r3, r1
 8007a0c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a0e:	e003      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xafc>
>>>>>>> main
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 80079d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8007a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a20:	f002 0304 	and.w	r3, r2, #4
 8007a24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a2e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007a32:	460b      	mov	r3, r1
 8007a34:	4313      	orrs	r3, r2
 8007a36:	d044      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a40:	2b05      	cmp	r3, #5
 8007a42:	d825      	bhi.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007a44:	a201      	add	r2, pc, #4	@ (adr r2, 8007a4c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4a:	bf00      	nop
 8007a4c:	08007a99 	.word	0x08007a99
 8007a50:	08007a65 	.word	0x08007a65
 8007a54:	08007a7b 	.word	0x08007a7b
 8007a58:	08007a99 	.word	0x08007a99
 8007a5c:	08007a99 	.word	0x08007a99
 8007a60:	08007a99 	.word	0x08007a99
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a68:	3308      	adds	r3, #8
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f000 ff1d 	bl	80088ac <RCCEx_PLL2_Config>
 8007a72:	4603      	mov	r3, r0
 8007a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007a78:	e00f      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7e:	3328      	adds	r3, #40	@ 0x28
 8007a80:	2101      	movs	r1, #1
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 ffc4 	bl	8008a10 <RCCEx_PLL3_Config>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007a8e:	e004      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a96:	e000      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007a98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10b      	bne.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007aa2:	4b6c      	ldr	r3, [pc, #432]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aa6:	f023 0107 	bic.w	r1, r3, #7
 8007aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ab2:	4a68      	ldr	r2, [pc, #416]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ab4:	430b      	orrs	r3, r1
 8007ab6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ab8:	e003      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007abe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aca:	f002 0320 	and.w	r3, r2, #32
 8007ace:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ad8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007adc:	460b      	mov	r3, r1
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	d055      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007aee:	d033      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007af0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007af4:	d82c      	bhi.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007af6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007afa:	d02f      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b00:	d826      	bhi.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007b02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b06:	d02b      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007b08:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b0c:	d820      	bhi.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007b0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b12:	d012      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007b14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b18:	d81a      	bhi.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d022      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007b1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b22:	d115      	bne.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b28:	3308      	adds	r3, #8
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 febd 	bl	80088ac <RCCEx_PLL2_Config>
 8007b32:	4603      	mov	r3, r0
 8007b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007b38:	e015      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3e:	3328      	adds	r3, #40	@ 0x28
 8007b40:	2102      	movs	r1, #2
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 ff64 	bl	8008a10 <RCCEx_PLL3_Config>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007b4e:	e00a      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b56:	e006      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007b58:	bf00      	nop
 8007b5a:	e004      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007b5c:	bf00      	nop
 8007b5e:	e002      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007b60:	bf00      	nop
 8007b62:	e000      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10b      	bne.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b6e:	4b39      	ldr	r3, [pc, #228]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b72:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b7e:	4a35      	ldr	r2, [pc, #212]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b80:	430b      	orrs	r3, r1
 8007b82:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b84:	e003      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b96:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007ba4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007ba8:	460b      	mov	r3, r1
 8007baa:	4313      	orrs	r3, r2
 8007bac:	d058      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bb6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007bba:	d033      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007bbc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007bc0:	d82c      	bhi.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007bc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bc6:	d02f      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007bc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bcc:	d826      	bhi.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007bce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007bd2:	d02b      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007bd4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007bd8:	d820      	bhi.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007bda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bde:	d012      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007be0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007be4:	d81a      	bhi.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d022      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007bea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bee:	d115      	bne.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf4:	3308      	adds	r3, #8
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 fe57 	bl	80088ac <RCCEx_PLL2_Config>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007c04:	e015      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c0a:	3328      	adds	r3, #40	@ 0x28
 8007c0c:	2102      	movs	r1, #2
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 fefe 	bl	8008a10 <RCCEx_PLL3_Config>
 8007c14:	4603      	mov	r3, r0
 8007c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007c1a:	e00a      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c22:	e006      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c24:	bf00      	nop
 8007c26:	e004      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c28:	bf00      	nop
 8007c2a:	e002      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c2c:	bf00      	nop
 8007c2e:	e000      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10e      	bne.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c3a:	4b06      	ldr	r3, [pc, #24]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c3e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c4a:	4a02      	ldr	r2, [pc, #8]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c4c:	430b      	orrs	r3, r1
 8007c4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c50:	e006      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007c52:	bf00      	nop
 8007c54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c68:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007c6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c70:	2300      	movs	r3, #0
 8007c72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c76:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	d055      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c88:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007c8c:	d033      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007c8e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007c92:	d82c      	bhi.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007c94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c98:	d02f      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007c9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c9e:	d826      	bhi.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ca0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007ca4:	d02b      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007ca6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007caa:	d820      	bhi.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007cac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cb0:	d012      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007cb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cb6:	d81a      	bhi.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d022      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007cbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cc0:	d115      	bne.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc6:	3308      	adds	r3, #8
 8007cc8:	2100      	movs	r1, #0
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f000 fdee 	bl	80088ac <RCCEx_PLL2_Config>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007cd6:	e015      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cdc:	3328      	adds	r3, #40	@ 0x28
 8007cde:	2102      	movs	r1, #2
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 fe95 	bl	8008a10 <RCCEx_PLL3_Config>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007cec:	e00a      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007cf4:	e006      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007cf6:	bf00      	nop
 8007cf8:	e004      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007cfa:	bf00      	nop
 8007cfc:	e002      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007cfe:	bf00      	nop
 8007d00:	e000      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007d02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10b      	bne.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007d0c:	4ba1      	ldr	r3, [pc, #644]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d10:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d1c:	4a9d      	ldr	r2, [pc, #628]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d1e:	430b      	orrs	r3, r1
 8007d20:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d22:	e003      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
<<<<<<< HEAD
 80079e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e8:	f002 0308 	and.w	r3, r2, #8
 80079ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80079f0:	2300      	movs	r3, #0
 80079f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80079f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80079fa:	460b      	mov	r3, r1
 80079fc:	4313      	orrs	r3, r2
 80079fe:	d01e      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
=======
 8007d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d34:	f002 0308 	and.w	r3, r2, #8
 8007d38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d42:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007d46:	460b      	mov	r3, r1
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	d01e      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
<<<<<<< HEAD
 8007a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a0c:	d10c      	bne.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a12:	3328      	adds	r3, #40	@ 0x28
 8007a14:	2102      	movs	r1, #2
 8007a16:	4618      	mov	r0, r3
 8007a18:	f000 fb96 	bl	8008148 <RCCEx_PLL3_Config>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d002      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8007d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d58:	d10c      	bne.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d5e:	3328      	adds	r3, #40	@ 0x28
 8007d60:	2102      	movs	r1, #2
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 fe54 	bl	8008a10 <RCCEx_PLL3_Config>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d002      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
<<<<<<< HEAD
 8007a28:	4b87      	ldr	r3, [pc, #540]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a2c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a38:	4a83      	ldr	r2, [pc, #524]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a3a:	430b      	orrs	r3, r1
 8007a3c:	6553      	str	r3, [r2, #84]	@ 0x54
=======
 8007d74:	4b87      	ldr	r3, [pc, #540]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d78:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d84:	4a83      	ldr	r2, [pc, #524]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d86:	430b      	orrs	r3, r1
 8007d88:	6553      	str	r3, [r2, #84]	@ 0x54
>>>>>>> main

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
<<<<<<< HEAD
 8007a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a46:	f002 0310 	and.w	r3, r2, #16
 8007a4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a54:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007a58:	460b      	mov	r3, r1
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	d01e      	beq.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xecc>
=======
 8007d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d92:	f002 0310 	and.w	r3, r2, #16
 8007d96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007da0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007da4:	460b      	mov	r3, r1
 8007da6:	4313      	orrs	r3, r2
 8007da8:	d01e      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
<<<<<<< HEAD
 8007a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a6a:	d10c      	bne.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a70:	3328      	adds	r3, #40	@ 0x28
 8007a72:	2102      	movs	r1, #2
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 fb67 	bl	8008148 <RCCEx_PLL3_Config>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d002      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8007daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007db2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007db6:	d10c      	bne.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dbc:	3328      	adds	r3, #40	@ 0x28
 8007dbe:	2102      	movs	r1, #2
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f000 fe25 	bl	8008a10 <RCCEx_PLL3_Config>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d002      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
<<<<<<< HEAD
 8007a86:	4b70      	ldr	r3, [pc, #448]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a8a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a96:	4a6c      	ldr	r2, [pc, #432]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a98:	430b      	orrs	r3, r1
 8007a9a:	6593      	str	r3, [r2, #88]	@ 0x58
=======
 8007dd2:	4b70      	ldr	r3, [pc, #448]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dd6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007de2:	4a6c      	ldr	r2, [pc, #432]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007de4:	430b      	orrs	r3, r1
 8007de6:	6593      	str	r3, [r2, #88]	@ 0x58
>>>>>>> main

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
<<<<<<< HEAD
 8007a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007aa8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007aac:	2300      	movs	r3, #0
 8007aae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ab2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	d03e      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ac4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ac8:	d022      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007aca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ace:	d81b      	bhi.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d003      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ad8:	d00b      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007ada:	e015      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xf38>
=======
 8007de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007df4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007dfe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007e02:	460b      	mov	r3, r1
 8007e04:	4313      	orrs	r3, r2
 8007e06:	d03e      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e14:	d022      	beq.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007e16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e1a:	d81b      	bhi.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d003      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007e20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e24:	d00b      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007e26:	e015      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xf38>
>>>>>>> main
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 8007adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f000 fa7d 	bl	8007fe4 <RCCEx_PLL2_Config>
 8007aea:	4603      	mov	r3, r0
 8007aec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007af0:	e00f      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af6:	3328      	adds	r3, #40	@ 0x28
 8007af8:	2102      	movs	r1, #2
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 fb24 	bl	8008148 <RCCEx_PLL3_Config>
 8007b00:	4603      	mov	r3, r0
 8007b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007b06:	e004      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0xf42>
=======
 8007e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e2c:	3308      	adds	r3, #8
 8007e2e:	2100      	movs	r1, #0
 8007e30:	4618      	mov	r0, r3
 8007e32:	f000 fd3b 	bl	80088ac <RCCEx_PLL2_Config>
 8007e36:	4603      	mov	r3, r0
 8007e38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007e3c:	e00f      	b.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e42:	3328      	adds	r3, #40	@ 0x28
 8007e44:	2102      	movs	r1, #2
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 fde2 	bl	8008a10 <RCCEx_PLL3_Config>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007e52:	e004      	b.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0xf42>
>>>>>>> main
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 8007b08:	2301      	movs	r3, #1
 8007b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b0e:	e000      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10b      	bne.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b1a:	4b4b      	ldr	r3, [pc, #300]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b1e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007b2a:	4a47      	ldr	r2, [pc, #284]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b2c:	430b      	orrs	r3, r1
 8007b2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b30:	e003      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
=======
 8007e54:	2301      	movs	r3, #1
 8007e56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e5a:	e000      	b.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007e5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d10b      	bne.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e66:	4b4b      	ldr	r3, [pc, #300]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e6a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e76:	4a47      	ldr	r2, [pc, #284]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e78:	430b      	orrs	r3, r1
 8007e7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e7c:	e003      	b.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
>>>>>>> main
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8007b32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8007e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
<<<<<<< HEAD
 8007b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b42:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007b46:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b48:	2300      	movs	r3, #0
 8007b4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007b4c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007b50:	460b      	mov	r3, r1
 8007b52:	4313      	orrs	r3, r2
 8007b54:	d03b      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b62:	d01f      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007b64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b68:	d818      	bhi.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007b6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b6e:	d003      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007b70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b74:	d007      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007b76:	e011      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
=======
 8007e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007e92:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e94:	2300      	movs	r3, #0
 8007e96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e98:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	d03b      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eaa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007eae:	d01f      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007eb0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007eb4:	d818      	bhi.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007eb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007eba:	d003      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007ebc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ec0:	d007      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007ec2:	e011      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
>>>>>>> main
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< HEAD
 8007b78:	4b33      	ldr	r3, [pc, #204]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b7c:	4a32      	ldr	r2, [pc, #200]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007b84:	e00f      	b.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
=======
 8007ec4:	4b33      	ldr	r3, [pc, #204]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec8:	4a32      	ldr	r2, [pc, #200]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007eca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ece:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007ed0:	e00f      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
>>>>>>> main

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
<<<<<<< HEAD
 8007b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b8a:	3328      	adds	r3, #40	@ 0x28
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f000 fada 	bl	8008148 <RCCEx_PLL3_Config>
 8007b94:	4603      	mov	r3, r0
 8007b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007b9a:	e004      	b.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
=======
 8007ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed6:	3328      	adds	r3, #40	@ 0x28
 8007ed8:	2101      	movs	r1, #1
 8007eda:	4618      	mov	r0, r3
 8007edc:	f000 fd98 	bl	8008a10 <RCCEx_PLL3_Config>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007ee6:	e004      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
>>>>>>> main
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ba2:	e000      	b.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10b      	bne.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007bae:	4b26      	ldr	r3, [pc, #152]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bb2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bbe:	4a22      	ldr	r2, [pc, #136]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bc0:	430b      	orrs	r3, r1
 8007bc2:	6553      	str	r3, [r2, #84]	@ 0x54
 8007bc4:	e003      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xffe>
=======
 8007ee8:	2301      	movs	r3, #1
 8007eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007eee:	e000      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10b      	bne.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007efa:	4b26      	ldr	r3, [pc, #152]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007efe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f0a:	4a22      	ldr	r2, [pc, #136]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f0c:	430b      	orrs	r3, r1
 8007f0e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f10:	e003      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xffe>
>>>>>>> main
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8007bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8007f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
<<<<<<< HEAD
 8007bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007bda:	673b      	str	r3, [r7, #112]	@ 0x70
 8007bdc:	2300      	movs	r3, #0
 8007bde:	677b      	str	r3, [r7, #116]	@ 0x74
 8007be0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007be4:	460b      	mov	r3, r1
 8007be6:	4313      	orrs	r3, r2
 8007be8:	d034      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1084>
=======
 8007f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f22:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007f26:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f28:	2300      	movs	r3, #0
 8007f2a:	677b      	str	r3, [r7, #116]	@ 0x74
 8007f2c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007f30:	460b      	mov	r3, r1
 8007f32:	4313      	orrs	r3, r2
 8007f34:	d034      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
<<<<<<< HEAD
 8007bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d003      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bf8:	d007      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007bfa:	e011      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1050>
=======
 8007f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d003      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f44:	d007      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007f46:	e011      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x1050>
>>>>>>> main
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< HEAD
 8007bfc:	4b12      	ldr	r3, [pc, #72]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c00:	4a11      	ldr	r2, [pc, #68]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007c08:	e00e      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x1058>
=======
 8007f48:	4b12      	ldr	r3, [pc, #72]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f4c:	4a11      	ldr	r2, [pc, #68]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007f54:	e00e      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x1058>
>>>>>>> main

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
<<<<<<< HEAD
 8007c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c0e:	3308      	adds	r3, #8
 8007c10:	2102      	movs	r1, #2
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 f9e6 	bl	8007fe4 <RCCEx_PLL2_Config>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007c1e:	e003      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10d      	bne.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007c30:	4b05      	ldr	r3, [pc, #20]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c34:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c3e:	4a02      	ldr	r2, [pc, #8]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c40:	430b      	orrs	r3, r1
 8007c42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007c44:	e006      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007c46:	bf00      	nop
 8007c48:	58024400 	.word	0x58024400
=======
 8007f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f5a:	3308      	adds	r3, #8
 8007f5c:	2102      	movs	r1, #2
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 fca4 	bl	80088ac <RCCEx_PLL2_Config>
 8007f64:	4603      	mov	r3, r0
 8007f66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007f6a:	e003      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10d      	bne.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007f7c:	4b05      	ldr	r3, [pc, #20]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f80:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f8a:	4a02      	ldr	r2, [pc, #8]	@ (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f8c:	430b      	orrs	r3, r1
 8007f8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007f90:	e006      	b.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007f92:	bf00      	nop
 8007f94:	58024400 	.word	0x58024400
>>>>>>> main
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8007c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8007f98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
<<<<<<< HEAD
 8007c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007c60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c62:	2300      	movs	r3, #0
 8007c64:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c66:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	d00c      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c74:	3328      	adds	r3, #40	@ 0x28
 8007c76:	2102      	movs	r1, #2
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f000 fa65 	bl	8008148 <RCCEx_PLL3_Config>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d002      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8007fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007fac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007fae:	2300      	movs	r3, #0
 8007fb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007fb2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	d00c      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc0:	3328      	adds	r3, #40	@ 0x28
 8007fc2:	2102      	movs	r1, #2
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 fd23 	bl	8008a10 <RCCEx_PLL3_Config>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d002      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
<<<<<<< HEAD
 8007c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c92:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007c96:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c98:	2300      	movs	r3, #0
 8007c9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c9c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	d038      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007cb2:	d018      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007cb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007cb8:	d811      	bhi.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007cba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cbe:	d014      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cc4:	d80b      	bhi.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d011      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007cca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cce:	d106      	bne.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x110e>
=======
 8007fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fde:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007fe2:	663b      	str	r3, [r7, #96]	@ 0x60
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	667b      	str	r3, [r7, #100]	@ 0x64
 8007fe8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007fec:	460b      	mov	r3, r1
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	d038      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ffa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ffe:	d018      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008000:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008004:	d811      	bhi.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008006:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800800a:	d014      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800800c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008010:	d80b      	bhi.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008012:	2b00      	cmp	r3, #0
 8008014:	d011      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800801a:	d106      	bne.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x110e>
>>>>>>> main
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< HEAD
 8007cd0:	4bc3      	ldr	r3, [pc, #780]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd4:	4ac2      	ldr	r2, [pc, #776]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007cdc:	e008      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
=======
 800801c:	4bc3      	ldr	r3, [pc, #780]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800801e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008020:	4ac2      	ldr	r2, [pc, #776]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008022:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008026:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008028:	e008      	b.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x1120>
>>>>>>> main
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 8007cde:	2301      	movs	r3, #1
 8007ce0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ce4:	e004      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007ce6:	bf00      	nop
 8007ce8:	e002      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007cea:	bf00      	nop
 8007cec:	e000      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007cee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10b      	bne.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007cf8:	4bb9      	ldr	r3, [pc, #740]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cfc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d08:	4ab5      	ldr	r2, [pc, #724]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d0a:	430b      	orrs	r3, r1
 8007d0c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d0e:	e003      	b.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x1148>
=======
 800802a:	2301      	movs	r3, #1
 800802c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008030:	e004      	b.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008032:	bf00      	nop
 8008034:	e002      	b.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008036:	bf00      	nop
 8008038:	e000      	b.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800803a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800803c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10b      	bne.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008044:	4bb9      	ldr	r3, [pc, #740]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008048:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800804c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008050:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008054:	4ab5      	ldr	r2, [pc, #724]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008056:	430b      	orrs	r3, r1
 8008058:	6553      	str	r3, [r2, #84]	@ 0x54
 800805a:	e003      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x1148>
>>>>>>> main
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8007d10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 800805c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008060:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
<<<<<<< HEAD
 8007d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d20:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007d24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d26:	2300      	movs	r3, #0
 8007d28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d2a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4313      	orrs	r3, r2
 8007d32:	d009      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x1178>
=======
 8008064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008070:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008072:	2300      	movs	r3, #0
 8008074:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008076:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800807a:	460b      	mov	r3, r1
 800807c:	4313      	orrs	r3, r2
 800807e:	d009      	beq.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x1178>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
<<<<<<< HEAD
 8007d34:	4baa      	ldr	r3, [pc, #680]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d38:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d42:	4aa7      	ldr	r2, [pc, #668]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d44:	430b      	orrs	r3, r1
 8007d46:	6513      	str	r3, [r2, #80]	@ 0x50
=======
 8008080:	4baa      	ldr	r3, [pc, #680]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008084:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800808c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800808e:	4aa7      	ldr	r2, [pc, #668]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008090:	430b      	orrs	r3, r1
 8008092:	6513      	str	r3, [r2, #80]	@ 0x50
>>>>>>> main
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
<<<<<<< HEAD
 8007d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d50:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007d54:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d56:	2300      	movs	r3, #0
 8007d58:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d5a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007d5e:	460b      	mov	r3, r1
 8007d60:	4313      	orrs	r3, r2
 8007d62:	d00a      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
=======
 8008094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80080a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80080a2:	2300      	movs	r3, #0
 80080a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80080a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80080aa:	460b      	mov	r3, r1
 80080ac:	4313      	orrs	r3, r2
 80080ae:	d00a      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
<<<<<<< HEAD
 8007d64:	4b9e      	ldr	r3, [pc, #632]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d70:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007d74:	4a9a      	ldr	r2, [pc, #616]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d76:	430b      	orrs	r3, r1
 8007d78:	6113      	str	r3, [r2, #16]
=======
 80080b0:	4b9e      	ldr	r3, [pc, #632]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80080b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80080c0:	4a9a      	ldr	r2, [pc, #616]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080c2:	430b      	orrs	r3, r1
 80080c4:	6113      	str	r3, [r2, #16]
>>>>>>> main
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
<<<<<<< HEAD
 8007d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d82:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007d86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d88:	2300      	movs	r3, #0
 8007d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d8c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007d90:	460b      	mov	r3, r1
 8007d92:	4313      	orrs	r3, r2
 8007d94:	d009      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x11da>
=======
 80080c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80080d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080d4:	2300      	movs	r3, #0
 80080d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080d8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80080dc:	460b      	mov	r3, r1
 80080de:	4313      	orrs	r3, r2
 80080e0:	d009      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
<<<<<<< HEAD
 8007d96:	4b92      	ldr	r3, [pc, #584]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d9a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007da4:	4a8e      	ldr	r2, [pc, #568]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007da6:	430b      	orrs	r3, r1
 8007da8:	6513      	str	r3, [r2, #80]	@ 0x50
=======
 80080e2:	4b92      	ldr	r3, [pc, #584]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080e6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80080ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080f0:	4a8e      	ldr	r2, [pc, #568]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080f2:	430b      	orrs	r3, r1
 80080f4:	6513      	str	r3, [r2, #80]	@ 0x50
>>>>>>> main
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
<<<<<<< HEAD
 8007daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007db6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007db8:	2300      	movs	r3, #0
 8007dba:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dbc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	d00e      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
=======
 80080f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008102:	643b      	str	r3, [r7, #64]	@ 0x40
 8008104:	2300      	movs	r3, #0
 8008106:	647b      	str	r3, [r7, #68]	@ 0x44
 8008108:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800810c:	460b      	mov	r3, r1
 800810e:	4313      	orrs	r3, r2
 8008110:	d00e      	beq.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x1214>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
<<<<<<< HEAD
 8007dc6:	4b86      	ldr	r3, [pc, #536]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	4a85      	ldr	r2, [pc, #532]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dcc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007dd0:	6113      	str	r3, [r2, #16]
 8007dd2:	4b83      	ldr	r3, [pc, #524]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dd4:	6919      	ldr	r1, [r3, #16]
 8007dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dda:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007dde:	4a80      	ldr	r2, [pc, #512]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007de0:	430b      	orrs	r3, r1
 8007de2:	6113      	str	r3, [r2, #16]
=======
 8008112:	4b86      	ldr	r3, [pc, #536]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	4a85      	ldr	r2, [pc, #532]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008118:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800811c:	6113      	str	r3, [r2, #16]
 800811e:	4b83      	ldr	r3, [pc, #524]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008120:	6919      	ldr	r1, [r3, #16]
 8008122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008126:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800812a:	4a80      	ldr	r2, [pc, #512]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800812c:	430b      	orrs	r3, r1
 800812e:	6113      	str	r3, [r2, #16]
>>>>>>> main
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
<<<<<<< HEAD
 8007de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dec:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007df0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007df2:	2300      	movs	r3, #0
 8007df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007df6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	d009      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x1244>
=======
 8008130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008138:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800813c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800813e:	2300      	movs	r3, #0
 8008140:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008142:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008146:	460b      	mov	r3, r1
 8008148:	4313      	orrs	r3, r2
 800814a:	d009      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x1244>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
<<<<<<< HEAD
 8007e00:	4b77      	ldr	r3, [pc, #476]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e04:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e0e:	4a74      	ldr	r2, [pc, #464]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e10:	430b      	orrs	r3, r1
 8007e12:	64d3      	str	r3, [r2, #76]	@ 0x4c
=======
 800814c:	4b77      	ldr	r3, [pc, #476]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800814e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008150:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800815a:	4a74      	ldr	r2, [pc, #464]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800815c:	430b      	orrs	r3, r1
 800815e:	64d3      	str	r3, [r2, #76]	@ 0x4c
>>>>>>> main
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
<<<<<<< HEAD
 8007e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007e20:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e22:	2300      	movs	r3, #0
 8007e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e26:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	d00a      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x1276>
=======
 8008160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008168:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800816c:	633b      	str	r3, [r7, #48]	@ 0x30
 800816e:	2300      	movs	r3, #0
 8008170:	637b      	str	r3, [r7, #52]	@ 0x34
 8008172:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008176:	460b      	mov	r3, r1
 8008178:	4313      	orrs	r3, r2
 800817a:	d00a      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x1276>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
<<<<<<< HEAD
 8007e30:	4b6b      	ldr	r3, [pc, #428]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e34:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e40:	4a67      	ldr	r2, [pc, #412]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e42:	430b      	orrs	r3, r1
 8007e44:	6553      	str	r3, [r2, #84]	@ 0x54
=======
 800817c:	4b6b      	ldr	r3, [pc, #428]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800817e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008180:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008188:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800818c:	4a67      	ldr	r2, [pc, #412]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800818e:	430b      	orrs	r3, r1
 8008190:	6553      	str	r3, [r2, #84]	@ 0x54
>>>>>>> main
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
<<<<<<< HEAD
 8007e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4e:	2100      	movs	r1, #0
 8007e50:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007e52:	f003 0301 	and.w	r3, r3, #1
 8007e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e58:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	d011      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e66:	3308      	adds	r3, #8
 8007e68:	2100      	movs	r1, #0
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 f8ba 	bl	8007fe4 <RCCEx_PLL2_Config>
 8007e70:	4603      	mov	r3, r0
 8007e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d003      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
=======
 8008192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819a:	2100      	movs	r1, #0
 800819c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800819e:	f003 0301 	and.w	r3, r3, #1
 80081a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80081a8:	460b      	mov	r3, r1
 80081aa:	4313      	orrs	r3, r2
 80081ac:	d011      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b2:	3308      	adds	r3, #8
 80081b4:	2100      	movs	r1, #0
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 fb78 	bl	80088ac <RCCEx_PLL2_Config>
 80081bc:	4603      	mov	r3, r0
 80081be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80081c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
>>>>>>> main
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8007e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 80081ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
<<<<<<< HEAD
 8007e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	2100      	movs	r1, #0
 8007e90:	6239      	str	r1, [r7, #32]
 8007e92:	f003 0302 	and.w	r3, r3, #2
 8007e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e98:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	d011      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea6:	3308      	adds	r3, #8
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 f89a 	bl	8007fe4 <RCCEx_PLL2_Config>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
=======
 80081d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081da:	2100      	movs	r1, #0
 80081dc:	6239      	str	r1, [r7, #32]
 80081de:	f003 0302 	and.w	r3, r3, #2
 80081e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80081e4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80081e8:	460b      	mov	r3, r1
 80081ea:	4313      	orrs	r3, r2
 80081ec:	d011      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f2:	3308      	adds	r3, #8
 80081f4:	2101      	movs	r1, #1
 80081f6:	4618      	mov	r0, r3
 80081f8:	f000 fb58 	bl	80088ac <RCCEx_PLL2_Config>
 80081fc:	4603      	mov	r3, r0
 80081fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
>>>>>>> main
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8007ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ec2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 800820a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800820e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
<<<<<<< HEAD
 8007ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ece:	2100      	movs	r1, #0
 8007ed0:	61b9      	str	r1, [r7, #24]
 8007ed2:	f003 0304 	and.w	r3, r3, #4
 8007ed6:	61fb      	str	r3, [r7, #28]
 8007ed8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007edc:	460b      	mov	r3, r1
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	d011      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee6:	3308      	adds	r3, #8
 8007ee8:	2102      	movs	r1, #2
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 f87a 	bl	8007fe4 <RCCEx_PLL2_Config>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x1336>
=======
 8008212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821a:	2100      	movs	r1, #0
 800821c:	61b9      	str	r1, [r7, #24]
 800821e:	f003 0304 	and.w	r3, r3, #4
 8008222:	61fb      	str	r3, [r7, #28]
 8008224:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008228:	460b      	mov	r3, r1
 800822a:	4313      	orrs	r3, r2
 800822c:	d011      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800822e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008232:	3308      	adds	r3, #8
 8008234:	2102      	movs	r1, #2
 8008236:	4618      	mov	r0, r3
 8008238:	f000 fb38 	bl	80088ac <RCCEx_PLL2_Config>
 800823c:	4603      	mov	r3, r0
 800823e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008246:	2b00      	cmp	r3, #0
 8008248:	d003      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x1336>
>>>>>>> main
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8007efe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 800824a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800824e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
<<<<<<< HEAD
 8007f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0e:	2100      	movs	r1, #0
 8007f10:	6139      	str	r1, [r7, #16]
 8007f12:	f003 0308 	and.w	r3, r3, #8
 8007f16:	617b      	str	r3, [r7, #20]
 8007f18:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	d011      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f26:	3328      	adds	r3, #40	@ 0x28
 8007f28:	2100      	movs	r1, #0
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 f90c 	bl	8008148 <RCCEx_PLL3_Config>
 8007f30:	4603      	mov	r3, r0
 8007f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d003      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x1376>
=======
 8008252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825a:	2100      	movs	r1, #0
 800825c:	6139      	str	r1, [r7, #16]
 800825e:	f003 0308 	and.w	r3, r3, #8
 8008262:	617b      	str	r3, [r7, #20]
 8008264:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008268:	460b      	mov	r3, r1
 800826a:	4313      	orrs	r3, r2
 800826c:	d011      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800826e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008272:	3328      	adds	r3, #40	@ 0x28
 8008274:	2100      	movs	r1, #0
 8008276:	4618      	mov	r0, r3
 8008278:	f000 fbca 	bl	8008a10 <RCCEx_PLL3_Config>
 800827c:	4603      	mov	r3, r0
 800827e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x1376>
>>>>>>> main
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8007f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 800828a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800828e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
<<<<<<< HEAD
 8007f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4e:	2100      	movs	r1, #0
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	f003 0310 	and.w	r3, r3, #16
 8007f56:	60fb      	str	r3, [r7, #12]
 8007f58:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	d011      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f66:	3328      	adds	r3, #40	@ 0x28
 8007f68:	2101      	movs	r1, #1
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 f8ec 	bl	8008148 <RCCEx_PLL3_Config>
 8007f70:	4603      	mov	r3, r0
 8007f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
=======
 8008292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829a:	2100      	movs	r1, #0
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	f003 0310 	and.w	r3, r3, #16
 80082a2:	60fb      	str	r3, [r7, #12]
 80082a4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80082a8:	460b      	mov	r3, r1
 80082aa:	4313      	orrs	r3, r2
 80082ac:	d011      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b2:	3328      	adds	r3, #40	@ 0x28
 80082b4:	2101      	movs	r1, #1
 80082b6:	4618      	mov	r0, r3
 80082b8:	f000 fbaa 	bl	8008a10 <RCCEx_PLL3_Config>
 80082bc:	4603      	mov	r3, r0
 80082be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80082c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
>>>>>>> main
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8007f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 80082ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
<<<<<<< HEAD
 8007f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8e:	2100      	movs	r1, #0
 8007f90:	6039      	str	r1, [r7, #0]
 8007f92:	f003 0320 	and.w	r3, r3, #32
 8007f96:	607b      	str	r3, [r7, #4]
 8007f98:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	d011      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa6:	3328      	adds	r3, #40	@ 0x28
 8007fa8:	2102      	movs	r1, #2
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 f8cc 	bl	8008148 <RCCEx_PLL3_Config>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d003      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
=======
 80082d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082da:	2100      	movs	r1, #0
 80082dc:	6039      	str	r1, [r7, #0]
 80082de:	f003 0320 	and.w	r3, r3, #32
 80082e2:	607b      	str	r3, [r7, #4]
 80082e4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80082e8:	460b      	mov	r3, r1
 80082ea:	4313      	orrs	r3, r2
 80082ec:	d011      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082f2:	3328      	adds	r3, #40	@ 0x28
 80082f4:	2102      	movs	r1, #2
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 fb8a 	bl	8008a10 <RCCEx_PLL3_Config>
 80082fc:	4603      	mov	r3, r0
 80082fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008306:	2b00      	cmp	r3, #0
 8008308:	d003      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
>>>>>>> main
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8007fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 800830a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800830e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> main
    } 
  }

  if (status == HAL_OK)
<<<<<<< HEAD
 8007fc6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d101      	bne.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	e000      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fe0:	58024400 	.word	0x58024400

08007fe4 <RCCEx_PLL2_Config>:
=======
 8008312:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	e000      	b.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
}
 8008320:	4618      	mov	r0, r3
 8008322:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008326:	46bd      	mov	sp, r7
 8008328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800832c:	58024400 	.word	0x58024400

08008330 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008334:	f7fe fd96 	bl	8006e64 <HAL_RCC_GetHCLKFreq>
 8008338:	4602      	mov	r2, r0
 800833a:	4b06      	ldr	r3, [pc, #24]	@ (8008354 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	091b      	lsrs	r3, r3, #4
 8008340:	f003 0307 	and.w	r3, r3, #7
 8008344:	4904      	ldr	r1, [pc, #16]	@ (8008358 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008346:	5ccb      	ldrb	r3, [r1, r3]
 8008348:	f003 031f 	and.w	r3, r3, #31
 800834c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008350:	4618      	mov	r0, r3
 8008352:	bd80      	pop	{r7, pc}
 8008354:	58024400 	.word	0x58024400
 8008358:	0800fd20 	.word	0x0800fd20

0800835c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800835c:	b480      	push	{r7}
 800835e:	b089      	sub	sp, #36	@ 0x24
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008364:	4ba1      	ldr	r3, [pc, #644]	@ (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008368:	f003 0303 	and.w	r3, r3, #3
 800836c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800836e:	4b9f      	ldr	r3, [pc, #636]	@ (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008372:	0b1b      	lsrs	r3, r3, #12
 8008374:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008378:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800837a:	4b9c      	ldr	r3, [pc, #624]	@ (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800837c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800837e:	091b      	lsrs	r3, r3, #4
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008386:	4b99      	ldr	r3, [pc, #612]	@ (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800838a:	08db      	lsrs	r3, r3, #3
 800838c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008390:	693a      	ldr	r2, [r7, #16]
 8008392:	fb02 f303 	mul.w	r3, r2, r3
 8008396:	ee07 3a90 	vmov	s15, r3
 800839a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800839e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 8111 	beq.w	80085cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	f000 8083 	beq.w	80084b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	f200 80a1 	bhi.w	80084fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d003      	beq.n	80083c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d056      	beq.n	8008474 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80083c6:	e099      	b.n	80084fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083c8:	4b88      	ldr	r3, [pc, #544]	@ (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 0320 	and.w	r3, r3, #32
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d02d      	beq.n	8008430 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083d4:	4b85      	ldr	r3, [pc, #532]	@ (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	08db      	lsrs	r3, r3, #3
 80083da:	f003 0303 	and.w	r3, r3, #3
 80083de:	4a84      	ldr	r2, [pc, #528]	@ (80085f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80083e0:	fa22 f303 	lsr.w	r3, r2, r3
 80083e4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	ee07 3a90 	vmov	s15, r3
 80083ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	ee07 3a90 	vmov	s15, r3
 80083f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083fe:	4b7b      	ldr	r3, [pc, #492]	@ (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008406:	ee07 3a90 	vmov	s15, r3
 800840a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800840e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008412:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800841a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800841e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800842a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800842e:	e087      	b.n	8008540 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	ee07 3a90 	vmov	s15, r3
 8008436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800843a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80085f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800843e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008442:	4b6a      	ldr	r3, [pc, #424]	@ (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800844a:	ee07 3a90 	vmov	s15, r3
 800844e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008452:	ed97 6a03 	vldr	s12, [r7, #12]
 8008456:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800845a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800845e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008462:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800846a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800846e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008472:	e065      	b.n	8008540 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	ee07 3a90 	vmov	s15, r3
 800847a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800847e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008486:	4b59      	ldr	r3, [pc, #356]	@ (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800848a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800848e:	ee07 3a90 	vmov	s15, r3
 8008492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008496:	ed97 6a03 	vldr	s12, [r7, #12]
 800849a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800849e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084b6:	e043      	b.n	8008540 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	ee07 3a90 	vmov	s15, r3
 80084be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008600 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80084c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ca:	4b48      	ldr	r3, [pc, #288]	@ (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084d2:	ee07 3a90 	vmov	s15, r3
 80084d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084da:	ed97 6a03 	vldr	s12, [r7, #12]
 80084de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084fa:	e021      	b.n	8008540 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	ee07 3a90 	vmov	s15, r3
 8008502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008506:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800850a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800850e:	4b37      	ldr	r3, [pc, #220]	@ (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008516:	ee07 3a90 	vmov	s15, r3
 800851a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800851e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008522:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800852a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800852e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800853a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800853e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008540:	4b2a      	ldr	r3, [pc, #168]	@ (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008544:	0a5b      	lsrs	r3, r3, #9
 8008546:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800854a:	ee07 3a90 	vmov	s15, r3
 800854e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008552:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008556:	ee37 7a87 	vadd.f32	s14, s15, s14
 800855a:	edd7 6a07 	vldr	s13, [r7, #28]
 800855e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008566:	ee17 2a90 	vmov	r2, s15
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800856e:	4b1f      	ldr	r3, [pc, #124]	@ (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008572:	0c1b      	lsrs	r3, r3, #16
 8008574:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008578:	ee07 3a90 	vmov	s15, r3
 800857c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008580:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008584:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008588:	edd7 6a07 	vldr	s13, [r7, #28]
 800858c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008590:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008594:	ee17 2a90 	vmov	r2, s15
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800859c:	4b13      	ldr	r3, [pc, #76]	@ (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800859e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a0:	0e1b      	lsrs	r3, r3, #24
 80085a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085a6:	ee07 3a90 	vmov	s15, r3
 80085aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80085ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085c2:	ee17 2a90 	vmov	r2, s15
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80085ca:	e008      	b.n	80085de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	609a      	str	r2, [r3, #8]
}
 80085de:	bf00      	nop
 80085e0:	3724      	adds	r7, #36	@ 0x24
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	58024400 	.word	0x58024400
 80085f0:	03d09000 	.word	0x03d09000
 80085f4:	46000000 	.word	0x46000000
 80085f8:	4c742400 	.word	0x4c742400
 80085fc:	4a742400 	.word	0x4a742400
 8008600:	4bb71b00 	.word	0x4bb71b00

08008604 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008604:	b480      	push	{r7}
 8008606:	b089      	sub	sp, #36	@ 0x24
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800860c:	4ba1      	ldr	r3, [pc, #644]	@ (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800860e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008610:	f003 0303 	and.w	r3, r3, #3
 8008614:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008616:	4b9f      	ldr	r3, [pc, #636]	@ (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800861a:	0d1b      	lsrs	r3, r3, #20
 800861c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008620:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008622:	4b9c      	ldr	r3, [pc, #624]	@ (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008626:	0a1b      	lsrs	r3, r3, #8
 8008628:	f003 0301 	and.w	r3, r3, #1
 800862c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800862e:	4b99      	ldr	r3, [pc, #612]	@ (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008632:	08db      	lsrs	r3, r3, #3
 8008634:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	fb02 f303 	mul.w	r3, r2, r3
 800863e:	ee07 3a90 	vmov	s15, r3
 8008642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008646:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 8111 	beq.w	8008874 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	2b02      	cmp	r3, #2
 8008656:	f000 8083 	beq.w	8008760 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	2b02      	cmp	r3, #2
 800865e:	f200 80a1 	bhi.w	80087a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d003      	beq.n	8008670 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d056      	beq.n	800871c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800866e:	e099      	b.n	80087a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008670:	4b88      	ldr	r3, [pc, #544]	@ (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 0320 	and.w	r3, r3, #32
 8008678:	2b00      	cmp	r3, #0
 800867a:	d02d      	beq.n	80086d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800867c:	4b85      	ldr	r3, [pc, #532]	@ (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	08db      	lsrs	r3, r3, #3
 8008682:	f003 0303 	and.w	r3, r3, #3
 8008686:	4a84      	ldr	r2, [pc, #528]	@ (8008898 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008688:	fa22 f303 	lsr.w	r3, r2, r3
 800868c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	ee07 3a90 	vmov	s15, r3
 8008694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	ee07 3a90 	vmov	s15, r3
 800869e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086a6:	4b7b      	ldr	r3, [pc, #492]	@ (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ae:	ee07 3a90 	vmov	s15, r3
 80086b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800889c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80086d6:	e087      	b.n	80087e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	ee07 3a90 	vmov	s15, r3
 80086de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80088a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80086e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ea:	4b6a      	ldr	r3, [pc, #424]	@ (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086f2:	ee07 3a90 	vmov	s15, r3
 80086f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80086fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800889c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800870a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800870e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800871a:	e065      	b.n	80087e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	ee07 3a90 	vmov	s15, r3
 8008722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008726:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800872a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800872e:	4b59      	ldr	r3, [pc, #356]	@ (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008736:	ee07 3a90 	vmov	s15, r3
 800873a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800873e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008742:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800889c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800874a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800874e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800875a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800875e:	e043      	b.n	80087e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	ee07 3a90 	vmov	s15, r3
 8008766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800876a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80088a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800876e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008772:	4b48      	ldr	r3, [pc, #288]	@ (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800877a:	ee07 3a90 	vmov	s15, r3
 800877e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008782:	ed97 6a03 	vldr	s12, [r7, #12]
 8008786:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800889c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800878a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800878e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800879a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800879e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087a2:	e021      	b.n	80087e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	ee07 3a90 	vmov	s15, r3
 80087aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80087b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087b6:	4b37      	ldr	r3, [pc, #220]	@ (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087be:	ee07 3a90 	vmov	s15, r3
 80087c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800889c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80087ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80087e8:	4b2a      	ldr	r3, [pc, #168]	@ (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ec:	0a5b      	lsrs	r3, r3, #9
 80087ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087f2:	ee07 3a90 	vmov	s15, r3
 80087f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008802:	edd7 6a07 	vldr	s13, [r7, #28]
 8008806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800880a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800880e:	ee17 2a90 	vmov	r2, s15
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008816:	4b1f      	ldr	r3, [pc, #124]	@ (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800881a:	0c1b      	lsrs	r3, r3, #16
 800881c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008820:	ee07 3a90 	vmov	s15, r3
 8008824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008828:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800882c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008830:	edd7 6a07 	vldr	s13, [r7, #28]
 8008834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800883c:	ee17 2a90 	vmov	r2, s15
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008844:	4b13      	ldr	r3, [pc, #76]	@ (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008848:	0e1b      	lsrs	r3, r3, #24
 800884a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800884e:	ee07 3a90 	vmov	s15, r3
 8008852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008856:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800885a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800885e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800886a:	ee17 2a90 	vmov	r2, s15
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008872:	e008      	b.n	8008886 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	609a      	str	r2, [r3, #8]
}
 8008886:	bf00      	nop
 8008888:	3724      	adds	r7, #36	@ 0x24
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	58024400 	.word	0x58024400
 8008898:	03d09000 	.word	0x03d09000
 800889c:	46000000 	.word	0x46000000
 80088a0:	4c742400 	.word	0x4c742400
 80088a4:	4a742400 	.word	0x4a742400
 80088a8:	4bb71b00 	.word	0x4bb71b00

080088ac <RCCEx_PLL2_Config>:
>>>>>>> main
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
<<<<<<< HEAD
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	73fb      	strb	r3, [r7, #15]
=======
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	73fb      	strb	r3, [r7, #15]
>>>>>>> main
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
<<<<<<< HEAD
 8007ff2:	4b53      	ldr	r3, [pc, #332]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 8007ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff6:	f003 0303 	and.w	r3, r3, #3
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	d101      	bne.n	8008002 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e099      	b.n	8008136 <RCCEx_PLL2_Config+0x152>
=======
 80088ba:	4b53      	ldr	r3, [pc, #332]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80088bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088be:	f003 0303 	and.w	r3, r3, #3
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	d101      	bne.n	80088ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e099      	b.n	80089fe <RCCEx_PLL2_Config+0x152>
>>>>>>> main


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
<<<<<<< HEAD
 8008002:	4b4f      	ldr	r3, [pc, #316]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a4e      	ldr	r2, [pc, #312]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 8008008:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800800c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800800e:	f7fb fdeb 	bl	8003be8 <HAL_GetTick>
 8008012:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008014:	e008      	b.n	8008028 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008016:	f7fb fde7 	bl	8003be8 <HAL_GetTick>
 800801a:	4602      	mov	r2, r0
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	2b02      	cmp	r3, #2
 8008022:	d901      	bls.n	8008028 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	e086      	b.n	8008136 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008028:	4b45      	ldr	r3, [pc, #276]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1f0      	bne.n	8008016 <RCCEx_PLL2_Config+0x32>
=======
 80088ca:	4b4f      	ldr	r3, [pc, #316]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a4e      	ldr	r2, [pc, #312]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80088d0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80088d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088d6:	f7fa fcf5 	bl	80032c4 <HAL_GetTick>
 80088da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088dc:	e008      	b.n	80088f0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80088de:	f7fa fcf1 	bl	80032c4 <HAL_GetTick>
 80088e2:	4602      	mov	r2, r0
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d901      	bls.n	80088f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088ec:	2303      	movs	r3, #3
 80088ee:	e086      	b.n	80089fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088f0:	4b45      	ldr	r3, [pc, #276]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1f0      	bne.n	80088de <RCCEx_PLL2_Config+0x32>
>>>>>>> main
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
<<<<<<< HEAD
 8008034:	4b42      	ldr	r3, [pc, #264]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 8008036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008038:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	031b      	lsls	r3, r3, #12
 8008042:	493f      	ldr	r1, [pc, #252]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 8008044:	4313      	orrs	r3, r2
 8008046:	628b      	str	r3, [r1, #40]	@ 0x28
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	3b01      	subs	r3, #1
 800804e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	3b01      	subs	r3, #1
 8008058:	025b      	lsls	r3, r3, #9
 800805a:	b29b      	uxth	r3, r3
 800805c:	431a      	orrs	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	3b01      	subs	r3, #1
 8008064:	041b      	lsls	r3, r3, #16
 8008066:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800806a:	431a      	orrs	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	3b01      	subs	r3, #1
 8008072:	061b      	lsls	r3, r3, #24
 8008074:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008078:	4931      	ldr	r1, [pc, #196]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 800807a:	4313      	orrs	r3, r2
 800807c:	638b      	str	r3, [r1, #56]	@ 0x38
=======
 80088fc:	4b42      	ldr	r3, [pc, #264]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80088fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008900:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	031b      	lsls	r3, r3, #12
 800890a:	493f      	ldr	r1, [pc, #252]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 800890c:	4313      	orrs	r3, r2
 800890e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	3b01      	subs	r3, #1
 8008916:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	3b01      	subs	r3, #1
 8008920:	025b      	lsls	r3, r3, #9
 8008922:	b29b      	uxth	r3, r3
 8008924:	431a      	orrs	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	3b01      	subs	r3, #1
 800892c:	041b      	lsls	r3, r3, #16
 800892e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008932:	431a      	orrs	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	3b01      	subs	r3, #1
 800893a:	061b      	lsls	r3, r3, #24
 800893c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008940:	4931      	ldr	r1, [pc, #196]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 8008942:	4313      	orrs	r3, r2
 8008944:	638b      	str	r3, [r1, #56]	@ 0x38
>>>>>>> main
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
<<<<<<< HEAD
 800807e:	4b30      	ldr	r3, [pc, #192]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 8008080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008082:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	492d      	ldr	r1, [pc, #180]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 800808c:	4313      	orrs	r3, r2
 800808e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008090:	4b2b      	ldr	r3, [pc, #172]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 8008092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008094:	f023 0220 	bic.w	r2, r3, #32
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	4928      	ldr	r1, [pc, #160]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 800809e:	4313      	orrs	r3, r2
 80080a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80080a2:	4b27      	ldr	r3, [pc, #156]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 80080a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a6:	4a26      	ldr	r2, [pc, #152]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 80080a8:	f023 0310 	bic.w	r3, r3, #16
 80080ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80080ae:	4b24      	ldr	r3, [pc, #144]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 80080b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080b2:	4b24      	ldr	r3, [pc, #144]	@ (8008144 <RCCEx_PLL2_Config+0x160>)
 80080b4:	4013      	ands	r3, r2
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	69d2      	ldr	r2, [r2, #28]
 80080ba:	00d2      	lsls	r2, r2, #3
 80080bc:	4920      	ldr	r1, [pc, #128]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 80080be:	4313      	orrs	r3, r2
 80080c0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80080c2:	4b1f      	ldr	r3, [pc, #124]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 80080c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c6:	4a1e      	ldr	r2, [pc, #120]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 80080c8:	f043 0310 	orr.w	r3, r3, #16
 80080cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d106      	bne.n	80080e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80080d4:	4b1a      	ldr	r3, [pc, #104]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 80080d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d8:	4a19      	ldr	r2, [pc, #100]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 80080da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80080de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80080e0:	e00f      	b.n	8008102 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d106      	bne.n	80080f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80080e8:	4b15      	ldr	r3, [pc, #84]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 80080ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ec:	4a14      	ldr	r2, [pc, #80]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 80080ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80080f4:	e005      	b.n	8008102 <RCCEx_PLL2_Config+0x11e>
=======
 8008946:	4b30      	ldr	r3, [pc, #192]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 8008948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800894a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	492d      	ldr	r1, [pc, #180]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 8008954:	4313      	orrs	r3, r2
 8008956:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008958:	4b2b      	ldr	r3, [pc, #172]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 800895a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800895c:	f023 0220 	bic.w	r2, r3, #32
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	699b      	ldr	r3, [r3, #24]
 8008964:	4928      	ldr	r1, [pc, #160]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 8008966:	4313      	orrs	r3, r2
 8008968:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800896a:	4b27      	ldr	r3, [pc, #156]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 800896c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800896e:	4a26      	ldr	r2, [pc, #152]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 8008970:	f023 0310 	bic.w	r3, r3, #16
 8008974:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008976:	4b24      	ldr	r3, [pc, #144]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 8008978:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800897a:	4b24      	ldr	r3, [pc, #144]	@ (8008a0c <RCCEx_PLL2_Config+0x160>)
 800897c:	4013      	ands	r3, r2
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	69d2      	ldr	r2, [r2, #28]
 8008982:	00d2      	lsls	r2, r2, #3
 8008984:	4920      	ldr	r1, [pc, #128]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 8008986:	4313      	orrs	r3, r2
 8008988:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800898a:	4b1f      	ldr	r3, [pc, #124]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 800898c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800898e:	4a1e      	ldr	r2, [pc, #120]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 8008990:	f043 0310 	orr.w	r3, r3, #16
 8008994:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d106      	bne.n	80089aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800899c:	4b1a      	ldr	r3, [pc, #104]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 800899e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a0:	4a19      	ldr	r2, [pc, #100]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80089a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80089a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80089a8:	e00f      	b.n	80089ca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d106      	bne.n	80089be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80089b0:	4b15      	ldr	r3, [pc, #84]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80089b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b4:	4a14      	ldr	r2, [pc, #80]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80089b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80089bc:	e005      	b.n	80089ca <RCCEx_PLL2_Config+0x11e>
>>>>>>> main
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
<<<<<<< HEAD
 80080f6:	4b12      	ldr	r3, [pc, #72]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 80080f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080fa:	4a11      	ldr	r2, [pc, #68]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 80080fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008100:	62d3      	str	r3, [r2, #44]	@ 0x2c
=======
 80089be:	4b12      	ldr	r3, [pc, #72]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80089c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c2:	4a11      	ldr	r2, [pc, #68]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80089c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80089c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
>>>>>>> main
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
<<<<<<< HEAD
 8008102:	4b0f      	ldr	r3, [pc, #60]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a0e      	ldr	r2, [pc, #56]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 8008108:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800810c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800810e:	f7fb fd6b 	bl	8003be8 <HAL_GetTick>
 8008112:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008114:	e008      	b.n	8008128 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008116:	f7fb fd67 	bl	8003be8 <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b02      	cmp	r3, #2
 8008122:	d901      	bls.n	8008128 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e006      	b.n	8008136 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008128:	4b05      	ldr	r3, [pc, #20]	@ (8008140 <RCCEx_PLL2_Config+0x15c>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008130:	2b00      	cmp	r3, #0
 8008132:	d0f0      	beq.n	8008116 <RCCEx_PLL2_Config+0x132>
=======
 80089ca:	4b0f      	ldr	r3, [pc, #60]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a0e      	ldr	r2, [pc, #56]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80089d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80089d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089d6:	f7fa fc75 	bl	80032c4 <HAL_GetTick>
 80089da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089dc:	e008      	b.n	80089f0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80089de:	f7fa fc71 	bl	80032c4 <HAL_GetTick>
 80089e2:	4602      	mov	r2, r0
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d901      	bls.n	80089f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089ec:	2303      	movs	r3, #3
 80089ee:	e006      	b.n	80089fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089f0:	4b05      	ldr	r3, [pc, #20]	@ (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d0f0      	beq.n	80089de <RCCEx_PLL2_Config+0x132>
>>>>>>> main
    }

  }


  return status;
<<<<<<< HEAD
 8008134:	7bfb      	ldrb	r3, [r7, #15]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	58024400 	.word	0x58024400
 8008144:	ffff0007 	.word	0xffff0007

08008148 <RCCEx_PLL3_Config>:
=======
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	58024400 	.word	0x58024400
 8008a0c:	ffff0007 	.word	0xffff0007

08008a10 <RCCEx_PLL3_Config>:
>>>>>>> main
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
<<<<<<< HEAD
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008152:	2300      	movs	r3, #0
 8008154:	73fb      	strb	r3, [r7, #15]
=======
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	73fb      	strb	r3, [r7, #15]
>>>>>>> main
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
<<<<<<< HEAD
 8008156:	4b53      	ldr	r3, [pc, #332]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 8008158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800815a:	f003 0303 	and.w	r3, r3, #3
 800815e:	2b03      	cmp	r3, #3
 8008160:	d101      	bne.n	8008166 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	e099      	b.n	800829a <RCCEx_PLL3_Config+0x152>
=======
 8008a1e:	4b53      	ldr	r3, [pc, #332]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a22:	f003 0303 	and.w	r3, r3, #3
 8008a26:	2b03      	cmp	r3, #3
 8008a28:	d101      	bne.n	8008a2e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e099      	b.n	8008b62 <RCCEx_PLL3_Config+0x152>
>>>>>>> main


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
<<<<<<< HEAD
 8008166:	4b4f      	ldr	r3, [pc, #316]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a4e      	ldr	r2, [pc, #312]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 800816c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008172:	f7fb fd39 	bl	8003be8 <HAL_GetTick>
 8008176:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008178:	e008      	b.n	800818c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800817a:	f7fb fd35 	bl	8003be8 <HAL_GetTick>
 800817e:	4602      	mov	r2, r0
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	2b02      	cmp	r3, #2
 8008186:	d901      	bls.n	800818c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	e086      	b.n	800829a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800818c:	4b45      	ldr	r3, [pc, #276]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1f0      	bne.n	800817a <RCCEx_PLL3_Config+0x32>
=======
 8008a2e:	4b4f      	ldr	r3, [pc, #316]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a4e      	ldr	r2, [pc, #312]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008a34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a3a:	f7fa fc43 	bl	80032c4 <HAL_GetTick>
 8008a3e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a40:	e008      	b.n	8008a54 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a42:	f7fa fc3f 	bl	80032c4 <HAL_GetTick>
 8008a46:	4602      	mov	r2, r0
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d901      	bls.n	8008a54 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	e086      	b.n	8008b62 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a54:	4b45      	ldr	r3, [pc, #276]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1f0      	bne.n	8008a42 <RCCEx_PLL3_Config+0x32>
>>>>>>> main
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
<<<<<<< HEAD
 8008198:	4b42      	ldr	r3, [pc, #264]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 800819a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800819c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	051b      	lsls	r3, r3, #20
 80081a6:	493f      	ldr	r1, [pc, #252]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 80081a8:	4313      	orrs	r3, r2
 80081aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	3b01      	subs	r3, #1
 80081b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	3b01      	subs	r3, #1
 80081bc:	025b      	lsls	r3, r3, #9
 80081be:	b29b      	uxth	r3, r3
 80081c0:	431a      	orrs	r2, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	3b01      	subs	r3, #1
 80081c8:	041b      	lsls	r3, r3, #16
 80081ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80081ce:	431a      	orrs	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	3b01      	subs	r3, #1
 80081d6:	061b      	lsls	r3, r3, #24
 80081d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80081dc:	4931      	ldr	r1, [pc, #196]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 80081de:	4313      	orrs	r3, r2
 80081e0:	640b      	str	r3, [r1, #64]	@ 0x40
=======
 8008a60:	4b42      	ldr	r3, [pc, #264]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a64:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	051b      	lsls	r3, r3, #20
 8008a6e:	493f      	ldr	r1, [pc, #252]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008a70:	4313      	orrs	r3, r2
 8008a72:	628b      	str	r3, [r1, #40]	@ 0x28
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	3b01      	subs	r3, #1
 8008a84:	025b      	lsls	r3, r3, #9
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	431a      	orrs	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	041b      	lsls	r3, r3, #16
 8008a92:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008a96:	431a      	orrs	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	061b      	lsls	r3, r3, #24
 8008aa0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008aa4:	4931      	ldr	r1, [pc, #196]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	640b      	str	r3, [r1, #64]	@ 0x40
>>>>>>> main
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
<<<<<<< HEAD
 80081e2:	4b30      	ldr	r3, [pc, #192]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 80081e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	492d      	ldr	r1, [pc, #180]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 80081f0:	4313      	orrs	r3, r2
 80081f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80081f4:	4b2b      	ldr	r3, [pc, #172]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 80081f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	4928      	ldr	r1, [pc, #160]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 8008202:	4313      	orrs	r3, r2
 8008204:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008206:	4b27      	ldr	r3, [pc, #156]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 8008208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820a:	4a26      	ldr	r2, [pc, #152]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 800820c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008210:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008212:	4b24      	ldr	r3, [pc, #144]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 8008214:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008216:	4b24      	ldr	r3, [pc, #144]	@ (80082a8 <RCCEx_PLL3_Config+0x160>)
 8008218:	4013      	ands	r3, r2
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	69d2      	ldr	r2, [r2, #28]
 800821e:	00d2      	lsls	r2, r2, #3
 8008220:	4920      	ldr	r1, [pc, #128]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 8008222:	4313      	orrs	r3, r2
 8008224:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008226:	4b1f      	ldr	r3, [pc, #124]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 8008228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800822a:	4a1e      	ldr	r2, [pc, #120]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 800822c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008230:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d106      	bne.n	8008246 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008238:	4b1a      	ldr	r3, [pc, #104]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 800823a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823c:	4a19      	ldr	r2, [pc, #100]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 800823e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008242:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008244:	e00f      	b.n	8008266 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d106      	bne.n	800825a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800824c:	4b15      	ldr	r3, [pc, #84]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 800824e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008250:	4a14      	ldr	r2, [pc, #80]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 8008252:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008256:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008258:	e005      	b.n	8008266 <RCCEx_PLL3_Config+0x11e>
=======
 8008aaa:	4b30      	ldr	r3, [pc, #192]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	492d      	ldr	r1, [pc, #180]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008abc:	4b2b      	ldr	r3, [pc, #172]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	699b      	ldr	r3, [r3, #24]
 8008ac8:	4928      	ldr	r1, [pc, #160]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008aca:	4313      	orrs	r3, r2
 8008acc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008ace:	4b27      	ldr	r3, [pc, #156]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad2:	4a26      	ldr	r2, [pc, #152]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008ad4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008ada:	4b24      	ldr	r3, [pc, #144]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008adc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ade:	4b24      	ldr	r3, [pc, #144]	@ (8008b70 <RCCEx_PLL3_Config+0x160>)
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	69d2      	ldr	r2, [r2, #28]
 8008ae6:	00d2      	lsls	r2, r2, #3
 8008ae8:	4920      	ldr	r1, [pc, #128]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008aee:	4b1f      	ldr	r3, [pc, #124]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af2:	4a1e      	ldr	r2, [pc, #120]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008af8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d106      	bne.n	8008b0e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008b00:	4b1a      	ldr	r3, [pc, #104]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b04:	4a19      	ldr	r2, [pc, #100]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008b06:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008b0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b0c:	e00f      	b.n	8008b2e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d106      	bne.n	8008b22 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008b14:	4b15      	ldr	r3, [pc, #84]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b18:	4a14      	ldr	r2, [pc, #80]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008b1a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008b1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b20:	e005      	b.n	8008b2e <RCCEx_PLL3_Config+0x11e>
>>>>>>> main
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
<<<<<<< HEAD
 800825a:	4b12      	ldr	r3, [pc, #72]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 800825c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800825e:	4a11      	ldr	r2, [pc, #68]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 8008260:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008264:	62d3      	str	r3, [r2, #44]	@ 0x2c
=======
 8008b22:	4b12      	ldr	r3, [pc, #72]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b26:	4a11      	ldr	r2, [pc, #68]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008b28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
>>>>>>> main
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
<<<<<<< HEAD
 8008266:	4b0f      	ldr	r3, [pc, #60]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a0e      	ldr	r2, [pc, #56]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 800826c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008272:	f7fb fcb9 	bl	8003be8 <HAL_GetTick>
 8008276:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008278:	e008      	b.n	800828c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800827a:	f7fb fcb5 	bl	8003be8 <HAL_GetTick>
 800827e:	4602      	mov	r2, r0
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	1ad3      	subs	r3, r2, r3
 8008284:	2b02      	cmp	r3, #2
 8008286:	d901      	bls.n	800828c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008288:	2303      	movs	r3, #3
 800828a:	e006      	b.n	800829a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800828c:	4b05      	ldr	r3, [pc, #20]	@ (80082a4 <RCCEx_PLL3_Config+0x15c>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d0f0      	beq.n	800827a <RCCEx_PLL3_Config+0x132>
=======
 8008b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a0e      	ldr	r2, [pc, #56]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b3a:	f7fa fbc3 	bl	80032c4 <HAL_GetTick>
 8008b3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b40:	e008      	b.n	8008b54 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b42:	f7fa fbbf 	bl	80032c4 <HAL_GetTick>
 8008b46:	4602      	mov	r2, r0
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	1ad3      	subs	r3, r2, r3
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d901      	bls.n	8008b54 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b50:	2303      	movs	r3, #3
 8008b52:	e006      	b.n	8008b62 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b54:	4b05      	ldr	r3, [pc, #20]	@ (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d0f0      	beq.n	8008b42 <RCCEx_PLL3_Config+0x132>
>>>>>>> main
    }

  }


  return status;
<<<<<<< HEAD
 8008298:	7bfb      	ldrb	r3, [r7, #15]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	58024400 	.word	0x58024400
 80082a8:	ffff0007 	.word	0xffff0007

080082ac <HAL_TIM_Base_Init>:
=======
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	58024400 	.word	0x58024400
 8008b70:	ffff0007 	.word	0xffff0007

08008b74 <HAL_TIM_Base_Init>:
>>>>>>> main
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d101      	bne.n	80082be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e049      	b.n	8008352 <HAL_TIM_Base_Init+0xa6>
=======
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d101      	bne.n	8008b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e049      	b.n	8008c1a <HAL_TIM_Base_Init+0xa6>
>>>>>>> main
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d106      	bne.n	80082d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d106      	bne.n	8008ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> main
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7fa feb6 	bl	8003044 <HAL_TIM_Base_MspInit>
=======
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7f9 fd60 	bl	8002660 <HAL_TIM_Base_MspInit>
>>>>>>> main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2202      	movs	r2, #2
 80082dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	3304      	adds	r3, #4
 80082e8:	4619      	mov	r1, r3
 80082ea:	4610      	mov	r0, r2
 80082ec:	f000 fd5a 	bl	8008da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3708      	adds	r7, #8
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
	...

0800835c <HAL_TIM_Base_Start_IT>:
=======
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2202      	movs	r2, #2
 8008ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	3304      	adds	r3, #4
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	4610      	mov	r0, r2
 8008bb4:	f000 fd5a 	bl	800966c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
	...

08008c24 <HAL_TIM_Base_Start_IT>:
>>>>>>> main
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
=======
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
>>>>>>> main

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b01      	cmp	r3, #1
 800836e:	d001      	beq.n	8008374 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e054      	b.n	800841e <HAL_TIM_Base_Start_IT+0xc2>
=======
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d001      	beq.n	8008c3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e054      	b.n	8008ce6 <HAL_TIM_Base_Start_IT+0xc2>
>>>>>>> main
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2202      	movs	r2, #2
 8008378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68da      	ldr	r2, [r3, #12]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f042 0201 	orr.w	r2, r2, #1
 800838a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a26      	ldr	r2, [pc, #152]	@ (800842c <HAL_TIM_Base_Start_IT+0xd0>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d022      	beq.n	80083dc <HAL_TIM_Base_Start_IT+0x80>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800839e:	d01d      	beq.n	80083dc <HAL_TIM_Base_Start_IT+0x80>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a22      	ldr	r2, [pc, #136]	@ (8008430 <HAL_TIM_Base_Start_IT+0xd4>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d018      	beq.n	80083dc <HAL_TIM_Base_Start_IT+0x80>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a21      	ldr	r2, [pc, #132]	@ (8008434 <HAL_TIM_Base_Start_IT+0xd8>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d013      	beq.n	80083dc <HAL_TIM_Base_Start_IT+0x80>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a1f      	ldr	r2, [pc, #124]	@ (8008438 <HAL_TIM_Base_Start_IT+0xdc>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d00e      	beq.n	80083dc <HAL_TIM_Base_Start_IT+0x80>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a1e      	ldr	r2, [pc, #120]	@ (800843c <HAL_TIM_Base_Start_IT+0xe0>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d009      	beq.n	80083dc <HAL_TIM_Base_Start_IT+0x80>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a1c      	ldr	r2, [pc, #112]	@ (8008440 <HAL_TIM_Base_Start_IT+0xe4>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d004      	beq.n	80083dc <HAL_TIM_Base_Start_IT+0x80>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a1b      	ldr	r2, [pc, #108]	@ (8008444 <HAL_TIM_Base_Start_IT+0xe8>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d115      	bne.n	8008408 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689a      	ldr	r2, [r3, #8]
 80083e2:	4b19      	ldr	r3, [pc, #100]	@ (8008448 <HAL_TIM_Base_Start_IT+0xec>)
 80083e4:	4013      	ands	r3, r2
 80083e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2b06      	cmp	r3, #6
 80083ec:	d015      	beq.n	800841a <HAL_TIM_Base_Start_IT+0xbe>
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083f4:	d011      	beq.n	800841a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f042 0201 	orr.w	r2, r2, #1
 8008404:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008406:	e008      	b.n	800841a <HAL_TIM_Base_Start_IT+0xbe>
=======
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68da      	ldr	r2, [r3, #12]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f042 0201 	orr.w	r2, r2, #1
 8008c52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a26      	ldr	r2, [pc, #152]	@ (8008cf4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d022      	beq.n	8008ca4 <HAL_TIM_Base_Start_IT+0x80>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c66:	d01d      	beq.n	8008ca4 <HAL_TIM_Base_Start_IT+0x80>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a22      	ldr	r2, [pc, #136]	@ (8008cf8 <HAL_TIM_Base_Start_IT+0xd4>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d018      	beq.n	8008ca4 <HAL_TIM_Base_Start_IT+0x80>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a21      	ldr	r2, [pc, #132]	@ (8008cfc <HAL_TIM_Base_Start_IT+0xd8>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d013      	beq.n	8008ca4 <HAL_TIM_Base_Start_IT+0x80>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a1f      	ldr	r2, [pc, #124]	@ (8008d00 <HAL_TIM_Base_Start_IT+0xdc>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d00e      	beq.n	8008ca4 <HAL_TIM_Base_Start_IT+0x80>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8008d04 <HAL_TIM_Base_Start_IT+0xe0>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d009      	beq.n	8008ca4 <HAL_TIM_Base_Start_IT+0x80>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a1c      	ldr	r2, [pc, #112]	@ (8008d08 <HAL_TIM_Base_Start_IT+0xe4>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d004      	beq.n	8008ca4 <HAL_TIM_Base_Start_IT+0x80>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8008d0c <HAL_TIM_Base_Start_IT+0xe8>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d115      	bne.n	8008cd0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	689a      	ldr	r2, [r3, #8]
 8008caa:	4b19      	ldr	r3, [pc, #100]	@ (8008d10 <HAL_TIM_Base_Start_IT+0xec>)
 8008cac:	4013      	ands	r3, r2
 8008cae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2b06      	cmp	r3, #6
 8008cb4:	d015      	beq.n	8008ce2 <HAL_TIM_Base_Start_IT+0xbe>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cbc:	d011      	beq.n	8008ce2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f042 0201 	orr.w	r2, r2, #1
 8008ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cce:	e008      	b.n	8008ce2 <HAL_TIM_Base_Start_IT+0xbe>
>>>>>>> main
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f042 0201 	orr.w	r2, r2, #1
 8008416:	601a      	str	r2, [r3, #0]
 8008418:	e000      	b.n	800841c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800841a:	bf00      	nop
=======
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f042 0201 	orr.w	r2, r2, #1
 8008cde:	601a      	str	r2, [r3, #0]
 8008ce0:	e000      	b.n	8008ce4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ce2:	bf00      	nop
>>>>>>> main
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	40010000 	.word	0x40010000
 8008430:	40000400 	.word	0x40000400
 8008434:	40000800 	.word	0x40000800
 8008438:	40000c00 	.word	0x40000c00
 800843c:	40010400 	.word	0x40010400
 8008440:	40001800 	.word	0x40001800
 8008444:	40014000 	.word	0x40014000
 8008448:	00010007 	.word	0x00010007

0800844c <HAL_TIM_PWM_Init>:
=======
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3714      	adds	r7, #20
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	40010000 	.word	0x40010000
 8008cf8:	40000400 	.word	0x40000400
 8008cfc:	40000800 	.word	0x40000800
 8008d00:	40000c00 	.word	0x40000c00
 8008d04:	40010400 	.word	0x40010400
 8008d08:	40001800 	.word	0x40001800
 8008d0c:	40014000 	.word	0x40014000
 8008d10:	00010007 	.word	0x00010007

08008d14 <HAL_TIM_PWM_Init>:
>>>>>>> main
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d101      	bne.n	800845e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e049      	b.n	80084f2 <HAL_TIM_PWM_Init+0xa6>
=======
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d101      	bne.n	8008d26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e049      	b.n	8008dba <HAL_TIM_PWM_Init+0xa6>
>>>>>>> main
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d106      	bne.n	8008478 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d106      	bne.n	8008d40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> main
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 f841 	bl	80084fa <HAL_TIM_PWM_MspInit>
=======
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 f841 	bl	8008dc2 <HAL_TIM_PWM_MspInit>
>>>>>>> main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	3304      	adds	r3, #4
 8008488:	4619      	mov	r1, r3
 800848a:	4610      	mov	r0, r2
 800848c:	f000 fc8a 	bl	8008da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <HAL_TIM_PWM_MspInit>:
=======
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2202      	movs	r2, #2
 8008d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	3304      	adds	r3, #4
 8008d50:	4619      	mov	r1, r3
 8008d52:	4610      	mov	r0, r2
 8008d54:	f000 fc8a 	bl	800966c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <HAL_TIM_PWM_MspInit>:
>>>>>>> main
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80084fa:	b480      	push	{r7}
 80084fc:	b083      	sub	sp, #12
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
=======
 8008dc2:	b480      	push	{r7}
 8008dc4:	b083      	sub	sp, #12
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 8008502:	bf00      	nop
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
	...

08008510 <HAL_TIM_PWM_Start>:
=======
 8008dca:	bf00      	nop
 8008dcc:	370c      	adds	r7, #12
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
	...

08008dd8 <HAL_TIM_PWM_Start>:
>>>>>>> main
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
=======
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
>>>>>>> main

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d109      	bne.n	8008534 <HAL_TIM_PWM_Start+0x24>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b01      	cmp	r3, #1
 800852a:	bf14      	ite	ne
 800852c:	2301      	movne	r3, #1
 800852e:	2300      	moveq	r3, #0
 8008530:	b2db      	uxtb	r3, r3
 8008532:	e03c      	b.n	80085ae <HAL_TIM_PWM_Start+0x9e>
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b04      	cmp	r3, #4
 8008538:	d109      	bne.n	800854e <HAL_TIM_PWM_Start+0x3e>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008540:	b2db      	uxtb	r3, r3
 8008542:	2b01      	cmp	r3, #1
 8008544:	bf14      	ite	ne
 8008546:	2301      	movne	r3, #1
 8008548:	2300      	moveq	r3, #0
 800854a:	b2db      	uxtb	r3, r3
 800854c:	e02f      	b.n	80085ae <HAL_TIM_PWM_Start+0x9e>
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	2b08      	cmp	r3, #8
 8008552:	d109      	bne.n	8008568 <HAL_TIM_PWM_Start+0x58>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800855a:	b2db      	uxtb	r3, r3
 800855c:	2b01      	cmp	r3, #1
 800855e:	bf14      	ite	ne
 8008560:	2301      	movne	r3, #1
 8008562:	2300      	moveq	r3, #0
 8008564:	b2db      	uxtb	r3, r3
 8008566:	e022      	b.n	80085ae <HAL_TIM_PWM_Start+0x9e>
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	2b0c      	cmp	r3, #12
 800856c:	d109      	bne.n	8008582 <HAL_TIM_PWM_Start+0x72>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008574:	b2db      	uxtb	r3, r3
 8008576:	2b01      	cmp	r3, #1
 8008578:	bf14      	ite	ne
 800857a:	2301      	movne	r3, #1
 800857c:	2300      	moveq	r3, #0
 800857e:	b2db      	uxtb	r3, r3
 8008580:	e015      	b.n	80085ae <HAL_TIM_PWM_Start+0x9e>
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b10      	cmp	r3, #16
 8008586:	d109      	bne.n	800859c <HAL_TIM_PWM_Start+0x8c>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800858e:	b2db      	uxtb	r3, r3
 8008590:	2b01      	cmp	r3, #1
 8008592:	bf14      	ite	ne
 8008594:	2301      	movne	r3, #1
 8008596:	2300      	moveq	r3, #0
 8008598:	b2db      	uxtb	r3, r3
 800859a:	e008      	b.n	80085ae <HAL_TIM_PWM_Start+0x9e>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	bf14      	ite	ne
 80085a8:	2301      	movne	r3, #1
 80085aa:	2300      	moveq	r3, #0
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e0a1      	b.n	80086fa <HAL_TIM_PWM_Start+0x1ea>
=======
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d109      	bne.n	8008dfc <HAL_TIM_PWM_Start+0x24>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	bf14      	ite	ne
 8008df4:	2301      	movne	r3, #1
 8008df6:	2300      	moveq	r3, #0
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	e03c      	b.n	8008e76 <HAL_TIM_PWM_Start+0x9e>
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	2b04      	cmp	r3, #4
 8008e00:	d109      	bne.n	8008e16 <HAL_TIM_PWM_Start+0x3e>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	bf14      	ite	ne
 8008e0e:	2301      	movne	r3, #1
 8008e10:	2300      	moveq	r3, #0
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	e02f      	b.n	8008e76 <HAL_TIM_PWM_Start+0x9e>
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	2b08      	cmp	r3, #8
 8008e1a:	d109      	bne.n	8008e30 <HAL_TIM_PWM_Start+0x58>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	bf14      	ite	ne
 8008e28:	2301      	movne	r3, #1
 8008e2a:	2300      	moveq	r3, #0
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	e022      	b.n	8008e76 <HAL_TIM_PWM_Start+0x9e>
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	2b0c      	cmp	r3, #12
 8008e34:	d109      	bne.n	8008e4a <HAL_TIM_PWM_Start+0x72>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	bf14      	ite	ne
 8008e42:	2301      	movne	r3, #1
 8008e44:	2300      	moveq	r3, #0
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	e015      	b.n	8008e76 <HAL_TIM_PWM_Start+0x9e>
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	2b10      	cmp	r3, #16
 8008e4e:	d109      	bne.n	8008e64 <HAL_TIM_PWM_Start+0x8c>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	bf14      	ite	ne
 8008e5c:	2301      	movne	r3, #1
 8008e5e:	2300      	moveq	r3, #0
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	e008      	b.n	8008e76 <HAL_TIM_PWM_Start+0x9e>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	bf14      	ite	ne
 8008e70:	2301      	movne	r3, #1
 8008e72:	2300      	moveq	r3, #0
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d001      	beq.n	8008e7e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e0a1      	b.n	8008fc2 <HAL_TIM_PWM_Start+0x1ea>
>>>>>>> main
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d104      	bne.n	80085c6 <HAL_TIM_PWM_Start+0xb6>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2202      	movs	r2, #2
 80085c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085c4:	e023      	b.n	800860e <HAL_TIM_PWM_Start+0xfe>
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	2b04      	cmp	r3, #4
 80085ca:	d104      	bne.n	80085d6 <HAL_TIM_PWM_Start+0xc6>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2202      	movs	r2, #2
 80085d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085d4:	e01b      	b.n	800860e <HAL_TIM_PWM_Start+0xfe>
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	2b08      	cmp	r3, #8
 80085da:	d104      	bne.n	80085e6 <HAL_TIM_PWM_Start+0xd6>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2202      	movs	r2, #2
 80085e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085e4:	e013      	b.n	800860e <HAL_TIM_PWM_Start+0xfe>
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	2b0c      	cmp	r3, #12
 80085ea:	d104      	bne.n	80085f6 <HAL_TIM_PWM_Start+0xe6>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2202      	movs	r2, #2
 80085f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80085f4:	e00b      	b.n	800860e <HAL_TIM_PWM_Start+0xfe>
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	2b10      	cmp	r3, #16
 80085fa:	d104      	bne.n	8008606 <HAL_TIM_PWM_Start+0xf6>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2202      	movs	r2, #2
 8008600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008604:	e003      	b.n	800860e <HAL_TIM_PWM_Start+0xfe>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2202      	movs	r2, #2
 800860a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2201      	movs	r2, #1
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	4618      	mov	r0, r3
 8008618:	f000 ffde 	bl	80095d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a38      	ldr	r2, [pc, #224]	@ (8008704 <HAL_TIM_PWM_Start+0x1f4>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d013      	beq.n	800864e <HAL_TIM_PWM_Start+0x13e>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a37      	ldr	r2, [pc, #220]	@ (8008708 <HAL_TIM_PWM_Start+0x1f8>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d00e      	beq.n	800864e <HAL_TIM_PWM_Start+0x13e>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a35      	ldr	r2, [pc, #212]	@ (800870c <HAL_TIM_PWM_Start+0x1fc>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d009      	beq.n	800864e <HAL_TIM_PWM_Start+0x13e>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a34      	ldr	r2, [pc, #208]	@ (8008710 <HAL_TIM_PWM_Start+0x200>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d004      	beq.n	800864e <HAL_TIM_PWM_Start+0x13e>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a32      	ldr	r2, [pc, #200]	@ (8008714 <HAL_TIM_PWM_Start+0x204>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d101      	bne.n	8008652 <HAL_TIM_PWM_Start+0x142>
 800864e:	2301      	movs	r3, #1
 8008650:	e000      	b.n	8008654 <HAL_TIM_PWM_Start+0x144>
 8008652:	2300      	movs	r3, #0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d007      	beq.n	8008668 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008666:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d104      	bne.n	8008e8e <HAL_TIM_PWM_Start+0xb6>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2202      	movs	r2, #2
 8008e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e8c:	e023      	b.n	8008ed6 <HAL_TIM_PWM_Start+0xfe>
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	2b04      	cmp	r3, #4
 8008e92:	d104      	bne.n	8008e9e <HAL_TIM_PWM_Start+0xc6>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2202      	movs	r2, #2
 8008e98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e9c:	e01b      	b.n	8008ed6 <HAL_TIM_PWM_Start+0xfe>
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	2b08      	cmp	r3, #8
 8008ea2:	d104      	bne.n	8008eae <HAL_TIM_PWM_Start+0xd6>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2202      	movs	r2, #2
 8008ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008eac:	e013      	b.n	8008ed6 <HAL_TIM_PWM_Start+0xfe>
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	2b0c      	cmp	r3, #12
 8008eb2:	d104      	bne.n	8008ebe <HAL_TIM_PWM_Start+0xe6>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2202      	movs	r2, #2
 8008eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008ebc:	e00b      	b.n	8008ed6 <HAL_TIM_PWM_Start+0xfe>
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	2b10      	cmp	r3, #16
 8008ec2:	d104      	bne.n	8008ece <HAL_TIM_PWM_Start+0xf6>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2202      	movs	r2, #2
 8008ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ecc:	e003      	b.n	8008ed6 <HAL_TIM_PWM_Start+0xfe>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2202      	movs	r2, #2
 8008ed2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2201      	movs	r2, #1
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 ffde 	bl	8009ea0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a38      	ldr	r2, [pc, #224]	@ (8008fcc <HAL_TIM_PWM_Start+0x1f4>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d013      	beq.n	8008f16 <HAL_TIM_PWM_Start+0x13e>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a37      	ldr	r2, [pc, #220]	@ (8008fd0 <HAL_TIM_PWM_Start+0x1f8>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d00e      	beq.n	8008f16 <HAL_TIM_PWM_Start+0x13e>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a35      	ldr	r2, [pc, #212]	@ (8008fd4 <HAL_TIM_PWM_Start+0x1fc>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d009      	beq.n	8008f16 <HAL_TIM_PWM_Start+0x13e>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a34      	ldr	r2, [pc, #208]	@ (8008fd8 <HAL_TIM_PWM_Start+0x200>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d004      	beq.n	8008f16 <HAL_TIM_PWM_Start+0x13e>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a32      	ldr	r2, [pc, #200]	@ (8008fdc <HAL_TIM_PWM_Start+0x204>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d101      	bne.n	8008f1a <HAL_TIM_PWM_Start+0x142>
 8008f16:	2301      	movs	r3, #1
 8008f18:	e000      	b.n	8008f1c <HAL_TIM_PWM_Start+0x144>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d007      	beq.n	8008f30 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008f2e:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> main
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
<<<<<<< HEAD
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a25      	ldr	r2, [pc, #148]	@ (8008704 <HAL_TIM_PWM_Start+0x1f4>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d022      	beq.n	80086b8 <HAL_TIM_PWM_Start+0x1a8>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800867a:	d01d      	beq.n	80086b8 <HAL_TIM_PWM_Start+0x1a8>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a25      	ldr	r2, [pc, #148]	@ (8008718 <HAL_TIM_PWM_Start+0x208>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d018      	beq.n	80086b8 <HAL_TIM_PWM_Start+0x1a8>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a24      	ldr	r2, [pc, #144]	@ (800871c <HAL_TIM_PWM_Start+0x20c>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d013      	beq.n	80086b8 <HAL_TIM_PWM_Start+0x1a8>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a22      	ldr	r2, [pc, #136]	@ (8008720 <HAL_TIM_PWM_Start+0x210>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d00e      	beq.n	80086b8 <HAL_TIM_PWM_Start+0x1a8>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a1a      	ldr	r2, [pc, #104]	@ (8008708 <HAL_TIM_PWM_Start+0x1f8>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d009      	beq.n	80086b8 <HAL_TIM_PWM_Start+0x1a8>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a1e      	ldr	r2, [pc, #120]	@ (8008724 <HAL_TIM_PWM_Start+0x214>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d004      	beq.n	80086b8 <HAL_TIM_PWM_Start+0x1a8>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a16      	ldr	r2, [pc, #88]	@ (800870c <HAL_TIM_PWM_Start+0x1fc>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d115      	bne.n	80086e4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	689a      	ldr	r2, [r3, #8]
 80086be:	4b1a      	ldr	r3, [pc, #104]	@ (8008728 <HAL_TIM_PWM_Start+0x218>)
 80086c0:	4013      	ands	r3, r2
 80086c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b06      	cmp	r3, #6
 80086c8:	d015      	beq.n	80086f6 <HAL_TIM_PWM_Start+0x1e6>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086d0:	d011      	beq.n	80086f6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f042 0201 	orr.w	r2, r2, #1
 80086e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086e2:	e008      	b.n	80086f6 <HAL_TIM_PWM_Start+0x1e6>
=======
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a25      	ldr	r2, [pc, #148]	@ (8008fcc <HAL_TIM_PWM_Start+0x1f4>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d022      	beq.n	8008f80 <HAL_TIM_PWM_Start+0x1a8>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f42:	d01d      	beq.n	8008f80 <HAL_TIM_PWM_Start+0x1a8>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a25      	ldr	r2, [pc, #148]	@ (8008fe0 <HAL_TIM_PWM_Start+0x208>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d018      	beq.n	8008f80 <HAL_TIM_PWM_Start+0x1a8>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a24      	ldr	r2, [pc, #144]	@ (8008fe4 <HAL_TIM_PWM_Start+0x20c>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d013      	beq.n	8008f80 <HAL_TIM_PWM_Start+0x1a8>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a22      	ldr	r2, [pc, #136]	@ (8008fe8 <HAL_TIM_PWM_Start+0x210>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d00e      	beq.n	8008f80 <HAL_TIM_PWM_Start+0x1a8>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a1a      	ldr	r2, [pc, #104]	@ (8008fd0 <HAL_TIM_PWM_Start+0x1f8>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d009      	beq.n	8008f80 <HAL_TIM_PWM_Start+0x1a8>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a1e      	ldr	r2, [pc, #120]	@ (8008fec <HAL_TIM_PWM_Start+0x214>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d004      	beq.n	8008f80 <HAL_TIM_PWM_Start+0x1a8>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a16      	ldr	r2, [pc, #88]	@ (8008fd4 <HAL_TIM_PWM_Start+0x1fc>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d115      	bne.n	8008fac <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	689a      	ldr	r2, [r3, #8]
 8008f86:	4b1a      	ldr	r3, [pc, #104]	@ (8008ff0 <HAL_TIM_PWM_Start+0x218>)
 8008f88:	4013      	ands	r3, r2
 8008f8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2b06      	cmp	r3, #6
 8008f90:	d015      	beq.n	8008fbe <HAL_TIM_PWM_Start+0x1e6>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f98:	d011      	beq.n	8008fbe <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f042 0201 	orr.w	r2, r2, #1
 8008fa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008faa:	e008      	b.n	8008fbe <HAL_TIM_PWM_Start+0x1e6>
>>>>>>> main
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f042 0201 	orr.w	r2, r2, #1
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	e000      	b.n	80086f8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086f6:	bf00      	nop
=======
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f042 0201 	orr.w	r2, r2, #1
 8008fba:	601a      	str	r2, [r3, #0]
 8008fbc:	e000      	b.n	8008fc0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fbe:	bf00      	nop
>>>>>>> main
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	40010000 	.word	0x40010000
 8008708:	40010400 	.word	0x40010400
 800870c:	40014000 	.word	0x40014000
 8008710:	40014400 	.word	0x40014400
 8008714:	40014800 	.word	0x40014800
 8008718:	40000400 	.word	0x40000400
 800871c:	40000800 	.word	0x40000800
 8008720:	40000c00 	.word	0x40000c00
 8008724:	40001800 	.word	0x40001800
 8008728:	00010007 	.word	0x00010007

0800872c <HAL_TIM_IRQHandler>:
=======
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	40010000 	.word	0x40010000
 8008fd0:	40010400 	.word	0x40010400
 8008fd4:	40014000 	.word	0x40014000
 8008fd8:	40014400 	.word	0x40014400
 8008fdc:	40014800 	.word	0x40014800
 8008fe0:	40000400 	.word	0x40000400
 8008fe4:	40000800 	.word	0x40000800
 8008fe8:	40000c00 	.word	0x40000c00
 8008fec:	40001800 	.word	0x40001800
 8008ff0:	00010007 	.word	0x00010007

08008ff4 <HAL_TIM_IRQHandler>:
>>>>>>> main
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	f003 0302 	and.w	r3, r3, #2
 800874a:	2b00      	cmp	r3, #0
 800874c:	d020      	beq.n	8008790 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f003 0302 	and.w	r3, r3, #2
 8008754:	2b00      	cmp	r3, #0
 8008756:	d01b      	beq.n	8008790 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f06f 0202 	mvn.w	r2, #2
 8008760:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	f003 0303 	and.w	r3, r3, #3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d003      	beq.n	800877e <HAL_TIM_IRQHandler+0x52>
=======
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	f003 0302 	and.w	r3, r3, #2
 8009012:	2b00      	cmp	r3, #0
 8009014:	d020      	beq.n	8009058 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f003 0302 	and.w	r3, r3, #2
 800901c:	2b00      	cmp	r3, #0
 800901e:	d01b      	beq.n	8009058 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f06f 0202 	mvn.w	r2, #2
 8009028:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2201      	movs	r2, #1
 800902e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	699b      	ldr	r3, [r3, #24]
 8009036:	f003 0303 	and.w	r3, r3, #3
 800903a:	2b00      	cmp	r3, #0
 800903c:	d003      	beq.n	8009046 <HAL_TIM_IRQHandler+0x52>
>>>>>>> main
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 faf6 	bl	8008d68 <HAL_TIM_IC_CaptureCallback>
 800877c:	e005      	b.n	800878a <HAL_TIM_IRQHandler+0x5e>
=======
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 faf6 	bl	8009630 <HAL_TIM_IC_CaptureCallback>
 8009044:	e005      	b.n	8009052 <HAL_TIM_IRQHandler+0x5e>
>>>>>>> main
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 fae8 	bl	8008d54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 faf9 	bl	8008d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	771a      	strb	r2, [r3, #28]
=======
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fae8 	bl	800961c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 faf9 	bl	8009644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	771a      	strb	r2, [r3, #28]
>>>>>>> main
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
<<<<<<< HEAD
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	f003 0304 	and.w	r3, r3, #4
 8008796:	2b00      	cmp	r3, #0
 8008798:	d020      	beq.n	80087dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f003 0304 	and.w	r3, r3, #4
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d01b      	beq.n	80087dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f06f 0204 	mvn.w	r2, #4
 80087ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2202      	movs	r2, #2
 80087b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d003      	beq.n	80087ca <HAL_TIM_IRQHandler+0x9e>
=======
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	f003 0304 	and.w	r3, r3, #4
 800905e:	2b00      	cmp	r3, #0
 8009060:	d020      	beq.n	80090a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f003 0304 	and.w	r3, r3, #4
 8009068:	2b00      	cmp	r3, #0
 800906a:	d01b      	beq.n	80090a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f06f 0204 	mvn.w	r2, #4
 8009074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2202      	movs	r2, #2
 800907a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009086:	2b00      	cmp	r3, #0
 8009088:	d003      	beq.n	8009092 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 fad0 	bl	8008d68 <HAL_TIM_IC_CaptureCallback>
 80087c8:	e005      	b.n	80087d6 <HAL_TIM_IRQHandler+0xaa>
=======
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fad0 	bl	8009630 <HAL_TIM_IC_CaptureCallback>
 8009090:	e005      	b.n	800909e <HAL_TIM_IRQHandler+0xaa>
>>>>>>> main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fac2 	bl	8008d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fad3 	bl	8008d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	771a      	strb	r2, [r3, #28]
=======
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fac2 	bl	800961c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fad3 	bl	8009644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	771a      	strb	r2, [r3, #28]
>>>>>>> main
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
<<<<<<< HEAD
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	f003 0308 	and.w	r3, r3, #8
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d020      	beq.n	8008828 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f003 0308 	and.w	r3, r3, #8
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d01b      	beq.n	8008828 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f06f 0208 	mvn.w	r2, #8
 80087f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2204      	movs	r2, #4
 80087fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	f003 0303 	and.w	r3, r3, #3
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <HAL_TIM_IRQHandler+0xea>
=======
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	f003 0308 	and.w	r3, r3, #8
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d020      	beq.n	80090f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f003 0308 	and.w	r3, r3, #8
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d01b      	beq.n	80090f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f06f 0208 	mvn.w	r2, #8
 80090c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2204      	movs	r2, #4
 80090c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	69db      	ldr	r3, [r3, #28]
 80090ce:	f003 0303 	and.w	r3, r3, #3
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <HAL_TIM_IRQHandler+0xea>
>>>>>>> main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 faaa 	bl	8008d68 <HAL_TIM_IC_CaptureCallback>
 8008814:	e005      	b.n	8008822 <HAL_TIM_IRQHandler+0xf6>
=======
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 faaa 	bl	8009630 <HAL_TIM_IC_CaptureCallback>
 80090dc:	e005      	b.n	80090ea <HAL_TIM_IRQHandler+0xf6>
>>>>>>> main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fa9c 	bl	8008d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 faad 	bl	8008d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	771a      	strb	r2, [r3, #28]
=======
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fa9c 	bl	800961c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 faad 	bl	8009644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	771a      	strb	r2, [r3, #28]
>>>>>>> main
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
<<<<<<< HEAD
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	f003 0310 	and.w	r3, r3, #16
 800882e:	2b00      	cmp	r3, #0
 8008830:	d020      	beq.n	8008874 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f003 0310 	and.w	r3, r3, #16
 8008838:	2b00      	cmp	r3, #0
 800883a:	d01b      	beq.n	8008874 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f06f 0210 	mvn.w	r2, #16
 8008844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2208      	movs	r2, #8
 800884a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	69db      	ldr	r3, [r3, #28]
 8008852:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008856:	2b00      	cmp	r3, #0
 8008858:	d003      	beq.n	8008862 <HAL_TIM_IRQHandler+0x136>
=======
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	f003 0310 	and.w	r3, r3, #16
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d020      	beq.n	800913c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f003 0310 	and.w	r3, r3, #16
 8009100:	2b00      	cmp	r3, #0
 8009102:	d01b      	beq.n	800913c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f06f 0210 	mvn.w	r2, #16
 800910c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2208      	movs	r2, #8
 8009112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	69db      	ldr	r3, [r3, #28]
 800911a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800911e:	2b00      	cmp	r3, #0
 8009120:	d003      	beq.n	800912a <HAL_TIM_IRQHandler+0x136>
>>>>>>> main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fa84 	bl	8008d68 <HAL_TIM_IC_CaptureCallback>
 8008860:	e005      	b.n	800886e <HAL_TIM_IRQHandler+0x142>
=======
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fa84 	bl	8009630 <HAL_TIM_IC_CaptureCallback>
 8009128:	e005      	b.n	8009136 <HAL_TIM_IRQHandler+0x142>
>>>>>>> main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fa76 	bl	8008d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 fa87 	bl	8008d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	771a      	strb	r2, [r3, #28]
=======
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fa76 	bl	800961c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 fa87 	bl	8009644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	771a      	strb	r2, [r3, #28]
>>>>>>> main
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
<<<<<<< HEAD
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	f003 0301 	and.w	r3, r3, #1
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00c      	beq.n	8008898 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	2b00      	cmp	r3, #0
 8008886:	d007      	beq.n	8008898 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f06f 0201 	mvn.w	r2, #1
 8008890:	611a      	str	r2, [r3, #16]
=======
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	f003 0301 	and.w	r3, r3, #1
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00c      	beq.n	8009160 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f003 0301 	and.w	r3, r3, #1
 800914c:	2b00      	cmp	r3, #0
 800914e:	d007      	beq.n	8009160 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f06f 0201 	mvn.w	r2, #1
 8009158:	611a      	str	r2, [r3, #16]
>>>>>>> main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7f9 fa38 	bl	8001d08 <HAL_TIM_PeriodElapsedCallback>
=======
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f7f8 fd38 	bl	8001bd0 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
<<<<<<< HEAD
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d104      	bne.n	80088ac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00c      	beq.n	80088c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d007      	beq.n	80088c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80088be:	611a      	str	r2, [r3, #16]
=======
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009166:	2b00      	cmp	r3, #0
 8009168:	d104      	bne.n	8009174 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00c      	beq.n	800918e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800917a:	2b00      	cmp	r3, #0
 800917c:	d007      	beq.n	800918e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009186:	611a      	str	r2, [r3, #16]
>>>>>>> main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 ffc5 	bl	8009850 <HAL_TIMEx_BreakCallback>
=======
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 ffc5 	bl	800a118 <HAL_TIMEx_BreakCallback>
>>>>>>> main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
<<<<<<< HEAD
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00c      	beq.n	80088ea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d007      	beq.n	80088ea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80088e2:	611a      	str	r2, [r3, #16]
=======
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00c      	beq.n	80091b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d007      	beq.n	80091b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80091aa:	611a      	str	r2, [r3, #16]
>>>>>>> main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
<<<<<<< HEAD
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 ffbd 	bl	8009864 <HAL_TIMEx_Break2Callback>
=======
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 ffbd 	bl	800a12c <HAL_TIMEx_Break2Callback>
>>>>>>> main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
<<<<<<< HEAD
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00c      	beq.n	800890e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d007      	beq.n	800890e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008906:	611a      	str	r2, [r3, #16]
=======
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00c      	beq.n	80091d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d007      	beq.n	80091d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80091ce:	611a      	str	r2, [r3, #16]
>>>>>>> main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 fa41 	bl	8008d90 <HAL_TIM_TriggerCallback>
=======
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fa41 	bl	8009658 <HAL_TIM_TriggerCallback>
>>>>>>> main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
<<<<<<< HEAD
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	f003 0320 	and.w	r3, r3, #32
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00c      	beq.n	8008932 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f003 0320 	and.w	r3, r3, #32
 800891e:	2b00      	cmp	r3, #0
 8008920:	d007      	beq.n	8008932 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f06f 0220 	mvn.w	r2, #32
 800892a:	611a      	str	r2, [r3, #16]
=======
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	f003 0320 	and.w	r3, r3, #32
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00c      	beq.n	80091fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f003 0320 	and.w	r3, r3, #32
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d007      	beq.n	80091fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f06f 0220 	mvn.w	r2, #32
 80091f2:	611a      	str	r2, [r3, #16]
>>>>>>> main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 ff85 	bl	800983c <HAL_TIMEx_CommutCallback>
=======
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 ff85 	bl	800a104 <HAL_TIMEx_CommutCallback>
>>>>>>> main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8008932:	bf00      	nop
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
	...

0800893c <HAL_TIM_PWM_ConfigChannel>:
=======
 80091fa:	bf00      	nop
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
	...

08009204 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> main
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
 800893c:	b580      	push	{r7, lr}
 800893e:	b086      	sub	sp, #24
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	75fb      	strb	r3, [r7, #23]
=======
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	75fb      	strb	r3, [r7, #23]
>>>>>>> main
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008952:	2b01      	cmp	r3, #1
 8008954:	d101      	bne.n	800895a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008956:	2302      	movs	r3, #2
 8008958:	e0ff      	b.n	8008b5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2b14      	cmp	r3, #20
 8008966:	f200 80f0 	bhi.w	8008b4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800896a:	a201      	add	r2, pc, #4	@ (adr r2, 8008970 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800896c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008970:	080089c5 	.word	0x080089c5
 8008974:	08008b4b 	.word	0x08008b4b
 8008978:	08008b4b 	.word	0x08008b4b
 800897c:	08008b4b 	.word	0x08008b4b
 8008980:	08008a05 	.word	0x08008a05
 8008984:	08008b4b 	.word	0x08008b4b
 8008988:	08008b4b 	.word	0x08008b4b
 800898c:	08008b4b 	.word	0x08008b4b
 8008990:	08008a47 	.word	0x08008a47
 8008994:	08008b4b 	.word	0x08008b4b
 8008998:	08008b4b 	.word	0x08008b4b
 800899c:	08008b4b 	.word	0x08008b4b
 80089a0:	08008a87 	.word	0x08008a87
 80089a4:	08008b4b 	.word	0x08008b4b
 80089a8:	08008b4b 	.word	0x08008b4b
 80089ac:	08008b4b 	.word	0x08008b4b
 80089b0:	08008ac9 	.word	0x08008ac9
 80089b4:	08008b4b 	.word	0x08008b4b
 80089b8:	08008b4b 	.word	0x08008b4b
 80089bc:	08008b4b 	.word	0x08008b4b
 80089c0:	08008b09 	.word	0x08008b09
=======
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800921a:	2b01      	cmp	r3, #1
 800921c:	d101      	bne.n	8009222 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800921e:	2302      	movs	r3, #2
 8009220:	e0ff      	b.n	8009422 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2b14      	cmp	r3, #20
 800922e:	f200 80f0 	bhi.w	8009412 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009232:	a201      	add	r2, pc, #4	@ (adr r2, 8009238 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009238:	0800928d 	.word	0x0800928d
 800923c:	08009413 	.word	0x08009413
 8009240:	08009413 	.word	0x08009413
 8009244:	08009413 	.word	0x08009413
 8009248:	080092cd 	.word	0x080092cd
 800924c:	08009413 	.word	0x08009413
 8009250:	08009413 	.word	0x08009413
 8009254:	08009413 	.word	0x08009413
 8009258:	0800930f 	.word	0x0800930f
 800925c:	08009413 	.word	0x08009413
 8009260:	08009413 	.word	0x08009413
 8009264:	08009413 	.word	0x08009413
 8009268:	0800934f 	.word	0x0800934f
 800926c:	08009413 	.word	0x08009413
 8009270:	08009413 	.word	0x08009413
 8009274:	08009413 	.word	0x08009413
 8009278:	08009391 	.word	0x08009391
 800927c:	08009413 	.word	0x08009413
 8009280:	08009413 	.word	0x08009413
 8009284:	08009413 	.word	0x08009413
 8009288:	080093d1 	.word	0x080093d1
>>>>>>> main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68b9      	ldr	r1, [r7, #8]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 fa90 	bl	8008ef0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	699a      	ldr	r2, [r3, #24]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f042 0208 	orr.w	r2, r2, #8
 80089de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	699a      	ldr	r2, [r3, #24]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f022 0204 	bic.w	r2, r2, #4
 80089ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6999      	ldr	r1, [r3, #24]
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	691a      	ldr	r2, [r3, #16]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	430a      	orrs	r2, r1
 8008a00:	619a      	str	r2, [r3, #24]
      break;
 8008a02:	e0a5      	b.n	8008b50 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68b9      	ldr	r1, [r7, #8]
 8009292:	4618      	mov	r0, r3
 8009294:	f000 fa90 	bl	80097b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	699a      	ldr	r2, [r3, #24]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f042 0208 	orr.w	r2, r2, #8
 80092a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	699a      	ldr	r2, [r3, #24]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f022 0204 	bic.w	r2, r2, #4
 80092b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6999      	ldr	r1, [r3, #24]
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	691a      	ldr	r2, [r3, #16]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	430a      	orrs	r2, r1
 80092c8:	619a      	str	r2, [r3, #24]
      break;
 80092ca:	e0a5      	b.n	8009418 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68b9      	ldr	r1, [r7, #8]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 fb00 	bl	8009010 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	699a      	ldr	r2, [r3, #24]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	699a      	ldr	r2, [r3, #24]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6999      	ldr	r1, [r3, #24]
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	021a      	lsls	r2, r3, #8
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	430a      	orrs	r2, r1
 8008a42:	619a      	str	r2, [r3, #24]
      break;
 8008a44:	e084      	b.n	8008b50 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68b9      	ldr	r1, [r7, #8]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 fb00 	bl	80098d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	699a      	ldr	r2, [r3, #24]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80092e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	699a      	ldr	r2, [r3, #24]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80092f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6999      	ldr	r1, [r3, #24]
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	021a      	lsls	r2, r3, #8
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	430a      	orrs	r2, r1
 800930a:	619a      	str	r2, [r3, #24]
      break;
 800930c:	e084      	b.n	8009418 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68b9      	ldr	r1, [r7, #8]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 fb69 	bl	8009124 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	69da      	ldr	r2, [r3, #28]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f042 0208 	orr.w	r2, r2, #8
 8008a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	69da      	ldr	r2, [r3, #28]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f022 0204 	bic.w	r2, r2, #4
 8008a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	69d9      	ldr	r1, [r3, #28]
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	691a      	ldr	r2, [r3, #16]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	430a      	orrs	r2, r1
 8008a82:	61da      	str	r2, [r3, #28]
      break;
 8008a84:	e064      	b.n	8008b50 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68b9      	ldr	r1, [r7, #8]
 8009314:	4618      	mov	r0, r3
 8009316:	f000 fb69 	bl	80099ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	69da      	ldr	r2, [r3, #28]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f042 0208 	orr.w	r2, r2, #8
 8009328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	69da      	ldr	r2, [r3, #28]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f022 0204 	bic.w	r2, r2, #4
 8009338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	69d9      	ldr	r1, [r3, #28]
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	691a      	ldr	r2, [r3, #16]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	430a      	orrs	r2, r1
 800934a:	61da      	str	r2, [r3, #28]
      break;
 800934c:	e064      	b.n	8009418 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	68b9      	ldr	r1, [r7, #8]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f000 fbd1 	bl	8009234 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	69da      	ldr	r2, [r3, #28]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	69da      	ldr	r2, [r3, #28]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	69d9      	ldr	r1, [r3, #28]
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	021a      	lsls	r2, r3, #8
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	61da      	str	r2, [r3, #28]
      break;
 8008ac6:	e043      	b.n	8008b50 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68b9      	ldr	r1, [r7, #8]
 8009354:	4618      	mov	r0, r3
 8009356:	f000 fbd1 	bl	8009afc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	69da      	ldr	r2, [r3, #28]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	69da      	ldr	r2, [r3, #28]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	69d9      	ldr	r1, [r3, #28]
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	021a      	lsls	r2, r3, #8
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	430a      	orrs	r2, r1
 800938c:	61da      	str	r2, [r3, #28]
      break;
 800938e:	e043      	b.n	8009418 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68b9      	ldr	r1, [r7, #8]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 fc1a 	bl	8009308 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f042 0208 	orr.w	r2, r2, #8
 8008ae2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f022 0204 	bic.w	r2, r2, #4
 8008af2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	691a      	ldr	r2, [r3, #16]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	430a      	orrs	r2, r1
 8008b04:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008b06:	e023      	b.n	8008b50 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68b9      	ldr	r1, [r7, #8]
 8009396:	4618      	mov	r0, r3
 8009398:	f000 fc1a 	bl	8009bd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f042 0208 	orr.w	r2, r2, #8
 80093aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f022 0204 	bic.w	r2, r2, #4
 80093ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	691a      	ldr	r2, [r3, #16]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	430a      	orrs	r2, r1
 80093cc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80093ce:	e023      	b.n	8009418 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68b9      	ldr	r1, [r7, #8]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 fc5e 	bl	80093d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b22:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b32:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	021a      	lsls	r2, r3, #8
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	430a      	orrs	r2, r1
 8008b46:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008b48:	e002      	b.n	8008b50 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68b9      	ldr	r1, [r7, #8]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 fc5e 	bl	8009c98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	021a      	lsls	r2, r3, #8
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	430a      	orrs	r2, r1
 800940e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009410:	e002      	b.n	8009418 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> main
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3718      	adds	r7, #24
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop

08008b64 <HAL_TIM_ConfigClockSource>:
=======
 8009412:	2301      	movs	r3, #1
 8009414:	75fb      	strb	r3, [r7, #23]
      break;
 8009416:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2200      	movs	r2, #0
 800941c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009420:	7dfb      	ldrb	r3, [r7, #23]
}
 8009422:	4618      	mov	r0, r3
 8009424:	3718      	adds	r7, #24
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop

0800942c <HAL_TIM_ConfigClockSource>:
>>>>>>> main
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	73fb      	strb	r3, [r7, #15]
=======
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009436:	2300      	movs	r3, #0
 8009438:	73fb      	strb	r3, [r7, #15]
>>>>>>> main
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d101      	bne.n	8008b80 <HAL_TIM_ConfigClockSource+0x1c>
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	e0dc      	b.n	8008d3a <HAL_TIM_ConfigClockSource+0x1d6>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2202      	movs	r2, #2
 8008b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009440:	2b01      	cmp	r3, #1
 8009442:	d101      	bne.n	8009448 <HAL_TIM_ConfigClockSource+0x1c>
 8009444:	2302      	movs	r3, #2
 8009446:	e0dc      	b.n	8009602 <HAL_TIM_ConfigClockSource+0x1d6>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2202      	movs	r2, #2
 8009454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> main

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	4b6a      	ldr	r3, [pc, #424]	@ (8008d44 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ba6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a64      	ldr	r2, [pc, #400]	@ (8008d48 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	f000 80a9 	beq.w	8008d0e <HAL_TIM_ConfigClockSource+0x1aa>
 8008bbc:	4a62      	ldr	r2, [pc, #392]	@ (8008d48 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	f200 80ae 	bhi.w	8008d20 <HAL_TIM_ConfigClockSource+0x1bc>
 8008bc4:	4a61      	ldr	r2, [pc, #388]	@ (8008d4c <HAL_TIM_ConfigClockSource+0x1e8>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	f000 80a1 	beq.w	8008d0e <HAL_TIM_ConfigClockSource+0x1aa>
 8008bcc:	4a5f      	ldr	r2, [pc, #380]	@ (8008d4c <HAL_TIM_ConfigClockSource+0x1e8>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	f200 80a6 	bhi.w	8008d20 <HAL_TIM_ConfigClockSource+0x1bc>
 8008bd4:	4a5e      	ldr	r2, [pc, #376]	@ (8008d50 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	f000 8099 	beq.w	8008d0e <HAL_TIM_ConfigClockSource+0x1aa>
 8008bdc:	4a5c      	ldr	r2, [pc, #368]	@ (8008d50 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	f200 809e 	bhi.w	8008d20 <HAL_TIM_ConfigClockSource+0x1bc>
 8008be4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008be8:	f000 8091 	beq.w	8008d0e <HAL_TIM_ConfigClockSource+0x1aa>
 8008bec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008bf0:	f200 8096 	bhi.w	8008d20 <HAL_TIM_ConfigClockSource+0x1bc>
 8008bf4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bf8:	f000 8089 	beq.w	8008d0e <HAL_TIM_ConfigClockSource+0x1aa>
 8008bfc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c00:	f200 808e 	bhi.w	8008d20 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c08:	d03e      	beq.n	8008c88 <HAL_TIM_ConfigClockSource+0x124>
 8008c0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c0e:	f200 8087 	bhi.w	8008d20 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c16:	f000 8086 	beq.w	8008d26 <HAL_TIM_ConfigClockSource+0x1c2>
 8008c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c1e:	d87f      	bhi.n	8008d20 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c20:	2b70      	cmp	r3, #112	@ 0x70
 8008c22:	d01a      	beq.n	8008c5a <HAL_TIM_ConfigClockSource+0xf6>
 8008c24:	2b70      	cmp	r3, #112	@ 0x70
 8008c26:	d87b      	bhi.n	8008d20 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c28:	2b60      	cmp	r3, #96	@ 0x60
 8008c2a:	d050      	beq.n	8008cce <HAL_TIM_ConfigClockSource+0x16a>
 8008c2c:	2b60      	cmp	r3, #96	@ 0x60
 8008c2e:	d877      	bhi.n	8008d20 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c30:	2b50      	cmp	r3, #80	@ 0x50
 8008c32:	d03c      	beq.n	8008cae <HAL_TIM_ConfigClockSource+0x14a>
 8008c34:	2b50      	cmp	r3, #80	@ 0x50
 8008c36:	d873      	bhi.n	8008d20 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c38:	2b40      	cmp	r3, #64	@ 0x40
 8008c3a:	d058      	beq.n	8008cee <HAL_TIM_ConfigClockSource+0x18a>
 8008c3c:	2b40      	cmp	r3, #64	@ 0x40
 8008c3e:	d86f      	bhi.n	8008d20 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c40:	2b30      	cmp	r3, #48	@ 0x30
 8008c42:	d064      	beq.n	8008d0e <HAL_TIM_ConfigClockSource+0x1aa>
 8008c44:	2b30      	cmp	r3, #48	@ 0x30
 8008c46:	d86b      	bhi.n	8008d20 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c48:	2b20      	cmp	r3, #32
 8008c4a:	d060      	beq.n	8008d0e <HAL_TIM_ConfigClockSource+0x1aa>
 8008c4c:	2b20      	cmp	r3, #32
 8008c4e:	d867      	bhi.n	8008d20 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d05c      	beq.n	8008d0e <HAL_TIM_ConfigClockSource+0x1aa>
 8008c54:	2b10      	cmp	r3, #16
 8008c56:	d05a      	beq.n	8008d0e <HAL_TIM_ConfigClockSource+0x1aa>
 8008c58:	e062      	b.n	8008d20 <HAL_TIM_ConfigClockSource+0x1bc>
=======
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	4b6a      	ldr	r3, [pc, #424]	@ (800960c <HAL_TIM_ConfigClockSource+0x1e0>)
 8009464:	4013      	ands	r3, r2
 8009466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800946e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a64      	ldr	r2, [pc, #400]	@ (8009610 <HAL_TIM_ConfigClockSource+0x1e4>)
 800947e:	4293      	cmp	r3, r2
 8009480:	f000 80a9 	beq.w	80095d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009484:	4a62      	ldr	r2, [pc, #392]	@ (8009610 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009486:	4293      	cmp	r3, r2
 8009488:	f200 80ae 	bhi.w	80095e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800948c:	4a61      	ldr	r2, [pc, #388]	@ (8009614 <HAL_TIM_ConfigClockSource+0x1e8>)
 800948e:	4293      	cmp	r3, r2
 8009490:	f000 80a1 	beq.w	80095d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009494:	4a5f      	ldr	r2, [pc, #380]	@ (8009614 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009496:	4293      	cmp	r3, r2
 8009498:	f200 80a6 	bhi.w	80095e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800949c:	4a5e      	ldr	r2, [pc, #376]	@ (8009618 <HAL_TIM_ConfigClockSource+0x1ec>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	f000 8099 	beq.w	80095d6 <HAL_TIM_ConfigClockSource+0x1aa>
 80094a4:	4a5c      	ldr	r2, [pc, #368]	@ (8009618 <HAL_TIM_ConfigClockSource+0x1ec>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	f200 809e 	bhi.w	80095e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80094ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80094b0:	f000 8091 	beq.w	80095d6 <HAL_TIM_ConfigClockSource+0x1aa>
 80094b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80094b8:	f200 8096 	bhi.w	80095e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80094bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094c0:	f000 8089 	beq.w	80095d6 <HAL_TIM_ConfigClockSource+0x1aa>
 80094c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094c8:	f200 808e 	bhi.w	80095e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80094cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094d0:	d03e      	beq.n	8009550 <HAL_TIM_ConfigClockSource+0x124>
 80094d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094d6:	f200 8087 	bhi.w	80095e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80094da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094de:	f000 8086 	beq.w	80095ee <HAL_TIM_ConfigClockSource+0x1c2>
 80094e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094e6:	d87f      	bhi.n	80095e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80094e8:	2b70      	cmp	r3, #112	@ 0x70
 80094ea:	d01a      	beq.n	8009522 <HAL_TIM_ConfigClockSource+0xf6>
 80094ec:	2b70      	cmp	r3, #112	@ 0x70
 80094ee:	d87b      	bhi.n	80095e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80094f0:	2b60      	cmp	r3, #96	@ 0x60
 80094f2:	d050      	beq.n	8009596 <HAL_TIM_ConfigClockSource+0x16a>
 80094f4:	2b60      	cmp	r3, #96	@ 0x60
 80094f6:	d877      	bhi.n	80095e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80094f8:	2b50      	cmp	r3, #80	@ 0x50
 80094fa:	d03c      	beq.n	8009576 <HAL_TIM_ConfigClockSource+0x14a>
 80094fc:	2b50      	cmp	r3, #80	@ 0x50
 80094fe:	d873      	bhi.n	80095e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009500:	2b40      	cmp	r3, #64	@ 0x40
 8009502:	d058      	beq.n	80095b6 <HAL_TIM_ConfigClockSource+0x18a>
 8009504:	2b40      	cmp	r3, #64	@ 0x40
 8009506:	d86f      	bhi.n	80095e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009508:	2b30      	cmp	r3, #48	@ 0x30
 800950a:	d064      	beq.n	80095d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800950c:	2b30      	cmp	r3, #48	@ 0x30
 800950e:	d86b      	bhi.n	80095e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009510:	2b20      	cmp	r3, #32
 8009512:	d060      	beq.n	80095d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009514:	2b20      	cmp	r3, #32
 8009516:	d867      	bhi.n	80095e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009518:	2b00      	cmp	r3, #0
 800951a:	d05c      	beq.n	80095d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800951c:	2b10      	cmp	r3, #16
 800951e:	d05a      	beq.n	80095d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009520:	e062      	b.n	80095e8 <HAL_TIM_ConfigClockSource+0x1bc>
>>>>>>> main
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008c6a:	f000 fc95 	bl	8009598 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008c7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68ba      	ldr	r2, [r7, #8]
 8008c84:	609a      	str	r2, [r3, #8]
      break;
 8008c86:	e04f      	b.n	8008d28 <HAL_TIM_ConfigClockSource+0x1c4>
=======
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009532:	f000 fc95 	bl	8009e60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009544:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	68ba      	ldr	r2, [r7, #8]
 800954c:	609a      	str	r2, [r3, #8]
      break;
 800954e:	e04f      	b.n	80095f0 <HAL_TIM_ConfigClockSource+0x1c4>
>>>>>>> main
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008c98:	f000 fc7e 	bl	8009598 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	689a      	ldr	r2, [r3, #8]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008caa:	609a      	str	r2, [r3, #8]
      break;
 8008cac:	e03c      	b.n	8008d28 <HAL_TIM_ConfigClockSource+0x1c4>
=======
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009560:	f000 fc7e 	bl	8009e60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	689a      	ldr	r2, [r3, #8]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009572:	609a      	str	r2, [r3, #8]
      break;
 8009574:	e03c      	b.n	80095f0 <HAL_TIM_ConfigClockSource+0x1c4>
>>>>>>> main

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cba:	461a      	mov	r2, r3
 8008cbc:	f000 fbee 	bl	800949c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2150      	movs	r1, #80	@ 0x50
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f000 fc48 	bl	800955c <TIM_ITRx_SetConfig>
      break;
 8008ccc:	e02c      	b.n	8008d28 <HAL_TIM_ConfigClockSource+0x1c4>
=======
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009582:	461a      	mov	r2, r3
 8009584:	f000 fbee 	bl	8009d64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2150      	movs	r1, #80	@ 0x50
 800958e:	4618      	mov	r0, r3
 8009590:	f000 fc48 	bl	8009e24 <TIM_ITRx_SetConfig>
      break;
 8009594:	e02c      	b.n	80095f0 <HAL_TIM_ConfigClockSource+0x1c4>
>>>>>>> main

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cda:	461a      	mov	r2, r3
 8008cdc:	f000 fc0d 	bl	80094fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2160      	movs	r1, #96	@ 0x60
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 fc38 	bl	800955c <TIM_ITRx_SetConfig>
      break;
 8008cec:	e01c      	b.n	8008d28 <HAL_TIM_ConfigClockSource+0x1c4>
=======
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80095a2:	461a      	mov	r2, r3
 80095a4:	f000 fc0d 	bl	8009dc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2160      	movs	r1, #96	@ 0x60
 80095ae:	4618      	mov	r0, r3
 80095b0:	f000 fc38 	bl	8009e24 <TIM_ITRx_SetConfig>
      break;
 80095b4:	e01c      	b.n	80095f0 <HAL_TIM_ConfigClockSource+0x1c4>
>>>>>>> main

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	f000 fbce 	bl	800949c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2140      	movs	r1, #64	@ 0x40
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 fc28 	bl	800955c <TIM_ITRx_SetConfig>
      break;
 8008d0c:	e00c      	b.n	8008d28 <HAL_TIM_ConfigClockSource+0x1c4>
=======
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095c2:	461a      	mov	r2, r3
 80095c4:	f000 fbce 	bl	8009d64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2140      	movs	r1, #64	@ 0x40
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 fc28 	bl	8009e24 <TIM_ITRx_SetConfig>
      break;
 80095d4:	e00c      	b.n	80095f0 <HAL_TIM_ConfigClockSource+0x1c4>
>>>>>>> main
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< HEAD
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4619      	mov	r1, r3
 8008d18:	4610      	mov	r0, r2
 8008d1a:	f000 fc1f 	bl	800955c <TIM_ITRx_SetConfig>
      break;
 8008d1e:	e003      	b.n	8008d28 <HAL_TIM_ConfigClockSource+0x1c4>
=======
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4619      	mov	r1, r3
 80095e0:	4610      	mov	r0, r2
 80095e2:	f000 fc1f 	bl	8009e24 <TIM_ITRx_SetConfig>
      break;
 80095e6:	e003      	b.n	80095f0 <HAL_TIM_ConfigClockSource+0x1c4>
>>>>>>> main
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8008d20:	2301      	movs	r3, #1
 8008d22:	73fb      	strb	r3, [r7, #15]
      break;
 8008d24:	e000      	b.n	8008d28 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008d26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	ffceff88 	.word	0xffceff88
 8008d48:	00100040 	.word	0x00100040
 8008d4c:	00100030 	.word	0x00100030
 8008d50:	00100020 	.word	0x00100020

08008d54 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 80095e8:	2301      	movs	r3, #1
 80095ea:	73fb      	strb	r3, [r7, #15]
      break;
 80095ec:	e000      	b.n	80095f0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80095ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009600:	7bfb      	ldrb	r3, [r7, #15]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	ffceff88 	.word	0xffceff88
 8009610:	00100040 	.word	0x00100040
 8009614:	00100030 	.word	0x00100030
 8009618:	00100020 	.word	0x00100020

0800961c <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> main
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
=======
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8008d5c:	bf00      	nop
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <HAL_TIM_IC_CaptureCallback>:
=======
 8009624:	bf00      	nop
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> main
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
=======
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> main
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
=======
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8008d84:	bf00      	nop
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <HAL_TIM_TriggerCallback>:
=======
 800964c:	bf00      	nop
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <HAL_TIM_TriggerCallback>:
>>>>>>> main
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
=======
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8008d98:	bf00      	nop
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <TIM_Base_SetConfig>:
=======
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <TIM_Base_SetConfig>:
>>>>>>> main
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a46      	ldr	r2, [pc, #280]	@ (8008ed0 <TIM_Base_SetConfig+0x12c>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d013      	beq.n	8008de4 <TIM_Base_SetConfig+0x40>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dc2:	d00f      	beq.n	8008de4 <TIM_Base_SetConfig+0x40>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a43      	ldr	r2, [pc, #268]	@ (8008ed4 <TIM_Base_SetConfig+0x130>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d00b      	beq.n	8008de4 <TIM_Base_SetConfig+0x40>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a42      	ldr	r2, [pc, #264]	@ (8008ed8 <TIM_Base_SetConfig+0x134>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d007      	beq.n	8008de4 <TIM_Base_SetConfig+0x40>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a41      	ldr	r2, [pc, #260]	@ (8008edc <TIM_Base_SetConfig+0x138>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d003      	beq.n	8008de4 <TIM_Base_SetConfig+0x40>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a40      	ldr	r2, [pc, #256]	@ (8008ee0 <TIM_Base_SetConfig+0x13c>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d108      	bne.n	8008df6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	4313      	orrs	r3, r2
 8008df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a35      	ldr	r2, [pc, #212]	@ (8008ed0 <TIM_Base_SetConfig+0x12c>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d01f      	beq.n	8008e3e <TIM_Base_SetConfig+0x9a>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e04:	d01b      	beq.n	8008e3e <TIM_Base_SetConfig+0x9a>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a32      	ldr	r2, [pc, #200]	@ (8008ed4 <TIM_Base_SetConfig+0x130>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d017      	beq.n	8008e3e <TIM_Base_SetConfig+0x9a>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a31      	ldr	r2, [pc, #196]	@ (8008ed8 <TIM_Base_SetConfig+0x134>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d013      	beq.n	8008e3e <TIM_Base_SetConfig+0x9a>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a30      	ldr	r2, [pc, #192]	@ (8008edc <TIM_Base_SetConfig+0x138>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d00f      	beq.n	8008e3e <TIM_Base_SetConfig+0x9a>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a2f      	ldr	r2, [pc, #188]	@ (8008ee0 <TIM_Base_SetConfig+0x13c>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d00b      	beq.n	8008e3e <TIM_Base_SetConfig+0x9a>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a2e      	ldr	r2, [pc, #184]	@ (8008ee4 <TIM_Base_SetConfig+0x140>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d007      	beq.n	8008e3e <TIM_Base_SetConfig+0x9a>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a2d      	ldr	r2, [pc, #180]	@ (8008ee8 <TIM_Base_SetConfig+0x144>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d003      	beq.n	8008e3e <TIM_Base_SetConfig+0x9a>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a2c      	ldr	r2, [pc, #176]	@ (8008eec <TIM_Base_SetConfig+0x148>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d108      	bne.n	8008e50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	60fb      	str	r3, [r7, #12]
=======
 800966c:	b480      	push	{r7}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a46      	ldr	r2, [pc, #280]	@ (8009798 <TIM_Base_SetConfig+0x12c>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d013      	beq.n	80096ac <TIM_Base_SetConfig+0x40>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800968a:	d00f      	beq.n	80096ac <TIM_Base_SetConfig+0x40>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a43      	ldr	r2, [pc, #268]	@ (800979c <TIM_Base_SetConfig+0x130>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d00b      	beq.n	80096ac <TIM_Base_SetConfig+0x40>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a42      	ldr	r2, [pc, #264]	@ (80097a0 <TIM_Base_SetConfig+0x134>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d007      	beq.n	80096ac <TIM_Base_SetConfig+0x40>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4a41      	ldr	r2, [pc, #260]	@ (80097a4 <TIM_Base_SetConfig+0x138>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d003      	beq.n	80096ac <TIM_Base_SetConfig+0x40>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a40      	ldr	r2, [pc, #256]	@ (80097a8 <TIM_Base_SetConfig+0x13c>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d108      	bne.n	80096be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a35      	ldr	r2, [pc, #212]	@ (8009798 <TIM_Base_SetConfig+0x12c>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d01f      	beq.n	8009706 <TIM_Base_SetConfig+0x9a>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096cc:	d01b      	beq.n	8009706 <TIM_Base_SetConfig+0x9a>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a32      	ldr	r2, [pc, #200]	@ (800979c <TIM_Base_SetConfig+0x130>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d017      	beq.n	8009706 <TIM_Base_SetConfig+0x9a>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a31      	ldr	r2, [pc, #196]	@ (80097a0 <TIM_Base_SetConfig+0x134>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d013      	beq.n	8009706 <TIM_Base_SetConfig+0x9a>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a30      	ldr	r2, [pc, #192]	@ (80097a4 <TIM_Base_SetConfig+0x138>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d00f      	beq.n	8009706 <TIM_Base_SetConfig+0x9a>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a2f      	ldr	r2, [pc, #188]	@ (80097a8 <TIM_Base_SetConfig+0x13c>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d00b      	beq.n	8009706 <TIM_Base_SetConfig+0x9a>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a2e      	ldr	r2, [pc, #184]	@ (80097ac <TIM_Base_SetConfig+0x140>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d007      	beq.n	8009706 <TIM_Base_SetConfig+0x9a>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a2d      	ldr	r2, [pc, #180]	@ (80097b0 <TIM_Base_SetConfig+0x144>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d003      	beq.n	8009706 <TIM_Base_SetConfig+0x9a>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a2c      	ldr	r2, [pc, #176]	@ (80097b4 <TIM_Base_SetConfig+0x148>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d108      	bne.n	8009718 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800970c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	4313      	orrs	r3, r2
 8009716:	60fb      	str	r3, [r7, #12]
>>>>>>> main
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	695b      	ldr	r3, [r3, #20]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	689a      	ldr	r2, [r3, #8]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a16      	ldr	r2, [pc, #88]	@ (8008ed0 <TIM_Base_SetConfig+0x12c>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d00f      	beq.n	8008e9c <TIM_Base_SetConfig+0xf8>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a18      	ldr	r2, [pc, #96]	@ (8008ee0 <TIM_Base_SetConfig+0x13c>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d00b      	beq.n	8008e9c <TIM_Base_SetConfig+0xf8>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a17      	ldr	r2, [pc, #92]	@ (8008ee4 <TIM_Base_SetConfig+0x140>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d007      	beq.n	8008e9c <TIM_Base_SetConfig+0xf8>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a16      	ldr	r2, [pc, #88]	@ (8008ee8 <TIM_Base_SetConfig+0x144>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d003      	beq.n	8008e9c <TIM_Base_SetConfig+0xf8>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a15      	ldr	r2, [pc, #84]	@ (8008eec <TIM_Base_SetConfig+0x148>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d103      	bne.n	8008ea4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	691a      	ldr	r2, [r3, #16]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	695b      	ldr	r3, [r3, #20]
 8009722:	4313      	orrs	r3, r2
 8009724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	689a      	ldr	r2, [r3, #8]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a16      	ldr	r2, [pc, #88]	@ (8009798 <TIM_Base_SetConfig+0x12c>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d00f      	beq.n	8009764 <TIM_Base_SetConfig+0xf8>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a18      	ldr	r2, [pc, #96]	@ (80097a8 <TIM_Base_SetConfig+0x13c>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d00b      	beq.n	8009764 <TIM_Base_SetConfig+0xf8>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a17      	ldr	r2, [pc, #92]	@ (80097ac <TIM_Base_SetConfig+0x140>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d007      	beq.n	8009764 <TIM_Base_SetConfig+0xf8>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	4a16      	ldr	r2, [pc, #88]	@ (80097b0 <TIM_Base_SetConfig+0x144>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d003      	beq.n	8009764 <TIM_Base_SetConfig+0xf8>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4a15      	ldr	r2, [pc, #84]	@ (80097b4 <TIM_Base_SetConfig+0x148>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d103      	bne.n	800976c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	691a      	ldr	r2, [r3, #16]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> main
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	f003 0301 	and.w	r3, r3, #1
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d105      	bne.n	8008ec2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	691b      	ldr	r3, [r3, #16]
 8008eba:	f023 0201 	bic.w	r2, r3, #1
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	611a      	str	r2, [r3, #16]
  }
}
 8008ec2:	bf00      	nop
 8008ec4:	3714      	adds	r7, #20
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	40010000 	.word	0x40010000
 8008ed4:	40000400 	.word	0x40000400
 8008ed8:	40000800 	.word	0x40000800
 8008edc:	40000c00 	.word	0x40000c00
 8008ee0:	40010400 	.word	0x40010400
 8008ee4:	40014000 	.word	0x40014000
 8008ee8:	40014400 	.word	0x40014400
 8008eec:	40014800 	.word	0x40014800

08008ef0 <TIM_OC1_SetConfig>:
=======
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2201      	movs	r2, #1
 8009770:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	f003 0301 	and.w	r3, r3, #1
 800977a:	2b01      	cmp	r3, #1
 800977c:	d105      	bne.n	800978a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	f023 0201 	bic.w	r2, r3, #1
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	611a      	str	r2, [r3, #16]
  }
}
 800978a:	bf00      	nop
 800978c:	3714      	adds	r7, #20
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	40010000 	.word	0x40010000
 800979c:	40000400 	.word	0x40000400
 80097a0:	40000800 	.word	0x40000800
 80097a4:	40000c00 	.word	0x40000c00
 80097a8:	40010400 	.word	0x40010400
 80097ac:	40014000 	.word	0x40014000
 80097b0:	40014400 	.word	0x40014400
 80097b4:	40014800 	.word	0x40014800

080097b8 <TIM_OC1_SetConfig>:
>>>>>>> main
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8008ef0:	b480      	push	{r7}
 8008ef2:	b087      	sub	sp, #28
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
=======
 80097b8:	b480      	push	{r7}
 80097ba:	b087      	sub	sp, #28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
>>>>>>> main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a1b      	ldr	r3, [r3, #32]
 8008efe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a1b      	ldr	r3, [r3, #32]
 8008f04:	f023 0201 	bic.w	r2, r3, #1
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	699b      	ldr	r3, [r3, #24]
 8008f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	4b37      	ldr	r3, [pc, #220]	@ (8008ff8 <TIM_OC1_SetConfig+0x108>)
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f023 0303 	bic.w	r3, r3, #3
 8008f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f023 0302 	bic.w	r3, r3, #2
 8008f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a2d      	ldr	r2, [pc, #180]	@ (8008ffc <TIM_OC1_SetConfig+0x10c>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d00f      	beq.n	8008f6c <TIM_OC1_SetConfig+0x7c>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a2c      	ldr	r2, [pc, #176]	@ (8009000 <TIM_OC1_SetConfig+0x110>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d00b      	beq.n	8008f6c <TIM_OC1_SetConfig+0x7c>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a2b      	ldr	r2, [pc, #172]	@ (8009004 <TIM_OC1_SetConfig+0x114>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d007      	beq.n	8008f6c <TIM_OC1_SetConfig+0x7c>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8009008 <TIM_OC1_SetConfig+0x118>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d003      	beq.n	8008f6c <TIM_OC1_SetConfig+0x7c>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a29      	ldr	r2, [pc, #164]	@ (800900c <TIM_OC1_SetConfig+0x11c>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d10c      	bne.n	8008f86 <TIM_OC1_SetConfig+0x96>
=======
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a1b      	ldr	r3, [r3, #32]
 80097c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6a1b      	ldr	r3, [r3, #32]
 80097cc:	f023 0201 	bic.w	r2, r3, #1
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	699b      	ldr	r3, [r3, #24]
 80097de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	4b37      	ldr	r3, [pc, #220]	@ (80098c0 <TIM_OC1_SetConfig+0x108>)
 80097e4:	4013      	ands	r3, r2
 80097e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f023 0303 	bic.w	r3, r3, #3
 80097ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	f023 0302 	bic.w	r3, r3, #2
 8009800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	697a      	ldr	r2, [r7, #20]
 8009808:	4313      	orrs	r3, r2
 800980a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a2d      	ldr	r2, [pc, #180]	@ (80098c4 <TIM_OC1_SetConfig+0x10c>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d00f      	beq.n	8009834 <TIM_OC1_SetConfig+0x7c>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a2c      	ldr	r2, [pc, #176]	@ (80098c8 <TIM_OC1_SetConfig+0x110>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d00b      	beq.n	8009834 <TIM_OC1_SetConfig+0x7c>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a2b      	ldr	r2, [pc, #172]	@ (80098cc <TIM_OC1_SetConfig+0x114>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d007      	beq.n	8009834 <TIM_OC1_SetConfig+0x7c>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a2a      	ldr	r2, [pc, #168]	@ (80098d0 <TIM_OC1_SetConfig+0x118>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d003      	beq.n	8009834 <TIM_OC1_SetConfig+0x7c>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	4a29      	ldr	r2, [pc, #164]	@ (80098d4 <TIM_OC1_SetConfig+0x11c>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d10c      	bne.n	800984e <TIM_OC1_SetConfig+0x96>
>>>>>>> main
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	f023 0308 	bic.w	r3, r3, #8
 8008f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	f023 0304 	bic.w	r3, r3, #4
 8008f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4a1c      	ldr	r2, [pc, #112]	@ (8008ffc <TIM_OC1_SetConfig+0x10c>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d00f      	beq.n	8008fae <TIM_OC1_SetConfig+0xbe>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a1b      	ldr	r2, [pc, #108]	@ (8009000 <TIM_OC1_SetConfig+0x110>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d00b      	beq.n	8008fae <TIM_OC1_SetConfig+0xbe>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a1a      	ldr	r2, [pc, #104]	@ (8009004 <TIM_OC1_SetConfig+0x114>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d007      	beq.n	8008fae <TIM_OC1_SetConfig+0xbe>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4a19      	ldr	r2, [pc, #100]	@ (8009008 <TIM_OC1_SetConfig+0x118>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d003      	beq.n	8008fae <TIM_OC1_SetConfig+0xbe>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a18      	ldr	r2, [pc, #96]	@ (800900c <TIM_OC1_SetConfig+0x11c>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d111      	bne.n	8008fd2 <TIM_OC1_SetConfig+0xe2>
=======
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	f023 0308 	bic.w	r3, r3, #8
 800983a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	697a      	ldr	r2, [r7, #20]
 8009842:	4313      	orrs	r3, r2
 8009844:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	f023 0304 	bic.w	r3, r3, #4
 800984c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a1c      	ldr	r2, [pc, #112]	@ (80098c4 <TIM_OC1_SetConfig+0x10c>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d00f      	beq.n	8009876 <TIM_OC1_SetConfig+0xbe>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a1b      	ldr	r2, [pc, #108]	@ (80098c8 <TIM_OC1_SetConfig+0x110>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d00b      	beq.n	8009876 <TIM_OC1_SetConfig+0xbe>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4a1a      	ldr	r2, [pc, #104]	@ (80098cc <TIM_OC1_SetConfig+0x114>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d007      	beq.n	8009876 <TIM_OC1_SetConfig+0xbe>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a19      	ldr	r2, [pc, #100]	@ (80098d0 <TIM_OC1_SetConfig+0x118>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d003      	beq.n	8009876 <TIM_OC1_SetConfig+0xbe>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a18      	ldr	r2, [pc, #96]	@ (80098d4 <TIM_OC1_SetConfig+0x11c>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d111      	bne.n	800989a <TIM_OC1_SetConfig+0xe2>
>>>>>>> main
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	695b      	ldr	r3, [r3, #20]
 8008fc2:	693a      	ldr	r2, [r7, #16]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	693a      	ldr	r2, [r7, #16]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	613b      	str	r3, [r7, #16]
=======
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800987c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009884:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	695b      	ldr	r3, [r3, #20]
 800988a:	693a      	ldr	r2, [r7, #16]
 800988c:	4313      	orrs	r3, r2
 800988e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	699b      	ldr	r3, [r3, #24]
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	4313      	orrs	r3, r2
 8009898:	613b      	str	r3, [r7, #16]
>>>>>>> main
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	685a      	ldr	r2, [r3, #4]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	621a      	str	r2, [r3, #32]
}
 8008fec:	bf00      	nop
 8008fee:	371c      	adds	r7, #28
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr
 8008ff8:	fffeff8f 	.word	0xfffeff8f
 8008ffc:	40010000 	.word	0x40010000
 8009000:	40010400 	.word	0x40010400
 8009004:	40014000 	.word	0x40014000
 8009008:	40014400 	.word	0x40014400
 800900c:	40014800 	.word	0x40014800

08009010 <TIM_OC2_SetConfig>:
=======
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	68fa      	ldr	r2, [r7, #12]
 80098a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	685a      	ldr	r2, [r3, #4]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	697a      	ldr	r2, [r7, #20]
 80098b2:	621a      	str	r2, [r3, #32]
}
 80098b4:	bf00      	nop
 80098b6:	371c      	adds	r7, #28
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr
 80098c0:	fffeff8f 	.word	0xfffeff8f
 80098c4:	40010000 	.word	0x40010000
 80098c8:	40010400 	.word	0x40010400
 80098cc:	40014000 	.word	0x40014000
 80098d0:	40014400 	.word	0x40014400
 80098d4:	40014800 	.word	0x40014800

080098d8 <TIM_OC2_SetConfig>:
>>>>>>> main
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8009010:	b480      	push	{r7}
 8009012:	b087      	sub	sp, #28
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
=======
 80098d8:	b480      	push	{r7}
 80098da:	b087      	sub	sp, #28
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
>>>>>>> main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6a1b      	ldr	r3, [r3, #32]
 8009024:	f023 0210 	bic.w	r2, r3, #16
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	699b      	ldr	r3, [r3, #24]
 8009036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	4b34      	ldr	r3, [pc, #208]	@ (800910c <TIM_OC2_SetConfig+0xfc>)
 800903c:	4013      	ands	r3, r2
 800903e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	021b      	lsls	r3, r3, #8
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	4313      	orrs	r3, r2
 8009052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	f023 0320 	bic.w	r3, r3, #32
 800905a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	011b      	lsls	r3, r3, #4
 8009062:	697a      	ldr	r2, [r7, #20]
 8009064:	4313      	orrs	r3, r2
 8009066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a29      	ldr	r2, [pc, #164]	@ (8009110 <TIM_OC2_SetConfig+0x100>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d003      	beq.n	8009078 <TIM_OC2_SetConfig+0x68>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a28      	ldr	r2, [pc, #160]	@ (8009114 <TIM_OC2_SetConfig+0x104>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d10d      	bne.n	8009094 <TIM_OC2_SetConfig+0x84>
=======
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a1b      	ldr	r3, [r3, #32]
 80098e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6a1b      	ldr	r3, [r3, #32]
 80098ec:	f023 0210 	bic.w	r2, r3, #16
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	699b      	ldr	r3, [r3, #24]
 80098fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009900:	68fa      	ldr	r2, [r7, #12]
 8009902:	4b34      	ldr	r3, [pc, #208]	@ (80099d4 <TIM_OC2_SetConfig+0xfc>)
 8009904:	4013      	ands	r3, r2
 8009906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800990e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	021b      	lsls	r3, r3, #8
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	4313      	orrs	r3, r2
 800991a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	f023 0320 	bic.w	r3, r3, #32
 8009922:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	011b      	lsls	r3, r3, #4
 800992a:	697a      	ldr	r2, [r7, #20]
 800992c:	4313      	orrs	r3, r2
 800992e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a29      	ldr	r2, [pc, #164]	@ (80099d8 <TIM_OC2_SetConfig+0x100>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d003      	beq.n	8009940 <TIM_OC2_SetConfig+0x68>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a28      	ldr	r2, [pc, #160]	@ (80099dc <TIM_OC2_SetConfig+0x104>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d10d      	bne.n	800995c <TIM_OC2_SetConfig+0x84>
>>>>>>> main
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800907e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	011b      	lsls	r3, r3, #4
 8009086:	697a      	ldr	r2, [r7, #20]
 8009088:	4313      	orrs	r3, r2
 800908a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009092:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a1e      	ldr	r2, [pc, #120]	@ (8009110 <TIM_OC2_SetConfig+0x100>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d00f      	beq.n	80090bc <TIM_OC2_SetConfig+0xac>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a1d      	ldr	r2, [pc, #116]	@ (8009114 <TIM_OC2_SetConfig+0x104>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d00b      	beq.n	80090bc <TIM_OC2_SetConfig+0xac>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a1c      	ldr	r2, [pc, #112]	@ (8009118 <TIM_OC2_SetConfig+0x108>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d007      	beq.n	80090bc <TIM_OC2_SetConfig+0xac>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a1b      	ldr	r2, [pc, #108]	@ (800911c <TIM_OC2_SetConfig+0x10c>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d003      	beq.n	80090bc <TIM_OC2_SetConfig+0xac>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a1a      	ldr	r2, [pc, #104]	@ (8009120 <TIM_OC2_SetConfig+0x110>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d113      	bne.n	80090e4 <TIM_OC2_SetConfig+0xd4>
=======
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	011b      	lsls	r3, r3, #4
 800994e:	697a      	ldr	r2, [r7, #20]
 8009950:	4313      	orrs	r3, r2
 8009952:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800995a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4a1e      	ldr	r2, [pc, #120]	@ (80099d8 <TIM_OC2_SetConfig+0x100>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d00f      	beq.n	8009984 <TIM_OC2_SetConfig+0xac>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a1d      	ldr	r2, [pc, #116]	@ (80099dc <TIM_OC2_SetConfig+0x104>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d00b      	beq.n	8009984 <TIM_OC2_SetConfig+0xac>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a1c      	ldr	r2, [pc, #112]	@ (80099e0 <TIM_OC2_SetConfig+0x108>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d007      	beq.n	8009984 <TIM_OC2_SetConfig+0xac>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a1b      	ldr	r2, [pc, #108]	@ (80099e4 <TIM_OC2_SetConfig+0x10c>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d003      	beq.n	8009984 <TIM_OC2_SetConfig+0xac>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4a1a      	ldr	r2, [pc, #104]	@ (80099e8 <TIM_OC2_SetConfig+0x110>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d113      	bne.n	80099ac <TIM_OC2_SetConfig+0xd4>
>>>>>>> main
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80090c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80090ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	695b      	ldr	r3, [r3, #20]
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	693a      	ldr	r2, [r7, #16]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	613b      	str	r3, [r7, #16]
=======
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800998a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009992:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	695b      	ldr	r3, [r3, #20]
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	693a      	ldr	r2, [r7, #16]
 800999c:	4313      	orrs	r3, r2
 800999e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	699b      	ldr	r3, [r3, #24]
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	693a      	ldr	r2, [r7, #16]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	613b      	str	r3, [r7, #16]
>>>>>>> main
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	693a      	ldr	r2, [r7, #16]
 80090e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	685a      	ldr	r2, [r3, #4]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	697a      	ldr	r2, [r7, #20]
 80090fc:	621a      	str	r2, [r3, #32]
}
 80090fe:	bf00      	nop
 8009100:	371c      	adds	r7, #28
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	feff8fff 	.word	0xfeff8fff
 8009110:	40010000 	.word	0x40010000
 8009114:	40010400 	.word	0x40010400
 8009118:	40014000 	.word	0x40014000
 800911c:	40014400 	.word	0x40014400
 8009120:	40014800 	.word	0x40014800

08009124 <TIM_OC3_SetConfig>:
=======
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	693a      	ldr	r2, [r7, #16]
 80099b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	685a      	ldr	r2, [r3, #4]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	697a      	ldr	r2, [r7, #20]
 80099c4:	621a      	str	r2, [r3, #32]
}
 80099c6:	bf00      	nop
 80099c8:	371c      	adds	r7, #28
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	feff8fff 	.word	0xfeff8fff
 80099d8:	40010000 	.word	0x40010000
 80099dc:	40010400 	.word	0x40010400
 80099e0:	40014000 	.word	0x40014000
 80099e4:	40014400 	.word	0x40014400
 80099e8:	40014800 	.word	0x40014800

080099ec <TIM_OC3_SetConfig>:
>>>>>>> main
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8009124:	b480      	push	{r7}
 8009126:	b087      	sub	sp, #28
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
=======
 80099ec:	b480      	push	{r7}
 80099ee:	b087      	sub	sp, #28
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
>>>>>>> main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a1b      	ldr	r3, [r3, #32]
 8009132:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6a1b      	ldr	r3, [r3, #32]
 8009138:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	69db      	ldr	r3, [r3, #28]
 800914a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	4b33      	ldr	r3, [pc, #204]	@ (800921c <TIM_OC3_SetConfig+0xf8>)
 8009150:	4013      	ands	r3, r2
 8009152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f023 0303 	bic.w	r3, r3, #3
 800915a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	4313      	orrs	r3, r2
 8009164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800916c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	021b      	lsls	r3, r3, #8
 8009174:	697a      	ldr	r2, [r7, #20]
 8009176:	4313      	orrs	r3, r2
 8009178:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a28      	ldr	r2, [pc, #160]	@ (8009220 <TIM_OC3_SetConfig+0xfc>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d003      	beq.n	800918a <TIM_OC3_SetConfig+0x66>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a27      	ldr	r2, [pc, #156]	@ (8009224 <TIM_OC3_SetConfig+0x100>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d10d      	bne.n	80091a6 <TIM_OC3_SetConfig+0x82>
=======
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a1b      	ldr	r3, [r3, #32]
 80099fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6a1b      	ldr	r3, [r3, #32]
 8009a00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	69db      	ldr	r3, [r3, #28]
 8009a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a14:	68fa      	ldr	r2, [r7, #12]
 8009a16:	4b33      	ldr	r3, [pc, #204]	@ (8009ae4 <TIM_OC3_SetConfig+0xf8>)
 8009a18:	4013      	ands	r3, r2
 8009a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f023 0303 	bic.w	r3, r3, #3
 8009a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	021b      	lsls	r3, r3, #8
 8009a3c:	697a      	ldr	r2, [r7, #20]
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4a28      	ldr	r2, [pc, #160]	@ (8009ae8 <TIM_OC3_SetConfig+0xfc>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d003      	beq.n	8009a52 <TIM_OC3_SetConfig+0x66>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a27      	ldr	r2, [pc, #156]	@ (8009aec <TIM_OC3_SetConfig+0x100>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d10d      	bne.n	8009a6e <TIM_OC3_SetConfig+0x82>
>>>>>>> main
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009190:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	021b      	lsls	r3, r3, #8
 8009198:	697a      	ldr	r2, [r7, #20]
 800919a:	4313      	orrs	r3, r2
 800919c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80091a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a1d      	ldr	r2, [pc, #116]	@ (8009220 <TIM_OC3_SetConfig+0xfc>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d00f      	beq.n	80091ce <TIM_OC3_SetConfig+0xaa>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a1c      	ldr	r2, [pc, #112]	@ (8009224 <TIM_OC3_SetConfig+0x100>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d00b      	beq.n	80091ce <TIM_OC3_SetConfig+0xaa>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a1b      	ldr	r2, [pc, #108]	@ (8009228 <TIM_OC3_SetConfig+0x104>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d007      	beq.n	80091ce <TIM_OC3_SetConfig+0xaa>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a1a      	ldr	r2, [pc, #104]	@ (800922c <TIM_OC3_SetConfig+0x108>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d003      	beq.n	80091ce <TIM_OC3_SetConfig+0xaa>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a19      	ldr	r2, [pc, #100]	@ (8009230 <TIM_OC3_SetConfig+0x10c>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d113      	bne.n	80091f6 <TIM_OC3_SetConfig+0xd2>
=======
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009a58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	021b      	lsls	r3, r3, #8
 8009a60:	697a      	ldr	r2, [r7, #20]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	4a1d      	ldr	r2, [pc, #116]	@ (8009ae8 <TIM_OC3_SetConfig+0xfc>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d00f      	beq.n	8009a96 <TIM_OC3_SetConfig+0xaa>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4a1c      	ldr	r2, [pc, #112]	@ (8009aec <TIM_OC3_SetConfig+0x100>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d00b      	beq.n	8009a96 <TIM_OC3_SetConfig+0xaa>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4a1b      	ldr	r2, [pc, #108]	@ (8009af0 <TIM_OC3_SetConfig+0x104>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d007      	beq.n	8009a96 <TIM_OC3_SetConfig+0xaa>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	4a1a      	ldr	r2, [pc, #104]	@ (8009af4 <TIM_OC3_SetConfig+0x108>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d003      	beq.n	8009a96 <TIM_OC3_SetConfig+0xaa>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	4a19      	ldr	r2, [pc, #100]	@ (8009af8 <TIM_OC3_SetConfig+0x10c>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d113      	bne.n	8009abe <TIM_OC3_SetConfig+0xd2>
>>>>>>> main
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80091d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80091dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	011b      	lsls	r3, r3, #4
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	699b      	ldr	r3, [r3, #24]
 80091ee:	011b      	lsls	r3, r3, #4
 80091f0:	693a      	ldr	r2, [r7, #16]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	613b      	str	r3, [r7, #16]
=======
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	695b      	ldr	r3, [r3, #20]
 8009aaa:	011b      	lsls	r3, r3, #4
 8009aac:	693a      	ldr	r2, [r7, #16]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	699b      	ldr	r3, [r3, #24]
 8009ab6:	011b      	lsls	r3, r3, #4
 8009ab8:	693a      	ldr	r2, [r7, #16]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	613b      	str	r3, [r7, #16]
>>>>>>> main
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	693a      	ldr	r2, [r7, #16]
 80091fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	685a      	ldr	r2, [r3, #4]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	697a      	ldr	r2, [r7, #20]
 800920e:	621a      	str	r2, [r3, #32]
}
 8009210:	bf00      	nop
 8009212:	371c      	adds	r7, #28
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr
 800921c:	fffeff8f 	.word	0xfffeff8f
 8009220:	40010000 	.word	0x40010000
 8009224:	40010400 	.word	0x40010400
 8009228:	40014000 	.word	0x40014000
 800922c:	40014400 	.word	0x40014400
 8009230:	40014800 	.word	0x40014800

08009234 <TIM_OC4_SetConfig>:
=======
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	693a      	ldr	r2, [r7, #16]
 8009ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	685a      	ldr	r2, [r3, #4]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	621a      	str	r2, [r3, #32]
}
 8009ad8:	bf00      	nop
 8009ada:	371c      	adds	r7, #28
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr
 8009ae4:	fffeff8f 	.word	0xfffeff8f
 8009ae8:	40010000 	.word	0x40010000
 8009aec:	40010400 	.word	0x40010400
 8009af0:	40014000 	.word	0x40014000
 8009af4:	40014400 	.word	0x40014400
 8009af8:	40014800 	.word	0x40014800

08009afc <TIM_OC4_SetConfig>:
>>>>>>> main
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8009234:	b480      	push	{r7}
 8009236:	b087      	sub	sp, #28
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
=======
 8009afc:	b480      	push	{r7}
 8009afe:	b087      	sub	sp, #28
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
>>>>>>> main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a1b      	ldr	r3, [r3, #32]
 8009242:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6a1b      	ldr	r3, [r3, #32]
 8009248:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	69db      	ldr	r3, [r3, #28]
 800925a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	4b24      	ldr	r3, [pc, #144]	@ (80092f0 <TIM_OC4_SetConfig+0xbc>)
 8009260:	4013      	ands	r3, r2
 8009262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800926a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	021b      	lsls	r3, r3, #8
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	4313      	orrs	r3, r2
 8009276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800927e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	031b      	lsls	r3, r3, #12
 8009286:	693a      	ldr	r2, [r7, #16]
 8009288:	4313      	orrs	r3, r2
 800928a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a19      	ldr	r2, [pc, #100]	@ (80092f4 <TIM_OC4_SetConfig+0xc0>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d00f      	beq.n	80092b4 <TIM_OC4_SetConfig+0x80>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a18      	ldr	r2, [pc, #96]	@ (80092f8 <TIM_OC4_SetConfig+0xc4>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d00b      	beq.n	80092b4 <TIM_OC4_SetConfig+0x80>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a17      	ldr	r2, [pc, #92]	@ (80092fc <TIM_OC4_SetConfig+0xc8>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d007      	beq.n	80092b4 <TIM_OC4_SetConfig+0x80>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a16      	ldr	r2, [pc, #88]	@ (8009300 <TIM_OC4_SetConfig+0xcc>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d003      	beq.n	80092b4 <TIM_OC4_SetConfig+0x80>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a15      	ldr	r2, [pc, #84]	@ (8009304 <TIM_OC4_SetConfig+0xd0>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d109      	bne.n	80092c8 <TIM_OC4_SetConfig+0x94>
=======
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a1b      	ldr	r3, [r3, #32]
 8009b0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6a1b      	ldr	r3, [r3, #32]
 8009b10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	69db      	ldr	r3, [r3, #28]
 8009b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	4b24      	ldr	r3, [pc, #144]	@ (8009bb8 <TIM_OC4_SetConfig+0xbc>)
 8009b28:	4013      	ands	r3, r2
 8009b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	021b      	lsls	r3, r3, #8
 8009b3a:	68fa      	ldr	r2, [r7, #12]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009b46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	031b      	lsls	r3, r3, #12
 8009b4e:	693a      	ldr	r2, [r7, #16]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4a19      	ldr	r2, [pc, #100]	@ (8009bbc <TIM_OC4_SetConfig+0xc0>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d00f      	beq.n	8009b7c <TIM_OC4_SetConfig+0x80>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4a18      	ldr	r2, [pc, #96]	@ (8009bc0 <TIM_OC4_SetConfig+0xc4>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d00b      	beq.n	8009b7c <TIM_OC4_SetConfig+0x80>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a17      	ldr	r2, [pc, #92]	@ (8009bc4 <TIM_OC4_SetConfig+0xc8>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d007      	beq.n	8009b7c <TIM_OC4_SetConfig+0x80>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4a16      	ldr	r2, [pc, #88]	@ (8009bc8 <TIM_OC4_SetConfig+0xcc>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d003      	beq.n	8009b7c <TIM_OC4_SetConfig+0x80>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4a15      	ldr	r2, [pc, #84]	@ (8009bcc <TIM_OC4_SetConfig+0xd0>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d109      	bne.n	8009b90 <TIM_OC4_SetConfig+0x94>
>>>>>>> main
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	695b      	ldr	r3, [r3, #20]
 80092c0:	019b      	lsls	r3, r3, #6
 80092c2:	697a      	ldr	r2, [r7, #20]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	617b      	str	r3, [r7, #20]
=======
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	695b      	ldr	r3, [r3, #20]
 8009b88:	019b      	lsls	r3, r3, #6
 8009b8a:	697a      	ldr	r2, [r7, #20]
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	617b      	str	r3, [r7, #20]
>>>>>>> main
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	697a      	ldr	r2, [r7, #20]
 80092cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	685a      	ldr	r2, [r3, #4]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	693a      	ldr	r2, [r7, #16]
 80092e0:	621a      	str	r2, [r3, #32]
}
 80092e2:	bf00      	nop
 80092e4:	371c      	adds	r7, #28
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	feff8fff 	.word	0xfeff8fff
 80092f4:	40010000 	.word	0x40010000
 80092f8:	40010400 	.word	0x40010400
 80092fc:	40014000 	.word	0x40014000
 8009300:	40014400 	.word	0x40014400
 8009304:	40014800 	.word	0x40014800

08009308 <TIM_OC5_SetConfig>:
=======
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	685a      	ldr	r2, [r3, #4]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	693a      	ldr	r2, [r7, #16]
 8009ba8:	621a      	str	r2, [r3, #32]
}
 8009baa:	bf00      	nop
 8009bac:	371c      	adds	r7, #28
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr
 8009bb6:	bf00      	nop
 8009bb8:	feff8fff 	.word	0xfeff8fff
 8009bbc:	40010000 	.word	0x40010000
 8009bc0:	40010400 	.word	0x40010400
 8009bc4:	40014000 	.word	0x40014000
 8009bc8:	40014400 	.word	0x40014400
 8009bcc:	40014800 	.word	0x40014800

08009bd0 <TIM_OC5_SetConfig>:
>>>>>>> main
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8009308:	b480      	push	{r7}
 800930a:	b087      	sub	sp, #28
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
=======
 8009bd0:	b480      	push	{r7}
 8009bd2:	b087      	sub	sp, #28
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
>>>>>>> main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a1b      	ldr	r3, [r3, #32]
 8009316:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6a1b      	ldr	r3, [r3, #32]
 800931c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800932e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	4b21      	ldr	r3, [pc, #132]	@ (80093b8 <TIM_OC5_SetConfig+0xb0>)
 8009334:	4013      	ands	r3, r2
 8009336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	4313      	orrs	r3, r2
 8009340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009348:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	041b      	lsls	r3, r3, #16
 8009350:	693a      	ldr	r2, [r7, #16]
 8009352:	4313      	orrs	r3, r2
 8009354:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4a18      	ldr	r2, [pc, #96]	@ (80093bc <TIM_OC5_SetConfig+0xb4>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d00f      	beq.n	800937e <TIM_OC5_SetConfig+0x76>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a17      	ldr	r2, [pc, #92]	@ (80093c0 <TIM_OC5_SetConfig+0xb8>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d00b      	beq.n	800937e <TIM_OC5_SetConfig+0x76>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a16      	ldr	r2, [pc, #88]	@ (80093c4 <TIM_OC5_SetConfig+0xbc>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d007      	beq.n	800937e <TIM_OC5_SetConfig+0x76>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a15      	ldr	r2, [pc, #84]	@ (80093c8 <TIM_OC5_SetConfig+0xc0>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d003      	beq.n	800937e <TIM_OC5_SetConfig+0x76>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a14      	ldr	r2, [pc, #80]	@ (80093cc <TIM_OC5_SetConfig+0xc4>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d109      	bne.n	8009392 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009384:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	021b      	lsls	r3, r3, #8
 800938c:	697a      	ldr	r2, [r7, #20]
 800938e:	4313      	orrs	r3, r2
 8009390:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	697a      	ldr	r2, [r7, #20]
 8009396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	685a      	ldr	r2, [r3, #4]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	693a      	ldr	r2, [r7, #16]
 80093aa:	621a      	str	r2, [r3, #32]
}
 80093ac:	bf00      	nop
 80093ae:	371c      	adds	r7, #28
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr
 80093b8:	fffeff8f 	.word	0xfffeff8f
 80093bc:	40010000 	.word	0x40010000
 80093c0:	40010400 	.word	0x40010400
 80093c4:	40014000 	.word	0x40014000
 80093c8:	40014400 	.word	0x40014400
 80093cc:	40014800 	.word	0x40014800

080093d0 <TIM_OC6_SetConfig>:
=======
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a1b      	ldr	r3, [r3, #32]
 8009bde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6a1b      	ldr	r3, [r3, #32]
 8009be4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	4b21      	ldr	r3, [pc, #132]	@ (8009c80 <TIM_OC5_SetConfig+0xb0>)
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009c10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	041b      	lsls	r3, r3, #16
 8009c18:	693a      	ldr	r2, [r7, #16]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4a18      	ldr	r2, [pc, #96]	@ (8009c84 <TIM_OC5_SetConfig+0xb4>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d00f      	beq.n	8009c46 <TIM_OC5_SetConfig+0x76>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4a17      	ldr	r2, [pc, #92]	@ (8009c88 <TIM_OC5_SetConfig+0xb8>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d00b      	beq.n	8009c46 <TIM_OC5_SetConfig+0x76>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a16      	ldr	r2, [pc, #88]	@ (8009c8c <TIM_OC5_SetConfig+0xbc>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d007      	beq.n	8009c46 <TIM_OC5_SetConfig+0x76>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a15      	ldr	r2, [pc, #84]	@ (8009c90 <TIM_OC5_SetConfig+0xc0>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d003      	beq.n	8009c46 <TIM_OC5_SetConfig+0x76>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a14      	ldr	r2, [pc, #80]	@ (8009c94 <TIM_OC5_SetConfig+0xc4>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d109      	bne.n	8009c5a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	695b      	ldr	r3, [r3, #20]
 8009c52:	021b      	lsls	r3, r3, #8
 8009c54:	697a      	ldr	r2, [r7, #20]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	685a      	ldr	r2, [r3, #4]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	693a      	ldr	r2, [r7, #16]
 8009c72:	621a      	str	r2, [r3, #32]
}
 8009c74:	bf00      	nop
 8009c76:	371c      	adds	r7, #28
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr
 8009c80:	fffeff8f 	.word	0xfffeff8f
 8009c84:	40010000 	.word	0x40010000
 8009c88:	40010400 	.word	0x40010400
 8009c8c:	40014000 	.word	0x40014000
 8009c90:	40014400 	.word	0x40014400
 8009c94:	40014800 	.word	0x40014800

08009c98 <TIM_OC6_SetConfig>:
>>>>>>> main
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80093d0:	b480      	push	{r7}
 80093d2:	b087      	sub	sp, #28
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
=======
 8009c98:	b480      	push	{r7}
 8009c9a:	b087      	sub	sp, #28
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
>>>>>>> main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a1b      	ldr	r3, [r3, #32]
 80093de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6a1b      	ldr	r3, [r3, #32]
 80093e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	4b22      	ldr	r3, [pc, #136]	@ (8009484 <TIM_OC6_SetConfig+0xb4>)
 80093fc:	4013      	ands	r3, r2
 80093fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	021b      	lsls	r3, r3, #8
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	4313      	orrs	r3, r2
 800940a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009412:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	051b      	lsls	r3, r3, #20
 800941a:	693a      	ldr	r2, [r7, #16]
 800941c:	4313      	orrs	r3, r2
 800941e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a19      	ldr	r2, [pc, #100]	@ (8009488 <TIM_OC6_SetConfig+0xb8>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d00f      	beq.n	8009448 <TIM_OC6_SetConfig+0x78>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a18      	ldr	r2, [pc, #96]	@ (800948c <TIM_OC6_SetConfig+0xbc>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d00b      	beq.n	8009448 <TIM_OC6_SetConfig+0x78>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a17      	ldr	r2, [pc, #92]	@ (8009490 <TIM_OC6_SetConfig+0xc0>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d007      	beq.n	8009448 <TIM_OC6_SetConfig+0x78>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a16      	ldr	r2, [pc, #88]	@ (8009494 <TIM_OC6_SetConfig+0xc4>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d003      	beq.n	8009448 <TIM_OC6_SetConfig+0x78>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a15      	ldr	r2, [pc, #84]	@ (8009498 <TIM_OC6_SetConfig+0xc8>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d109      	bne.n	800945c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800944e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	695b      	ldr	r3, [r3, #20]
 8009454:	029b      	lsls	r3, r3, #10
 8009456:	697a      	ldr	r2, [r7, #20]
 8009458:	4313      	orrs	r3, r2
 800945a:	617b      	str	r3, [r7, #20]
=======
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a1b      	ldr	r3, [r3, #32]
 8009ca6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6a1b      	ldr	r3, [r3, #32]
 8009cac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	4b22      	ldr	r3, [pc, #136]	@ (8009d4c <TIM_OC6_SetConfig+0xb4>)
 8009cc4:	4013      	ands	r3, r2
 8009cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	021b      	lsls	r3, r3, #8
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	051b      	lsls	r3, r3, #20
 8009ce2:	693a      	ldr	r2, [r7, #16]
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a19      	ldr	r2, [pc, #100]	@ (8009d50 <TIM_OC6_SetConfig+0xb8>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d00f      	beq.n	8009d10 <TIM_OC6_SetConfig+0x78>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4a18      	ldr	r2, [pc, #96]	@ (8009d54 <TIM_OC6_SetConfig+0xbc>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d00b      	beq.n	8009d10 <TIM_OC6_SetConfig+0x78>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a17      	ldr	r2, [pc, #92]	@ (8009d58 <TIM_OC6_SetConfig+0xc0>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d007      	beq.n	8009d10 <TIM_OC6_SetConfig+0x78>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a16      	ldr	r2, [pc, #88]	@ (8009d5c <TIM_OC6_SetConfig+0xc4>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d003      	beq.n	8009d10 <TIM_OC6_SetConfig+0x78>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a15      	ldr	r2, [pc, #84]	@ (8009d60 <TIM_OC6_SetConfig+0xc8>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d109      	bne.n	8009d24 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009d16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	695b      	ldr	r3, [r3, #20]
 8009d1c:	029b      	lsls	r3, r3, #10
 8009d1e:	697a      	ldr	r2, [r7, #20]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	617b      	str	r3, [r7, #20]
>>>>>>> main
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	697a      	ldr	r2, [r7, #20]
 8009460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	685a      	ldr	r2, [r3, #4]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	621a      	str	r2, [r3, #32]
}
 8009476:	bf00      	nop
 8009478:	371c      	adds	r7, #28
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	feff8fff 	.word	0xfeff8fff
 8009488:	40010000 	.word	0x40010000
 800948c:	40010400 	.word	0x40010400
 8009490:	40014000 	.word	0x40014000
 8009494:	40014400 	.word	0x40014400
 8009498:	40014800 	.word	0x40014800

0800949c <TIM_TI1_ConfigInputStage>:
=======
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	697a      	ldr	r2, [r7, #20]
 8009d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	685a      	ldr	r2, [r3, #4]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	693a      	ldr	r2, [r7, #16]
 8009d3c:	621a      	str	r2, [r3, #32]
}
 8009d3e:	bf00      	nop
 8009d40:	371c      	adds	r7, #28
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	feff8fff 	.word	0xfeff8fff
 8009d50:	40010000 	.word	0x40010000
 8009d54:	40010400 	.word	0x40010400
 8009d58:	40014000 	.word	0x40014000
 8009d5c:	40014400 	.word	0x40014400
 8009d60:	40014800 	.word	0x40014800

08009d64 <TIM_TI1_ConfigInputStage>:
>>>>>>> main
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 800949c:	b480      	push	{r7}
 800949e:	b087      	sub	sp, #28
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
=======
 8009d64:	b480      	push	{r7}
 8009d66:	b087      	sub	sp, #28
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
>>>>>>> main
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6a1b      	ldr	r3, [r3, #32]
 80094ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6a1b      	ldr	r3, [r3, #32]
 80094b2:	f023 0201 	bic.w	r2, r3, #1
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	699b      	ldr	r3, [r3, #24]
 80094be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80094c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	011b      	lsls	r3, r3, #4
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	4313      	orrs	r3, r2
 80094d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	f023 030a 	bic.w	r3, r3, #10
 80094d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80094da:	697a      	ldr	r2, [r7, #20]
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	4313      	orrs	r3, r2
 80094e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	693a      	ldr	r2, [r7, #16]
 80094e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	697a      	ldr	r2, [r7, #20]
 80094ec:	621a      	str	r2, [r3, #32]
}
 80094ee:	bf00      	nop
 80094f0:	371c      	adds	r7, #28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <TIM_TI2_ConfigInputStage>:
=======
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6a1b      	ldr	r3, [r3, #32]
 8009d74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6a1b      	ldr	r3, [r3, #32]
 8009d7a:	f023 0201 	bic.w	r2, r3, #1
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	699b      	ldr	r3, [r3, #24]
 8009d86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009d8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	011b      	lsls	r3, r3, #4
 8009d94:	693a      	ldr	r2, [r7, #16]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	f023 030a 	bic.w	r3, r3, #10
 8009da0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009da2:	697a      	ldr	r2, [r7, #20]
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	4313      	orrs	r3, r2
 8009da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	693a      	ldr	r2, [r7, #16]
 8009dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	697a      	ldr	r2, [r7, #20]
 8009db4:	621a      	str	r2, [r3, #32]
}
 8009db6:	bf00      	nop
 8009db8:	371c      	adds	r7, #28
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr

08009dc2 <TIM_TI2_ConfigInputStage>:
>>>>>>> main
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 80094fa:	b480      	push	{r7}
 80094fc:	b087      	sub	sp, #28
 80094fe:	af00      	add	r7, sp, #0
 8009500:	60f8      	str	r0, [r7, #12]
 8009502:	60b9      	str	r1, [r7, #8]
 8009504:	607a      	str	r2, [r7, #4]
=======
 8009dc2:	b480      	push	{r7}
 8009dc4:	b087      	sub	sp, #28
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	60f8      	str	r0, [r7, #12]
 8009dca:	60b9      	str	r1, [r7, #8]
 8009dcc:	607a      	str	r2, [r7, #4]
>>>>>>> main
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6a1b      	ldr	r3, [r3, #32]
 800950a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6a1b      	ldr	r3, [r3, #32]
 8009510:	f023 0210 	bic.w	r2, r3, #16
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	699b      	ldr	r3, [r3, #24]
 800951c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009524:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	031b      	lsls	r3, r3, #12
 800952a:	693a      	ldr	r2, [r7, #16]
 800952c:	4313      	orrs	r3, r2
 800952e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009536:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	011b      	lsls	r3, r3, #4
 800953c:	697a      	ldr	r2, [r7, #20]
 800953e:	4313      	orrs	r3, r2
 8009540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	693a      	ldr	r2, [r7, #16]
 8009546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	697a      	ldr	r2, [r7, #20]
 800954c:	621a      	str	r2, [r3, #32]
}
 800954e:	bf00      	nop
 8009550:	371c      	adds	r7, #28
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
	...

0800955c <TIM_ITRx_SetConfig>:
=======
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6a1b      	ldr	r3, [r3, #32]
 8009dd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6a1b      	ldr	r3, [r3, #32]
 8009dd8:	f023 0210 	bic.w	r2, r3, #16
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	699b      	ldr	r3, [r3, #24]
 8009de4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009dec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	031b      	lsls	r3, r3, #12
 8009df2:	693a      	ldr	r2, [r7, #16]
 8009df4:	4313      	orrs	r3, r2
 8009df6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009dfe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	011b      	lsls	r3, r3, #4
 8009e04:	697a      	ldr	r2, [r7, #20]
 8009e06:	4313      	orrs	r3, r2
 8009e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	693a      	ldr	r2, [r7, #16]
 8009e0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	697a      	ldr	r2, [r7, #20]
 8009e14:	621a      	str	r2, [r3, #32]
}
 8009e16:	bf00      	nop
 8009e18:	371c      	adds	r7, #28
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
	...

08009e24 <TIM_ITRx_SetConfig>:
>>>>>>> main
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 800955c:	b480      	push	{r7}
 800955e:	b085      	sub	sp, #20
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
=======
 8009e24:	b480      	push	{r7}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
>>>>>>> main
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	4b09      	ldr	r3, [pc, #36]	@ (8009594 <TIM_ITRx_SetConfig+0x38>)
 8009570:	4013      	ands	r3, r2
 8009572:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	4313      	orrs	r3, r2
 800957a:	f043 0307 	orr.w	r3, r3, #7
 800957e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	609a      	str	r2, [r3, #8]
}
 8009586:	bf00      	nop
 8009588:	3714      	adds	r7, #20
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	ffcfff8f 	.word	0xffcfff8f

08009598 <TIM_ETR_SetConfig>:
=======
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	4b09      	ldr	r3, [pc, #36]	@ (8009e5c <TIM_ITRx_SetConfig+0x38>)
 8009e38:	4013      	ands	r3, r2
 8009e3a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e3c:	683a      	ldr	r2, [r7, #0]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	f043 0307 	orr.w	r3, r3, #7
 8009e46:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	609a      	str	r2, [r3, #8]
}
 8009e4e:	bf00      	nop
 8009e50:	3714      	adds	r7, #20
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	ffcfff8f 	.word	0xffcfff8f

08009e60 <TIM_ETR_SetConfig>:
>>>>>>> main
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 8009598:	b480      	push	{r7}
 800959a:	b087      	sub	sp, #28
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	607a      	str	r2, [r7, #4]
 80095a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80095b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	021a      	lsls	r2, r3, #8
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	431a      	orrs	r2, r3
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	4313      	orrs	r3, r2
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	697a      	ldr	r2, [r7, #20]
 80095ca:	609a      	str	r2, [r3, #8]
}
 80095cc:	bf00      	nop
 80095ce:	371c      	adds	r7, #28
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <TIM_CCxChannelCmd>:
=======
 8009e60:	b480      	push	{r7}
 8009e62:	b087      	sub	sp, #28
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
 8009e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009e7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	021a      	lsls	r2, r3, #8
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	431a      	orrs	r2, r3
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	697a      	ldr	r2, [r7, #20]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	697a      	ldr	r2, [r7, #20]
 8009e92:	609a      	str	r2, [r3, #8]
}
 8009e94:	bf00      	nop
 8009e96:	371c      	adds	r7, #28
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <TIM_CCxChannelCmd>:
>>>>>>> main
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
 80095d8:	b480      	push	{r7}
 80095da:	b087      	sub	sp, #28
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
=======
 8009ea0:	b480      	push	{r7}
 8009ea2:	b087      	sub	sp, #28
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
>>>>>>> main

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	f003 031f 	and.w	r3, r3, #31
 80095ea:	2201      	movs	r2, #1
 80095ec:	fa02 f303 	lsl.w	r3, r2, r3
 80095f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6a1a      	ldr	r2, [r3, #32]
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	43db      	mvns	r3, r3
 80095fa:	401a      	ands	r2, r3
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6a1a      	ldr	r2, [r3, #32]
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	f003 031f 	and.w	r3, r3, #31
 800960a:	6879      	ldr	r1, [r7, #4]
 800960c:	fa01 f303 	lsl.w	r3, r1, r3
 8009610:	431a      	orrs	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	621a      	str	r2, [r3, #32]
}
 8009616:	bf00      	nop
 8009618:	371c      	adds	r7, #28
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
	...

08009624 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	f003 031f 	and.w	r3, r3, #31
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8009eb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6a1a      	ldr	r2, [r3, #32]
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	43db      	mvns	r3, r3
 8009ec2:	401a      	ands	r2, r3
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6a1a      	ldr	r2, [r3, #32]
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	f003 031f 	and.w	r3, r3, #31
 8009ed2:	6879      	ldr	r1, [r7, #4]
 8009ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ed8:	431a      	orrs	r2, r3
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	621a      	str	r2, [r3, #32]
}
 8009ede:	bf00      	nop
 8009ee0:	371c      	adds	r7, #28
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr
	...

08009eec <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> main
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
=======
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
>>>>>>> main
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009634:	2b01      	cmp	r3, #1
 8009636:	d101      	bne.n	800963c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009638:	2302      	movs	r3, #2
 800963a:	e06d      	b.n	8009718 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2202      	movs	r2, #2
 8009648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a30      	ldr	r2, [pc, #192]	@ (8009724 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d004      	beq.n	8009670 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a2f      	ldr	r2, [pc, #188]	@ (8009728 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d108      	bne.n	8009682 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
=======
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d101      	bne.n	8009f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f00:	2302      	movs	r3, #2
 8009f02:	e06d      	b.n	8009fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2202      	movs	r2, #2
 8009f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a30      	ldr	r2, [pc, #192]	@ (8009fec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d004      	beq.n	8009f38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a2f      	ldr	r2, [pc, #188]	@ (8009ff0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d108      	bne.n	8009f4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
<<<<<<< HEAD
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009676:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	4313      	orrs	r3, r2
 8009680:	60fb      	str	r3, [r7, #12]
=======
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009f3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	60fb      	str	r3, [r7, #12]
>>>>>>> main
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
<<<<<<< HEAD
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009688:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	4313      	orrs	r3, r2
 8009692:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a20      	ldr	r2, [pc, #128]	@ (8009724 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d022      	beq.n	80096ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096ae:	d01d      	beq.n	80096ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a1d      	ldr	r2, [pc, #116]	@ (800972c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d018      	beq.n	80096ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a1c      	ldr	r2, [pc, #112]	@ (8009730 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d013      	beq.n	80096ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a1a      	ldr	r2, [pc, #104]	@ (8009734 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d00e      	beq.n	80096ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a15      	ldr	r2, [pc, #84]	@ (8009728 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d009      	beq.n	80096ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a16      	ldr	r2, [pc, #88]	@ (8009738 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d004      	beq.n	80096ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a15      	ldr	r2, [pc, #84]	@ (800973c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d10c      	bne.n	8009706 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	68ba      	ldr	r2, [r7, #8]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68ba      	ldr	r2, [r7, #8]
 8009704:	609a      	str	r2, [r3, #8]
=======
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68fa      	ldr	r2, [r7, #12]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a20      	ldr	r2, [pc, #128]	@ (8009fec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d022      	beq.n	8009fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f76:	d01d      	beq.n	8009fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8009ff4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d018      	beq.n	8009fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a1c      	ldr	r2, [pc, #112]	@ (8009ff8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d013      	beq.n	8009fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a1a      	ldr	r2, [pc, #104]	@ (8009ffc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d00e      	beq.n	8009fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a15      	ldr	r2, [pc, #84]	@ (8009ff0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d009      	beq.n	8009fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a16      	ldr	r2, [pc, #88]	@ (800a000 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d004      	beq.n	8009fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a15      	ldr	r2, [pc, #84]	@ (800a004 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d10c      	bne.n	8009fce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	68ba      	ldr	r2, [r7, #8]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	609a      	str	r2, [r3, #8]
>>>>>>> main
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2201      	movs	r2, #1
 800970a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3714      	adds	r7, #20
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr
 8009724:	40010000 	.word	0x40010000
 8009728:	40010400 	.word	0x40010400
 800972c:	40000400 	.word	0x40000400
 8009730:	40000800 	.word	0x40000800
 8009734:	40000c00 	.word	0x40000c00
 8009738:	40001800 	.word	0x40001800
 800973c:	40014000 	.word	0x40014000

08009740 <HAL_TIMEx_ConfigBreakDeadTime>:
=======
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3714      	adds	r7, #20
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr
 8009fec:	40010000 	.word	0x40010000
 8009ff0:	40010400 	.word	0x40010400
 8009ff4:	40000400 	.word	0x40000400
 8009ff8:	40000800 	.word	0x40000800
 8009ffc:	40000c00 	.word	0x40000c00
 800a000:	40001800 	.word	0x40001800
 800a004:	40014000 	.word	0x40014000

0800a008 <HAL_TIMEx_ConfigBreakDeadTime>:
>>>>>>> main
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
<<<<<<< HEAD
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800974a:	2300      	movs	r3, #0
 800974c:	60fb      	str	r3, [r7, #12]
=======
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a012:	2300      	movs	r3, #0
 800a014:	60fb      	str	r3, [r7, #12]
>>>>>>> main
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009754:	2b01      	cmp	r3, #1
 8009756:	d101      	bne.n	800975c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009758:	2302      	movs	r3, #2
 800975a:	e065      	b.n	8009828 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d101      	bne.n	800a024 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a020:	2302      	movs	r3, #2
 800a022:	e065      	b.n	800a0f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> main

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
<<<<<<< HEAD
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	4313      	orrs	r3, r2
 8009770:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	4313      	orrs	r3, r2
 800977e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	4313      	orrs	r3, r2
 800978c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4313      	orrs	r3, r2
 800979a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	695b      	ldr	r3, [r3, #20]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c2:	4313      	orrs	r3, r2
 80097c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	699b      	ldr	r3, [r3, #24]
 80097d0:	041b      	lsls	r3, r3, #16
 80097d2:	4313      	orrs	r3, r2
 80097d4:	60fb      	str	r3, [r7, #12]
=======
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	4313      	orrs	r3, r2
 800a038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	4313      	orrs	r3, r2
 800a046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	4313      	orrs	r3, r2
 800a054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4313      	orrs	r3, r2
 800a062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	691b      	ldr	r3, [r3, #16]
 800a06e:	4313      	orrs	r3, r2
 800a070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	695b      	ldr	r3, [r3, #20]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a08a:	4313      	orrs	r3, r2
 800a08c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	699b      	ldr	r3, [r3, #24]
 800a098:	041b      	lsls	r3, r3, #16
 800a09a:	4313      	orrs	r3, r2
 800a09c:	60fb      	str	r3, [r7, #12]
>>>>>>> main
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
<<<<<<< HEAD
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a16      	ldr	r2, [pc, #88]	@ (8009834 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d004      	beq.n	80097ea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a14      	ldr	r2, [pc, #80]	@ (8009838 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d115      	bne.n	8009816 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
=======
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a16      	ldr	r2, [pc, #88]	@ (800a0fc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d004      	beq.n	800a0b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a14      	ldr	r2, [pc, #80]	@ (800a100 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d115      	bne.n	800a0de <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
>>>>>>> main
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
<<<<<<< HEAD
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097f4:	051b      	lsls	r3, r3, #20
 80097f6:	4313      	orrs	r3, r2
 80097f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	69db      	ldr	r3, [r3, #28]
 8009804:	4313      	orrs	r3, r2
 8009806:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	6a1b      	ldr	r3, [r3, #32]
 8009812:	4313      	orrs	r3, r2
 8009814:	60fb      	str	r3, [r7, #12]
=======
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0bc:	051b      	lsls	r3, r3, #20
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	69db      	ldr	r3, [r3, #28]
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	60fb      	str	r3, [r7, #12]
>>>>>>> main
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
<<<<<<< HEAD
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3714      	adds	r7, #20
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr
 8009834:	40010000 	.word	0x40010000
 8009838:	40010400 	.word	0x40010400

0800983c <HAL_TIMEx_CommutCallback>:
=======
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a0ee:	2300      	movs	r3, #0
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3714      	adds	r7, #20
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr
 800a0fc:	40010000 	.word	0x40010000
 800a100:	40010400 	.word	0x40010400

0800a104 <HAL_TIMEx_CommutCallback>:
>>>>>>> main
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
=======
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8009844:	bf00      	nop
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <HAL_TIMEx_BreakCallback>:
=======
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <HAL_TIMEx_BreakCallback>:
>>>>>>> main
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
=======
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8009858:	bf00      	nop
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <HAL_TIMEx_Break2Callback>:
=======
 800a120:	bf00      	nop
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <HAL_TIMEx_Break2Callback>:
>>>>>>> main
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
=======
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800986c:	bf00      	nop
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009878:	b480      	push	{r7}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6819      	ldr	r1, [r3, #0]
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	fb03 f203 	mul.w	r2, r3, r3
 800988e:	4613      	mov	r3, r2
 8009890:	005b      	lsls	r3, r3, #1
 8009892:	4413      	add	r3, r2
 8009894:	43db      	mvns	r3, r3
 8009896:	ea01 0203 	and.w	r2, r1, r3
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	fb03 f303 	mul.w	r3, r3, r3
 80098a0:	6879      	ldr	r1, [r7, #4]
 80098a2:	fb01 f303 	mul.w	r3, r1, r3
 80098a6:	431a      	orrs	r2, r3
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	601a      	str	r2, [r3, #0]
}
 80098ac:	bf00      	nop
 80098ae:	3714      	adds	r7, #20
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	685a      	ldr	r2, [r3, #4]
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	43db      	mvns	r3, r3
 80098cc:	401a      	ands	r2, r3
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	6879      	ldr	r1, [r7, #4]
 80098d2:	fb01 f303 	mul.w	r3, r1, r3
 80098d6:	431a      	orrs	r2, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	605a      	str	r2, [r3, #4]
}
 80098dc:	bf00      	nop
 80098de:	3714      	adds	r7, #20
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6899      	ldr	r1, [r3, #8]
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	fb03 f203 	mul.w	r2, r3, r3
 80098fe:	4613      	mov	r3, r2
 8009900:	005b      	lsls	r3, r3, #1
 8009902:	4413      	add	r3, r2
 8009904:	43db      	mvns	r3, r3
 8009906:	ea01 0203 	and.w	r2, r1, r3
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	fb03 f303 	mul.w	r3, r3, r3
 8009910:	6879      	ldr	r1, [r7, #4]
 8009912:	fb01 f303 	mul.w	r3, r1, r3
 8009916:	431a      	orrs	r2, r3
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	609a      	str	r2, [r3, #8]
}
 800991c:	bf00      	nop
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	68d9      	ldr	r1, [r3, #12]
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	fb03 f203 	mul.w	r2, r3, r3
 800993e:	4613      	mov	r3, r2
 8009940:	005b      	lsls	r3, r3, #1
 8009942:	4413      	add	r3, r2
 8009944:	43db      	mvns	r3, r3
 8009946:	ea01 0203 	and.w	r2, r1, r3
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	fb03 f303 	mul.w	r3, r3, r3
 8009950:	6879      	ldr	r1, [r7, #4]
 8009952:	fb01 f303 	mul.w	r3, r1, r3
 8009956:	431a      	orrs	r2, r3
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	60da      	str	r2, [r3, #12]
}
 800995c:	bf00      	nop
 800995e:	3714      	adds	r7, #20
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6a19      	ldr	r1, [r3, #32]
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	fb03 f303 	mul.w	r3, r3, r3
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	fb02 f303 	mul.w	r3, r2, r3
 8009984:	68ba      	ldr	r2, [r7, #8]
 8009986:	fb03 f202 	mul.w	r2, r3, r2
 800998a:	4613      	mov	r3, r2
 800998c:	011b      	lsls	r3, r3, #4
 800998e:	1a9b      	subs	r3, r3, r2
 8009990:	43db      	mvns	r3, r3
 8009992:	ea01 0203 	and.w	r2, r1, r3
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	fb03 f303 	mul.w	r3, r3, r3
 800999c:	68b9      	ldr	r1, [r7, #8]
 800999e:	fb01 f303 	mul.w	r3, r1, r3
 80099a2:	68b9      	ldr	r1, [r7, #8]
 80099a4:	fb01 f303 	mul.w	r3, r1, r3
 80099a8:	6879      	ldr	r1, [r7, #4]
 80099aa:	fb01 f303 	mul.w	r3, r1, r3
 80099ae:	431a      	orrs	r2, r3
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 80099b4:	bf00      	nop
 80099b6:	3714      	adds	r7, #20
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b085      	sub	sp, #20
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	0a1b      	lsrs	r3, r3, #8
 80099d4:	68ba      	ldr	r2, [r7, #8]
 80099d6:	0a12      	lsrs	r2, r2, #8
 80099d8:	fb02 f303 	mul.w	r3, r2, r3
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	0a12      	lsrs	r2, r2, #8
 80099e0:	fb02 f303 	mul.w	r3, r2, r3
 80099e4:	68ba      	ldr	r2, [r7, #8]
 80099e6:	0a12      	lsrs	r2, r2, #8
 80099e8:	fb03 f202 	mul.w	r2, r3, r2
 80099ec:	4613      	mov	r3, r2
 80099ee:	011b      	lsls	r3, r3, #4
 80099f0:	1a9b      	subs	r3, r3, r2
 80099f2:	43db      	mvns	r3, r3
 80099f4:	ea01 0203 	and.w	r2, r1, r3
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	0a1b      	lsrs	r3, r3, #8
 80099fc:	68b9      	ldr	r1, [r7, #8]
 80099fe:	0a09      	lsrs	r1, r1, #8
 8009a00:	fb01 f303 	mul.w	r3, r1, r3
 8009a04:	68b9      	ldr	r1, [r7, #8]
 8009a06:	0a09      	lsrs	r1, r1, #8
 8009a08:	fb01 f303 	mul.w	r3, r1, r3
 8009a0c:	68b9      	ldr	r1, [r7, #8]
 8009a0e:	0a09      	lsrs	r1, r1, #8
 8009a10:	fb01 f303 	mul.w	r3, r1, r3
 8009a14:	6879      	ldr	r1, [r7, #4]
 8009a16:	fb01 f303 	mul.w	r3, r1, r3
 8009a1a:	431a      	orrs	r2, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8009a20:	bf00      	nop
 8009a22:	3714      	adds	r7, #20
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b088      	sub	sp, #32
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	fa93 f3a3 	rbit	r3, r3
 8009a42:	60fb      	str	r3, [r7, #12]
  return result;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d101      	bne.n	8009a52 <LL_GPIO_Init+0x26>
    return 32U;
 8009a4e:	2320      	movs	r3, #32
 8009a50:	e003      	b.n	8009a5a <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	fab3 f383 	clz	r3, r3
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009a5c:	e048      	b.n	8009af0 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	2101      	movs	r1, #1
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	fa01 f303 	lsl.w	r3, r1, r3
 8009a6a:	4013      	ands	r3, r2
 8009a6c:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d03a      	beq.n	8009aea <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d003      	beq.n	8009a84 <LL_GPIO_Init+0x58>
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d10e      	bne.n	8009aa2 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	69b9      	ldr	r1, [r7, #24]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f7ff ff2b 	bl	80098e8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	6819      	ldr	r1, [r3, #0]
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f7ff ff0b 	bl	80098b8 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	69b9      	ldr	r1, [r7, #24]
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f7ff ff3c 	bl	8009928 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d111      	bne.n	8009adc <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	2bff      	cmp	r3, #255	@ 0xff
 8009abc:	d807      	bhi.n	8009ace <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	695b      	ldr	r3, [r3, #20]
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	69b9      	ldr	r1, [r7, #24]
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7ff ff4e 	bl	8009968 <LL_GPIO_SetAFPin_0_7>
 8009acc:	e006      	b.n	8009adc <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	695b      	ldr	r3, [r3, #20]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	69b9      	ldr	r1, [r7, #24]
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f7ff ff72 	bl	80099c0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	69b9      	ldr	r1, [r7, #24]
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f7ff fec7 	bl	8009878 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8009aea:	69fb      	ldr	r3, [r7, #28]
 8009aec:	3301      	adds	r3, #1
 8009aee:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	fa22 f303 	lsr.w	r3, r2, r3
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d1af      	bne.n	8009a5e <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3720      	adds	r7, #32
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8009b0c:	4b07      	ldr	r3, [pc, #28]	@ (8009b2c <LL_RCC_HSE_IsReady+0x24>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b18:	d101      	bne.n	8009b1e <LL_RCC_HSE_IsReady+0x16>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e000      	b.n	8009b20 <LL_RCC_HSE_IsReady+0x18>
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	58024400 	.word	0x58024400

08009b30 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8009b30:	b480      	push	{r7}
 8009b32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8009b34:	4b06      	ldr	r3, [pc, #24]	@ (8009b50 <LL_RCC_HSI_IsReady+0x20>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f003 0304 	and.w	r3, r3, #4
 8009b3c:	2b04      	cmp	r3, #4
 8009b3e:	d101      	bne.n	8009b44 <LL_RCC_HSI_IsReady+0x14>
 8009b40:	2301      	movs	r3, #1
 8009b42:	e000      	b.n	8009b46 <LL_RCC_HSI_IsReady+0x16>
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr
 8009b50:	58024400 	.word	0x58024400

08009b54 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 8009b54:	b480      	push	{r7}
 8009b56:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8009b58:	4b04      	ldr	r3, [pc, #16]	@ (8009b6c <LL_RCC_HSI_GetDivider+0x18>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f003 0318 	and.w	r3, r3, #24
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	58024400 	.word	0x58024400

08009b70 <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 8009b70:	b480      	push	{r7}
 8009b72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 8009b74:	4b07      	ldr	r3, [pc, #28]	@ (8009b94 <LL_RCC_CSI_IsReady+0x24>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b80:	d101      	bne.n	8009b86 <LL_RCC_CSI_IsReady+0x16>
 8009b82:	2301      	movs	r3, #1
 8009b84:	e000      	b.n	8009b88 <LL_RCC_CSI_IsReady+0x18>
 8009b86:	2300      	movs	r3, #0
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	58024400 	.word	0x58024400

08009b98 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009b9c:	4b06      	ldr	r3, [pc, #24]	@ (8009bb8 <LL_RCC_LSE_IsReady+0x20>)
 8009b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ba0:	f003 0302 	and.w	r3, r3, #2
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	d101      	bne.n	8009bac <LL_RCC_LSE_IsReady+0x14>
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e000      	b.n	8009bae <LL_RCC_LSE_IsReady+0x16>
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr
 8009bb8:	58024400 	.word	0x58024400

08009bbc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009bc0:	4b04      	ldr	r3, [pc, #16]	@ (8009bd4 <LL_RCC_GetSysClkSource+0x18>)
 8009bc2:	691b      	ldr	r3, [r3, #16]
 8009bc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	58024400 	.word	0x58024400

08009bd8 <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 8009bdc:	4b04      	ldr	r3, [pc, #16]	@ (8009bf0 <LL_RCC_GetSysPrescaler+0x18>)
 8009bde:	699b      	ldr	r3, [r3, #24]
 8009be0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop
 8009bf0:	58024400 	.word	0x58024400

08009bf4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8009bf8:	4b04      	ldr	r3, [pc, #16]	@ (8009c0c <LL_RCC_GetAHBPrescaler+0x18>)
 8009bfa:	699b      	ldr	r3, [r3, #24]
 8009bfc:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	58024400 	.word	0x58024400

08009c10 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009c10:	b480      	push	{r7}
 8009c12:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 8009c14:	4b04      	ldr	r3, [pc, #16]	@ (8009c28 <LL_RCC_GetAPB1Prescaler+0x18>)
 8009c16:	69db      	ldr	r3, [r3, #28]
 8009c18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop
 8009c28:	58024400 	.word	0x58024400

08009c2c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 8009c30:	4b04      	ldr	r3, [pc, #16]	@ (8009c44 <LL_RCC_GetAPB2Prescaler+0x18>)
 8009c32:	69db      	ldr	r3, [r3, #28]
 8009c34:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	58024400 	.word	0x58024400

08009c48 <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	b2da      	uxtb	r2, r3
 8009c54:	4b0e      	ldr	r3, [pc, #56]	@ (8009c90 <LL_RCC_GetClockSource+0x48>)
 8009c56:	4413      	add	r3, r2
 8009c58:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	0e19      	lsrs	r1, r3, #24
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	0a1b      	lsrs	r3, r3, #8
 8009c66:	f003 031f 	and.w	r3, r3, #31
 8009c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8009c6e:	401a      	ands	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	0a1b      	lsrs	r3, r3, #8
 8009c74:	f003 031f 	and.w	r3, r3, #31
 8009c78:	fa22 f303 	lsr.w	r3, r2, r3
 8009c7c:	041a      	lsls	r2, r3, #16
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4313      	orrs	r3, r2
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3714      	adds	r7, #20
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	5802444c 	.word	0x5802444c

08009c94 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f7ff ffd3 	bl	8009c48 <LL_RCC_GetClockSource>
 8009ca2:	4603      	mov	r3, r0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3708      	adds	r7, #8
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 8009cac:	b480      	push	{r7}
 8009cae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8009cb0:	4b04      	ldr	r3, [pc, #16]	@ (8009cc4 <LL_RCC_PLL_GetSource+0x18>)
 8009cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cb4:	f003 0303 	and.w	r3, r3, #3
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	58024400 	.word	0x58024400

08009cc8 <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 8009ccc:	4b07      	ldr	r3, [pc, #28]	@ (8009cec <LL_RCC_PLL1P_IsEnabled+0x24>)
 8009cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cd8:	d101      	bne.n	8009cde <LL_RCC_PLL1P_IsEnabled+0x16>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e000      	b.n	8009ce0 <LL_RCC_PLL1P_IsEnabled+0x18>
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	58024400 	.word	0x58024400

08009cf0 <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 8009cf4:	4b07      	ldr	r3, [pc, #28]	@ (8009d14 <LL_RCC_PLL1Q_IsEnabled+0x24>)
 8009cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d00:	d101      	bne.n	8009d06 <LL_RCC_PLL1Q_IsEnabled+0x16>
 8009d02:	2301      	movs	r3, #1
 8009d04:	e000      	b.n	8009d08 <LL_RCC_PLL1Q_IsEnabled+0x18>
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	58024400 	.word	0x58024400

08009d18 <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 8009d1c:	4b07      	ldr	r3, [pc, #28]	@ (8009d3c <LL_RCC_PLL1R_IsEnabled+0x24>)
 8009d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009d24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009d28:	d101      	bne.n	8009d2e <LL_RCC_PLL1R_IsEnabled+0x16>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e000      	b.n	8009d30 <LL_RCC_PLL1R_IsEnabled+0x18>
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	58024400 	.word	0x58024400

08009d40 <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 8009d40:	b480      	push	{r7}
 8009d42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 8009d44:	4b06      	ldr	r3, [pc, #24]	@ (8009d60 <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 8009d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d48:	f003 0301 	and.w	r3, r3, #1
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d101      	bne.n	8009d54 <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 8009d50:	2301      	movs	r3, #1
 8009d52:	e000      	b.n	8009d56 <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 8009d54:	2300      	movs	r3, #0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr
 8009d60:	58024400 	.word	0x58024400

08009d64 <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 8009d64:	b480      	push	{r7}
 8009d66:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 8009d68:	4b04      	ldr	r3, [pc, #16]	@ (8009d7c <LL_RCC_PLL1_GetN+0x18>)
 8009d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d70:	3301      	adds	r3, #1
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr
 8009d7c:	58024400 	.word	0x58024400

08009d80 <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 8009d80:	b480      	push	{r7}
 8009d82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 8009d84:	4b04      	ldr	r3, [pc, #16]	@ (8009d98 <LL_RCC_PLL1_GetM+0x18>)
 8009d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d88:	091b      	lsrs	r3, r3, #4
 8009d8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr
 8009d98:	58024400 	.word	0x58024400

08009d9c <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 8009da0:	4b05      	ldr	r3, [pc, #20]	@ (8009db8 <LL_RCC_PLL1_GetP+0x1c>)
 8009da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009da4:	0a5b      	lsrs	r3, r3, #9
 8009da6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009daa:	3301      	adds	r3, #1
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	58024400 	.word	0x58024400

08009dbc <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 8009dc0:	4b05      	ldr	r3, [pc, #20]	@ (8009dd8 <LL_RCC_PLL1_GetQ+0x1c>)
 8009dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dc4:	0c1b      	lsrs	r3, r3, #16
 8009dc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dca:	3301      	adds	r3, #1
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
 8009dd6:	bf00      	nop
 8009dd8:	58024400 	.word	0x58024400

08009ddc <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 8009de0:	4b05      	ldr	r3, [pc, #20]	@ (8009df8 <LL_RCC_PLL1_GetR+0x1c>)
 8009de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009de4:	0e1b      	lsrs	r3, r3, #24
 8009de6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dea:	3301      	adds	r3, #1
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	58024400 	.word	0x58024400

08009dfc <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 8009e00:	4b04      	ldr	r3, [pc, #16]	@ (8009e14 <LL_RCC_PLL1_GetFRACN+0x18>)
 8009e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e04:	08db      	lsrs	r3, r3, #3
 8009e06:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr
 8009e14:	58024400 	.word	0x58024400

08009e18 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 8009e1c:	4b07      	ldr	r3, [pc, #28]	@ (8009e3c <LL_RCC_PLL2_IsReady+0x24>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e28:	d101      	bne.n	8009e2e <LL_RCC_PLL2_IsReady+0x16>
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e000      	b.n	8009e30 <LL_RCC_PLL2_IsReady+0x18>
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	58024400 	.word	0x58024400

08009e40 <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 8009e40:	b480      	push	{r7}
 8009e42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 8009e44:	4b07      	ldr	r3, [pc, #28]	@ (8009e64 <LL_RCC_PLL2P_IsEnabled+0x24>)
 8009e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009e4c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009e50:	d101      	bne.n	8009e56 <LL_RCC_PLL2P_IsEnabled+0x16>
 8009e52:	2301      	movs	r3, #1
 8009e54:	e000      	b.n	8009e58 <LL_RCC_PLL2P_IsEnabled+0x18>
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	58024400 	.word	0x58024400

08009e68 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 8009e6c:	4b07      	ldr	r3, [pc, #28]	@ (8009e8c <LL_RCC_PLL2Q_IsEnabled+0x24>)
 8009e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009e74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e78:	d101      	bne.n	8009e7e <LL_RCC_PLL2Q_IsEnabled+0x16>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e000      	b.n	8009e80 <LL_RCC_PLL2Q_IsEnabled+0x18>
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	58024400 	.word	0x58024400

08009e90 <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 8009e90:	b480      	push	{r7}
 8009e92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 8009e94:	4b07      	ldr	r3, [pc, #28]	@ (8009eb4 <LL_RCC_PLL2R_IsEnabled+0x24>)
 8009e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009e9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ea0:	d101      	bne.n	8009ea6 <LL_RCC_PLL2R_IsEnabled+0x16>
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	e000      	b.n	8009ea8 <LL_RCC_PLL2R_IsEnabled+0x18>
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	58024400 	.word	0x58024400

08009eb8 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 8009ebc:	4b06      	ldr	r3, [pc, #24]	@ (8009ed8 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 8009ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ec0:	f003 0310 	and.w	r3, r3, #16
 8009ec4:	2b10      	cmp	r3, #16
 8009ec6:	d101      	bne.n	8009ecc <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e000      	b.n	8009ece <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr
 8009ed8:	58024400 	.word	0x58024400

08009edc <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 8009edc:	b480      	push	{r7}
 8009ede:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 8009ee0:	4b04      	ldr	r3, [pc, #16]	@ (8009ef4 <LL_RCC_PLL2_GetN+0x18>)
 8009ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ee8:	3301      	adds	r3, #1
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr
 8009ef4:	58024400 	.word	0x58024400

08009ef8 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 8009efc:	4b04      	ldr	r3, [pc, #16]	@ (8009f10 <LL_RCC_PLL2_GetM+0x18>)
 8009efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f00:	0b1b      	lsrs	r3, r3, #12
 8009f02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr
 8009f10:	58024400 	.word	0x58024400

08009f14 <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 8009f14:	b480      	push	{r7}
 8009f16:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 8009f18:	4b05      	ldr	r3, [pc, #20]	@ (8009f30 <LL_RCC_PLL2_GetP+0x1c>)
 8009f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f1c:	0a5b      	lsrs	r3, r3, #9
 8009f1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f22:	3301      	adds	r3, #1
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop
 8009f30:	58024400 	.word	0x58024400

08009f34 <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 8009f34:	b480      	push	{r7}
 8009f36:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 8009f38:	4b05      	ldr	r3, [pc, #20]	@ (8009f50 <LL_RCC_PLL2_GetQ+0x1c>)
 8009f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f3c:	0c1b      	lsrs	r3, r3, #16
 8009f3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f42:	3301      	adds	r3, #1
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	58024400 	.word	0x58024400

08009f54 <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 8009f54:	b480      	push	{r7}
 8009f56:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 8009f58:	4b05      	ldr	r3, [pc, #20]	@ (8009f70 <LL_RCC_PLL2_GetR+0x1c>)
 8009f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f5c:	0e1b      	lsrs	r3, r3, #24
 8009f5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f62:	3301      	adds	r3, #1
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	58024400 	.word	0x58024400

08009f74 <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 8009f74:	b480      	push	{r7}
 8009f76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 8009f78:	4b04      	ldr	r3, [pc, #16]	@ (8009f8c <LL_RCC_PLL2_GetFRACN+0x18>)
 8009f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f7c:	08db      	lsrs	r3, r3, #3
 8009f7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr
 8009f8c:	58024400 	.word	0x58024400

08009f90 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 8009f90:	b480      	push	{r7}
 8009f92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 8009f94:	4b07      	ldr	r3, [pc, #28]	@ (8009fb4 <LL_RCC_PLL3_IsReady+0x24>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fa0:	d101      	bne.n	8009fa6 <LL_RCC_PLL3_IsReady+0x16>
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e000      	b.n	8009fa8 <LL_RCC_PLL3_IsReady+0x18>
 8009fa6:	2300      	movs	r3, #0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	58024400 	.word	0x58024400

08009fb8 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 8009fbc:	4b07      	ldr	r3, [pc, #28]	@ (8009fdc <LL_RCC_PLL3P_IsEnabled+0x24>)
 8009fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009fc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009fc8:	d101      	bne.n	8009fce <LL_RCC_PLL3P_IsEnabled+0x16>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e000      	b.n	8009fd0 <LL_RCC_PLL3P_IsEnabled+0x18>
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	58024400 	.word	0x58024400

08009fe0 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 8009fe4:	4b07      	ldr	r3, [pc, #28]	@ (800a004 <LL_RCC_PLL3Q_IsEnabled+0x24>)
 8009fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fe8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009fec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009ff0:	d101      	bne.n	8009ff6 <LL_RCC_PLL3Q_IsEnabled+0x16>
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	e000      	b.n	8009ff8 <LL_RCC_PLL3Q_IsEnabled+0x18>
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	58024400 	.word	0x58024400

0800a008 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 800a008:	b480      	push	{r7}
 800a00a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 800a00c:	4b07      	ldr	r3, [pc, #28]	@ (800a02c <LL_RCC_PLL3R_IsEnabled+0x24>)
 800a00e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a010:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a014:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a018:	d101      	bne.n	800a01e <LL_RCC_PLL3R_IsEnabled+0x16>
 800a01a:	2301      	movs	r3, #1
 800a01c:	e000      	b.n	800a020 <LL_RCC_PLL3R_IsEnabled+0x18>
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr
 800a02a:	bf00      	nop
 800a02c:	58024400 	.word	0x58024400

0800a030 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 800a030:	b480      	push	{r7}
 800a032:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 800a034:	4b07      	ldr	r3, [pc, #28]	@ (800a054 <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 800a036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a03c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a040:	d101      	bne.n	800a046 <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 800a042:	2301      	movs	r3, #1
 800a044:	e000      	b.n	800a048 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 800a046:	2300      	movs	r3, #0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	58024400 	.word	0x58024400

0800a058 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 800a058:	b480      	push	{r7}
 800a05a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 800a05c:	4b04      	ldr	r3, [pc, #16]	@ (800a070 <LL_RCC_PLL3_GetN+0x18>)
 800a05e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a064:	3301      	adds	r3, #1
}
 800a066:	4618      	mov	r0, r3
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr
 800a070:	58024400 	.word	0x58024400

0800a074 <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 800a074:	b480      	push	{r7}
 800a076:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 800a078:	4b04      	ldr	r3, [pc, #16]	@ (800a08c <LL_RCC_PLL3_GetM+0x18>)
 800a07a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a07c:	0d1b      	lsrs	r3, r3, #20
 800a07e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800a082:	4618      	mov	r0, r3
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	58024400 	.word	0x58024400

0800a090 <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 800a090:	b480      	push	{r7}
 800a092:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 800a094:	4b05      	ldr	r3, [pc, #20]	@ (800a0ac <LL_RCC_PLL3_GetP+0x1c>)
 800a096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a098:	0a5b      	lsrs	r3, r3, #9
 800a09a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a09e:	3301      	adds	r3, #1
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	58024400 	.word	0x58024400

0800a0b0 <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 800a0b4:	4b05      	ldr	r3, [pc, #20]	@ (800a0cc <LL_RCC_PLL3_GetQ+0x1c>)
 800a0b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0b8:	0c1b      	lsrs	r3, r3, #16
 800a0ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0be:	3301      	adds	r3, #1
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	58024400 	.word	0x58024400

0800a0d0 <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 800a0d4:	4b05      	ldr	r3, [pc, #20]	@ (800a0ec <LL_RCC_PLL3_GetR+0x1c>)
 800a0d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0d8:	0e1b      	lsrs	r3, r3, #24
 800a0da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0de:	3301      	adds	r3, #1
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop
 800a0ec:	58024400 	.word	0x58024400

0800a0f0 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 800a0f4:	4b04      	ldr	r3, [pc, #16]	@ (800a108 <LL_RCC_PLL3_GetFRACN+0x18>)
 800a0f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0f8:	08db      	lsrs	r3, r3, #3
 800a0fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr
 800a108:	58024400 	.word	0x58024400

0800a10c <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
=======
 800a134:	bf00      	nop
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
>>>>>>> main
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
<<<<<<< HEAD
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b08a      	sub	sp, #40	@ 0x28
 800a110:	af02      	add	r7, sp, #8
 800a112:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800a114:	2300      	movs	r3, #0
 800a116:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800a118:	2300      	movs	r3, #0
 800a11a:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800a11c:	f7ff fdc6 	bl	8009cac <LL_RCC_PLL_GetSource>
 800a120:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	2b02      	cmp	r3, #2
 800a126:	d01f      	beq.n	800a168 <LL_RCC_GetPLL1ClockFreq+0x5c>
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	2b02      	cmp	r3, #2
 800a12c:	d824      	bhi.n	800a178 <LL_RCC_GetPLL1ClockFreq+0x6c>
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d003      	beq.n	800a13c <LL_RCC_GetPLL1ClockFreq+0x30>
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	2b01      	cmp	r3, #1
 800a138:	d00e      	beq.n	800a158 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800a13a:	e01d      	b.n	800a178 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800a13c:	f7ff fcf8 	bl	8009b30 <LL_RCC_HSI_IsReady>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d01a      	beq.n	800a17c <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800a146:	f7ff fd05 	bl	8009b54 <LL_RCC_HSI_GetDivider>
 800a14a:	4603      	mov	r3, r0
 800a14c:	08db      	lsrs	r3, r3, #3
 800a14e:	4a38      	ldr	r2, [pc, #224]	@ (800a230 <LL_RCC_GetPLL1ClockFreq+0x124>)
 800a150:	fa22 f303 	lsr.w	r3, r2, r3
 800a154:	61fb      	str	r3, [r7, #28]
      break;
 800a156:	e011      	b.n	800a17c <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800a158:	f7ff fd0a 	bl	8009b70 <LL_RCC_CSI_IsReady>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00e      	beq.n	800a180 <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800a162:	4b34      	ldr	r3, [pc, #208]	@ (800a234 <LL_RCC_GetPLL1ClockFreq+0x128>)
 800a164:	61fb      	str	r3, [r7, #28]
      break;
 800a166:	e00b      	b.n	800a180 <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800a168:	f7ff fcce 	bl	8009b08 <LL_RCC_HSE_IsReady>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d008      	beq.n	800a184 <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800a172:	4b31      	ldr	r3, [pc, #196]	@ (800a238 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 800a174:	61fb      	str	r3, [r7, #28]
      break;
 800a176:	e005      	b.n	800a184 <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 800a178:	bf00      	nop
 800a17a:	e004      	b.n	800a186 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800a17c:	bf00      	nop
 800a17e:	e002      	b.n	800a186 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800a180:	bf00      	nop
 800a182:	e000      	b.n	800a186 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800a184:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 800a198:	f7ff fdf2 	bl	8009d80 <LL_RCC_PLL1_GetM>
 800a19c:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 800a19e:	f7ff fde1 	bl	8009d64 <LL_RCC_PLL1_GetN>
 800a1a2:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 800a1a4:	f7ff fdcc 	bl	8009d40 <LL_RCC_PLL1FRACN_IsEnabled>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d002      	beq.n	800a1b4 <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 800a1ae:	f7ff fe25 	bl	8009dfc <LL_RCC_PLL1_GetFRACN>
 800a1b2:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d035      	beq.n	800a226 <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 800a1ba:	f7ff fd85 	bl	8009cc8 <LL_RCC_PLL1P_IsEnabled>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00c      	beq.n	800a1de <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 800a1c4:	f7ff fdea 	bl	8009d9c <LL_RCC_PLL1_GetP>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	9300      	str	r3, [sp, #0]
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	6939      	ldr	r1, [r7, #16]
 800a1d2:	69f8      	ldr	r0, [r7, #28]
 800a1d4:	f000 f964 	bl	800a4a0 <LL_RCC_CalcPLLClockFreq>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 800a1de:	f7ff fd87 	bl	8009cf0 <LL_RCC_PLL1Q_IsEnabled>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00c      	beq.n	800a202 <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 800a1e8:	f7ff fde8 	bl	8009dbc <LL_RCC_PLL1_GetQ>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	68fa      	ldr	r2, [r7, #12]
 800a1f4:	6939      	ldr	r1, [r7, #16]
 800a1f6:	69f8      	ldr	r0, [r7, #28]
 800a1f8:	f000 f952 	bl	800a4a0 <LL_RCC_CalcPLLClockFreq>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 800a202:	f7ff fd89 	bl	8009d18 <LL_RCC_PLL1R_IsEnabled>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d00c      	beq.n	800a226 <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 800a20c:	f7ff fde6 	bl	8009ddc <LL_RCC_PLL1_GetR>
 800a210:	4603      	mov	r3, r0
 800a212:	9300      	str	r3, [sp, #0]
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	68fa      	ldr	r2, [r7, #12]
 800a218:	6939      	ldr	r1, [r7, #16]
 800a21a:	69f8      	ldr	r0, [r7, #28]
 800a21c:	f000 f940 	bl	800a4a0 <LL_RCC_CalcPLLClockFreq>
 800a220:	4602      	mov	r2, r0
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	609a      	str	r2, [r3, #8]
    }
  }
}
 800a226:	bf00      	nop
 800a228:	3720      	adds	r7, #32
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	03d09000 	.word	0x03d09000
 800a234:	003d0900 	.word	0x003d0900
 800a238:	016e3600 	.word	0x016e3600

0800a23c <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
=======
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d101      	bne.n	800a152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	e042      	b.n	800a1d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d106      	bne.n	800a16a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f7f8 fd93 	bl	8002c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2224      	movs	r2, #36	@ 0x24
 800a16e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f022 0201 	bic.w	r2, r2, #1
 800a180:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a186:	2b00      	cmp	r3, #0
 800a188:	d002      	beq.n	800a190 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f001 fa3a 	bl	800b604 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 fccf 	bl	800ab34 <UART_SetConfig>
 800a196:	4603      	mov	r3, r0
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d101      	bne.n	800a1a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e01b      	b.n	800a1d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	685a      	ldr	r2, [r3, #4]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a1ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	689a      	ldr	r2, [r3, #8]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a1be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f042 0201 	orr.w	r2, r2, #1
 800a1ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f001 fab9 	bl	800b748 <UART_CheckIdleState>
 800a1d6:	4603      	mov	r3, r0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
>>>>>>> main
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
<<<<<<< HEAD
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b08a      	sub	sp, #40	@ 0x28
 800a240:	af02      	add	r7, sp, #8
 800a242:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800a244:	2300      	movs	r3, #0
 800a246:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800a248:	2300      	movs	r3, #0
 800a24a:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800a24c:	f7ff fd2e 	bl	8009cac <LL_RCC_PLL_GetSource>
 800a250:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	2b02      	cmp	r3, #2
 800a256:	d01f      	beq.n	800a298 <LL_RCC_GetPLL2ClockFreq+0x5c>
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	2b02      	cmp	r3, #2
 800a25c:	d824      	bhi.n	800a2a8 <LL_RCC_GetPLL2ClockFreq+0x6c>
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d003      	beq.n	800a26c <LL_RCC_GetPLL2ClockFreq+0x30>
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	2b01      	cmp	r3, #1
 800a268:	d00e      	beq.n	800a288 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800a26a:	e01d      	b.n	800a2a8 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800a26c:	f7ff fc60 	bl	8009b30 <LL_RCC_HSI_IsReady>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d01a      	beq.n	800a2ac <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800a276:	f7ff fc6d 	bl	8009b54 <LL_RCC_HSI_GetDivider>
 800a27a:	4603      	mov	r3, r0
 800a27c:	08db      	lsrs	r3, r3, #3
 800a27e:	4a38      	ldr	r2, [pc, #224]	@ (800a360 <LL_RCC_GetPLL2ClockFreq+0x124>)
 800a280:	fa22 f303 	lsr.w	r3, r2, r3
 800a284:	61fb      	str	r3, [r7, #28]
      break;
 800a286:	e011      	b.n	800a2ac <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800a288:	f7ff fc72 	bl	8009b70 <LL_RCC_CSI_IsReady>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00e      	beq.n	800a2b0 <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800a292:	4b34      	ldr	r3, [pc, #208]	@ (800a364 <LL_RCC_GetPLL2ClockFreq+0x128>)
 800a294:	61fb      	str	r3, [r7, #28]
      break;
 800a296:	e00b      	b.n	800a2b0 <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800a298:	f7ff fc36 	bl	8009b08 <LL_RCC_HSE_IsReady>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d008      	beq.n	800a2b4 <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800a2a2:	4b31      	ldr	r3, [pc, #196]	@ (800a368 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 800a2a4:	61fb      	str	r3, [r7, #28]
      break;
 800a2a6:	e005      	b.n	800a2b4 <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 800a2a8:	bf00      	nop
 800a2aa:	e004      	b.n	800a2b6 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 800a2ac:	bf00      	nop
 800a2ae:	e002      	b.n	800a2b6 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 800a2b0:	bf00      	nop
 800a2b2:	e000      	b.n	800a2b6 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 800a2b4:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 800a2c8:	f7ff fe16 	bl	8009ef8 <LL_RCC_PLL2_GetM>
 800a2cc:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 800a2ce:	f7ff fe05 	bl	8009edc <LL_RCC_PLL2_GetN>
 800a2d2:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 800a2d4:	f7ff fdf0 	bl	8009eb8 <LL_RCC_PLL2FRACN_IsEnabled>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d002      	beq.n	800a2e4 <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 800a2de:	f7ff fe49 	bl	8009f74 <LL_RCC_PLL2_GetFRACN>
 800a2e2:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d035      	beq.n	800a356 <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 800a2ea:	f7ff fda9 	bl	8009e40 <LL_RCC_PLL2P_IsEnabled>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d00c      	beq.n	800a30e <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 800a2f4:	f7ff fe0e 	bl	8009f14 <LL_RCC_PLL2_GetP>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	9300      	str	r3, [sp, #0]
 800a2fc:	69bb      	ldr	r3, [r7, #24]
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	6939      	ldr	r1, [r7, #16]
 800a302:	69f8      	ldr	r0, [r7, #28]
 800a304:	f000 f8cc 	bl	800a4a0 <LL_RCC_CalcPLLClockFreq>
 800a308:	4602      	mov	r2, r0
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800a30e:	f7ff fdab 	bl	8009e68 <LL_RCC_PLL2Q_IsEnabled>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00c      	beq.n	800a332 <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 800a318:	f7ff fe0c 	bl	8009f34 <LL_RCC_PLL2_GetQ>
 800a31c:	4603      	mov	r3, r0
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	6939      	ldr	r1, [r7, #16]
 800a326:	69f8      	ldr	r0, [r7, #28]
 800a328:	f000 f8ba 	bl	800a4a0 <LL_RCC_CalcPLLClockFreq>
 800a32c:	4602      	mov	r2, r0
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 800a332:	f7ff fdad 	bl	8009e90 <LL_RCC_PLL2R_IsEnabled>
 800a336:	4603      	mov	r3, r0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d00c      	beq.n	800a356 <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 800a33c:	f7ff fe0a 	bl	8009f54 <LL_RCC_PLL2_GetR>
 800a340:	4603      	mov	r3, r0
 800a342:	9300      	str	r3, [sp, #0]
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	6939      	ldr	r1, [r7, #16]
 800a34a:	69f8      	ldr	r0, [r7, #28]
 800a34c:	f000 f8a8 	bl	800a4a0 <LL_RCC_CalcPLLClockFreq>
 800a350:	4602      	mov	r2, r0
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	609a      	str	r2, [r3, #8]
    }
  }
}
 800a356:	bf00      	nop
 800a358:	3720      	adds	r7, #32
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	03d09000 	.word	0x03d09000
 800a364:	003d0900 	.word	0x003d0900
 800a368:	016e3600 	.word	0x016e3600

0800a36c <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
=======
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b08a      	sub	sp, #40	@ 0x28
 800a1e4:	af02      	add	r7, sp, #8
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	603b      	str	r3, [r7, #0]
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1f6:	2b20      	cmp	r3, #32
 800a1f8:	d17b      	bne.n	800a2f2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d002      	beq.n	800a206 <HAL_UART_Transmit+0x26>
 800a200:	88fb      	ldrh	r3, [r7, #6]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d101      	bne.n	800a20a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e074      	b.n	800a2f4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2221      	movs	r2, #33	@ 0x21
 800a216:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a21a:	f7f9 f853 	bl	80032c4 <HAL_GetTick>
 800a21e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	88fa      	ldrh	r2, [r7, #6]
 800a224:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	88fa      	ldrh	r2, [r7, #6]
 800a22c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a238:	d108      	bne.n	800a24c <HAL_UART_Transmit+0x6c>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d104      	bne.n	800a24c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a242:	2300      	movs	r3, #0
 800a244:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	61bb      	str	r3, [r7, #24]
 800a24a:	e003      	b.n	800a254 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a250:	2300      	movs	r3, #0
 800a252:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a254:	e030      	b.n	800a2b8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	9300      	str	r3, [sp, #0]
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	2200      	movs	r2, #0
 800a25e:	2180      	movs	r1, #128	@ 0x80
 800a260:	68f8      	ldr	r0, [r7, #12]
 800a262:	f001 fb1b 	bl	800b89c <UART_WaitOnFlagUntilTimeout>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d005      	beq.n	800a278 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2220      	movs	r2, #32
 800a270:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a274:	2303      	movs	r3, #3
 800a276:	e03d      	b.n	800a2f4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d10b      	bne.n	800a296 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	881b      	ldrh	r3, [r3, #0]
 800a282:	461a      	mov	r2, r3
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a28c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	3302      	adds	r3, #2
 800a292:	61bb      	str	r3, [r7, #24]
 800a294:	e007      	b.n	800a2a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a296:	69fb      	ldr	r3, [r7, #28]
 800a298:	781a      	ldrb	r2, [r3, #0]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	3b01      	subs	r3, #1
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d1c8      	bne.n	800a256 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	2140      	movs	r1, #64	@ 0x40
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	f001 fae4 	bl	800b89c <UART_WaitOnFlagUntilTimeout>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d005      	beq.n	800a2e6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2220      	movs	r2, #32
 800a2de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a2e2:	2303      	movs	r3, #3
 800a2e4:	e006      	b.n	800a2f4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2220      	movs	r2, #32
 800a2ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	e000      	b.n	800a2f4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a2f2:	2302      	movs	r3, #2
  }
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3720      	adds	r7, #32
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b08a      	sub	sp, #40	@ 0x28
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	4613      	mov	r3, r2
 800a308:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a310:	2b20      	cmp	r3, #32
 800a312:	d137      	bne.n	800a384 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d002      	beq.n	800a320 <HAL_UART_Receive_IT+0x24>
 800a31a:	88fb      	ldrh	r3, [r7, #6]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d101      	bne.n	800a324 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e030      	b.n	800a386 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2200      	movs	r2, #0
 800a328:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a18      	ldr	r2, [pc, #96]	@ (800a390 <HAL_UART_Receive_IT+0x94>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d01f      	beq.n	800a374 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d018      	beq.n	800a374 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	e853 3f00 	ldrex	r3, [r3]
 800a34e:	613b      	str	r3, [r7, #16]
   return(result);
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a356:	627b      	str	r3, [r7, #36]	@ 0x24
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	461a      	mov	r2, r3
 800a35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a360:	623b      	str	r3, [r7, #32]
 800a362:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a364:	69f9      	ldr	r1, [r7, #28]
 800a366:	6a3a      	ldr	r2, [r7, #32]
 800a368:	e841 2300 	strex	r3, r2, [r1]
 800a36c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d1e6      	bne.n	800a342 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a374:	88fb      	ldrh	r3, [r7, #6]
 800a376:	461a      	mov	r2, r3
 800a378:	68b9      	ldr	r1, [r7, #8]
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f001 fafc 	bl	800b978 <UART_Start_Receive_IT>
 800a380:	4603      	mov	r3, r0
 800a382:	e000      	b.n	800a386 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a384:	2302      	movs	r3, #2
  }
}
 800a386:	4618      	mov	r0, r3
 800a388:	3728      	adds	r7, #40	@ 0x28
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	58000c00 	.word	0x58000c00

0800a394 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
>>>>>>> main
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
<<<<<<< HEAD
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b08a      	sub	sp, #40	@ 0x28
 800a370:	af02      	add	r7, sp, #8
 800a372:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800a374:	2300      	movs	r3, #0
 800a376:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800a378:	2300      	movs	r3, #0
 800a37a:	61bb      	str	r3, [r7, #24]
=======
 800a394:	b580      	push	{r7, lr}
 800a396:	b0ba      	sub	sp, #232	@ 0xe8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	69db      	ldr	r3, [r3, #28]
 800a3a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
>>>>>>> main

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800a37c:	f7ff fc96 	bl	8009cac <LL_RCC_PLL_GetSource>
 800a380:	6178      	str	r0, [r7, #20]

<<<<<<< HEAD
  switch (pllsource)
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	2b02      	cmp	r3, #2
 800a386:	d01f      	beq.n	800a3c8 <LL_RCC_GetPLL3ClockFreq+0x5c>
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	2b02      	cmp	r3, #2
 800a38c:	d824      	bhi.n	800a3d8 <LL_RCC_GetPLL3ClockFreq+0x6c>
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d003      	beq.n	800a39c <LL_RCC_GetPLL3ClockFreq+0x30>
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	2b01      	cmp	r3, #1
 800a398:	d00e      	beq.n	800a3b8 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800a39a:	e01d      	b.n	800a3d8 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800a39c:	f7ff fbc8 	bl	8009b30 <LL_RCC_HSI_IsReady>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d01a      	beq.n	800a3dc <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800a3a6:	f7ff fbd5 	bl	8009b54 <LL_RCC_HSI_GetDivider>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	08db      	lsrs	r3, r3, #3
 800a3ae:	4a39      	ldr	r2, [pc, #228]	@ (800a494 <LL_RCC_GetPLL3ClockFreq+0x128>)
 800a3b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a3b4:	61fb      	str	r3, [r7, #28]
      break;
 800a3b6:	e011      	b.n	800a3dc <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800a3b8:	f7ff fbda 	bl	8009b70 <LL_RCC_CSI_IsReady>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00e      	beq.n	800a3e0 <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800a3c2:	4b35      	ldr	r3, [pc, #212]	@ (800a498 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 800a3c4:	61fb      	str	r3, [r7, #28]
      break;
 800a3c6:	e00b      	b.n	800a3e0 <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800a3c8:	f7ff fb9e 	bl	8009b08 <LL_RCC_HSE_IsReady>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d008      	beq.n	800a3e4 <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800a3d2:	4b32      	ldr	r3, [pc, #200]	@ (800a49c <LL_RCC_GetPLL3ClockFreq+0x130>)
 800a3d4:	61fb      	str	r3, [r7, #28]
      break;
 800a3d6:	e005      	b.n	800a3e4 <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 800a3d8:	bf00      	nop
 800a3da:	e004      	b.n	800a3e6 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800a3dc:	bf00      	nop
 800a3de:	e002      	b.n	800a3e6 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800a3e0:	bf00      	nop
 800a3e2:	e000      	b.n	800a3e6 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800a3e4:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 800a3f8:	f7ff fe3c 	bl	800a074 <LL_RCC_PLL3_GetM>
 800a3fc:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 800a3fe:	f7ff fe2b 	bl	800a058 <LL_RCC_PLL3_GetN>
 800a402:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 800a404:	f7ff fe14 	bl	800a030 <LL_RCC_PLL3FRACN_IsEnabled>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d002      	beq.n	800a414 <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 800a40e:	f7ff fe6f 	bl	800a0f0 <LL_RCC_PLL3_GetFRACN>
 800a412:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d038      	beq.n	800a48c <LL_RCC_GetPLL3ClockFreq+0x120>
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d035      	beq.n	800a48c <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 800a420:	f7ff fdca 	bl	8009fb8 <LL_RCC_PLL3P_IsEnabled>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d00c      	beq.n	800a444 <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 800a42a:	f7ff fe31 	bl	800a090 <LL_RCC_PLL3_GetP>
 800a42e:	4603      	mov	r3, r0
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	6939      	ldr	r1, [r7, #16]
 800a438:	69f8      	ldr	r0, [r7, #28]
 800a43a:	f000 f831 	bl	800a4a0 <LL_RCC_CalcPLLClockFreq>
 800a43e:	4602      	mov	r2, r0
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 800a444:	f7ff fdcc 	bl	8009fe0 <LL_RCC_PLL3Q_IsEnabled>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00c      	beq.n	800a468 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 800a44e:	f7ff fe2f 	bl	800a0b0 <LL_RCC_PLL3_GetQ>
 800a452:	4603      	mov	r3, r0
 800a454:	9300      	str	r3, [sp, #0]
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	6939      	ldr	r1, [r7, #16]
 800a45c:	69f8      	ldr	r0, [r7, #28]
 800a45e:	f000 f81f 	bl	800a4a0 <LL_RCC_CalcPLLClockFreq>
 800a462:	4602      	mov	r2, r0
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 800a468:	f7ff fdce 	bl	800a008 <LL_RCC_PLL3R_IsEnabled>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00c      	beq.n	800a48c <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 800a472:	f7ff fe2d 	bl	800a0d0 <LL_RCC_PLL3_GetR>
 800a476:	4603      	mov	r3, r0
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	6939      	ldr	r1, [r7, #16]
 800a480:	69f8      	ldr	r0, [r7, #28]
 800a482:	f000 f80d 	bl	800a4a0 <LL_RCC_CalcPLLClockFreq>
 800a486:	4602      	mov	r2, r0
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	609a      	str	r2, [r3, #8]
=======
  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a3ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a3be:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a3c2:	4013      	ands	r3, r2
 800a3c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a3c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d11b      	bne.n	800a408 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a3d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3d4:	f003 0320 	and.w	r3, r3, #32
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d015      	beq.n	800a408 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a3dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3e0:	f003 0320 	and.w	r3, r3, #32
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d105      	bne.n	800a3f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a3e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d009      	beq.n	800a408 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f000 8377 	beq.w	800aaec <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	4798      	blx	r3
      }
      return;
 800a406:	e371      	b.n	800aaec <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a408:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f000 8123 	beq.w	800a658 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a412:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a416:	4b8d      	ldr	r3, [pc, #564]	@ (800a64c <HAL_UART_IRQHandler+0x2b8>)
 800a418:	4013      	ands	r3, r2
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d106      	bne.n	800a42c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a41e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a422:	4b8b      	ldr	r3, [pc, #556]	@ (800a650 <HAL_UART_IRQHandler+0x2bc>)
 800a424:	4013      	ands	r3, r2
 800a426:	2b00      	cmp	r3, #0
 800a428:	f000 8116 	beq.w	800a658 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a42c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a430:	f003 0301 	and.w	r3, r3, #1
 800a434:	2b00      	cmp	r3, #0
 800a436:	d011      	beq.n	800a45c <HAL_UART_IRQHandler+0xc8>
 800a438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a43c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00b      	beq.n	800a45c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2201      	movs	r2, #1
 800a44a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a452:	f043 0201 	orr.w	r2, r3, #1
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a45c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a460:	f003 0302 	and.w	r3, r3, #2
 800a464:	2b00      	cmp	r3, #0
 800a466:	d011      	beq.n	800a48c <HAL_UART_IRQHandler+0xf8>
 800a468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a46c:	f003 0301 	and.w	r3, r3, #1
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00b      	beq.n	800a48c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	2202      	movs	r2, #2
 800a47a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a482:	f043 0204 	orr.w	r2, r3, #4
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a48c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a490:	f003 0304 	and.w	r3, r3, #4
 800a494:	2b00      	cmp	r3, #0
 800a496:	d011      	beq.n	800a4bc <HAL_UART_IRQHandler+0x128>
 800a498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a49c:	f003 0301 	and.w	r3, r3, #1
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00b      	beq.n	800a4bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2204      	movs	r2, #4
 800a4aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4b2:	f043 0202 	orr.w	r2, r3, #2
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> main
    }
  }
}
 800a48c:	bf00      	nop
 800a48e:	3720      	adds	r7, #32
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	03d09000 	.word	0x03d09000
 800a498:	003d0900 	.word	0x003d0900
 800a49c:	016e3600 	.word	0x016e3600

<<<<<<< HEAD
0800a4a0 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b087      	sub	sp, #28
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	607a      	str	r2, [r7, #4]
 800a4ac:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	ee07 3a90 	vmov	s15, r3
 800a4b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	ee07 3a90 	vmov	s15, r3
 800a4be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	ee07 3a90 	vmov	s15, r3
 800a4cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	ee07 3a90 	vmov	s15, r3
 800a4d6:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800a4da:	eddf 5a10 	vldr	s11, [pc, #64]	@ 800a51c <LL_RCC_CalcPLLClockFreq+0x7c>
 800a4de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4ea:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 800a4ee:	6a3b      	ldr	r3, [r7, #32]
 800a4f0:	ee07 3a90 	vmov	s15, r3
 800a4f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a4f8:	edd7 6a05 	vldr	s13, [r7, #20]
 800a4fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a500:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 800a504:	edd7 7a05 	vldr	s15, [r7, #20]
 800a508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a50c:	ee17 3a90 	vmov	r3, s15
}
 800a510:	4618      	mov	r0, r3
 800a512:	371c      	adds	r7, #28
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr
 800a51c:	46000000 	.word	0x46000000

0800a520 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800a520:	b590      	push	{r4, r7, lr}
 800a522:	b087      	sub	sp, #28
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800a528:	2300      	movs	r3, #0
 800a52a:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f7ff fbb1 	bl	8009c94 <LL_RCC_GetUSARTClockSource>
 800a532:	4603      	mov	r3, r0
 800a534:	4a62      	ldr	r2, [pc, #392]	@ (800a6c0 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 800a536:	4293      	cmp	r3, r2
 800a538:	f000 80a9 	beq.w	800a68e <LL_RCC_GetUSARTClockFreq+0x16e>
 800a53c:	4a60      	ldr	r2, [pc, #384]	@ (800a6c0 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	f200 80ae 	bhi.w	800a6a0 <LL_RCC_GetUSARTClockFreq+0x180>
 800a544:	4a5f      	ldr	r2, [pc, #380]	@ (800a6c4 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 800a546:	4293      	cmp	r3, r2
 800a548:	f000 80a1 	beq.w	800a68e <LL_RCC_GetUSARTClockFreq+0x16e>
 800a54c:	4a5d      	ldr	r2, [pc, #372]	@ (800a6c4 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	f200 80a6 	bhi.w	800a6a0 <LL_RCC_GetUSARTClockFreq+0x180>
 800a554:	4a5c      	ldr	r2, [pc, #368]	@ (800a6c8 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 800a556:	4293      	cmp	r3, r2
 800a558:	f000 8091 	beq.w	800a67e <LL_RCC_GetUSARTClockFreq+0x15e>
 800a55c:	4a5a      	ldr	r2, [pc, #360]	@ (800a6c8 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	f200 809e 	bhi.w	800a6a0 <LL_RCC_GetUSARTClockFreq+0x180>
 800a564:	4a59      	ldr	r2, [pc, #356]	@ (800a6cc <LL_RCC_GetUSARTClockFreq+0x1ac>)
 800a566:	4293      	cmp	r3, r2
 800a568:	f000 8089 	beq.w	800a67e <LL_RCC_GetUSARTClockFreq+0x15e>
 800a56c:	4a57      	ldr	r2, [pc, #348]	@ (800a6cc <LL_RCC_GetUSARTClockFreq+0x1ac>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	f200 8096 	bhi.w	800a6a0 <LL_RCC_GetUSARTClockFreq+0x180>
 800a574:	4a56      	ldr	r2, [pc, #344]	@ (800a6d0 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d073      	beq.n	800a662 <LL_RCC_GetUSARTClockFreq+0x142>
 800a57a:	4a55      	ldr	r2, [pc, #340]	@ (800a6d0 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	f200 808f 	bhi.w	800a6a0 <LL_RCC_GetUSARTClockFreq+0x180>
 800a582:	4a54      	ldr	r2, [pc, #336]	@ (800a6d4 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d06c      	beq.n	800a662 <LL_RCC_GetUSARTClockFreq+0x142>
 800a588:	4a52      	ldr	r2, [pc, #328]	@ (800a6d4 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	f200 8088 	bhi.w	800a6a0 <LL_RCC_GetUSARTClockFreq+0x180>
 800a590:	4a51      	ldr	r2, [pc, #324]	@ (800a6d8 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d058      	beq.n	800a648 <LL_RCC_GetUSARTClockFreq+0x128>
 800a596:	4a50      	ldr	r2, [pc, #320]	@ (800a6d8 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	f200 8081 	bhi.w	800a6a0 <LL_RCC_GetUSARTClockFreq+0x180>
 800a59e:	4a4f      	ldr	r2, [pc, #316]	@ (800a6dc <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d051      	beq.n	800a648 <LL_RCC_GetUSARTClockFreq+0x128>
 800a5a4:	4a4d      	ldr	r2, [pc, #308]	@ (800a6dc <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d87a      	bhi.n	800a6a0 <LL_RCC_GetUSARTClockFreq+0x180>
 800a5aa:	4a4d      	ldr	r2, [pc, #308]	@ (800a6e0 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d03e      	beq.n	800a62e <LL_RCC_GetUSARTClockFreq+0x10e>
 800a5b0:	4a4b      	ldr	r2, [pc, #300]	@ (800a6e0 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d874      	bhi.n	800a6a0 <LL_RCC_GetUSARTClockFreq+0x180>
 800a5b6:	4a4b      	ldr	r2, [pc, #300]	@ (800a6e4 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d038      	beq.n	800a62e <LL_RCC_GetUSARTClockFreq+0x10e>
 800a5bc:	4a49      	ldr	r2, [pc, #292]	@ (800a6e4 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d86e      	bhi.n	800a6a0 <LL_RCC_GetUSARTClockFreq+0x180>
 800a5c2:	4a49      	ldr	r2, [pc, #292]	@ (800a6e8 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d01a      	beq.n	800a5fe <LL_RCC_GetUSARTClockFreq+0xde>
 800a5c8:	4a48      	ldr	r2, [pc, #288]	@ (800a6ec <LL_RCC_GetUSARTClockFreq+0x1cc>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d168      	bne.n	800a6a0 <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 800a5ce:	f000 f895 	bl	800a6fc <RCC_GetSystemClockFreq>
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	f7ff fb00 	bl	8009bd8 <LL_RCC_GetSysPrescaler>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	0a1b      	lsrs	r3, r3, #8
 800a5dc:	f003 030f 	and.w	r3, r3, #15
 800a5e0:	4a43      	ldr	r2, [pc, #268]	@ (800a6f0 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 800a5e2:	5cd3      	ldrb	r3, [r2, r3]
 800a5e4:	f003 031f 	and.w	r3, r3, #31
 800a5e8:	fa24 f303 	lsr.w	r3, r4, r3
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f000 f8e7 	bl	800a7c0 <RCC_GetHCLKClockFreq>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f000 f911 	bl	800a81c <RCC_GetPCLK2ClockFreq>
 800a5fa:	6178      	str	r0, [r7, #20]
      break;
 800a5fc:	e05b      	b.n	800a6b6 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 800a5fe:	f000 f87d 	bl	800a6fc <RCC_GetSystemClockFreq>
 800a602:	4604      	mov	r4, r0
 800a604:	f7ff fae8 	bl	8009bd8 <LL_RCC_GetSysPrescaler>
 800a608:	4603      	mov	r3, r0
 800a60a:	0a1b      	lsrs	r3, r3, #8
 800a60c:	f003 030f 	and.w	r3, r3, #15
 800a610:	4a37      	ldr	r2, [pc, #220]	@ (800a6f0 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 800a612:	5cd3      	ldrb	r3, [r2, r3]
 800a614:	f003 031f 	and.w	r3, r3, #31
 800a618:	fa24 f303 	lsr.w	r3, r4, r3
 800a61c:	4618      	mov	r0, r3
 800a61e:	f000 f8cf 	bl	800a7c0 <RCC_GetHCLKClockFreq>
 800a622:	4603      	mov	r3, r0
 800a624:	4618      	mov	r0, r3
 800a626:	f000 f8e1 	bl	800a7ec <RCC_GetPCLK1ClockFreq>
 800a62a:	6178      	str	r0, [r7, #20]
      break;
 800a62c:	e043      	b.n	800a6b6 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 800a62e:	f7ff fbf3 	bl	8009e18 <LL_RCC_PLL2_IsReady>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d035      	beq.n	800a6a4 <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800a638:	f107 0308 	add.w	r3, r7, #8
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7ff fdfd 	bl	800a23c <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	617b      	str	r3, [r7, #20]
      }
      break;
 800a646:	e02d      	b.n	800a6a4 <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 800a648:	f7ff fca2 	bl	8009f90 <LL_RCC_PLL3_IsReady>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d02a      	beq.n	800a6a8 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 800a652:	f107 0308 	add.w	r3, r7, #8
 800a656:	4618      	mov	r0, r3
 800a658:	f7ff fe88 	bl	800a36c <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	617b      	str	r3, [r7, #20]
      }
      break;
 800a660:	e022      	b.n	800a6a8 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 800a662:	f7ff fa65 	bl	8009b30 <LL_RCC_HSI_IsReady>
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d01f      	beq.n	800a6ac <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800a66c:	f7ff fa72 	bl	8009b54 <LL_RCC_HSI_GetDivider>
 800a670:	4603      	mov	r3, r0
 800a672:	08db      	lsrs	r3, r3, #3
 800a674:	4a1f      	ldr	r2, [pc, #124]	@ (800a6f4 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 800a676:	fa22 f303 	lsr.w	r3, r2, r3
 800a67a:	617b      	str	r3, [r7, #20]
      }
      break;
 800a67c:	e016      	b.n	800a6ac <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 800a67e:	f7ff fa77 	bl	8009b70 <LL_RCC_CSI_IsReady>
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d013      	beq.n	800a6b0 <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 800a688:	4b1b      	ldr	r3, [pc, #108]	@ (800a6f8 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 800a68a:	617b      	str	r3, [r7, #20]
      }
      break;
 800a68c:	e010      	b.n	800a6b0 <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 800a68e:	f7ff fa83 	bl	8009b98 <LL_RCC_LSE_IsReady>
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00d      	beq.n	800a6b4 <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 800a698:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a69c:	617b      	str	r3, [r7, #20]
      }
      break;
 800a69e:	e009      	b.n	800a6b4 <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 800a6a0:	bf00      	nop
 800a6a2:	e008      	b.n	800a6b6 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800a6a4:	bf00      	nop
 800a6a6:	e006      	b.n	800a6b6 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800a6a8:	bf00      	nop
 800a6aa:	e004      	b.n	800a6b6 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800a6ac:	bf00      	nop
 800a6ae:	e002      	b.n	800a6b6 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800a6b0:	bf00      	nop
 800a6b2:	e000      	b.n	800a6b6 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800a6b4:	bf00      	nop
  }

  return usart_frequency;
 800a6b6:	697b      	ldr	r3, [r7, #20]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	371c      	adds	r7, #28
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd90      	pop	{r4, r7, pc}
 800a6c0:	07050308 	.word	0x07050308
 800a6c4:	07050008 	.word	0x07050008
 800a6c8:	07040308 	.word	0x07040308
 800a6cc:	07040008 	.word	0x07040008
 800a6d0:	07030308 	.word	0x07030308
 800a6d4:	07030008 	.word	0x07030008
 800a6d8:	07020308 	.word	0x07020308
 800a6dc:	07020008 	.word	0x07020008
 800a6e0:	07010308 	.word	0x07010308
 800a6e4:	07010008 	.word	0x07010008
 800a6e8:	07000008 	.word	0x07000008
 800a6ec:	07000308 	.word	0x07000308
 800a6f0:	0800de78 	.word	0x0800de78
 800a6f4:	03d09000 	.word	0x03d09000
 800a6f8:	003d0900 	.word	0x003d0900

0800a6fc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800a702:	2300      	movs	r3, #0
 800a704:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800a706:	f7ff fa59 	bl	8009bbc <LL_RCC_GetSysClkSource>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b18      	cmp	r3, #24
 800a70e:	d84b      	bhi.n	800a7a8 <RCC_GetSystemClockFreq+0xac>
 800a710:	a201      	add	r2, pc, #4	@ (adr r2, 800a718 <RCC_GetSystemClockFreq+0x1c>)
 800a712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a716:	bf00      	nop
 800a718:	0800a77d 	.word	0x0800a77d
 800a71c:	0800a7a9 	.word	0x0800a7a9
 800a720:	0800a7a9 	.word	0x0800a7a9
 800a724:	0800a7a9 	.word	0x0800a7a9
 800a728:	0800a7a9 	.word	0x0800a7a9
 800a72c:	0800a7a9 	.word	0x0800a7a9
 800a730:	0800a7a9 	.word	0x0800a7a9
 800a734:	0800a7a9 	.word	0x0800a7a9
 800a738:	0800a78f 	.word	0x0800a78f
 800a73c:	0800a7a9 	.word	0x0800a7a9
 800a740:	0800a7a9 	.word	0x0800a7a9
 800a744:	0800a7a9 	.word	0x0800a7a9
 800a748:	0800a7a9 	.word	0x0800a7a9
 800a74c:	0800a7a9 	.word	0x0800a7a9
 800a750:	0800a7a9 	.word	0x0800a7a9
 800a754:	0800a7a9 	.word	0x0800a7a9
 800a758:	0800a795 	.word	0x0800a795
 800a75c:	0800a7a9 	.word	0x0800a7a9
 800a760:	0800a7a9 	.word	0x0800a7a9
 800a764:	0800a7a9 	.word	0x0800a7a9
 800a768:	0800a7a9 	.word	0x0800a7a9
 800a76c:	0800a7a9 	.word	0x0800a7a9
 800a770:	0800a7a9 	.word	0x0800a7a9
 800a774:	0800a7a9 	.word	0x0800a7a9
 800a778:	0800a79b 	.word	0x0800a79b
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800a77c:	f7ff f9ea 	bl	8009b54 <LL_RCC_HSI_GetDivider>
 800a780:	4603      	mov	r3, r0
 800a782:	08db      	lsrs	r3, r3, #3
 800a784:	4a0b      	ldr	r2, [pc, #44]	@ (800a7b4 <RCC_GetSystemClockFreq+0xb8>)
 800a786:	fa22 f303 	lsr.w	r3, r2, r3
 800a78a:	60fb      	str	r3, [r7, #12]
      break;
 800a78c:	e00d      	b.n	800a7aa <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 800a78e:	4b0a      	ldr	r3, [pc, #40]	@ (800a7b8 <RCC_GetSystemClockFreq+0xbc>)
 800a790:	60fb      	str	r3, [r7, #12]
      break;
 800a792:	e00a      	b.n	800a7aa <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 800a794:	4b09      	ldr	r3, [pc, #36]	@ (800a7bc <RCC_GetSystemClockFreq+0xc0>)
 800a796:	60fb      	str	r3, [r7, #12]
      break;
 800a798:	e007      	b.n	800a7aa <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 800a79a:	463b      	mov	r3, r7
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7ff fcb5 	bl	800a10c <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	60fb      	str	r3, [r7, #12]
      break;
 800a7a6:	e000      	b.n	800a7aa <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 800a7a8:	bf00      	nop
  }

  return frequency;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3710      	adds	r7, #16
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	03d09000 	.word	0x03d09000
 800a7b8:	003d0900 	.word	0x003d0900
 800a7bc:	016e3600 	.word	0x016e3600

0800a7c0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800a7c8:	f7ff fa14 	bl	8009bf4 <LL_RCC_GetAHBPrescaler>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	f003 030f 	and.w	r3, r3, #15
 800a7d2:	4a05      	ldr	r2, [pc, #20]	@ (800a7e8 <RCC_GetHCLKClockFreq+0x28>)
 800a7d4:	5cd3      	ldrb	r3, [r2, r3]
 800a7d6:	f003 031f 	and.w	r3, r3, #31
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	0800de78 	.word	0x0800de78

0800a7ec <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800a7f4:	f7ff fa0c 	bl	8009c10 <LL_RCC_GetAPB1Prescaler>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	091b      	lsrs	r3, r3, #4
 800a7fc:	f003 0307 	and.w	r3, r3, #7
 800a800:	4a05      	ldr	r2, [pc, #20]	@ (800a818 <RCC_GetPCLK1ClockFreq+0x2c>)
 800a802:	5cd3      	ldrb	r3, [r2, r3]
 800a804:	f003 031f 	and.w	r3, r3, #31
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3708      	adds	r7, #8
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	0800de78 	.word	0x0800de78

0800a81c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800a824:	f7ff fa02 	bl	8009c2c <LL_RCC_GetAPB2Prescaler>
 800a828:	4603      	mov	r3, r0
 800a82a:	0a1b      	lsrs	r3, r3, #8
 800a82c:	f003 0307 	and.w	r3, r3, #7
 800a830:	4a05      	ldr	r2, [pc, #20]	@ (800a848 <RCC_GetPCLK2ClockFreq+0x2c>)
 800a832:	5cd3      	ldrb	r3, [r2, r3]
 800a834:	f003 031f 	and.w	r3, r3, #31
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3708      	adds	r7, #8
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	0800de78 	.word	0x0800de78

0800a84c <LL_USART_IsEnabled>:
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f003 0301 	and.w	r3, r3, #1
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d101      	bne.n	800a864 <LL_USART_IsEnabled+0x18>
 800a860:	2301      	movs	r3, #1
 800a862:	e000      	b.n	800a866 <LL_USART_IsEnabled+0x1a>
 800a864:	2300      	movs	r3, #0
}
 800a866:	4618      	mov	r0, r3
 800a868:	370c      	adds	r7, #12
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr

0800a872 <LL_USART_SetPrescaler>:
{
 800a872:	b480      	push	{r7}
 800a874:	b083      	sub	sp, #12
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
 800a87a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a880:	f023 030f 	bic.w	r3, r3, #15
 800a884:	683a      	ldr	r2, [r7, #0]
 800a886:	b292      	uxth	r2, r2
 800a888:	431a      	orrs	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800a88e:	bf00      	nop
 800a890:	370c      	adds	r7, #12
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr

0800a89a <LL_USART_SetStopBitsLength>:
{
 800a89a:	b480      	push	{r7}
 800a89c:	b083      	sub	sp, #12
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
 800a8a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	431a      	orrs	r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	605a      	str	r2, [r3, #4]
}
 800a8b4:	bf00      	nop
 800a8b6:	370c      	adds	r7, #12
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <LL_USART_SetHWFlowCtrl>:
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	431a      	orrs	r2, r3
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	609a      	str	r2, [r3, #8]
}
 800a8da:	bf00      	nop
 800a8dc:	370c      	adds	r7, #12
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
	...

0800a8e8 <LL_USART_SetBaudRate>:
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b087      	sub	sp, #28
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	607a      	str	r2, [r7, #4]
 800a8f4:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2b0b      	cmp	r3, #11
 800a8fa:	d83c      	bhi.n	800a976 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 800a8fc:	6a3b      	ldr	r3, [r7, #32]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d039      	beq.n	800a976 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a908:	d122      	bne.n	800a950 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	461a      	mov	r2, r3
 800a910:	4b1c      	ldr	r3, [pc, #112]	@ (800a984 <LL_USART_SetBaudRate+0x9c>)
 800a912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a916:	68ba      	ldr	r2, [r7, #8]
 800a918:	fbb2 f3f3 	udiv	r3, r2, r3
 800a91c:	005a      	lsls	r2, r3, #1
 800a91e:	6a3b      	ldr	r3, [r7, #32]
 800a920:	085b      	lsrs	r3, r3, #1
 800a922:	441a      	add	r2, r3
 800a924:	6a3b      	ldr	r3, [r7, #32]
 800a926:	fbb2 f3f3 	udiv	r3, r2, r3
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800a92e:	697a      	ldr	r2, [r7, #20]
 800a930:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800a934:	4013      	ands	r3, r2
 800a936:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	085b      	lsrs	r3, r3, #1
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	f003 0307 	and.w	r3, r3, #7
 800a942:	693a      	ldr	r2, [r7, #16]
 800a944:	4313      	orrs	r3, r2
 800a946:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	693a      	ldr	r2, [r7, #16]
 800a94c:	60da      	str	r2, [r3, #12]
}
 800a94e:	e012      	b.n	800a976 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	b2db      	uxtb	r3, r3
 800a954:	461a      	mov	r2, r3
 800a956:	4b0b      	ldr	r3, [pc, #44]	@ (800a984 <LL_USART_SetBaudRate+0x9c>)
 800a958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a95c:	68ba      	ldr	r2, [r7, #8]
 800a95e:	fbb2 f2f3 	udiv	r2, r2, r3
 800a962:	6a3b      	ldr	r3, [r7, #32]
 800a964:	085b      	lsrs	r3, r3, #1
 800a966:	441a      	add	r2, r3
 800a968:	6a3b      	ldr	r3, [r7, #32]
 800a96a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a96e:	b29b      	uxth	r3, r3
 800a970:	461a      	mov	r2, r3
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	60da      	str	r2, [r3, #12]
}
 800a976:	bf00      	nop
 800a978:	371c      	adds	r7, #28
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	0800de88 	.word	0x0800de88

0800a988 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b086      	sub	sp, #24
 800a98c:	af02      	add	r7, sp, #8
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a992:	2301      	movs	r3, #1
 800a994:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800a996:	2300      	movs	r3, #0
 800a998:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f7ff ff56 	bl	800a84c <LL_USART_IsEnabled>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d17f      	bne.n	800aaa6 <LL_USART_Init+0x11e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	4b41      	ldr	r3, [pc, #260]	@ (800aab0 <LL_USART_Init+0x128>)
 800a9ac:	4013      	ands	r3, r2
 800a9ae:	683a      	ldr	r2, [r7, #0]
 800a9b0:	6891      	ldr	r1, [r2, #8]
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	6912      	ldr	r2, [r2, #16]
 800a9b6:	4311      	orrs	r1, r2
 800a9b8:	683a      	ldr	r2, [r7, #0]
 800a9ba:	6952      	ldr	r2, [r2, #20]
 800a9bc:	4311      	orrs	r1, r2
 800a9be:	683a      	ldr	r2, [r7, #0]
 800a9c0:	69d2      	ldr	r2, [r2, #28]
 800a9c2:	430a      	orrs	r2, r1
 800a9c4:	431a      	orrs	r2, r3
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	68db      	ldr	r3, [r3, #12]
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f7ff ff62 	bl	800a89a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	699b      	ldr	r3, [r3, #24]
 800a9da:	4619      	mov	r1, r3
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f7ff ff6f 	bl	800a8c0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4a33      	ldr	r2, [pc, #204]	@ (800aab4 <LL_USART_Init+0x12c>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d104      	bne.n	800a9f4 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 800a9ea:	4833      	ldr	r0, [pc, #204]	@ (800aab8 <LL_USART_Init+0x130>)
 800a9ec:	f7ff fd98 	bl	800a520 <LL_RCC_GetUSARTClockFreq>
 800a9f0:	60b8      	str	r0, [r7, #8]
 800a9f2:	e03d      	b.n	800aa70 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART2)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a31      	ldr	r2, [pc, #196]	@ (800aabc <LL_USART_Init+0x134>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d104      	bne.n	800aa06 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800a9fc:	4830      	ldr	r0, [pc, #192]	@ (800aac0 <LL_USART_Init+0x138>)
 800a9fe:	f7ff fd8f 	bl	800a520 <LL_RCC_GetUSARTClockFreq>
 800aa02:	60b8      	str	r0, [r7, #8]
 800aa04:	e034      	b.n	800aa70 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART3)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	4a2e      	ldr	r2, [pc, #184]	@ (800aac4 <LL_USART_Init+0x13c>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d104      	bne.n	800aa18 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800aa0e:	482c      	ldr	r0, [pc, #176]	@ (800aac0 <LL_USART_Init+0x138>)
 800aa10:	f7ff fd86 	bl	800a520 <LL_RCC_GetUSARTClockFreq>
 800aa14:	60b8      	str	r0, [r7, #8]
 800aa16:	e02b      	b.n	800aa70 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART4)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	4a2b      	ldr	r2, [pc, #172]	@ (800aac8 <LL_USART_Init+0x140>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d104      	bne.n	800aa2a <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800aa20:	4827      	ldr	r0, [pc, #156]	@ (800aac0 <LL_USART_Init+0x138>)
 800aa22:	f7ff fd7d 	bl	800a520 <LL_RCC_GetUSARTClockFreq>
 800aa26:	60b8      	str	r0, [r7, #8]
 800aa28:	e022      	b.n	800aa70 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART5)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	4a27      	ldr	r2, [pc, #156]	@ (800aacc <LL_USART_Init+0x144>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d104      	bne.n	800aa3c <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800aa32:	4823      	ldr	r0, [pc, #140]	@ (800aac0 <LL_USART_Init+0x138>)
 800aa34:	f7ff fd74 	bl	800a520 <LL_RCC_GetUSARTClockFreq>
 800aa38:	60b8      	str	r0, [r7, #8]
 800aa3a:	e019      	b.n	800aa70 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART6)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	4a24      	ldr	r2, [pc, #144]	@ (800aad0 <LL_USART_Init+0x148>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d104      	bne.n	800aa4e <LL_USART_Init+0xc6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 800aa44:	481c      	ldr	r0, [pc, #112]	@ (800aab8 <LL_USART_Init+0x130>)
 800aa46:	f7ff fd6b 	bl	800a520 <LL_RCC_GetUSARTClockFreq>
 800aa4a:	60b8      	str	r0, [r7, #8]
 800aa4c:	e010      	b.n	800aa70 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART7)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a20      	ldr	r2, [pc, #128]	@ (800aad4 <LL_USART_Init+0x14c>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d104      	bne.n	800aa60 <LL_USART_Init+0xd8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800aa56:	481a      	ldr	r0, [pc, #104]	@ (800aac0 <LL_USART_Init+0x138>)
 800aa58:	f7ff fd62 	bl	800a520 <LL_RCC_GetUSARTClockFreq>
 800aa5c:	60b8      	str	r0, [r7, #8]
 800aa5e:	e007      	b.n	800aa70 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART8)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	4a1d      	ldr	r2, [pc, #116]	@ (800aad8 <LL_USART_Init+0x150>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d103      	bne.n	800aa70 <LL_USART_Init+0xe8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800aa68:	4815      	ldr	r0, [pc, #84]	@ (800aac0 <LL_USART_Init+0x138>)
 800aa6a:	f7ff fd59 	bl	800a520 <LL_RCC_GetUSARTClockFreq>
 800aa6e:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d011      	beq.n	800aa9a <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00d      	beq.n	800aa9a <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 800aa8e:	9300      	str	r3, [sp, #0]
 800aa90:	460b      	mov	r3, r1
 800aa92:	68b9      	ldr	r1, [r7, #8]
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f7ff ff27 	bl	800a8e8 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f7ff fee6 	bl	800a872 <LL_USART_SetPrescaler>
=======
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a4bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4c0:	f003 0308 	and.w	r3, r3, #8
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d017      	beq.n	800a4f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a4c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4cc:	f003 0320 	and.w	r3, r3, #32
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d105      	bne.n	800a4e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a4d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a4d8:	4b5c      	ldr	r3, [pc, #368]	@ (800a64c <HAL_UART_IRQHandler+0x2b8>)
 800a4da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d00b      	beq.n	800a4f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2208      	movs	r2, #8
 800a4e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4ee:	f043 0208 	orr.w	r2, r3, #8
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a4f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a500:	2b00      	cmp	r3, #0
 800a502:	d012      	beq.n	800a52a <HAL_UART_IRQHandler+0x196>
 800a504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a508:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00c      	beq.n	800a52a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a518:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a520:	f043 0220 	orr.w	r2, r3, #32
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a530:	2b00      	cmp	r3, #0
 800a532:	f000 82dd 	beq.w	800aaf0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a53a:	f003 0320 	and.w	r3, r3, #32
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d013      	beq.n	800a56a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a546:	f003 0320 	and.w	r3, r3, #32
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d105      	bne.n	800a55a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a54e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a556:	2b00      	cmp	r3, #0
 800a558:	d007      	beq.n	800a56a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d003      	beq.n	800a56a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a570:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a57e:	2b40      	cmp	r3, #64	@ 0x40
 800a580:	d005      	beq.n	800a58e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a586:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d054      	beq.n	800a638 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f001 fb14 	bl	800bbbc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a59e:	2b40      	cmp	r3, #64	@ 0x40
 800a5a0:	d146      	bne.n	800a630 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	3308      	adds	r3, #8
 800a5a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a5b0:	e853 3f00 	ldrex	r3, [r3]
 800a5b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a5b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a5bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	3308      	adds	r3, #8
 800a5ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a5ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a5d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a5da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a5de:	e841 2300 	strex	r3, r2, [r1]
 800a5e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a5e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1d9      	bne.n	800a5a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d017      	beq.n	800a628 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5fe:	4a15      	ldr	r2, [pc, #84]	@ (800a654 <HAL_UART_IRQHandler+0x2c0>)
 800a600:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a608:	4618      	mov	r0, r3
 800a60a:	f7f9 fb19 	bl	8003c40 <HAL_DMA_Abort_IT>
 800a60e:	4603      	mov	r3, r0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d019      	beq.n	800a648 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a61a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a622:	4610      	mov	r0, r2
 800a624:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a626:	e00f      	b.n	800a648 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 fa6d 	bl	800ab08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a62e:	e00b      	b.n	800a648 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 fa69 	bl	800ab08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a636:	e007      	b.n	800a648 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 fa65 	bl	800ab08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a646:	e253      	b.n	800aaf0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a648:	bf00      	nop
    return;
 800a64a:	e251      	b.n	800aaf0 <HAL_UART_IRQHandler+0x75c>
 800a64c:	10000001 	.word	0x10000001
 800a650:	04000120 	.word	0x04000120
 800a654:	0800bc89 	.word	0x0800bc89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	f040 81e7 	bne.w	800aa30 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a666:	f003 0310 	and.w	r3, r3, #16
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	f000 81e0 	beq.w	800aa30 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a674:	f003 0310 	and.w	r3, r3, #16
 800a678:	2b00      	cmp	r3, #0
 800a67a:	f000 81d9 	beq.w	800aa30 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2210      	movs	r2, #16
 800a684:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a690:	2b40      	cmp	r3, #64	@ 0x40
 800a692:	f040 8151 	bne.w	800a938 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a96      	ldr	r2, [pc, #600]	@ (800a8f8 <HAL_UART_IRQHandler+0x564>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d068      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a93      	ldr	r2, [pc, #588]	@ (800a8fc <HAL_UART_IRQHandler+0x568>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d061      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a91      	ldr	r2, [pc, #580]	@ (800a900 <HAL_UART_IRQHandler+0x56c>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d05a      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a8e      	ldr	r2, [pc, #568]	@ (800a904 <HAL_UART_IRQHandler+0x570>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d053      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a8c      	ldr	r2, [pc, #560]	@ (800a908 <HAL_UART_IRQHandler+0x574>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d04c      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a89      	ldr	r2, [pc, #548]	@ (800a90c <HAL_UART_IRQHandler+0x578>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d045      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a87      	ldr	r2, [pc, #540]	@ (800a910 <HAL_UART_IRQHandler+0x57c>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d03e      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a84      	ldr	r2, [pc, #528]	@ (800a914 <HAL_UART_IRQHandler+0x580>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d037      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a82      	ldr	r2, [pc, #520]	@ (800a918 <HAL_UART_IRQHandler+0x584>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d030      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a7f      	ldr	r2, [pc, #508]	@ (800a91c <HAL_UART_IRQHandler+0x588>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d029      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a7d      	ldr	r2, [pc, #500]	@ (800a920 <HAL_UART_IRQHandler+0x58c>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d022      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a7a      	ldr	r2, [pc, #488]	@ (800a924 <HAL_UART_IRQHandler+0x590>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d01b      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a78      	ldr	r2, [pc, #480]	@ (800a928 <HAL_UART_IRQHandler+0x594>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d014      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a75      	ldr	r2, [pc, #468]	@ (800a92c <HAL_UART_IRQHandler+0x598>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d00d      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a73      	ldr	r2, [pc, #460]	@ (800a930 <HAL_UART_IRQHandler+0x59c>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d006      	beq.n	800a776 <HAL_UART_IRQHandler+0x3e2>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a70      	ldr	r2, [pc, #448]	@ (800a934 <HAL_UART_IRQHandler+0x5a0>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d106      	bne.n	800a784 <HAL_UART_IRQHandler+0x3f0>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	b29b      	uxth	r3, r3
 800a782:	e005      	b.n	800a790 <HAL_UART_IRQHandler+0x3fc>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	b29b      	uxth	r3, r3
 800a790:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a794:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f000 81ab 	beq.w	800aaf4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a7a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	f080 81a3 	bcs.w	800aaf4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a7b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7be:	69db      	ldr	r3, [r3, #28]
 800a7c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7c4:	f000 8087 	beq.w	800a8d6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a7d4:	e853 3f00 	ldrex	r3, [r3]
 800a7d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a7dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a7e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a7f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a7f6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a7fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a802:	e841 2300 	strex	r3, r2, [r1]
 800a806:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a80a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1da      	bne.n	800a7c8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	3308      	adds	r3, #8
 800a818:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a81c:	e853 3f00 	ldrex	r3, [r3]
 800a820:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a822:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a824:	f023 0301 	bic.w	r3, r3, #1
 800a828:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	3308      	adds	r3, #8
 800a832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a836:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a83a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a83c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a83e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a842:	e841 2300 	strex	r3, r2, [r1]
 800a846:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a848:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d1e1      	bne.n	800a812 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	3308      	adds	r3, #8
 800a854:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a856:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a858:	e853 3f00 	ldrex	r3, [r3]
 800a85c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a85e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a860:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	3308      	adds	r3, #8
 800a86e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a872:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a874:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a876:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a878:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a87a:	e841 2300 	strex	r3, r2, [r1]
 800a87e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a880:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1e3      	bne.n	800a84e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2220      	movs	r2, #32
 800a88a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a89a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a89c:	e853 3f00 	ldrex	r3, [r3]
 800a8a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a8a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8a4:	f023 0310 	bic.w	r3, r3, #16
 800a8a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a8b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a8bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a8be:	e841 2300 	strex	r3, r2, [r1]
 800a8c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a8c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d1e4      	bne.n	800a894 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7f8 fe97 	bl	8003604 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2202      	movs	r2, #2
 800a8da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	1ad3      	subs	r3, r2, r3
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 f913 	bl	800ab1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a8f6:	e0fd      	b.n	800aaf4 <HAL_UART_IRQHandler+0x760>
 800a8f8:	40020010 	.word	0x40020010
 800a8fc:	40020028 	.word	0x40020028
 800a900:	40020040 	.word	0x40020040
 800a904:	40020058 	.word	0x40020058
 800a908:	40020070 	.word	0x40020070
 800a90c:	40020088 	.word	0x40020088
 800a910:	400200a0 	.word	0x400200a0
 800a914:	400200b8 	.word	0x400200b8
 800a918:	40020410 	.word	0x40020410
 800a91c:	40020428 	.word	0x40020428
 800a920:	40020440 	.word	0x40020440
 800a924:	40020458 	.word	0x40020458
 800a928:	40020470 	.word	0x40020470
 800a92c:	40020488 	.word	0x40020488
 800a930:	400204a0 	.word	0x400204a0
 800a934:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a944:	b29b      	uxth	r3, r3
 800a946:	1ad3      	subs	r3, r2, r3
 800a948:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a952:	b29b      	uxth	r3, r3
 800a954:	2b00      	cmp	r3, #0
 800a956:	f000 80cf 	beq.w	800aaf8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a95a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f000 80ca 	beq.w	800aaf8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a96c:	e853 3f00 	ldrex	r3, [r3]
 800a970:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a974:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a978:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	461a      	mov	r2, r3
 800a982:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a986:	647b      	str	r3, [r7, #68]	@ 0x44
 800a988:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a98a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a98c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a98e:	e841 2300 	strex	r3, r2, [r1]
 800a992:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a996:	2b00      	cmp	r3, #0
 800a998:	d1e4      	bne.n	800a964 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	3308      	adds	r3, #8
 800a9a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a4:	e853 3f00 	ldrex	r3, [r3]
 800a9a8:	623b      	str	r3, [r7, #32]
   return(result);
 800a9aa:	6a3a      	ldr	r2, [r7, #32]
 800a9ac:	4b55      	ldr	r3, [pc, #340]	@ (800ab04 <HAL_UART_IRQHandler+0x770>)
 800a9ae:	4013      	ands	r3, r2
 800a9b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	3308      	adds	r3, #8
 800a9ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a9be:	633a      	str	r2, [r7, #48]	@ 0x30
 800a9c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9c6:	e841 2300 	strex	r3, r2, [r1]
 800a9ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1e3      	bne.n	800a99a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2220      	movs	r2, #32
 800a9d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	e853 3f00 	ldrex	r3, [r3]
 800a9f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f023 0310 	bic.w	r3, r3, #16
 800a9fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	461a      	mov	r2, r3
 800aa04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aa08:	61fb      	str	r3, [r7, #28]
 800aa0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0c:	69b9      	ldr	r1, [r7, #24]
 800aa0e:	69fa      	ldr	r2, [r7, #28]
 800aa10:	e841 2300 	strex	r3, r2, [r1]
 800aa14:	617b      	str	r3, [r7, #20]
   return(result);
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d1e4      	bne.n	800a9e6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2202      	movs	r2, #2
 800aa20:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aa26:	4619      	mov	r1, r3
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 f877 	bl	800ab1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aa2e:	e063      	b.n	800aaf8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aa30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00e      	beq.n	800aa5a <HAL_UART_IRQHandler+0x6c6>
 800aa3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d008      	beq.n	800aa5a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800aa50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f001 fe76 	bl	800c744 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa58:	e051      	b.n	800aafe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800aa5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d014      	beq.n	800aa90 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800aa66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d105      	bne.n	800aa7e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aa72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d008      	beq.n	800aa90 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d03a      	beq.n	800aafc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	4798      	blx	r3
    }
    return;
 800aa8e:	e035      	b.n	800aafc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aa90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d009      	beq.n	800aab0 <HAL_UART_IRQHandler+0x71c>
 800aa9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aaa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d003      	beq.n	800aab0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f001 f903 	bl	800bcb4 <UART_EndTransmit_IT>
    return;
 800aaae:	e026      	b.n	800aafe <HAL_UART_IRQHandler+0x76a>
>>>>>>> main
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

<<<<<<< HEAD
  return (status);
 800aaa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3710      	adds	r7, #16
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	efff69f3 	.word	0xefff69f3
 800aab4:	40011000 	.word	0x40011000
 800aab8:	07000308 	.word	0x07000308
 800aabc:	40004400 	.word	0x40004400
 800aac0:	07000008 	.word	0x07000008
 800aac4:	40004800 	.word	0x40004800
 800aac8:	40004c00 	.word	0x40004c00
 800aacc:	40005000 	.word	0x40005000
 800aad0:	40011400 	.word	0x40011400
 800aad4:	40007800 	.word	0x40007800
 800aad8:	40007c00 	.word	0x40007c00

0800aadc <__cvt>:
 800aadc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aade:	ed2d 8b02 	vpush	{d8}
 800aae2:	eeb0 8b40 	vmov.f64	d8, d0
 800aae6:	b085      	sub	sp, #20
 800aae8:	4617      	mov	r7, r2
 800aaea:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800aaec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aaee:	ee18 2a90 	vmov	r2, s17
 800aaf2:	f025 0520 	bic.w	r5, r5, #32
 800aaf6:	2a00      	cmp	r2, #0
 800aaf8:	bfb6      	itet	lt
 800aafa:	222d      	movlt	r2, #45	@ 0x2d
 800aafc:	2200      	movge	r2, #0
 800aafe:	eeb1 8b40 	vneglt.f64	d8, d0
 800ab02:	2d46      	cmp	r5, #70	@ 0x46
 800ab04:	460c      	mov	r4, r1
 800ab06:	701a      	strb	r2, [r3, #0]
 800ab08:	d004      	beq.n	800ab14 <__cvt+0x38>
 800ab0a:	2d45      	cmp	r5, #69	@ 0x45
 800ab0c:	d100      	bne.n	800ab10 <__cvt+0x34>
 800ab0e:	3401      	adds	r4, #1
 800ab10:	2102      	movs	r1, #2
 800ab12:	e000      	b.n	800ab16 <__cvt+0x3a>
 800ab14:	2103      	movs	r1, #3
 800ab16:	ab03      	add	r3, sp, #12
 800ab18:	9301      	str	r3, [sp, #4]
 800ab1a:	ab02      	add	r3, sp, #8
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	4622      	mov	r2, r4
 800ab20:	4633      	mov	r3, r6
 800ab22:	eeb0 0b48 	vmov.f64	d0, d8
 800ab26:	f000 fd93 	bl	800b650 <_dtoa_r>
 800ab2a:	2d47      	cmp	r5, #71	@ 0x47
 800ab2c:	d114      	bne.n	800ab58 <__cvt+0x7c>
 800ab2e:	07fb      	lsls	r3, r7, #31
 800ab30:	d50a      	bpl.n	800ab48 <__cvt+0x6c>
 800ab32:	1902      	adds	r2, r0, r4
 800ab34:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ab38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab3c:	bf08      	it	eq
 800ab3e:	9203      	streq	r2, [sp, #12]
 800ab40:	2130      	movs	r1, #48	@ 0x30
 800ab42:	9b03      	ldr	r3, [sp, #12]
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d319      	bcc.n	800ab7c <__cvt+0xa0>
 800ab48:	9b03      	ldr	r3, [sp, #12]
 800ab4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab4c:	1a1b      	subs	r3, r3, r0
 800ab4e:	6013      	str	r3, [r2, #0]
 800ab50:	b005      	add	sp, #20
 800ab52:	ecbd 8b02 	vpop	{d8}
 800ab56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab58:	2d46      	cmp	r5, #70	@ 0x46
 800ab5a:	eb00 0204 	add.w	r2, r0, r4
 800ab5e:	d1e9      	bne.n	800ab34 <__cvt+0x58>
 800ab60:	7803      	ldrb	r3, [r0, #0]
 800ab62:	2b30      	cmp	r3, #48	@ 0x30
 800ab64:	d107      	bne.n	800ab76 <__cvt+0x9a>
 800ab66:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ab6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab6e:	bf1c      	itt	ne
 800ab70:	f1c4 0401 	rsbne	r4, r4, #1
 800ab74:	6034      	strne	r4, [r6, #0]
 800ab76:	6833      	ldr	r3, [r6, #0]
 800ab78:	441a      	add	r2, r3
 800ab7a:	e7db      	b.n	800ab34 <__cvt+0x58>
 800ab7c:	1c5c      	adds	r4, r3, #1
 800ab7e:	9403      	str	r4, [sp, #12]
 800ab80:	7019      	strb	r1, [r3, #0]
 800ab82:	e7de      	b.n	800ab42 <__cvt+0x66>

0800ab84 <__exponent>:
 800ab84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab86:	2900      	cmp	r1, #0
 800ab88:	bfba      	itte	lt
 800ab8a:	4249      	neglt	r1, r1
 800ab8c:	232d      	movlt	r3, #45	@ 0x2d
 800ab8e:	232b      	movge	r3, #43	@ 0x2b
 800ab90:	2909      	cmp	r1, #9
 800ab92:	7002      	strb	r2, [r0, #0]
 800ab94:	7043      	strb	r3, [r0, #1]
 800ab96:	dd29      	ble.n	800abec <__exponent+0x68>
 800ab98:	f10d 0307 	add.w	r3, sp, #7
 800ab9c:	461d      	mov	r5, r3
 800ab9e:	270a      	movs	r7, #10
 800aba0:	461a      	mov	r2, r3
 800aba2:	fbb1 f6f7 	udiv	r6, r1, r7
 800aba6:	fb07 1416 	mls	r4, r7, r6, r1
 800abaa:	3430      	adds	r4, #48	@ 0x30
 800abac:	f802 4c01 	strb.w	r4, [r2, #-1]
 800abb0:	460c      	mov	r4, r1
 800abb2:	2c63      	cmp	r4, #99	@ 0x63
 800abb4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800abb8:	4631      	mov	r1, r6
 800abba:	dcf1      	bgt.n	800aba0 <__exponent+0x1c>
 800abbc:	3130      	adds	r1, #48	@ 0x30
 800abbe:	1e94      	subs	r4, r2, #2
 800abc0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800abc4:	1c41      	adds	r1, r0, #1
 800abc6:	4623      	mov	r3, r4
 800abc8:	42ab      	cmp	r3, r5
 800abca:	d30a      	bcc.n	800abe2 <__exponent+0x5e>
 800abcc:	f10d 0309 	add.w	r3, sp, #9
 800abd0:	1a9b      	subs	r3, r3, r2
 800abd2:	42ac      	cmp	r4, r5
 800abd4:	bf88      	it	hi
 800abd6:	2300      	movhi	r3, #0
 800abd8:	3302      	adds	r3, #2
 800abda:	4403      	add	r3, r0
 800abdc:	1a18      	subs	r0, r3, r0
 800abde:	b003      	add	sp, #12
 800abe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abe2:	f813 6b01 	ldrb.w	r6, [r3], #1
 800abe6:	f801 6f01 	strb.w	r6, [r1, #1]!
 800abea:	e7ed      	b.n	800abc8 <__exponent+0x44>
 800abec:	2330      	movs	r3, #48	@ 0x30
 800abee:	3130      	adds	r1, #48	@ 0x30
 800abf0:	7083      	strb	r3, [r0, #2]
 800abf2:	70c1      	strb	r1, [r0, #3]
 800abf4:	1d03      	adds	r3, r0, #4
 800abf6:	e7f1      	b.n	800abdc <__exponent+0x58>

0800abf8 <_printf_float>:
 800abf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abfc:	b08d      	sub	sp, #52	@ 0x34
 800abfe:	460c      	mov	r4, r1
 800ac00:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ac04:	4616      	mov	r6, r2
 800ac06:	461f      	mov	r7, r3
 800ac08:	4605      	mov	r5, r0
 800ac0a:	f000 fc67 	bl	800b4dc <_localeconv_r>
 800ac0e:	f8d0 b000 	ldr.w	fp, [r0]
 800ac12:	4658      	mov	r0, fp
 800ac14:	f7f5 fbb4 	bl	8000380 <strlen>
 800ac18:	2300      	movs	r3, #0
 800ac1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac1c:	f8d8 3000 	ldr.w	r3, [r8]
 800ac20:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ac24:	6822      	ldr	r2, [r4, #0]
 800ac26:	9005      	str	r0, [sp, #20]
 800ac28:	3307      	adds	r3, #7
 800ac2a:	f023 0307 	bic.w	r3, r3, #7
 800ac2e:	f103 0108 	add.w	r1, r3, #8
 800ac32:	f8c8 1000 	str.w	r1, [r8]
 800ac36:	ed93 0b00 	vldr	d0, [r3]
 800ac3a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800ae98 <_printf_float+0x2a0>
 800ac3e:	eeb0 7bc0 	vabs.f64	d7, d0
 800ac42:	eeb4 7b46 	vcmp.f64	d7, d6
 800ac46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac4a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800ac4e:	dd24      	ble.n	800ac9a <_printf_float+0xa2>
 800ac50:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ac54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac58:	d502      	bpl.n	800ac60 <_printf_float+0x68>
 800ac5a:	232d      	movs	r3, #45	@ 0x2d
 800ac5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac60:	498f      	ldr	r1, [pc, #572]	@ (800aea0 <_printf_float+0x2a8>)
 800ac62:	4b90      	ldr	r3, [pc, #576]	@ (800aea4 <_printf_float+0x2ac>)
 800ac64:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800ac68:	bf94      	ite	ls
 800ac6a:	4688      	movls	r8, r1
 800ac6c:	4698      	movhi	r8, r3
 800ac6e:	f022 0204 	bic.w	r2, r2, #4
 800ac72:	2303      	movs	r3, #3
 800ac74:	6123      	str	r3, [r4, #16]
 800ac76:	6022      	str	r2, [r4, #0]
 800ac78:	f04f 0a00 	mov.w	sl, #0
 800ac7c:	9700      	str	r7, [sp, #0]
 800ac7e:	4633      	mov	r3, r6
 800ac80:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ac82:	4621      	mov	r1, r4
 800ac84:	4628      	mov	r0, r5
 800ac86:	f000 f9d1 	bl	800b02c <_printf_common>
 800ac8a:	3001      	adds	r0, #1
 800ac8c:	f040 8089 	bne.w	800ada2 <_printf_float+0x1aa>
 800ac90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac94:	b00d      	add	sp, #52	@ 0x34
 800ac96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac9a:	eeb4 0b40 	vcmp.f64	d0, d0
 800ac9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aca2:	d709      	bvc.n	800acb8 <_printf_float+0xc0>
 800aca4:	ee10 3a90 	vmov	r3, s1
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	bfbc      	itt	lt
 800acac:	232d      	movlt	r3, #45	@ 0x2d
 800acae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800acb2:	497d      	ldr	r1, [pc, #500]	@ (800aea8 <_printf_float+0x2b0>)
 800acb4:	4b7d      	ldr	r3, [pc, #500]	@ (800aeac <_printf_float+0x2b4>)
 800acb6:	e7d5      	b.n	800ac64 <_printf_float+0x6c>
 800acb8:	6863      	ldr	r3, [r4, #4]
 800acba:	1c59      	adds	r1, r3, #1
 800acbc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800acc0:	d139      	bne.n	800ad36 <_printf_float+0x13e>
 800acc2:	2306      	movs	r3, #6
 800acc4:	6063      	str	r3, [r4, #4]
 800acc6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800acca:	2300      	movs	r3, #0
 800accc:	6022      	str	r2, [r4, #0]
 800acce:	9303      	str	r3, [sp, #12]
 800acd0:	ab0a      	add	r3, sp, #40	@ 0x28
 800acd2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800acd6:	ab09      	add	r3, sp, #36	@ 0x24
 800acd8:	9300      	str	r3, [sp, #0]
 800acda:	6861      	ldr	r1, [r4, #4]
 800acdc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ace0:	4628      	mov	r0, r5
 800ace2:	f7ff fefb 	bl	800aadc <__cvt>
 800ace6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800acea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800acec:	4680      	mov	r8, r0
 800acee:	d129      	bne.n	800ad44 <_printf_float+0x14c>
 800acf0:	1cc8      	adds	r0, r1, #3
 800acf2:	db02      	blt.n	800acfa <_printf_float+0x102>
 800acf4:	6863      	ldr	r3, [r4, #4]
 800acf6:	4299      	cmp	r1, r3
 800acf8:	dd41      	ble.n	800ad7e <_printf_float+0x186>
 800acfa:	f1a9 0902 	sub.w	r9, r9, #2
 800acfe:	fa5f f989 	uxtb.w	r9, r9
 800ad02:	3901      	subs	r1, #1
 800ad04:	464a      	mov	r2, r9
 800ad06:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ad0a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ad0c:	f7ff ff3a 	bl	800ab84 <__exponent>
 800ad10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad12:	1813      	adds	r3, r2, r0
 800ad14:	2a01      	cmp	r2, #1
 800ad16:	4682      	mov	sl, r0
 800ad18:	6123      	str	r3, [r4, #16]
 800ad1a:	dc02      	bgt.n	800ad22 <_printf_float+0x12a>
 800ad1c:	6822      	ldr	r2, [r4, #0]
 800ad1e:	07d2      	lsls	r2, r2, #31
 800ad20:	d501      	bpl.n	800ad26 <_printf_float+0x12e>
 800ad22:	3301      	adds	r3, #1
 800ad24:	6123      	str	r3, [r4, #16]
 800ad26:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d0a6      	beq.n	800ac7c <_printf_float+0x84>
 800ad2e:	232d      	movs	r3, #45	@ 0x2d
 800ad30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad34:	e7a2      	b.n	800ac7c <_printf_float+0x84>
 800ad36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ad3a:	d1c4      	bne.n	800acc6 <_printf_float+0xce>
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d1c2      	bne.n	800acc6 <_printf_float+0xce>
 800ad40:	2301      	movs	r3, #1
 800ad42:	e7bf      	b.n	800acc4 <_printf_float+0xcc>
 800ad44:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800ad48:	d9db      	bls.n	800ad02 <_printf_float+0x10a>
 800ad4a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800ad4e:	d118      	bne.n	800ad82 <_printf_float+0x18a>
 800ad50:	2900      	cmp	r1, #0
 800ad52:	6863      	ldr	r3, [r4, #4]
 800ad54:	dd0b      	ble.n	800ad6e <_printf_float+0x176>
 800ad56:	6121      	str	r1, [r4, #16]
 800ad58:	b913      	cbnz	r3, 800ad60 <_printf_float+0x168>
 800ad5a:	6822      	ldr	r2, [r4, #0]
 800ad5c:	07d0      	lsls	r0, r2, #31
 800ad5e:	d502      	bpl.n	800ad66 <_printf_float+0x16e>
 800ad60:	3301      	adds	r3, #1
 800ad62:	440b      	add	r3, r1
 800ad64:	6123      	str	r3, [r4, #16]
 800ad66:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ad68:	f04f 0a00 	mov.w	sl, #0
 800ad6c:	e7db      	b.n	800ad26 <_printf_float+0x12e>
 800ad6e:	b913      	cbnz	r3, 800ad76 <_printf_float+0x17e>
 800ad70:	6822      	ldr	r2, [r4, #0]
 800ad72:	07d2      	lsls	r2, r2, #31
 800ad74:	d501      	bpl.n	800ad7a <_printf_float+0x182>
 800ad76:	3302      	adds	r3, #2
 800ad78:	e7f4      	b.n	800ad64 <_printf_float+0x16c>
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	e7f2      	b.n	800ad64 <_printf_float+0x16c>
 800ad7e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800ad82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad84:	4299      	cmp	r1, r3
 800ad86:	db05      	blt.n	800ad94 <_printf_float+0x19c>
 800ad88:	6823      	ldr	r3, [r4, #0]
 800ad8a:	6121      	str	r1, [r4, #16]
 800ad8c:	07d8      	lsls	r0, r3, #31
 800ad8e:	d5ea      	bpl.n	800ad66 <_printf_float+0x16e>
 800ad90:	1c4b      	adds	r3, r1, #1
 800ad92:	e7e7      	b.n	800ad64 <_printf_float+0x16c>
 800ad94:	2900      	cmp	r1, #0
 800ad96:	bfd4      	ite	le
 800ad98:	f1c1 0202 	rsble	r2, r1, #2
 800ad9c:	2201      	movgt	r2, #1
 800ad9e:	4413      	add	r3, r2
 800ada0:	e7e0      	b.n	800ad64 <_printf_float+0x16c>
 800ada2:	6823      	ldr	r3, [r4, #0]
 800ada4:	055a      	lsls	r2, r3, #21
 800ada6:	d407      	bmi.n	800adb8 <_printf_float+0x1c0>
 800ada8:	6923      	ldr	r3, [r4, #16]
 800adaa:	4642      	mov	r2, r8
 800adac:	4631      	mov	r1, r6
 800adae:	4628      	mov	r0, r5
 800adb0:	47b8      	blx	r7
 800adb2:	3001      	adds	r0, #1
 800adb4:	d12a      	bne.n	800ae0c <_printf_float+0x214>
 800adb6:	e76b      	b.n	800ac90 <_printf_float+0x98>
 800adb8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800adbc:	f240 80e0 	bls.w	800af80 <_printf_float+0x388>
 800adc0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800adc4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800adc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adcc:	d133      	bne.n	800ae36 <_printf_float+0x23e>
 800adce:	4a38      	ldr	r2, [pc, #224]	@ (800aeb0 <_printf_float+0x2b8>)
 800add0:	2301      	movs	r3, #1
 800add2:	4631      	mov	r1, r6
 800add4:	4628      	mov	r0, r5
 800add6:	47b8      	blx	r7
 800add8:	3001      	adds	r0, #1
 800adda:	f43f af59 	beq.w	800ac90 <_printf_float+0x98>
 800adde:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ade2:	4543      	cmp	r3, r8
 800ade4:	db02      	blt.n	800adec <_printf_float+0x1f4>
 800ade6:	6823      	ldr	r3, [r4, #0]
 800ade8:	07d8      	lsls	r0, r3, #31
 800adea:	d50f      	bpl.n	800ae0c <_printf_float+0x214>
 800adec:	9b05      	ldr	r3, [sp, #20]
 800adee:	465a      	mov	r2, fp
 800adf0:	4631      	mov	r1, r6
 800adf2:	4628      	mov	r0, r5
 800adf4:	47b8      	blx	r7
 800adf6:	3001      	adds	r0, #1
 800adf8:	f43f af4a 	beq.w	800ac90 <_printf_float+0x98>
 800adfc:	f04f 0900 	mov.w	r9, #0
 800ae00:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800ae04:	f104 0a1a 	add.w	sl, r4, #26
 800ae08:	45c8      	cmp	r8, r9
 800ae0a:	dc09      	bgt.n	800ae20 <_printf_float+0x228>
 800ae0c:	6823      	ldr	r3, [r4, #0]
 800ae0e:	079b      	lsls	r3, r3, #30
 800ae10:	f100 8107 	bmi.w	800b022 <_printf_float+0x42a>
 800ae14:	68e0      	ldr	r0, [r4, #12]
 800ae16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae18:	4298      	cmp	r0, r3
 800ae1a:	bfb8      	it	lt
 800ae1c:	4618      	movlt	r0, r3
 800ae1e:	e739      	b.n	800ac94 <_printf_float+0x9c>
 800ae20:	2301      	movs	r3, #1
 800ae22:	4652      	mov	r2, sl
 800ae24:	4631      	mov	r1, r6
 800ae26:	4628      	mov	r0, r5
 800ae28:	47b8      	blx	r7
 800ae2a:	3001      	adds	r0, #1
 800ae2c:	f43f af30 	beq.w	800ac90 <_printf_float+0x98>
 800ae30:	f109 0901 	add.w	r9, r9, #1
 800ae34:	e7e8      	b.n	800ae08 <_printf_float+0x210>
 800ae36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	dc3b      	bgt.n	800aeb4 <_printf_float+0x2bc>
 800ae3c:	4a1c      	ldr	r2, [pc, #112]	@ (800aeb0 <_printf_float+0x2b8>)
 800ae3e:	2301      	movs	r3, #1
 800ae40:	4631      	mov	r1, r6
 800ae42:	4628      	mov	r0, r5
 800ae44:	47b8      	blx	r7
 800ae46:	3001      	adds	r0, #1
 800ae48:	f43f af22 	beq.w	800ac90 <_printf_float+0x98>
 800ae4c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ae50:	ea59 0303 	orrs.w	r3, r9, r3
 800ae54:	d102      	bne.n	800ae5c <_printf_float+0x264>
 800ae56:	6823      	ldr	r3, [r4, #0]
 800ae58:	07d9      	lsls	r1, r3, #31
 800ae5a:	d5d7      	bpl.n	800ae0c <_printf_float+0x214>
 800ae5c:	9b05      	ldr	r3, [sp, #20]
 800ae5e:	465a      	mov	r2, fp
 800ae60:	4631      	mov	r1, r6
 800ae62:	4628      	mov	r0, r5
 800ae64:	47b8      	blx	r7
 800ae66:	3001      	adds	r0, #1
 800ae68:	f43f af12 	beq.w	800ac90 <_printf_float+0x98>
 800ae6c:	f04f 0a00 	mov.w	sl, #0
 800ae70:	f104 0b1a 	add.w	fp, r4, #26
 800ae74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae76:	425b      	negs	r3, r3
 800ae78:	4553      	cmp	r3, sl
 800ae7a:	dc01      	bgt.n	800ae80 <_printf_float+0x288>
 800ae7c:	464b      	mov	r3, r9
 800ae7e:	e794      	b.n	800adaa <_printf_float+0x1b2>
 800ae80:	2301      	movs	r3, #1
 800ae82:	465a      	mov	r2, fp
 800ae84:	4631      	mov	r1, r6
 800ae86:	4628      	mov	r0, r5
 800ae88:	47b8      	blx	r7
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	f43f af00 	beq.w	800ac90 <_printf_float+0x98>
 800ae90:	f10a 0a01 	add.w	sl, sl, #1
 800ae94:	e7ee      	b.n	800ae74 <_printf_float+0x27c>
 800ae96:	bf00      	nop
 800ae98:	ffffffff 	.word	0xffffffff
 800ae9c:	7fefffff 	.word	0x7fefffff
 800aea0:	0800deb8 	.word	0x0800deb8
 800aea4:	0800debc 	.word	0x0800debc
 800aea8:	0800dec0 	.word	0x0800dec0
 800aeac:	0800dec4 	.word	0x0800dec4
 800aeb0:	0800dec8 	.word	0x0800dec8
 800aeb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aeb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aeba:	4553      	cmp	r3, sl
 800aebc:	bfa8      	it	ge
 800aebe:	4653      	movge	r3, sl
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	4699      	mov	r9, r3
 800aec4:	dc37      	bgt.n	800af36 <_printf_float+0x33e>
 800aec6:	2300      	movs	r3, #0
 800aec8:	9307      	str	r3, [sp, #28]
 800aeca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aece:	f104 021a 	add.w	r2, r4, #26
 800aed2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aed4:	9907      	ldr	r1, [sp, #28]
 800aed6:	9306      	str	r3, [sp, #24]
 800aed8:	eba3 0309 	sub.w	r3, r3, r9
 800aedc:	428b      	cmp	r3, r1
 800aede:	dc31      	bgt.n	800af44 <_printf_float+0x34c>
 800aee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aee2:	459a      	cmp	sl, r3
 800aee4:	dc3b      	bgt.n	800af5e <_printf_float+0x366>
 800aee6:	6823      	ldr	r3, [r4, #0]
 800aee8:	07da      	lsls	r2, r3, #31
 800aeea:	d438      	bmi.n	800af5e <_printf_float+0x366>
 800aeec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeee:	ebaa 0903 	sub.w	r9, sl, r3
 800aef2:	9b06      	ldr	r3, [sp, #24]
 800aef4:	ebaa 0303 	sub.w	r3, sl, r3
 800aef8:	4599      	cmp	r9, r3
 800aefa:	bfa8      	it	ge
 800aefc:	4699      	movge	r9, r3
 800aefe:	f1b9 0f00 	cmp.w	r9, #0
 800af02:	dc34      	bgt.n	800af6e <_printf_float+0x376>
 800af04:	f04f 0800 	mov.w	r8, #0
 800af08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af0c:	f104 0b1a 	add.w	fp, r4, #26
 800af10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af12:	ebaa 0303 	sub.w	r3, sl, r3
 800af16:	eba3 0309 	sub.w	r3, r3, r9
 800af1a:	4543      	cmp	r3, r8
 800af1c:	f77f af76 	ble.w	800ae0c <_printf_float+0x214>
 800af20:	2301      	movs	r3, #1
 800af22:	465a      	mov	r2, fp
 800af24:	4631      	mov	r1, r6
 800af26:	4628      	mov	r0, r5
 800af28:	47b8      	blx	r7
 800af2a:	3001      	adds	r0, #1
 800af2c:	f43f aeb0 	beq.w	800ac90 <_printf_float+0x98>
 800af30:	f108 0801 	add.w	r8, r8, #1
 800af34:	e7ec      	b.n	800af10 <_printf_float+0x318>
 800af36:	4642      	mov	r2, r8
 800af38:	4631      	mov	r1, r6
 800af3a:	4628      	mov	r0, r5
 800af3c:	47b8      	blx	r7
 800af3e:	3001      	adds	r0, #1
 800af40:	d1c1      	bne.n	800aec6 <_printf_float+0x2ce>
 800af42:	e6a5      	b.n	800ac90 <_printf_float+0x98>
 800af44:	2301      	movs	r3, #1
 800af46:	4631      	mov	r1, r6
 800af48:	4628      	mov	r0, r5
 800af4a:	9206      	str	r2, [sp, #24]
 800af4c:	47b8      	blx	r7
 800af4e:	3001      	adds	r0, #1
 800af50:	f43f ae9e 	beq.w	800ac90 <_printf_float+0x98>
 800af54:	9b07      	ldr	r3, [sp, #28]
 800af56:	9a06      	ldr	r2, [sp, #24]
 800af58:	3301      	adds	r3, #1
 800af5a:	9307      	str	r3, [sp, #28]
 800af5c:	e7b9      	b.n	800aed2 <_printf_float+0x2da>
 800af5e:	9b05      	ldr	r3, [sp, #20]
 800af60:	465a      	mov	r2, fp
 800af62:	4631      	mov	r1, r6
 800af64:	4628      	mov	r0, r5
 800af66:	47b8      	blx	r7
 800af68:	3001      	adds	r0, #1
 800af6a:	d1bf      	bne.n	800aeec <_printf_float+0x2f4>
 800af6c:	e690      	b.n	800ac90 <_printf_float+0x98>
 800af6e:	9a06      	ldr	r2, [sp, #24]
 800af70:	464b      	mov	r3, r9
 800af72:	4442      	add	r2, r8
 800af74:	4631      	mov	r1, r6
 800af76:	4628      	mov	r0, r5
 800af78:	47b8      	blx	r7
 800af7a:	3001      	adds	r0, #1
 800af7c:	d1c2      	bne.n	800af04 <_printf_float+0x30c>
 800af7e:	e687      	b.n	800ac90 <_printf_float+0x98>
 800af80:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800af84:	f1b9 0f01 	cmp.w	r9, #1
 800af88:	dc01      	bgt.n	800af8e <_printf_float+0x396>
 800af8a:	07db      	lsls	r3, r3, #31
 800af8c:	d536      	bpl.n	800affc <_printf_float+0x404>
 800af8e:	2301      	movs	r3, #1
 800af90:	4642      	mov	r2, r8
 800af92:	4631      	mov	r1, r6
 800af94:	4628      	mov	r0, r5
 800af96:	47b8      	blx	r7
 800af98:	3001      	adds	r0, #1
 800af9a:	f43f ae79 	beq.w	800ac90 <_printf_float+0x98>
 800af9e:	9b05      	ldr	r3, [sp, #20]
 800afa0:	465a      	mov	r2, fp
 800afa2:	4631      	mov	r1, r6
 800afa4:	4628      	mov	r0, r5
 800afa6:	47b8      	blx	r7
 800afa8:	3001      	adds	r0, #1
 800afaa:	f43f ae71 	beq.w	800ac90 <_printf_float+0x98>
 800afae:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800afb2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800afb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afba:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800afbe:	d018      	beq.n	800aff2 <_printf_float+0x3fa>
 800afc0:	464b      	mov	r3, r9
 800afc2:	f108 0201 	add.w	r2, r8, #1
 800afc6:	4631      	mov	r1, r6
 800afc8:	4628      	mov	r0, r5
 800afca:	47b8      	blx	r7
 800afcc:	3001      	adds	r0, #1
 800afce:	d10c      	bne.n	800afea <_printf_float+0x3f2>
 800afd0:	e65e      	b.n	800ac90 <_printf_float+0x98>
 800afd2:	2301      	movs	r3, #1
 800afd4:	465a      	mov	r2, fp
 800afd6:	4631      	mov	r1, r6
 800afd8:	4628      	mov	r0, r5
 800afda:	47b8      	blx	r7
 800afdc:	3001      	adds	r0, #1
 800afde:	f43f ae57 	beq.w	800ac90 <_printf_float+0x98>
 800afe2:	f108 0801 	add.w	r8, r8, #1
 800afe6:	45c8      	cmp	r8, r9
 800afe8:	dbf3      	blt.n	800afd2 <_printf_float+0x3da>
 800afea:	4653      	mov	r3, sl
 800afec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aff0:	e6dc      	b.n	800adac <_printf_float+0x1b4>
 800aff2:	f04f 0800 	mov.w	r8, #0
 800aff6:	f104 0b1a 	add.w	fp, r4, #26
 800affa:	e7f4      	b.n	800afe6 <_printf_float+0x3ee>
 800affc:	2301      	movs	r3, #1
 800affe:	4642      	mov	r2, r8
 800b000:	e7e1      	b.n	800afc6 <_printf_float+0x3ce>
 800b002:	2301      	movs	r3, #1
 800b004:	464a      	mov	r2, r9
 800b006:	4631      	mov	r1, r6
 800b008:	4628      	mov	r0, r5
 800b00a:	47b8      	blx	r7
 800b00c:	3001      	adds	r0, #1
 800b00e:	f43f ae3f 	beq.w	800ac90 <_printf_float+0x98>
 800b012:	f108 0801 	add.w	r8, r8, #1
 800b016:	68e3      	ldr	r3, [r4, #12]
 800b018:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b01a:	1a5b      	subs	r3, r3, r1
 800b01c:	4543      	cmp	r3, r8
 800b01e:	dcf0      	bgt.n	800b002 <_printf_float+0x40a>
 800b020:	e6f8      	b.n	800ae14 <_printf_float+0x21c>
 800b022:	f04f 0800 	mov.w	r8, #0
 800b026:	f104 0919 	add.w	r9, r4, #25
 800b02a:	e7f4      	b.n	800b016 <_printf_float+0x41e>

0800b02c <_printf_common>:
 800b02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b030:	4616      	mov	r6, r2
 800b032:	4698      	mov	r8, r3
 800b034:	688a      	ldr	r2, [r1, #8]
 800b036:	690b      	ldr	r3, [r1, #16]
 800b038:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b03c:	4293      	cmp	r3, r2
 800b03e:	bfb8      	it	lt
 800b040:	4613      	movlt	r3, r2
 800b042:	6033      	str	r3, [r6, #0]
 800b044:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b048:	4607      	mov	r7, r0
 800b04a:	460c      	mov	r4, r1
 800b04c:	b10a      	cbz	r2, 800b052 <_printf_common+0x26>
 800b04e:	3301      	adds	r3, #1
 800b050:	6033      	str	r3, [r6, #0]
 800b052:	6823      	ldr	r3, [r4, #0]
 800b054:	0699      	lsls	r1, r3, #26
 800b056:	bf42      	ittt	mi
 800b058:	6833      	ldrmi	r3, [r6, #0]
 800b05a:	3302      	addmi	r3, #2
 800b05c:	6033      	strmi	r3, [r6, #0]
 800b05e:	6825      	ldr	r5, [r4, #0]
 800b060:	f015 0506 	ands.w	r5, r5, #6
 800b064:	d106      	bne.n	800b074 <_printf_common+0x48>
 800b066:	f104 0a19 	add.w	sl, r4, #25
 800b06a:	68e3      	ldr	r3, [r4, #12]
 800b06c:	6832      	ldr	r2, [r6, #0]
 800b06e:	1a9b      	subs	r3, r3, r2
 800b070:	42ab      	cmp	r3, r5
 800b072:	dc26      	bgt.n	800b0c2 <_printf_common+0x96>
 800b074:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b078:	6822      	ldr	r2, [r4, #0]
 800b07a:	3b00      	subs	r3, #0
 800b07c:	bf18      	it	ne
 800b07e:	2301      	movne	r3, #1
 800b080:	0692      	lsls	r2, r2, #26
 800b082:	d42b      	bmi.n	800b0dc <_printf_common+0xb0>
 800b084:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b088:	4641      	mov	r1, r8
 800b08a:	4638      	mov	r0, r7
 800b08c:	47c8      	blx	r9
 800b08e:	3001      	adds	r0, #1
 800b090:	d01e      	beq.n	800b0d0 <_printf_common+0xa4>
 800b092:	6823      	ldr	r3, [r4, #0]
 800b094:	6922      	ldr	r2, [r4, #16]
 800b096:	f003 0306 	and.w	r3, r3, #6
 800b09a:	2b04      	cmp	r3, #4
 800b09c:	bf02      	ittt	eq
 800b09e:	68e5      	ldreq	r5, [r4, #12]
 800b0a0:	6833      	ldreq	r3, [r6, #0]
 800b0a2:	1aed      	subeq	r5, r5, r3
 800b0a4:	68a3      	ldr	r3, [r4, #8]
 800b0a6:	bf0c      	ite	eq
 800b0a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0ac:	2500      	movne	r5, #0
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	bfc4      	itt	gt
 800b0b2:	1a9b      	subgt	r3, r3, r2
 800b0b4:	18ed      	addgt	r5, r5, r3
 800b0b6:	2600      	movs	r6, #0
 800b0b8:	341a      	adds	r4, #26
 800b0ba:	42b5      	cmp	r5, r6
 800b0bc:	d11a      	bne.n	800b0f4 <_printf_common+0xc8>
 800b0be:	2000      	movs	r0, #0
 800b0c0:	e008      	b.n	800b0d4 <_printf_common+0xa8>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	4652      	mov	r2, sl
 800b0c6:	4641      	mov	r1, r8
 800b0c8:	4638      	mov	r0, r7
 800b0ca:	47c8      	blx	r9
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	d103      	bne.n	800b0d8 <_printf_common+0xac>
 800b0d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0d8:	3501      	adds	r5, #1
 800b0da:	e7c6      	b.n	800b06a <_printf_common+0x3e>
 800b0dc:	18e1      	adds	r1, r4, r3
 800b0de:	1c5a      	adds	r2, r3, #1
 800b0e0:	2030      	movs	r0, #48	@ 0x30
 800b0e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b0e6:	4422      	add	r2, r4
 800b0e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b0ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b0f0:	3302      	adds	r3, #2
 800b0f2:	e7c7      	b.n	800b084 <_printf_common+0x58>
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	4622      	mov	r2, r4
 800b0f8:	4641      	mov	r1, r8
 800b0fa:	4638      	mov	r0, r7
 800b0fc:	47c8      	blx	r9
 800b0fe:	3001      	adds	r0, #1
 800b100:	d0e6      	beq.n	800b0d0 <_printf_common+0xa4>
 800b102:	3601      	adds	r6, #1
 800b104:	e7d9      	b.n	800b0ba <_printf_common+0x8e>
	...

0800b108 <_printf_i>:
 800b108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b10c:	7e0f      	ldrb	r7, [r1, #24]
 800b10e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b110:	2f78      	cmp	r7, #120	@ 0x78
 800b112:	4691      	mov	r9, r2
 800b114:	4680      	mov	r8, r0
 800b116:	460c      	mov	r4, r1
 800b118:	469a      	mov	sl, r3
 800b11a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b11e:	d807      	bhi.n	800b130 <_printf_i+0x28>
 800b120:	2f62      	cmp	r7, #98	@ 0x62
 800b122:	d80a      	bhi.n	800b13a <_printf_i+0x32>
 800b124:	2f00      	cmp	r7, #0
 800b126:	f000 80d2 	beq.w	800b2ce <_printf_i+0x1c6>
 800b12a:	2f58      	cmp	r7, #88	@ 0x58
 800b12c:	f000 80b9 	beq.w	800b2a2 <_printf_i+0x19a>
 800b130:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b134:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b138:	e03a      	b.n	800b1b0 <_printf_i+0xa8>
 800b13a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b13e:	2b15      	cmp	r3, #21
 800b140:	d8f6      	bhi.n	800b130 <_printf_i+0x28>
 800b142:	a101      	add	r1, pc, #4	@ (adr r1, 800b148 <_printf_i+0x40>)
 800b144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b148:	0800b1a1 	.word	0x0800b1a1
 800b14c:	0800b1b5 	.word	0x0800b1b5
 800b150:	0800b131 	.word	0x0800b131
 800b154:	0800b131 	.word	0x0800b131
 800b158:	0800b131 	.word	0x0800b131
 800b15c:	0800b131 	.word	0x0800b131
 800b160:	0800b1b5 	.word	0x0800b1b5
 800b164:	0800b131 	.word	0x0800b131
 800b168:	0800b131 	.word	0x0800b131
 800b16c:	0800b131 	.word	0x0800b131
 800b170:	0800b131 	.word	0x0800b131
 800b174:	0800b2b5 	.word	0x0800b2b5
 800b178:	0800b1df 	.word	0x0800b1df
 800b17c:	0800b26f 	.word	0x0800b26f
 800b180:	0800b131 	.word	0x0800b131
 800b184:	0800b131 	.word	0x0800b131
 800b188:	0800b2d7 	.word	0x0800b2d7
 800b18c:	0800b131 	.word	0x0800b131
 800b190:	0800b1df 	.word	0x0800b1df
 800b194:	0800b131 	.word	0x0800b131
 800b198:	0800b131 	.word	0x0800b131
 800b19c:	0800b277 	.word	0x0800b277
 800b1a0:	6833      	ldr	r3, [r6, #0]
 800b1a2:	1d1a      	adds	r2, r3, #4
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	6032      	str	r2, [r6, #0]
 800b1a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e09d      	b.n	800b2f0 <_printf_i+0x1e8>
 800b1b4:	6833      	ldr	r3, [r6, #0]
 800b1b6:	6820      	ldr	r0, [r4, #0]
 800b1b8:	1d19      	adds	r1, r3, #4
 800b1ba:	6031      	str	r1, [r6, #0]
 800b1bc:	0606      	lsls	r6, r0, #24
 800b1be:	d501      	bpl.n	800b1c4 <_printf_i+0xbc>
 800b1c0:	681d      	ldr	r5, [r3, #0]
 800b1c2:	e003      	b.n	800b1cc <_printf_i+0xc4>
 800b1c4:	0645      	lsls	r5, r0, #25
 800b1c6:	d5fb      	bpl.n	800b1c0 <_printf_i+0xb8>
 800b1c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b1cc:	2d00      	cmp	r5, #0
 800b1ce:	da03      	bge.n	800b1d8 <_printf_i+0xd0>
 800b1d0:	232d      	movs	r3, #45	@ 0x2d
 800b1d2:	426d      	negs	r5, r5
 800b1d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1d8:	4859      	ldr	r0, [pc, #356]	@ (800b340 <_printf_i+0x238>)
 800b1da:	230a      	movs	r3, #10
 800b1dc:	e011      	b.n	800b202 <_printf_i+0xfa>
 800b1de:	6821      	ldr	r1, [r4, #0]
 800b1e0:	6833      	ldr	r3, [r6, #0]
 800b1e2:	0608      	lsls	r0, r1, #24
 800b1e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b1e8:	d402      	bmi.n	800b1f0 <_printf_i+0xe8>
 800b1ea:	0649      	lsls	r1, r1, #25
 800b1ec:	bf48      	it	mi
 800b1ee:	b2ad      	uxthmi	r5, r5
 800b1f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b1f2:	4853      	ldr	r0, [pc, #332]	@ (800b340 <_printf_i+0x238>)
 800b1f4:	6033      	str	r3, [r6, #0]
 800b1f6:	bf14      	ite	ne
 800b1f8:	230a      	movne	r3, #10
 800b1fa:	2308      	moveq	r3, #8
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b202:	6866      	ldr	r6, [r4, #4]
 800b204:	60a6      	str	r6, [r4, #8]
 800b206:	2e00      	cmp	r6, #0
 800b208:	bfa2      	ittt	ge
 800b20a:	6821      	ldrge	r1, [r4, #0]
 800b20c:	f021 0104 	bicge.w	r1, r1, #4
 800b210:	6021      	strge	r1, [r4, #0]
 800b212:	b90d      	cbnz	r5, 800b218 <_printf_i+0x110>
 800b214:	2e00      	cmp	r6, #0
 800b216:	d04b      	beq.n	800b2b0 <_printf_i+0x1a8>
 800b218:	4616      	mov	r6, r2
 800b21a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b21e:	fb03 5711 	mls	r7, r3, r1, r5
 800b222:	5dc7      	ldrb	r7, [r0, r7]
 800b224:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b228:	462f      	mov	r7, r5
 800b22a:	42bb      	cmp	r3, r7
 800b22c:	460d      	mov	r5, r1
 800b22e:	d9f4      	bls.n	800b21a <_printf_i+0x112>
 800b230:	2b08      	cmp	r3, #8
 800b232:	d10b      	bne.n	800b24c <_printf_i+0x144>
 800b234:	6823      	ldr	r3, [r4, #0]
 800b236:	07df      	lsls	r7, r3, #31
 800b238:	d508      	bpl.n	800b24c <_printf_i+0x144>
 800b23a:	6923      	ldr	r3, [r4, #16]
 800b23c:	6861      	ldr	r1, [r4, #4]
 800b23e:	4299      	cmp	r1, r3
 800b240:	bfde      	ittt	le
 800b242:	2330      	movle	r3, #48	@ 0x30
 800b244:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b248:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b24c:	1b92      	subs	r2, r2, r6
 800b24e:	6122      	str	r2, [r4, #16]
 800b250:	f8cd a000 	str.w	sl, [sp]
 800b254:	464b      	mov	r3, r9
 800b256:	aa03      	add	r2, sp, #12
 800b258:	4621      	mov	r1, r4
 800b25a:	4640      	mov	r0, r8
 800b25c:	f7ff fee6 	bl	800b02c <_printf_common>
 800b260:	3001      	adds	r0, #1
 800b262:	d14a      	bne.n	800b2fa <_printf_i+0x1f2>
 800b264:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b268:	b004      	add	sp, #16
 800b26a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b26e:	6823      	ldr	r3, [r4, #0]
 800b270:	f043 0320 	orr.w	r3, r3, #32
 800b274:	6023      	str	r3, [r4, #0]
 800b276:	4833      	ldr	r0, [pc, #204]	@ (800b344 <_printf_i+0x23c>)
 800b278:	2778      	movs	r7, #120	@ 0x78
 800b27a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	6831      	ldr	r1, [r6, #0]
 800b282:	061f      	lsls	r7, r3, #24
 800b284:	f851 5b04 	ldr.w	r5, [r1], #4
 800b288:	d402      	bmi.n	800b290 <_printf_i+0x188>
 800b28a:	065f      	lsls	r7, r3, #25
 800b28c:	bf48      	it	mi
 800b28e:	b2ad      	uxthmi	r5, r5
 800b290:	6031      	str	r1, [r6, #0]
 800b292:	07d9      	lsls	r1, r3, #31
 800b294:	bf44      	itt	mi
 800b296:	f043 0320 	orrmi.w	r3, r3, #32
 800b29a:	6023      	strmi	r3, [r4, #0]
 800b29c:	b11d      	cbz	r5, 800b2a6 <_printf_i+0x19e>
 800b29e:	2310      	movs	r3, #16
 800b2a0:	e7ac      	b.n	800b1fc <_printf_i+0xf4>
 800b2a2:	4827      	ldr	r0, [pc, #156]	@ (800b340 <_printf_i+0x238>)
 800b2a4:	e7e9      	b.n	800b27a <_printf_i+0x172>
 800b2a6:	6823      	ldr	r3, [r4, #0]
 800b2a8:	f023 0320 	bic.w	r3, r3, #32
 800b2ac:	6023      	str	r3, [r4, #0]
 800b2ae:	e7f6      	b.n	800b29e <_printf_i+0x196>
 800b2b0:	4616      	mov	r6, r2
 800b2b2:	e7bd      	b.n	800b230 <_printf_i+0x128>
 800b2b4:	6833      	ldr	r3, [r6, #0]
 800b2b6:	6825      	ldr	r5, [r4, #0]
 800b2b8:	6961      	ldr	r1, [r4, #20]
 800b2ba:	1d18      	adds	r0, r3, #4
 800b2bc:	6030      	str	r0, [r6, #0]
 800b2be:	062e      	lsls	r6, r5, #24
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	d501      	bpl.n	800b2c8 <_printf_i+0x1c0>
 800b2c4:	6019      	str	r1, [r3, #0]
 800b2c6:	e002      	b.n	800b2ce <_printf_i+0x1c6>
 800b2c8:	0668      	lsls	r0, r5, #25
 800b2ca:	d5fb      	bpl.n	800b2c4 <_printf_i+0x1bc>
 800b2cc:	8019      	strh	r1, [r3, #0]
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	6123      	str	r3, [r4, #16]
 800b2d2:	4616      	mov	r6, r2
 800b2d4:	e7bc      	b.n	800b250 <_printf_i+0x148>
 800b2d6:	6833      	ldr	r3, [r6, #0]
 800b2d8:	1d1a      	adds	r2, r3, #4
 800b2da:	6032      	str	r2, [r6, #0]
 800b2dc:	681e      	ldr	r6, [r3, #0]
 800b2de:	6862      	ldr	r2, [r4, #4]
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	f7f4 fffc 	bl	80002e0 <memchr>
 800b2e8:	b108      	cbz	r0, 800b2ee <_printf_i+0x1e6>
 800b2ea:	1b80      	subs	r0, r0, r6
 800b2ec:	6060      	str	r0, [r4, #4]
 800b2ee:	6863      	ldr	r3, [r4, #4]
 800b2f0:	6123      	str	r3, [r4, #16]
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2f8:	e7aa      	b.n	800b250 <_printf_i+0x148>
 800b2fa:	6923      	ldr	r3, [r4, #16]
 800b2fc:	4632      	mov	r2, r6
 800b2fe:	4649      	mov	r1, r9
 800b300:	4640      	mov	r0, r8
 800b302:	47d0      	blx	sl
 800b304:	3001      	adds	r0, #1
 800b306:	d0ad      	beq.n	800b264 <_printf_i+0x15c>
 800b308:	6823      	ldr	r3, [r4, #0]
 800b30a:	079b      	lsls	r3, r3, #30
 800b30c:	d413      	bmi.n	800b336 <_printf_i+0x22e>
 800b30e:	68e0      	ldr	r0, [r4, #12]
 800b310:	9b03      	ldr	r3, [sp, #12]
 800b312:	4298      	cmp	r0, r3
 800b314:	bfb8      	it	lt
 800b316:	4618      	movlt	r0, r3
 800b318:	e7a6      	b.n	800b268 <_printf_i+0x160>
 800b31a:	2301      	movs	r3, #1
 800b31c:	4632      	mov	r2, r6
 800b31e:	4649      	mov	r1, r9
 800b320:	4640      	mov	r0, r8
 800b322:	47d0      	blx	sl
 800b324:	3001      	adds	r0, #1
 800b326:	d09d      	beq.n	800b264 <_printf_i+0x15c>
 800b328:	3501      	adds	r5, #1
 800b32a:	68e3      	ldr	r3, [r4, #12]
 800b32c:	9903      	ldr	r1, [sp, #12]
 800b32e:	1a5b      	subs	r3, r3, r1
 800b330:	42ab      	cmp	r3, r5
 800b332:	dcf2      	bgt.n	800b31a <_printf_i+0x212>
 800b334:	e7eb      	b.n	800b30e <_printf_i+0x206>
 800b336:	2500      	movs	r5, #0
 800b338:	f104 0619 	add.w	r6, r4, #25
 800b33c:	e7f5      	b.n	800b32a <_printf_i+0x222>
 800b33e:	bf00      	nop
 800b340:	0800deca 	.word	0x0800deca
 800b344:	0800dedb 	.word	0x0800dedb

0800b348 <std>:
 800b348:	2300      	movs	r3, #0
 800b34a:	b510      	push	{r4, lr}
 800b34c:	4604      	mov	r4, r0
 800b34e:	e9c0 3300 	strd	r3, r3, [r0]
 800b352:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b356:	6083      	str	r3, [r0, #8]
 800b358:	8181      	strh	r1, [r0, #12]
 800b35a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b35c:	81c2      	strh	r2, [r0, #14]
 800b35e:	6183      	str	r3, [r0, #24]
 800b360:	4619      	mov	r1, r3
 800b362:	2208      	movs	r2, #8
 800b364:	305c      	adds	r0, #92	@ 0x5c
 800b366:	f000 f8b1 	bl	800b4cc <memset>
 800b36a:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a0 <std+0x58>)
 800b36c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b36e:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a4 <std+0x5c>)
 800b370:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b372:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a8 <std+0x60>)
 800b374:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b376:	4b0d      	ldr	r3, [pc, #52]	@ (800b3ac <std+0x64>)
 800b378:	6323      	str	r3, [r4, #48]	@ 0x30
 800b37a:	4b0d      	ldr	r3, [pc, #52]	@ (800b3b0 <std+0x68>)
 800b37c:	6224      	str	r4, [r4, #32]
 800b37e:	429c      	cmp	r4, r3
 800b380:	d006      	beq.n	800b390 <std+0x48>
 800b382:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b386:	4294      	cmp	r4, r2
 800b388:	d002      	beq.n	800b390 <std+0x48>
 800b38a:	33d0      	adds	r3, #208	@ 0xd0
 800b38c:	429c      	cmp	r4, r3
 800b38e:	d105      	bne.n	800b39c <std+0x54>
 800b390:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b398:	f000 b8ce 	b.w	800b538 <__retarget_lock_init_recursive>
 800b39c:	bd10      	pop	{r4, pc}
 800b39e:	bf00      	nop
 800b3a0:	0800cac5 	.word	0x0800cac5
 800b3a4:	0800cae7 	.word	0x0800cae7
 800b3a8:	0800cb1f 	.word	0x0800cb1f
 800b3ac:	0800cb43 	.word	0x0800cb43
 800b3b0:	240035cc 	.word	0x240035cc

0800b3b4 <stdio_exit_handler>:
 800b3b4:	4a02      	ldr	r2, [pc, #8]	@ (800b3c0 <stdio_exit_handler+0xc>)
 800b3b6:	4903      	ldr	r1, [pc, #12]	@ (800b3c4 <stdio_exit_handler+0x10>)
 800b3b8:	4803      	ldr	r0, [pc, #12]	@ (800b3c8 <stdio_exit_handler+0x14>)
 800b3ba:	f000 b869 	b.w	800b490 <_fwalk_sglue>
 800b3be:	bf00      	nop
 800b3c0:	24000020 	.word	0x24000020
 800b3c4:	0800c359 	.word	0x0800c359
 800b3c8:	24000030 	.word	0x24000030

0800b3cc <cleanup_stdio>:
 800b3cc:	6841      	ldr	r1, [r0, #4]
 800b3ce:	4b0c      	ldr	r3, [pc, #48]	@ (800b400 <cleanup_stdio+0x34>)
 800b3d0:	4299      	cmp	r1, r3
 800b3d2:	b510      	push	{r4, lr}
 800b3d4:	4604      	mov	r4, r0
 800b3d6:	d001      	beq.n	800b3dc <cleanup_stdio+0x10>
 800b3d8:	f000 ffbe 	bl	800c358 <_fflush_r>
 800b3dc:	68a1      	ldr	r1, [r4, #8]
 800b3de:	4b09      	ldr	r3, [pc, #36]	@ (800b404 <cleanup_stdio+0x38>)
 800b3e0:	4299      	cmp	r1, r3
 800b3e2:	d002      	beq.n	800b3ea <cleanup_stdio+0x1e>
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	f000 ffb7 	bl	800c358 <_fflush_r>
 800b3ea:	68e1      	ldr	r1, [r4, #12]
 800b3ec:	4b06      	ldr	r3, [pc, #24]	@ (800b408 <cleanup_stdio+0x3c>)
 800b3ee:	4299      	cmp	r1, r3
 800b3f0:	d004      	beq.n	800b3fc <cleanup_stdio+0x30>
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3f8:	f000 bfae 	b.w	800c358 <_fflush_r>
 800b3fc:	bd10      	pop	{r4, pc}
 800b3fe:	bf00      	nop
 800b400:	240035cc 	.word	0x240035cc
 800b404:	24003634 	.word	0x24003634
 800b408:	2400369c 	.word	0x2400369c

0800b40c <global_stdio_init.part.0>:
 800b40c:	b510      	push	{r4, lr}
 800b40e:	4b0b      	ldr	r3, [pc, #44]	@ (800b43c <global_stdio_init.part.0+0x30>)
 800b410:	4c0b      	ldr	r4, [pc, #44]	@ (800b440 <global_stdio_init.part.0+0x34>)
 800b412:	4a0c      	ldr	r2, [pc, #48]	@ (800b444 <global_stdio_init.part.0+0x38>)
 800b414:	601a      	str	r2, [r3, #0]
 800b416:	4620      	mov	r0, r4
 800b418:	2200      	movs	r2, #0
 800b41a:	2104      	movs	r1, #4
 800b41c:	f7ff ff94 	bl	800b348 <std>
 800b420:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b424:	2201      	movs	r2, #1
 800b426:	2109      	movs	r1, #9
 800b428:	f7ff ff8e 	bl	800b348 <std>
 800b42c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b430:	2202      	movs	r2, #2
 800b432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b436:	2112      	movs	r1, #18
 800b438:	f7ff bf86 	b.w	800b348 <std>
 800b43c:	24003704 	.word	0x24003704
 800b440:	240035cc 	.word	0x240035cc
 800b444:	0800b3b5 	.word	0x0800b3b5

0800b448 <__sfp_lock_acquire>:
 800b448:	4801      	ldr	r0, [pc, #4]	@ (800b450 <__sfp_lock_acquire+0x8>)
 800b44a:	f000 b876 	b.w	800b53a <__retarget_lock_acquire_recursive>
 800b44e:	bf00      	nop
 800b450:	24003709 	.word	0x24003709

0800b454 <__sfp_lock_release>:
 800b454:	4801      	ldr	r0, [pc, #4]	@ (800b45c <__sfp_lock_release+0x8>)
 800b456:	f000 b871 	b.w	800b53c <__retarget_lock_release_recursive>
 800b45a:	bf00      	nop
 800b45c:	24003709 	.word	0x24003709

0800b460 <__sinit>:
 800b460:	b510      	push	{r4, lr}
 800b462:	4604      	mov	r4, r0
 800b464:	f7ff fff0 	bl	800b448 <__sfp_lock_acquire>
 800b468:	6a23      	ldr	r3, [r4, #32]
 800b46a:	b11b      	cbz	r3, 800b474 <__sinit+0x14>
 800b46c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b470:	f7ff bff0 	b.w	800b454 <__sfp_lock_release>
 800b474:	4b04      	ldr	r3, [pc, #16]	@ (800b488 <__sinit+0x28>)
 800b476:	6223      	str	r3, [r4, #32]
 800b478:	4b04      	ldr	r3, [pc, #16]	@ (800b48c <__sinit+0x2c>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d1f5      	bne.n	800b46c <__sinit+0xc>
 800b480:	f7ff ffc4 	bl	800b40c <global_stdio_init.part.0>
 800b484:	e7f2      	b.n	800b46c <__sinit+0xc>
 800b486:	bf00      	nop
 800b488:	0800b3cd 	.word	0x0800b3cd
 800b48c:	24003704 	.word	0x24003704

0800b490 <_fwalk_sglue>:
 800b490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b494:	4607      	mov	r7, r0
 800b496:	4688      	mov	r8, r1
 800b498:	4614      	mov	r4, r2
 800b49a:	2600      	movs	r6, #0
 800b49c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4a0:	f1b9 0901 	subs.w	r9, r9, #1
 800b4a4:	d505      	bpl.n	800b4b2 <_fwalk_sglue+0x22>
 800b4a6:	6824      	ldr	r4, [r4, #0]
 800b4a8:	2c00      	cmp	r4, #0
 800b4aa:	d1f7      	bne.n	800b49c <_fwalk_sglue+0xc>
 800b4ac:	4630      	mov	r0, r6
 800b4ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4b2:	89ab      	ldrh	r3, [r5, #12]
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d907      	bls.n	800b4c8 <_fwalk_sglue+0x38>
 800b4b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4bc:	3301      	adds	r3, #1
 800b4be:	d003      	beq.n	800b4c8 <_fwalk_sglue+0x38>
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	4638      	mov	r0, r7
 800b4c4:	47c0      	blx	r8
 800b4c6:	4306      	orrs	r6, r0
 800b4c8:	3568      	adds	r5, #104	@ 0x68
 800b4ca:	e7e9      	b.n	800b4a0 <_fwalk_sglue+0x10>

0800b4cc <memset>:
 800b4cc:	4402      	add	r2, r0
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d100      	bne.n	800b4d6 <memset+0xa>
 800b4d4:	4770      	bx	lr
 800b4d6:	f803 1b01 	strb.w	r1, [r3], #1
 800b4da:	e7f9      	b.n	800b4d0 <memset+0x4>

0800b4dc <_localeconv_r>:
 800b4dc:	4800      	ldr	r0, [pc, #0]	@ (800b4e0 <_localeconv_r+0x4>)
 800b4de:	4770      	bx	lr
 800b4e0:	2400016c 	.word	0x2400016c

0800b4e4 <__errno>:
 800b4e4:	4b01      	ldr	r3, [pc, #4]	@ (800b4ec <__errno+0x8>)
 800b4e6:	6818      	ldr	r0, [r3, #0]
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop
 800b4ec:	2400002c 	.word	0x2400002c

0800b4f0 <__libc_init_array>:
 800b4f0:	b570      	push	{r4, r5, r6, lr}
 800b4f2:	4d0d      	ldr	r5, [pc, #52]	@ (800b528 <__libc_init_array+0x38>)
 800b4f4:	4c0d      	ldr	r4, [pc, #52]	@ (800b52c <__libc_init_array+0x3c>)
 800b4f6:	1b64      	subs	r4, r4, r5
 800b4f8:	10a4      	asrs	r4, r4, #2
 800b4fa:	2600      	movs	r6, #0
 800b4fc:	42a6      	cmp	r6, r4
 800b4fe:	d109      	bne.n	800b514 <__libc_init_array+0x24>
 800b500:	4d0b      	ldr	r5, [pc, #44]	@ (800b530 <__libc_init_array+0x40>)
 800b502:	4c0c      	ldr	r4, [pc, #48]	@ (800b534 <__libc_init_array+0x44>)
 800b504:	f002 fca4 	bl	800de50 <_init>
 800b508:	1b64      	subs	r4, r4, r5
 800b50a:	10a4      	asrs	r4, r4, #2
 800b50c:	2600      	movs	r6, #0
 800b50e:	42a6      	cmp	r6, r4
 800b510:	d105      	bne.n	800b51e <__libc_init_array+0x2e>
 800b512:	bd70      	pop	{r4, r5, r6, pc}
 800b514:	f855 3b04 	ldr.w	r3, [r5], #4
 800b518:	4798      	blx	r3
 800b51a:	3601      	adds	r6, #1
 800b51c:	e7ee      	b.n	800b4fc <__libc_init_array+0xc>
 800b51e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b522:	4798      	blx	r3
 800b524:	3601      	adds	r6, #1
 800b526:	e7f2      	b.n	800b50e <__libc_init_array+0x1e>
 800b528:	0800e408 	.word	0x0800e408
 800b52c:	0800e408 	.word	0x0800e408
 800b530:	0800e408 	.word	0x0800e408
 800b534:	0800e40c 	.word	0x0800e40c

0800b538 <__retarget_lock_init_recursive>:
 800b538:	4770      	bx	lr

0800b53a <__retarget_lock_acquire_recursive>:
 800b53a:	4770      	bx	lr

0800b53c <__retarget_lock_release_recursive>:
 800b53c:	4770      	bx	lr

0800b53e <quorem>:
 800b53e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b542:	6903      	ldr	r3, [r0, #16]
 800b544:	690c      	ldr	r4, [r1, #16]
 800b546:	42a3      	cmp	r3, r4
 800b548:	4607      	mov	r7, r0
 800b54a:	db7e      	blt.n	800b64a <quorem+0x10c>
 800b54c:	3c01      	subs	r4, #1
 800b54e:	f101 0814 	add.w	r8, r1, #20
 800b552:	00a3      	lsls	r3, r4, #2
 800b554:	f100 0514 	add.w	r5, r0, #20
 800b558:	9300      	str	r3, [sp, #0]
 800b55a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b55e:	9301      	str	r3, [sp, #4]
 800b560:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b564:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b568:	3301      	adds	r3, #1
 800b56a:	429a      	cmp	r2, r3
 800b56c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b570:	fbb2 f6f3 	udiv	r6, r2, r3
 800b574:	d32e      	bcc.n	800b5d4 <quorem+0x96>
 800b576:	f04f 0a00 	mov.w	sl, #0
 800b57a:	46c4      	mov	ip, r8
 800b57c:	46ae      	mov	lr, r5
 800b57e:	46d3      	mov	fp, sl
 800b580:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b584:	b298      	uxth	r0, r3
 800b586:	fb06 a000 	mla	r0, r6, r0, sl
 800b58a:	0c02      	lsrs	r2, r0, #16
 800b58c:	0c1b      	lsrs	r3, r3, #16
 800b58e:	fb06 2303 	mla	r3, r6, r3, r2
 800b592:	f8de 2000 	ldr.w	r2, [lr]
 800b596:	b280      	uxth	r0, r0
 800b598:	b292      	uxth	r2, r2
 800b59a:	1a12      	subs	r2, r2, r0
 800b59c:	445a      	add	r2, fp
 800b59e:	f8de 0000 	ldr.w	r0, [lr]
 800b5a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b5ac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b5b0:	b292      	uxth	r2, r2
 800b5b2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b5b6:	45e1      	cmp	r9, ip
 800b5b8:	f84e 2b04 	str.w	r2, [lr], #4
 800b5bc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b5c0:	d2de      	bcs.n	800b580 <quorem+0x42>
 800b5c2:	9b00      	ldr	r3, [sp, #0]
 800b5c4:	58eb      	ldr	r3, [r5, r3]
 800b5c6:	b92b      	cbnz	r3, 800b5d4 <quorem+0x96>
 800b5c8:	9b01      	ldr	r3, [sp, #4]
 800b5ca:	3b04      	subs	r3, #4
 800b5cc:	429d      	cmp	r5, r3
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	d32f      	bcc.n	800b632 <quorem+0xf4>
 800b5d2:	613c      	str	r4, [r7, #16]
 800b5d4:	4638      	mov	r0, r7
 800b5d6:	f001 f96d 	bl	800c8b4 <__mcmp>
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	db25      	blt.n	800b62a <quorem+0xec>
 800b5de:	4629      	mov	r1, r5
 800b5e0:	2000      	movs	r0, #0
 800b5e2:	f858 2b04 	ldr.w	r2, [r8], #4
 800b5e6:	f8d1 c000 	ldr.w	ip, [r1]
 800b5ea:	fa1f fe82 	uxth.w	lr, r2
 800b5ee:	fa1f f38c 	uxth.w	r3, ip
 800b5f2:	eba3 030e 	sub.w	r3, r3, lr
 800b5f6:	4403      	add	r3, r0
 800b5f8:	0c12      	lsrs	r2, r2, #16
 800b5fa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b5fe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b602:	b29b      	uxth	r3, r3
 800b604:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b608:	45c1      	cmp	r9, r8
 800b60a:	f841 3b04 	str.w	r3, [r1], #4
 800b60e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b612:	d2e6      	bcs.n	800b5e2 <quorem+0xa4>
 800b614:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b618:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b61c:	b922      	cbnz	r2, 800b628 <quorem+0xea>
 800b61e:	3b04      	subs	r3, #4
 800b620:	429d      	cmp	r5, r3
 800b622:	461a      	mov	r2, r3
 800b624:	d30b      	bcc.n	800b63e <quorem+0x100>
 800b626:	613c      	str	r4, [r7, #16]
 800b628:	3601      	adds	r6, #1
 800b62a:	4630      	mov	r0, r6
 800b62c:	b003      	add	sp, #12
 800b62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b632:	6812      	ldr	r2, [r2, #0]
 800b634:	3b04      	subs	r3, #4
 800b636:	2a00      	cmp	r2, #0
 800b638:	d1cb      	bne.n	800b5d2 <quorem+0x94>
 800b63a:	3c01      	subs	r4, #1
 800b63c:	e7c6      	b.n	800b5cc <quorem+0x8e>
 800b63e:	6812      	ldr	r2, [r2, #0]
 800b640:	3b04      	subs	r3, #4
 800b642:	2a00      	cmp	r2, #0
 800b644:	d1ef      	bne.n	800b626 <quorem+0xe8>
 800b646:	3c01      	subs	r4, #1
 800b648:	e7ea      	b.n	800b620 <quorem+0xe2>
 800b64a:	2000      	movs	r0, #0
 800b64c:	e7ee      	b.n	800b62c <quorem+0xee>
	...

0800b650 <_dtoa_r>:
 800b650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b654:	ed2d 8b02 	vpush	{d8}
 800b658:	69c7      	ldr	r7, [r0, #28]
 800b65a:	b091      	sub	sp, #68	@ 0x44
 800b65c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b660:	ec55 4b10 	vmov	r4, r5, d0
 800b664:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800b666:	9107      	str	r1, [sp, #28]
 800b668:	4681      	mov	r9, r0
 800b66a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b66c:	930d      	str	r3, [sp, #52]	@ 0x34
 800b66e:	b97f      	cbnz	r7, 800b690 <_dtoa_r+0x40>
 800b670:	2010      	movs	r0, #16
 800b672:	f000 fd43 	bl	800c0fc <malloc>
 800b676:	4602      	mov	r2, r0
 800b678:	f8c9 001c 	str.w	r0, [r9, #28]
 800b67c:	b920      	cbnz	r0, 800b688 <_dtoa_r+0x38>
 800b67e:	4ba0      	ldr	r3, [pc, #640]	@ (800b900 <_dtoa_r+0x2b0>)
 800b680:	21ef      	movs	r1, #239	@ 0xef
 800b682:	48a0      	ldr	r0, [pc, #640]	@ (800b904 <_dtoa_r+0x2b4>)
 800b684:	f001 fac6 	bl	800cc14 <__assert_func>
 800b688:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b68c:	6007      	str	r7, [r0, #0]
 800b68e:	60c7      	str	r7, [r0, #12]
 800b690:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b694:	6819      	ldr	r1, [r3, #0]
 800b696:	b159      	cbz	r1, 800b6b0 <_dtoa_r+0x60>
 800b698:	685a      	ldr	r2, [r3, #4]
 800b69a:	604a      	str	r2, [r1, #4]
 800b69c:	2301      	movs	r3, #1
 800b69e:	4093      	lsls	r3, r2
 800b6a0:	608b      	str	r3, [r1, #8]
 800b6a2:	4648      	mov	r0, r9
 800b6a4:	f000 fecc 	bl	800c440 <_Bfree>
 800b6a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	601a      	str	r2, [r3, #0]
 800b6b0:	1e2b      	subs	r3, r5, #0
 800b6b2:	bfbb      	ittet	lt
 800b6b4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b6b8:	9303      	strlt	r3, [sp, #12]
 800b6ba:	2300      	movge	r3, #0
 800b6bc:	2201      	movlt	r2, #1
 800b6be:	bfac      	ite	ge
 800b6c0:	6033      	strge	r3, [r6, #0]
 800b6c2:	6032      	strlt	r2, [r6, #0]
 800b6c4:	4b90      	ldr	r3, [pc, #576]	@ (800b908 <_dtoa_r+0x2b8>)
 800b6c6:	9e03      	ldr	r6, [sp, #12]
 800b6c8:	43b3      	bics	r3, r6
 800b6ca:	d110      	bne.n	800b6ee <_dtoa_r+0x9e>
 800b6cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b6ce:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b6d2:	6013      	str	r3, [r2, #0]
 800b6d4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800b6d8:	4323      	orrs	r3, r4
 800b6da:	f000 84de 	beq.w	800c09a <_dtoa_r+0xa4a>
 800b6de:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b6e0:	4f8a      	ldr	r7, [pc, #552]	@ (800b90c <_dtoa_r+0x2bc>)
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	f000 84e0 	beq.w	800c0a8 <_dtoa_r+0xa58>
 800b6e8:	1cfb      	adds	r3, r7, #3
 800b6ea:	f000 bcdb 	b.w	800c0a4 <_dtoa_r+0xa54>
 800b6ee:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b6f2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6fa:	d10a      	bne.n	800b712 <_dtoa_r+0xc2>
 800b6fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b6fe:	2301      	movs	r3, #1
 800b700:	6013      	str	r3, [r2, #0]
 800b702:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b704:	b113      	cbz	r3, 800b70c <_dtoa_r+0xbc>
 800b706:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b708:	4b81      	ldr	r3, [pc, #516]	@ (800b910 <_dtoa_r+0x2c0>)
 800b70a:	6013      	str	r3, [r2, #0]
 800b70c:	4f81      	ldr	r7, [pc, #516]	@ (800b914 <_dtoa_r+0x2c4>)
 800b70e:	f000 bccb 	b.w	800c0a8 <_dtoa_r+0xa58>
 800b712:	aa0e      	add	r2, sp, #56	@ 0x38
 800b714:	a90f      	add	r1, sp, #60	@ 0x3c
 800b716:	4648      	mov	r0, r9
 800b718:	eeb0 0b48 	vmov.f64	d0, d8
 800b71c:	f001 f97a 	bl	800ca14 <__d2b>
 800b720:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800b724:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b726:	9001      	str	r0, [sp, #4]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d045      	beq.n	800b7b8 <_dtoa_r+0x168>
 800b72c:	eeb0 7b48 	vmov.f64	d7, d8
 800b730:	ee18 1a90 	vmov	r1, s17
 800b734:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b738:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800b73c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b740:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b744:	2500      	movs	r5, #0
 800b746:	ee07 1a90 	vmov	s15, r1
 800b74a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800b74e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b8e8 <_dtoa_r+0x298>
 800b752:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b756:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800b8f0 <_dtoa_r+0x2a0>
 800b75a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b75e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b8f8 <_dtoa_r+0x2a8>
 800b762:	ee07 3a90 	vmov	s15, r3
 800b766:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b76a:	eeb0 7b46 	vmov.f64	d7, d6
 800b76e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b772:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b776:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b77e:	ee16 8a90 	vmov	r8, s13
 800b782:	d508      	bpl.n	800b796 <_dtoa_r+0x146>
 800b784:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b788:	eeb4 6b47 	vcmp.f64	d6, d7
 800b78c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b790:	bf18      	it	ne
 800b792:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800b796:	f1b8 0f16 	cmp.w	r8, #22
 800b79a:	d82b      	bhi.n	800b7f4 <_dtoa_r+0x1a4>
 800b79c:	495e      	ldr	r1, [pc, #376]	@ (800b918 <_dtoa_r+0x2c8>)
 800b79e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800b7a2:	ed91 7b00 	vldr	d7, [r1]
 800b7a6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b7aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7ae:	d501      	bpl.n	800b7b4 <_dtoa_r+0x164>
 800b7b0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b7b4:	2100      	movs	r1, #0
 800b7b6:	e01e      	b.n	800b7f6 <_dtoa_r+0x1a6>
 800b7b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7ba:	4413      	add	r3, r2
 800b7bc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800b7c0:	2920      	cmp	r1, #32
 800b7c2:	bfc1      	itttt	gt
 800b7c4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800b7c8:	408e      	lslgt	r6, r1
 800b7ca:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800b7ce:	fa24 f101 	lsrgt.w	r1, r4, r1
 800b7d2:	bfd6      	itet	le
 800b7d4:	f1c1 0120 	rsble	r1, r1, #32
 800b7d8:	4331      	orrgt	r1, r6
 800b7da:	fa04 f101 	lslle.w	r1, r4, r1
 800b7de:	ee07 1a90 	vmov	s15, r1
 800b7e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b7e6:	3b01      	subs	r3, #1
 800b7e8:	ee17 1a90 	vmov	r1, s15
 800b7ec:	2501      	movs	r5, #1
 800b7ee:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800b7f2:	e7a8      	b.n	800b746 <_dtoa_r+0xf6>
 800b7f4:	2101      	movs	r1, #1
 800b7f6:	1ad2      	subs	r2, r2, r3
 800b7f8:	1e53      	subs	r3, r2, #1
 800b7fa:	9306      	str	r3, [sp, #24]
 800b7fc:	bf45      	ittet	mi
 800b7fe:	f1c2 0301 	rsbmi	r3, r2, #1
 800b802:	9305      	strmi	r3, [sp, #20]
 800b804:	2300      	movpl	r3, #0
 800b806:	2300      	movmi	r3, #0
 800b808:	bf4c      	ite	mi
 800b80a:	9306      	strmi	r3, [sp, #24]
 800b80c:	9305      	strpl	r3, [sp, #20]
 800b80e:	f1b8 0f00 	cmp.w	r8, #0
 800b812:	910c      	str	r1, [sp, #48]	@ 0x30
 800b814:	db18      	blt.n	800b848 <_dtoa_r+0x1f8>
 800b816:	9b06      	ldr	r3, [sp, #24]
 800b818:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b81c:	4443      	add	r3, r8
 800b81e:	9306      	str	r3, [sp, #24]
 800b820:	2300      	movs	r3, #0
 800b822:	9a07      	ldr	r2, [sp, #28]
 800b824:	2a09      	cmp	r2, #9
 800b826:	d849      	bhi.n	800b8bc <_dtoa_r+0x26c>
 800b828:	2a05      	cmp	r2, #5
 800b82a:	bfc4      	itt	gt
 800b82c:	3a04      	subgt	r2, #4
 800b82e:	9207      	strgt	r2, [sp, #28]
 800b830:	9a07      	ldr	r2, [sp, #28]
 800b832:	f1a2 0202 	sub.w	r2, r2, #2
 800b836:	bfcc      	ite	gt
 800b838:	2400      	movgt	r4, #0
 800b83a:	2401      	movle	r4, #1
 800b83c:	2a03      	cmp	r2, #3
 800b83e:	d848      	bhi.n	800b8d2 <_dtoa_r+0x282>
 800b840:	e8df f002 	tbb	[pc, r2]
 800b844:	3a2c2e0b 	.word	0x3a2c2e0b
 800b848:	9b05      	ldr	r3, [sp, #20]
 800b84a:	2200      	movs	r2, #0
 800b84c:	eba3 0308 	sub.w	r3, r3, r8
 800b850:	9305      	str	r3, [sp, #20]
 800b852:	920a      	str	r2, [sp, #40]	@ 0x28
 800b854:	f1c8 0300 	rsb	r3, r8, #0
 800b858:	e7e3      	b.n	800b822 <_dtoa_r+0x1d2>
 800b85a:	2200      	movs	r2, #0
 800b85c:	9208      	str	r2, [sp, #32]
 800b85e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b860:	2a00      	cmp	r2, #0
 800b862:	dc39      	bgt.n	800b8d8 <_dtoa_r+0x288>
 800b864:	f04f 0b01 	mov.w	fp, #1
 800b868:	46da      	mov	sl, fp
 800b86a:	465a      	mov	r2, fp
 800b86c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b870:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800b874:	2100      	movs	r1, #0
 800b876:	2004      	movs	r0, #4
 800b878:	f100 0614 	add.w	r6, r0, #20
 800b87c:	4296      	cmp	r6, r2
 800b87e:	d930      	bls.n	800b8e2 <_dtoa_r+0x292>
 800b880:	6079      	str	r1, [r7, #4]
 800b882:	4648      	mov	r0, r9
 800b884:	9304      	str	r3, [sp, #16]
 800b886:	f000 fd9b 	bl	800c3c0 <_Balloc>
 800b88a:	9b04      	ldr	r3, [sp, #16]
 800b88c:	4607      	mov	r7, r0
 800b88e:	2800      	cmp	r0, #0
 800b890:	d146      	bne.n	800b920 <_dtoa_r+0x2d0>
 800b892:	4b22      	ldr	r3, [pc, #136]	@ (800b91c <_dtoa_r+0x2cc>)
 800b894:	4602      	mov	r2, r0
 800b896:	f240 11af 	movw	r1, #431	@ 0x1af
 800b89a:	e6f2      	b.n	800b682 <_dtoa_r+0x32>
 800b89c:	2201      	movs	r2, #1
 800b89e:	e7dd      	b.n	800b85c <_dtoa_r+0x20c>
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	9208      	str	r2, [sp, #32]
 800b8a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8a6:	eb08 0b02 	add.w	fp, r8, r2
 800b8aa:	f10b 0a01 	add.w	sl, fp, #1
 800b8ae:	4652      	mov	r2, sl
 800b8b0:	2a01      	cmp	r2, #1
 800b8b2:	bfb8      	it	lt
 800b8b4:	2201      	movlt	r2, #1
 800b8b6:	e7db      	b.n	800b870 <_dtoa_r+0x220>
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	e7f2      	b.n	800b8a2 <_dtoa_r+0x252>
 800b8bc:	2401      	movs	r4, #1
 800b8be:	2200      	movs	r2, #0
 800b8c0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b8c4:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800b8c8:	2100      	movs	r1, #0
 800b8ca:	46da      	mov	sl, fp
 800b8cc:	2212      	movs	r2, #18
 800b8ce:	9109      	str	r1, [sp, #36]	@ 0x24
 800b8d0:	e7ce      	b.n	800b870 <_dtoa_r+0x220>
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	9208      	str	r2, [sp, #32]
 800b8d6:	e7f5      	b.n	800b8c4 <_dtoa_r+0x274>
 800b8d8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800b8dc:	46da      	mov	sl, fp
 800b8de:	465a      	mov	r2, fp
 800b8e0:	e7c6      	b.n	800b870 <_dtoa_r+0x220>
 800b8e2:	3101      	adds	r1, #1
 800b8e4:	0040      	lsls	r0, r0, #1
 800b8e6:	e7c7      	b.n	800b878 <_dtoa_r+0x228>
 800b8e8:	636f4361 	.word	0x636f4361
 800b8ec:	3fd287a7 	.word	0x3fd287a7
 800b8f0:	8b60c8b3 	.word	0x8b60c8b3
 800b8f4:	3fc68a28 	.word	0x3fc68a28
 800b8f8:	509f79fb 	.word	0x509f79fb
 800b8fc:	3fd34413 	.word	0x3fd34413
 800b900:	0800def9 	.word	0x0800def9
 800b904:	0800df10 	.word	0x0800df10
 800b908:	7ff00000 	.word	0x7ff00000
 800b90c:	0800def5 	.word	0x0800def5
 800b910:	0800dec9 	.word	0x0800dec9
 800b914:	0800dec8 	.word	0x0800dec8
 800b918:	0800e008 	.word	0x0800e008
 800b91c:	0800df68 	.word	0x0800df68
 800b920:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800b924:	f1ba 0f0e 	cmp.w	sl, #14
 800b928:	6010      	str	r0, [r2, #0]
 800b92a:	d86f      	bhi.n	800ba0c <_dtoa_r+0x3bc>
 800b92c:	2c00      	cmp	r4, #0
 800b92e:	d06d      	beq.n	800ba0c <_dtoa_r+0x3bc>
 800b930:	f1b8 0f00 	cmp.w	r8, #0
 800b934:	f340 80c2 	ble.w	800babc <_dtoa_r+0x46c>
 800b938:	4aca      	ldr	r2, [pc, #808]	@ (800bc64 <_dtoa_r+0x614>)
 800b93a:	f008 010f 	and.w	r1, r8, #15
 800b93e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b942:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800b946:	ed92 7b00 	vldr	d7, [r2]
 800b94a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800b94e:	f000 80a9 	beq.w	800baa4 <_dtoa_r+0x454>
 800b952:	4ac5      	ldr	r2, [pc, #788]	@ (800bc68 <_dtoa_r+0x618>)
 800b954:	ed92 6b08 	vldr	d6, [r2, #32]
 800b958:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b95c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b960:	f001 010f 	and.w	r1, r1, #15
 800b964:	2203      	movs	r2, #3
 800b966:	48c0      	ldr	r0, [pc, #768]	@ (800bc68 <_dtoa_r+0x618>)
 800b968:	2900      	cmp	r1, #0
 800b96a:	f040 809d 	bne.w	800baa8 <_dtoa_r+0x458>
 800b96e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b972:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b976:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b97a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b97c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b980:	2900      	cmp	r1, #0
 800b982:	f000 80c1 	beq.w	800bb08 <_dtoa_r+0x4b8>
 800b986:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b98a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b98e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b992:	f140 80b9 	bpl.w	800bb08 <_dtoa_r+0x4b8>
 800b996:	f1ba 0f00 	cmp.w	sl, #0
 800b99a:	f000 80b5 	beq.w	800bb08 <_dtoa_r+0x4b8>
 800b99e:	f1bb 0f00 	cmp.w	fp, #0
 800b9a2:	dd31      	ble.n	800ba08 <_dtoa_r+0x3b8>
 800b9a4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b9a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b9ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b9b0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800b9b4:	9104      	str	r1, [sp, #16]
 800b9b6:	3201      	adds	r2, #1
 800b9b8:	465c      	mov	r4, fp
 800b9ba:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b9be:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800b9c2:	ee07 2a90 	vmov	s15, r2
 800b9c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b9ca:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b9ce:	ee15 2a90 	vmov	r2, s11
 800b9d2:	ec51 0b15 	vmov	r0, r1, d5
 800b9d6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800b9da:	2c00      	cmp	r4, #0
 800b9dc:	f040 8098 	bne.w	800bb10 <_dtoa_r+0x4c0>
 800b9e0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b9e4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b9e8:	ec41 0b17 	vmov	d7, r0, r1
 800b9ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b9f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9f4:	f300 8261 	bgt.w	800beba <_dtoa_r+0x86a>
 800b9f8:	eeb1 7b47 	vneg.f64	d7, d7
 800b9fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ba00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba04:	f100 80f5 	bmi.w	800bbf2 <_dtoa_r+0x5a2>
 800ba08:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ba0c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ba0e:	2a00      	cmp	r2, #0
 800ba10:	f2c0 812c 	blt.w	800bc6c <_dtoa_r+0x61c>
 800ba14:	f1b8 0f0e 	cmp.w	r8, #14
 800ba18:	f300 8128 	bgt.w	800bc6c <_dtoa_r+0x61c>
 800ba1c:	4b91      	ldr	r3, [pc, #580]	@ (800bc64 <_dtoa_r+0x614>)
 800ba1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ba22:	ed93 6b00 	vldr	d6, [r3]
 800ba26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	da03      	bge.n	800ba34 <_dtoa_r+0x3e4>
 800ba2c:	f1ba 0f00 	cmp.w	sl, #0
 800ba30:	f340 80d2 	ble.w	800bbd8 <_dtoa_r+0x588>
 800ba34:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800ba38:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba3c:	463e      	mov	r6, r7
 800ba3e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ba42:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ba46:	ee15 3a10 	vmov	r3, s10
 800ba4a:	3330      	adds	r3, #48	@ 0x30
 800ba4c:	f806 3b01 	strb.w	r3, [r6], #1
 800ba50:	1bf3      	subs	r3, r6, r7
 800ba52:	459a      	cmp	sl, r3
 800ba54:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ba58:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ba5c:	f040 80f8 	bne.w	800bc50 <_dtoa_r+0x600>
 800ba60:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ba64:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ba68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba6c:	f300 80dd 	bgt.w	800bc2a <_dtoa_r+0x5da>
 800ba70:	eeb4 7b46 	vcmp.f64	d7, d6
 800ba74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba78:	d104      	bne.n	800ba84 <_dtoa_r+0x434>
 800ba7a:	ee15 3a10 	vmov	r3, s10
 800ba7e:	07db      	lsls	r3, r3, #31
 800ba80:	f100 80d3 	bmi.w	800bc2a <_dtoa_r+0x5da>
 800ba84:	9901      	ldr	r1, [sp, #4]
 800ba86:	4648      	mov	r0, r9
 800ba88:	f000 fcda 	bl	800c440 <_Bfree>
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ba90:	7033      	strb	r3, [r6, #0]
 800ba92:	f108 0301 	add.w	r3, r8, #1
 800ba96:	6013      	str	r3, [r2, #0]
 800ba98:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	f000 8304 	beq.w	800c0a8 <_dtoa_r+0xa58>
 800baa0:	601e      	str	r6, [r3, #0]
 800baa2:	e301      	b.n	800c0a8 <_dtoa_r+0xa58>
 800baa4:	2202      	movs	r2, #2
 800baa6:	e75e      	b.n	800b966 <_dtoa_r+0x316>
 800baa8:	07cc      	lsls	r4, r1, #31
 800baaa:	d504      	bpl.n	800bab6 <_dtoa_r+0x466>
 800baac:	ed90 6b00 	vldr	d6, [r0]
 800bab0:	3201      	adds	r2, #1
 800bab2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bab6:	1049      	asrs	r1, r1, #1
 800bab8:	3008      	adds	r0, #8
 800baba:	e755      	b.n	800b968 <_dtoa_r+0x318>
 800babc:	d022      	beq.n	800bb04 <_dtoa_r+0x4b4>
 800babe:	f1c8 0100 	rsb	r1, r8, #0
 800bac2:	4a68      	ldr	r2, [pc, #416]	@ (800bc64 <_dtoa_r+0x614>)
 800bac4:	f001 000f 	and.w	r0, r1, #15
 800bac8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800bacc:	ed92 7b00 	vldr	d7, [r2]
 800bad0:	ee28 7b07 	vmul.f64	d7, d8, d7
 800bad4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bad8:	4863      	ldr	r0, [pc, #396]	@ (800bc68 <_dtoa_r+0x618>)
 800bada:	1109      	asrs	r1, r1, #4
 800badc:	2400      	movs	r4, #0
 800bade:	2202      	movs	r2, #2
 800bae0:	b929      	cbnz	r1, 800baee <_dtoa_r+0x49e>
 800bae2:	2c00      	cmp	r4, #0
 800bae4:	f43f af49 	beq.w	800b97a <_dtoa_r+0x32a>
 800bae8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800baec:	e745      	b.n	800b97a <_dtoa_r+0x32a>
 800baee:	07ce      	lsls	r6, r1, #31
 800baf0:	d505      	bpl.n	800bafe <_dtoa_r+0x4ae>
 800baf2:	ed90 6b00 	vldr	d6, [r0]
 800baf6:	3201      	adds	r2, #1
 800baf8:	2401      	movs	r4, #1
 800bafa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bafe:	1049      	asrs	r1, r1, #1
 800bb00:	3008      	adds	r0, #8
 800bb02:	e7ed      	b.n	800bae0 <_dtoa_r+0x490>
 800bb04:	2202      	movs	r2, #2
 800bb06:	e738      	b.n	800b97a <_dtoa_r+0x32a>
 800bb08:	f8cd 8010 	str.w	r8, [sp, #16]
 800bb0c:	4654      	mov	r4, sl
 800bb0e:	e754      	b.n	800b9ba <_dtoa_r+0x36a>
 800bb10:	4a54      	ldr	r2, [pc, #336]	@ (800bc64 <_dtoa_r+0x614>)
 800bb12:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800bb16:	ed12 4b02 	vldr	d4, [r2, #-8]
 800bb1a:	9a08      	ldr	r2, [sp, #32]
 800bb1c:	ec41 0b17 	vmov	d7, r0, r1
 800bb20:	443c      	add	r4, r7
 800bb22:	b34a      	cbz	r2, 800bb78 <_dtoa_r+0x528>
 800bb24:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800bb28:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800bb2c:	463e      	mov	r6, r7
 800bb2e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800bb32:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800bb36:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bb3a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bb3e:	ee14 2a90 	vmov	r2, s9
 800bb42:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bb46:	3230      	adds	r2, #48	@ 0x30
 800bb48:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bb4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bb50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb54:	f806 2b01 	strb.w	r2, [r6], #1
 800bb58:	d438      	bmi.n	800bbcc <_dtoa_r+0x57c>
 800bb5a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bb5e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bb62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb66:	d462      	bmi.n	800bc2e <_dtoa_r+0x5de>
 800bb68:	42a6      	cmp	r6, r4
 800bb6a:	f43f af4d 	beq.w	800ba08 <_dtoa_r+0x3b8>
 800bb6e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bb72:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bb76:	e7e0      	b.n	800bb3a <_dtoa_r+0x4ea>
 800bb78:	4621      	mov	r1, r4
 800bb7a:	463e      	mov	r6, r7
 800bb7c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bb80:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800bb84:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bb88:	ee14 2a90 	vmov	r2, s9
 800bb8c:	3230      	adds	r2, #48	@ 0x30
 800bb8e:	f806 2b01 	strb.w	r2, [r6], #1
 800bb92:	42a6      	cmp	r6, r4
 800bb94:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bb98:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bb9c:	d119      	bne.n	800bbd2 <_dtoa_r+0x582>
 800bb9e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800bba2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800bba6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800bbaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbae:	dc3e      	bgt.n	800bc2e <_dtoa_r+0x5de>
 800bbb0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800bbb4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800bbb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbbc:	f57f af24 	bpl.w	800ba08 <_dtoa_r+0x3b8>
 800bbc0:	460e      	mov	r6, r1
 800bbc2:	3901      	subs	r1, #1
 800bbc4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bbc8:	2b30      	cmp	r3, #48	@ 0x30
 800bbca:	d0f9      	beq.n	800bbc0 <_dtoa_r+0x570>
 800bbcc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bbd0:	e758      	b.n	800ba84 <_dtoa_r+0x434>
 800bbd2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bbd6:	e7d5      	b.n	800bb84 <_dtoa_r+0x534>
 800bbd8:	d10b      	bne.n	800bbf2 <_dtoa_r+0x5a2>
 800bbda:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800bbde:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bbe2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bbe6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bbea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbee:	f2c0 8161 	blt.w	800beb4 <_dtoa_r+0x864>
 800bbf2:	2400      	movs	r4, #0
 800bbf4:	4625      	mov	r5, r4
 800bbf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbf8:	43db      	mvns	r3, r3
 800bbfa:	9304      	str	r3, [sp, #16]
 800bbfc:	463e      	mov	r6, r7
 800bbfe:	f04f 0800 	mov.w	r8, #0
 800bc02:	4621      	mov	r1, r4
 800bc04:	4648      	mov	r0, r9
 800bc06:	f000 fc1b 	bl	800c440 <_Bfree>
 800bc0a:	2d00      	cmp	r5, #0
 800bc0c:	d0de      	beq.n	800bbcc <_dtoa_r+0x57c>
 800bc0e:	f1b8 0f00 	cmp.w	r8, #0
 800bc12:	d005      	beq.n	800bc20 <_dtoa_r+0x5d0>
 800bc14:	45a8      	cmp	r8, r5
 800bc16:	d003      	beq.n	800bc20 <_dtoa_r+0x5d0>
 800bc18:	4641      	mov	r1, r8
 800bc1a:	4648      	mov	r0, r9
 800bc1c:	f000 fc10 	bl	800c440 <_Bfree>
 800bc20:	4629      	mov	r1, r5
 800bc22:	4648      	mov	r0, r9
 800bc24:	f000 fc0c 	bl	800c440 <_Bfree>
 800bc28:	e7d0      	b.n	800bbcc <_dtoa_r+0x57c>
 800bc2a:	f8cd 8010 	str.w	r8, [sp, #16]
 800bc2e:	4633      	mov	r3, r6
 800bc30:	461e      	mov	r6, r3
 800bc32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc36:	2a39      	cmp	r2, #57	@ 0x39
 800bc38:	d106      	bne.n	800bc48 <_dtoa_r+0x5f8>
 800bc3a:	429f      	cmp	r7, r3
 800bc3c:	d1f8      	bne.n	800bc30 <_dtoa_r+0x5e0>
 800bc3e:	9a04      	ldr	r2, [sp, #16]
 800bc40:	3201      	adds	r2, #1
 800bc42:	9204      	str	r2, [sp, #16]
 800bc44:	2230      	movs	r2, #48	@ 0x30
 800bc46:	703a      	strb	r2, [r7, #0]
 800bc48:	781a      	ldrb	r2, [r3, #0]
 800bc4a:	3201      	adds	r2, #1
 800bc4c:	701a      	strb	r2, [r3, #0]
 800bc4e:	e7bd      	b.n	800bbcc <_dtoa_r+0x57c>
 800bc50:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bc54:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bc58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc5c:	f47f aeef 	bne.w	800ba3e <_dtoa_r+0x3ee>
 800bc60:	e710      	b.n	800ba84 <_dtoa_r+0x434>
 800bc62:	bf00      	nop
 800bc64:	0800e008 	.word	0x0800e008
 800bc68:	0800dfe0 	.word	0x0800dfe0
 800bc6c:	9908      	ldr	r1, [sp, #32]
 800bc6e:	2900      	cmp	r1, #0
 800bc70:	f000 80e3 	beq.w	800be3a <_dtoa_r+0x7ea>
 800bc74:	9907      	ldr	r1, [sp, #28]
 800bc76:	2901      	cmp	r1, #1
 800bc78:	f300 80c8 	bgt.w	800be0c <_dtoa_r+0x7bc>
 800bc7c:	2d00      	cmp	r5, #0
 800bc7e:	f000 80c1 	beq.w	800be04 <_dtoa_r+0x7b4>
 800bc82:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bc86:	9e05      	ldr	r6, [sp, #20]
 800bc88:	461c      	mov	r4, r3
 800bc8a:	9304      	str	r3, [sp, #16]
 800bc8c:	9b05      	ldr	r3, [sp, #20]
 800bc8e:	4413      	add	r3, r2
 800bc90:	9305      	str	r3, [sp, #20]
 800bc92:	9b06      	ldr	r3, [sp, #24]
 800bc94:	2101      	movs	r1, #1
 800bc96:	4413      	add	r3, r2
 800bc98:	4648      	mov	r0, r9
 800bc9a:	9306      	str	r3, [sp, #24]
 800bc9c:	f000 fc84 	bl	800c5a8 <__i2b>
 800bca0:	9b04      	ldr	r3, [sp, #16]
 800bca2:	4605      	mov	r5, r0
 800bca4:	b166      	cbz	r6, 800bcc0 <_dtoa_r+0x670>
 800bca6:	9a06      	ldr	r2, [sp, #24]
 800bca8:	2a00      	cmp	r2, #0
 800bcaa:	dd09      	ble.n	800bcc0 <_dtoa_r+0x670>
 800bcac:	42b2      	cmp	r2, r6
 800bcae:	9905      	ldr	r1, [sp, #20]
 800bcb0:	bfa8      	it	ge
 800bcb2:	4632      	movge	r2, r6
 800bcb4:	1a89      	subs	r1, r1, r2
 800bcb6:	9105      	str	r1, [sp, #20]
 800bcb8:	9906      	ldr	r1, [sp, #24]
 800bcba:	1ab6      	subs	r6, r6, r2
 800bcbc:	1a8a      	subs	r2, r1, r2
 800bcbe:	9206      	str	r2, [sp, #24]
 800bcc0:	b1fb      	cbz	r3, 800bd02 <_dtoa_r+0x6b2>
 800bcc2:	9a08      	ldr	r2, [sp, #32]
 800bcc4:	2a00      	cmp	r2, #0
 800bcc6:	f000 80bc 	beq.w	800be42 <_dtoa_r+0x7f2>
 800bcca:	b19c      	cbz	r4, 800bcf4 <_dtoa_r+0x6a4>
 800bccc:	4629      	mov	r1, r5
 800bcce:	4622      	mov	r2, r4
 800bcd0:	4648      	mov	r0, r9
 800bcd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcd4:	f000 fd28 	bl	800c728 <__pow5mult>
 800bcd8:	9a01      	ldr	r2, [sp, #4]
 800bcda:	4601      	mov	r1, r0
 800bcdc:	4605      	mov	r5, r0
 800bcde:	4648      	mov	r0, r9
 800bce0:	f000 fc78 	bl	800c5d4 <__multiply>
 800bce4:	9901      	ldr	r1, [sp, #4]
 800bce6:	9004      	str	r0, [sp, #16]
 800bce8:	4648      	mov	r0, r9
 800bcea:	f000 fba9 	bl	800c440 <_Bfree>
 800bcee:	9a04      	ldr	r2, [sp, #16]
 800bcf0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcf2:	9201      	str	r2, [sp, #4]
 800bcf4:	1b1a      	subs	r2, r3, r4
 800bcf6:	d004      	beq.n	800bd02 <_dtoa_r+0x6b2>
 800bcf8:	9901      	ldr	r1, [sp, #4]
 800bcfa:	4648      	mov	r0, r9
 800bcfc:	f000 fd14 	bl	800c728 <__pow5mult>
 800bd00:	9001      	str	r0, [sp, #4]
 800bd02:	2101      	movs	r1, #1
 800bd04:	4648      	mov	r0, r9
 800bd06:	f000 fc4f 	bl	800c5a8 <__i2b>
 800bd0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd0c:	4604      	mov	r4, r0
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	f000 81d0 	beq.w	800c0b4 <_dtoa_r+0xa64>
 800bd14:	461a      	mov	r2, r3
 800bd16:	4601      	mov	r1, r0
 800bd18:	4648      	mov	r0, r9
 800bd1a:	f000 fd05 	bl	800c728 <__pow5mult>
 800bd1e:	9b07      	ldr	r3, [sp, #28]
 800bd20:	2b01      	cmp	r3, #1
 800bd22:	4604      	mov	r4, r0
 800bd24:	f300 8095 	bgt.w	800be52 <_dtoa_r+0x802>
 800bd28:	9b02      	ldr	r3, [sp, #8]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f040 808b 	bne.w	800be46 <_dtoa_r+0x7f6>
 800bd30:	9b03      	ldr	r3, [sp, #12]
 800bd32:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800bd36:	2a00      	cmp	r2, #0
 800bd38:	f040 8087 	bne.w	800be4a <_dtoa_r+0x7fa>
 800bd3c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bd40:	0d12      	lsrs	r2, r2, #20
 800bd42:	0512      	lsls	r2, r2, #20
 800bd44:	2a00      	cmp	r2, #0
 800bd46:	f000 8082 	beq.w	800be4e <_dtoa_r+0x7fe>
 800bd4a:	9b05      	ldr	r3, [sp, #20]
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	9305      	str	r3, [sp, #20]
 800bd50:	9b06      	ldr	r3, [sp, #24]
 800bd52:	3301      	adds	r3, #1
 800bd54:	9306      	str	r3, [sp, #24]
 800bd56:	2301      	movs	r3, #1
 800bd58:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	f000 81af 	beq.w	800c0c0 <_dtoa_r+0xa70>
 800bd62:	6922      	ldr	r2, [r4, #16]
 800bd64:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bd68:	6910      	ldr	r0, [r2, #16]
 800bd6a:	f000 fbd1 	bl	800c510 <__hi0bits>
 800bd6e:	f1c0 0020 	rsb	r0, r0, #32
 800bd72:	9b06      	ldr	r3, [sp, #24]
 800bd74:	4418      	add	r0, r3
 800bd76:	f010 001f 	ands.w	r0, r0, #31
 800bd7a:	d076      	beq.n	800be6a <_dtoa_r+0x81a>
 800bd7c:	f1c0 0220 	rsb	r2, r0, #32
 800bd80:	2a04      	cmp	r2, #4
 800bd82:	dd69      	ble.n	800be58 <_dtoa_r+0x808>
 800bd84:	9b05      	ldr	r3, [sp, #20]
 800bd86:	f1c0 001c 	rsb	r0, r0, #28
 800bd8a:	4403      	add	r3, r0
 800bd8c:	9305      	str	r3, [sp, #20]
 800bd8e:	9b06      	ldr	r3, [sp, #24]
 800bd90:	4406      	add	r6, r0
 800bd92:	4403      	add	r3, r0
 800bd94:	9306      	str	r3, [sp, #24]
 800bd96:	9b05      	ldr	r3, [sp, #20]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	dd05      	ble.n	800bda8 <_dtoa_r+0x758>
 800bd9c:	9901      	ldr	r1, [sp, #4]
 800bd9e:	461a      	mov	r2, r3
 800bda0:	4648      	mov	r0, r9
 800bda2:	f000 fd1b 	bl	800c7dc <__lshift>
 800bda6:	9001      	str	r0, [sp, #4]
 800bda8:	9b06      	ldr	r3, [sp, #24]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	dd05      	ble.n	800bdba <_dtoa_r+0x76a>
 800bdae:	4621      	mov	r1, r4
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	4648      	mov	r0, r9
 800bdb4:	f000 fd12 	bl	800c7dc <__lshift>
 800bdb8:	4604      	mov	r4, r0
 800bdba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d056      	beq.n	800be6e <_dtoa_r+0x81e>
 800bdc0:	9801      	ldr	r0, [sp, #4]
 800bdc2:	4621      	mov	r1, r4
 800bdc4:	f000 fd76 	bl	800c8b4 <__mcmp>
 800bdc8:	2800      	cmp	r0, #0
 800bdca:	da50      	bge.n	800be6e <_dtoa_r+0x81e>
 800bdcc:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800bdd0:	9304      	str	r3, [sp, #16]
 800bdd2:	9901      	ldr	r1, [sp, #4]
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	220a      	movs	r2, #10
 800bdd8:	4648      	mov	r0, r9
 800bdda:	f000 fb53 	bl	800c484 <__multadd>
 800bdde:	9b08      	ldr	r3, [sp, #32]
 800bde0:	9001      	str	r0, [sp, #4]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	f000 816e 	beq.w	800c0c4 <_dtoa_r+0xa74>
 800bde8:	4629      	mov	r1, r5
 800bdea:	2300      	movs	r3, #0
 800bdec:	220a      	movs	r2, #10
 800bdee:	4648      	mov	r0, r9
 800bdf0:	f000 fb48 	bl	800c484 <__multadd>
 800bdf4:	f1bb 0f00 	cmp.w	fp, #0
 800bdf8:	4605      	mov	r5, r0
 800bdfa:	dc64      	bgt.n	800bec6 <_dtoa_r+0x876>
 800bdfc:	9b07      	ldr	r3, [sp, #28]
 800bdfe:	2b02      	cmp	r3, #2
 800be00:	dc3e      	bgt.n	800be80 <_dtoa_r+0x830>
 800be02:	e060      	b.n	800bec6 <_dtoa_r+0x876>
 800be04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be06:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800be0a:	e73c      	b.n	800bc86 <_dtoa_r+0x636>
 800be0c:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 800be10:	42a3      	cmp	r3, r4
 800be12:	bfbf      	itttt	lt
 800be14:	1ae2      	sublt	r2, r4, r3
 800be16:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800be18:	189b      	addlt	r3, r3, r2
 800be1a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800be1c:	bfae      	itee	ge
 800be1e:	1b1c      	subge	r4, r3, r4
 800be20:	4623      	movlt	r3, r4
 800be22:	2400      	movlt	r4, #0
 800be24:	f1ba 0f00 	cmp.w	sl, #0
 800be28:	bfb5      	itete	lt
 800be2a:	9a05      	ldrlt	r2, [sp, #20]
 800be2c:	9e05      	ldrge	r6, [sp, #20]
 800be2e:	eba2 060a 	sublt.w	r6, r2, sl
 800be32:	4652      	movge	r2, sl
 800be34:	bfb8      	it	lt
 800be36:	2200      	movlt	r2, #0
 800be38:	e727      	b.n	800bc8a <_dtoa_r+0x63a>
 800be3a:	9e05      	ldr	r6, [sp, #20]
 800be3c:	9d08      	ldr	r5, [sp, #32]
 800be3e:	461c      	mov	r4, r3
 800be40:	e730      	b.n	800bca4 <_dtoa_r+0x654>
 800be42:	461a      	mov	r2, r3
 800be44:	e758      	b.n	800bcf8 <_dtoa_r+0x6a8>
 800be46:	2300      	movs	r3, #0
 800be48:	e786      	b.n	800bd58 <_dtoa_r+0x708>
 800be4a:	9b02      	ldr	r3, [sp, #8]
 800be4c:	e784      	b.n	800bd58 <_dtoa_r+0x708>
 800be4e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800be50:	e783      	b.n	800bd5a <_dtoa_r+0x70a>
 800be52:	2300      	movs	r3, #0
 800be54:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be56:	e784      	b.n	800bd62 <_dtoa_r+0x712>
 800be58:	d09d      	beq.n	800bd96 <_dtoa_r+0x746>
 800be5a:	9b05      	ldr	r3, [sp, #20]
 800be5c:	321c      	adds	r2, #28
 800be5e:	4413      	add	r3, r2
 800be60:	9305      	str	r3, [sp, #20]
 800be62:	9b06      	ldr	r3, [sp, #24]
 800be64:	4416      	add	r6, r2
 800be66:	4413      	add	r3, r2
 800be68:	e794      	b.n	800bd94 <_dtoa_r+0x744>
 800be6a:	4602      	mov	r2, r0
 800be6c:	e7f5      	b.n	800be5a <_dtoa_r+0x80a>
 800be6e:	f1ba 0f00 	cmp.w	sl, #0
 800be72:	f8cd 8010 	str.w	r8, [sp, #16]
 800be76:	46d3      	mov	fp, sl
 800be78:	dc21      	bgt.n	800bebe <_dtoa_r+0x86e>
 800be7a:	9b07      	ldr	r3, [sp, #28]
 800be7c:	2b02      	cmp	r3, #2
 800be7e:	dd1e      	ble.n	800bebe <_dtoa_r+0x86e>
 800be80:	f1bb 0f00 	cmp.w	fp, #0
 800be84:	f47f aeb7 	bne.w	800bbf6 <_dtoa_r+0x5a6>
 800be88:	4621      	mov	r1, r4
 800be8a:	465b      	mov	r3, fp
 800be8c:	2205      	movs	r2, #5
 800be8e:	4648      	mov	r0, r9
 800be90:	f000 faf8 	bl	800c484 <__multadd>
 800be94:	4601      	mov	r1, r0
 800be96:	4604      	mov	r4, r0
 800be98:	9801      	ldr	r0, [sp, #4]
 800be9a:	f000 fd0b 	bl	800c8b4 <__mcmp>
 800be9e:	2800      	cmp	r0, #0
 800bea0:	f77f aea9 	ble.w	800bbf6 <_dtoa_r+0x5a6>
 800bea4:	463e      	mov	r6, r7
 800bea6:	2331      	movs	r3, #49	@ 0x31
 800bea8:	f806 3b01 	strb.w	r3, [r6], #1
 800beac:	9b04      	ldr	r3, [sp, #16]
 800beae:	3301      	adds	r3, #1
 800beb0:	9304      	str	r3, [sp, #16]
 800beb2:	e6a4      	b.n	800bbfe <_dtoa_r+0x5ae>
 800beb4:	f8cd 8010 	str.w	r8, [sp, #16]
 800beb8:	4654      	mov	r4, sl
 800beba:	4625      	mov	r5, r4
 800bebc:	e7f2      	b.n	800bea4 <_dtoa_r+0x854>
 800bebe:	9b08      	ldr	r3, [sp, #32]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	f000 8103 	beq.w	800c0cc <_dtoa_r+0xa7c>
 800bec6:	2e00      	cmp	r6, #0
 800bec8:	dd05      	ble.n	800bed6 <_dtoa_r+0x886>
 800beca:	4629      	mov	r1, r5
 800becc:	4632      	mov	r2, r6
 800bece:	4648      	mov	r0, r9
 800bed0:	f000 fc84 	bl	800c7dc <__lshift>
 800bed4:	4605      	mov	r5, r0
 800bed6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d058      	beq.n	800bf8e <_dtoa_r+0x93e>
 800bedc:	6869      	ldr	r1, [r5, #4]
 800bede:	4648      	mov	r0, r9
 800bee0:	f000 fa6e 	bl	800c3c0 <_Balloc>
 800bee4:	4606      	mov	r6, r0
 800bee6:	b928      	cbnz	r0, 800bef4 <_dtoa_r+0x8a4>
 800bee8:	4b82      	ldr	r3, [pc, #520]	@ (800c0f4 <_dtoa_r+0xaa4>)
 800beea:	4602      	mov	r2, r0
 800beec:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bef0:	f7ff bbc7 	b.w	800b682 <_dtoa_r+0x32>
 800bef4:	692a      	ldr	r2, [r5, #16]
 800bef6:	3202      	adds	r2, #2
 800bef8:	0092      	lsls	r2, r2, #2
 800befa:	f105 010c 	add.w	r1, r5, #12
 800befe:	300c      	adds	r0, #12
 800bf00:	f000 fe7a 	bl	800cbf8 <memcpy>
 800bf04:	2201      	movs	r2, #1
 800bf06:	4631      	mov	r1, r6
 800bf08:	4648      	mov	r0, r9
 800bf0a:	f000 fc67 	bl	800c7dc <__lshift>
 800bf0e:	1c7b      	adds	r3, r7, #1
 800bf10:	9305      	str	r3, [sp, #20]
 800bf12:	eb07 030b 	add.w	r3, r7, fp
 800bf16:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf18:	9b02      	ldr	r3, [sp, #8]
 800bf1a:	f003 0301 	and.w	r3, r3, #1
 800bf1e:	46a8      	mov	r8, r5
 800bf20:	9308      	str	r3, [sp, #32]
 800bf22:	4605      	mov	r5, r0
 800bf24:	9b05      	ldr	r3, [sp, #20]
 800bf26:	9801      	ldr	r0, [sp, #4]
 800bf28:	4621      	mov	r1, r4
 800bf2a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800bf2e:	f7ff fb06 	bl	800b53e <quorem>
 800bf32:	4641      	mov	r1, r8
 800bf34:	9002      	str	r0, [sp, #8]
 800bf36:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bf3a:	9801      	ldr	r0, [sp, #4]
 800bf3c:	f000 fcba 	bl	800c8b4 <__mcmp>
 800bf40:	462a      	mov	r2, r5
 800bf42:	9006      	str	r0, [sp, #24]
 800bf44:	4621      	mov	r1, r4
 800bf46:	4648      	mov	r0, r9
 800bf48:	f000 fcd0 	bl	800c8ec <__mdiff>
 800bf4c:	68c2      	ldr	r2, [r0, #12]
 800bf4e:	4606      	mov	r6, r0
 800bf50:	b9fa      	cbnz	r2, 800bf92 <_dtoa_r+0x942>
 800bf52:	4601      	mov	r1, r0
 800bf54:	9801      	ldr	r0, [sp, #4]
 800bf56:	f000 fcad 	bl	800c8b4 <__mcmp>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	4631      	mov	r1, r6
 800bf5e:	4648      	mov	r0, r9
 800bf60:	920a      	str	r2, [sp, #40]	@ 0x28
 800bf62:	f000 fa6d 	bl	800c440 <_Bfree>
 800bf66:	9b07      	ldr	r3, [sp, #28]
 800bf68:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf6a:	9e05      	ldr	r6, [sp, #20]
 800bf6c:	ea43 0102 	orr.w	r1, r3, r2
 800bf70:	9b08      	ldr	r3, [sp, #32]
 800bf72:	4319      	orrs	r1, r3
 800bf74:	d10f      	bne.n	800bf96 <_dtoa_r+0x946>
 800bf76:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bf7a:	d028      	beq.n	800bfce <_dtoa_r+0x97e>
 800bf7c:	9b06      	ldr	r3, [sp, #24]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	dd02      	ble.n	800bf88 <_dtoa_r+0x938>
 800bf82:	9b02      	ldr	r3, [sp, #8]
 800bf84:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800bf88:	f88b a000 	strb.w	sl, [fp]
 800bf8c:	e639      	b.n	800bc02 <_dtoa_r+0x5b2>
 800bf8e:	4628      	mov	r0, r5
 800bf90:	e7bd      	b.n	800bf0e <_dtoa_r+0x8be>
 800bf92:	2201      	movs	r2, #1
 800bf94:	e7e2      	b.n	800bf5c <_dtoa_r+0x90c>
 800bf96:	9b06      	ldr	r3, [sp, #24]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	db04      	blt.n	800bfa6 <_dtoa_r+0x956>
 800bf9c:	9907      	ldr	r1, [sp, #28]
 800bf9e:	430b      	orrs	r3, r1
 800bfa0:	9908      	ldr	r1, [sp, #32]
 800bfa2:	430b      	orrs	r3, r1
 800bfa4:	d120      	bne.n	800bfe8 <_dtoa_r+0x998>
 800bfa6:	2a00      	cmp	r2, #0
 800bfa8:	ddee      	ble.n	800bf88 <_dtoa_r+0x938>
 800bfaa:	9901      	ldr	r1, [sp, #4]
 800bfac:	2201      	movs	r2, #1
 800bfae:	4648      	mov	r0, r9
 800bfb0:	f000 fc14 	bl	800c7dc <__lshift>
 800bfb4:	4621      	mov	r1, r4
 800bfb6:	9001      	str	r0, [sp, #4]
 800bfb8:	f000 fc7c 	bl	800c8b4 <__mcmp>
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	dc03      	bgt.n	800bfc8 <_dtoa_r+0x978>
 800bfc0:	d1e2      	bne.n	800bf88 <_dtoa_r+0x938>
 800bfc2:	f01a 0f01 	tst.w	sl, #1
 800bfc6:	d0df      	beq.n	800bf88 <_dtoa_r+0x938>
 800bfc8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bfcc:	d1d9      	bne.n	800bf82 <_dtoa_r+0x932>
 800bfce:	2339      	movs	r3, #57	@ 0x39
 800bfd0:	f88b 3000 	strb.w	r3, [fp]
 800bfd4:	4633      	mov	r3, r6
 800bfd6:	461e      	mov	r6, r3
 800bfd8:	3b01      	subs	r3, #1
 800bfda:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bfde:	2a39      	cmp	r2, #57	@ 0x39
 800bfe0:	d053      	beq.n	800c08a <_dtoa_r+0xa3a>
 800bfe2:	3201      	adds	r2, #1
 800bfe4:	701a      	strb	r2, [r3, #0]
 800bfe6:	e60c      	b.n	800bc02 <_dtoa_r+0x5b2>
 800bfe8:	2a00      	cmp	r2, #0
 800bfea:	dd07      	ble.n	800bffc <_dtoa_r+0x9ac>
 800bfec:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bff0:	d0ed      	beq.n	800bfce <_dtoa_r+0x97e>
 800bff2:	f10a 0301 	add.w	r3, sl, #1
 800bff6:	f88b 3000 	strb.w	r3, [fp]
 800bffa:	e602      	b.n	800bc02 <_dtoa_r+0x5b2>
 800bffc:	9b05      	ldr	r3, [sp, #20]
 800bffe:	9a05      	ldr	r2, [sp, #20]
 800c000:	f803 ac01 	strb.w	sl, [r3, #-1]
 800c004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c006:	4293      	cmp	r3, r2
 800c008:	d029      	beq.n	800c05e <_dtoa_r+0xa0e>
 800c00a:	9901      	ldr	r1, [sp, #4]
 800c00c:	2300      	movs	r3, #0
 800c00e:	220a      	movs	r2, #10
 800c010:	4648      	mov	r0, r9
 800c012:	f000 fa37 	bl	800c484 <__multadd>
 800c016:	45a8      	cmp	r8, r5
 800c018:	9001      	str	r0, [sp, #4]
 800c01a:	f04f 0300 	mov.w	r3, #0
 800c01e:	f04f 020a 	mov.w	r2, #10
 800c022:	4641      	mov	r1, r8
 800c024:	4648      	mov	r0, r9
 800c026:	d107      	bne.n	800c038 <_dtoa_r+0x9e8>
 800c028:	f000 fa2c 	bl	800c484 <__multadd>
 800c02c:	4680      	mov	r8, r0
 800c02e:	4605      	mov	r5, r0
 800c030:	9b05      	ldr	r3, [sp, #20]
 800c032:	3301      	adds	r3, #1
 800c034:	9305      	str	r3, [sp, #20]
 800c036:	e775      	b.n	800bf24 <_dtoa_r+0x8d4>
 800c038:	f000 fa24 	bl	800c484 <__multadd>
 800c03c:	4629      	mov	r1, r5
 800c03e:	4680      	mov	r8, r0
 800c040:	2300      	movs	r3, #0
 800c042:	220a      	movs	r2, #10
 800c044:	4648      	mov	r0, r9
 800c046:	f000 fa1d 	bl	800c484 <__multadd>
 800c04a:	4605      	mov	r5, r0
 800c04c:	e7f0      	b.n	800c030 <_dtoa_r+0x9e0>
 800c04e:	f1bb 0f00 	cmp.w	fp, #0
 800c052:	bfcc      	ite	gt
 800c054:	465e      	movgt	r6, fp
 800c056:	2601      	movle	r6, #1
 800c058:	443e      	add	r6, r7
 800c05a:	f04f 0800 	mov.w	r8, #0
 800c05e:	9901      	ldr	r1, [sp, #4]
 800c060:	2201      	movs	r2, #1
 800c062:	4648      	mov	r0, r9
 800c064:	f000 fbba 	bl	800c7dc <__lshift>
 800c068:	4621      	mov	r1, r4
 800c06a:	9001      	str	r0, [sp, #4]
 800c06c:	f000 fc22 	bl	800c8b4 <__mcmp>
 800c070:	2800      	cmp	r0, #0
 800c072:	dcaf      	bgt.n	800bfd4 <_dtoa_r+0x984>
 800c074:	d102      	bne.n	800c07c <_dtoa_r+0xa2c>
 800c076:	f01a 0f01 	tst.w	sl, #1
 800c07a:	d1ab      	bne.n	800bfd4 <_dtoa_r+0x984>
 800c07c:	4633      	mov	r3, r6
 800c07e:	461e      	mov	r6, r3
 800c080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c084:	2a30      	cmp	r2, #48	@ 0x30
 800c086:	d0fa      	beq.n	800c07e <_dtoa_r+0xa2e>
 800c088:	e5bb      	b.n	800bc02 <_dtoa_r+0x5b2>
 800c08a:	429f      	cmp	r7, r3
 800c08c:	d1a3      	bne.n	800bfd6 <_dtoa_r+0x986>
 800c08e:	9b04      	ldr	r3, [sp, #16]
 800c090:	3301      	adds	r3, #1
 800c092:	9304      	str	r3, [sp, #16]
 800c094:	2331      	movs	r3, #49	@ 0x31
 800c096:	703b      	strb	r3, [r7, #0]
 800c098:	e5b3      	b.n	800bc02 <_dtoa_r+0x5b2>
 800c09a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c09c:	4f16      	ldr	r7, [pc, #88]	@ (800c0f8 <_dtoa_r+0xaa8>)
 800c09e:	b11b      	cbz	r3, 800c0a8 <_dtoa_r+0xa58>
 800c0a0:	f107 0308 	add.w	r3, r7, #8
 800c0a4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c0a6:	6013      	str	r3, [r2, #0]
 800c0a8:	4638      	mov	r0, r7
 800c0aa:	b011      	add	sp, #68	@ 0x44
 800c0ac:	ecbd 8b02 	vpop	{d8}
 800c0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0b4:	9b07      	ldr	r3, [sp, #28]
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	f77f ae36 	ble.w	800bd28 <_dtoa_r+0x6d8>
 800c0bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c0c0:	2001      	movs	r0, #1
 800c0c2:	e656      	b.n	800bd72 <_dtoa_r+0x722>
 800c0c4:	f1bb 0f00 	cmp.w	fp, #0
 800c0c8:	f77f aed7 	ble.w	800be7a <_dtoa_r+0x82a>
 800c0cc:	463e      	mov	r6, r7
 800c0ce:	9801      	ldr	r0, [sp, #4]
 800c0d0:	4621      	mov	r1, r4
 800c0d2:	f7ff fa34 	bl	800b53e <quorem>
 800c0d6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c0da:	f806 ab01 	strb.w	sl, [r6], #1
 800c0de:	1bf2      	subs	r2, r6, r7
 800c0e0:	4593      	cmp	fp, r2
 800c0e2:	ddb4      	ble.n	800c04e <_dtoa_r+0x9fe>
 800c0e4:	9901      	ldr	r1, [sp, #4]
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	220a      	movs	r2, #10
 800c0ea:	4648      	mov	r0, r9
 800c0ec:	f000 f9ca 	bl	800c484 <__multadd>
 800c0f0:	9001      	str	r0, [sp, #4]
 800c0f2:	e7ec      	b.n	800c0ce <_dtoa_r+0xa7e>
 800c0f4:	0800df68 	.word	0x0800df68
 800c0f8:	0800deec 	.word	0x0800deec

0800c0fc <malloc>:
 800c0fc:	4b02      	ldr	r3, [pc, #8]	@ (800c108 <malloc+0xc>)
 800c0fe:	4601      	mov	r1, r0
 800c100:	6818      	ldr	r0, [r3, #0]
 800c102:	f000 b825 	b.w	800c150 <_malloc_r>
 800c106:	bf00      	nop
 800c108:	2400002c 	.word	0x2400002c

0800c10c <sbrk_aligned>:
 800c10c:	b570      	push	{r4, r5, r6, lr}
 800c10e:	4e0f      	ldr	r6, [pc, #60]	@ (800c14c <sbrk_aligned+0x40>)
 800c110:	460c      	mov	r4, r1
 800c112:	6831      	ldr	r1, [r6, #0]
 800c114:	4605      	mov	r5, r0
 800c116:	b911      	cbnz	r1, 800c11e <sbrk_aligned+0x12>
 800c118:	f000 fd4c 	bl	800cbb4 <_sbrk_r>
 800c11c:	6030      	str	r0, [r6, #0]
 800c11e:	4621      	mov	r1, r4
 800c120:	4628      	mov	r0, r5
 800c122:	f000 fd47 	bl	800cbb4 <_sbrk_r>
 800c126:	1c43      	adds	r3, r0, #1
 800c128:	d103      	bne.n	800c132 <sbrk_aligned+0x26>
 800c12a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c12e:	4620      	mov	r0, r4
 800c130:	bd70      	pop	{r4, r5, r6, pc}
 800c132:	1cc4      	adds	r4, r0, #3
 800c134:	f024 0403 	bic.w	r4, r4, #3
 800c138:	42a0      	cmp	r0, r4
 800c13a:	d0f8      	beq.n	800c12e <sbrk_aligned+0x22>
 800c13c:	1a21      	subs	r1, r4, r0
 800c13e:	4628      	mov	r0, r5
 800c140:	f000 fd38 	bl	800cbb4 <_sbrk_r>
 800c144:	3001      	adds	r0, #1
 800c146:	d1f2      	bne.n	800c12e <sbrk_aligned+0x22>
 800c148:	e7ef      	b.n	800c12a <sbrk_aligned+0x1e>
 800c14a:	bf00      	nop
 800c14c:	2400370c 	.word	0x2400370c

0800c150 <_malloc_r>:
 800c150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c154:	1ccd      	adds	r5, r1, #3
 800c156:	f025 0503 	bic.w	r5, r5, #3
 800c15a:	3508      	adds	r5, #8
 800c15c:	2d0c      	cmp	r5, #12
 800c15e:	bf38      	it	cc
 800c160:	250c      	movcc	r5, #12
 800c162:	2d00      	cmp	r5, #0
 800c164:	4606      	mov	r6, r0
 800c166:	db01      	blt.n	800c16c <_malloc_r+0x1c>
 800c168:	42a9      	cmp	r1, r5
 800c16a:	d904      	bls.n	800c176 <_malloc_r+0x26>
 800c16c:	230c      	movs	r3, #12
 800c16e:	6033      	str	r3, [r6, #0]
 800c170:	2000      	movs	r0, #0
 800c172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c176:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c24c <_malloc_r+0xfc>
 800c17a:	f000 f915 	bl	800c3a8 <__malloc_lock>
 800c17e:	f8d8 3000 	ldr.w	r3, [r8]
 800c182:	461c      	mov	r4, r3
 800c184:	bb44      	cbnz	r4, 800c1d8 <_malloc_r+0x88>
 800c186:	4629      	mov	r1, r5
 800c188:	4630      	mov	r0, r6
 800c18a:	f7ff ffbf 	bl	800c10c <sbrk_aligned>
 800c18e:	1c43      	adds	r3, r0, #1
 800c190:	4604      	mov	r4, r0
 800c192:	d158      	bne.n	800c246 <_malloc_r+0xf6>
 800c194:	f8d8 4000 	ldr.w	r4, [r8]
 800c198:	4627      	mov	r7, r4
 800c19a:	2f00      	cmp	r7, #0
 800c19c:	d143      	bne.n	800c226 <_malloc_r+0xd6>
 800c19e:	2c00      	cmp	r4, #0
 800c1a0:	d04b      	beq.n	800c23a <_malloc_r+0xea>
 800c1a2:	6823      	ldr	r3, [r4, #0]
 800c1a4:	4639      	mov	r1, r7
 800c1a6:	4630      	mov	r0, r6
 800c1a8:	eb04 0903 	add.w	r9, r4, r3
 800c1ac:	f000 fd02 	bl	800cbb4 <_sbrk_r>
 800c1b0:	4581      	cmp	r9, r0
 800c1b2:	d142      	bne.n	800c23a <_malloc_r+0xea>
 800c1b4:	6821      	ldr	r1, [r4, #0]
 800c1b6:	1a6d      	subs	r5, r5, r1
 800c1b8:	4629      	mov	r1, r5
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	f7ff ffa6 	bl	800c10c <sbrk_aligned>
 800c1c0:	3001      	adds	r0, #1
 800c1c2:	d03a      	beq.n	800c23a <_malloc_r+0xea>
 800c1c4:	6823      	ldr	r3, [r4, #0]
 800c1c6:	442b      	add	r3, r5
 800c1c8:	6023      	str	r3, [r4, #0]
 800c1ca:	f8d8 3000 	ldr.w	r3, [r8]
 800c1ce:	685a      	ldr	r2, [r3, #4]
 800c1d0:	bb62      	cbnz	r2, 800c22c <_malloc_r+0xdc>
 800c1d2:	f8c8 7000 	str.w	r7, [r8]
 800c1d6:	e00f      	b.n	800c1f8 <_malloc_r+0xa8>
 800c1d8:	6822      	ldr	r2, [r4, #0]
 800c1da:	1b52      	subs	r2, r2, r5
 800c1dc:	d420      	bmi.n	800c220 <_malloc_r+0xd0>
 800c1de:	2a0b      	cmp	r2, #11
 800c1e0:	d917      	bls.n	800c212 <_malloc_r+0xc2>
 800c1e2:	1961      	adds	r1, r4, r5
 800c1e4:	42a3      	cmp	r3, r4
 800c1e6:	6025      	str	r5, [r4, #0]
 800c1e8:	bf18      	it	ne
 800c1ea:	6059      	strne	r1, [r3, #4]
 800c1ec:	6863      	ldr	r3, [r4, #4]
 800c1ee:	bf08      	it	eq
 800c1f0:	f8c8 1000 	streq.w	r1, [r8]
 800c1f4:	5162      	str	r2, [r4, r5]
 800c1f6:	604b      	str	r3, [r1, #4]
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	f000 f8db 	bl	800c3b4 <__malloc_unlock>
 800c1fe:	f104 000b 	add.w	r0, r4, #11
 800c202:	1d23      	adds	r3, r4, #4
 800c204:	f020 0007 	bic.w	r0, r0, #7
 800c208:	1ac2      	subs	r2, r0, r3
 800c20a:	bf1c      	itt	ne
 800c20c:	1a1b      	subne	r3, r3, r0
 800c20e:	50a3      	strne	r3, [r4, r2]
 800c210:	e7af      	b.n	800c172 <_malloc_r+0x22>
 800c212:	6862      	ldr	r2, [r4, #4]
 800c214:	42a3      	cmp	r3, r4
 800c216:	bf0c      	ite	eq
 800c218:	f8c8 2000 	streq.w	r2, [r8]
 800c21c:	605a      	strne	r2, [r3, #4]
 800c21e:	e7eb      	b.n	800c1f8 <_malloc_r+0xa8>
 800c220:	4623      	mov	r3, r4
 800c222:	6864      	ldr	r4, [r4, #4]
 800c224:	e7ae      	b.n	800c184 <_malloc_r+0x34>
 800c226:	463c      	mov	r4, r7
 800c228:	687f      	ldr	r7, [r7, #4]
 800c22a:	e7b6      	b.n	800c19a <_malloc_r+0x4a>
 800c22c:	461a      	mov	r2, r3
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	42a3      	cmp	r3, r4
 800c232:	d1fb      	bne.n	800c22c <_malloc_r+0xdc>
 800c234:	2300      	movs	r3, #0
 800c236:	6053      	str	r3, [r2, #4]
 800c238:	e7de      	b.n	800c1f8 <_malloc_r+0xa8>
 800c23a:	230c      	movs	r3, #12
 800c23c:	6033      	str	r3, [r6, #0]
 800c23e:	4630      	mov	r0, r6
 800c240:	f000 f8b8 	bl	800c3b4 <__malloc_unlock>
 800c244:	e794      	b.n	800c170 <_malloc_r+0x20>
 800c246:	6005      	str	r5, [r0, #0]
 800c248:	e7d6      	b.n	800c1f8 <_malloc_r+0xa8>
 800c24a:	bf00      	nop
 800c24c:	24003710 	.word	0x24003710

0800c250 <__sflush_r>:
 800c250:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c258:	0716      	lsls	r6, r2, #28
 800c25a:	4605      	mov	r5, r0
 800c25c:	460c      	mov	r4, r1
 800c25e:	d454      	bmi.n	800c30a <__sflush_r+0xba>
 800c260:	684b      	ldr	r3, [r1, #4]
 800c262:	2b00      	cmp	r3, #0
 800c264:	dc02      	bgt.n	800c26c <__sflush_r+0x1c>
 800c266:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c268:	2b00      	cmp	r3, #0
 800c26a:	dd48      	ble.n	800c2fe <__sflush_r+0xae>
 800c26c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c26e:	2e00      	cmp	r6, #0
 800c270:	d045      	beq.n	800c2fe <__sflush_r+0xae>
 800c272:	2300      	movs	r3, #0
 800c274:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c278:	682f      	ldr	r7, [r5, #0]
 800c27a:	6a21      	ldr	r1, [r4, #32]
 800c27c:	602b      	str	r3, [r5, #0]
 800c27e:	d030      	beq.n	800c2e2 <__sflush_r+0x92>
 800c280:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c282:	89a3      	ldrh	r3, [r4, #12]
 800c284:	0759      	lsls	r1, r3, #29
 800c286:	d505      	bpl.n	800c294 <__sflush_r+0x44>
 800c288:	6863      	ldr	r3, [r4, #4]
 800c28a:	1ad2      	subs	r2, r2, r3
 800c28c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c28e:	b10b      	cbz	r3, 800c294 <__sflush_r+0x44>
 800c290:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c292:	1ad2      	subs	r2, r2, r3
 800c294:	2300      	movs	r3, #0
 800c296:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c298:	6a21      	ldr	r1, [r4, #32]
 800c29a:	4628      	mov	r0, r5
 800c29c:	47b0      	blx	r6
 800c29e:	1c43      	adds	r3, r0, #1
 800c2a0:	89a3      	ldrh	r3, [r4, #12]
 800c2a2:	d106      	bne.n	800c2b2 <__sflush_r+0x62>
 800c2a4:	6829      	ldr	r1, [r5, #0]
 800c2a6:	291d      	cmp	r1, #29
 800c2a8:	d82b      	bhi.n	800c302 <__sflush_r+0xb2>
 800c2aa:	4a2a      	ldr	r2, [pc, #168]	@ (800c354 <__sflush_r+0x104>)
 800c2ac:	410a      	asrs	r2, r1
 800c2ae:	07d6      	lsls	r6, r2, #31
 800c2b0:	d427      	bmi.n	800c302 <__sflush_r+0xb2>
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	6062      	str	r2, [r4, #4]
 800c2b6:	04d9      	lsls	r1, r3, #19
 800c2b8:	6922      	ldr	r2, [r4, #16]
 800c2ba:	6022      	str	r2, [r4, #0]
 800c2bc:	d504      	bpl.n	800c2c8 <__sflush_r+0x78>
 800c2be:	1c42      	adds	r2, r0, #1
 800c2c0:	d101      	bne.n	800c2c6 <__sflush_r+0x76>
 800c2c2:	682b      	ldr	r3, [r5, #0]
 800c2c4:	b903      	cbnz	r3, 800c2c8 <__sflush_r+0x78>
 800c2c6:	6560      	str	r0, [r4, #84]	@ 0x54
 800c2c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c2ca:	602f      	str	r7, [r5, #0]
 800c2cc:	b1b9      	cbz	r1, 800c2fe <__sflush_r+0xae>
 800c2ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2d2:	4299      	cmp	r1, r3
 800c2d4:	d002      	beq.n	800c2dc <__sflush_r+0x8c>
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	f000 fcce 	bl	800cc78 <_free_r>
 800c2dc:	2300      	movs	r3, #0
 800c2de:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2e0:	e00d      	b.n	800c2fe <__sflush_r+0xae>
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	47b0      	blx	r6
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	1c50      	adds	r0, r2, #1
 800c2ec:	d1c9      	bne.n	800c282 <__sflush_r+0x32>
 800c2ee:	682b      	ldr	r3, [r5, #0]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d0c6      	beq.n	800c282 <__sflush_r+0x32>
 800c2f4:	2b1d      	cmp	r3, #29
 800c2f6:	d001      	beq.n	800c2fc <__sflush_r+0xac>
 800c2f8:	2b16      	cmp	r3, #22
 800c2fa:	d11e      	bne.n	800c33a <__sflush_r+0xea>
 800c2fc:	602f      	str	r7, [r5, #0]
 800c2fe:	2000      	movs	r0, #0
 800c300:	e022      	b.n	800c348 <__sflush_r+0xf8>
 800c302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c306:	b21b      	sxth	r3, r3
 800c308:	e01b      	b.n	800c342 <__sflush_r+0xf2>
 800c30a:	690f      	ldr	r7, [r1, #16]
 800c30c:	2f00      	cmp	r7, #0
 800c30e:	d0f6      	beq.n	800c2fe <__sflush_r+0xae>
 800c310:	0793      	lsls	r3, r2, #30
 800c312:	680e      	ldr	r6, [r1, #0]
 800c314:	bf08      	it	eq
 800c316:	694b      	ldreq	r3, [r1, #20]
 800c318:	600f      	str	r7, [r1, #0]
 800c31a:	bf18      	it	ne
 800c31c:	2300      	movne	r3, #0
 800c31e:	eba6 0807 	sub.w	r8, r6, r7
 800c322:	608b      	str	r3, [r1, #8]
 800c324:	f1b8 0f00 	cmp.w	r8, #0
 800c328:	dde9      	ble.n	800c2fe <__sflush_r+0xae>
 800c32a:	6a21      	ldr	r1, [r4, #32]
 800c32c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c32e:	4643      	mov	r3, r8
 800c330:	463a      	mov	r2, r7
 800c332:	4628      	mov	r0, r5
 800c334:	47b0      	blx	r6
 800c336:	2800      	cmp	r0, #0
 800c338:	dc08      	bgt.n	800c34c <__sflush_r+0xfc>
 800c33a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c33e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c342:	81a3      	strh	r3, [r4, #12]
 800c344:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c34c:	4407      	add	r7, r0
 800c34e:	eba8 0800 	sub.w	r8, r8, r0
 800c352:	e7e7      	b.n	800c324 <__sflush_r+0xd4>
 800c354:	dfbffffe 	.word	0xdfbffffe

0800c358 <_fflush_r>:
 800c358:	b538      	push	{r3, r4, r5, lr}
 800c35a:	690b      	ldr	r3, [r1, #16]
 800c35c:	4605      	mov	r5, r0
 800c35e:	460c      	mov	r4, r1
 800c360:	b913      	cbnz	r3, 800c368 <_fflush_r+0x10>
 800c362:	2500      	movs	r5, #0
 800c364:	4628      	mov	r0, r5
 800c366:	bd38      	pop	{r3, r4, r5, pc}
 800c368:	b118      	cbz	r0, 800c372 <_fflush_r+0x1a>
 800c36a:	6a03      	ldr	r3, [r0, #32]
 800c36c:	b90b      	cbnz	r3, 800c372 <_fflush_r+0x1a>
 800c36e:	f7ff f877 	bl	800b460 <__sinit>
 800c372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d0f3      	beq.n	800c362 <_fflush_r+0xa>
 800c37a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c37c:	07d0      	lsls	r0, r2, #31
 800c37e:	d404      	bmi.n	800c38a <_fflush_r+0x32>
 800c380:	0599      	lsls	r1, r3, #22
 800c382:	d402      	bmi.n	800c38a <_fflush_r+0x32>
 800c384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c386:	f7ff f8d8 	bl	800b53a <__retarget_lock_acquire_recursive>
 800c38a:	4628      	mov	r0, r5
 800c38c:	4621      	mov	r1, r4
 800c38e:	f7ff ff5f 	bl	800c250 <__sflush_r>
 800c392:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c394:	07da      	lsls	r2, r3, #31
 800c396:	4605      	mov	r5, r0
 800c398:	d4e4      	bmi.n	800c364 <_fflush_r+0xc>
 800c39a:	89a3      	ldrh	r3, [r4, #12]
 800c39c:	059b      	lsls	r3, r3, #22
 800c39e:	d4e1      	bmi.n	800c364 <_fflush_r+0xc>
 800c3a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c3a2:	f7ff f8cb 	bl	800b53c <__retarget_lock_release_recursive>
 800c3a6:	e7dd      	b.n	800c364 <_fflush_r+0xc>

0800c3a8 <__malloc_lock>:
 800c3a8:	4801      	ldr	r0, [pc, #4]	@ (800c3b0 <__malloc_lock+0x8>)
 800c3aa:	f7ff b8c6 	b.w	800b53a <__retarget_lock_acquire_recursive>
 800c3ae:	bf00      	nop
 800c3b0:	24003708 	.word	0x24003708

0800c3b4 <__malloc_unlock>:
 800c3b4:	4801      	ldr	r0, [pc, #4]	@ (800c3bc <__malloc_unlock+0x8>)
 800c3b6:	f7ff b8c1 	b.w	800b53c <__retarget_lock_release_recursive>
 800c3ba:	bf00      	nop
 800c3bc:	24003708 	.word	0x24003708

0800c3c0 <_Balloc>:
 800c3c0:	b570      	push	{r4, r5, r6, lr}
 800c3c2:	69c6      	ldr	r6, [r0, #28]
 800c3c4:	4604      	mov	r4, r0
 800c3c6:	460d      	mov	r5, r1
 800c3c8:	b976      	cbnz	r6, 800c3e8 <_Balloc+0x28>
 800c3ca:	2010      	movs	r0, #16
 800c3cc:	f7ff fe96 	bl	800c0fc <malloc>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	61e0      	str	r0, [r4, #28]
 800c3d4:	b920      	cbnz	r0, 800c3e0 <_Balloc+0x20>
 800c3d6:	4b18      	ldr	r3, [pc, #96]	@ (800c438 <_Balloc+0x78>)
 800c3d8:	4818      	ldr	r0, [pc, #96]	@ (800c43c <_Balloc+0x7c>)
 800c3da:	216b      	movs	r1, #107	@ 0x6b
 800c3dc:	f000 fc1a 	bl	800cc14 <__assert_func>
 800c3e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3e4:	6006      	str	r6, [r0, #0]
 800c3e6:	60c6      	str	r6, [r0, #12]
 800c3e8:	69e6      	ldr	r6, [r4, #28]
 800c3ea:	68f3      	ldr	r3, [r6, #12]
 800c3ec:	b183      	cbz	r3, 800c410 <_Balloc+0x50>
 800c3ee:	69e3      	ldr	r3, [r4, #28]
 800c3f0:	68db      	ldr	r3, [r3, #12]
 800c3f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c3f6:	b9b8      	cbnz	r0, 800c428 <_Balloc+0x68>
 800c3f8:	2101      	movs	r1, #1
 800c3fa:	fa01 f605 	lsl.w	r6, r1, r5
 800c3fe:	1d72      	adds	r2, r6, #5
 800c400:	0092      	lsls	r2, r2, #2
 800c402:	4620      	mov	r0, r4
 800c404:	f000 fc24 	bl	800cc50 <_calloc_r>
 800c408:	b160      	cbz	r0, 800c424 <_Balloc+0x64>
 800c40a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c40e:	e00e      	b.n	800c42e <_Balloc+0x6e>
 800c410:	2221      	movs	r2, #33	@ 0x21
 800c412:	2104      	movs	r1, #4
 800c414:	4620      	mov	r0, r4
 800c416:	f000 fc1b 	bl	800cc50 <_calloc_r>
 800c41a:	69e3      	ldr	r3, [r4, #28]
 800c41c:	60f0      	str	r0, [r6, #12]
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d1e4      	bne.n	800c3ee <_Balloc+0x2e>
 800c424:	2000      	movs	r0, #0
 800c426:	bd70      	pop	{r4, r5, r6, pc}
 800c428:	6802      	ldr	r2, [r0, #0]
 800c42a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c42e:	2300      	movs	r3, #0
 800c430:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c434:	e7f7      	b.n	800c426 <_Balloc+0x66>
 800c436:	bf00      	nop
 800c438:	0800def9 	.word	0x0800def9
 800c43c:	0800df79 	.word	0x0800df79

0800c440 <_Bfree>:
 800c440:	b570      	push	{r4, r5, r6, lr}
 800c442:	69c6      	ldr	r6, [r0, #28]
 800c444:	4605      	mov	r5, r0
 800c446:	460c      	mov	r4, r1
 800c448:	b976      	cbnz	r6, 800c468 <_Bfree+0x28>
 800c44a:	2010      	movs	r0, #16
 800c44c:	f7ff fe56 	bl	800c0fc <malloc>
 800c450:	4602      	mov	r2, r0
 800c452:	61e8      	str	r0, [r5, #28]
 800c454:	b920      	cbnz	r0, 800c460 <_Bfree+0x20>
 800c456:	4b09      	ldr	r3, [pc, #36]	@ (800c47c <_Bfree+0x3c>)
 800c458:	4809      	ldr	r0, [pc, #36]	@ (800c480 <_Bfree+0x40>)
 800c45a:	218f      	movs	r1, #143	@ 0x8f
 800c45c:	f000 fbda 	bl	800cc14 <__assert_func>
 800c460:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c464:	6006      	str	r6, [r0, #0]
 800c466:	60c6      	str	r6, [r0, #12]
 800c468:	b13c      	cbz	r4, 800c47a <_Bfree+0x3a>
 800c46a:	69eb      	ldr	r3, [r5, #28]
 800c46c:	6862      	ldr	r2, [r4, #4]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c474:	6021      	str	r1, [r4, #0]
 800c476:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c47a:	bd70      	pop	{r4, r5, r6, pc}
 800c47c:	0800def9 	.word	0x0800def9
 800c480:	0800df79 	.word	0x0800df79

0800c484 <__multadd>:
 800c484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c488:	690d      	ldr	r5, [r1, #16]
 800c48a:	4607      	mov	r7, r0
 800c48c:	460c      	mov	r4, r1
 800c48e:	461e      	mov	r6, r3
 800c490:	f101 0c14 	add.w	ip, r1, #20
 800c494:	2000      	movs	r0, #0
 800c496:	f8dc 3000 	ldr.w	r3, [ip]
 800c49a:	b299      	uxth	r1, r3
 800c49c:	fb02 6101 	mla	r1, r2, r1, r6
 800c4a0:	0c1e      	lsrs	r6, r3, #16
 800c4a2:	0c0b      	lsrs	r3, r1, #16
 800c4a4:	fb02 3306 	mla	r3, r2, r6, r3
 800c4a8:	b289      	uxth	r1, r1
 800c4aa:	3001      	adds	r0, #1
 800c4ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c4b0:	4285      	cmp	r5, r0
 800c4b2:	f84c 1b04 	str.w	r1, [ip], #4
 800c4b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c4ba:	dcec      	bgt.n	800c496 <__multadd+0x12>
 800c4bc:	b30e      	cbz	r6, 800c502 <__multadd+0x7e>
 800c4be:	68a3      	ldr	r3, [r4, #8]
 800c4c0:	42ab      	cmp	r3, r5
 800c4c2:	dc19      	bgt.n	800c4f8 <__multadd+0x74>
 800c4c4:	6861      	ldr	r1, [r4, #4]
 800c4c6:	4638      	mov	r0, r7
 800c4c8:	3101      	adds	r1, #1
 800c4ca:	f7ff ff79 	bl	800c3c0 <_Balloc>
 800c4ce:	4680      	mov	r8, r0
 800c4d0:	b928      	cbnz	r0, 800c4de <__multadd+0x5a>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	4b0c      	ldr	r3, [pc, #48]	@ (800c508 <__multadd+0x84>)
 800c4d6:	480d      	ldr	r0, [pc, #52]	@ (800c50c <__multadd+0x88>)
 800c4d8:	21ba      	movs	r1, #186	@ 0xba
 800c4da:	f000 fb9b 	bl	800cc14 <__assert_func>
 800c4de:	6922      	ldr	r2, [r4, #16]
 800c4e0:	3202      	adds	r2, #2
 800c4e2:	f104 010c 	add.w	r1, r4, #12
 800c4e6:	0092      	lsls	r2, r2, #2
 800c4e8:	300c      	adds	r0, #12
 800c4ea:	f000 fb85 	bl	800cbf8 <memcpy>
 800c4ee:	4621      	mov	r1, r4
 800c4f0:	4638      	mov	r0, r7
 800c4f2:	f7ff ffa5 	bl	800c440 <_Bfree>
 800c4f6:	4644      	mov	r4, r8
 800c4f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c4fc:	3501      	adds	r5, #1
 800c4fe:	615e      	str	r6, [r3, #20]
 800c500:	6125      	str	r5, [r4, #16]
 800c502:	4620      	mov	r0, r4
 800c504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c508:	0800df68 	.word	0x0800df68
 800c50c:	0800df79 	.word	0x0800df79

0800c510 <__hi0bits>:
 800c510:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c514:	4603      	mov	r3, r0
 800c516:	bf36      	itet	cc
 800c518:	0403      	lslcc	r3, r0, #16
 800c51a:	2000      	movcs	r0, #0
 800c51c:	2010      	movcc	r0, #16
 800c51e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c522:	bf3c      	itt	cc
 800c524:	021b      	lslcc	r3, r3, #8
 800c526:	3008      	addcc	r0, #8
 800c528:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c52c:	bf3c      	itt	cc
 800c52e:	011b      	lslcc	r3, r3, #4
 800c530:	3004      	addcc	r0, #4
 800c532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c536:	bf3c      	itt	cc
 800c538:	009b      	lslcc	r3, r3, #2
 800c53a:	3002      	addcc	r0, #2
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	db05      	blt.n	800c54c <__hi0bits+0x3c>
 800c540:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c544:	f100 0001 	add.w	r0, r0, #1
 800c548:	bf08      	it	eq
 800c54a:	2020      	moveq	r0, #32
 800c54c:	4770      	bx	lr

0800c54e <__lo0bits>:
 800c54e:	6803      	ldr	r3, [r0, #0]
 800c550:	4602      	mov	r2, r0
 800c552:	f013 0007 	ands.w	r0, r3, #7
 800c556:	d00b      	beq.n	800c570 <__lo0bits+0x22>
 800c558:	07d9      	lsls	r1, r3, #31
 800c55a:	d421      	bmi.n	800c5a0 <__lo0bits+0x52>
 800c55c:	0798      	lsls	r0, r3, #30
 800c55e:	bf49      	itett	mi
 800c560:	085b      	lsrmi	r3, r3, #1
 800c562:	089b      	lsrpl	r3, r3, #2
 800c564:	2001      	movmi	r0, #1
 800c566:	6013      	strmi	r3, [r2, #0]
 800c568:	bf5c      	itt	pl
 800c56a:	6013      	strpl	r3, [r2, #0]
 800c56c:	2002      	movpl	r0, #2
 800c56e:	4770      	bx	lr
 800c570:	b299      	uxth	r1, r3
 800c572:	b909      	cbnz	r1, 800c578 <__lo0bits+0x2a>
 800c574:	0c1b      	lsrs	r3, r3, #16
 800c576:	2010      	movs	r0, #16
 800c578:	b2d9      	uxtb	r1, r3
 800c57a:	b909      	cbnz	r1, 800c580 <__lo0bits+0x32>
 800c57c:	3008      	adds	r0, #8
 800c57e:	0a1b      	lsrs	r3, r3, #8
 800c580:	0719      	lsls	r1, r3, #28
 800c582:	bf04      	itt	eq
 800c584:	091b      	lsreq	r3, r3, #4
 800c586:	3004      	addeq	r0, #4
 800c588:	0799      	lsls	r1, r3, #30
 800c58a:	bf04      	itt	eq
 800c58c:	089b      	lsreq	r3, r3, #2
 800c58e:	3002      	addeq	r0, #2
 800c590:	07d9      	lsls	r1, r3, #31
 800c592:	d403      	bmi.n	800c59c <__lo0bits+0x4e>
 800c594:	085b      	lsrs	r3, r3, #1
 800c596:	f100 0001 	add.w	r0, r0, #1
 800c59a:	d003      	beq.n	800c5a4 <__lo0bits+0x56>
 800c59c:	6013      	str	r3, [r2, #0]
 800c59e:	4770      	bx	lr
 800c5a0:	2000      	movs	r0, #0
 800c5a2:	4770      	bx	lr
 800c5a4:	2020      	movs	r0, #32
 800c5a6:	4770      	bx	lr

0800c5a8 <__i2b>:
 800c5a8:	b510      	push	{r4, lr}
 800c5aa:	460c      	mov	r4, r1
 800c5ac:	2101      	movs	r1, #1
 800c5ae:	f7ff ff07 	bl	800c3c0 <_Balloc>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	b928      	cbnz	r0, 800c5c2 <__i2b+0x1a>
 800c5b6:	4b05      	ldr	r3, [pc, #20]	@ (800c5cc <__i2b+0x24>)
 800c5b8:	4805      	ldr	r0, [pc, #20]	@ (800c5d0 <__i2b+0x28>)
 800c5ba:	f240 1145 	movw	r1, #325	@ 0x145
 800c5be:	f000 fb29 	bl	800cc14 <__assert_func>
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	6144      	str	r4, [r0, #20]
 800c5c6:	6103      	str	r3, [r0, #16]
 800c5c8:	bd10      	pop	{r4, pc}
 800c5ca:	bf00      	nop
 800c5cc:	0800df68 	.word	0x0800df68
 800c5d0:	0800df79 	.word	0x0800df79

0800c5d4 <__multiply>:
 800c5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d8:	4614      	mov	r4, r2
 800c5da:	690a      	ldr	r2, [r1, #16]
 800c5dc:	6923      	ldr	r3, [r4, #16]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	bfa8      	it	ge
 800c5e2:	4623      	movge	r3, r4
 800c5e4:	460f      	mov	r7, r1
 800c5e6:	bfa4      	itt	ge
 800c5e8:	460c      	movge	r4, r1
 800c5ea:	461f      	movge	r7, r3
 800c5ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c5f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c5f4:	68a3      	ldr	r3, [r4, #8]
 800c5f6:	6861      	ldr	r1, [r4, #4]
 800c5f8:	eb0a 0609 	add.w	r6, sl, r9
 800c5fc:	42b3      	cmp	r3, r6
 800c5fe:	b085      	sub	sp, #20
 800c600:	bfb8      	it	lt
 800c602:	3101      	addlt	r1, #1
 800c604:	f7ff fedc 	bl	800c3c0 <_Balloc>
 800c608:	b930      	cbnz	r0, 800c618 <__multiply+0x44>
 800c60a:	4602      	mov	r2, r0
 800c60c:	4b44      	ldr	r3, [pc, #272]	@ (800c720 <__multiply+0x14c>)
 800c60e:	4845      	ldr	r0, [pc, #276]	@ (800c724 <__multiply+0x150>)
 800c610:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c614:	f000 fafe 	bl	800cc14 <__assert_func>
 800c618:	f100 0514 	add.w	r5, r0, #20
 800c61c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c620:	462b      	mov	r3, r5
 800c622:	2200      	movs	r2, #0
 800c624:	4543      	cmp	r3, r8
 800c626:	d321      	bcc.n	800c66c <__multiply+0x98>
 800c628:	f107 0114 	add.w	r1, r7, #20
 800c62c:	f104 0214 	add.w	r2, r4, #20
 800c630:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c634:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c638:	9302      	str	r3, [sp, #8]
 800c63a:	1b13      	subs	r3, r2, r4
 800c63c:	3b15      	subs	r3, #21
 800c63e:	f023 0303 	bic.w	r3, r3, #3
 800c642:	3304      	adds	r3, #4
 800c644:	f104 0715 	add.w	r7, r4, #21
 800c648:	42ba      	cmp	r2, r7
 800c64a:	bf38      	it	cc
 800c64c:	2304      	movcc	r3, #4
 800c64e:	9301      	str	r3, [sp, #4]
 800c650:	9b02      	ldr	r3, [sp, #8]
 800c652:	9103      	str	r1, [sp, #12]
 800c654:	428b      	cmp	r3, r1
 800c656:	d80c      	bhi.n	800c672 <__multiply+0x9e>
 800c658:	2e00      	cmp	r6, #0
 800c65a:	dd03      	ble.n	800c664 <__multiply+0x90>
 800c65c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c660:	2b00      	cmp	r3, #0
 800c662:	d05b      	beq.n	800c71c <__multiply+0x148>
 800c664:	6106      	str	r6, [r0, #16]
 800c666:	b005      	add	sp, #20
 800c668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c66c:	f843 2b04 	str.w	r2, [r3], #4
 800c670:	e7d8      	b.n	800c624 <__multiply+0x50>
 800c672:	f8b1 a000 	ldrh.w	sl, [r1]
 800c676:	f1ba 0f00 	cmp.w	sl, #0
 800c67a:	d024      	beq.n	800c6c6 <__multiply+0xf2>
 800c67c:	f104 0e14 	add.w	lr, r4, #20
 800c680:	46a9      	mov	r9, r5
 800c682:	f04f 0c00 	mov.w	ip, #0
 800c686:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c68a:	f8d9 3000 	ldr.w	r3, [r9]
 800c68e:	fa1f fb87 	uxth.w	fp, r7
 800c692:	b29b      	uxth	r3, r3
 800c694:	fb0a 330b 	mla	r3, sl, fp, r3
 800c698:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c69c:	f8d9 7000 	ldr.w	r7, [r9]
 800c6a0:	4463      	add	r3, ip
 800c6a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c6a6:	fb0a c70b 	mla	r7, sl, fp, ip
 800c6aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c6b4:	4572      	cmp	r2, lr
 800c6b6:	f849 3b04 	str.w	r3, [r9], #4
 800c6ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c6be:	d8e2      	bhi.n	800c686 <__multiply+0xb2>
 800c6c0:	9b01      	ldr	r3, [sp, #4]
 800c6c2:	f845 c003 	str.w	ip, [r5, r3]
 800c6c6:	9b03      	ldr	r3, [sp, #12]
 800c6c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c6cc:	3104      	adds	r1, #4
 800c6ce:	f1b9 0f00 	cmp.w	r9, #0
 800c6d2:	d021      	beq.n	800c718 <__multiply+0x144>
 800c6d4:	682b      	ldr	r3, [r5, #0]
 800c6d6:	f104 0c14 	add.w	ip, r4, #20
 800c6da:	46ae      	mov	lr, r5
 800c6dc:	f04f 0a00 	mov.w	sl, #0
 800c6e0:	f8bc b000 	ldrh.w	fp, [ip]
 800c6e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c6e8:	fb09 770b 	mla	r7, r9, fp, r7
 800c6ec:	4457      	add	r7, sl
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c6f4:	f84e 3b04 	str.w	r3, [lr], #4
 800c6f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c6fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c700:	f8be 3000 	ldrh.w	r3, [lr]
 800c704:	fb09 330a 	mla	r3, r9, sl, r3
 800c708:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c70c:	4562      	cmp	r2, ip
 800c70e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c712:	d8e5      	bhi.n	800c6e0 <__multiply+0x10c>
 800c714:	9f01      	ldr	r7, [sp, #4]
 800c716:	51eb      	str	r3, [r5, r7]
 800c718:	3504      	adds	r5, #4
 800c71a:	e799      	b.n	800c650 <__multiply+0x7c>
 800c71c:	3e01      	subs	r6, #1
 800c71e:	e79b      	b.n	800c658 <__multiply+0x84>
 800c720:	0800df68 	.word	0x0800df68
 800c724:	0800df79 	.word	0x0800df79

0800c728 <__pow5mult>:
 800c728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c72c:	4615      	mov	r5, r2
 800c72e:	f012 0203 	ands.w	r2, r2, #3
 800c732:	4607      	mov	r7, r0
 800c734:	460e      	mov	r6, r1
 800c736:	d007      	beq.n	800c748 <__pow5mult+0x20>
 800c738:	4c25      	ldr	r4, [pc, #148]	@ (800c7d0 <__pow5mult+0xa8>)
 800c73a:	3a01      	subs	r2, #1
 800c73c:	2300      	movs	r3, #0
 800c73e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c742:	f7ff fe9f 	bl	800c484 <__multadd>
 800c746:	4606      	mov	r6, r0
 800c748:	10ad      	asrs	r5, r5, #2
 800c74a:	d03d      	beq.n	800c7c8 <__pow5mult+0xa0>
 800c74c:	69fc      	ldr	r4, [r7, #28]
 800c74e:	b97c      	cbnz	r4, 800c770 <__pow5mult+0x48>
 800c750:	2010      	movs	r0, #16
 800c752:	f7ff fcd3 	bl	800c0fc <malloc>
 800c756:	4602      	mov	r2, r0
 800c758:	61f8      	str	r0, [r7, #28]
 800c75a:	b928      	cbnz	r0, 800c768 <__pow5mult+0x40>
 800c75c:	4b1d      	ldr	r3, [pc, #116]	@ (800c7d4 <__pow5mult+0xac>)
 800c75e:	481e      	ldr	r0, [pc, #120]	@ (800c7d8 <__pow5mult+0xb0>)
 800c760:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c764:	f000 fa56 	bl	800cc14 <__assert_func>
 800c768:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c76c:	6004      	str	r4, [r0, #0]
 800c76e:	60c4      	str	r4, [r0, #12]
 800c770:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c774:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c778:	b94c      	cbnz	r4, 800c78e <__pow5mult+0x66>
 800c77a:	f240 2171 	movw	r1, #625	@ 0x271
 800c77e:	4638      	mov	r0, r7
 800c780:	f7ff ff12 	bl	800c5a8 <__i2b>
 800c784:	2300      	movs	r3, #0
 800c786:	f8c8 0008 	str.w	r0, [r8, #8]
 800c78a:	4604      	mov	r4, r0
 800c78c:	6003      	str	r3, [r0, #0]
 800c78e:	f04f 0900 	mov.w	r9, #0
 800c792:	07eb      	lsls	r3, r5, #31
 800c794:	d50a      	bpl.n	800c7ac <__pow5mult+0x84>
 800c796:	4631      	mov	r1, r6
 800c798:	4622      	mov	r2, r4
 800c79a:	4638      	mov	r0, r7
 800c79c:	f7ff ff1a 	bl	800c5d4 <__multiply>
 800c7a0:	4631      	mov	r1, r6
 800c7a2:	4680      	mov	r8, r0
 800c7a4:	4638      	mov	r0, r7
 800c7a6:	f7ff fe4b 	bl	800c440 <_Bfree>
 800c7aa:	4646      	mov	r6, r8
 800c7ac:	106d      	asrs	r5, r5, #1
 800c7ae:	d00b      	beq.n	800c7c8 <__pow5mult+0xa0>
 800c7b0:	6820      	ldr	r0, [r4, #0]
 800c7b2:	b938      	cbnz	r0, 800c7c4 <__pow5mult+0x9c>
 800c7b4:	4622      	mov	r2, r4
 800c7b6:	4621      	mov	r1, r4
 800c7b8:	4638      	mov	r0, r7
 800c7ba:	f7ff ff0b 	bl	800c5d4 <__multiply>
 800c7be:	6020      	str	r0, [r4, #0]
 800c7c0:	f8c0 9000 	str.w	r9, [r0]
 800c7c4:	4604      	mov	r4, r0
 800c7c6:	e7e4      	b.n	800c792 <__pow5mult+0x6a>
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7ce:	bf00      	nop
 800c7d0:	0800dfd4 	.word	0x0800dfd4
 800c7d4:	0800def9 	.word	0x0800def9
 800c7d8:	0800df79 	.word	0x0800df79

0800c7dc <__lshift>:
 800c7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7e0:	460c      	mov	r4, r1
 800c7e2:	6849      	ldr	r1, [r1, #4]
 800c7e4:	6923      	ldr	r3, [r4, #16]
 800c7e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c7ea:	68a3      	ldr	r3, [r4, #8]
 800c7ec:	4607      	mov	r7, r0
 800c7ee:	4691      	mov	r9, r2
 800c7f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c7f4:	f108 0601 	add.w	r6, r8, #1
 800c7f8:	42b3      	cmp	r3, r6
 800c7fa:	db0b      	blt.n	800c814 <__lshift+0x38>
 800c7fc:	4638      	mov	r0, r7
 800c7fe:	f7ff fddf 	bl	800c3c0 <_Balloc>
 800c802:	4605      	mov	r5, r0
 800c804:	b948      	cbnz	r0, 800c81a <__lshift+0x3e>
 800c806:	4602      	mov	r2, r0
 800c808:	4b28      	ldr	r3, [pc, #160]	@ (800c8ac <__lshift+0xd0>)
 800c80a:	4829      	ldr	r0, [pc, #164]	@ (800c8b0 <__lshift+0xd4>)
 800c80c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c810:	f000 fa00 	bl	800cc14 <__assert_func>
 800c814:	3101      	adds	r1, #1
 800c816:	005b      	lsls	r3, r3, #1
 800c818:	e7ee      	b.n	800c7f8 <__lshift+0x1c>
 800c81a:	2300      	movs	r3, #0
 800c81c:	f100 0114 	add.w	r1, r0, #20
 800c820:	f100 0210 	add.w	r2, r0, #16
 800c824:	4618      	mov	r0, r3
 800c826:	4553      	cmp	r3, sl
 800c828:	db33      	blt.n	800c892 <__lshift+0xb6>
 800c82a:	6920      	ldr	r0, [r4, #16]
 800c82c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c830:	f104 0314 	add.w	r3, r4, #20
 800c834:	f019 091f 	ands.w	r9, r9, #31
 800c838:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c83c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c840:	d02b      	beq.n	800c89a <__lshift+0xbe>
 800c842:	f1c9 0e20 	rsb	lr, r9, #32
 800c846:	468a      	mov	sl, r1
 800c848:	2200      	movs	r2, #0
 800c84a:	6818      	ldr	r0, [r3, #0]
 800c84c:	fa00 f009 	lsl.w	r0, r0, r9
 800c850:	4310      	orrs	r0, r2
 800c852:	f84a 0b04 	str.w	r0, [sl], #4
 800c856:	f853 2b04 	ldr.w	r2, [r3], #4
 800c85a:	459c      	cmp	ip, r3
 800c85c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c860:	d8f3      	bhi.n	800c84a <__lshift+0x6e>
 800c862:	ebac 0304 	sub.w	r3, ip, r4
 800c866:	3b15      	subs	r3, #21
 800c868:	f023 0303 	bic.w	r3, r3, #3
 800c86c:	3304      	adds	r3, #4
 800c86e:	f104 0015 	add.w	r0, r4, #21
 800c872:	4584      	cmp	ip, r0
 800c874:	bf38      	it	cc
 800c876:	2304      	movcc	r3, #4
 800c878:	50ca      	str	r2, [r1, r3]
 800c87a:	b10a      	cbz	r2, 800c880 <__lshift+0xa4>
 800c87c:	f108 0602 	add.w	r6, r8, #2
 800c880:	3e01      	subs	r6, #1
 800c882:	4638      	mov	r0, r7
 800c884:	612e      	str	r6, [r5, #16]
 800c886:	4621      	mov	r1, r4
 800c888:	f7ff fdda 	bl	800c440 <_Bfree>
 800c88c:	4628      	mov	r0, r5
 800c88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c892:	f842 0f04 	str.w	r0, [r2, #4]!
 800c896:	3301      	adds	r3, #1
 800c898:	e7c5      	b.n	800c826 <__lshift+0x4a>
 800c89a:	3904      	subs	r1, #4
 800c89c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c8a4:	459c      	cmp	ip, r3
 800c8a6:	d8f9      	bhi.n	800c89c <__lshift+0xc0>
 800c8a8:	e7ea      	b.n	800c880 <__lshift+0xa4>
 800c8aa:	bf00      	nop
 800c8ac:	0800df68 	.word	0x0800df68
 800c8b0:	0800df79 	.word	0x0800df79

0800c8b4 <__mcmp>:
 800c8b4:	690a      	ldr	r2, [r1, #16]
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	6900      	ldr	r0, [r0, #16]
 800c8ba:	1a80      	subs	r0, r0, r2
 800c8bc:	b530      	push	{r4, r5, lr}
 800c8be:	d10e      	bne.n	800c8de <__mcmp+0x2a>
 800c8c0:	3314      	adds	r3, #20
 800c8c2:	3114      	adds	r1, #20
 800c8c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c8c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c8cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c8d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c8d4:	4295      	cmp	r5, r2
 800c8d6:	d003      	beq.n	800c8e0 <__mcmp+0x2c>
 800c8d8:	d205      	bcs.n	800c8e6 <__mcmp+0x32>
 800c8da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c8de:	bd30      	pop	{r4, r5, pc}
 800c8e0:	42a3      	cmp	r3, r4
 800c8e2:	d3f3      	bcc.n	800c8cc <__mcmp+0x18>
 800c8e4:	e7fb      	b.n	800c8de <__mcmp+0x2a>
 800c8e6:	2001      	movs	r0, #1
 800c8e8:	e7f9      	b.n	800c8de <__mcmp+0x2a>
	...

0800c8ec <__mdiff>:
 800c8ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f0:	4689      	mov	r9, r1
 800c8f2:	4606      	mov	r6, r0
 800c8f4:	4611      	mov	r1, r2
 800c8f6:	4648      	mov	r0, r9
 800c8f8:	4614      	mov	r4, r2
 800c8fa:	f7ff ffdb 	bl	800c8b4 <__mcmp>
 800c8fe:	1e05      	subs	r5, r0, #0
 800c900:	d112      	bne.n	800c928 <__mdiff+0x3c>
 800c902:	4629      	mov	r1, r5
 800c904:	4630      	mov	r0, r6
 800c906:	f7ff fd5b 	bl	800c3c0 <_Balloc>
 800c90a:	4602      	mov	r2, r0
 800c90c:	b928      	cbnz	r0, 800c91a <__mdiff+0x2e>
 800c90e:	4b3f      	ldr	r3, [pc, #252]	@ (800ca0c <__mdiff+0x120>)
 800c910:	f240 2137 	movw	r1, #567	@ 0x237
 800c914:	483e      	ldr	r0, [pc, #248]	@ (800ca10 <__mdiff+0x124>)
 800c916:	f000 f97d 	bl	800cc14 <__assert_func>
 800c91a:	2301      	movs	r3, #1
 800c91c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c920:	4610      	mov	r0, r2
 800c922:	b003      	add	sp, #12
 800c924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c928:	bfbc      	itt	lt
 800c92a:	464b      	movlt	r3, r9
 800c92c:	46a1      	movlt	r9, r4
 800c92e:	4630      	mov	r0, r6
 800c930:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c934:	bfba      	itte	lt
 800c936:	461c      	movlt	r4, r3
 800c938:	2501      	movlt	r5, #1
 800c93a:	2500      	movge	r5, #0
 800c93c:	f7ff fd40 	bl	800c3c0 <_Balloc>
 800c940:	4602      	mov	r2, r0
 800c942:	b918      	cbnz	r0, 800c94c <__mdiff+0x60>
 800c944:	4b31      	ldr	r3, [pc, #196]	@ (800ca0c <__mdiff+0x120>)
 800c946:	f240 2145 	movw	r1, #581	@ 0x245
 800c94a:	e7e3      	b.n	800c914 <__mdiff+0x28>
 800c94c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c950:	6926      	ldr	r6, [r4, #16]
 800c952:	60c5      	str	r5, [r0, #12]
 800c954:	f109 0310 	add.w	r3, r9, #16
 800c958:	f109 0514 	add.w	r5, r9, #20
 800c95c:	f104 0e14 	add.w	lr, r4, #20
 800c960:	f100 0b14 	add.w	fp, r0, #20
 800c964:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c968:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c96c:	9301      	str	r3, [sp, #4]
 800c96e:	46d9      	mov	r9, fp
 800c970:	f04f 0c00 	mov.w	ip, #0
 800c974:	9b01      	ldr	r3, [sp, #4]
 800c976:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c97a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c97e:	9301      	str	r3, [sp, #4]
 800c980:	fa1f f38a 	uxth.w	r3, sl
 800c984:	4619      	mov	r1, r3
 800c986:	b283      	uxth	r3, r0
 800c988:	1acb      	subs	r3, r1, r3
 800c98a:	0c00      	lsrs	r0, r0, #16
 800c98c:	4463      	add	r3, ip
 800c98e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c992:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c996:	b29b      	uxth	r3, r3
 800c998:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c99c:	4576      	cmp	r6, lr
 800c99e:	f849 3b04 	str.w	r3, [r9], #4
 800c9a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c9a6:	d8e5      	bhi.n	800c974 <__mdiff+0x88>
 800c9a8:	1b33      	subs	r3, r6, r4
 800c9aa:	3b15      	subs	r3, #21
 800c9ac:	f023 0303 	bic.w	r3, r3, #3
 800c9b0:	3415      	adds	r4, #21
 800c9b2:	3304      	adds	r3, #4
 800c9b4:	42a6      	cmp	r6, r4
 800c9b6:	bf38      	it	cc
 800c9b8:	2304      	movcc	r3, #4
 800c9ba:	441d      	add	r5, r3
 800c9bc:	445b      	add	r3, fp
 800c9be:	461e      	mov	r6, r3
 800c9c0:	462c      	mov	r4, r5
 800c9c2:	4544      	cmp	r4, r8
 800c9c4:	d30e      	bcc.n	800c9e4 <__mdiff+0xf8>
 800c9c6:	f108 0103 	add.w	r1, r8, #3
 800c9ca:	1b49      	subs	r1, r1, r5
 800c9cc:	f021 0103 	bic.w	r1, r1, #3
 800c9d0:	3d03      	subs	r5, #3
 800c9d2:	45a8      	cmp	r8, r5
 800c9d4:	bf38      	it	cc
 800c9d6:	2100      	movcc	r1, #0
 800c9d8:	440b      	add	r3, r1
 800c9da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9de:	b191      	cbz	r1, 800ca06 <__mdiff+0x11a>
 800c9e0:	6117      	str	r7, [r2, #16]
 800c9e2:	e79d      	b.n	800c920 <__mdiff+0x34>
 800c9e4:	f854 1b04 	ldr.w	r1, [r4], #4
 800c9e8:	46e6      	mov	lr, ip
 800c9ea:	0c08      	lsrs	r0, r1, #16
 800c9ec:	fa1c fc81 	uxtah	ip, ip, r1
 800c9f0:	4471      	add	r1, lr
 800c9f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c9f6:	b289      	uxth	r1, r1
 800c9f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c9fc:	f846 1b04 	str.w	r1, [r6], #4
 800ca00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca04:	e7dd      	b.n	800c9c2 <__mdiff+0xd6>
 800ca06:	3f01      	subs	r7, #1
 800ca08:	e7e7      	b.n	800c9da <__mdiff+0xee>
 800ca0a:	bf00      	nop
 800ca0c:	0800df68 	.word	0x0800df68
 800ca10:	0800df79 	.word	0x0800df79

0800ca14 <__d2b>:
 800ca14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca18:	460f      	mov	r7, r1
 800ca1a:	2101      	movs	r1, #1
 800ca1c:	ec59 8b10 	vmov	r8, r9, d0
 800ca20:	4616      	mov	r6, r2
 800ca22:	f7ff fccd 	bl	800c3c0 <_Balloc>
 800ca26:	4604      	mov	r4, r0
 800ca28:	b930      	cbnz	r0, 800ca38 <__d2b+0x24>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	4b23      	ldr	r3, [pc, #140]	@ (800cabc <__d2b+0xa8>)
 800ca2e:	4824      	ldr	r0, [pc, #144]	@ (800cac0 <__d2b+0xac>)
 800ca30:	f240 310f 	movw	r1, #783	@ 0x30f
 800ca34:	f000 f8ee 	bl	800cc14 <__assert_func>
 800ca38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ca3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca40:	b10d      	cbz	r5, 800ca46 <__d2b+0x32>
 800ca42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ca46:	9301      	str	r3, [sp, #4]
 800ca48:	f1b8 0300 	subs.w	r3, r8, #0
 800ca4c:	d023      	beq.n	800ca96 <__d2b+0x82>
 800ca4e:	4668      	mov	r0, sp
 800ca50:	9300      	str	r3, [sp, #0]
 800ca52:	f7ff fd7c 	bl	800c54e <__lo0bits>
 800ca56:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ca5a:	b1d0      	cbz	r0, 800ca92 <__d2b+0x7e>
 800ca5c:	f1c0 0320 	rsb	r3, r0, #32
 800ca60:	fa02 f303 	lsl.w	r3, r2, r3
 800ca64:	430b      	orrs	r3, r1
 800ca66:	40c2      	lsrs	r2, r0
 800ca68:	6163      	str	r3, [r4, #20]
 800ca6a:	9201      	str	r2, [sp, #4]
 800ca6c:	9b01      	ldr	r3, [sp, #4]
 800ca6e:	61a3      	str	r3, [r4, #24]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	bf0c      	ite	eq
 800ca74:	2201      	moveq	r2, #1
 800ca76:	2202      	movne	r2, #2
 800ca78:	6122      	str	r2, [r4, #16]
 800ca7a:	b1a5      	cbz	r5, 800caa6 <__d2b+0x92>
 800ca7c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ca80:	4405      	add	r5, r0
 800ca82:	603d      	str	r5, [r7, #0]
 800ca84:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ca88:	6030      	str	r0, [r6, #0]
 800ca8a:	4620      	mov	r0, r4
 800ca8c:	b003      	add	sp, #12
 800ca8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca92:	6161      	str	r1, [r4, #20]
 800ca94:	e7ea      	b.n	800ca6c <__d2b+0x58>
 800ca96:	a801      	add	r0, sp, #4
 800ca98:	f7ff fd59 	bl	800c54e <__lo0bits>
 800ca9c:	9b01      	ldr	r3, [sp, #4]
 800ca9e:	6163      	str	r3, [r4, #20]
 800caa0:	3020      	adds	r0, #32
 800caa2:	2201      	movs	r2, #1
 800caa4:	e7e8      	b.n	800ca78 <__d2b+0x64>
 800caa6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800caaa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800caae:	6038      	str	r0, [r7, #0]
 800cab0:	6918      	ldr	r0, [r3, #16]
 800cab2:	f7ff fd2d 	bl	800c510 <__hi0bits>
 800cab6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800caba:	e7e5      	b.n	800ca88 <__d2b+0x74>
 800cabc:	0800df68 	.word	0x0800df68
 800cac0:	0800df79 	.word	0x0800df79

0800cac4 <__sread>:
 800cac4:	b510      	push	{r4, lr}
 800cac6:	460c      	mov	r4, r1
 800cac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cacc:	f000 f860 	bl	800cb90 <_read_r>
 800cad0:	2800      	cmp	r0, #0
 800cad2:	bfab      	itete	ge
 800cad4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cad6:	89a3      	ldrhlt	r3, [r4, #12]
 800cad8:	181b      	addge	r3, r3, r0
 800cada:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cade:	bfac      	ite	ge
 800cae0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cae2:	81a3      	strhlt	r3, [r4, #12]
 800cae4:	bd10      	pop	{r4, pc}

0800cae6 <__swrite>:
 800cae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caea:	461f      	mov	r7, r3
 800caec:	898b      	ldrh	r3, [r1, #12]
 800caee:	05db      	lsls	r3, r3, #23
 800caf0:	4605      	mov	r5, r0
 800caf2:	460c      	mov	r4, r1
 800caf4:	4616      	mov	r6, r2
 800caf6:	d505      	bpl.n	800cb04 <__swrite+0x1e>
 800caf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cafc:	2302      	movs	r3, #2
 800cafe:	2200      	movs	r2, #0
 800cb00:	f000 f834 	bl	800cb6c <_lseek_r>
 800cb04:	89a3      	ldrh	r3, [r4, #12]
 800cb06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cb0e:	81a3      	strh	r3, [r4, #12]
 800cb10:	4632      	mov	r2, r6
 800cb12:	463b      	mov	r3, r7
 800cb14:	4628      	mov	r0, r5
 800cb16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb1a:	f000 b85b 	b.w	800cbd4 <_write_r>

0800cb1e <__sseek>:
 800cb1e:	b510      	push	{r4, lr}
 800cb20:	460c      	mov	r4, r1
 800cb22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb26:	f000 f821 	bl	800cb6c <_lseek_r>
 800cb2a:	1c43      	adds	r3, r0, #1
 800cb2c:	89a3      	ldrh	r3, [r4, #12]
 800cb2e:	bf15      	itete	ne
 800cb30:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cb32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cb36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cb3a:	81a3      	strheq	r3, [r4, #12]
 800cb3c:	bf18      	it	ne
 800cb3e:	81a3      	strhne	r3, [r4, #12]
 800cb40:	bd10      	pop	{r4, pc}

0800cb42 <__sclose>:
 800cb42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb46:	f000 b801 	b.w	800cb4c <_close_r>
	...

0800cb4c <_close_r>:
 800cb4c:	b538      	push	{r3, r4, r5, lr}
 800cb4e:	4d06      	ldr	r5, [pc, #24]	@ (800cb68 <_close_r+0x1c>)
 800cb50:	2300      	movs	r3, #0
 800cb52:	4604      	mov	r4, r0
 800cb54:	4608      	mov	r0, r1
 800cb56:	602b      	str	r3, [r5, #0]
 800cb58:	f7f6 fea4 	bl	80038a4 <_close>
 800cb5c:	1c43      	adds	r3, r0, #1
 800cb5e:	d102      	bne.n	800cb66 <_close_r+0x1a>
 800cb60:	682b      	ldr	r3, [r5, #0]
 800cb62:	b103      	cbz	r3, 800cb66 <_close_r+0x1a>
 800cb64:	6023      	str	r3, [r4, #0]
 800cb66:	bd38      	pop	{r3, r4, r5, pc}
 800cb68:	24003714 	.word	0x24003714

0800cb6c <_lseek_r>:
 800cb6c:	b538      	push	{r3, r4, r5, lr}
 800cb6e:	4d07      	ldr	r5, [pc, #28]	@ (800cb8c <_lseek_r+0x20>)
 800cb70:	4604      	mov	r4, r0
 800cb72:	4608      	mov	r0, r1
 800cb74:	4611      	mov	r1, r2
 800cb76:	2200      	movs	r2, #0
 800cb78:	602a      	str	r2, [r5, #0]
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	f7f6 feb9 	bl	80038f2 <_lseek>
 800cb80:	1c43      	adds	r3, r0, #1
 800cb82:	d102      	bne.n	800cb8a <_lseek_r+0x1e>
 800cb84:	682b      	ldr	r3, [r5, #0]
 800cb86:	b103      	cbz	r3, 800cb8a <_lseek_r+0x1e>
 800cb88:	6023      	str	r3, [r4, #0]
 800cb8a:	bd38      	pop	{r3, r4, r5, pc}
 800cb8c:	24003714 	.word	0x24003714

0800cb90 <_read_r>:
 800cb90:	b538      	push	{r3, r4, r5, lr}
 800cb92:	4d07      	ldr	r5, [pc, #28]	@ (800cbb0 <_read_r+0x20>)
 800cb94:	4604      	mov	r4, r0
 800cb96:	4608      	mov	r0, r1
 800cb98:	4611      	mov	r1, r2
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	602a      	str	r2, [r5, #0]
 800cb9e:	461a      	mov	r2, r3
 800cba0:	f7f6 fe47 	bl	8003832 <_read>
 800cba4:	1c43      	adds	r3, r0, #1
 800cba6:	d102      	bne.n	800cbae <_read_r+0x1e>
 800cba8:	682b      	ldr	r3, [r5, #0]
 800cbaa:	b103      	cbz	r3, 800cbae <_read_r+0x1e>
 800cbac:	6023      	str	r3, [r4, #0]
 800cbae:	bd38      	pop	{r3, r4, r5, pc}
 800cbb0:	24003714 	.word	0x24003714

0800cbb4 <_sbrk_r>:
 800cbb4:	b538      	push	{r3, r4, r5, lr}
 800cbb6:	4d06      	ldr	r5, [pc, #24]	@ (800cbd0 <_sbrk_r+0x1c>)
 800cbb8:	2300      	movs	r3, #0
 800cbba:	4604      	mov	r4, r0
 800cbbc:	4608      	mov	r0, r1
 800cbbe:	602b      	str	r3, [r5, #0]
 800cbc0:	f7f6 fea4 	bl	800390c <_sbrk>
 800cbc4:	1c43      	adds	r3, r0, #1
 800cbc6:	d102      	bne.n	800cbce <_sbrk_r+0x1a>
 800cbc8:	682b      	ldr	r3, [r5, #0]
 800cbca:	b103      	cbz	r3, 800cbce <_sbrk_r+0x1a>
 800cbcc:	6023      	str	r3, [r4, #0]
 800cbce:	bd38      	pop	{r3, r4, r5, pc}
 800cbd0:	24003714 	.word	0x24003714

0800cbd4 <_write_r>:
 800cbd4:	b538      	push	{r3, r4, r5, lr}
 800cbd6:	4d07      	ldr	r5, [pc, #28]	@ (800cbf4 <_write_r+0x20>)
 800cbd8:	4604      	mov	r4, r0
 800cbda:	4608      	mov	r0, r1
 800cbdc:	4611      	mov	r1, r2
 800cbde:	2200      	movs	r2, #0
 800cbe0:	602a      	str	r2, [r5, #0]
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	f7f6 fe42 	bl	800386c <_write>
 800cbe8:	1c43      	adds	r3, r0, #1
 800cbea:	d102      	bne.n	800cbf2 <_write_r+0x1e>
 800cbec:	682b      	ldr	r3, [r5, #0]
 800cbee:	b103      	cbz	r3, 800cbf2 <_write_r+0x1e>
 800cbf0:	6023      	str	r3, [r4, #0]
 800cbf2:	bd38      	pop	{r3, r4, r5, pc}
 800cbf4:	24003714 	.word	0x24003714

0800cbf8 <memcpy>:
 800cbf8:	440a      	add	r2, r1
 800cbfa:	4291      	cmp	r1, r2
 800cbfc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800cc00:	d100      	bne.n	800cc04 <memcpy+0xc>
 800cc02:	4770      	bx	lr
 800cc04:	b510      	push	{r4, lr}
 800cc06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc0e:	4291      	cmp	r1, r2
 800cc10:	d1f9      	bne.n	800cc06 <memcpy+0xe>
 800cc12:	bd10      	pop	{r4, pc}

0800cc14 <__assert_func>:
 800cc14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc16:	4614      	mov	r4, r2
 800cc18:	461a      	mov	r2, r3
 800cc1a:	4b09      	ldr	r3, [pc, #36]	@ (800cc40 <__assert_func+0x2c>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	4605      	mov	r5, r0
 800cc20:	68d8      	ldr	r0, [r3, #12]
 800cc22:	b954      	cbnz	r4, 800cc3a <__assert_func+0x26>
 800cc24:	4b07      	ldr	r3, [pc, #28]	@ (800cc44 <__assert_func+0x30>)
 800cc26:	461c      	mov	r4, r3
 800cc28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc2c:	9100      	str	r1, [sp, #0]
 800cc2e:	462b      	mov	r3, r5
 800cc30:	4905      	ldr	r1, [pc, #20]	@ (800cc48 <__assert_func+0x34>)
 800cc32:	f000 f87d 	bl	800cd30 <fiprintf>
 800cc36:	f000 f89a 	bl	800cd6e <abort>
 800cc3a:	4b04      	ldr	r3, [pc, #16]	@ (800cc4c <__assert_func+0x38>)
 800cc3c:	e7f4      	b.n	800cc28 <__assert_func+0x14>
 800cc3e:	bf00      	nop
 800cc40:	2400002c 	.word	0x2400002c
 800cc44:	0800e216 	.word	0x0800e216
 800cc48:	0800e1e8 	.word	0x0800e1e8
 800cc4c:	0800e1db 	.word	0x0800e1db

0800cc50 <_calloc_r>:
 800cc50:	b570      	push	{r4, r5, r6, lr}
 800cc52:	fba1 5402 	umull	r5, r4, r1, r2
 800cc56:	b93c      	cbnz	r4, 800cc68 <_calloc_r+0x18>
 800cc58:	4629      	mov	r1, r5
 800cc5a:	f7ff fa79 	bl	800c150 <_malloc_r>
 800cc5e:	4606      	mov	r6, r0
 800cc60:	b928      	cbnz	r0, 800cc6e <_calloc_r+0x1e>
 800cc62:	2600      	movs	r6, #0
 800cc64:	4630      	mov	r0, r6
 800cc66:	bd70      	pop	{r4, r5, r6, pc}
 800cc68:	220c      	movs	r2, #12
 800cc6a:	6002      	str	r2, [r0, #0]
 800cc6c:	e7f9      	b.n	800cc62 <_calloc_r+0x12>
 800cc6e:	462a      	mov	r2, r5
 800cc70:	4621      	mov	r1, r4
 800cc72:	f7fe fc2b 	bl	800b4cc <memset>
 800cc76:	e7f5      	b.n	800cc64 <_calloc_r+0x14>

0800cc78 <_free_r>:
 800cc78:	b538      	push	{r3, r4, r5, lr}
 800cc7a:	4605      	mov	r5, r0
 800cc7c:	2900      	cmp	r1, #0
 800cc7e:	d041      	beq.n	800cd04 <_free_r+0x8c>
 800cc80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc84:	1f0c      	subs	r4, r1, #4
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	bfb8      	it	lt
 800cc8a:	18e4      	addlt	r4, r4, r3
 800cc8c:	f7ff fb8c 	bl	800c3a8 <__malloc_lock>
 800cc90:	4a1d      	ldr	r2, [pc, #116]	@ (800cd08 <_free_r+0x90>)
 800cc92:	6813      	ldr	r3, [r2, #0]
 800cc94:	b933      	cbnz	r3, 800cca4 <_free_r+0x2c>
 800cc96:	6063      	str	r3, [r4, #4]
 800cc98:	6014      	str	r4, [r2, #0]
 800cc9a:	4628      	mov	r0, r5
 800cc9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cca0:	f7ff bb88 	b.w	800c3b4 <__malloc_unlock>
 800cca4:	42a3      	cmp	r3, r4
 800cca6:	d908      	bls.n	800ccba <_free_r+0x42>
 800cca8:	6820      	ldr	r0, [r4, #0]
 800ccaa:	1821      	adds	r1, r4, r0
 800ccac:	428b      	cmp	r3, r1
 800ccae:	bf01      	itttt	eq
 800ccb0:	6819      	ldreq	r1, [r3, #0]
 800ccb2:	685b      	ldreq	r3, [r3, #4]
 800ccb4:	1809      	addeq	r1, r1, r0
 800ccb6:	6021      	streq	r1, [r4, #0]
 800ccb8:	e7ed      	b.n	800cc96 <_free_r+0x1e>
 800ccba:	461a      	mov	r2, r3
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	b10b      	cbz	r3, 800ccc4 <_free_r+0x4c>
 800ccc0:	42a3      	cmp	r3, r4
 800ccc2:	d9fa      	bls.n	800ccba <_free_r+0x42>
 800ccc4:	6811      	ldr	r1, [r2, #0]
 800ccc6:	1850      	adds	r0, r2, r1
 800ccc8:	42a0      	cmp	r0, r4
 800ccca:	d10b      	bne.n	800cce4 <_free_r+0x6c>
 800cccc:	6820      	ldr	r0, [r4, #0]
 800ccce:	4401      	add	r1, r0
 800ccd0:	1850      	adds	r0, r2, r1
 800ccd2:	4283      	cmp	r3, r0
 800ccd4:	6011      	str	r1, [r2, #0]
 800ccd6:	d1e0      	bne.n	800cc9a <_free_r+0x22>
 800ccd8:	6818      	ldr	r0, [r3, #0]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	6053      	str	r3, [r2, #4]
 800ccde:	4408      	add	r0, r1
 800cce0:	6010      	str	r0, [r2, #0]
 800cce2:	e7da      	b.n	800cc9a <_free_r+0x22>
 800cce4:	d902      	bls.n	800ccec <_free_r+0x74>
 800cce6:	230c      	movs	r3, #12
 800cce8:	602b      	str	r3, [r5, #0]
 800ccea:	e7d6      	b.n	800cc9a <_free_r+0x22>
 800ccec:	6820      	ldr	r0, [r4, #0]
 800ccee:	1821      	adds	r1, r4, r0
 800ccf0:	428b      	cmp	r3, r1
 800ccf2:	bf04      	itt	eq
 800ccf4:	6819      	ldreq	r1, [r3, #0]
 800ccf6:	685b      	ldreq	r3, [r3, #4]
 800ccf8:	6063      	str	r3, [r4, #4]
 800ccfa:	bf04      	itt	eq
 800ccfc:	1809      	addeq	r1, r1, r0
 800ccfe:	6021      	streq	r1, [r4, #0]
 800cd00:	6054      	str	r4, [r2, #4]
 800cd02:	e7ca      	b.n	800cc9a <_free_r+0x22>
 800cd04:	bd38      	pop	{r3, r4, r5, pc}
 800cd06:	bf00      	nop
 800cd08:	24003710 	.word	0x24003710

0800cd0c <__ascii_mbtowc>:
 800cd0c:	b082      	sub	sp, #8
 800cd0e:	b901      	cbnz	r1, 800cd12 <__ascii_mbtowc+0x6>
 800cd10:	a901      	add	r1, sp, #4
 800cd12:	b142      	cbz	r2, 800cd26 <__ascii_mbtowc+0x1a>
 800cd14:	b14b      	cbz	r3, 800cd2a <__ascii_mbtowc+0x1e>
 800cd16:	7813      	ldrb	r3, [r2, #0]
 800cd18:	600b      	str	r3, [r1, #0]
 800cd1a:	7812      	ldrb	r2, [r2, #0]
 800cd1c:	1e10      	subs	r0, r2, #0
 800cd1e:	bf18      	it	ne
 800cd20:	2001      	movne	r0, #1
 800cd22:	b002      	add	sp, #8
 800cd24:	4770      	bx	lr
 800cd26:	4610      	mov	r0, r2
 800cd28:	e7fb      	b.n	800cd22 <__ascii_mbtowc+0x16>
 800cd2a:	f06f 0001 	mvn.w	r0, #1
 800cd2e:	e7f8      	b.n	800cd22 <__ascii_mbtowc+0x16>

0800cd30 <fiprintf>:
 800cd30:	b40e      	push	{r1, r2, r3}
 800cd32:	b503      	push	{r0, r1, lr}
 800cd34:	4601      	mov	r1, r0
 800cd36:	ab03      	add	r3, sp, #12
 800cd38:	4805      	ldr	r0, [pc, #20]	@ (800cd50 <fiprintf+0x20>)
 800cd3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd3e:	6800      	ldr	r0, [r0, #0]
 800cd40:	9301      	str	r3, [sp, #4]
 800cd42:	f000 f845 	bl	800cdd0 <_vfiprintf_r>
 800cd46:	b002      	add	sp, #8
 800cd48:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd4c:	b003      	add	sp, #12
 800cd4e:	4770      	bx	lr
 800cd50:	2400002c 	.word	0x2400002c

0800cd54 <__ascii_wctomb>:
 800cd54:	4603      	mov	r3, r0
 800cd56:	4608      	mov	r0, r1
 800cd58:	b141      	cbz	r1, 800cd6c <__ascii_wctomb+0x18>
 800cd5a:	2aff      	cmp	r2, #255	@ 0xff
 800cd5c:	d904      	bls.n	800cd68 <__ascii_wctomb+0x14>
 800cd5e:	228a      	movs	r2, #138	@ 0x8a
 800cd60:	601a      	str	r2, [r3, #0]
 800cd62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cd66:	4770      	bx	lr
 800cd68:	700a      	strb	r2, [r1, #0]
 800cd6a:	2001      	movs	r0, #1
 800cd6c:	4770      	bx	lr

0800cd6e <abort>:
 800cd6e:	b508      	push	{r3, lr}
 800cd70:	2006      	movs	r0, #6
 800cd72:	f000 fa85 	bl	800d280 <raise>
 800cd76:	2001      	movs	r0, #1
 800cd78:	f7f6 fd50 	bl	800381c <_exit>

0800cd7c <__sfputc_r>:
 800cd7c:	6893      	ldr	r3, [r2, #8]
 800cd7e:	3b01      	subs	r3, #1
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	b410      	push	{r4}
 800cd84:	6093      	str	r3, [r2, #8]
 800cd86:	da08      	bge.n	800cd9a <__sfputc_r+0x1e>
 800cd88:	6994      	ldr	r4, [r2, #24]
 800cd8a:	42a3      	cmp	r3, r4
 800cd8c:	db01      	blt.n	800cd92 <__sfputc_r+0x16>
 800cd8e:	290a      	cmp	r1, #10
 800cd90:	d103      	bne.n	800cd9a <__sfputc_r+0x1e>
 800cd92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd96:	f000 b933 	b.w	800d000 <__swbuf_r>
 800cd9a:	6813      	ldr	r3, [r2, #0]
 800cd9c:	1c58      	adds	r0, r3, #1
 800cd9e:	6010      	str	r0, [r2, #0]
 800cda0:	7019      	strb	r1, [r3, #0]
 800cda2:	4608      	mov	r0, r1
 800cda4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cda8:	4770      	bx	lr

0800cdaa <__sfputs_r>:
 800cdaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdac:	4606      	mov	r6, r0
 800cdae:	460f      	mov	r7, r1
 800cdb0:	4614      	mov	r4, r2
 800cdb2:	18d5      	adds	r5, r2, r3
 800cdb4:	42ac      	cmp	r4, r5
 800cdb6:	d101      	bne.n	800cdbc <__sfputs_r+0x12>
 800cdb8:	2000      	movs	r0, #0
 800cdba:	e007      	b.n	800cdcc <__sfputs_r+0x22>
 800cdbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdc0:	463a      	mov	r2, r7
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	f7ff ffda 	bl	800cd7c <__sfputc_r>
 800cdc8:	1c43      	adds	r3, r0, #1
 800cdca:	d1f3      	bne.n	800cdb4 <__sfputs_r+0xa>
 800cdcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cdd0 <_vfiprintf_r>:
 800cdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdd4:	460d      	mov	r5, r1
 800cdd6:	b09d      	sub	sp, #116	@ 0x74
 800cdd8:	4614      	mov	r4, r2
 800cdda:	4698      	mov	r8, r3
 800cddc:	4606      	mov	r6, r0
 800cdde:	b118      	cbz	r0, 800cde8 <_vfiprintf_r+0x18>
 800cde0:	6a03      	ldr	r3, [r0, #32]
 800cde2:	b90b      	cbnz	r3, 800cde8 <_vfiprintf_r+0x18>
 800cde4:	f7fe fb3c 	bl	800b460 <__sinit>
 800cde8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdea:	07d9      	lsls	r1, r3, #31
 800cdec:	d405      	bmi.n	800cdfa <_vfiprintf_r+0x2a>
 800cdee:	89ab      	ldrh	r3, [r5, #12]
 800cdf0:	059a      	lsls	r2, r3, #22
 800cdf2:	d402      	bmi.n	800cdfa <_vfiprintf_r+0x2a>
 800cdf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cdf6:	f7fe fba0 	bl	800b53a <__retarget_lock_acquire_recursive>
 800cdfa:	89ab      	ldrh	r3, [r5, #12]
 800cdfc:	071b      	lsls	r3, r3, #28
 800cdfe:	d501      	bpl.n	800ce04 <_vfiprintf_r+0x34>
 800ce00:	692b      	ldr	r3, [r5, #16]
 800ce02:	b99b      	cbnz	r3, 800ce2c <_vfiprintf_r+0x5c>
 800ce04:	4629      	mov	r1, r5
 800ce06:	4630      	mov	r0, r6
 800ce08:	f000 f938 	bl	800d07c <__swsetup_r>
 800ce0c:	b170      	cbz	r0, 800ce2c <_vfiprintf_r+0x5c>
 800ce0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce10:	07dc      	lsls	r4, r3, #31
 800ce12:	d504      	bpl.n	800ce1e <_vfiprintf_r+0x4e>
 800ce14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce18:	b01d      	add	sp, #116	@ 0x74
 800ce1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce1e:	89ab      	ldrh	r3, [r5, #12]
 800ce20:	0598      	lsls	r0, r3, #22
 800ce22:	d4f7      	bmi.n	800ce14 <_vfiprintf_r+0x44>
 800ce24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce26:	f7fe fb89 	bl	800b53c <__retarget_lock_release_recursive>
 800ce2a:	e7f3      	b.n	800ce14 <_vfiprintf_r+0x44>
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce30:	2320      	movs	r3, #32
 800ce32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce36:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce3a:	2330      	movs	r3, #48	@ 0x30
 800ce3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cfec <_vfiprintf_r+0x21c>
 800ce40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce44:	f04f 0901 	mov.w	r9, #1
 800ce48:	4623      	mov	r3, r4
 800ce4a:	469a      	mov	sl, r3
 800ce4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce50:	b10a      	cbz	r2, 800ce56 <_vfiprintf_r+0x86>
 800ce52:	2a25      	cmp	r2, #37	@ 0x25
 800ce54:	d1f9      	bne.n	800ce4a <_vfiprintf_r+0x7a>
 800ce56:	ebba 0b04 	subs.w	fp, sl, r4
 800ce5a:	d00b      	beq.n	800ce74 <_vfiprintf_r+0xa4>
 800ce5c:	465b      	mov	r3, fp
 800ce5e:	4622      	mov	r2, r4
 800ce60:	4629      	mov	r1, r5
 800ce62:	4630      	mov	r0, r6
 800ce64:	f7ff ffa1 	bl	800cdaa <__sfputs_r>
 800ce68:	3001      	adds	r0, #1
 800ce6a:	f000 80a7 	beq.w	800cfbc <_vfiprintf_r+0x1ec>
 800ce6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce70:	445a      	add	r2, fp
 800ce72:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce74:	f89a 3000 	ldrb.w	r3, [sl]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	f000 809f 	beq.w	800cfbc <_vfiprintf_r+0x1ec>
 800ce7e:	2300      	movs	r3, #0
 800ce80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ce84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce88:	f10a 0a01 	add.w	sl, sl, #1
 800ce8c:	9304      	str	r3, [sp, #16]
 800ce8e:	9307      	str	r3, [sp, #28]
 800ce90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce94:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce96:	4654      	mov	r4, sl
 800ce98:	2205      	movs	r2, #5
 800ce9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce9e:	4853      	ldr	r0, [pc, #332]	@ (800cfec <_vfiprintf_r+0x21c>)
 800cea0:	f7f3 fa1e 	bl	80002e0 <memchr>
 800cea4:	9a04      	ldr	r2, [sp, #16]
 800cea6:	b9d8      	cbnz	r0, 800cee0 <_vfiprintf_r+0x110>
 800cea8:	06d1      	lsls	r1, r2, #27
 800ceaa:	bf44      	itt	mi
 800ceac:	2320      	movmi	r3, #32
 800ceae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ceb2:	0713      	lsls	r3, r2, #28
 800ceb4:	bf44      	itt	mi
 800ceb6:	232b      	movmi	r3, #43	@ 0x2b
 800ceb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cebc:	f89a 3000 	ldrb.w	r3, [sl]
 800cec0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cec2:	d015      	beq.n	800cef0 <_vfiprintf_r+0x120>
 800cec4:	9a07      	ldr	r2, [sp, #28]
 800cec6:	4654      	mov	r4, sl
 800cec8:	2000      	movs	r0, #0
 800ceca:	f04f 0c0a 	mov.w	ip, #10
 800cece:	4621      	mov	r1, r4
 800ced0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ced4:	3b30      	subs	r3, #48	@ 0x30
 800ced6:	2b09      	cmp	r3, #9
 800ced8:	d94b      	bls.n	800cf72 <_vfiprintf_r+0x1a2>
 800ceda:	b1b0      	cbz	r0, 800cf0a <_vfiprintf_r+0x13a>
 800cedc:	9207      	str	r2, [sp, #28]
 800cede:	e014      	b.n	800cf0a <_vfiprintf_r+0x13a>
 800cee0:	eba0 0308 	sub.w	r3, r0, r8
 800cee4:	fa09 f303 	lsl.w	r3, r9, r3
 800cee8:	4313      	orrs	r3, r2
 800ceea:	9304      	str	r3, [sp, #16]
 800ceec:	46a2      	mov	sl, r4
 800ceee:	e7d2      	b.n	800ce96 <_vfiprintf_r+0xc6>
 800cef0:	9b03      	ldr	r3, [sp, #12]
 800cef2:	1d19      	adds	r1, r3, #4
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	9103      	str	r1, [sp, #12]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	bfbb      	ittet	lt
 800cefc:	425b      	neglt	r3, r3
 800cefe:	f042 0202 	orrlt.w	r2, r2, #2
 800cf02:	9307      	strge	r3, [sp, #28]
 800cf04:	9307      	strlt	r3, [sp, #28]
 800cf06:	bfb8      	it	lt
 800cf08:	9204      	strlt	r2, [sp, #16]
 800cf0a:	7823      	ldrb	r3, [r4, #0]
 800cf0c:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf0e:	d10a      	bne.n	800cf26 <_vfiprintf_r+0x156>
 800cf10:	7863      	ldrb	r3, [r4, #1]
 800cf12:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf14:	d132      	bne.n	800cf7c <_vfiprintf_r+0x1ac>
 800cf16:	9b03      	ldr	r3, [sp, #12]
 800cf18:	1d1a      	adds	r2, r3, #4
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	9203      	str	r2, [sp, #12]
 800cf1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf22:	3402      	adds	r4, #2
 800cf24:	9305      	str	r3, [sp, #20]
 800cf26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cffc <_vfiprintf_r+0x22c>
 800cf2a:	7821      	ldrb	r1, [r4, #0]
 800cf2c:	2203      	movs	r2, #3
 800cf2e:	4650      	mov	r0, sl
 800cf30:	f7f3 f9d6 	bl	80002e0 <memchr>
 800cf34:	b138      	cbz	r0, 800cf46 <_vfiprintf_r+0x176>
 800cf36:	9b04      	ldr	r3, [sp, #16]
 800cf38:	eba0 000a 	sub.w	r0, r0, sl
 800cf3c:	2240      	movs	r2, #64	@ 0x40
 800cf3e:	4082      	lsls	r2, r0
 800cf40:	4313      	orrs	r3, r2
 800cf42:	3401      	adds	r4, #1
 800cf44:	9304      	str	r3, [sp, #16]
 800cf46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf4a:	4829      	ldr	r0, [pc, #164]	@ (800cff0 <_vfiprintf_r+0x220>)
 800cf4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf50:	2206      	movs	r2, #6
 800cf52:	f7f3 f9c5 	bl	80002e0 <memchr>
 800cf56:	2800      	cmp	r0, #0
 800cf58:	d03f      	beq.n	800cfda <_vfiprintf_r+0x20a>
 800cf5a:	4b26      	ldr	r3, [pc, #152]	@ (800cff4 <_vfiprintf_r+0x224>)
 800cf5c:	bb1b      	cbnz	r3, 800cfa6 <_vfiprintf_r+0x1d6>
 800cf5e:	9b03      	ldr	r3, [sp, #12]
 800cf60:	3307      	adds	r3, #7
 800cf62:	f023 0307 	bic.w	r3, r3, #7
 800cf66:	3308      	adds	r3, #8
 800cf68:	9303      	str	r3, [sp, #12]
 800cf6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf6c:	443b      	add	r3, r7
 800cf6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf70:	e76a      	b.n	800ce48 <_vfiprintf_r+0x78>
 800cf72:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf76:	460c      	mov	r4, r1
 800cf78:	2001      	movs	r0, #1
 800cf7a:	e7a8      	b.n	800cece <_vfiprintf_r+0xfe>
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	3401      	adds	r4, #1
 800cf80:	9305      	str	r3, [sp, #20]
 800cf82:	4619      	mov	r1, r3
 800cf84:	f04f 0c0a 	mov.w	ip, #10
 800cf88:	4620      	mov	r0, r4
 800cf8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf8e:	3a30      	subs	r2, #48	@ 0x30
 800cf90:	2a09      	cmp	r2, #9
 800cf92:	d903      	bls.n	800cf9c <_vfiprintf_r+0x1cc>
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d0c6      	beq.n	800cf26 <_vfiprintf_r+0x156>
 800cf98:	9105      	str	r1, [sp, #20]
 800cf9a:	e7c4      	b.n	800cf26 <_vfiprintf_r+0x156>
 800cf9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfa0:	4604      	mov	r4, r0
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e7f0      	b.n	800cf88 <_vfiprintf_r+0x1b8>
 800cfa6:	ab03      	add	r3, sp, #12
 800cfa8:	9300      	str	r3, [sp, #0]
 800cfaa:	462a      	mov	r2, r5
 800cfac:	4b12      	ldr	r3, [pc, #72]	@ (800cff8 <_vfiprintf_r+0x228>)
 800cfae:	a904      	add	r1, sp, #16
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	f7fd fe21 	bl	800abf8 <_printf_float>
 800cfb6:	4607      	mov	r7, r0
 800cfb8:	1c78      	adds	r0, r7, #1
 800cfba:	d1d6      	bne.n	800cf6a <_vfiprintf_r+0x19a>
 800cfbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfbe:	07d9      	lsls	r1, r3, #31
 800cfc0:	d405      	bmi.n	800cfce <_vfiprintf_r+0x1fe>
 800cfc2:	89ab      	ldrh	r3, [r5, #12]
 800cfc4:	059a      	lsls	r2, r3, #22
 800cfc6:	d402      	bmi.n	800cfce <_vfiprintf_r+0x1fe>
 800cfc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfca:	f7fe fab7 	bl	800b53c <__retarget_lock_release_recursive>
 800cfce:	89ab      	ldrh	r3, [r5, #12]
 800cfd0:	065b      	lsls	r3, r3, #25
 800cfd2:	f53f af1f 	bmi.w	800ce14 <_vfiprintf_r+0x44>
 800cfd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cfd8:	e71e      	b.n	800ce18 <_vfiprintf_r+0x48>
 800cfda:	ab03      	add	r3, sp, #12
 800cfdc:	9300      	str	r3, [sp, #0]
 800cfde:	462a      	mov	r2, r5
 800cfe0:	4b05      	ldr	r3, [pc, #20]	@ (800cff8 <_vfiprintf_r+0x228>)
 800cfe2:	a904      	add	r1, sp, #16
 800cfe4:	4630      	mov	r0, r6
 800cfe6:	f7fe f88f 	bl	800b108 <_printf_i>
 800cfea:	e7e4      	b.n	800cfb6 <_vfiprintf_r+0x1e6>
 800cfec:	0800e217 	.word	0x0800e217
 800cff0:	0800e221 	.word	0x0800e221
 800cff4:	0800abf9 	.word	0x0800abf9
 800cff8:	0800cdab 	.word	0x0800cdab
 800cffc:	0800e21d 	.word	0x0800e21d

0800d000 <__swbuf_r>:
 800d000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d002:	460e      	mov	r6, r1
 800d004:	4614      	mov	r4, r2
 800d006:	4605      	mov	r5, r0
 800d008:	b118      	cbz	r0, 800d012 <__swbuf_r+0x12>
 800d00a:	6a03      	ldr	r3, [r0, #32]
 800d00c:	b90b      	cbnz	r3, 800d012 <__swbuf_r+0x12>
 800d00e:	f7fe fa27 	bl	800b460 <__sinit>
 800d012:	69a3      	ldr	r3, [r4, #24]
 800d014:	60a3      	str	r3, [r4, #8]
 800d016:	89a3      	ldrh	r3, [r4, #12]
 800d018:	071a      	lsls	r2, r3, #28
 800d01a:	d501      	bpl.n	800d020 <__swbuf_r+0x20>
 800d01c:	6923      	ldr	r3, [r4, #16]
 800d01e:	b943      	cbnz	r3, 800d032 <__swbuf_r+0x32>
 800d020:	4621      	mov	r1, r4
 800d022:	4628      	mov	r0, r5
 800d024:	f000 f82a 	bl	800d07c <__swsetup_r>
 800d028:	b118      	cbz	r0, 800d032 <__swbuf_r+0x32>
 800d02a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d02e:	4638      	mov	r0, r7
 800d030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d032:	6823      	ldr	r3, [r4, #0]
 800d034:	6922      	ldr	r2, [r4, #16]
 800d036:	1a98      	subs	r0, r3, r2
 800d038:	6963      	ldr	r3, [r4, #20]
 800d03a:	b2f6      	uxtb	r6, r6
 800d03c:	4283      	cmp	r3, r0
 800d03e:	4637      	mov	r7, r6
 800d040:	dc05      	bgt.n	800d04e <__swbuf_r+0x4e>
 800d042:	4621      	mov	r1, r4
 800d044:	4628      	mov	r0, r5
 800d046:	f7ff f987 	bl	800c358 <_fflush_r>
 800d04a:	2800      	cmp	r0, #0
 800d04c:	d1ed      	bne.n	800d02a <__swbuf_r+0x2a>
 800d04e:	68a3      	ldr	r3, [r4, #8]
 800d050:	3b01      	subs	r3, #1
 800d052:	60a3      	str	r3, [r4, #8]
 800d054:	6823      	ldr	r3, [r4, #0]
 800d056:	1c5a      	adds	r2, r3, #1
 800d058:	6022      	str	r2, [r4, #0]
 800d05a:	701e      	strb	r6, [r3, #0]
 800d05c:	6962      	ldr	r2, [r4, #20]
 800d05e:	1c43      	adds	r3, r0, #1
 800d060:	429a      	cmp	r2, r3
 800d062:	d004      	beq.n	800d06e <__swbuf_r+0x6e>
 800d064:	89a3      	ldrh	r3, [r4, #12]
 800d066:	07db      	lsls	r3, r3, #31
 800d068:	d5e1      	bpl.n	800d02e <__swbuf_r+0x2e>
 800d06a:	2e0a      	cmp	r6, #10
 800d06c:	d1df      	bne.n	800d02e <__swbuf_r+0x2e>
 800d06e:	4621      	mov	r1, r4
 800d070:	4628      	mov	r0, r5
 800d072:	f7ff f971 	bl	800c358 <_fflush_r>
 800d076:	2800      	cmp	r0, #0
 800d078:	d0d9      	beq.n	800d02e <__swbuf_r+0x2e>
 800d07a:	e7d6      	b.n	800d02a <__swbuf_r+0x2a>

0800d07c <__swsetup_r>:
 800d07c:	b538      	push	{r3, r4, r5, lr}
 800d07e:	4b29      	ldr	r3, [pc, #164]	@ (800d124 <__swsetup_r+0xa8>)
 800d080:	4605      	mov	r5, r0
 800d082:	6818      	ldr	r0, [r3, #0]
 800d084:	460c      	mov	r4, r1
 800d086:	b118      	cbz	r0, 800d090 <__swsetup_r+0x14>
 800d088:	6a03      	ldr	r3, [r0, #32]
 800d08a:	b90b      	cbnz	r3, 800d090 <__swsetup_r+0x14>
 800d08c:	f7fe f9e8 	bl	800b460 <__sinit>
 800d090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d094:	0719      	lsls	r1, r3, #28
 800d096:	d422      	bmi.n	800d0de <__swsetup_r+0x62>
 800d098:	06da      	lsls	r2, r3, #27
 800d09a:	d407      	bmi.n	800d0ac <__swsetup_r+0x30>
 800d09c:	2209      	movs	r2, #9
 800d09e:	602a      	str	r2, [r5, #0]
 800d0a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0a4:	81a3      	strh	r3, [r4, #12]
 800d0a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d0aa:	e033      	b.n	800d114 <__swsetup_r+0x98>
 800d0ac:	0758      	lsls	r0, r3, #29
 800d0ae:	d512      	bpl.n	800d0d6 <__swsetup_r+0x5a>
 800d0b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d0b2:	b141      	cbz	r1, 800d0c6 <__swsetup_r+0x4a>
 800d0b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d0b8:	4299      	cmp	r1, r3
 800d0ba:	d002      	beq.n	800d0c2 <__swsetup_r+0x46>
 800d0bc:	4628      	mov	r0, r5
 800d0be:	f7ff fddb 	bl	800cc78 <_free_r>
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d0c6:	89a3      	ldrh	r3, [r4, #12]
 800d0c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d0cc:	81a3      	strh	r3, [r4, #12]
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	6063      	str	r3, [r4, #4]
 800d0d2:	6923      	ldr	r3, [r4, #16]
 800d0d4:	6023      	str	r3, [r4, #0]
 800d0d6:	89a3      	ldrh	r3, [r4, #12]
 800d0d8:	f043 0308 	orr.w	r3, r3, #8
 800d0dc:	81a3      	strh	r3, [r4, #12]
 800d0de:	6923      	ldr	r3, [r4, #16]
 800d0e0:	b94b      	cbnz	r3, 800d0f6 <__swsetup_r+0x7a>
 800d0e2:	89a3      	ldrh	r3, [r4, #12]
 800d0e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d0e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d0ec:	d003      	beq.n	800d0f6 <__swsetup_r+0x7a>
 800d0ee:	4621      	mov	r1, r4
 800d0f0:	4628      	mov	r0, r5
 800d0f2:	f000 f83f 	bl	800d174 <__smakebuf_r>
 800d0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0fa:	f013 0201 	ands.w	r2, r3, #1
 800d0fe:	d00a      	beq.n	800d116 <__swsetup_r+0x9a>
 800d100:	2200      	movs	r2, #0
 800d102:	60a2      	str	r2, [r4, #8]
 800d104:	6962      	ldr	r2, [r4, #20]
 800d106:	4252      	negs	r2, r2
 800d108:	61a2      	str	r2, [r4, #24]
 800d10a:	6922      	ldr	r2, [r4, #16]
 800d10c:	b942      	cbnz	r2, 800d120 <__swsetup_r+0xa4>
 800d10e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d112:	d1c5      	bne.n	800d0a0 <__swsetup_r+0x24>
 800d114:	bd38      	pop	{r3, r4, r5, pc}
 800d116:	0799      	lsls	r1, r3, #30
 800d118:	bf58      	it	pl
 800d11a:	6962      	ldrpl	r2, [r4, #20]
 800d11c:	60a2      	str	r2, [r4, #8]
 800d11e:	e7f4      	b.n	800d10a <__swsetup_r+0x8e>
 800d120:	2000      	movs	r0, #0
 800d122:	e7f7      	b.n	800d114 <__swsetup_r+0x98>
 800d124:	2400002c 	.word	0x2400002c

0800d128 <__swhatbuf_r>:
 800d128:	b570      	push	{r4, r5, r6, lr}
 800d12a:	460c      	mov	r4, r1
 800d12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d130:	2900      	cmp	r1, #0
 800d132:	b096      	sub	sp, #88	@ 0x58
 800d134:	4615      	mov	r5, r2
 800d136:	461e      	mov	r6, r3
 800d138:	da0d      	bge.n	800d156 <__swhatbuf_r+0x2e>
 800d13a:	89a3      	ldrh	r3, [r4, #12]
 800d13c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d140:	f04f 0100 	mov.w	r1, #0
 800d144:	bf14      	ite	ne
 800d146:	2340      	movne	r3, #64	@ 0x40
 800d148:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d14c:	2000      	movs	r0, #0
 800d14e:	6031      	str	r1, [r6, #0]
 800d150:	602b      	str	r3, [r5, #0]
 800d152:	b016      	add	sp, #88	@ 0x58
 800d154:	bd70      	pop	{r4, r5, r6, pc}
 800d156:	466a      	mov	r2, sp
 800d158:	f000 f848 	bl	800d1ec <_fstat_r>
 800d15c:	2800      	cmp	r0, #0
 800d15e:	dbec      	blt.n	800d13a <__swhatbuf_r+0x12>
 800d160:	9901      	ldr	r1, [sp, #4]
 800d162:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d166:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d16a:	4259      	negs	r1, r3
 800d16c:	4159      	adcs	r1, r3
 800d16e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d172:	e7eb      	b.n	800d14c <__swhatbuf_r+0x24>

0800d174 <__smakebuf_r>:
 800d174:	898b      	ldrh	r3, [r1, #12]
 800d176:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d178:	079d      	lsls	r5, r3, #30
 800d17a:	4606      	mov	r6, r0
 800d17c:	460c      	mov	r4, r1
 800d17e:	d507      	bpl.n	800d190 <__smakebuf_r+0x1c>
 800d180:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d184:	6023      	str	r3, [r4, #0]
 800d186:	6123      	str	r3, [r4, #16]
 800d188:	2301      	movs	r3, #1
 800d18a:	6163      	str	r3, [r4, #20]
 800d18c:	b003      	add	sp, #12
 800d18e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d190:	ab01      	add	r3, sp, #4
 800d192:	466a      	mov	r2, sp
 800d194:	f7ff ffc8 	bl	800d128 <__swhatbuf_r>
 800d198:	9f00      	ldr	r7, [sp, #0]
 800d19a:	4605      	mov	r5, r0
 800d19c:	4639      	mov	r1, r7
 800d19e:	4630      	mov	r0, r6
 800d1a0:	f7fe ffd6 	bl	800c150 <_malloc_r>
 800d1a4:	b948      	cbnz	r0, 800d1ba <__smakebuf_r+0x46>
 800d1a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1aa:	059a      	lsls	r2, r3, #22
 800d1ac:	d4ee      	bmi.n	800d18c <__smakebuf_r+0x18>
 800d1ae:	f023 0303 	bic.w	r3, r3, #3
 800d1b2:	f043 0302 	orr.w	r3, r3, #2
 800d1b6:	81a3      	strh	r3, [r4, #12]
 800d1b8:	e7e2      	b.n	800d180 <__smakebuf_r+0xc>
 800d1ba:	89a3      	ldrh	r3, [r4, #12]
 800d1bc:	6020      	str	r0, [r4, #0]
 800d1be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1c2:	81a3      	strh	r3, [r4, #12]
 800d1c4:	9b01      	ldr	r3, [sp, #4]
 800d1c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d1ca:	b15b      	cbz	r3, 800d1e4 <__smakebuf_r+0x70>
 800d1cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1d0:	4630      	mov	r0, r6
 800d1d2:	f000 f81d 	bl	800d210 <_isatty_r>
 800d1d6:	b128      	cbz	r0, 800d1e4 <__smakebuf_r+0x70>
 800d1d8:	89a3      	ldrh	r3, [r4, #12]
 800d1da:	f023 0303 	bic.w	r3, r3, #3
 800d1de:	f043 0301 	orr.w	r3, r3, #1
 800d1e2:	81a3      	strh	r3, [r4, #12]
 800d1e4:	89a3      	ldrh	r3, [r4, #12]
 800d1e6:	431d      	orrs	r5, r3
 800d1e8:	81a5      	strh	r5, [r4, #12]
 800d1ea:	e7cf      	b.n	800d18c <__smakebuf_r+0x18>

0800d1ec <_fstat_r>:
 800d1ec:	b538      	push	{r3, r4, r5, lr}
 800d1ee:	4d07      	ldr	r5, [pc, #28]	@ (800d20c <_fstat_r+0x20>)
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	4604      	mov	r4, r0
 800d1f4:	4608      	mov	r0, r1
 800d1f6:	4611      	mov	r1, r2
 800d1f8:	602b      	str	r3, [r5, #0]
 800d1fa:	f7f6 fb5f 	bl	80038bc <_fstat>
 800d1fe:	1c43      	adds	r3, r0, #1
 800d200:	d102      	bne.n	800d208 <_fstat_r+0x1c>
 800d202:	682b      	ldr	r3, [r5, #0]
 800d204:	b103      	cbz	r3, 800d208 <_fstat_r+0x1c>
 800d206:	6023      	str	r3, [r4, #0]
 800d208:	bd38      	pop	{r3, r4, r5, pc}
 800d20a:	bf00      	nop
 800d20c:	24003714 	.word	0x24003714

0800d210 <_isatty_r>:
 800d210:	b538      	push	{r3, r4, r5, lr}
 800d212:	4d06      	ldr	r5, [pc, #24]	@ (800d22c <_isatty_r+0x1c>)
 800d214:	2300      	movs	r3, #0
 800d216:	4604      	mov	r4, r0
 800d218:	4608      	mov	r0, r1
 800d21a:	602b      	str	r3, [r5, #0]
 800d21c:	f7f6 fb5e 	bl	80038dc <_isatty>
 800d220:	1c43      	adds	r3, r0, #1
 800d222:	d102      	bne.n	800d22a <_isatty_r+0x1a>
 800d224:	682b      	ldr	r3, [r5, #0]
 800d226:	b103      	cbz	r3, 800d22a <_isatty_r+0x1a>
 800d228:	6023      	str	r3, [r4, #0]
 800d22a:	bd38      	pop	{r3, r4, r5, pc}
 800d22c:	24003714 	.word	0x24003714

0800d230 <_raise_r>:
 800d230:	291f      	cmp	r1, #31
 800d232:	b538      	push	{r3, r4, r5, lr}
 800d234:	4605      	mov	r5, r0
 800d236:	460c      	mov	r4, r1
 800d238:	d904      	bls.n	800d244 <_raise_r+0x14>
 800d23a:	2316      	movs	r3, #22
 800d23c:	6003      	str	r3, [r0, #0]
 800d23e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d242:	bd38      	pop	{r3, r4, r5, pc}
 800d244:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d246:	b112      	cbz	r2, 800d24e <_raise_r+0x1e>
 800d248:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d24c:	b94b      	cbnz	r3, 800d262 <_raise_r+0x32>
 800d24e:	4628      	mov	r0, r5
 800d250:	f000 f830 	bl	800d2b4 <_getpid_r>
 800d254:	4622      	mov	r2, r4
 800d256:	4601      	mov	r1, r0
 800d258:	4628      	mov	r0, r5
 800d25a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d25e:	f000 b817 	b.w	800d290 <_kill_r>
 800d262:	2b01      	cmp	r3, #1
 800d264:	d00a      	beq.n	800d27c <_raise_r+0x4c>
 800d266:	1c59      	adds	r1, r3, #1
 800d268:	d103      	bne.n	800d272 <_raise_r+0x42>
 800d26a:	2316      	movs	r3, #22
 800d26c:	6003      	str	r3, [r0, #0]
 800d26e:	2001      	movs	r0, #1
 800d270:	e7e7      	b.n	800d242 <_raise_r+0x12>
 800d272:	2100      	movs	r1, #0
 800d274:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d278:	4620      	mov	r0, r4
 800d27a:	4798      	blx	r3
 800d27c:	2000      	movs	r0, #0
 800d27e:	e7e0      	b.n	800d242 <_raise_r+0x12>

0800d280 <raise>:
 800d280:	4b02      	ldr	r3, [pc, #8]	@ (800d28c <raise+0xc>)
 800d282:	4601      	mov	r1, r0
 800d284:	6818      	ldr	r0, [r3, #0]
 800d286:	f7ff bfd3 	b.w	800d230 <_raise_r>
 800d28a:	bf00      	nop
 800d28c:	2400002c 	.word	0x2400002c

0800d290 <_kill_r>:
 800d290:	b538      	push	{r3, r4, r5, lr}
 800d292:	4d07      	ldr	r5, [pc, #28]	@ (800d2b0 <_kill_r+0x20>)
 800d294:	2300      	movs	r3, #0
 800d296:	4604      	mov	r4, r0
 800d298:	4608      	mov	r0, r1
 800d29a:	4611      	mov	r1, r2
 800d29c:	602b      	str	r3, [r5, #0]
 800d29e:	f7f6 faad 	bl	80037fc <_kill>
 800d2a2:	1c43      	adds	r3, r0, #1
 800d2a4:	d102      	bne.n	800d2ac <_kill_r+0x1c>
 800d2a6:	682b      	ldr	r3, [r5, #0]
 800d2a8:	b103      	cbz	r3, 800d2ac <_kill_r+0x1c>
 800d2aa:	6023      	str	r3, [r4, #0]
 800d2ac:	bd38      	pop	{r3, r4, r5, pc}
 800d2ae:	bf00      	nop
 800d2b0:	24003714 	.word	0x24003714

0800d2b4 <_getpid_r>:
 800d2b4:	f7f6 ba9a 	b.w	80037ec <_getpid>

0800d2b8 <sin>:
 800d2b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2ba:	eeb0 7b40 	vmov.f64	d7, d0
 800d2be:	ee17 3a90 	vmov	r3, s15
 800d2c2:	4a21      	ldr	r2, [pc, #132]	@ (800d348 <sin+0x90>)
 800d2c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d807      	bhi.n	800d2dc <sin+0x24>
 800d2cc:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800d340 <sin+0x88>
 800d2d0:	2000      	movs	r0, #0
 800d2d2:	b005      	add	sp, #20
 800d2d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2d8:	f000 bc62 	b.w	800dba0 <__kernel_sin>
 800d2dc:	4a1b      	ldr	r2, [pc, #108]	@ (800d34c <sin+0x94>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d904      	bls.n	800d2ec <sin+0x34>
 800d2e2:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d2e6:	b005      	add	sp, #20
 800d2e8:	f85d fb04 	ldr.w	pc, [sp], #4
 800d2ec:	4668      	mov	r0, sp
 800d2ee:	f000 f82f 	bl	800d350 <__ieee754_rem_pio2>
 800d2f2:	f000 0003 	and.w	r0, r0, #3
 800d2f6:	2801      	cmp	r0, #1
 800d2f8:	d00a      	beq.n	800d310 <sin+0x58>
 800d2fa:	2802      	cmp	r0, #2
 800d2fc:	d00f      	beq.n	800d31e <sin+0x66>
 800d2fe:	b9c0      	cbnz	r0, 800d332 <sin+0x7a>
 800d300:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d304:	ed9d 0b00 	vldr	d0, [sp]
 800d308:	2001      	movs	r0, #1
 800d30a:	f000 fc49 	bl	800dba0 <__kernel_sin>
 800d30e:	e7ea      	b.n	800d2e6 <sin+0x2e>
 800d310:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d314:	ed9d 0b00 	vldr	d0, [sp]
 800d318:	f000 fbda 	bl	800dad0 <__kernel_cos>
 800d31c:	e7e3      	b.n	800d2e6 <sin+0x2e>
 800d31e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d322:	ed9d 0b00 	vldr	d0, [sp]
 800d326:	2001      	movs	r0, #1
 800d328:	f000 fc3a 	bl	800dba0 <__kernel_sin>
 800d32c:	eeb1 0b40 	vneg.f64	d0, d0
 800d330:	e7d9      	b.n	800d2e6 <sin+0x2e>
 800d332:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d336:	ed9d 0b00 	vldr	d0, [sp]
 800d33a:	f000 fbc9 	bl	800dad0 <__kernel_cos>
 800d33e:	e7f5      	b.n	800d32c <sin+0x74>
	...
 800d348:	3fe921fb 	.word	0x3fe921fb
 800d34c:	7fefffff 	.word	0x7fefffff

0800d350 <__ieee754_rem_pio2>:
 800d350:	b570      	push	{r4, r5, r6, lr}
 800d352:	eeb0 7b40 	vmov.f64	d7, d0
 800d356:	ee17 5a90 	vmov	r5, s15
 800d35a:	4b99      	ldr	r3, [pc, #612]	@ (800d5c0 <__ieee754_rem_pio2+0x270>)
 800d35c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800d360:	429e      	cmp	r6, r3
 800d362:	b088      	sub	sp, #32
 800d364:	4604      	mov	r4, r0
 800d366:	d807      	bhi.n	800d378 <__ieee754_rem_pio2+0x28>
 800d368:	2200      	movs	r2, #0
 800d36a:	2300      	movs	r3, #0
 800d36c:	ed84 0b00 	vstr	d0, [r4]
 800d370:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d374:	2000      	movs	r0, #0
 800d376:	e01b      	b.n	800d3b0 <__ieee754_rem_pio2+0x60>
 800d378:	4b92      	ldr	r3, [pc, #584]	@ (800d5c4 <__ieee754_rem_pio2+0x274>)
 800d37a:	429e      	cmp	r6, r3
 800d37c:	d83b      	bhi.n	800d3f6 <__ieee754_rem_pio2+0xa6>
 800d37e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800d382:	2d00      	cmp	r5, #0
 800d384:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800d580 <__ieee754_rem_pio2+0x230>
 800d388:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800d38c:	dd19      	ble.n	800d3c2 <__ieee754_rem_pio2+0x72>
 800d38e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d392:	429e      	cmp	r6, r3
 800d394:	d00e      	beq.n	800d3b4 <__ieee754_rem_pio2+0x64>
 800d396:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800d588 <__ieee754_rem_pio2+0x238>
 800d39a:	ee37 6b45 	vsub.f64	d6, d7, d5
 800d39e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d3a2:	ed84 6b00 	vstr	d6, [r4]
 800d3a6:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d3aa:	ed84 7b02 	vstr	d7, [r4, #8]
 800d3ae:	2001      	movs	r0, #1
 800d3b0:	b008      	add	sp, #32
 800d3b2:	bd70      	pop	{r4, r5, r6, pc}
 800d3b4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800d590 <__ieee754_rem_pio2+0x240>
 800d3b8:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800d598 <__ieee754_rem_pio2+0x248>
 800d3bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d3c0:	e7eb      	b.n	800d39a <__ieee754_rem_pio2+0x4a>
 800d3c2:	429e      	cmp	r6, r3
 800d3c4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800d3c8:	d00e      	beq.n	800d3e8 <__ieee754_rem_pio2+0x98>
 800d3ca:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800d588 <__ieee754_rem_pio2+0x238>
 800d3ce:	ee37 6b05 	vadd.f64	d6, d7, d5
 800d3d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d3d6:	ed84 6b00 	vstr	d6, [r4]
 800d3da:	ee37 7b05 	vadd.f64	d7, d7, d5
 800d3de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d3e2:	ed84 7b02 	vstr	d7, [r4, #8]
 800d3e6:	e7e3      	b.n	800d3b0 <__ieee754_rem_pio2+0x60>
 800d3e8:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800d590 <__ieee754_rem_pio2+0x240>
 800d3ec:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800d598 <__ieee754_rem_pio2+0x248>
 800d3f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d3f4:	e7eb      	b.n	800d3ce <__ieee754_rem_pio2+0x7e>
 800d3f6:	4b74      	ldr	r3, [pc, #464]	@ (800d5c8 <__ieee754_rem_pio2+0x278>)
 800d3f8:	429e      	cmp	r6, r3
 800d3fa:	d870      	bhi.n	800d4de <__ieee754_rem_pio2+0x18e>
 800d3fc:	f000 fc28 	bl	800dc50 <fabs>
 800d400:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800d404:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800d5a0 <__ieee754_rem_pio2+0x250>
 800d408:	eea0 7b06 	vfma.f64	d7, d0, d6
 800d40c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800d410:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800d414:	ee17 0a90 	vmov	r0, s15
 800d418:	eeb1 4b45 	vneg.f64	d4, d5
 800d41c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800d580 <__ieee754_rem_pio2+0x230>
 800d420:	eea5 0b47 	vfms.f64	d0, d5, d7
 800d424:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800d588 <__ieee754_rem_pio2+0x238>
 800d428:	281f      	cmp	r0, #31
 800d42a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800d42e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d432:	dc05      	bgt.n	800d440 <__ieee754_rem_pio2+0xf0>
 800d434:	4b65      	ldr	r3, [pc, #404]	@ (800d5cc <__ieee754_rem_pio2+0x27c>)
 800d436:	1e42      	subs	r2, r0, #1
 800d438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d43c:	42b3      	cmp	r3, r6
 800d43e:	d109      	bne.n	800d454 <__ieee754_rem_pio2+0x104>
 800d440:	ee16 3a90 	vmov	r3, s13
 800d444:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d448:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800d44c:	2b10      	cmp	r3, #16
 800d44e:	ea4f 5226 	mov.w	r2, r6, asr #20
 800d452:	dc02      	bgt.n	800d45a <__ieee754_rem_pio2+0x10a>
 800d454:	ed84 6b00 	vstr	d6, [r4]
 800d458:	e01a      	b.n	800d490 <__ieee754_rem_pio2+0x140>
 800d45a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800d590 <__ieee754_rem_pio2+0x240>
 800d45e:	eeb0 6b40 	vmov.f64	d6, d0
 800d462:	eea4 6b03 	vfma.f64	d6, d4, d3
 800d466:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d46a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800d46e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800d598 <__ieee754_rem_pio2+0x248>
 800d472:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800d476:	ee36 3b47 	vsub.f64	d3, d6, d7
 800d47a:	ee13 3a90 	vmov	r3, s7
 800d47e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d482:	1ad3      	subs	r3, r2, r3
 800d484:	2b31      	cmp	r3, #49	@ 0x31
 800d486:	dc17      	bgt.n	800d4b8 <__ieee754_rem_pio2+0x168>
 800d488:	eeb0 0b46 	vmov.f64	d0, d6
 800d48c:	ed84 3b00 	vstr	d3, [r4]
 800d490:	ed94 6b00 	vldr	d6, [r4]
 800d494:	2d00      	cmp	r5, #0
 800d496:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d49a:	ee30 0b47 	vsub.f64	d0, d0, d7
 800d49e:	ed84 0b02 	vstr	d0, [r4, #8]
 800d4a2:	da85      	bge.n	800d3b0 <__ieee754_rem_pio2+0x60>
 800d4a4:	eeb1 6b46 	vneg.f64	d6, d6
 800d4a8:	eeb1 0b40 	vneg.f64	d0, d0
 800d4ac:	ed84 6b00 	vstr	d6, [r4]
 800d4b0:	ed84 0b02 	vstr	d0, [r4, #8]
 800d4b4:	4240      	negs	r0, r0
 800d4b6:	e77b      	b.n	800d3b0 <__ieee754_rem_pio2+0x60>
 800d4b8:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800d5a8 <__ieee754_rem_pio2+0x258>
 800d4bc:	eeb0 0b46 	vmov.f64	d0, d6
 800d4c0:	eea4 0b07 	vfma.f64	d0, d4, d7
 800d4c4:	ee36 6b40 	vsub.f64	d6, d6, d0
 800d4c8:	eea4 6b07 	vfma.f64	d6, d4, d7
 800d4cc:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800d5b0 <__ieee754_rem_pio2+0x260>
 800d4d0:	eeb0 7b46 	vmov.f64	d7, d6
 800d4d4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800d4d8:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d4dc:	e7ba      	b.n	800d454 <__ieee754_rem_pio2+0x104>
 800d4de:	4b3c      	ldr	r3, [pc, #240]	@ (800d5d0 <__ieee754_rem_pio2+0x280>)
 800d4e0:	429e      	cmp	r6, r3
 800d4e2:	d906      	bls.n	800d4f2 <__ieee754_rem_pio2+0x1a2>
 800d4e4:	ee30 7b40 	vsub.f64	d7, d0, d0
 800d4e8:	ed80 7b02 	vstr	d7, [r0, #8]
 800d4ec:	ed80 7b00 	vstr	d7, [r0]
 800d4f0:	e740      	b.n	800d374 <__ieee754_rem_pio2+0x24>
 800d4f2:	ee10 3a10 	vmov	r3, s0
 800d4f6:	1532      	asrs	r2, r6, #20
 800d4f8:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800d502:	ec41 0b17 	vmov	d7, r0, r1
 800d506:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d50a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800d5b8 <__ieee754_rem_pio2+0x268>
 800d50e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800d512:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d516:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d51a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d51e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d522:	a808      	add	r0, sp, #32
 800d524:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800d528:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d52c:	ed8d 6b04 	vstr	d6, [sp, #16]
 800d530:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d534:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d538:	2103      	movs	r1, #3
 800d53a:	ed30 7b02 	vldmdb	r0!, {d7}
 800d53e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d546:	460b      	mov	r3, r1
 800d548:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 800d54c:	d0f5      	beq.n	800d53a <__ieee754_rem_pio2+0x1ea>
 800d54e:	4921      	ldr	r1, [pc, #132]	@ (800d5d4 <__ieee754_rem_pio2+0x284>)
 800d550:	9101      	str	r1, [sp, #4]
 800d552:	2102      	movs	r1, #2
 800d554:	9100      	str	r1, [sp, #0]
 800d556:	a802      	add	r0, sp, #8
 800d558:	4621      	mov	r1, r4
 800d55a:	f000 f83d 	bl	800d5d8 <__kernel_rem_pio2>
 800d55e:	2d00      	cmp	r5, #0
 800d560:	f6bf af26 	bge.w	800d3b0 <__ieee754_rem_pio2+0x60>
 800d564:	ed94 7b00 	vldr	d7, [r4]
 800d568:	eeb1 7b47 	vneg.f64	d7, d7
 800d56c:	ed84 7b00 	vstr	d7, [r4]
 800d570:	ed94 7b02 	vldr	d7, [r4, #8]
 800d574:	eeb1 7b47 	vneg.f64	d7, d7
 800d578:	ed84 7b02 	vstr	d7, [r4, #8]
 800d57c:	e79a      	b.n	800d4b4 <__ieee754_rem_pio2+0x164>
 800d57e:	bf00      	nop
 800d580:	54400000 	.word	0x54400000
 800d584:	3ff921fb 	.word	0x3ff921fb
 800d588:	1a626331 	.word	0x1a626331
 800d58c:	3dd0b461 	.word	0x3dd0b461
 800d590:	1a600000 	.word	0x1a600000
 800d594:	3dd0b461 	.word	0x3dd0b461
 800d598:	2e037073 	.word	0x2e037073
 800d59c:	3ba3198a 	.word	0x3ba3198a
 800d5a0:	6dc9c883 	.word	0x6dc9c883
 800d5a4:	3fe45f30 	.word	0x3fe45f30
 800d5a8:	2e000000 	.word	0x2e000000
 800d5ac:	3ba3198a 	.word	0x3ba3198a
 800d5b0:	252049c1 	.word	0x252049c1
 800d5b4:	397b839a 	.word	0x397b839a
 800d5b8:	00000000 	.word	0x00000000
 800d5bc:	41700000 	.word	0x41700000
 800d5c0:	3fe921fb 	.word	0x3fe921fb
 800d5c4:	4002d97b 	.word	0x4002d97b
 800d5c8:	413921fb 	.word	0x413921fb
 800d5cc:	0800e228 	.word	0x0800e228
 800d5d0:	7fefffff 	.word	0x7fefffff
 800d5d4:	0800e2a8 	.word	0x0800e2a8

0800d5d8 <__kernel_rem_pio2>:
 800d5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5dc:	ed2d 8b06 	vpush	{d8-d10}
 800d5e0:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800d5e4:	469b      	mov	fp, r3
 800d5e6:	9001      	str	r0, [sp, #4]
 800d5e8:	4bbb      	ldr	r3, [pc, #748]	@ (800d8d8 <__kernel_rem_pio2+0x300>)
 800d5ea:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800d5ec:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800d5f0:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800d5f4:	f112 0f14 	cmn.w	r2, #20
 800d5f8:	bfa8      	it	ge
 800d5fa:	1ed3      	subge	r3, r2, #3
 800d5fc:	f10b 3aff 	add.w	sl, fp, #4294967295	@ 0xffffffff
 800d600:	bfb8      	it	lt
 800d602:	2300      	movlt	r3, #0
 800d604:	f06f 0517 	mvn.w	r5, #23
 800d608:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800d8c0 <__kernel_rem_pio2+0x2e8>
 800d60c:	bfa4      	itt	ge
 800d60e:	2018      	movge	r0, #24
 800d610:	fb93 f3f0 	sdivge	r3, r3, r0
 800d614:	fb03 5505 	mla	r5, r3, r5, r5
 800d618:	eba3 040a 	sub.w	r4, r3, sl
 800d61c:	4415      	add	r5, r2
 800d61e:	460f      	mov	r7, r1
 800d620:	eb09 060a 	add.w	r6, r9, sl
 800d624:	a81a      	add	r0, sp, #104	@ 0x68
 800d626:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800d62a:	2200      	movs	r2, #0
 800d62c:	42b2      	cmp	r2, r6
 800d62e:	dd0e      	ble.n	800d64e <__kernel_rem_pio2+0x76>
 800d630:	aa1a      	add	r2, sp, #104	@ 0x68
 800d632:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800d636:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800d63a:	2600      	movs	r6, #0
 800d63c:	454e      	cmp	r6, r9
 800d63e:	dc25      	bgt.n	800d68c <__kernel_rem_pio2+0xb4>
 800d640:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800d8c0 <__kernel_rem_pio2+0x2e8>
 800d644:	f8dd c004 	ldr.w	ip, [sp, #4]
 800d648:	4614      	mov	r4, r2
 800d64a:	2000      	movs	r0, #0
 800d64c:	e015      	b.n	800d67a <__kernel_rem_pio2+0xa2>
 800d64e:	42d4      	cmn	r4, r2
 800d650:	d409      	bmi.n	800d666 <__kernel_rem_pio2+0x8e>
 800d652:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800d656:	ee07 1a90 	vmov	s15, r1
 800d65a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d65e:	eca0 7b02 	vstmia	r0!, {d7}
 800d662:	3201      	adds	r2, #1
 800d664:	e7e2      	b.n	800d62c <__kernel_rem_pio2+0x54>
 800d666:	eeb0 7b46 	vmov.f64	d7, d6
 800d66a:	e7f8      	b.n	800d65e <__kernel_rem_pio2+0x86>
 800d66c:	ecbc 5b02 	vldmia	ip!, {d5}
 800d670:	ed94 6b00 	vldr	d6, [r4]
 800d674:	3001      	adds	r0, #1
 800d676:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d67a:	4550      	cmp	r0, sl
 800d67c:	f1a4 0408 	sub.w	r4, r4, #8
 800d680:	ddf4      	ble.n	800d66c <__kernel_rem_pio2+0x94>
 800d682:	ecae 7b02 	vstmia	lr!, {d7}
 800d686:	3601      	adds	r6, #1
 800d688:	3208      	adds	r2, #8
 800d68a:	e7d7      	b.n	800d63c <__kernel_rem_pio2+0x64>
 800d68c:	aa06      	add	r2, sp, #24
 800d68e:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800d8c8 <__kernel_rem_pio2+0x2f0>
 800d692:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800d8d0 <__kernel_rem_pio2+0x2f8>
 800d696:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800d69a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800d69e:	9203      	str	r2, [sp, #12]
 800d6a0:	9302      	str	r3, [sp, #8]
 800d6a2:	464c      	mov	r4, r9
 800d6a4:	00e3      	lsls	r3, r4, #3
 800d6a6:	9304      	str	r3, [sp, #16]
 800d6a8:	ab92      	add	r3, sp, #584	@ 0x248
 800d6aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d6ae:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800d6b2:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800d6b4:	ab06      	add	r3, sp, #24
 800d6b6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800d6ba:	461e      	mov	r6, r3
 800d6bc:	4620      	mov	r0, r4
 800d6be:	2800      	cmp	r0, #0
 800d6c0:	f1a2 0208 	sub.w	r2, r2, #8
 800d6c4:	dc4a      	bgt.n	800d75c <__kernel_rem_pio2+0x184>
 800d6c6:	4628      	mov	r0, r5
 800d6c8:	9305      	str	r3, [sp, #20]
 800d6ca:	f000 fac9 	bl	800dc60 <scalbn>
 800d6ce:	eeb0 8b40 	vmov.f64	d8, d0
 800d6d2:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800d6d6:	ee28 0b00 	vmul.f64	d0, d8, d0
 800d6da:	f000 fb41 	bl	800dd60 <floor>
 800d6de:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800d6e2:	eea0 8b47 	vfms.f64	d8, d0, d7
 800d6e6:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800d6ea:	2d00      	cmp	r5, #0
 800d6ec:	ee17 8a90 	vmov	r8, s15
 800d6f0:	9b05      	ldr	r3, [sp, #20]
 800d6f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d6f6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800d6fa:	dd41      	ble.n	800d780 <__kernel_rem_pio2+0x1a8>
 800d6fc:	1e60      	subs	r0, r4, #1
 800d6fe:	aa06      	add	r2, sp, #24
 800d700:	f1c5 0c18 	rsb	ip, r5, #24
 800d704:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800d708:	fa46 f20c 	asr.w	r2, r6, ip
 800d70c:	4490      	add	r8, r2
 800d70e:	fa02 f20c 	lsl.w	r2, r2, ip
 800d712:	1ab6      	subs	r6, r6, r2
 800d714:	aa06      	add	r2, sp, #24
 800d716:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800d71a:	f1c5 0217 	rsb	r2, r5, #23
 800d71e:	4116      	asrs	r6, r2
 800d720:	2e00      	cmp	r6, #0
 800d722:	dd3c      	ble.n	800d79e <__kernel_rem_pio2+0x1c6>
 800d724:	f04f 0c00 	mov.w	ip, #0
 800d728:	f108 0801 	add.w	r8, r8, #1
 800d72c:	4660      	mov	r0, ip
 800d72e:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800d732:	4564      	cmp	r4, ip
 800d734:	dc66      	bgt.n	800d804 <__kernel_rem_pio2+0x22c>
 800d736:	2d00      	cmp	r5, #0
 800d738:	dd03      	ble.n	800d742 <__kernel_rem_pio2+0x16a>
 800d73a:	2d01      	cmp	r5, #1
 800d73c:	d072      	beq.n	800d824 <__kernel_rem_pio2+0x24c>
 800d73e:	2d02      	cmp	r5, #2
 800d740:	d07a      	beq.n	800d838 <__kernel_rem_pio2+0x260>
 800d742:	2e02      	cmp	r6, #2
 800d744:	d12b      	bne.n	800d79e <__kernel_rem_pio2+0x1c6>
 800d746:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800d74a:	ee30 8b48 	vsub.f64	d8, d0, d8
 800d74e:	b330      	cbz	r0, 800d79e <__kernel_rem_pio2+0x1c6>
 800d750:	4628      	mov	r0, r5
 800d752:	f000 fa85 	bl	800dc60 <scalbn>
 800d756:	ee38 8b40 	vsub.f64	d8, d8, d0
 800d75a:	e020      	b.n	800d79e <__kernel_rem_pio2+0x1c6>
 800d75c:	ee20 7b09 	vmul.f64	d7, d0, d9
 800d760:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800d764:	3801      	subs	r0, #1
 800d766:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800d76a:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800d76e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d772:	eca6 0a01 	vstmia	r6!, {s0}
 800d776:	ed92 0b00 	vldr	d0, [r2]
 800d77a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800d77e:	e79e      	b.n	800d6be <__kernel_rem_pio2+0xe6>
 800d780:	d105      	bne.n	800d78e <__kernel_rem_pio2+0x1b6>
 800d782:	1e62      	subs	r2, r4, #1
 800d784:	a906      	add	r1, sp, #24
 800d786:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800d78a:	15f6      	asrs	r6, r6, #23
 800d78c:	e7c8      	b.n	800d720 <__kernel_rem_pio2+0x148>
 800d78e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800d792:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d79a:	da31      	bge.n	800d800 <__kernel_rem_pio2+0x228>
 800d79c:	2600      	movs	r6, #0
 800d79e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7a6:	f040 809b 	bne.w	800d8e0 <__kernel_rem_pio2+0x308>
 800d7aa:	1e62      	subs	r2, r4, #1
 800d7ac:	2000      	movs	r0, #0
 800d7ae:	454a      	cmp	r2, r9
 800d7b0:	da49      	bge.n	800d846 <__kernel_rem_pio2+0x26e>
 800d7b2:	2800      	cmp	r0, #0
 800d7b4:	d062      	beq.n	800d87c <__kernel_rem_pio2+0x2a4>
 800d7b6:	3c01      	subs	r4, #1
 800d7b8:	ab06      	add	r3, sp, #24
 800d7ba:	3d18      	subs	r5, #24
 800d7bc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d0f8      	beq.n	800d7b6 <__kernel_rem_pio2+0x1de>
 800d7c4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800d7c8:	4628      	mov	r0, r5
 800d7ca:	f000 fa49 	bl	800dc60 <scalbn>
 800d7ce:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800d8c8 <__kernel_rem_pio2+0x2f0>
 800d7d2:	1c62      	adds	r2, r4, #1
 800d7d4:	a96a      	add	r1, sp, #424	@ 0x1a8
 800d7d6:	00d3      	lsls	r3, r2, #3
 800d7d8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d7dc:	4622      	mov	r2, r4
 800d7de:	2a00      	cmp	r2, #0
 800d7e0:	f280 80a8 	bge.w	800d934 <__kernel_rem_pio2+0x35c>
 800d7e4:	4622      	mov	r2, r4
 800d7e6:	2a00      	cmp	r2, #0
 800d7e8:	f2c0 80c6 	blt.w	800d978 <__kernel_rem_pio2+0x3a0>
 800d7ec:	a96a      	add	r1, sp, #424	@ 0x1a8
 800d7ee:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800d7f2:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800d8c0 <__kernel_rem_pio2+0x2e8>
 800d7f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800d8dc <__kernel_rem_pio2+0x304>
 800d7fa:	2000      	movs	r0, #0
 800d7fc:	1aa1      	subs	r1, r4, r2
 800d7fe:	e0b0      	b.n	800d962 <__kernel_rem_pio2+0x38a>
 800d800:	2602      	movs	r6, #2
 800d802:	e78f      	b.n	800d724 <__kernel_rem_pio2+0x14c>
 800d804:	f853 2b04 	ldr.w	r2, [r3], #4
 800d808:	b948      	cbnz	r0, 800d81e <__kernel_rem_pio2+0x246>
 800d80a:	b122      	cbz	r2, 800d816 <__kernel_rem_pio2+0x23e>
 800d80c:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800d810:	f843 2c04 	str.w	r2, [r3, #-4]
 800d814:	2201      	movs	r2, #1
 800d816:	f10c 0c01 	add.w	ip, ip, #1
 800d81a:	4610      	mov	r0, r2
 800d81c:	e789      	b.n	800d732 <__kernel_rem_pio2+0x15a>
 800d81e:	ebae 0202 	sub.w	r2, lr, r2
 800d822:	e7f5      	b.n	800d810 <__kernel_rem_pio2+0x238>
 800d824:	1e62      	subs	r2, r4, #1
 800d826:	ab06      	add	r3, sp, #24
 800d828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d82c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d830:	a906      	add	r1, sp, #24
 800d832:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d836:	e784      	b.n	800d742 <__kernel_rem_pio2+0x16a>
 800d838:	1e62      	subs	r2, r4, #1
 800d83a:	ab06      	add	r3, sp, #24
 800d83c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d840:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d844:	e7f4      	b.n	800d830 <__kernel_rem_pio2+0x258>
 800d846:	ab06      	add	r3, sp, #24
 800d848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d84c:	3a01      	subs	r2, #1
 800d84e:	4318      	orrs	r0, r3
 800d850:	e7ad      	b.n	800d7ae <__kernel_rem_pio2+0x1d6>
 800d852:	3301      	adds	r3, #1
 800d854:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800d858:	2800      	cmp	r0, #0
 800d85a:	d0fa      	beq.n	800d852 <__kernel_rem_pio2+0x27a>
 800d85c:	9a04      	ldr	r2, [sp, #16]
 800d85e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800d862:	446a      	add	r2, sp
 800d864:	eb04 000b 	add.w	r0, r4, fp
 800d868:	a91a      	add	r1, sp, #104	@ 0x68
 800d86a:	1c66      	adds	r6, r4, #1
 800d86c:	3a98      	subs	r2, #152	@ 0x98
 800d86e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800d872:	4423      	add	r3, r4
 800d874:	42b3      	cmp	r3, r6
 800d876:	da04      	bge.n	800d882 <__kernel_rem_pio2+0x2aa>
 800d878:	461c      	mov	r4, r3
 800d87a:	e713      	b.n	800d6a4 <__kernel_rem_pio2+0xcc>
 800d87c:	9a03      	ldr	r2, [sp, #12]
 800d87e:	2301      	movs	r3, #1
 800d880:	e7e8      	b.n	800d854 <__kernel_rem_pio2+0x27c>
 800d882:	9902      	ldr	r1, [sp, #8]
 800d884:	f8dd c004 	ldr.w	ip, [sp, #4]
 800d888:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800d88c:	9104      	str	r1, [sp, #16]
 800d88e:	ee07 1a90 	vmov	s15, r1
 800d892:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d896:	2400      	movs	r4, #0
 800d898:	eca0 7b02 	vstmia	r0!, {d7}
 800d89c:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800d8c0 <__kernel_rem_pio2+0x2e8>
 800d8a0:	4686      	mov	lr, r0
 800d8a2:	4554      	cmp	r4, sl
 800d8a4:	dd03      	ble.n	800d8ae <__kernel_rem_pio2+0x2d6>
 800d8a6:	eca2 7b02 	vstmia	r2!, {d7}
 800d8aa:	3601      	adds	r6, #1
 800d8ac:	e7e2      	b.n	800d874 <__kernel_rem_pio2+0x29c>
 800d8ae:	ecbc 5b02 	vldmia	ip!, {d5}
 800d8b2:	ed3e 6b02 	vldmdb	lr!, {d6}
 800d8b6:	3401      	adds	r4, #1
 800d8b8:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d8bc:	e7f1      	b.n	800d8a2 <__kernel_rem_pio2+0x2ca>
 800d8be:	bf00      	nop
	...
 800d8cc:	3e700000 	.word	0x3e700000
 800d8d0:	00000000 	.word	0x00000000
 800d8d4:	41700000 	.word	0x41700000
 800d8d8:	0800e3f0 	.word	0x0800e3f0
 800d8dc:	0800e3b0 	.word	0x0800e3b0
 800d8e0:	4268      	negs	r0, r5
 800d8e2:	eeb0 0b48 	vmov.f64	d0, d8
 800d8e6:	f000 f9bb 	bl	800dc60 <scalbn>
 800d8ea:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800dab8 <__kernel_rem_pio2+0x4e0>
 800d8ee:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800d8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8f6:	db17      	blt.n	800d928 <__kernel_rem_pio2+0x350>
 800d8f8:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 800dac0 <__kernel_rem_pio2+0x4e8>
 800d8fc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d900:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800d904:	aa06      	add	r2, sp, #24
 800d906:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800d90a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800d90e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d912:	3518      	adds	r5, #24
 800d914:	ee10 3a10 	vmov	r3, s0
 800d918:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d91c:	ee17 3a10 	vmov	r3, s14
 800d920:	3401      	adds	r4, #1
 800d922:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d926:	e74d      	b.n	800d7c4 <__kernel_rem_pio2+0x1ec>
 800d928:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d92c:	aa06      	add	r2, sp, #24
 800d92e:	ee10 3a10 	vmov	r3, s0
 800d932:	e7f6      	b.n	800d922 <__kernel_rem_pio2+0x34a>
 800d934:	a806      	add	r0, sp, #24
 800d936:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800d93a:	9001      	str	r0, [sp, #4]
 800d93c:	ee07 0a90 	vmov	s15, r0
 800d940:	3a01      	subs	r2, #1
 800d942:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d946:	ee27 7b00 	vmul.f64	d7, d7, d0
 800d94a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800d94e:	ed21 7b02 	vstmdb	r1!, {d7}
 800d952:	e744      	b.n	800d7de <__kernel_rem_pio2+0x206>
 800d954:	ecbc 5b02 	vldmia	ip!, {d5}
 800d958:	ecb5 6b02 	vldmia	r5!, {d6}
 800d95c:	3001      	adds	r0, #1
 800d95e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d962:	4548      	cmp	r0, r9
 800d964:	dc01      	bgt.n	800d96a <__kernel_rem_pio2+0x392>
 800d966:	4281      	cmp	r1, r0
 800d968:	daf4      	bge.n	800d954 <__kernel_rem_pio2+0x37c>
 800d96a:	a842      	add	r0, sp, #264	@ 0x108
 800d96c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d970:	ed81 7b00 	vstr	d7, [r1]
 800d974:	3a01      	subs	r2, #1
 800d976:	e736      	b.n	800d7e6 <__kernel_rem_pio2+0x20e>
 800d978:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800d97a:	2a02      	cmp	r2, #2
 800d97c:	dc0a      	bgt.n	800d994 <__kernel_rem_pio2+0x3bc>
 800d97e:	2a00      	cmp	r2, #0
 800d980:	dc2d      	bgt.n	800d9de <__kernel_rem_pio2+0x406>
 800d982:	d046      	beq.n	800da12 <__kernel_rem_pio2+0x43a>
 800d984:	f008 0007 	and.w	r0, r8, #7
 800d988:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800d98c:	ecbd 8b06 	vpop	{d8-d10}
 800d990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d994:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800d996:	2a03      	cmp	r2, #3
 800d998:	d1f4      	bne.n	800d984 <__kernel_rem_pio2+0x3ac>
 800d99a:	a942      	add	r1, sp, #264	@ 0x108
 800d99c:	f1a3 0208 	sub.w	r2, r3, #8
 800d9a0:	440a      	add	r2, r1
 800d9a2:	4611      	mov	r1, r2
 800d9a4:	4620      	mov	r0, r4
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	f1a1 0108 	sub.w	r1, r1, #8
 800d9ac:	dc52      	bgt.n	800da54 <__kernel_rem_pio2+0x47c>
 800d9ae:	4621      	mov	r1, r4
 800d9b0:	2901      	cmp	r1, #1
 800d9b2:	f1a2 0208 	sub.w	r2, r2, #8
 800d9b6:	dc5d      	bgt.n	800da74 <__kernel_rem_pio2+0x49c>
 800d9b8:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800dac8 <__kernel_rem_pio2+0x4f0>
 800d9bc:	aa42      	add	r2, sp, #264	@ 0x108
 800d9be:	4413      	add	r3, r2
 800d9c0:	2c01      	cmp	r4, #1
 800d9c2:	dc67      	bgt.n	800da94 <__kernel_rem_pio2+0x4bc>
 800d9c4:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800d9c8:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800d9cc:	2e00      	cmp	r6, #0
 800d9ce:	d167      	bne.n	800daa0 <__kernel_rem_pio2+0x4c8>
 800d9d0:	ed87 5b00 	vstr	d5, [r7]
 800d9d4:	ed87 6b02 	vstr	d6, [r7, #8]
 800d9d8:	ed87 7b04 	vstr	d7, [r7, #16]
 800d9dc:	e7d2      	b.n	800d984 <__kernel_rem_pio2+0x3ac>
 800d9de:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800dac8 <__kernel_rem_pio2+0x4f0>
 800d9e2:	aa42      	add	r2, sp, #264	@ 0x108
 800d9e4:	4413      	add	r3, r2
 800d9e6:	4622      	mov	r2, r4
 800d9e8:	2a00      	cmp	r2, #0
 800d9ea:	da24      	bge.n	800da36 <__kernel_rem_pio2+0x45e>
 800d9ec:	b34e      	cbz	r6, 800da42 <__kernel_rem_pio2+0x46a>
 800d9ee:	eeb1 7b46 	vneg.f64	d7, d6
 800d9f2:	ed87 7b00 	vstr	d7, [r7]
 800d9f6:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800d9fa:	aa44      	add	r2, sp, #272	@ 0x110
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	ee37 7b46 	vsub.f64	d7, d7, d6
 800da02:	429c      	cmp	r4, r3
 800da04:	da20      	bge.n	800da48 <__kernel_rem_pio2+0x470>
 800da06:	b10e      	cbz	r6, 800da0c <__kernel_rem_pio2+0x434>
 800da08:	eeb1 7b47 	vneg.f64	d7, d7
 800da0c:	ed87 7b02 	vstr	d7, [r7, #8]
 800da10:	e7b8      	b.n	800d984 <__kernel_rem_pio2+0x3ac>
 800da12:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800dac8 <__kernel_rem_pio2+0x4f0>
 800da16:	aa42      	add	r2, sp, #264	@ 0x108
 800da18:	4413      	add	r3, r2
 800da1a:	2c00      	cmp	r4, #0
 800da1c:	da05      	bge.n	800da2a <__kernel_rem_pio2+0x452>
 800da1e:	b10e      	cbz	r6, 800da24 <__kernel_rem_pio2+0x44c>
 800da20:	eeb1 7b47 	vneg.f64	d7, d7
 800da24:	ed87 7b00 	vstr	d7, [r7]
 800da28:	e7ac      	b.n	800d984 <__kernel_rem_pio2+0x3ac>
 800da2a:	ed33 6b02 	vldmdb	r3!, {d6}
 800da2e:	3c01      	subs	r4, #1
 800da30:	ee37 7b06 	vadd.f64	d7, d7, d6
 800da34:	e7f1      	b.n	800da1a <__kernel_rem_pio2+0x442>
 800da36:	ed33 7b02 	vldmdb	r3!, {d7}
 800da3a:	3a01      	subs	r2, #1
 800da3c:	ee36 6b07 	vadd.f64	d6, d6, d7
 800da40:	e7d2      	b.n	800d9e8 <__kernel_rem_pio2+0x410>
 800da42:	eeb0 7b46 	vmov.f64	d7, d6
 800da46:	e7d4      	b.n	800d9f2 <__kernel_rem_pio2+0x41a>
 800da48:	ecb2 6b02 	vldmia	r2!, {d6}
 800da4c:	3301      	adds	r3, #1
 800da4e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800da52:	e7d6      	b.n	800da02 <__kernel_rem_pio2+0x42a>
 800da54:	ed91 7b00 	vldr	d7, [r1]
 800da58:	ed91 5b02 	vldr	d5, [r1, #8]
 800da5c:	3801      	subs	r0, #1
 800da5e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800da62:	ee37 7b46 	vsub.f64	d7, d7, d6
 800da66:	ed81 6b00 	vstr	d6, [r1]
 800da6a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800da6e:	ed81 7b02 	vstr	d7, [r1, #8]
 800da72:	e798      	b.n	800d9a6 <__kernel_rem_pio2+0x3ce>
 800da74:	ed92 7b00 	vldr	d7, [r2]
 800da78:	ed92 5b02 	vldr	d5, [r2, #8]
 800da7c:	3901      	subs	r1, #1
 800da7e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800da82:	ee37 7b46 	vsub.f64	d7, d7, d6
 800da86:	ed82 6b00 	vstr	d6, [r2]
 800da8a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800da8e:	ed82 7b02 	vstr	d7, [r2, #8]
 800da92:	e78d      	b.n	800d9b0 <__kernel_rem_pio2+0x3d8>
 800da94:	ed33 6b02 	vldmdb	r3!, {d6}
 800da98:	3c01      	subs	r4, #1
 800da9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800da9e:	e78f      	b.n	800d9c0 <__kernel_rem_pio2+0x3e8>
 800daa0:	eeb1 5b45 	vneg.f64	d5, d5
 800daa4:	eeb1 6b46 	vneg.f64	d6, d6
 800daa8:	ed87 5b00 	vstr	d5, [r7]
 800daac:	eeb1 7b47 	vneg.f64	d7, d7
 800dab0:	ed87 6b02 	vstr	d6, [r7, #8]
 800dab4:	e790      	b.n	800d9d8 <__kernel_rem_pio2+0x400>
 800dab6:	bf00      	nop
 800dab8:	00000000 	.word	0x00000000
 800dabc:	41700000 	.word	0x41700000
 800dac0:	00000000 	.word	0x00000000
 800dac4:	3e700000 	.word	0x3e700000
	...

0800dad0 <__kernel_cos>:
 800dad0:	eeb0 5b40 	vmov.f64	d5, d0
 800dad4:	ee15 1a90 	vmov	r1, s11
 800dad8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800dadc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800dae0:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800dae4:	d204      	bcs.n	800daf0 <__kernel_cos+0x20>
 800dae6:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800daea:	ee17 3a90 	vmov	r3, s15
 800daee:	b343      	cbz	r3, 800db42 <__kernel_cos+0x72>
 800daf0:	ee25 6b05 	vmul.f64	d6, d5, d5
 800daf4:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800daf8:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800db68 <__kernel_cos+0x98>
 800dafc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800db70 <__kernel_cos+0xa0>
 800db00:	eea6 4b07 	vfma.f64	d4, d6, d7
 800db04:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800db78 <__kernel_cos+0xa8>
 800db08:	eea4 7b06 	vfma.f64	d7, d4, d6
 800db0c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800db80 <__kernel_cos+0xb0>
 800db10:	eea7 4b06 	vfma.f64	d4, d7, d6
 800db14:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800db88 <__kernel_cos+0xb8>
 800db18:	4b1f      	ldr	r3, [pc, #124]	@ (800db98 <__kernel_cos+0xc8>)
 800db1a:	eea4 7b06 	vfma.f64	d7, d4, d6
 800db1e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800db90 <__kernel_cos+0xc0>
 800db22:	4299      	cmp	r1, r3
 800db24:	eea7 4b06 	vfma.f64	d4, d7, d6
 800db28:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800db2c:	ee24 4b06 	vmul.f64	d4, d4, d6
 800db30:	ee26 7b07 	vmul.f64	d7, d6, d7
 800db34:	eea6 1b04 	vfma.f64	d1, d6, d4
 800db38:	d804      	bhi.n	800db44 <__kernel_cos+0x74>
 800db3a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800db3e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800db42:	4770      	bx	lr
 800db44:	4b15      	ldr	r3, [pc, #84]	@ (800db9c <__kernel_cos+0xcc>)
 800db46:	4299      	cmp	r1, r3
 800db48:	d809      	bhi.n	800db5e <__kernel_cos+0x8e>
 800db4a:	2200      	movs	r2, #0
 800db4c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800db50:	ec43 2b16 	vmov	d6, r2, r3
 800db54:	ee30 0b46 	vsub.f64	d0, d0, d6
 800db58:	ee37 7b46 	vsub.f64	d7, d7, d6
 800db5c:	e7ed      	b.n	800db3a <__kernel_cos+0x6a>
 800db5e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800db62:	e7f7      	b.n	800db54 <__kernel_cos+0x84>
 800db64:	f3af 8000 	nop.w
 800db68:	be8838d4 	.word	0xbe8838d4
 800db6c:	bda8fae9 	.word	0xbda8fae9
 800db70:	bdb4b1c4 	.word	0xbdb4b1c4
 800db74:	3e21ee9e 	.word	0x3e21ee9e
 800db78:	809c52ad 	.word	0x809c52ad
 800db7c:	be927e4f 	.word	0xbe927e4f
 800db80:	19cb1590 	.word	0x19cb1590
 800db84:	3efa01a0 	.word	0x3efa01a0
 800db88:	16c15177 	.word	0x16c15177
 800db8c:	bf56c16c 	.word	0xbf56c16c
 800db90:	5555554c 	.word	0x5555554c
 800db94:	3fa55555 	.word	0x3fa55555
 800db98:	3fd33332 	.word	0x3fd33332
 800db9c:	3fe90000 	.word	0x3fe90000

0800dba0 <__kernel_sin>:
 800dba0:	ee10 3a90 	vmov	r3, s1
 800dba4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dba8:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800dbac:	d204      	bcs.n	800dbb8 <__kernel_sin+0x18>
 800dbae:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800dbb2:	ee17 3a90 	vmov	r3, s15
 800dbb6:	b35b      	cbz	r3, 800dc10 <__kernel_sin+0x70>
 800dbb8:	ee20 6b00 	vmul.f64	d6, d0, d0
 800dbbc:	ee20 5b06 	vmul.f64	d5, d0, d6
 800dbc0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800dc18 <__kernel_sin+0x78>
 800dbc4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800dc20 <__kernel_sin+0x80>
 800dbc8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800dbcc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800dc28 <__kernel_sin+0x88>
 800dbd0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800dbd4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800dc30 <__kernel_sin+0x90>
 800dbd8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800dbdc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800dc38 <__kernel_sin+0x98>
 800dbe0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800dbe4:	b930      	cbnz	r0, 800dbf4 <__kernel_sin+0x54>
 800dbe6:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800dc40 <__kernel_sin+0xa0>
 800dbea:	eea6 4b07 	vfma.f64	d4, d6, d7
 800dbee:	eea4 0b05 	vfma.f64	d0, d4, d5
 800dbf2:	4770      	bx	lr
 800dbf4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800dbf8:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800dbfc:	eea1 7b04 	vfma.f64	d7, d1, d4
 800dc00:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800dc04:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800dc48 <__kernel_sin+0xa8>
 800dc08:	eea5 1b07 	vfma.f64	d1, d5, d7
 800dc0c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800dc10:	4770      	bx	lr
 800dc12:	bf00      	nop
 800dc14:	f3af 8000 	nop.w
 800dc18:	5acfd57c 	.word	0x5acfd57c
 800dc1c:	3de5d93a 	.word	0x3de5d93a
 800dc20:	8a2b9ceb 	.word	0x8a2b9ceb
 800dc24:	be5ae5e6 	.word	0xbe5ae5e6
 800dc28:	57b1fe7d 	.word	0x57b1fe7d
 800dc2c:	3ec71de3 	.word	0x3ec71de3
 800dc30:	19c161d5 	.word	0x19c161d5
 800dc34:	bf2a01a0 	.word	0xbf2a01a0
 800dc38:	1110f8a6 	.word	0x1110f8a6
 800dc3c:	3f811111 	.word	0x3f811111
 800dc40:	55555549 	.word	0x55555549
 800dc44:	bfc55555 	.word	0xbfc55555
 800dc48:	55555549 	.word	0x55555549
 800dc4c:	3fc55555 	.word	0x3fc55555

0800dc50 <fabs>:
 800dc50:	ec51 0b10 	vmov	r0, r1, d0
 800dc54:	4602      	mov	r2, r0
 800dc56:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800dc5a:	ec43 2b10 	vmov	d0, r2, r3
 800dc5e:	4770      	bx	lr

0800dc60 <scalbn>:
 800dc60:	ee10 1a90 	vmov	r1, s1
 800dc64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dc68:	b98b      	cbnz	r3, 800dc8e <scalbn+0x2e>
 800dc6a:	ee10 3a10 	vmov	r3, s0
 800dc6e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800dc72:	4319      	orrs	r1, r3
 800dc74:	d00a      	beq.n	800dc8c <scalbn+0x2c>
 800dc76:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800dd28 <scalbn+0xc8>
 800dc7a:	4b37      	ldr	r3, [pc, #220]	@ (800dd58 <scalbn+0xf8>)
 800dc7c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800dc80:	4298      	cmp	r0, r3
 800dc82:	da0b      	bge.n	800dc9c <scalbn+0x3c>
 800dc84:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800dd30 <scalbn+0xd0>
 800dc88:	ee20 0b07 	vmul.f64	d0, d0, d7
 800dc8c:	4770      	bx	lr
 800dc8e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d107      	bne.n	800dca6 <scalbn+0x46>
 800dc96:	ee30 0b00 	vadd.f64	d0, d0, d0
 800dc9a:	4770      	bx	lr
 800dc9c:	ee10 1a90 	vmov	r1, s1
 800dca0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dca4:	3b36      	subs	r3, #54	@ 0x36
 800dca6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800dcaa:	4290      	cmp	r0, r2
 800dcac:	dd0d      	ble.n	800dcca <scalbn+0x6a>
 800dcae:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800dd38 <scalbn+0xd8>
 800dcb2:	ee10 3a90 	vmov	r3, s1
 800dcb6:	eeb0 6b47 	vmov.f64	d6, d7
 800dcba:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 800dd40 <scalbn+0xe0>
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	fe27 7b05 	vselge.f64	d7, d7, d5
 800dcc4:	ee27 0b06 	vmul.f64	d0, d7, d6
 800dcc8:	4770      	bx	lr
 800dcca:	4418      	add	r0, r3
 800dccc:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800dcd0:	4298      	cmp	r0, r3
 800dcd2:	dcec      	bgt.n	800dcae <scalbn+0x4e>
 800dcd4:	2800      	cmp	r0, #0
 800dcd6:	dd0a      	ble.n	800dcee <scalbn+0x8e>
 800dcd8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800dcdc:	ec53 2b10 	vmov	r2, r3, d0
 800dce0:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800dce4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800dce8:	ec43 2b10 	vmov	d0, r2, r3
 800dcec:	4770      	bx	lr
 800dcee:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800dcf2:	da09      	bge.n	800dd08 <scalbn+0xa8>
 800dcf4:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800dd30 <scalbn+0xd0>
 800dcf8:	ee10 3a90 	vmov	r3, s1
 800dcfc:	eeb0 6b47 	vmov.f64	d6, d7
 800dd00:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 800dd48 <scalbn+0xe8>
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	e7db      	b.n	800dcc0 <scalbn+0x60>
 800dd08:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800dd0c:	ec53 2b10 	vmov	r2, r3, d0
 800dd10:	3036      	adds	r0, #54	@ 0x36
 800dd12:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800dd16:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800dd1a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800dd50 <scalbn+0xf0>
 800dd1e:	ec43 2b10 	vmov	d0, r2, r3
 800dd22:	e7b1      	b.n	800dc88 <scalbn+0x28>
 800dd24:	f3af 8000 	nop.w
 800dd28:	00000000 	.word	0x00000000
 800dd2c:	43500000 	.word	0x43500000
 800dd30:	c2f8f359 	.word	0xc2f8f359
 800dd34:	01a56e1f 	.word	0x01a56e1f
 800dd38:	8800759c 	.word	0x8800759c
 800dd3c:	7e37e43c 	.word	0x7e37e43c
 800dd40:	8800759c 	.word	0x8800759c
 800dd44:	fe37e43c 	.word	0xfe37e43c
 800dd48:	c2f8f359 	.word	0xc2f8f359
 800dd4c:	81a56e1f 	.word	0x81a56e1f
 800dd50:	00000000 	.word	0x00000000
 800dd54:	3c900000 	.word	0x3c900000
 800dd58:	ffff3cb0 	.word	0xffff3cb0
 800dd5c:	00000000 	.word	0x00000000

0800dd60 <floor>:
 800dd60:	ee10 3a90 	vmov	r3, s1
 800dd64:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800dd68:	ee10 2a10 	vmov	r2, s0
 800dd6c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800dd70:	2913      	cmp	r1, #19
 800dd72:	b530      	push	{r4, r5, lr}
 800dd74:	4615      	mov	r5, r2
 800dd76:	dc33      	bgt.n	800dde0 <floor+0x80>
 800dd78:	2900      	cmp	r1, #0
 800dd7a:	da18      	bge.n	800ddae <floor+0x4e>
 800dd7c:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800de40 <floor+0xe0>
 800dd80:	ee30 0b07 	vadd.f64	d0, d0, d7
 800dd84:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800dd88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd8c:	dd0a      	ble.n	800dda4 <floor+0x44>
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	da50      	bge.n	800de34 <floor+0xd4>
 800dd92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dd96:	4313      	orrs	r3, r2
 800dd98:	2200      	movs	r2, #0
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	4b2a      	ldr	r3, [pc, #168]	@ (800de48 <floor+0xe8>)
 800dd9e:	bf08      	it	eq
 800dda0:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800dda4:	4619      	mov	r1, r3
 800dda6:	4610      	mov	r0, r2
 800dda8:	ec41 0b10 	vmov	d0, r0, r1
 800ddac:	e01f      	b.n	800ddee <floor+0x8e>
 800ddae:	4827      	ldr	r0, [pc, #156]	@ (800de4c <floor+0xec>)
 800ddb0:	4108      	asrs	r0, r1
 800ddb2:	ea03 0400 	and.w	r4, r3, r0
 800ddb6:	4314      	orrs	r4, r2
 800ddb8:	d019      	beq.n	800ddee <floor+0x8e>
 800ddba:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800de40 <floor+0xe0>
 800ddbe:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ddc2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ddc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddca:	ddeb      	ble.n	800dda4 <floor+0x44>
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	bfbe      	ittt	lt
 800ddd0:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800ddd4:	410a      	asrlt	r2, r1
 800ddd6:	189b      	addlt	r3, r3, r2
 800ddd8:	ea23 0300 	bic.w	r3, r3, r0
 800dddc:	2200      	movs	r2, #0
 800ddde:	e7e1      	b.n	800dda4 <floor+0x44>
 800dde0:	2933      	cmp	r1, #51	@ 0x33
 800dde2:	dd05      	ble.n	800ddf0 <floor+0x90>
 800dde4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800dde8:	d101      	bne.n	800ddee <floor+0x8e>
 800ddea:	ee30 0b00 	vadd.f64	d0, d0, d0
 800ddee:	bd30      	pop	{r4, r5, pc}
 800ddf0:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800ddf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ddf8:	40e0      	lsrs	r0, r4
 800ddfa:	4210      	tst	r0, r2
 800ddfc:	d0f7      	beq.n	800ddee <floor+0x8e>
 800ddfe:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800de40 <floor+0xe0>
 800de02:	ee30 0b07 	vadd.f64	d0, d0, d7
 800de06:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800de0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de0e:	ddc9      	ble.n	800dda4 <floor+0x44>
 800de10:	2b00      	cmp	r3, #0
 800de12:	da02      	bge.n	800de1a <floor+0xba>
 800de14:	2914      	cmp	r1, #20
 800de16:	d103      	bne.n	800de20 <floor+0xc0>
 800de18:	3301      	adds	r3, #1
 800de1a:	ea22 0200 	bic.w	r2, r2, r0
 800de1e:	e7c1      	b.n	800dda4 <floor+0x44>
 800de20:	2401      	movs	r4, #1
 800de22:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800de26:	fa04 f101 	lsl.w	r1, r4, r1
 800de2a:	440a      	add	r2, r1
 800de2c:	42aa      	cmp	r2, r5
 800de2e:	bf38      	it	cc
 800de30:	191b      	addcc	r3, r3, r4
 800de32:	e7f2      	b.n	800de1a <floor+0xba>
 800de34:	2200      	movs	r2, #0
 800de36:	4613      	mov	r3, r2
 800de38:	e7b4      	b.n	800dda4 <floor+0x44>
 800de3a:	bf00      	nop
 800de3c:	f3af 8000 	nop.w
 800de40:	8800759c 	.word	0x8800759c
 800de44:	7e37e43c 	.word	0x7e37e43c
 800de48:	bff00000 	.word	0xbff00000
 800de4c:	000fffff 	.word	0x000fffff

0800de50 <_init>:
 800de50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de52:	bf00      	nop
 800de54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de56:	bc08      	pop	{r3}
 800de58:	469e      	mov	lr, r3
 800de5a:	4770      	bx	lr

0800de5c <_fini>:
 800de5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de5e:	bf00      	nop
 800de60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de62:	bc08      	pop	{r3}
 800de64:	469e      	mov	lr, r3
 800de66:	4770      	bx	lr
=======
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800aab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aab4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d009      	beq.n	800aad0 <HAL_UART_IRQHandler+0x73c>
 800aabc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aac0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d003      	beq.n	800aad0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f001 fe4f 	bl	800c76c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aace:	e016      	b.n	800aafe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800aad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aad4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d010      	beq.n	800aafe <HAL_UART_IRQHandler+0x76a>
 800aadc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	da0c      	bge.n	800aafe <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f001 fe37 	bl	800c758 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aaea:	e008      	b.n	800aafe <HAL_UART_IRQHandler+0x76a>
      return;
 800aaec:	bf00      	nop
 800aaee:	e006      	b.n	800aafe <HAL_UART_IRQHandler+0x76a>
    return;
 800aaf0:	bf00      	nop
 800aaf2:	e004      	b.n	800aafe <HAL_UART_IRQHandler+0x76a>
      return;
 800aaf4:	bf00      	nop
 800aaf6:	e002      	b.n	800aafe <HAL_UART_IRQHandler+0x76a>
      return;
 800aaf8:	bf00      	nop
 800aafa:	e000      	b.n	800aafe <HAL_UART_IRQHandler+0x76a>
    return;
 800aafc:	bf00      	nop
  }
}
 800aafe:	37e8      	adds	r7, #232	@ 0xe8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	effffffe 	.word	0xeffffffe

0800ab08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ab10:	bf00      	nop
 800ab12:	370c      	adds	r7, #12
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr

0800ab1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	460b      	mov	r3, r1
 800ab26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ab28:	bf00      	nop
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab38:	b092      	sub	sp, #72	@ 0x48
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	689a      	ldr	r2, [r3, #8]
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	431a      	orrs	r2, r3
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	695b      	ldr	r3, [r3, #20]
 800ab52:	431a      	orrs	r2, r3
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	69db      	ldr	r3, [r3, #28]
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	4bbe      	ldr	r3, [pc, #760]	@ (800ae5c <UART_SetConfig+0x328>)
 800ab64:	4013      	ands	r3, r2
 800ab66:	697a      	ldr	r2, [r7, #20]
 800ab68:	6812      	ldr	r2, [r2, #0]
 800ab6a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ab6c:	430b      	orrs	r3, r1
 800ab6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	68da      	ldr	r2, [r3, #12]
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	430a      	orrs	r2, r1
 800ab84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	699b      	ldr	r3, [r3, #24]
 800ab8a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4ab3      	ldr	r2, [pc, #716]	@ (800ae60 <UART_SetConfig+0x32c>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d004      	beq.n	800aba0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	6a1b      	ldr	r3, [r3, #32]
 800ab9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	689a      	ldr	r2, [r3, #8]
 800aba6:	4baf      	ldr	r3, [pc, #700]	@ (800ae64 <UART_SetConfig+0x330>)
 800aba8:	4013      	ands	r3, r2
 800abaa:	697a      	ldr	r2, [r7, #20]
 800abac:	6812      	ldr	r2, [r2, #0]
 800abae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800abb0:	430b      	orrs	r3, r1
 800abb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abba:	f023 010f 	bic.w	r1, r3, #15
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	430a      	orrs	r2, r1
 800abc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4aa6      	ldr	r2, [pc, #664]	@ (800ae68 <UART_SetConfig+0x334>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d177      	bne.n	800acc4 <UART_SetConfig+0x190>
 800abd4:	4ba5      	ldr	r3, [pc, #660]	@ (800ae6c <UART_SetConfig+0x338>)
 800abd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800abdc:	2b28      	cmp	r3, #40	@ 0x28
 800abde:	d86d      	bhi.n	800acbc <UART_SetConfig+0x188>
 800abe0:	a201      	add	r2, pc, #4	@ (adr r2, 800abe8 <UART_SetConfig+0xb4>)
 800abe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe6:	bf00      	nop
 800abe8:	0800ac8d 	.word	0x0800ac8d
 800abec:	0800acbd 	.word	0x0800acbd
 800abf0:	0800acbd 	.word	0x0800acbd
 800abf4:	0800acbd 	.word	0x0800acbd
 800abf8:	0800acbd 	.word	0x0800acbd
 800abfc:	0800acbd 	.word	0x0800acbd
 800ac00:	0800acbd 	.word	0x0800acbd
 800ac04:	0800acbd 	.word	0x0800acbd
 800ac08:	0800ac95 	.word	0x0800ac95
 800ac0c:	0800acbd 	.word	0x0800acbd
 800ac10:	0800acbd 	.word	0x0800acbd
 800ac14:	0800acbd 	.word	0x0800acbd
 800ac18:	0800acbd 	.word	0x0800acbd
 800ac1c:	0800acbd 	.word	0x0800acbd
 800ac20:	0800acbd 	.word	0x0800acbd
 800ac24:	0800acbd 	.word	0x0800acbd
 800ac28:	0800ac9d 	.word	0x0800ac9d
 800ac2c:	0800acbd 	.word	0x0800acbd
 800ac30:	0800acbd 	.word	0x0800acbd
 800ac34:	0800acbd 	.word	0x0800acbd
 800ac38:	0800acbd 	.word	0x0800acbd
 800ac3c:	0800acbd 	.word	0x0800acbd
 800ac40:	0800acbd 	.word	0x0800acbd
 800ac44:	0800acbd 	.word	0x0800acbd
 800ac48:	0800aca5 	.word	0x0800aca5
 800ac4c:	0800acbd 	.word	0x0800acbd
 800ac50:	0800acbd 	.word	0x0800acbd
 800ac54:	0800acbd 	.word	0x0800acbd
 800ac58:	0800acbd 	.word	0x0800acbd
 800ac5c:	0800acbd 	.word	0x0800acbd
 800ac60:	0800acbd 	.word	0x0800acbd
 800ac64:	0800acbd 	.word	0x0800acbd
 800ac68:	0800acad 	.word	0x0800acad
 800ac6c:	0800acbd 	.word	0x0800acbd
 800ac70:	0800acbd 	.word	0x0800acbd
 800ac74:	0800acbd 	.word	0x0800acbd
 800ac78:	0800acbd 	.word	0x0800acbd
 800ac7c:	0800acbd 	.word	0x0800acbd
 800ac80:	0800acbd 	.word	0x0800acbd
 800ac84:	0800acbd 	.word	0x0800acbd
 800ac88:	0800acb5 	.word	0x0800acb5
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac92:	e222      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ac94:	2304      	movs	r3, #4
 800ac96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac9a:	e21e      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ac9c:	2308      	movs	r3, #8
 800ac9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aca2:	e21a      	b.n	800b0da <UART_SetConfig+0x5a6>
 800aca4:	2310      	movs	r3, #16
 800aca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acaa:	e216      	b.n	800b0da <UART_SetConfig+0x5a6>
 800acac:	2320      	movs	r3, #32
 800acae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acb2:	e212      	b.n	800b0da <UART_SetConfig+0x5a6>
 800acb4:	2340      	movs	r3, #64	@ 0x40
 800acb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acba:	e20e      	b.n	800b0da <UART_SetConfig+0x5a6>
 800acbc:	2380      	movs	r3, #128	@ 0x80
 800acbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acc2:	e20a      	b.n	800b0da <UART_SetConfig+0x5a6>
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a69      	ldr	r2, [pc, #420]	@ (800ae70 <UART_SetConfig+0x33c>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d130      	bne.n	800ad30 <UART_SetConfig+0x1fc>
 800acce:	4b67      	ldr	r3, [pc, #412]	@ (800ae6c <UART_SetConfig+0x338>)
 800acd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acd2:	f003 0307 	and.w	r3, r3, #7
 800acd6:	2b05      	cmp	r3, #5
 800acd8:	d826      	bhi.n	800ad28 <UART_SetConfig+0x1f4>
 800acda:	a201      	add	r2, pc, #4	@ (adr r2, 800ace0 <UART_SetConfig+0x1ac>)
 800acdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace0:	0800acf9 	.word	0x0800acf9
 800ace4:	0800ad01 	.word	0x0800ad01
 800ace8:	0800ad09 	.word	0x0800ad09
 800acec:	0800ad11 	.word	0x0800ad11
 800acf0:	0800ad19 	.word	0x0800ad19
 800acf4:	0800ad21 	.word	0x0800ad21
 800acf8:	2300      	movs	r3, #0
 800acfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acfe:	e1ec      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ad00:	2304      	movs	r3, #4
 800ad02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad06:	e1e8      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ad08:	2308      	movs	r3, #8
 800ad0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad0e:	e1e4      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ad10:	2310      	movs	r3, #16
 800ad12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad16:	e1e0      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ad18:	2320      	movs	r3, #32
 800ad1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad1e:	e1dc      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ad20:	2340      	movs	r3, #64	@ 0x40
 800ad22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad26:	e1d8      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ad28:	2380      	movs	r3, #128	@ 0x80
 800ad2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad2e:	e1d4      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a4f      	ldr	r2, [pc, #316]	@ (800ae74 <UART_SetConfig+0x340>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d130      	bne.n	800ad9c <UART_SetConfig+0x268>
 800ad3a:	4b4c      	ldr	r3, [pc, #304]	@ (800ae6c <UART_SetConfig+0x338>)
 800ad3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad3e:	f003 0307 	and.w	r3, r3, #7
 800ad42:	2b05      	cmp	r3, #5
 800ad44:	d826      	bhi.n	800ad94 <UART_SetConfig+0x260>
 800ad46:	a201      	add	r2, pc, #4	@ (adr r2, 800ad4c <UART_SetConfig+0x218>)
 800ad48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad4c:	0800ad65 	.word	0x0800ad65
 800ad50:	0800ad6d 	.word	0x0800ad6d
 800ad54:	0800ad75 	.word	0x0800ad75
 800ad58:	0800ad7d 	.word	0x0800ad7d
 800ad5c:	0800ad85 	.word	0x0800ad85
 800ad60:	0800ad8d 	.word	0x0800ad8d
 800ad64:	2300      	movs	r3, #0
 800ad66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad6a:	e1b6      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ad6c:	2304      	movs	r3, #4
 800ad6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad72:	e1b2      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ad74:	2308      	movs	r3, #8
 800ad76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad7a:	e1ae      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ad7c:	2310      	movs	r3, #16
 800ad7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad82:	e1aa      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ad84:	2320      	movs	r3, #32
 800ad86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad8a:	e1a6      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ad8c:	2340      	movs	r3, #64	@ 0x40
 800ad8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad92:	e1a2      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ad94:	2380      	movs	r3, #128	@ 0x80
 800ad96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad9a:	e19e      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a35      	ldr	r2, [pc, #212]	@ (800ae78 <UART_SetConfig+0x344>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d130      	bne.n	800ae08 <UART_SetConfig+0x2d4>
 800ada6:	4b31      	ldr	r3, [pc, #196]	@ (800ae6c <UART_SetConfig+0x338>)
 800ada8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adaa:	f003 0307 	and.w	r3, r3, #7
 800adae:	2b05      	cmp	r3, #5
 800adb0:	d826      	bhi.n	800ae00 <UART_SetConfig+0x2cc>
 800adb2:	a201      	add	r2, pc, #4	@ (adr r2, 800adb8 <UART_SetConfig+0x284>)
 800adb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb8:	0800add1 	.word	0x0800add1
 800adbc:	0800add9 	.word	0x0800add9
 800adc0:	0800ade1 	.word	0x0800ade1
 800adc4:	0800ade9 	.word	0x0800ade9
 800adc8:	0800adf1 	.word	0x0800adf1
 800adcc:	0800adf9 	.word	0x0800adf9
 800add0:	2300      	movs	r3, #0
 800add2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800add6:	e180      	b.n	800b0da <UART_SetConfig+0x5a6>
 800add8:	2304      	movs	r3, #4
 800adda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adde:	e17c      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ade0:	2308      	movs	r3, #8
 800ade2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ade6:	e178      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ade8:	2310      	movs	r3, #16
 800adea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adee:	e174      	b.n	800b0da <UART_SetConfig+0x5a6>
 800adf0:	2320      	movs	r3, #32
 800adf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adf6:	e170      	b.n	800b0da <UART_SetConfig+0x5a6>
 800adf8:	2340      	movs	r3, #64	@ 0x40
 800adfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adfe:	e16c      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ae00:	2380      	movs	r3, #128	@ 0x80
 800ae02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae06:	e168      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a1b      	ldr	r2, [pc, #108]	@ (800ae7c <UART_SetConfig+0x348>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d142      	bne.n	800ae98 <UART_SetConfig+0x364>
 800ae12:	4b16      	ldr	r3, [pc, #88]	@ (800ae6c <UART_SetConfig+0x338>)
 800ae14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae16:	f003 0307 	and.w	r3, r3, #7
 800ae1a:	2b05      	cmp	r3, #5
 800ae1c:	d838      	bhi.n	800ae90 <UART_SetConfig+0x35c>
 800ae1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ae24 <UART_SetConfig+0x2f0>)
 800ae20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae24:	0800ae3d 	.word	0x0800ae3d
 800ae28:	0800ae45 	.word	0x0800ae45
 800ae2c:	0800ae4d 	.word	0x0800ae4d
 800ae30:	0800ae55 	.word	0x0800ae55
 800ae34:	0800ae81 	.word	0x0800ae81
 800ae38:	0800ae89 	.word	0x0800ae89
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae42:	e14a      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ae44:	2304      	movs	r3, #4
 800ae46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae4a:	e146      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ae4c:	2308      	movs	r3, #8
 800ae4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae52:	e142      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ae54:	2310      	movs	r3, #16
 800ae56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae5a:	e13e      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ae5c:	cfff69f3 	.word	0xcfff69f3
 800ae60:	58000c00 	.word	0x58000c00
 800ae64:	11fff4ff 	.word	0x11fff4ff
 800ae68:	40011000 	.word	0x40011000
 800ae6c:	58024400 	.word	0x58024400
 800ae70:	40004400 	.word	0x40004400
 800ae74:	40004800 	.word	0x40004800
 800ae78:	40004c00 	.word	0x40004c00
 800ae7c:	40005000 	.word	0x40005000
 800ae80:	2320      	movs	r3, #32
 800ae82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae86:	e128      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ae88:	2340      	movs	r3, #64	@ 0x40
 800ae8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae8e:	e124      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ae90:	2380      	movs	r3, #128	@ 0x80
 800ae92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae96:	e120      	b.n	800b0da <UART_SetConfig+0x5a6>
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4acb      	ldr	r2, [pc, #812]	@ (800b1cc <UART_SetConfig+0x698>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d176      	bne.n	800af90 <UART_SetConfig+0x45c>
 800aea2:	4bcb      	ldr	r3, [pc, #812]	@ (800b1d0 <UART_SetConfig+0x69c>)
 800aea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aea6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aeaa:	2b28      	cmp	r3, #40	@ 0x28
 800aeac:	d86c      	bhi.n	800af88 <UART_SetConfig+0x454>
 800aeae:	a201      	add	r2, pc, #4	@ (adr r2, 800aeb4 <UART_SetConfig+0x380>)
 800aeb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb4:	0800af59 	.word	0x0800af59
 800aeb8:	0800af89 	.word	0x0800af89
 800aebc:	0800af89 	.word	0x0800af89
 800aec0:	0800af89 	.word	0x0800af89
 800aec4:	0800af89 	.word	0x0800af89
 800aec8:	0800af89 	.word	0x0800af89
 800aecc:	0800af89 	.word	0x0800af89
 800aed0:	0800af89 	.word	0x0800af89
 800aed4:	0800af61 	.word	0x0800af61
 800aed8:	0800af89 	.word	0x0800af89
 800aedc:	0800af89 	.word	0x0800af89
 800aee0:	0800af89 	.word	0x0800af89
 800aee4:	0800af89 	.word	0x0800af89
 800aee8:	0800af89 	.word	0x0800af89
 800aeec:	0800af89 	.word	0x0800af89
 800aef0:	0800af89 	.word	0x0800af89
 800aef4:	0800af69 	.word	0x0800af69
 800aef8:	0800af89 	.word	0x0800af89
 800aefc:	0800af89 	.word	0x0800af89
 800af00:	0800af89 	.word	0x0800af89
 800af04:	0800af89 	.word	0x0800af89
 800af08:	0800af89 	.word	0x0800af89
 800af0c:	0800af89 	.word	0x0800af89
 800af10:	0800af89 	.word	0x0800af89
 800af14:	0800af71 	.word	0x0800af71
 800af18:	0800af89 	.word	0x0800af89
 800af1c:	0800af89 	.word	0x0800af89
 800af20:	0800af89 	.word	0x0800af89
 800af24:	0800af89 	.word	0x0800af89
 800af28:	0800af89 	.word	0x0800af89
 800af2c:	0800af89 	.word	0x0800af89
 800af30:	0800af89 	.word	0x0800af89
 800af34:	0800af79 	.word	0x0800af79
 800af38:	0800af89 	.word	0x0800af89
 800af3c:	0800af89 	.word	0x0800af89
 800af40:	0800af89 	.word	0x0800af89
 800af44:	0800af89 	.word	0x0800af89
 800af48:	0800af89 	.word	0x0800af89
 800af4c:	0800af89 	.word	0x0800af89
 800af50:	0800af89 	.word	0x0800af89
 800af54:	0800af81 	.word	0x0800af81
 800af58:	2301      	movs	r3, #1
 800af5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af5e:	e0bc      	b.n	800b0da <UART_SetConfig+0x5a6>
 800af60:	2304      	movs	r3, #4
 800af62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af66:	e0b8      	b.n	800b0da <UART_SetConfig+0x5a6>
 800af68:	2308      	movs	r3, #8
 800af6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af6e:	e0b4      	b.n	800b0da <UART_SetConfig+0x5a6>
 800af70:	2310      	movs	r3, #16
 800af72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af76:	e0b0      	b.n	800b0da <UART_SetConfig+0x5a6>
 800af78:	2320      	movs	r3, #32
 800af7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af7e:	e0ac      	b.n	800b0da <UART_SetConfig+0x5a6>
 800af80:	2340      	movs	r3, #64	@ 0x40
 800af82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af86:	e0a8      	b.n	800b0da <UART_SetConfig+0x5a6>
 800af88:	2380      	movs	r3, #128	@ 0x80
 800af8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af8e:	e0a4      	b.n	800b0da <UART_SetConfig+0x5a6>
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4a8f      	ldr	r2, [pc, #572]	@ (800b1d4 <UART_SetConfig+0x6a0>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d130      	bne.n	800affc <UART_SetConfig+0x4c8>
 800af9a:	4b8d      	ldr	r3, [pc, #564]	@ (800b1d0 <UART_SetConfig+0x69c>)
 800af9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af9e:	f003 0307 	and.w	r3, r3, #7
 800afa2:	2b05      	cmp	r3, #5
 800afa4:	d826      	bhi.n	800aff4 <UART_SetConfig+0x4c0>
 800afa6:	a201      	add	r2, pc, #4	@ (adr r2, 800afac <UART_SetConfig+0x478>)
 800afa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afac:	0800afc5 	.word	0x0800afc5
 800afb0:	0800afcd 	.word	0x0800afcd
 800afb4:	0800afd5 	.word	0x0800afd5
 800afb8:	0800afdd 	.word	0x0800afdd
 800afbc:	0800afe5 	.word	0x0800afe5
 800afc0:	0800afed 	.word	0x0800afed
 800afc4:	2300      	movs	r3, #0
 800afc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afca:	e086      	b.n	800b0da <UART_SetConfig+0x5a6>
 800afcc:	2304      	movs	r3, #4
 800afce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afd2:	e082      	b.n	800b0da <UART_SetConfig+0x5a6>
 800afd4:	2308      	movs	r3, #8
 800afd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afda:	e07e      	b.n	800b0da <UART_SetConfig+0x5a6>
 800afdc:	2310      	movs	r3, #16
 800afde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afe2:	e07a      	b.n	800b0da <UART_SetConfig+0x5a6>
 800afe4:	2320      	movs	r3, #32
 800afe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afea:	e076      	b.n	800b0da <UART_SetConfig+0x5a6>
 800afec:	2340      	movs	r3, #64	@ 0x40
 800afee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aff2:	e072      	b.n	800b0da <UART_SetConfig+0x5a6>
 800aff4:	2380      	movs	r3, #128	@ 0x80
 800aff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800affa:	e06e      	b.n	800b0da <UART_SetConfig+0x5a6>
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a75      	ldr	r2, [pc, #468]	@ (800b1d8 <UART_SetConfig+0x6a4>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d130      	bne.n	800b068 <UART_SetConfig+0x534>
 800b006:	4b72      	ldr	r3, [pc, #456]	@ (800b1d0 <UART_SetConfig+0x69c>)
 800b008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b00a:	f003 0307 	and.w	r3, r3, #7
 800b00e:	2b05      	cmp	r3, #5
 800b010:	d826      	bhi.n	800b060 <UART_SetConfig+0x52c>
 800b012:	a201      	add	r2, pc, #4	@ (adr r2, 800b018 <UART_SetConfig+0x4e4>)
 800b014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b018:	0800b031 	.word	0x0800b031
 800b01c:	0800b039 	.word	0x0800b039
 800b020:	0800b041 	.word	0x0800b041
 800b024:	0800b049 	.word	0x0800b049
 800b028:	0800b051 	.word	0x0800b051
 800b02c:	0800b059 	.word	0x0800b059
 800b030:	2300      	movs	r3, #0
 800b032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b036:	e050      	b.n	800b0da <UART_SetConfig+0x5a6>
 800b038:	2304      	movs	r3, #4
 800b03a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b03e:	e04c      	b.n	800b0da <UART_SetConfig+0x5a6>
 800b040:	2308      	movs	r3, #8
 800b042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b046:	e048      	b.n	800b0da <UART_SetConfig+0x5a6>
 800b048:	2310      	movs	r3, #16
 800b04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b04e:	e044      	b.n	800b0da <UART_SetConfig+0x5a6>
 800b050:	2320      	movs	r3, #32
 800b052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b056:	e040      	b.n	800b0da <UART_SetConfig+0x5a6>
 800b058:	2340      	movs	r3, #64	@ 0x40
 800b05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b05e:	e03c      	b.n	800b0da <UART_SetConfig+0x5a6>
 800b060:	2380      	movs	r3, #128	@ 0x80
 800b062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b066:	e038      	b.n	800b0da <UART_SetConfig+0x5a6>
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a5b      	ldr	r2, [pc, #364]	@ (800b1dc <UART_SetConfig+0x6a8>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d130      	bne.n	800b0d4 <UART_SetConfig+0x5a0>
 800b072:	4b57      	ldr	r3, [pc, #348]	@ (800b1d0 <UART_SetConfig+0x69c>)
 800b074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b076:	f003 0307 	and.w	r3, r3, #7
 800b07a:	2b05      	cmp	r3, #5
 800b07c:	d826      	bhi.n	800b0cc <UART_SetConfig+0x598>
 800b07e:	a201      	add	r2, pc, #4	@ (adr r2, 800b084 <UART_SetConfig+0x550>)
 800b080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b084:	0800b09d 	.word	0x0800b09d
 800b088:	0800b0a5 	.word	0x0800b0a5
 800b08c:	0800b0ad 	.word	0x0800b0ad
 800b090:	0800b0b5 	.word	0x0800b0b5
 800b094:	0800b0bd 	.word	0x0800b0bd
 800b098:	0800b0c5 	.word	0x0800b0c5
 800b09c:	2302      	movs	r3, #2
 800b09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0a2:	e01a      	b.n	800b0da <UART_SetConfig+0x5a6>
 800b0a4:	2304      	movs	r3, #4
 800b0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0aa:	e016      	b.n	800b0da <UART_SetConfig+0x5a6>
 800b0ac:	2308      	movs	r3, #8
 800b0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0b2:	e012      	b.n	800b0da <UART_SetConfig+0x5a6>
 800b0b4:	2310      	movs	r3, #16
 800b0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ba:	e00e      	b.n	800b0da <UART_SetConfig+0x5a6>
 800b0bc:	2320      	movs	r3, #32
 800b0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0c2:	e00a      	b.n	800b0da <UART_SetConfig+0x5a6>
 800b0c4:	2340      	movs	r3, #64	@ 0x40
 800b0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ca:	e006      	b.n	800b0da <UART_SetConfig+0x5a6>
 800b0cc:	2380      	movs	r3, #128	@ 0x80
 800b0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0d2:	e002      	b.n	800b0da <UART_SetConfig+0x5a6>
 800b0d4:	2380      	movs	r3, #128	@ 0x80
 800b0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4a3f      	ldr	r2, [pc, #252]	@ (800b1dc <UART_SetConfig+0x6a8>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	f040 80f8 	bne.w	800b2d6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b0e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b0ea:	2b20      	cmp	r3, #32
 800b0ec:	dc46      	bgt.n	800b17c <UART_SetConfig+0x648>
 800b0ee:	2b02      	cmp	r3, #2
 800b0f0:	f2c0 8082 	blt.w	800b1f8 <UART_SetConfig+0x6c4>
 800b0f4:	3b02      	subs	r3, #2
 800b0f6:	2b1e      	cmp	r3, #30
 800b0f8:	d87e      	bhi.n	800b1f8 <UART_SetConfig+0x6c4>
 800b0fa:	a201      	add	r2, pc, #4	@ (adr r2, 800b100 <UART_SetConfig+0x5cc>)
 800b0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b100:	0800b183 	.word	0x0800b183
 800b104:	0800b1f9 	.word	0x0800b1f9
 800b108:	0800b18b 	.word	0x0800b18b
 800b10c:	0800b1f9 	.word	0x0800b1f9
 800b110:	0800b1f9 	.word	0x0800b1f9
 800b114:	0800b1f9 	.word	0x0800b1f9
 800b118:	0800b19b 	.word	0x0800b19b
 800b11c:	0800b1f9 	.word	0x0800b1f9
 800b120:	0800b1f9 	.word	0x0800b1f9
 800b124:	0800b1f9 	.word	0x0800b1f9
 800b128:	0800b1f9 	.word	0x0800b1f9
 800b12c:	0800b1f9 	.word	0x0800b1f9
 800b130:	0800b1f9 	.word	0x0800b1f9
 800b134:	0800b1f9 	.word	0x0800b1f9
 800b138:	0800b1ab 	.word	0x0800b1ab
 800b13c:	0800b1f9 	.word	0x0800b1f9
 800b140:	0800b1f9 	.word	0x0800b1f9
 800b144:	0800b1f9 	.word	0x0800b1f9
 800b148:	0800b1f9 	.word	0x0800b1f9
 800b14c:	0800b1f9 	.word	0x0800b1f9
 800b150:	0800b1f9 	.word	0x0800b1f9
 800b154:	0800b1f9 	.word	0x0800b1f9
 800b158:	0800b1f9 	.word	0x0800b1f9
 800b15c:	0800b1f9 	.word	0x0800b1f9
 800b160:	0800b1f9 	.word	0x0800b1f9
 800b164:	0800b1f9 	.word	0x0800b1f9
 800b168:	0800b1f9 	.word	0x0800b1f9
 800b16c:	0800b1f9 	.word	0x0800b1f9
 800b170:	0800b1f9 	.word	0x0800b1f9
 800b174:	0800b1f9 	.word	0x0800b1f9
 800b178:	0800b1eb 	.word	0x0800b1eb
 800b17c:	2b40      	cmp	r3, #64	@ 0x40
 800b17e:	d037      	beq.n	800b1f0 <UART_SetConfig+0x6bc>
 800b180:	e03a      	b.n	800b1f8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b182:	f7fd f8d5 	bl	8008330 <HAL_RCCEx_GetD3PCLK1Freq>
 800b186:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b188:	e03c      	b.n	800b204 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b18a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b18e:	4618      	mov	r0, r3
 800b190:	f7fd f8e4 	bl	800835c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b198:	e034      	b.n	800b204 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b19a:	f107 0318 	add.w	r3, r7, #24
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7fd fa30 	bl	8008604 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1a8:	e02c      	b.n	800b204 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1aa:	4b09      	ldr	r3, [pc, #36]	@ (800b1d0 <UART_SetConfig+0x69c>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f003 0320 	and.w	r3, r3, #32
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d016      	beq.n	800b1e4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b1b6:	4b06      	ldr	r3, [pc, #24]	@ (800b1d0 <UART_SetConfig+0x69c>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	08db      	lsrs	r3, r3, #3
 800b1bc:	f003 0303 	and.w	r3, r3, #3
 800b1c0:	4a07      	ldr	r2, [pc, #28]	@ (800b1e0 <UART_SetConfig+0x6ac>)
 800b1c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b1c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b1c8:	e01c      	b.n	800b204 <UART_SetConfig+0x6d0>
 800b1ca:	bf00      	nop
 800b1cc:	40011400 	.word	0x40011400
 800b1d0:	58024400 	.word	0x58024400
 800b1d4:	40007800 	.word	0x40007800
 800b1d8:	40007c00 	.word	0x40007c00
 800b1dc:	58000c00 	.word	0x58000c00
 800b1e0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b1e4:	4b9d      	ldr	r3, [pc, #628]	@ (800b45c <UART_SetConfig+0x928>)
 800b1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1e8:	e00c      	b.n	800b204 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b1ea:	4b9d      	ldr	r3, [pc, #628]	@ (800b460 <UART_SetConfig+0x92c>)
 800b1ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1ee:	e009      	b.n	800b204 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b1f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b1f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1f6:	e005      	b.n	800b204 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b202:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b206:	2b00      	cmp	r3, #0
 800b208:	f000 81de 	beq.w	800b5c8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b210:	4a94      	ldr	r2, [pc, #592]	@ (800b464 <UART_SetConfig+0x930>)
 800b212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b216:	461a      	mov	r2, r3
 800b218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b21a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b21e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	685a      	ldr	r2, [r3, #4]
 800b224:	4613      	mov	r3, r2
 800b226:	005b      	lsls	r3, r3, #1
 800b228:	4413      	add	r3, r2
 800b22a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d305      	bcc.n	800b23c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b238:	429a      	cmp	r2, r3
 800b23a:	d903      	bls.n	800b244 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b242:	e1c1      	b.n	800b5c8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b246:	2200      	movs	r2, #0
 800b248:	60bb      	str	r3, [r7, #8]
 800b24a:	60fa      	str	r2, [r7, #12]
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b250:	4a84      	ldr	r2, [pc, #528]	@ (800b464 <UART_SetConfig+0x930>)
 800b252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b256:	b29b      	uxth	r3, r3
 800b258:	2200      	movs	r2, #0
 800b25a:	603b      	str	r3, [r7, #0]
 800b25c:	607a      	str	r2, [r7, #4]
 800b25e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b262:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b266:	f7f5 f893 	bl	8000390 <__aeabi_uldivmod>
 800b26a:	4602      	mov	r2, r0
 800b26c:	460b      	mov	r3, r1
 800b26e:	4610      	mov	r0, r2
 800b270:	4619      	mov	r1, r3
 800b272:	f04f 0200 	mov.w	r2, #0
 800b276:	f04f 0300 	mov.w	r3, #0
 800b27a:	020b      	lsls	r3, r1, #8
 800b27c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b280:	0202      	lsls	r2, r0, #8
 800b282:	6979      	ldr	r1, [r7, #20]
 800b284:	6849      	ldr	r1, [r1, #4]
 800b286:	0849      	lsrs	r1, r1, #1
 800b288:	2000      	movs	r0, #0
 800b28a:	460c      	mov	r4, r1
 800b28c:	4605      	mov	r5, r0
 800b28e:	eb12 0804 	adds.w	r8, r2, r4
 800b292:	eb43 0905 	adc.w	r9, r3, r5
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	469a      	mov	sl, r3
 800b29e:	4693      	mov	fp, r2
 800b2a0:	4652      	mov	r2, sl
 800b2a2:	465b      	mov	r3, fp
 800b2a4:	4640      	mov	r0, r8
 800b2a6:	4649      	mov	r1, r9
 800b2a8:	f7f5 f872 	bl	8000390 <__aeabi_uldivmod>
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2ba:	d308      	bcc.n	800b2ce <UART_SetConfig+0x79a>
 800b2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2c2:	d204      	bcs.n	800b2ce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b2ca:	60da      	str	r2, [r3, #12]
 800b2cc:	e17c      	b.n	800b5c8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b2d4:	e178      	b.n	800b5c8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	69db      	ldr	r3, [r3, #28]
 800b2da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2de:	f040 80c5 	bne.w	800b46c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b2e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b2e6:	2b20      	cmp	r3, #32
 800b2e8:	dc48      	bgt.n	800b37c <UART_SetConfig+0x848>
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	db7b      	blt.n	800b3e6 <UART_SetConfig+0x8b2>
 800b2ee:	2b20      	cmp	r3, #32
 800b2f0:	d879      	bhi.n	800b3e6 <UART_SetConfig+0x8b2>
 800b2f2:	a201      	add	r2, pc, #4	@ (adr r2, 800b2f8 <UART_SetConfig+0x7c4>)
 800b2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f8:	0800b383 	.word	0x0800b383
 800b2fc:	0800b38b 	.word	0x0800b38b
 800b300:	0800b3e7 	.word	0x0800b3e7
 800b304:	0800b3e7 	.word	0x0800b3e7
 800b308:	0800b393 	.word	0x0800b393
 800b30c:	0800b3e7 	.word	0x0800b3e7
 800b310:	0800b3e7 	.word	0x0800b3e7
 800b314:	0800b3e7 	.word	0x0800b3e7
 800b318:	0800b3a3 	.word	0x0800b3a3
 800b31c:	0800b3e7 	.word	0x0800b3e7
 800b320:	0800b3e7 	.word	0x0800b3e7
 800b324:	0800b3e7 	.word	0x0800b3e7
 800b328:	0800b3e7 	.word	0x0800b3e7
 800b32c:	0800b3e7 	.word	0x0800b3e7
 800b330:	0800b3e7 	.word	0x0800b3e7
 800b334:	0800b3e7 	.word	0x0800b3e7
 800b338:	0800b3b3 	.word	0x0800b3b3
 800b33c:	0800b3e7 	.word	0x0800b3e7
 800b340:	0800b3e7 	.word	0x0800b3e7
 800b344:	0800b3e7 	.word	0x0800b3e7
 800b348:	0800b3e7 	.word	0x0800b3e7
 800b34c:	0800b3e7 	.word	0x0800b3e7
 800b350:	0800b3e7 	.word	0x0800b3e7
 800b354:	0800b3e7 	.word	0x0800b3e7
 800b358:	0800b3e7 	.word	0x0800b3e7
 800b35c:	0800b3e7 	.word	0x0800b3e7
 800b360:	0800b3e7 	.word	0x0800b3e7
 800b364:	0800b3e7 	.word	0x0800b3e7
 800b368:	0800b3e7 	.word	0x0800b3e7
 800b36c:	0800b3e7 	.word	0x0800b3e7
 800b370:	0800b3e7 	.word	0x0800b3e7
 800b374:	0800b3e7 	.word	0x0800b3e7
 800b378:	0800b3d9 	.word	0x0800b3d9
 800b37c:	2b40      	cmp	r3, #64	@ 0x40
 800b37e:	d02e      	beq.n	800b3de <UART_SetConfig+0x8aa>
 800b380:	e031      	b.n	800b3e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b382:	f7fb fd9f 	bl	8006ec4 <HAL_RCC_GetPCLK1Freq>
 800b386:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b388:	e033      	b.n	800b3f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b38a:	f7fb fdb1 	bl	8006ef0 <HAL_RCC_GetPCLK2Freq>
 800b38e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b390:	e02f      	b.n	800b3f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b396:	4618      	mov	r0, r3
 800b398:	f7fc ffe0 	bl	800835c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b39e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3a0:	e027      	b.n	800b3f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3a2:	f107 0318 	add.w	r3, r7, #24
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7fd f92c 	bl	8008604 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3b0:	e01f      	b.n	800b3f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3b2:	4b2d      	ldr	r3, [pc, #180]	@ (800b468 <UART_SetConfig+0x934>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f003 0320 	and.w	r3, r3, #32
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d009      	beq.n	800b3d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b3be:	4b2a      	ldr	r3, [pc, #168]	@ (800b468 <UART_SetConfig+0x934>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	08db      	lsrs	r3, r3, #3
 800b3c4:	f003 0303 	and.w	r3, r3, #3
 800b3c8:	4a24      	ldr	r2, [pc, #144]	@ (800b45c <UART_SetConfig+0x928>)
 800b3ca:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b3d0:	e00f      	b.n	800b3f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b3d2:	4b22      	ldr	r3, [pc, #136]	@ (800b45c <UART_SetConfig+0x928>)
 800b3d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3d6:	e00c      	b.n	800b3f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b3d8:	4b21      	ldr	r3, [pc, #132]	@ (800b460 <UART_SetConfig+0x92c>)
 800b3da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3dc:	e009      	b.n	800b3f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3e4:	e005      	b.n	800b3f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b3f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b3f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	f000 80e7 	beq.w	800b5c8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3fe:	4a19      	ldr	r2, [pc, #100]	@ (800b464 <UART_SetConfig+0x930>)
 800b400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b404:	461a      	mov	r2, r3
 800b406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b408:	fbb3 f3f2 	udiv	r3, r3, r2
 800b40c:	005a      	lsls	r2, r3, #1
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	085b      	lsrs	r3, r3, #1
 800b414:	441a      	add	r2, r3
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b41e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b422:	2b0f      	cmp	r3, #15
 800b424:	d916      	bls.n	800b454 <UART_SetConfig+0x920>
 800b426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b42c:	d212      	bcs.n	800b454 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b430:	b29b      	uxth	r3, r3
 800b432:	f023 030f 	bic.w	r3, r3, #15
 800b436:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b43a:	085b      	lsrs	r3, r3, #1
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	f003 0307 	and.w	r3, r3, #7
 800b442:	b29a      	uxth	r2, r3
 800b444:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b446:	4313      	orrs	r3, r2
 800b448:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b450:	60da      	str	r2, [r3, #12]
 800b452:	e0b9      	b.n	800b5c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b454:	2301      	movs	r3, #1
 800b456:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b45a:	e0b5      	b.n	800b5c8 <UART_SetConfig+0xa94>
 800b45c:	03d09000 	.word	0x03d09000
 800b460:	003d0900 	.word	0x003d0900
 800b464:	0800fd30 	.word	0x0800fd30
 800b468:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b46c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b470:	2b20      	cmp	r3, #32
 800b472:	dc49      	bgt.n	800b508 <UART_SetConfig+0x9d4>
 800b474:	2b00      	cmp	r3, #0
 800b476:	db7c      	blt.n	800b572 <UART_SetConfig+0xa3e>
 800b478:	2b20      	cmp	r3, #32
 800b47a:	d87a      	bhi.n	800b572 <UART_SetConfig+0xa3e>
 800b47c:	a201      	add	r2, pc, #4	@ (adr r2, 800b484 <UART_SetConfig+0x950>)
 800b47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b482:	bf00      	nop
 800b484:	0800b50f 	.word	0x0800b50f
 800b488:	0800b517 	.word	0x0800b517
 800b48c:	0800b573 	.word	0x0800b573
 800b490:	0800b573 	.word	0x0800b573
 800b494:	0800b51f 	.word	0x0800b51f
 800b498:	0800b573 	.word	0x0800b573
 800b49c:	0800b573 	.word	0x0800b573
 800b4a0:	0800b573 	.word	0x0800b573
 800b4a4:	0800b52f 	.word	0x0800b52f
 800b4a8:	0800b573 	.word	0x0800b573
 800b4ac:	0800b573 	.word	0x0800b573
 800b4b0:	0800b573 	.word	0x0800b573
 800b4b4:	0800b573 	.word	0x0800b573
 800b4b8:	0800b573 	.word	0x0800b573
 800b4bc:	0800b573 	.word	0x0800b573
 800b4c0:	0800b573 	.word	0x0800b573
 800b4c4:	0800b53f 	.word	0x0800b53f
 800b4c8:	0800b573 	.word	0x0800b573
 800b4cc:	0800b573 	.word	0x0800b573
 800b4d0:	0800b573 	.word	0x0800b573
 800b4d4:	0800b573 	.word	0x0800b573
 800b4d8:	0800b573 	.word	0x0800b573
 800b4dc:	0800b573 	.word	0x0800b573
 800b4e0:	0800b573 	.word	0x0800b573
 800b4e4:	0800b573 	.word	0x0800b573
 800b4e8:	0800b573 	.word	0x0800b573
 800b4ec:	0800b573 	.word	0x0800b573
 800b4f0:	0800b573 	.word	0x0800b573
 800b4f4:	0800b573 	.word	0x0800b573
 800b4f8:	0800b573 	.word	0x0800b573
 800b4fc:	0800b573 	.word	0x0800b573
 800b500:	0800b573 	.word	0x0800b573
 800b504:	0800b565 	.word	0x0800b565
 800b508:	2b40      	cmp	r3, #64	@ 0x40
 800b50a:	d02e      	beq.n	800b56a <UART_SetConfig+0xa36>
 800b50c:	e031      	b.n	800b572 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b50e:	f7fb fcd9 	bl	8006ec4 <HAL_RCC_GetPCLK1Freq>
 800b512:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b514:	e033      	b.n	800b57e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b516:	f7fb fceb 	bl	8006ef0 <HAL_RCC_GetPCLK2Freq>
 800b51a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b51c:	e02f      	b.n	800b57e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b51e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b522:	4618      	mov	r0, r3
 800b524:	f7fc ff1a 	bl	800835c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b52c:	e027      	b.n	800b57e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b52e:	f107 0318 	add.w	r3, r7, #24
 800b532:	4618      	mov	r0, r3
 800b534:	f7fd f866 	bl	8008604 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b538:	69fb      	ldr	r3, [r7, #28]
 800b53a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b53c:	e01f      	b.n	800b57e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b53e:	4b2d      	ldr	r3, [pc, #180]	@ (800b5f4 <UART_SetConfig+0xac0>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f003 0320 	and.w	r3, r3, #32
 800b546:	2b00      	cmp	r3, #0
 800b548:	d009      	beq.n	800b55e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b54a:	4b2a      	ldr	r3, [pc, #168]	@ (800b5f4 <UART_SetConfig+0xac0>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	08db      	lsrs	r3, r3, #3
 800b550:	f003 0303 	and.w	r3, r3, #3
 800b554:	4a28      	ldr	r2, [pc, #160]	@ (800b5f8 <UART_SetConfig+0xac4>)
 800b556:	fa22 f303 	lsr.w	r3, r2, r3
 800b55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b55c:	e00f      	b.n	800b57e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b55e:	4b26      	ldr	r3, [pc, #152]	@ (800b5f8 <UART_SetConfig+0xac4>)
 800b560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b562:	e00c      	b.n	800b57e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b564:	4b25      	ldr	r3, [pc, #148]	@ (800b5fc <UART_SetConfig+0xac8>)
 800b566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b568:	e009      	b.n	800b57e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b56a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b570:	e005      	b.n	800b57e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b572:	2300      	movs	r3, #0
 800b574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b576:	2301      	movs	r3, #1
 800b578:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b57c:	bf00      	nop
    }

    if (pclk != 0U)
 800b57e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b580:	2b00      	cmp	r3, #0
 800b582:	d021      	beq.n	800b5c8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b588:	4a1d      	ldr	r2, [pc, #116]	@ (800b600 <UART_SetConfig+0xacc>)
 800b58a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b58e:	461a      	mov	r2, r3
 800b590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b592:	fbb3 f2f2 	udiv	r2, r3, r2
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	085b      	lsrs	r3, r3, #1
 800b59c:	441a      	add	r2, r3
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5aa:	2b0f      	cmp	r3, #15
 800b5ac:	d909      	bls.n	800b5c2 <UART_SetConfig+0xa8e>
 800b5ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5b4:	d205      	bcs.n	800b5c2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b5b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b8:	b29a      	uxth	r2, r3
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	60da      	str	r2, [r3, #12]
 800b5c0:	e002      	b.n	800b5c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b5e4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3748      	adds	r7, #72	@ 0x48
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b5f2:	bf00      	nop
 800b5f4:	58024400 	.word	0x58024400
 800b5f8:	03d09000 	.word	0x03d09000
 800b5fc:	003d0900 	.word	0x003d0900
 800b600:	0800fd30 	.word	0x0800fd30

0800b604 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b610:	f003 0308 	and.w	r3, r3, #8
 800b614:	2b00      	cmp	r3, #0
 800b616:	d00a      	beq.n	800b62e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	430a      	orrs	r2, r1
 800b62c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b632:	f003 0301 	and.w	r3, r3, #1
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00a      	beq.n	800b650 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	430a      	orrs	r2, r1
 800b64e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b654:	f003 0302 	and.w	r3, r3, #2
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d00a      	beq.n	800b672 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	430a      	orrs	r2, r1
 800b670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b676:	f003 0304 	and.w	r3, r3, #4
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d00a      	beq.n	800b694 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	430a      	orrs	r2, r1
 800b692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b698:	f003 0310 	and.w	r3, r3, #16
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d00a      	beq.n	800b6b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	689b      	ldr	r3, [r3, #8]
 800b6a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	430a      	orrs	r2, r1
 800b6b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ba:	f003 0320 	and.w	r3, r3, #32
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d00a      	beq.n	800b6d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	689b      	ldr	r3, [r3, #8]
 800b6c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	430a      	orrs	r2, r1
 800b6d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d01a      	beq.n	800b71a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	430a      	orrs	r2, r1
 800b6f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b702:	d10a      	bne.n	800b71a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	430a      	orrs	r2, r1
 800b718:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b71e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b722:	2b00      	cmp	r3, #0
 800b724:	d00a      	beq.n	800b73c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	430a      	orrs	r2, r1
 800b73a:	605a      	str	r2, [r3, #4]
  }
}
 800b73c:	bf00      	nop
 800b73e:	370c      	adds	r7, #12
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b098      	sub	sp, #96	@ 0x60
 800b74c:	af02      	add	r7, sp, #8
 800b74e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2200      	movs	r2, #0
 800b754:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b758:	f7f7 fdb4 	bl	80032c4 <HAL_GetTick>
 800b75c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f003 0308 	and.w	r3, r3, #8
 800b768:	2b08      	cmp	r3, #8
 800b76a:	d12f      	bne.n	800b7cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b76c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b770:	9300      	str	r3, [sp, #0]
 800b772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b774:	2200      	movs	r2, #0
 800b776:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 f88e 	bl	800b89c <UART_WaitOnFlagUntilTimeout>
 800b780:	4603      	mov	r3, r0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d022      	beq.n	800b7cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b78e:	e853 3f00 	ldrex	r3, [r3]
 800b792:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b796:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b79a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b7aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b7ac:	e841 2300 	strex	r3, r2, [r1]
 800b7b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b7b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1e6      	bne.n	800b786 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2220      	movs	r2, #32
 800b7bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7c8:	2303      	movs	r3, #3
 800b7ca:	e063      	b.n	800b894 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f003 0304 	and.w	r3, r3, #4
 800b7d6:	2b04      	cmp	r3, #4
 800b7d8:	d149      	bne.n	800b86e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b7de:	9300      	str	r3, [sp, #0]
 800b7e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 f857 	bl	800b89c <UART_WaitOnFlagUntilTimeout>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d03c      	beq.n	800b86e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7fc:	e853 3f00 	ldrex	r3, [r3]
 800b800:	623b      	str	r3, [r7, #32]
   return(result);
 800b802:	6a3b      	ldr	r3, [r7, #32]
 800b804:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b808:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	461a      	mov	r2, r3
 800b810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b812:	633b      	str	r3, [r7, #48]	@ 0x30
 800b814:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b816:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b81a:	e841 2300 	strex	r3, r2, [r1]
 800b81e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b822:	2b00      	cmp	r3, #0
 800b824:	d1e6      	bne.n	800b7f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	3308      	adds	r3, #8
 800b82c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	e853 3f00 	ldrex	r3, [r3]
 800b834:	60fb      	str	r3, [r7, #12]
   return(result);
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f023 0301 	bic.w	r3, r3, #1
 800b83c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	3308      	adds	r3, #8
 800b844:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b846:	61fa      	str	r2, [r7, #28]
 800b848:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b84a:	69b9      	ldr	r1, [r7, #24]
 800b84c:	69fa      	ldr	r2, [r7, #28]
 800b84e:	e841 2300 	strex	r3, r2, [r1]
 800b852:	617b      	str	r3, [r7, #20]
   return(result);
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d1e5      	bne.n	800b826 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2220      	movs	r2, #32
 800b85e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b86a:	2303      	movs	r3, #3
 800b86c:	e012      	b.n	800b894 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2220      	movs	r2, #32
 800b872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2220      	movs	r2, #32
 800b87a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2200      	movs	r2, #0
 800b882:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2200      	movs	r2, #0
 800b888:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b892:	2300      	movs	r3, #0
}
 800b894:	4618      	mov	r0, r3
 800b896:	3758      	adds	r7, #88	@ 0x58
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	603b      	str	r3, [r7, #0]
 800b8a8:	4613      	mov	r3, r2
 800b8aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8ac:	e04f      	b.n	800b94e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8ae:	69bb      	ldr	r3, [r7, #24]
 800b8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b4:	d04b      	beq.n	800b94e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8b6:	f7f7 fd05 	bl	80032c4 <HAL_GetTick>
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	1ad3      	subs	r3, r2, r3
 800b8c0:	69ba      	ldr	r2, [r7, #24]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d302      	bcc.n	800b8cc <UART_WaitOnFlagUntilTimeout+0x30>
 800b8c6:	69bb      	ldr	r3, [r7, #24]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d101      	bne.n	800b8d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b8cc:	2303      	movs	r3, #3
 800b8ce:	e04e      	b.n	800b96e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f003 0304 	and.w	r3, r3, #4
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d037      	beq.n	800b94e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	2b80      	cmp	r3, #128	@ 0x80
 800b8e2:	d034      	beq.n	800b94e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	2b40      	cmp	r3, #64	@ 0x40
 800b8e8:	d031      	beq.n	800b94e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	69db      	ldr	r3, [r3, #28]
 800b8f0:	f003 0308 	and.w	r3, r3, #8
 800b8f4:	2b08      	cmp	r3, #8
 800b8f6:	d110      	bne.n	800b91a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	2208      	movs	r2, #8
 800b8fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	f000 f95b 	bl	800bbbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2208      	movs	r2, #8
 800b90a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2200      	movs	r2, #0
 800b912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b916:	2301      	movs	r3, #1
 800b918:	e029      	b.n	800b96e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	69db      	ldr	r3, [r3, #28]
 800b920:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b924:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b928:	d111      	bne.n	800b94e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b932:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b934:	68f8      	ldr	r0, [r7, #12]
 800b936:	f000 f941 	bl	800bbbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2220      	movs	r2, #32
 800b93e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2200      	movs	r2, #0
 800b946:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b94a:	2303      	movs	r3, #3
 800b94c:	e00f      	b.n	800b96e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	69da      	ldr	r2, [r3, #28]
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	4013      	ands	r3, r2
 800b958:	68ba      	ldr	r2, [r7, #8]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	bf0c      	ite	eq
 800b95e:	2301      	moveq	r3, #1
 800b960:	2300      	movne	r3, #0
 800b962:	b2db      	uxtb	r3, r3
 800b964:	461a      	mov	r2, r3
 800b966:	79fb      	ldrb	r3, [r7, #7]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d0a0      	beq.n	800b8ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3710      	adds	r7, #16
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
	...

0800b978 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b978:	b480      	push	{r7}
 800b97a:	b0a3      	sub	sp, #140	@ 0x8c
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	60b9      	str	r1, [r7, #8]
 800b982:	4613      	mov	r3, r2
 800b984:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	68ba      	ldr	r2, [r7, #8]
 800b98a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	88fa      	ldrh	r2, [r7, #6]
 800b990:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	88fa      	ldrh	r2, [r7, #6]
 800b998:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	689b      	ldr	r3, [r3, #8]
 800b9a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9aa:	d10e      	bne.n	800b9ca <UART_Start_Receive_IT+0x52>
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	691b      	ldr	r3, [r3, #16]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d105      	bne.n	800b9c0 <UART_Start_Receive_IT+0x48>
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b9ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b9be:	e02d      	b.n	800ba1c <UART_Start_Receive_IT+0xa4>
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	22ff      	movs	r2, #255	@ 0xff
 800b9c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b9c8:	e028      	b.n	800ba1c <UART_Start_Receive_IT+0xa4>
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d10d      	bne.n	800b9ee <UART_Start_Receive_IT+0x76>
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	691b      	ldr	r3, [r3, #16]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d104      	bne.n	800b9e4 <UART_Start_Receive_IT+0x6c>
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	22ff      	movs	r2, #255	@ 0xff
 800b9de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b9e2:	e01b      	b.n	800ba1c <UART_Start_Receive_IT+0xa4>
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	227f      	movs	r2, #127	@ 0x7f
 800b9e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b9ec:	e016      	b.n	800ba1c <UART_Start_Receive_IT+0xa4>
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	689b      	ldr	r3, [r3, #8]
 800b9f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9f6:	d10d      	bne.n	800ba14 <UART_Start_Receive_IT+0x9c>
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	691b      	ldr	r3, [r3, #16]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d104      	bne.n	800ba0a <UART_Start_Receive_IT+0x92>
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	227f      	movs	r2, #127	@ 0x7f
 800ba04:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ba08:	e008      	b.n	800ba1c <UART_Start_Receive_IT+0xa4>
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	223f      	movs	r2, #63	@ 0x3f
 800ba0e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ba12:	e003      	b.n	800ba1c <UART_Start_Receive_IT+0xa4>
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2222      	movs	r2, #34	@ 0x22
 800ba28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	3308      	adds	r3, #8
 800ba32:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba36:	e853 3f00 	ldrex	r3, [r3]
 800ba3a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ba3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba3e:	f043 0301 	orr.w	r3, r3, #1
 800ba42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	3308      	adds	r3, #8
 800ba4c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ba50:	673a      	str	r2, [r7, #112]	@ 0x70
 800ba52:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba54:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ba56:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ba58:	e841 2300 	strex	r3, r2, [r1]
 800ba5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800ba5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d1e3      	bne.n	800ba2c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba6c:	d14f      	bne.n	800bb0e <UART_Start_Receive_IT+0x196>
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ba74:	88fa      	ldrh	r2, [r7, #6]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d349      	bcc.n	800bb0e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba82:	d107      	bne.n	800ba94 <UART_Start_Receive_IT+0x11c>
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	691b      	ldr	r3, [r3, #16]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d103      	bne.n	800ba94 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	4a47      	ldr	r2, [pc, #284]	@ (800bbac <UART_Start_Receive_IT+0x234>)
 800ba90:	675a      	str	r2, [r3, #116]	@ 0x74
 800ba92:	e002      	b.n	800ba9a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	4a46      	ldr	r2, [pc, #280]	@ (800bbb0 <UART_Start_Receive_IT+0x238>)
 800ba98:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	691b      	ldr	r3, [r3, #16]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d01a      	beq.n	800bad8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800baaa:	e853 3f00 	ldrex	r3, [r3]
 800baae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800bab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bab2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bab6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	461a      	mov	r2, r3
 800bac0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bac4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bac6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800baca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bacc:	e841 2300 	strex	r3, r2, [r1]
 800bad0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800bad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d1e4      	bne.n	800baa2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	3308      	adds	r3, #8
 800bade:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bae2:	e853 3f00 	ldrex	r3, [r3]
 800bae6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800baee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	3308      	adds	r3, #8
 800baf6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800baf8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bafa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bafc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bafe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb00:	e841 2300 	strex	r3, r2, [r1]
 800bb04:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bb06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d1e5      	bne.n	800bad8 <UART_Start_Receive_IT+0x160>
 800bb0c:	e046      	b.n	800bb9c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	689b      	ldr	r3, [r3, #8]
 800bb12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb16:	d107      	bne.n	800bb28 <UART_Start_Receive_IT+0x1b0>
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	691b      	ldr	r3, [r3, #16]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d103      	bne.n	800bb28 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	4a24      	ldr	r2, [pc, #144]	@ (800bbb4 <UART_Start_Receive_IT+0x23c>)
 800bb24:	675a      	str	r2, [r3, #116]	@ 0x74
 800bb26:	e002      	b.n	800bb2e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	4a23      	ldr	r2, [pc, #140]	@ (800bbb8 <UART_Start_Receive_IT+0x240>)
 800bb2c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	691b      	ldr	r3, [r3, #16]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d019      	beq.n	800bb6a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb3e:	e853 3f00 	ldrex	r3, [r3]
 800bb42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb46:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800bb4a:	677b      	str	r3, [r7, #116]	@ 0x74
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	461a      	mov	r2, r3
 800bb52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb54:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb56:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bb5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb5c:	e841 2300 	strex	r3, r2, [r1]
 800bb60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bb62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d1e6      	bne.n	800bb36 <UART_Start_Receive_IT+0x1be>
 800bb68:	e018      	b.n	800bb9c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	e853 3f00 	ldrex	r3, [r3]
 800bb76:	613b      	str	r3, [r7, #16]
   return(result);
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	f043 0320 	orr.w	r3, r3, #32
 800bb7e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	461a      	mov	r2, r3
 800bb86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bb88:	623b      	str	r3, [r7, #32]
 800bb8a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb8c:	69f9      	ldr	r1, [r7, #28]
 800bb8e:	6a3a      	ldr	r2, [r7, #32]
 800bb90:	e841 2300 	strex	r3, r2, [r1]
 800bb94:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d1e6      	bne.n	800bb6a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800bb9c:	2300      	movs	r3, #0
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	378c      	adds	r7, #140	@ 0x8c
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	0800c3dd 	.word	0x0800c3dd
 800bbb0:	0800c07d 	.word	0x0800c07d
 800bbb4:	0800bec5 	.word	0x0800bec5
 800bbb8:	0800bd0d 	.word	0x0800bd0d

0800bbbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b095      	sub	sp, #84	@ 0x54
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbcc:	e853 3f00 	ldrex	r3, [r3]
 800bbd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bbd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bbd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	461a      	mov	r2, r3
 800bbe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbe2:	643b      	str	r3, [r7, #64]	@ 0x40
 800bbe4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bbe8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bbea:	e841 2300 	strex	r3, r2, [r1]
 800bbee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bbf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d1e6      	bne.n	800bbc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	3308      	adds	r3, #8
 800bbfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbfe:	6a3b      	ldr	r3, [r7, #32]
 800bc00:	e853 3f00 	ldrex	r3, [r3]
 800bc04:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc06:	69fa      	ldr	r2, [r7, #28]
 800bc08:	4b1e      	ldr	r3, [pc, #120]	@ (800bc84 <UART_EndRxTransfer+0xc8>)
 800bc0a:	4013      	ands	r3, r2
 800bc0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	3308      	adds	r3, #8
 800bc14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bc18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bc1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc1e:	e841 2300 	strex	r3, r2, [r1]
 800bc22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d1e5      	bne.n	800bbf6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc2e:	2b01      	cmp	r3, #1
 800bc30:	d118      	bne.n	800bc64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	e853 3f00 	ldrex	r3, [r3]
 800bc3e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	f023 0310 	bic.w	r3, r3, #16
 800bc46:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc50:	61bb      	str	r3, [r7, #24]
 800bc52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc54:	6979      	ldr	r1, [r7, #20]
 800bc56:	69ba      	ldr	r2, [r7, #24]
 800bc58:	e841 2300 	strex	r3, r2, [r1]
 800bc5c:	613b      	str	r3, [r7, #16]
   return(result);
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d1e6      	bne.n	800bc32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2220      	movs	r2, #32
 800bc68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2200      	movs	r2, #0
 800bc76:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bc78:	bf00      	nop
 800bc7a:	3754      	adds	r7, #84	@ 0x54
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr
 800bc84:	effffffe 	.word	0xeffffffe

0800bc88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2200      	movs	r2, #0
 800bca2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bca6:	68f8      	ldr	r0, [r7, #12]
 800bca8:	f7fe ff2e 	bl	800ab08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcac:	bf00      	nop
 800bcae:	3710      	adds	r7, #16
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b088      	sub	sp, #32
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	e853 3f00 	ldrex	r3, [r3]
 800bcc8:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bcd0:	61fb      	str	r3, [r7, #28]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	69fb      	ldr	r3, [r7, #28]
 800bcda:	61bb      	str	r3, [r7, #24]
 800bcdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcde:	6979      	ldr	r1, [r7, #20]
 800bce0:	69ba      	ldr	r2, [r7, #24]
 800bce2:	e841 2300 	strex	r3, r2, [r1]
 800bce6:	613b      	str	r3, [r7, #16]
   return(result);
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d1e6      	bne.n	800bcbc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2220      	movs	r2, #32
 800bcf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f7f6 f857 	bl	8001db0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd02:	bf00      	nop
 800bd04:	3720      	adds	r7, #32
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
	...

0800bd0c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b09c      	sub	sp, #112	@ 0x70
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bd1a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd24:	2b22      	cmp	r3, #34	@ 0x22
 800bd26:	f040 80be 	bne.w	800bea6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd30:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bd34:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bd38:	b2d9      	uxtb	r1, r3
 800bd3a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800bd3e:	b2da      	uxtb	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd44:	400a      	ands	r2, r1
 800bd46:	b2d2      	uxtb	r2, r2
 800bd48:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd4e:	1c5a      	adds	r2, r3, #1
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	3b01      	subs	r3, #1
 800bd5e:	b29a      	uxth	r2, r3
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	f040 80a1 	bne.w	800beb6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd7c:	e853 3f00 	ldrex	r3, [r3]
 800bd80:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bd82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bd88:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	461a      	mov	r2, r3
 800bd90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bd92:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd94:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bd98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd9a:	e841 2300 	strex	r3, r2, [r1]
 800bd9e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bda0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d1e6      	bne.n	800bd74 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	3308      	adds	r3, #8
 800bdac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdb0:	e853 3f00 	ldrex	r3, [r3]
 800bdb4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bdb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdb8:	f023 0301 	bic.w	r3, r3, #1
 800bdbc:	667b      	str	r3, [r7, #100]	@ 0x64
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	3308      	adds	r3, #8
 800bdc4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bdc6:	647a      	str	r2, [r7, #68]	@ 0x44
 800bdc8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bdcc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bdce:	e841 2300 	strex	r3, r2, [r1]
 800bdd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bdd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d1e5      	bne.n	800bda6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2220      	movs	r2, #32
 800bdde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4a33      	ldr	r2, [pc, #204]	@ (800bec0 <UART_RxISR_8BIT+0x1b4>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d01f      	beq.n	800be38 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be02:	2b00      	cmp	r3, #0
 800be04:	d018      	beq.n	800be38 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be0e:	e853 3f00 	ldrex	r3, [r3]
 800be12:	623b      	str	r3, [r7, #32]
   return(result);
 800be14:	6a3b      	ldr	r3, [r7, #32]
 800be16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800be1a:	663b      	str	r3, [r7, #96]	@ 0x60
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	461a      	mov	r2, r3
 800be22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800be24:	633b      	str	r3, [r7, #48]	@ 0x30
 800be26:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be2c:	e841 2300 	strex	r3, r2, [r1]
 800be30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800be32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be34:	2b00      	cmp	r3, #0
 800be36:	d1e6      	bne.n	800be06 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d12e      	bne.n	800be9e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	e853 3f00 	ldrex	r3, [r3]
 800be52:	60fb      	str	r3, [r7, #12]
   return(result);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f023 0310 	bic.w	r3, r3, #16
 800be5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	461a      	mov	r2, r3
 800be62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be64:	61fb      	str	r3, [r7, #28]
 800be66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be68:	69b9      	ldr	r1, [r7, #24]
 800be6a:	69fa      	ldr	r2, [r7, #28]
 800be6c:	e841 2300 	strex	r3, r2, [r1]
 800be70:	617b      	str	r3, [r7, #20]
   return(result);
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d1e6      	bne.n	800be46 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	69db      	ldr	r3, [r3, #28]
 800be7e:	f003 0310 	and.w	r3, r3, #16
 800be82:	2b10      	cmp	r3, #16
 800be84:	d103      	bne.n	800be8e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	2210      	movs	r2, #16
 800be8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800be94:	4619      	mov	r1, r3
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f7fe fe40 	bl	800ab1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800be9c:	e00b      	b.n	800beb6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f7f5 ff76 	bl	8001d90 <HAL_UART_RxCpltCallback>
}
 800bea4:	e007      	b.n	800beb6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	699a      	ldr	r2, [r3, #24]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f042 0208 	orr.w	r2, r2, #8
 800beb4:	619a      	str	r2, [r3, #24]
}
 800beb6:	bf00      	nop
 800beb8:	3770      	adds	r7, #112	@ 0x70
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	58000c00 	.word	0x58000c00

0800bec4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b09c      	sub	sp, #112	@ 0x70
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bed2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bedc:	2b22      	cmp	r3, #34	@ 0x22
 800bede:	f040 80be 	bne.w	800c05e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bee8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bef0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800bef2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800bef6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800befa:	4013      	ands	r3, r2
 800befc:	b29a      	uxth	r2, r3
 800befe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf06:	1c9a      	adds	r2, r3, #2
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	3b01      	subs	r3, #1
 800bf16:	b29a      	uxth	r2, r3
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	f040 80a1 	bne.w	800c06e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf34:	e853 3f00 	ldrex	r3, [r3]
 800bf38:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800bf3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf40:	667b      	str	r3, [r7, #100]	@ 0x64
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	461a      	mov	r2, r3
 800bf48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf4a:	657b      	str	r3, [r7, #84]	@ 0x54
 800bf4c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bf50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bf52:	e841 2300 	strex	r3, r2, [r1]
 800bf56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800bf58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d1e6      	bne.n	800bf2c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	3308      	adds	r3, #8
 800bf64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf68:	e853 3f00 	ldrex	r3, [r3]
 800bf6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bf6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf70:	f023 0301 	bic.w	r3, r3, #1
 800bf74:	663b      	str	r3, [r7, #96]	@ 0x60
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	3308      	adds	r3, #8
 800bf7c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bf7e:	643a      	str	r2, [r7, #64]	@ 0x40
 800bf80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bf84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bf86:	e841 2300 	strex	r3, r2, [r1]
 800bf8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bf8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d1e5      	bne.n	800bf5e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2220      	movs	r2, #32
 800bf96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4a33      	ldr	r2, [pc, #204]	@ (800c078 <UART_RxISR_16BIT+0x1b4>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d01f      	beq.n	800bff0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d018      	beq.n	800bff0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc4:	6a3b      	ldr	r3, [r7, #32]
 800bfc6:	e853 3f00 	ldrex	r3, [r3]
 800bfca:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bfd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	461a      	mov	r2, r3
 800bfda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bfdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bfde:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bfe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfe4:	e841 2300 	strex	r3, r2, [r1]
 800bfe8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bfea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d1e6      	bne.n	800bfbe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d12e      	bne.n	800c056 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2200      	movs	r2, #0
 800bffc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	e853 3f00 	ldrex	r3, [r3]
 800c00a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	f023 0310 	bic.w	r3, r3, #16
 800c012:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	461a      	mov	r2, r3
 800c01a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c01c:	61bb      	str	r3, [r7, #24]
 800c01e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c020:	6979      	ldr	r1, [r7, #20]
 800c022:	69ba      	ldr	r2, [r7, #24]
 800c024:	e841 2300 	strex	r3, r2, [r1]
 800c028:	613b      	str	r3, [r7, #16]
   return(result);
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d1e6      	bne.n	800bffe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	69db      	ldr	r3, [r3, #28]
 800c036:	f003 0310 	and.w	r3, r3, #16
 800c03a:	2b10      	cmp	r3, #16
 800c03c:	d103      	bne.n	800c046 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	2210      	movs	r2, #16
 800c044:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c04c:	4619      	mov	r1, r3
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f7fe fd64 	bl	800ab1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c054:	e00b      	b.n	800c06e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f7f5 fe9a 	bl	8001d90 <HAL_UART_RxCpltCallback>
}
 800c05c:	e007      	b.n	800c06e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	699a      	ldr	r2, [r3, #24]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f042 0208 	orr.w	r2, r2, #8
 800c06c:	619a      	str	r2, [r3, #24]
}
 800c06e:	bf00      	nop
 800c070:	3770      	adds	r7, #112	@ 0x70
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	58000c00 	.word	0x58000c00

0800c07c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b0ac      	sub	sp, #176	@ 0xb0
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c08a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	69db      	ldr	r3, [r3, #28]
 800c094:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	689b      	ldr	r3, [r3, #8]
 800c0a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c0b2:	2b22      	cmp	r3, #34	@ 0x22
 800c0b4:	f040 8180 	bne.w	800c3b8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c0be:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c0c2:	e123      	b.n	800c30c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0ca:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c0ce:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800c0d2:	b2d9      	uxtb	r1, r3
 800c0d4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800c0d8:	b2da      	uxtb	r2, r3
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0de:	400a      	ands	r2, r1
 800c0e0:	b2d2      	uxtb	r2, r2
 800c0e2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0e8:	1c5a      	adds	r2, r3, #1
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	b29a      	uxth	r2, r3
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	69db      	ldr	r3, [r3, #28]
 800c106:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c10a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c10e:	f003 0307 	and.w	r3, r3, #7
 800c112:	2b00      	cmp	r3, #0
 800c114:	d053      	beq.n	800c1be <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c11a:	f003 0301 	and.w	r3, r3, #1
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d011      	beq.n	800c146 <UART_RxISR_8BIT_FIFOEN+0xca>
 800c122:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00b      	beq.n	800c146 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	2201      	movs	r2, #1
 800c134:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c13c:	f043 0201 	orr.w	r2, r3, #1
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c14a:	f003 0302 	and.w	r3, r3, #2
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d011      	beq.n	800c176 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c152:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c156:	f003 0301 	and.w	r3, r3, #1
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d00b      	beq.n	800c176 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	2202      	movs	r2, #2
 800c164:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c16c:	f043 0204 	orr.w	r2, r3, #4
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c17a:	f003 0304 	and.w	r3, r3, #4
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d011      	beq.n	800c1a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c186:	f003 0301 	and.w	r3, r3, #1
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d00b      	beq.n	800c1a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	2204      	movs	r2, #4
 800c194:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c19c:	f043 0202 	orr.w	r2, r3, #2
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d006      	beq.n	800c1be <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7fe fca9 	bl	800ab08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	f040 80a0 	bne.w	800c30c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c1d4:	e853 3f00 	ldrex	r3, [r3]
 800c1d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800c1da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c1dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c1e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c1ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c1f0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800c1f4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c1f6:	e841 2300 	strex	r3, r2, [r1]
 800c1fa:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800c1fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d1e4      	bne.n	800c1cc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	3308      	adds	r3, #8
 800c208:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c20a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c20c:	e853 3f00 	ldrex	r3, [r3]
 800c210:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c212:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c214:	4b6e      	ldr	r3, [pc, #440]	@ (800c3d0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800c216:	4013      	ands	r3, r2
 800c218:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	3308      	adds	r3, #8
 800c222:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c226:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c228:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c22a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c22c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c22e:	e841 2300 	strex	r3, r2, [r1]
 800c232:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c234:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c236:	2b00      	cmp	r3, #0
 800c238:	d1e3      	bne.n	800c202 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2220      	movs	r2, #32
 800c23e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2200      	movs	r2, #0
 800c24c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	4a60      	ldr	r2, [pc, #384]	@ (800c3d4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d021      	beq.n	800c29c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c262:	2b00      	cmp	r3, #0
 800c264:	d01a      	beq.n	800c29c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c26e:	e853 3f00 	ldrex	r3, [r3]
 800c272:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c274:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c276:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c27a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	461a      	mov	r2, r3
 800c284:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c288:	657b      	str	r3, [r7, #84]	@ 0x54
 800c28a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c28c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c28e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c290:	e841 2300 	strex	r3, r2, [r1]
 800c294:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c296:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d1e4      	bne.n	800c266 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d130      	bne.n	800c306 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2b2:	e853 3f00 	ldrex	r3, [r3]
 800c2b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ba:	f023 0310 	bic.w	r3, r3, #16
 800c2be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c2cc:	643b      	str	r3, [r7, #64]	@ 0x40
 800c2ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c2d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c2d4:	e841 2300 	strex	r3, r2, [r1]
 800c2d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c2da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d1e4      	bne.n	800c2aa <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	69db      	ldr	r3, [r3, #28]
 800c2e6:	f003 0310 	and.w	r3, r3, #16
 800c2ea:	2b10      	cmp	r3, #16
 800c2ec:	d103      	bne.n	800c2f6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	2210      	movs	r2, #16
 800c2f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f7fe fc0c 	bl	800ab1c <HAL_UARTEx_RxEventCallback>
 800c304:	e002      	b.n	800c30c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f7f5 fd42 	bl	8001d90 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c30c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800c310:	2b00      	cmp	r3, #0
 800c312:	d006      	beq.n	800c322 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800c314:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c318:	f003 0320 	and.w	r3, r3, #32
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	f47f aed1 	bne.w	800c0c4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c328:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c32c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c330:	2b00      	cmp	r3, #0
 800c332:	d049      	beq.n	800c3c8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c33a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800c33e:	429a      	cmp	r2, r3
 800c340:	d242      	bcs.n	800c3c8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	3308      	adds	r3, #8
 800c348:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c34a:	6a3b      	ldr	r3, [r7, #32]
 800c34c:	e853 3f00 	ldrex	r3, [r3]
 800c350:	61fb      	str	r3, [r7, #28]
   return(result);
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c358:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	3308      	adds	r3, #8
 800c362:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c366:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c368:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c36a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c36c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c36e:	e841 2300 	strex	r3, r2, [r1]
 800c372:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c376:	2b00      	cmp	r3, #0
 800c378:	d1e3      	bne.n	800c342 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	4a16      	ldr	r2, [pc, #88]	@ (800c3d8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c37e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	e853 3f00 	ldrex	r3, [r3]
 800c38c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	f043 0320 	orr.w	r3, r3, #32
 800c394:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	461a      	mov	r2, r3
 800c39e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c3a2:	61bb      	str	r3, [r7, #24]
 800c3a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a6:	6979      	ldr	r1, [r7, #20]
 800c3a8:	69ba      	ldr	r2, [r7, #24]
 800c3aa:	e841 2300 	strex	r3, r2, [r1]
 800c3ae:	613b      	str	r3, [r7, #16]
   return(result);
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d1e4      	bne.n	800c380 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c3b6:	e007      	b.n	800c3c8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	699a      	ldr	r2, [r3, #24]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f042 0208 	orr.w	r2, r2, #8
 800c3c6:	619a      	str	r2, [r3, #24]
}
 800c3c8:	bf00      	nop
 800c3ca:	37b0      	adds	r7, #176	@ 0xb0
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	effffffe 	.word	0xeffffffe
 800c3d4:	58000c00 	.word	0x58000c00
 800c3d8:	0800bd0d 	.word	0x0800bd0d

0800c3dc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b0ae      	sub	sp, #184	@ 0xb8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c3ea:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	69db      	ldr	r3, [r3, #28]
 800c3f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c412:	2b22      	cmp	r3, #34	@ 0x22
 800c414:	f040 8184 	bne.w	800c720 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c41e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c422:	e127      	b.n	800c674 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c42a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c432:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c436:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800c43a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800c43e:	4013      	ands	r3, r2
 800c440:	b29a      	uxth	r2, r3
 800c442:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c446:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c44c:	1c9a      	adds	r2, r3, #2
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c458:	b29b      	uxth	r3, r3
 800c45a:	3b01      	subs	r3, #1
 800c45c:	b29a      	uxth	r2, r3
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	69db      	ldr	r3, [r3, #28]
 800c46a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c46e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c472:	f003 0307 	and.w	r3, r3, #7
 800c476:	2b00      	cmp	r3, #0
 800c478:	d053      	beq.n	800c522 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c47a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c47e:	f003 0301 	and.w	r3, r3, #1
 800c482:	2b00      	cmp	r3, #0
 800c484:	d011      	beq.n	800c4aa <UART_RxISR_16BIT_FIFOEN+0xce>
 800c486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c48a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d00b      	beq.n	800c4aa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	2201      	movs	r2, #1
 800c498:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4a0:	f043 0201 	orr.w	r2, r3, #1
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c4aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c4ae:	f003 0302 	and.w	r3, r3, #2
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d011      	beq.n	800c4da <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c4b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c4ba:	f003 0301 	and.w	r3, r3, #1
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d00b      	beq.n	800c4da <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	2202      	movs	r2, #2
 800c4c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4d0:	f043 0204 	orr.w	r2, r3, #4
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c4da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c4de:	f003 0304 	and.w	r3, r3, #4
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d011      	beq.n	800c50a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c4e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c4ea:	f003 0301 	and.w	r3, r3, #1
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d00b      	beq.n	800c50a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	2204      	movs	r2, #4
 800c4f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c500:	f043 0202 	orr.w	r2, r3, #2
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c510:	2b00      	cmp	r3, #0
 800c512:	d006      	beq.n	800c522 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f7fe faf7 	bl	800ab08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2200      	movs	r2, #0
 800c51e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c528:	b29b      	uxth	r3, r3
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	f040 80a2 	bne.w	800c674 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c536:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c538:	e853 3f00 	ldrex	r3, [r3]
 800c53c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c53e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c540:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c544:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	461a      	mov	r2, r3
 800c54e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c552:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c556:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c558:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c55a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c55e:	e841 2300 	strex	r3, r2, [r1]
 800c562:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c564:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c566:	2b00      	cmp	r3, #0
 800c568:	d1e2      	bne.n	800c530 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	3308      	adds	r3, #8
 800c570:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c572:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c574:	e853 3f00 	ldrex	r3, [r3]
 800c578:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c57a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c57c:	4b6e      	ldr	r3, [pc, #440]	@ (800c738 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800c57e:	4013      	ands	r3, r2
 800c580:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	3308      	adds	r3, #8
 800c58a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c58e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c590:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c592:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c594:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c596:	e841 2300 	strex	r3, r2, [r1]
 800c59a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c59c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d1e3      	bne.n	800c56a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2220      	movs	r2, #32
 800c5a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a60      	ldr	r2, [pc, #384]	@ (800c73c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d021      	beq.n	800c604 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d01a      	beq.n	800c604 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5d6:	e853 3f00 	ldrex	r3, [r3]
 800c5da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c5dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c5e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c5f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c5f2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c5f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c5f8:	e841 2300 	strex	r3, r2, [r1]
 800c5fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c5fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c600:	2b00      	cmp	r3, #0
 800c602:	d1e4      	bne.n	800c5ce <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c608:	2b01      	cmp	r3, #1
 800c60a:	d130      	bne.n	800c66e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2200      	movs	r2, #0
 800c610:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c61a:	e853 3f00 	ldrex	r3, [r3]
 800c61e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c622:	f023 0310 	bic.w	r3, r3, #16
 800c626:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	461a      	mov	r2, r3
 800c630:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c634:	647b      	str	r3, [r7, #68]	@ 0x44
 800c636:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c638:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c63a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c63c:	e841 2300 	strex	r3, r2, [r1]
 800c640:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c644:	2b00      	cmp	r3, #0
 800c646:	d1e4      	bne.n	800c612 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	69db      	ldr	r3, [r3, #28]
 800c64e:	f003 0310 	and.w	r3, r3, #16
 800c652:	2b10      	cmp	r3, #16
 800c654:	d103      	bne.n	800c65e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	2210      	movs	r2, #16
 800c65c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c664:	4619      	mov	r1, r3
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f7fe fa58 	bl	800ab1c <HAL_UARTEx_RxEventCallback>
 800c66c:	e002      	b.n	800c674 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f7f5 fb8e 	bl	8001d90 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c674:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d006      	beq.n	800c68a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800c67c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c680:	f003 0320 	and.w	r3, r3, #32
 800c684:	2b00      	cmp	r3, #0
 800c686:	f47f aecd 	bne.w	800c424 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c690:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c694:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d049      	beq.n	800c730 <UART_RxISR_16BIT_FIFOEN+0x354>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c6a2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d242      	bcs.n	800c730 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	3308      	adds	r3, #8
 800c6b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b4:	e853 3f00 	ldrex	r3, [r3]
 800c6b8:	623b      	str	r3, [r7, #32]
   return(result);
 800c6ba:	6a3b      	ldr	r3, [r7, #32]
 800c6bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c6c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	3308      	adds	r3, #8
 800c6ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c6ce:	633a      	str	r2, [r7, #48]	@ 0x30
 800c6d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c6d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6d6:	e841 2300 	strex	r3, r2, [r1]
 800c6da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d1e3      	bne.n	800c6aa <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	4a16      	ldr	r2, [pc, #88]	@ (800c740 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c6e6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	e853 3f00 	ldrex	r3, [r3]
 800c6f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	f043 0320 	orr.w	r3, r3, #32
 800c6fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	461a      	mov	r2, r3
 800c706:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c70a:	61fb      	str	r3, [r7, #28]
 800c70c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c70e:	69b9      	ldr	r1, [r7, #24]
 800c710:	69fa      	ldr	r2, [r7, #28]
 800c712:	e841 2300 	strex	r3, r2, [r1]
 800c716:	617b      	str	r3, [r7, #20]
   return(result);
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d1e4      	bne.n	800c6e8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c71e:	e007      	b.n	800c730 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	699a      	ldr	r2, [r3, #24]
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f042 0208 	orr.w	r2, r2, #8
 800c72e:	619a      	str	r2, [r3, #24]
}
 800c730:	bf00      	nop
 800c732:	37b8      	adds	r7, #184	@ 0xb8
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	effffffe 	.word	0xeffffffe
 800c73c:	58000c00 	.word	0x58000c00
 800c740:	0800bec5 	.word	0x0800bec5

0800c744 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c744:	b480      	push	{r7}
 800c746:	b083      	sub	sp, #12
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c74c:	bf00      	nop
 800c74e:	370c      	adds	r7, #12
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c760:	bf00      	nop
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr

0800c76c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b083      	sub	sp, #12
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c774:	bf00      	nop
 800c776:	370c      	adds	r7, #12
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr

0800c780 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c78e:	2b01      	cmp	r3, #1
 800c790:	d101      	bne.n	800c796 <HAL_UARTEx_DisableFifoMode+0x16>
 800c792:	2302      	movs	r3, #2
 800c794:	e027      	b.n	800c7e6 <HAL_UARTEx_DisableFifoMode+0x66>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2201      	movs	r2, #1
 800c79a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2224      	movs	r2, #36	@ 0x24
 800c7a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	681a      	ldr	r2, [r3, #0]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f022 0201 	bic.w	r2, r2, #1
 800c7bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c7c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	68fa      	ldr	r2, [r7, #12]
 800c7d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2220      	movs	r2, #32
 800c7d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c7e4:	2300      	movs	r3, #0
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3714      	adds	r7, #20
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr

0800c7f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b084      	sub	sp, #16
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
 800c7fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c802:	2b01      	cmp	r3, #1
 800c804:	d101      	bne.n	800c80a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c806:	2302      	movs	r3, #2
 800c808:	e02d      	b.n	800c866 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2201      	movs	r2, #1
 800c80e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2224      	movs	r2, #36	@ 0x24
 800c816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	681a      	ldr	r2, [r3, #0]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f022 0201 	bic.w	r2, r2, #1
 800c830:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	689b      	ldr	r3, [r3, #8]
 800c838:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	683a      	ldr	r2, [r7, #0]
 800c842:	430a      	orrs	r2, r1
 800c844:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 f850 	bl	800c8ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	68fa      	ldr	r2, [r7, #12]
 800c852:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2220      	movs	r2, #32
 800c858:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2200      	movs	r2, #0
 800c860:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c864:	2300      	movs	r3, #0
}
 800c866:	4618      	mov	r0, r3
 800c868:	3710      	adds	r7, #16
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c86e:	b580      	push	{r7, lr}
 800c870:	b084      	sub	sp, #16
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
 800c876:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d101      	bne.n	800c886 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c882:	2302      	movs	r3, #2
 800c884:	e02d      	b.n	800c8e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2201      	movs	r2, #1
 800c88a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2224      	movs	r2, #36	@ 0x24
 800c892:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f022 0201 	bic.w	r2, r2, #1
 800c8ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	689b      	ldr	r3, [r3, #8]
 800c8b4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	683a      	ldr	r2, [r7, #0]
 800c8be:	430a      	orrs	r2, r1
 800c8c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 f812 	bl	800c8ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	68fa      	ldr	r2, [r7, #12]
 800c8ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2220      	movs	r2, #32
 800c8d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c8e0:	2300      	movs	r3, #0
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3710      	adds	r7, #16
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}
	...

0800c8ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b085      	sub	sp, #20
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d108      	bne.n	800c90e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2201      	movs	r2, #1
 800c900:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2201      	movs	r2, #1
 800c908:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c90c:	e031      	b.n	800c972 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c90e:	2310      	movs	r3, #16
 800c910:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c912:	2310      	movs	r3, #16
 800c914:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	689b      	ldr	r3, [r3, #8]
 800c91c:	0e5b      	lsrs	r3, r3, #25
 800c91e:	b2db      	uxtb	r3, r3
 800c920:	f003 0307 	and.w	r3, r3, #7
 800c924:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	689b      	ldr	r3, [r3, #8]
 800c92c:	0f5b      	lsrs	r3, r3, #29
 800c92e:	b2db      	uxtb	r3, r3
 800c930:	f003 0307 	and.w	r3, r3, #7
 800c934:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c936:	7bbb      	ldrb	r3, [r7, #14]
 800c938:	7b3a      	ldrb	r2, [r7, #12]
 800c93a:	4911      	ldr	r1, [pc, #68]	@ (800c980 <UARTEx_SetNbDataToProcess+0x94>)
 800c93c:	5c8a      	ldrb	r2, [r1, r2]
 800c93e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c942:	7b3a      	ldrb	r2, [r7, #12]
 800c944:	490f      	ldr	r1, [pc, #60]	@ (800c984 <UARTEx_SetNbDataToProcess+0x98>)
 800c946:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c948:	fb93 f3f2 	sdiv	r3, r3, r2
 800c94c:	b29a      	uxth	r2, r3
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c954:	7bfb      	ldrb	r3, [r7, #15]
 800c956:	7b7a      	ldrb	r2, [r7, #13]
 800c958:	4909      	ldr	r1, [pc, #36]	@ (800c980 <UARTEx_SetNbDataToProcess+0x94>)
 800c95a:	5c8a      	ldrb	r2, [r1, r2]
 800c95c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c960:	7b7a      	ldrb	r2, [r7, #13]
 800c962:	4908      	ldr	r1, [pc, #32]	@ (800c984 <UARTEx_SetNbDataToProcess+0x98>)
 800c964:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c966:	fb93 f3f2 	sdiv	r3, r3, r2
 800c96a:	b29a      	uxth	r2, r3
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c972:	bf00      	nop
 800c974:	3714      	adds	r7, #20
 800c976:	46bd      	mov	sp, r7
 800c978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97c:	4770      	bx	lr
 800c97e:	bf00      	nop
 800c980:	0800fd48 	.word	0x0800fd48
 800c984:	0800fd50 	.word	0x0800fd50

0800c988 <__cvt>:
 800c988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c98a:	ed2d 8b02 	vpush	{d8}
 800c98e:	eeb0 8b40 	vmov.f64	d8, d0
 800c992:	b085      	sub	sp, #20
 800c994:	4617      	mov	r7, r2
 800c996:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800c998:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c99a:	ee18 2a90 	vmov	r2, s17
 800c99e:	f025 0520 	bic.w	r5, r5, #32
 800c9a2:	2a00      	cmp	r2, #0
 800c9a4:	bfb6      	itet	lt
 800c9a6:	222d      	movlt	r2, #45	@ 0x2d
 800c9a8:	2200      	movge	r2, #0
 800c9aa:	eeb1 8b40 	vneglt.f64	d8, d0
 800c9ae:	2d46      	cmp	r5, #70	@ 0x46
 800c9b0:	460c      	mov	r4, r1
 800c9b2:	701a      	strb	r2, [r3, #0]
 800c9b4:	d004      	beq.n	800c9c0 <__cvt+0x38>
 800c9b6:	2d45      	cmp	r5, #69	@ 0x45
 800c9b8:	d100      	bne.n	800c9bc <__cvt+0x34>
 800c9ba:	3401      	adds	r4, #1
 800c9bc:	2102      	movs	r1, #2
 800c9be:	e000      	b.n	800c9c2 <__cvt+0x3a>
 800c9c0:	2103      	movs	r1, #3
 800c9c2:	ab03      	add	r3, sp, #12
 800c9c4:	9301      	str	r3, [sp, #4]
 800c9c6:	ab02      	add	r3, sp, #8
 800c9c8:	9300      	str	r3, [sp, #0]
 800c9ca:	4622      	mov	r2, r4
 800c9cc:	4633      	mov	r3, r6
 800c9ce:	eeb0 0b48 	vmov.f64	d0, d8
 800c9d2:	f000 fe21 	bl	800d618 <_dtoa_r>
 800c9d6:	2d47      	cmp	r5, #71	@ 0x47
 800c9d8:	d114      	bne.n	800ca04 <__cvt+0x7c>
 800c9da:	07fb      	lsls	r3, r7, #31
 800c9dc:	d50a      	bpl.n	800c9f4 <__cvt+0x6c>
 800c9de:	1902      	adds	r2, r0, r4
 800c9e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c9e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9e8:	bf08      	it	eq
 800c9ea:	9203      	streq	r2, [sp, #12]
 800c9ec:	2130      	movs	r1, #48	@ 0x30
 800c9ee:	9b03      	ldr	r3, [sp, #12]
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d319      	bcc.n	800ca28 <__cvt+0xa0>
 800c9f4:	9b03      	ldr	r3, [sp, #12]
 800c9f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9f8:	1a1b      	subs	r3, r3, r0
 800c9fa:	6013      	str	r3, [r2, #0]
 800c9fc:	b005      	add	sp, #20
 800c9fe:	ecbd 8b02 	vpop	{d8}
 800ca02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca04:	2d46      	cmp	r5, #70	@ 0x46
 800ca06:	eb00 0204 	add.w	r2, r0, r4
 800ca0a:	d1e9      	bne.n	800c9e0 <__cvt+0x58>
 800ca0c:	7803      	ldrb	r3, [r0, #0]
 800ca0e:	2b30      	cmp	r3, #48	@ 0x30
 800ca10:	d107      	bne.n	800ca22 <__cvt+0x9a>
 800ca12:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ca16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca1a:	bf1c      	itt	ne
 800ca1c:	f1c4 0401 	rsbne	r4, r4, #1
 800ca20:	6034      	strne	r4, [r6, #0]
 800ca22:	6833      	ldr	r3, [r6, #0]
 800ca24:	441a      	add	r2, r3
 800ca26:	e7db      	b.n	800c9e0 <__cvt+0x58>
 800ca28:	1c5c      	adds	r4, r3, #1
 800ca2a:	9403      	str	r4, [sp, #12]
 800ca2c:	7019      	strb	r1, [r3, #0]
 800ca2e:	e7de      	b.n	800c9ee <__cvt+0x66>

0800ca30 <__exponent>:
 800ca30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca32:	2900      	cmp	r1, #0
 800ca34:	bfba      	itte	lt
 800ca36:	4249      	neglt	r1, r1
 800ca38:	232d      	movlt	r3, #45	@ 0x2d
 800ca3a:	232b      	movge	r3, #43	@ 0x2b
 800ca3c:	2909      	cmp	r1, #9
 800ca3e:	7002      	strb	r2, [r0, #0]
 800ca40:	7043      	strb	r3, [r0, #1]
 800ca42:	dd29      	ble.n	800ca98 <__exponent+0x68>
 800ca44:	f10d 0307 	add.w	r3, sp, #7
 800ca48:	461d      	mov	r5, r3
 800ca4a:	270a      	movs	r7, #10
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	fbb1 f6f7 	udiv	r6, r1, r7
 800ca52:	fb07 1416 	mls	r4, r7, r6, r1
 800ca56:	3430      	adds	r4, #48	@ 0x30
 800ca58:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ca5c:	460c      	mov	r4, r1
 800ca5e:	2c63      	cmp	r4, #99	@ 0x63
 800ca60:	f103 33ff 	add.w	r3, r3, #4294967295
 800ca64:	4631      	mov	r1, r6
 800ca66:	dcf1      	bgt.n	800ca4c <__exponent+0x1c>
 800ca68:	3130      	adds	r1, #48	@ 0x30
 800ca6a:	1e94      	subs	r4, r2, #2
 800ca6c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ca70:	1c41      	adds	r1, r0, #1
 800ca72:	4623      	mov	r3, r4
 800ca74:	42ab      	cmp	r3, r5
 800ca76:	d30a      	bcc.n	800ca8e <__exponent+0x5e>
 800ca78:	f10d 0309 	add.w	r3, sp, #9
 800ca7c:	1a9b      	subs	r3, r3, r2
 800ca7e:	42ac      	cmp	r4, r5
 800ca80:	bf88      	it	hi
 800ca82:	2300      	movhi	r3, #0
 800ca84:	3302      	adds	r3, #2
 800ca86:	4403      	add	r3, r0
 800ca88:	1a18      	subs	r0, r3, r0
 800ca8a:	b003      	add	sp, #12
 800ca8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca8e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ca92:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ca96:	e7ed      	b.n	800ca74 <__exponent+0x44>
 800ca98:	2330      	movs	r3, #48	@ 0x30
 800ca9a:	3130      	adds	r1, #48	@ 0x30
 800ca9c:	7083      	strb	r3, [r0, #2]
 800ca9e:	70c1      	strb	r1, [r0, #3]
 800caa0:	1d03      	adds	r3, r0, #4
 800caa2:	e7f1      	b.n	800ca88 <__exponent+0x58>
 800caa4:	0000      	movs	r0, r0
	...

0800caa8 <_printf_float>:
 800caa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caac:	b08d      	sub	sp, #52	@ 0x34
 800caae:	460c      	mov	r4, r1
 800cab0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cab4:	4616      	mov	r6, r2
 800cab6:	461f      	mov	r7, r3
 800cab8:	4605      	mov	r5, r0
 800caba:	f000 fcab 	bl	800d414 <_localeconv_r>
 800cabe:	f8d0 b000 	ldr.w	fp, [r0]
 800cac2:	4658      	mov	r0, fp
 800cac4:	f7f3 fc5c 	bl	8000380 <strlen>
 800cac8:	2300      	movs	r3, #0
 800caca:	930a      	str	r3, [sp, #40]	@ 0x28
 800cacc:	f8d8 3000 	ldr.w	r3, [r8]
 800cad0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800cad4:	6822      	ldr	r2, [r4, #0]
 800cad6:	9005      	str	r0, [sp, #20]
 800cad8:	3307      	adds	r3, #7
 800cada:	f023 0307 	bic.w	r3, r3, #7
 800cade:	f103 0108 	add.w	r1, r3, #8
 800cae2:	f8c8 1000 	str.w	r1, [r8]
 800cae6:	ed93 0b00 	vldr	d0, [r3]
 800caea:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800cd48 <_printf_float+0x2a0>
 800caee:	eeb0 7bc0 	vabs.f64	d7, d0
 800caf2:	eeb4 7b46 	vcmp.f64	d7, d6
 800caf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cafa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800cafe:	dd24      	ble.n	800cb4a <_printf_float+0xa2>
 800cb00:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cb04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb08:	d502      	bpl.n	800cb10 <_printf_float+0x68>
 800cb0a:	232d      	movs	r3, #45	@ 0x2d
 800cb0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb10:	498f      	ldr	r1, [pc, #572]	@ (800cd50 <_printf_float+0x2a8>)
 800cb12:	4b90      	ldr	r3, [pc, #576]	@ (800cd54 <_printf_float+0x2ac>)
 800cb14:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800cb18:	bf94      	ite	ls
 800cb1a:	4688      	movls	r8, r1
 800cb1c:	4698      	movhi	r8, r3
 800cb1e:	f022 0204 	bic.w	r2, r2, #4
 800cb22:	2303      	movs	r3, #3
 800cb24:	6123      	str	r3, [r4, #16]
 800cb26:	6022      	str	r2, [r4, #0]
 800cb28:	f04f 0a00 	mov.w	sl, #0
 800cb2c:	9700      	str	r7, [sp, #0]
 800cb2e:	4633      	mov	r3, r6
 800cb30:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cb32:	4621      	mov	r1, r4
 800cb34:	4628      	mov	r0, r5
 800cb36:	f000 f9d1 	bl	800cedc <_printf_common>
 800cb3a:	3001      	adds	r0, #1
 800cb3c:	f040 8089 	bne.w	800cc52 <_printf_float+0x1aa>
 800cb40:	f04f 30ff 	mov.w	r0, #4294967295
 800cb44:	b00d      	add	sp, #52	@ 0x34
 800cb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb4a:	eeb4 0b40 	vcmp.f64	d0, d0
 800cb4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb52:	d709      	bvc.n	800cb68 <_printf_float+0xc0>
 800cb54:	ee10 3a90 	vmov	r3, s1
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	bfbc      	itt	lt
 800cb5c:	232d      	movlt	r3, #45	@ 0x2d
 800cb5e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cb62:	497d      	ldr	r1, [pc, #500]	@ (800cd58 <_printf_float+0x2b0>)
 800cb64:	4b7d      	ldr	r3, [pc, #500]	@ (800cd5c <_printf_float+0x2b4>)
 800cb66:	e7d5      	b.n	800cb14 <_printf_float+0x6c>
 800cb68:	6863      	ldr	r3, [r4, #4]
 800cb6a:	1c59      	adds	r1, r3, #1
 800cb6c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800cb70:	d139      	bne.n	800cbe6 <_printf_float+0x13e>
 800cb72:	2306      	movs	r3, #6
 800cb74:	6063      	str	r3, [r4, #4]
 800cb76:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	6022      	str	r2, [r4, #0]
 800cb7e:	9303      	str	r3, [sp, #12]
 800cb80:	ab0a      	add	r3, sp, #40	@ 0x28
 800cb82:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800cb86:	ab09      	add	r3, sp, #36	@ 0x24
 800cb88:	9300      	str	r3, [sp, #0]
 800cb8a:	6861      	ldr	r1, [r4, #4]
 800cb8c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cb90:	4628      	mov	r0, r5
 800cb92:	f7ff fef9 	bl	800c988 <__cvt>
 800cb96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cb9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cb9c:	4680      	mov	r8, r0
 800cb9e:	d129      	bne.n	800cbf4 <_printf_float+0x14c>
 800cba0:	1cc8      	adds	r0, r1, #3
 800cba2:	db02      	blt.n	800cbaa <_printf_float+0x102>
 800cba4:	6863      	ldr	r3, [r4, #4]
 800cba6:	4299      	cmp	r1, r3
 800cba8:	dd41      	ble.n	800cc2e <_printf_float+0x186>
 800cbaa:	f1a9 0902 	sub.w	r9, r9, #2
 800cbae:	fa5f f989 	uxtb.w	r9, r9
 800cbb2:	3901      	subs	r1, #1
 800cbb4:	464a      	mov	r2, r9
 800cbb6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cbba:	9109      	str	r1, [sp, #36]	@ 0x24
 800cbbc:	f7ff ff38 	bl	800ca30 <__exponent>
 800cbc0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cbc2:	1813      	adds	r3, r2, r0
 800cbc4:	2a01      	cmp	r2, #1
 800cbc6:	4682      	mov	sl, r0
 800cbc8:	6123      	str	r3, [r4, #16]
 800cbca:	dc02      	bgt.n	800cbd2 <_printf_float+0x12a>
 800cbcc:	6822      	ldr	r2, [r4, #0]
 800cbce:	07d2      	lsls	r2, r2, #31
 800cbd0:	d501      	bpl.n	800cbd6 <_printf_float+0x12e>
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	6123      	str	r3, [r4, #16]
 800cbd6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d0a6      	beq.n	800cb2c <_printf_float+0x84>
 800cbde:	232d      	movs	r3, #45	@ 0x2d
 800cbe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbe4:	e7a2      	b.n	800cb2c <_printf_float+0x84>
 800cbe6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cbea:	d1c4      	bne.n	800cb76 <_printf_float+0xce>
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d1c2      	bne.n	800cb76 <_printf_float+0xce>
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	e7bf      	b.n	800cb74 <_printf_float+0xcc>
 800cbf4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800cbf8:	d9db      	bls.n	800cbb2 <_printf_float+0x10a>
 800cbfa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800cbfe:	d118      	bne.n	800cc32 <_printf_float+0x18a>
 800cc00:	2900      	cmp	r1, #0
 800cc02:	6863      	ldr	r3, [r4, #4]
 800cc04:	dd0b      	ble.n	800cc1e <_printf_float+0x176>
 800cc06:	6121      	str	r1, [r4, #16]
 800cc08:	b913      	cbnz	r3, 800cc10 <_printf_float+0x168>
 800cc0a:	6822      	ldr	r2, [r4, #0]
 800cc0c:	07d0      	lsls	r0, r2, #31
 800cc0e:	d502      	bpl.n	800cc16 <_printf_float+0x16e>
 800cc10:	3301      	adds	r3, #1
 800cc12:	440b      	add	r3, r1
 800cc14:	6123      	str	r3, [r4, #16]
 800cc16:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cc18:	f04f 0a00 	mov.w	sl, #0
 800cc1c:	e7db      	b.n	800cbd6 <_printf_float+0x12e>
 800cc1e:	b913      	cbnz	r3, 800cc26 <_printf_float+0x17e>
 800cc20:	6822      	ldr	r2, [r4, #0]
 800cc22:	07d2      	lsls	r2, r2, #31
 800cc24:	d501      	bpl.n	800cc2a <_printf_float+0x182>
 800cc26:	3302      	adds	r3, #2
 800cc28:	e7f4      	b.n	800cc14 <_printf_float+0x16c>
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	e7f2      	b.n	800cc14 <_printf_float+0x16c>
 800cc2e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800cc32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc34:	4299      	cmp	r1, r3
 800cc36:	db05      	blt.n	800cc44 <_printf_float+0x19c>
 800cc38:	6823      	ldr	r3, [r4, #0]
 800cc3a:	6121      	str	r1, [r4, #16]
 800cc3c:	07d8      	lsls	r0, r3, #31
 800cc3e:	d5ea      	bpl.n	800cc16 <_printf_float+0x16e>
 800cc40:	1c4b      	adds	r3, r1, #1
 800cc42:	e7e7      	b.n	800cc14 <_printf_float+0x16c>
 800cc44:	2900      	cmp	r1, #0
 800cc46:	bfd4      	ite	le
 800cc48:	f1c1 0202 	rsble	r2, r1, #2
 800cc4c:	2201      	movgt	r2, #1
 800cc4e:	4413      	add	r3, r2
 800cc50:	e7e0      	b.n	800cc14 <_printf_float+0x16c>
 800cc52:	6823      	ldr	r3, [r4, #0]
 800cc54:	055a      	lsls	r2, r3, #21
 800cc56:	d407      	bmi.n	800cc68 <_printf_float+0x1c0>
 800cc58:	6923      	ldr	r3, [r4, #16]
 800cc5a:	4642      	mov	r2, r8
 800cc5c:	4631      	mov	r1, r6
 800cc5e:	4628      	mov	r0, r5
 800cc60:	47b8      	blx	r7
 800cc62:	3001      	adds	r0, #1
 800cc64:	d12a      	bne.n	800ccbc <_printf_float+0x214>
 800cc66:	e76b      	b.n	800cb40 <_printf_float+0x98>
 800cc68:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800cc6c:	f240 80e0 	bls.w	800ce30 <_printf_float+0x388>
 800cc70:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800cc74:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cc78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc7c:	d133      	bne.n	800cce6 <_printf_float+0x23e>
 800cc7e:	4a38      	ldr	r2, [pc, #224]	@ (800cd60 <_printf_float+0x2b8>)
 800cc80:	2301      	movs	r3, #1
 800cc82:	4631      	mov	r1, r6
 800cc84:	4628      	mov	r0, r5
 800cc86:	47b8      	blx	r7
 800cc88:	3001      	adds	r0, #1
 800cc8a:	f43f af59 	beq.w	800cb40 <_printf_float+0x98>
 800cc8e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cc92:	4543      	cmp	r3, r8
 800cc94:	db02      	blt.n	800cc9c <_printf_float+0x1f4>
 800cc96:	6823      	ldr	r3, [r4, #0]
 800cc98:	07d8      	lsls	r0, r3, #31
 800cc9a:	d50f      	bpl.n	800ccbc <_printf_float+0x214>
 800cc9c:	9b05      	ldr	r3, [sp, #20]
 800cc9e:	465a      	mov	r2, fp
 800cca0:	4631      	mov	r1, r6
 800cca2:	4628      	mov	r0, r5
 800cca4:	47b8      	blx	r7
 800cca6:	3001      	adds	r0, #1
 800cca8:	f43f af4a 	beq.w	800cb40 <_printf_float+0x98>
 800ccac:	f04f 0900 	mov.w	r9, #0
 800ccb0:	f108 38ff 	add.w	r8, r8, #4294967295
 800ccb4:	f104 0a1a 	add.w	sl, r4, #26
 800ccb8:	45c8      	cmp	r8, r9
 800ccba:	dc09      	bgt.n	800ccd0 <_printf_float+0x228>
 800ccbc:	6823      	ldr	r3, [r4, #0]
 800ccbe:	079b      	lsls	r3, r3, #30
 800ccc0:	f100 8107 	bmi.w	800ced2 <_printf_float+0x42a>
 800ccc4:	68e0      	ldr	r0, [r4, #12]
 800ccc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ccc8:	4298      	cmp	r0, r3
 800ccca:	bfb8      	it	lt
 800cccc:	4618      	movlt	r0, r3
 800ccce:	e739      	b.n	800cb44 <_printf_float+0x9c>
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	4652      	mov	r2, sl
 800ccd4:	4631      	mov	r1, r6
 800ccd6:	4628      	mov	r0, r5
 800ccd8:	47b8      	blx	r7
 800ccda:	3001      	adds	r0, #1
 800ccdc:	f43f af30 	beq.w	800cb40 <_printf_float+0x98>
 800cce0:	f109 0901 	add.w	r9, r9, #1
 800cce4:	e7e8      	b.n	800ccb8 <_printf_float+0x210>
 800cce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	dc3b      	bgt.n	800cd64 <_printf_float+0x2bc>
 800ccec:	4a1c      	ldr	r2, [pc, #112]	@ (800cd60 <_printf_float+0x2b8>)
 800ccee:	2301      	movs	r3, #1
 800ccf0:	4631      	mov	r1, r6
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	47b8      	blx	r7
 800ccf6:	3001      	adds	r0, #1
 800ccf8:	f43f af22 	beq.w	800cb40 <_printf_float+0x98>
 800ccfc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cd00:	ea59 0303 	orrs.w	r3, r9, r3
 800cd04:	d102      	bne.n	800cd0c <_printf_float+0x264>
 800cd06:	6823      	ldr	r3, [r4, #0]
 800cd08:	07d9      	lsls	r1, r3, #31
 800cd0a:	d5d7      	bpl.n	800ccbc <_printf_float+0x214>
 800cd0c:	9b05      	ldr	r3, [sp, #20]
 800cd0e:	465a      	mov	r2, fp
 800cd10:	4631      	mov	r1, r6
 800cd12:	4628      	mov	r0, r5
 800cd14:	47b8      	blx	r7
 800cd16:	3001      	adds	r0, #1
 800cd18:	f43f af12 	beq.w	800cb40 <_printf_float+0x98>
 800cd1c:	f04f 0a00 	mov.w	sl, #0
 800cd20:	f104 0b1a 	add.w	fp, r4, #26
 800cd24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd26:	425b      	negs	r3, r3
 800cd28:	4553      	cmp	r3, sl
 800cd2a:	dc01      	bgt.n	800cd30 <_printf_float+0x288>
 800cd2c:	464b      	mov	r3, r9
 800cd2e:	e794      	b.n	800cc5a <_printf_float+0x1b2>
 800cd30:	2301      	movs	r3, #1
 800cd32:	465a      	mov	r2, fp
 800cd34:	4631      	mov	r1, r6
 800cd36:	4628      	mov	r0, r5
 800cd38:	47b8      	blx	r7
 800cd3a:	3001      	adds	r0, #1
 800cd3c:	f43f af00 	beq.w	800cb40 <_printf_float+0x98>
 800cd40:	f10a 0a01 	add.w	sl, sl, #1
 800cd44:	e7ee      	b.n	800cd24 <_printf_float+0x27c>
 800cd46:	bf00      	nop
 800cd48:	ffffffff 	.word	0xffffffff
 800cd4c:	7fefffff 	.word	0x7fefffff
 800cd50:	0800fd58 	.word	0x0800fd58
 800cd54:	0800fd5c 	.word	0x0800fd5c
 800cd58:	0800fd60 	.word	0x0800fd60
 800cd5c:	0800fd64 	.word	0x0800fd64
 800cd60:	0800fd68 	.word	0x0800fd68
 800cd64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cd66:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cd6a:	4553      	cmp	r3, sl
 800cd6c:	bfa8      	it	ge
 800cd6e:	4653      	movge	r3, sl
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	4699      	mov	r9, r3
 800cd74:	dc37      	bgt.n	800cde6 <_printf_float+0x33e>
 800cd76:	2300      	movs	r3, #0
 800cd78:	9307      	str	r3, [sp, #28]
 800cd7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd7e:	f104 021a 	add.w	r2, r4, #26
 800cd82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cd84:	9907      	ldr	r1, [sp, #28]
 800cd86:	9306      	str	r3, [sp, #24]
 800cd88:	eba3 0309 	sub.w	r3, r3, r9
 800cd8c:	428b      	cmp	r3, r1
 800cd8e:	dc31      	bgt.n	800cdf4 <_printf_float+0x34c>
 800cd90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd92:	459a      	cmp	sl, r3
 800cd94:	dc3b      	bgt.n	800ce0e <_printf_float+0x366>
 800cd96:	6823      	ldr	r3, [r4, #0]
 800cd98:	07da      	lsls	r2, r3, #31
 800cd9a:	d438      	bmi.n	800ce0e <_printf_float+0x366>
 800cd9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd9e:	ebaa 0903 	sub.w	r9, sl, r3
 800cda2:	9b06      	ldr	r3, [sp, #24]
 800cda4:	ebaa 0303 	sub.w	r3, sl, r3
 800cda8:	4599      	cmp	r9, r3
 800cdaa:	bfa8      	it	ge
 800cdac:	4699      	movge	r9, r3
 800cdae:	f1b9 0f00 	cmp.w	r9, #0
 800cdb2:	dc34      	bgt.n	800ce1e <_printf_float+0x376>
 800cdb4:	f04f 0800 	mov.w	r8, #0
 800cdb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cdbc:	f104 0b1a 	add.w	fp, r4, #26
 800cdc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdc2:	ebaa 0303 	sub.w	r3, sl, r3
 800cdc6:	eba3 0309 	sub.w	r3, r3, r9
 800cdca:	4543      	cmp	r3, r8
 800cdcc:	f77f af76 	ble.w	800ccbc <_printf_float+0x214>
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	465a      	mov	r2, fp
 800cdd4:	4631      	mov	r1, r6
 800cdd6:	4628      	mov	r0, r5
 800cdd8:	47b8      	blx	r7
 800cdda:	3001      	adds	r0, #1
 800cddc:	f43f aeb0 	beq.w	800cb40 <_printf_float+0x98>
 800cde0:	f108 0801 	add.w	r8, r8, #1
 800cde4:	e7ec      	b.n	800cdc0 <_printf_float+0x318>
 800cde6:	4642      	mov	r2, r8
 800cde8:	4631      	mov	r1, r6
 800cdea:	4628      	mov	r0, r5
 800cdec:	47b8      	blx	r7
 800cdee:	3001      	adds	r0, #1
 800cdf0:	d1c1      	bne.n	800cd76 <_printf_float+0x2ce>
 800cdf2:	e6a5      	b.n	800cb40 <_printf_float+0x98>
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	4631      	mov	r1, r6
 800cdf8:	4628      	mov	r0, r5
 800cdfa:	9206      	str	r2, [sp, #24]
 800cdfc:	47b8      	blx	r7
 800cdfe:	3001      	adds	r0, #1
 800ce00:	f43f ae9e 	beq.w	800cb40 <_printf_float+0x98>
 800ce04:	9b07      	ldr	r3, [sp, #28]
 800ce06:	9a06      	ldr	r2, [sp, #24]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	9307      	str	r3, [sp, #28]
 800ce0c:	e7b9      	b.n	800cd82 <_printf_float+0x2da>
 800ce0e:	9b05      	ldr	r3, [sp, #20]
 800ce10:	465a      	mov	r2, fp
 800ce12:	4631      	mov	r1, r6
 800ce14:	4628      	mov	r0, r5
 800ce16:	47b8      	blx	r7
 800ce18:	3001      	adds	r0, #1
 800ce1a:	d1bf      	bne.n	800cd9c <_printf_float+0x2f4>
 800ce1c:	e690      	b.n	800cb40 <_printf_float+0x98>
 800ce1e:	9a06      	ldr	r2, [sp, #24]
 800ce20:	464b      	mov	r3, r9
 800ce22:	4442      	add	r2, r8
 800ce24:	4631      	mov	r1, r6
 800ce26:	4628      	mov	r0, r5
 800ce28:	47b8      	blx	r7
 800ce2a:	3001      	adds	r0, #1
 800ce2c:	d1c2      	bne.n	800cdb4 <_printf_float+0x30c>
 800ce2e:	e687      	b.n	800cb40 <_printf_float+0x98>
 800ce30:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800ce34:	f1b9 0f01 	cmp.w	r9, #1
 800ce38:	dc01      	bgt.n	800ce3e <_printf_float+0x396>
 800ce3a:	07db      	lsls	r3, r3, #31
 800ce3c:	d536      	bpl.n	800ceac <_printf_float+0x404>
 800ce3e:	2301      	movs	r3, #1
 800ce40:	4642      	mov	r2, r8
 800ce42:	4631      	mov	r1, r6
 800ce44:	4628      	mov	r0, r5
 800ce46:	47b8      	blx	r7
 800ce48:	3001      	adds	r0, #1
 800ce4a:	f43f ae79 	beq.w	800cb40 <_printf_float+0x98>
 800ce4e:	9b05      	ldr	r3, [sp, #20]
 800ce50:	465a      	mov	r2, fp
 800ce52:	4631      	mov	r1, r6
 800ce54:	4628      	mov	r0, r5
 800ce56:	47b8      	blx	r7
 800ce58:	3001      	adds	r0, #1
 800ce5a:	f43f ae71 	beq.w	800cb40 <_printf_float+0x98>
 800ce5e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ce62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ce66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce6a:	f109 39ff 	add.w	r9, r9, #4294967295
 800ce6e:	d018      	beq.n	800cea2 <_printf_float+0x3fa>
 800ce70:	464b      	mov	r3, r9
 800ce72:	f108 0201 	add.w	r2, r8, #1
 800ce76:	4631      	mov	r1, r6
 800ce78:	4628      	mov	r0, r5
 800ce7a:	47b8      	blx	r7
 800ce7c:	3001      	adds	r0, #1
 800ce7e:	d10c      	bne.n	800ce9a <_printf_float+0x3f2>
 800ce80:	e65e      	b.n	800cb40 <_printf_float+0x98>
 800ce82:	2301      	movs	r3, #1
 800ce84:	465a      	mov	r2, fp
 800ce86:	4631      	mov	r1, r6
 800ce88:	4628      	mov	r0, r5
 800ce8a:	47b8      	blx	r7
 800ce8c:	3001      	adds	r0, #1
 800ce8e:	f43f ae57 	beq.w	800cb40 <_printf_float+0x98>
 800ce92:	f108 0801 	add.w	r8, r8, #1
 800ce96:	45c8      	cmp	r8, r9
 800ce98:	dbf3      	blt.n	800ce82 <_printf_float+0x3da>
 800ce9a:	4653      	mov	r3, sl
 800ce9c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cea0:	e6dc      	b.n	800cc5c <_printf_float+0x1b4>
 800cea2:	f04f 0800 	mov.w	r8, #0
 800cea6:	f104 0b1a 	add.w	fp, r4, #26
 800ceaa:	e7f4      	b.n	800ce96 <_printf_float+0x3ee>
 800ceac:	2301      	movs	r3, #1
 800ceae:	4642      	mov	r2, r8
 800ceb0:	e7e1      	b.n	800ce76 <_printf_float+0x3ce>
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	464a      	mov	r2, r9
 800ceb6:	4631      	mov	r1, r6
 800ceb8:	4628      	mov	r0, r5
 800ceba:	47b8      	blx	r7
 800cebc:	3001      	adds	r0, #1
 800cebe:	f43f ae3f 	beq.w	800cb40 <_printf_float+0x98>
 800cec2:	f108 0801 	add.w	r8, r8, #1
 800cec6:	68e3      	ldr	r3, [r4, #12]
 800cec8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ceca:	1a5b      	subs	r3, r3, r1
 800cecc:	4543      	cmp	r3, r8
 800cece:	dcf0      	bgt.n	800ceb2 <_printf_float+0x40a>
 800ced0:	e6f8      	b.n	800ccc4 <_printf_float+0x21c>
 800ced2:	f04f 0800 	mov.w	r8, #0
 800ced6:	f104 0919 	add.w	r9, r4, #25
 800ceda:	e7f4      	b.n	800cec6 <_printf_float+0x41e>

0800cedc <_printf_common>:
 800cedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cee0:	4616      	mov	r6, r2
 800cee2:	4698      	mov	r8, r3
 800cee4:	688a      	ldr	r2, [r1, #8]
 800cee6:	690b      	ldr	r3, [r1, #16]
 800cee8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ceec:	4293      	cmp	r3, r2
 800ceee:	bfb8      	it	lt
 800cef0:	4613      	movlt	r3, r2
 800cef2:	6033      	str	r3, [r6, #0]
 800cef4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cef8:	4607      	mov	r7, r0
 800cefa:	460c      	mov	r4, r1
 800cefc:	b10a      	cbz	r2, 800cf02 <_printf_common+0x26>
 800cefe:	3301      	adds	r3, #1
 800cf00:	6033      	str	r3, [r6, #0]
 800cf02:	6823      	ldr	r3, [r4, #0]
 800cf04:	0699      	lsls	r1, r3, #26
 800cf06:	bf42      	ittt	mi
 800cf08:	6833      	ldrmi	r3, [r6, #0]
 800cf0a:	3302      	addmi	r3, #2
 800cf0c:	6033      	strmi	r3, [r6, #0]
 800cf0e:	6825      	ldr	r5, [r4, #0]
 800cf10:	f015 0506 	ands.w	r5, r5, #6
 800cf14:	d106      	bne.n	800cf24 <_printf_common+0x48>
 800cf16:	f104 0a19 	add.w	sl, r4, #25
 800cf1a:	68e3      	ldr	r3, [r4, #12]
 800cf1c:	6832      	ldr	r2, [r6, #0]
 800cf1e:	1a9b      	subs	r3, r3, r2
 800cf20:	42ab      	cmp	r3, r5
 800cf22:	dc26      	bgt.n	800cf72 <_printf_common+0x96>
 800cf24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cf28:	6822      	ldr	r2, [r4, #0]
 800cf2a:	3b00      	subs	r3, #0
 800cf2c:	bf18      	it	ne
 800cf2e:	2301      	movne	r3, #1
 800cf30:	0692      	lsls	r2, r2, #26
 800cf32:	d42b      	bmi.n	800cf8c <_printf_common+0xb0>
 800cf34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cf38:	4641      	mov	r1, r8
 800cf3a:	4638      	mov	r0, r7
 800cf3c:	47c8      	blx	r9
 800cf3e:	3001      	adds	r0, #1
 800cf40:	d01e      	beq.n	800cf80 <_printf_common+0xa4>
 800cf42:	6823      	ldr	r3, [r4, #0]
 800cf44:	6922      	ldr	r2, [r4, #16]
 800cf46:	f003 0306 	and.w	r3, r3, #6
 800cf4a:	2b04      	cmp	r3, #4
 800cf4c:	bf02      	ittt	eq
 800cf4e:	68e5      	ldreq	r5, [r4, #12]
 800cf50:	6833      	ldreq	r3, [r6, #0]
 800cf52:	1aed      	subeq	r5, r5, r3
 800cf54:	68a3      	ldr	r3, [r4, #8]
 800cf56:	bf0c      	ite	eq
 800cf58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf5c:	2500      	movne	r5, #0
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	bfc4      	itt	gt
 800cf62:	1a9b      	subgt	r3, r3, r2
 800cf64:	18ed      	addgt	r5, r5, r3
 800cf66:	2600      	movs	r6, #0
 800cf68:	341a      	adds	r4, #26
 800cf6a:	42b5      	cmp	r5, r6
 800cf6c:	d11a      	bne.n	800cfa4 <_printf_common+0xc8>
 800cf6e:	2000      	movs	r0, #0
 800cf70:	e008      	b.n	800cf84 <_printf_common+0xa8>
 800cf72:	2301      	movs	r3, #1
 800cf74:	4652      	mov	r2, sl
 800cf76:	4641      	mov	r1, r8
 800cf78:	4638      	mov	r0, r7
 800cf7a:	47c8      	blx	r9
 800cf7c:	3001      	adds	r0, #1
 800cf7e:	d103      	bne.n	800cf88 <_printf_common+0xac>
 800cf80:	f04f 30ff 	mov.w	r0, #4294967295
 800cf84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf88:	3501      	adds	r5, #1
 800cf8a:	e7c6      	b.n	800cf1a <_printf_common+0x3e>
 800cf8c:	18e1      	adds	r1, r4, r3
 800cf8e:	1c5a      	adds	r2, r3, #1
 800cf90:	2030      	movs	r0, #48	@ 0x30
 800cf92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cf96:	4422      	add	r2, r4
 800cf98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cf9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cfa0:	3302      	adds	r3, #2
 800cfa2:	e7c7      	b.n	800cf34 <_printf_common+0x58>
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	4622      	mov	r2, r4
 800cfa8:	4641      	mov	r1, r8
 800cfaa:	4638      	mov	r0, r7
 800cfac:	47c8      	blx	r9
 800cfae:	3001      	adds	r0, #1
 800cfb0:	d0e6      	beq.n	800cf80 <_printf_common+0xa4>
 800cfb2:	3601      	adds	r6, #1
 800cfb4:	e7d9      	b.n	800cf6a <_printf_common+0x8e>
	...

0800cfb8 <_printf_i>:
 800cfb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfbc:	7e0f      	ldrb	r7, [r1, #24]
 800cfbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cfc0:	2f78      	cmp	r7, #120	@ 0x78
 800cfc2:	4691      	mov	r9, r2
 800cfc4:	4680      	mov	r8, r0
 800cfc6:	460c      	mov	r4, r1
 800cfc8:	469a      	mov	sl, r3
 800cfca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cfce:	d807      	bhi.n	800cfe0 <_printf_i+0x28>
 800cfd0:	2f62      	cmp	r7, #98	@ 0x62
 800cfd2:	d80a      	bhi.n	800cfea <_printf_i+0x32>
 800cfd4:	2f00      	cmp	r7, #0
 800cfd6:	f000 80d2 	beq.w	800d17e <_printf_i+0x1c6>
 800cfda:	2f58      	cmp	r7, #88	@ 0x58
 800cfdc:	f000 80b9 	beq.w	800d152 <_printf_i+0x19a>
 800cfe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cfe4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cfe8:	e03a      	b.n	800d060 <_printf_i+0xa8>
 800cfea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cfee:	2b15      	cmp	r3, #21
 800cff0:	d8f6      	bhi.n	800cfe0 <_printf_i+0x28>
 800cff2:	a101      	add	r1, pc, #4	@ (adr r1, 800cff8 <_printf_i+0x40>)
 800cff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cff8:	0800d051 	.word	0x0800d051
 800cffc:	0800d065 	.word	0x0800d065
 800d000:	0800cfe1 	.word	0x0800cfe1
 800d004:	0800cfe1 	.word	0x0800cfe1
 800d008:	0800cfe1 	.word	0x0800cfe1
 800d00c:	0800cfe1 	.word	0x0800cfe1
 800d010:	0800d065 	.word	0x0800d065
 800d014:	0800cfe1 	.word	0x0800cfe1
 800d018:	0800cfe1 	.word	0x0800cfe1
 800d01c:	0800cfe1 	.word	0x0800cfe1
 800d020:	0800cfe1 	.word	0x0800cfe1
 800d024:	0800d165 	.word	0x0800d165
 800d028:	0800d08f 	.word	0x0800d08f
 800d02c:	0800d11f 	.word	0x0800d11f
 800d030:	0800cfe1 	.word	0x0800cfe1
 800d034:	0800cfe1 	.word	0x0800cfe1
 800d038:	0800d187 	.word	0x0800d187
 800d03c:	0800cfe1 	.word	0x0800cfe1
 800d040:	0800d08f 	.word	0x0800d08f
 800d044:	0800cfe1 	.word	0x0800cfe1
 800d048:	0800cfe1 	.word	0x0800cfe1
 800d04c:	0800d127 	.word	0x0800d127
 800d050:	6833      	ldr	r3, [r6, #0]
 800d052:	1d1a      	adds	r2, r3, #4
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	6032      	str	r2, [r6, #0]
 800d058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d05c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d060:	2301      	movs	r3, #1
 800d062:	e09d      	b.n	800d1a0 <_printf_i+0x1e8>
 800d064:	6833      	ldr	r3, [r6, #0]
 800d066:	6820      	ldr	r0, [r4, #0]
 800d068:	1d19      	adds	r1, r3, #4
 800d06a:	6031      	str	r1, [r6, #0]
 800d06c:	0606      	lsls	r6, r0, #24
 800d06e:	d501      	bpl.n	800d074 <_printf_i+0xbc>
 800d070:	681d      	ldr	r5, [r3, #0]
 800d072:	e003      	b.n	800d07c <_printf_i+0xc4>
 800d074:	0645      	lsls	r5, r0, #25
 800d076:	d5fb      	bpl.n	800d070 <_printf_i+0xb8>
 800d078:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d07c:	2d00      	cmp	r5, #0
 800d07e:	da03      	bge.n	800d088 <_printf_i+0xd0>
 800d080:	232d      	movs	r3, #45	@ 0x2d
 800d082:	426d      	negs	r5, r5
 800d084:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d088:	4859      	ldr	r0, [pc, #356]	@ (800d1f0 <_printf_i+0x238>)
 800d08a:	230a      	movs	r3, #10
 800d08c:	e011      	b.n	800d0b2 <_printf_i+0xfa>
 800d08e:	6821      	ldr	r1, [r4, #0]
 800d090:	6833      	ldr	r3, [r6, #0]
 800d092:	0608      	lsls	r0, r1, #24
 800d094:	f853 5b04 	ldr.w	r5, [r3], #4
 800d098:	d402      	bmi.n	800d0a0 <_printf_i+0xe8>
 800d09a:	0649      	lsls	r1, r1, #25
 800d09c:	bf48      	it	mi
 800d09e:	b2ad      	uxthmi	r5, r5
 800d0a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800d0a2:	4853      	ldr	r0, [pc, #332]	@ (800d1f0 <_printf_i+0x238>)
 800d0a4:	6033      	str	r3, [r6, #0]
 800d0a6:	bf14      	ite	ne
 800d0a8:	230a      	movne	r3, #10
 800d0aa:	2308      	moveq	r3, #8
 800d0ac:	2100      	movs	r1, #0
 800d0ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d0b2:	6866      	ldr	r6, [r4, #4]
 800d0b4:	60a6      	str	r6, [r4, #8]
 800d0b6:	2e00      	cmp	r6, #0
 800d0b8:	bfa2      	ittt	ge
 800d0ba:	6821      	ldrge	r1, [r4, #0]
 800d0bc:	f021 0104 	bicge.w	r1, r1, #4
 800d0c0:	6021      	strge	r1, [r4, #0]
 800d0c2:	b90d      	cbnz	r5, 800d0c8 <_printf_i+0x110>
 800d0c4:	2e00      	cmp	r6, #0
 800d0c6:	d04b      	beq.n	800d160 <_printf_i+0x1a8>
 800d0c8:	4616      	mov	r6, r2
 800d0ca:	fbb5 f1f3 	udiv	r1, r5, r3
 800d0ce:	fb03 5711 	mls	r7, r3, r1, r5
 800d0d2:	5dc7      	ldrb	r7, [r0, r7]
 800d0d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d0d8:	462f      	mov	r7, r5
 800d0da:	42bb      	cmp	r3, r7
 800d0dc:	460d      	mov	r5, r1
 800d0de:	d9f4      	bls.n	800d0ca <_printf_i+0x112>
 800d0e0:	2b08      	cmp	r3, #8
 800d0e2:	d10b      	bne.n	800d0fc <_printf_i+0x144>
 800d0e4:	6823      	ldr	r3, [r4, #0]
 800d0e6:	07df      	lsls	r7, r3, #31
 800d0e8:	d508      	bpl.n	800d0fc <_printf_i+0x144>
 800d0ea:	6923      	ldr	r3, [r4, #16]
 800d0ec:	6861      	ldr	r1, [r4, #4]
 800d0ee:	4299      	cmp	r1, r3
 800d0f0:	bfde      	ittt	le
 800d0f2:	2330      	movle	r3, #48	@ 0x30
 800d0f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d0f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d0fc:	1b92      	subs	r2, r2, r6
 800d0fe:	6122      	str	r2, [r4, #16]
 800d100:	f8cd a000 	str.w	sl, [sp]
 800d104:	464b      	mov	r3, r9
 800d106:	aa03      	add	r2, sp, #12
 800d108:	4621      	mov	r1, r4
 800d10a:	4640      	mov	r0, r8
 800d10c:	f7ff fee6 	bl	800cedc <_printf_common>
 800d110:	3001      	adds	r0, #1
 800d112:	d14a      	bne.n	800d1aa <_printf_i+0x1f2>
 800d114:	f04f 30ff 	mov.w	r0, #4294967295
 800d118:	b004      	add	sp, #16
 800d11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d11e:	6823      	ldr	r3, [r4, #0]
 800d120:	f043 0320 	orr.w	r3, r3, #32
 800d124:	6023      	str	r3, [r4, #0]
 800d126:	4833      	ldr	r0, [pc, #204]	@ (800d1f4 <_printf_i+0x23c>)
 800d128:	2778      	movs	r7, #120	@ 0x78
 800d12a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d12e:	6823      	ldr	r3, [r4, #0]
 800d130:	6831      	ldr	r1, [r6, #0]
 800d132:	061f      	lsls	r7, r3, #24
 800d134:	f851 5b04 	ldr.w	r5, [r1], #4
 800d138:	d402      	bmi.n	800d140 <_printf_i+0x188>
 800d13a:	065f      	lsls	r7, r3, #25
 800d13c:	bf48      	it	mi
 800d13e:	b2ad      	uxthmi	r5, r5
 800d140:	6031      	str	r1, [r6, #0]
 800d142:	07d9      	lsls	r1, r3, #31
 800d144:	bf44      	itt	mi
 800d146:	f043 0320 	orrmi.w	r3, r3, #32
 800d14a:	6023      	strmi	r3, [r4, #0]
 800d14c:	b11d      	cbz	r5, 800d156 <_printf_i+0x19e>
 800d14e:	2310      	movs	r3, #16
 800d150:	e7ac      	b.n	800d0ac <_printf_i+0xf4>
 800d152:	4827      	ldr	r0, [pc, #156]	@ (800d1f0 <_printf_i+0x238>)
 800d154:	e7e9      	b.n	800d12a <_printf_i+0x172>
 800d156:	6823      	ldr	r3, [r4, #0]
 800d158:	f023 0320 	bic.w	r3, r3, #32
 800d15c:	6023      	str	r3, [r4, #0]
 800d15e:	e7f6      	b.n	800d14e <_printf_i+0x196>
 800d160:	4616      	mov	r6, r2
 800d162:	e7bd      	b.n	800d0e0 <_printf_i+0x128>
 800d164:	6833      	ldr	r3, [r6, #0]
 800d166:	6825      	ldr	r5, [r4, #0]
 800d168:	6961      	ldr	r1, [r4, #20]
 800d16a:	1d18      	adds	r0, r3, #4
 800d16c:	6030      	str	r0, [r6, #0]
 800d16e:	062e      	lsls	r6, r5, #24
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	d501      	bpl.n	800d178 <_printf_i+0x1c0>
 800d174:	6019      	str	r1, [r3, #0]
 800d176:	e002      	b.n	800d17e <_printf_i+0x1c6>
 800d178:	0668      	lsls	r0, r5, #25
 800d17a:	d5fb      	bpl.n	800d174 <_printf_i+0x1bc>
 800d17c:	8019      	strh	r1, [r3, #0]
 800d17e:	2300      	movs	r3, #0
 800d180:	6123      	str	r3, [r4, #16]
 800d182:	4616      	mov	r6, r2
 800d184:	e7bc      	b.n	800d100 <_printf_i+0x148>
 800d186:	6833      	ldr	r3, [r6, #0]
 800d188:	1d1a      	adds	r2, r3, #4
 800d18a:	6032      	str	r2, [r6, #0]
 800d18c:	681e      	ldr	r6, [r3, #0]
 800d18e:	6862      	ldr	r2, [r4, #4]
 800d190:	2100      	movs	r1, #0
 800d192:	4630      	mov	r0, r6
 800d194:	f7f3 f8a4 	bl	80002e0 <memchr>
 800d198:	b108      	cbz	r0, 800d19e <_printf_i+0x1e6>
 800d19a:	1b80      	subs	r0, r0, r6
 800d19c:	6060      	str	r0, [r4, #4]
 800d19e:	6863      	ldr	r3, [r4, #4]
 800d1a0:	6123      	str	r3, [r4, #16]
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d1a8:	e7aa      	b.n	800d100 <_printf_i+0x148>
 800d1aa:	6923      	ldr	r3, [r4, #16]
 800d1ac:	4632      	mov	r2, r6
 800d1ae:	4649      	mov	r1, r9
 800d1b0:	4640      	mov	r0, r8
 800d1b2:	47d0      	blx	sl
 800d1b4:	3001      	adds	r0, #1
 800d1b6:	d0ad      	beq.n	800d114 <_printf_i+0x15c>
 800d1b8:	6823      	ldr	r3, [r4, #0]
 800d1ba:	079b      	lsls	r3, r3, #30
 800d1bc:	d413      	bmi.n	800d1e6 <_printf_i+0x22e>
 800d1be:	68e0      	ldr	r0, [r4, #12]
 800d1c0:	9b03      	ldr	r3, [sp, #12]
 800d1c2:	4298      	cmp	r0, r3
 800d1c4:	bfb8      	it	lt
 800d1c6:	4618      	movlt	r0, r3
 800d1c8:	e7a6      	b.n	800d118 <_printf_i+0x160>
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	4632      	mov	r2, r6
 800d1ce:	4649      	mov	r1, r9
 800d1d0:	4640      	mov	r0, r8
 800d1d2:	47d0      	blx	sl
 800d1d4:	3001      	adds	r0, #1
 800d1d6:	d09d      	beq.n	800d114 <_printf_i+0x15c>
 800d1d8:	3501      	adds	r5, #1
 800d1da:	68e3      	ldr	r3, [r4, #12]
 800d1dc:	9903      	ldr	r1, [sp, #12]
 800d1de:	1a5b      	subs	r3, r3, r1
 800d1e0:	42ab      	cmp	r3, r5
 800d1e2:	dcf2      	bgt.n	800d1ca <_printf_i+0x212>
 800d1e4:	e7eb      	b.n	800d1be <_printf_i+0x206>
 800d1e6:	2500      	movs	r5, #0
 800d1e8:	f104 0619 	add.w	r6, r4, #25
 800d1ec:	e7f5      	b.n	800d1da <_printf_i+0x222>
 800d1ee:	bf00      	nop
 800d1f0:	0800fd6a 	.word	0x0800fd6a
 800d1f4:	0800fd7b 	.word	0x0800fd7b

0800d1f8 <std>:
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	b510      	push	{r4, lr}
 800d1fc:	4604      	mov	r4, r0
 800d1fe:	e9c0 3300 	strd	r3, r3, [r0]
 800d202:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d206:	6083      	str	r3, [r0, #8]
 800d208:	8181      	strh	r1, [r0, #12]
 800d20a:	6643      	str	r3, [r0, #100]	@ 0x64
 800d20c:	81c2      	strh	r2, [r0, #14]
 800d20e:	6183      	str	r3, [r0, #24]
 800d210:	4619      	mov	r1, r3
 800d212:	2208      	movs	r2, #8
 800d214:	305c      	adds	r0, #92	@ 0x5c
 800d216:	f000 f8f4 	bl	800d402 <memset>
 800d21a:	4b0d      	ldr	r3, [pc, #52]	@ (800d250 <std+0x58>)
 800d21c:	6263      	str	r3, [r4, #36]	@ 0x24
 800d21e:	4b0d      	ldr	r3, [pc, #52]	@ (800d254 <std+0x5c>)
 800d220:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d222:	4b0d      	ldr	r3, [pc, #52]	@ (800d258 <std+0x60>)
 800d224:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d226:	4b0d      	ldr	r3, [pc, #52]	@ (800d25c <std+0x64>)
 800d228:	6323      	str	r3, [r4, #48]	@ 0x30
 800d22a:	4b0d      	ldr	r3, [pc, #52]	@ (800d260 <std+0x68>)
 800d22c:	6224      	str	r4, [r4, #32]
 800d22e:	429c      	cmp	r4, r3
 800d230:	d006      	beq.n	800d240 <std+0x48>
 800d232:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d236:	4294      	cmp	r4, r2
 800d238:	d002      	beq.n	800d240 <std+0x48>
 800d23a:	33d0      	adds	r3, #208	@ 0xd0
 800d23c:	429c      	cmp	r4, r3
 800d23e:	d105      	bne.n	800d24c <std+0x54>
 800d240:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d248:	f000 b958 	b.w	800d4fc <__retarget_lock_init_recursive>
 800d24c:	bd10      	pop	{r4, pc}
 800d24e:	bf00      	nop
 800d250:	0800d37d 	.word	0x0800d37d
 800d254:	0800d39f 	.word	0x0800d39f
 800d258:	0800d3d7 	.word	0x0800d3d7
 800d25c:	0800d3fb 	.word	0x0800d3fb
 800d260:	240026e8 	.word	0x240026e8

0800d264 <stdio_exit_handler>:
 800d264:	4a02      	ldr	r2, [pc, #8]	@ (800d270 <stdio_exit_handler+0xc>)
 800d266:	4903      	ldr	r1, [pc, #12]	@ (800d274 <stdio_exit_handler+0x10>)
 800d268:	4803      	ldr	r0, [pc, #12]	@ (800d278 <stdio_exit_handler+0x14>)
 800d26a:	f000 b869 	b.w	800d340 <_fwalk_sglue>
 800d26e:	bf00      	nop
 800d270:	24000018 	.word	0x24000018
 800d274:	0800ead1 	.word	0x0800ead1
 800d278:	24000028 	.word	0x24000028

0800d27c <cleanup_stdio>:
 800d27c:	6841      	ldr	r1, [r0, #4]
 800d27e:	4b0c      	ldr	r3, [pc, #48]	@ (800d2b0 <cleanup_stdio+0x34>)
 800d280:	4299      	cmp	r1, r3
 800d282:	b510      	push	{r4, lr}
 800d284:	4604      	mov	r4, r0
 800d286:	d001      	beq.n	800d28c <cleanup_stdio+0x10>
 800d288:	f001 fc22 	bl	800ead0 <_fflush_r>
 800d28c:	68a1      	ldr	r1, [r4, #8]
 800d28e:	4b09      	ldr	r3, [pc, #36]	@ (800d2b4 <cleanup_stdio+0x38>)
 800d290:	4299      	cmp	r1, r3
 800d292:	d002      	beq.n	800d29a <cleanup_stdio+0x1e>
 800d294:	4620      	mov	r0, r4
 800d296:	f001 fc1b 	bl	800ead0 <_fflush_r>
 800d29a:	68e1      	ldr	r1, [r4, #12]
 800d29c:	4b06      	ldr	r3, [pc, #24]	@ (800d2b8 <cleanup_stdio+0x3c>)
 800d29e:	4299      	cmp	r1, r3
 800d2a0:	d004      	beq.n	800d2ac <cleanup_stdio+0x30>
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2a8:	f001 bc12 	b.w	800ead0 <_fflush_r>
 800d2ac:	bd10      	pop	{r4, pc}
 800d2ae:	bf00      	nop
 800d2b0:	240026e8 	.word	0x240026e8
 800d2b4:	24002750 	.word	0x24002750
 800d2b8:	240027b8 	.word	0x240027b8

0800d2bc <global_stdio_init.part.0>:
 800d2bc:	b510      	push	{r4, lr}
 800d2be:	4b0b      	ldr	r3, [pc, #44]	@ (800d2ec <global_stdio_init.part.0+0x30>)
 800d2c0:	4c0b      	ldr	r4, [pc, #44]	@ (800d2f0 <global_stdio_init.part.0+0x34>)
 800d2c2:	4a0c      	ldr	r2, [pc, #48]	@ (800d2f4 <global_stdio_init.part.0+0x38>)
 800d2c4:	601a      	str	r2, [r3, #0]
 800d2c6:	4620      	mov	r0, r4
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	2104      	movs	r1, #4
 800d2cc:	f7ff ff94 	bl	800d1f8 <std>
 800d2d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	2109      	movs	r1, #9
 800d2d8:	f7ff ff8e 	bl	800d1f8 <std>
 800d2dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d2e0:	2202      	movs	r2, #2
 800d2e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2e6:	2112      	movs	r1, #18
 800d2e8:	f7ff bf86 	b.w	800d1f8 <std>
 800d2ec:	24002820 	.word	0x24002820
 800d2f0:	240026e8 	.word	0x240026e8
 800d2f4:	0800d265 	.word	0x0800d265

0800d2f8 <__sfp_lock_acquire>:
 800d2f8:	4801      	ldr	r0, [pc, #4]	@ (800d300 <__sfp_lock_acquire+0x8>)
 800d2fa:	f000 b900 	b.w	800d4fe <__retarget_lock_acquire_recursive>
 800d2fe:	bf00      	nop
 800d300:	24002829 	.word	0x24002829

0800d304 <__sfp_lock_release>:
 800d304:	4801      	ldr	r0, [pc, #4]	@ (800d30c <__sfp_lock_release+0x8>)
 800d306:	f000 b8fb 	b.w	800d500 <__retarget_lock_release_recursive>
 800d30a:	bf00      	nop
 800d30c:	24002829 	.word	0x24002829

0800d310 <__sinit>:
 800d310:	b510      	push	{r4, lr}
 800d312:	4604      	mov	r4, r0
 800d314:	f7ff fff0 	bl	800d2f8 <__sfp_lock_acquire>
 800d318:	6a23      	ldr	r3, [r4, #32]
 800d31a:	b11b      	cbz	r3, 800d324 <__sinit+0x14>
 800d31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d320:	f7ff bff0 	b.w	800d304 <__sfp_lock_release>
 800d324:	4b04      	ldr	r3, [pc, #16]	@ (800d338 <__sinit+0x28>)
 800d326:	6223      	str	r3, [r4, #32]
 800d328:	4b04      	ldr	r3, [pc, #16]	@ (800d33c <__sinit+0x2c>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d1f5      	bne.n	800d31c <__sinit+0xc>
 800d330:	f7ff ffc4 	bl	800d2bc <global_stdio_init.part.0>
 800d334:	e7f2      	b.n	800d31c <__sinit+0xc>
 800d336:	bf00      	nop
 800d338:	0800d27d 	.word	0x0800d27d
 800d33c:	24002820 	.word	0x24002820

0800d340 <_fwalk_sglue>:
 800d340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d344:	4607      	mov	r7, r0
 800d346:	4688      	mov	r8, r1
 800d348:	4614      	mov	r4, r2
 800d34a:	2600      	movs	r6, #0
 800d34c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d350:	f1b9 0901 	subs.w	r9, r9, #1
 800d354:	d505      	bpl.n	800d362 <_fwalk_sglue+0x22>
 800d356:	6824      	ldr	r4, [r4, #0]
 800d358:	2c00      	cmp	r4, #0
 800d35a:	d1f7      	bne.n	800d34c <_fwalk_sglue+0xc>
 800d35c:	4630      	mov	r0, r6
 800d35e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d362:	89ab      	ldrh	r3, [r5, #12]
 800d364:	2b01      	cmp	r3, #1
 800d366:	d907      	bls.n	800d378 <_fwalk_sglue+0x38>
 800d368:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d36c:	3301      	adds	r3, #1
 800d36e:	d003      	beq.n	800d378 <_fwalk_sglue+0x38>
 800d370:	4629      	mov	r1, r5
 800d372:	4638      	mov	r0, r7
 800d374:	47c0      	blx	r8
 800d376:	4306      	orrs	r6, r0
 800d378:	3568      	adds	r5, #104	@ 0x68
 800d37a:	e7e9      	b.n	800d350 <_fwalk_sglue+0x10>

0800d37c <__sread>:
 800d37c:	b510      	push	{r4, lr}
 800d37e:	460c      	mov	r4, r1
 800d380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d384:	f000 f86c 	bl	800d460 <_read_r>
 800d388:	2800      	cmp	r0, #0
 800d38a:	bfab      	itete	ge
 800d38c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d38e:	89a3      	ldrhlt	r3, [r4, #12]
 800d390:	181b      	addge	r3, r3, r0
 800d392:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d396:	bfac      	ite	ge
 800d398:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d39a:	81a3      	strhlt	r3, [r4, #12]
 800d39c:	bd10      	pop	{r4, pc}

0800d39e <__swrite>:
 800d39e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3a2:	461f      	mov	r7, r3
 800d3a4:	898b      	ldrh	r3, [r1, #12]
 800d3a6:	05db      	lsls	r3, r3, #23
 800d3a8:	4605      	mov	r5, r0
 800d3aa:	460c      	mov	r4, r1
 800d3ac:	4616      	mov	r6, r2
 800d3ae:	d505      	bpl.n	800d3bc <__swrite+0x1e>
 800d3b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3b4:	2302      	movs	r3, #2
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	f000 f840 	bl	800d43c <_lseek_r>
 800d3bc:	89a3      	ldrh	r3, [r4, #12]
 800d3be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d3c6:	81a3      	strh	r3, [r4, #12]
 800d3c8:	4632      	mov	r2, r6
 800d3ca:	463b      	mov	r3, r7
 800d3cc:	4628      	mov	r0, r5
 800d3ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d2:	f000 b857 	b.w	800d484 <_write_r>

0800d3d6 <__sseek>:
 800d3d6:	b510      	push	{r4, lr}
 800d3d8:	460c      	mov	r4, r1
 800d3da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3de:	f000 f82d 	bl	800d43c <_lseek_r>
 800d3e2:	1c43      	adds	r3, r0, #1
 800d3e4:	89a3      	ldrh	r3, [r4, #12]
 800d3e6:	bf15      	itete	ne
 800d3e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d3ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d3ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d3f2:	81a3      	strheq	r3, [r4, #12]
 800d3f4:	bf18      	it	ne
 800d3f6:	81a3      	strhne	r3, [r4, #12]
 800d3f8:	bd10      	pop	{r4, pc}

0800d3fa <__sclose>:
 800d3fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3fe:	f000 b80d 	b.w	800d41c <_close_r>

0800d402 <memset>:
 800d402:	4402      	add	r2, r0
 800d404:	4603      	mov	r3, r0
 800d406:	4293      	cmp	r3, r2
 800d408:	d100      	bne.n	800d40c <memset+0xa>
 800d40a:	4770      	bx	lr
 800d40c:	f803 1b01 	strb.w	r1, [r3], #1
 800d410:	e7f9      	b.n	800d406 <memset+0x4>
	...

0800d414 <_localeconv_r>:
 800d414:	4800      	ldr	r0, [pc, #0]	@ (800d418 <_localeconv_r+0x4>)
 800d416:	4770      	bx	lr
 800d418:	24000164 	.word	0x24000164

0800d41c <_close_r>:
 800d41c:	b538      	push	{r3, r4, r5, lr}
 800d41e:	4d06      	ldr	r5, [pc, #24]	@ (800d438 <_close_r+0x1c>)
 800d420:	2300      	movs	r3, #0
 800d422:	4604      	mov	r4, r0
 800d424:	4608      	mov	r0, r1
 800d426:	602b      	str	r3, [r5, #0]
 800d428:	f7f5 fdaa 	bl	8002f80 <_close>
 800d42c:	1c43      	adds	r3, r0, #1
 800d42e:	d102      	bne.n	800d436 <_close_r+0x1a>
 800d430:	682b      	ldr	r3, [r5, #0]
 800d432:	b103      	cbz	r3, 800d436 <_close_r+0x1a>
 800d434:	6023      	str	r3, [r4, #0]
 800d436:	bd38      	pop	{r3, r4, r5, pc}
 800d438:	24002824 	.word	0x24002824

0800d43c <_lseek_r>:
 800d43c:	b538      	push	{r3, r4, r5, lr}
 800d43e:	4d07      	ldr	r5, [pc, #28]	@ (800d45c <_lseek_r+0x20>)
 800d440:	4604      	mov	r4, r0
 800d442:	4608      	mov	r0, r1
 800d444:	4611      	mov	r1, r2
 800d446:	2200      	movs	r2, #0
 800d448:	602a      	str	r2, [r5, #0]
 800d44a:	461a      	mov	r2, r3
 800d44c:	f7f5 fdbf 	bl	8002fce <_lseek>
 800d450:	1c43      	adds	r3, r0, #1
 800d452:	d102      	bne.n	800d45a <_lseek_r+0x1e>
 800d454:	682b      	ldr	r3, [r5, #0]
 800d456:	b103      	cbz	r3, 800d45a <_lseek_r+0x1e>
 800d458:	6023      	str	r3, [r4, #0]
 800d45a:	bd38      	pop	{r3, r4, r5, pc}
 800d45c:	24002824 	.word	0x24002824

0800d460 <_read_r>:
 800d460:	b538      	push	{r3, r4, r5, lr}
 800d462:	4d07      	ldr	r5, [pc, #28]	@ (800d480 <_read_r+0x20>)
 800d464:	4604      	mov	r4, r0
 800d466:	4608      	mov	r0, r1
 800d468:	4611      	mov	r1, r2
 800d46a:	2200      	movs	r2, #0
 800d46c:	602a      	str	r2, [r5, #0]
 800d46e:	461a      	mov	r2, r3
 800d470:	f7f5 fd4d 	bl	8002f0e <_read>
 800d474:	1c43      	adds	r3, r0, #1
 800d476:	d102      	bne.n	800d47e <_read_r+0x1e>
 800d478:	682b      	ldr	r3, [r5, #0]
 800d47a:	b103      	cbz	r3, 800d47e <_read_r+0x1e>
 800d47c:	6023      	str	r3, [r4, #0]
 800d47e:	bd38      	pop	{r3, r4, r5, pc}
 800d480:	24002824 	.word	0x24002824

0800d484 <_write_r>:
 800d484:	b538      	push	{r3, r4, r5, lr}
 800d486:	4d07      	ldr	r5, [pc, #28]	@ (800d4a4 <_write_r+0x20>)
 800d488:	4604      	mov	r4, r0
 800d48a:	4608      	mov	r0, r1
 800d48c:	4611      	mov	r1, r2
 800d48e:	2200      	movs	r2, #0
 800d490:	602a      	str	r2, [r5, #0]
 800d492:	461a      	mov	r2, r3
 800d494:	f7f5 fd58 	bl	8002f48 <_write>
 800d498:	1c43      	adds	r3, r0, #1
 800d49a:	d102      	bne.n	800d4a2 <_write_r+0x1e>
 800d49c:	682b      	ldr	r3, [r5, #0]
 800d49e:	b103      	cbz	r3, 800d4a2 <_write_r+0x1e>
 800d4a0:	6023      	str	r3, [r4, #0]
 800d4a2:	bd38      	pop	{r3, r4, r5, pc}
 800d4a4:	24002824 	.word	0x24002824

0800d4a8 <__errno>:
 800d4a8:	4b01      	ldr	r3, [pc, #4]	@ (800d4b0 <__errno+0x8>)
 800d4aa:	6818      	ldr	r0, [r3, #0]
 800d4ac:	4770      	bx	lr
 800d4ae:	bf00      	nop
 800d4b0:	24000024 	.word	0x24000024

0800d4b4 <__libc_init_array>:
 800d4b4:	b570      	push	{r4, r5, r6, lr}
 800d4b6:	4d0d      	ldr	r5, [pc, #52]	@ (800d4ec <__libc_init_array+0x38>)
 800d4b8:	4c0d      	ldr	r4, [pc, #52]	@ (800d4f0 <__libc_init_array+0x3c>)
 800d4ba:	1b64      	subs	r4, r4, r5
 800d4bc:	10a4      	asrs	r4, r4, #2
 800d4be:	2600      	movs	r6, #0
 800d4c0:	42a6      	cmp	r6, r4
 800d4c2:	d109      	bne.n	800d4d8 <__libc_init_array+0x24>
 800d4c4:	4d0b      	ldr	r5, [pc, #44]	@ (800d4f4 <__libc_init_array+0x40>)
 800d4c6:	4c0c      	ldr	r4, [pc, #48]	@ (800d4f8 <__libc_init_array+0x44>)
 800d4c8:	f002 fc1e 	bl	800fd08 <_init>
 800d4cc:	1b64      	subs	r4, r4, r5
 800d4ce:	10a4      	asrs	r4, r4, #2
 800d4d0:	2600      	movs	r6, #0
 800d4d2:	42a6      	cmp	r6, r4
 800d4d4:	d105      	bne.n	800d4e2 <__libc_init_array+0x2e>
 800d4d6:	bd70      	pop	{r4, r5, r6, pc}
 800d4d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4dc:	4798      	blx	r3
 800d4de:	3601      	adds	r6, #1
 800d4e0:	e7ee      	b.n	800d4c0 <__libc_init_array+0xc>
 800d4e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4e6:	4798      	blx	r3
 800d4e8:	3601      	adds	r6, #1
 800d4ea:	e7f2      	b.n	800d4d2 <__libc_init_array+0x1e>
 800d4ec:	080102a8 	.word	0x080102a8
 800d4f0:	080102a8 	.word	0x080102a8
 800d4f4:	080102a8 	.word	0x080102a8
 800d4f8:	080102ac 	.word	0x080102ac

0800d4fc <__retarget_lock_init_recursive>:
 800d4fc:	4770      	bx	lr

0800d4fe <__retarget_lock_acquire_recursive>:
 800d4fe:	4770      	bx	lr

0800d500 <__retarget_lock_release_recursive>:
 800d500:	4770      	bx	lr

0800d502 <quorem>:
 800d502:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d506:	6903      	ldr	r3, [r0, #16]
 800d508:	690c      	ldr	r4, [r1, #16]
 800d50a:	42a3      	cmp	r3, r4
 800d50c:	4607      	mov	r7, r0
 800d50e:	db7e      	blt.n	800d60e <quorem+0x10c>
 800d510:	3c01      	subs	r4, #1
 800d512:	f101 0814 	add.w	r8, r1, #20
 800d516:	00a3      	lsls	r3, r4, #2
 800d518:	f100 0514 	add.w	r5, r0, #20
 800d51c:	9300      	str	r3, [sp, #0]
 800d51e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d522:	9301      	str	r3, [sp, #4]
 800d524:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d528:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d52c:	3301      	adds	r3, #1
 800d52e:	429a      	cmp	r2, r3
 800d530:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d534:	fbb2 f6f3 	udiv	r6, r2, r3
 800d538:	d32e      	bcc.n	800d598 <quorem+0x96>
 800d53a:	f04f 0a00 	mov.w	sl, #0
 800d53e:	46c4      	mov	ip, r8
 800d540:	46ae      	mov	lr, r5
 800d542:	46d3      	mov	fp, sl
 800d544:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d548:	b298      	uxth	r0, r3
 800d54a:	fb06 a000 	mla	r0, r6, r0, sl
 800d54e:	0c02      	lsrs	r2, r0, #16
 800d550:	0c1b      	lsrs	r3, r3, #16
 800d552:	fb06 2303 	mla	r3, r6, r3, r2
 800d556:	f8de 2000 	ldr.w	r2, [lr]
 800d55a:	b280      	uxth	r0, r0
 800d55c:	b292      	uxth	r2, r2
 800d55e:	1a12      	subs	r2, r2, r0
 800d560:	445a      	add	r2, fp
 800d562:	f8de 0000 	ldr.w	r0, [lr]
 800d566:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d570:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d574:	b292      	uxth	r2, r2
 800d576:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d57a:	45e1      	cmp	r9, ip
 800d57c:	f84e 2b04 	str.w	r2, [lr], #4
 800d580:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d584:	d2de      	bcs.n	800d544 <quorem+0x42>
 800d586:	9b00      	ldr	r3, [sp, #0]
 800d588:	58eb      	ldr	r3, [r5, r3]
 800d58a:	b92b      	cbnz	r3, 800d598 <quorem+0x96>
 800d58c:	9b01      	ldr	r3, [sp, #4]
 800d58e:	3b04      	subs	r3, #4
 800d590:	429d      	cmp	r5, r3
 800d592:	461a      	mov	r2, r3
 800d594:	d32f      	bcc.n	800d5f6 <quorem+0xf4>
 800d596:	613c      	str	r4, [r7, #16]
 800d598:	4638      	mov	r0, r7
 800d59a:	f001 f90d 	bl	800e7b8 <__mcmp>
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	db25      	blt.n	800d5ee <quorem+0xec>
 800d5a2:	4629      	mov	r1, r5
 800d5a4:	2000      	movs	r0, #0
 800d5a6:	f858 2b04 	ldr.w	r2, [r8], #4
 800d5aa:	f8d1 c000 	ldr.w	ip, [r1]
 800d5ae:	fa1f fe82 	uxth.w	lr, r2
 800d5b2:	fa1f f38c 	uxth.w	r3, ip
 800d5b6:	eba3 030e 	sub.w	r3, r3, lr
 800d5ba:	4403      	add	r3, r0
 800d5bc:	0c12      	lsrs	r2, r2, #16
 800d5be:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d5c2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5cc:	45c1      	cmp	r9, r8
 800d5ce:	f841 3b04 	str.w	r3, [r1], #4
 800d5d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d5d6:	d2e6      	bcs.n	800d5a6 <quorem+0xa4>
 800d5d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d5dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d5e0:	b922      	cbnz	r2, 800d5ec <quorem+0xea>
 800d5e2:	3b04      	subs	r3, #4
 800d5e4:	429d      	cmp	r5, r3
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	d30b      	bcc.n	800d602 <quorem+0x100>
 800d5ea:	613c      	str	r4, [r7, #16]
 800d5ec:	3601      	adds	r6, #1
 800d5ee:	4630      	mov	r0, r6
 800d5f0:	b003      	add	sp, #12
 800d5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5f6:	6812      	ldr	r2, [r2, #0]
 800d5f8:	3b04      	subs	r3, #4
 800d5fa:	2a00      	cmp	r2, #0
 800d5fc:	d1cb      	bne.n	800d596 <quorem+0x94>
 800d5fe:	3c01      	subs	r4, #1
 800d600:	e7c6      	b.n	800d590 <quorem+0x8e>
 800d602:	6812      	ldr	r2, [r2, #0]
 800d604:	3b04      	subs	r3, #4
 800d606:	2a00      	cmp	r2, #0
 800d608:	d1ef      	bne.n	800d5ea <quorem+0xe8>
 800d60a:	3c01      	subs	r4, #1
 800d60c:	e7ea      	b.n	800d5e4 <quorem+0xe2>
 800d60e:	2000      	movs	r0, #0
 800d610:	e7ee      	b.n	800d5f0 <quorem+0xee>
 800d612:	0000      	movs	r0, r0
 800d614:	0000      	movs	r0, r0
	...

0800d618 <_dtoa_r>:
 800d618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d61c:	ed2d 8b02 	vpush	{d8}
 800d620:	69c7      	ldr	r7, [r0, #28]
 800d622:	b091      	sub	sp, #68	@ 0x44
 800d624:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d628:	ec55 4b10 	vmov	r4, r5, d0
 800d62c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800d62e:	9107      	str	r1, [sp, #28]
 800d630:	4681      	mov	r9, r0
 800d632:	9209      	str	r2, [sp, #36]	@ 0x24
 800d634:	930d      	str	r3, [sp, #52]	@ 0x34
 800d636:	b97f      	cbnz	r7, 800d658 <_dtoa_r+0x40>
 800d638:	2010      	movs	r0, #16
 800d63a:	f000 fd8d 	bl	800e158 <malloc>
 800d63e:	4602      	mov	r2, r0
 800d640:	f8c9 001c 	str.w	r0, [r9, #28]
 800d644:	b920      	cbnz	r0, 800d650 <_dtoa_r+0x38>
 800d646:	4ba0      	ldr	r3, [pc, #640]	@ (800d8c8 <_dtoa_r+0x2b0>)
 800d648:	21ef      	movs	r1, #239	@ 0xef
 800d64a:	48a0      	ldr	r0, [pc, #640]	@ (800d8cc <_dtoa_r+0x2b4>)
 800d64c:	f001 fa86 	bl	800eb5c <__assert_func>
 800d650:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d654:	6007      	str	r7, [r0, #0]
 800d656:	60c7      	str	r7, [r0, #12]
 800d658:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d65c:	6819      	ldr	r1, [r3, #0]
 800d65e:	b159      	cbz	r1, 800d678 <_dtoa_r+0x60>
 800d660:	685a      	ldr	r2, [r3, #4]
 800d662:	604a      	str	r2, [r1, #4]
 800d664:	2301      	movs	r3, #1
 800d666:	4093      	lsls	r3, r2
 800d668:	608b      	str	r3, [r1, #8]
 800d66a:	4648      	mov	r0, r9
 800d66c:	f000 fe6a 	bl	800e344 <_Bfree>
 800d670:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d674:	2200      	movs	r2, #0
 800d676:	601a      	str	r2, [r3, #0]
 800d678:	1e2b      	subs	r3, r5, #0
 800d67a:	bfbb      	ittet	lt
 800d67c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d680:	9303      	strlt	r3, [sp, #12]
 800d682:	2300      	movge	r3, #0
 800d684:	2201      	movlt	r2, #1
 800d686:	bfac      	ite	ge
 800d688:	6033      	strge	r3, [r6, #0]
 800d68a:	6032      	strlt	r2, [r6, #0]
 800d68c:	4b90      	ldr	r3, [pc, #576]	@ (800d8d0 <_dtoa_r+0x2b8>)
 800d68e:	9e03      	ldr	r6, [sp, #12]
 800d690:	43b3      	bics	r3, r6
 800d692:	d110      	bne.n	800d6b6 <_dtoa_r+0x9e>
 800d694:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d696:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d69a:	6013      	str	r3, [r2, #0]
 800d69c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800d6a0:	4323      	orrs	r3, r4
 800d6a2:	f000 84de 	beq.w	800e062 <_dtoa_r+0xa4a>
 800d6a6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d6a8:	4f8a      	ldr	r7, [pc, #552]	@ (800d8d4 <_dtoa_r+0x2bc>)
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	f000 84e0 	beq.w	800e070 <_dtoa_r+0xa58>
 800d6b0:	1cfb      	adds	r3, r7, #3
 800d6b2:	f000 bcdb 	b.w	800e06c <_dtoa_r+0xa54>
 800d6b6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d6ba:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d6be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6c2:	d10a      	bne.n	800d6da <_dtoa_r+0xc2>
 800d6c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	6013      	str	r3, [r2, #0]
 800d6ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d6cc:	b113      	cbz	r3, 800d6d4 <_dtoa_r+0xbc>
 800d6ce:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d6d0:	4b81      	ldr	r3, [pc, #516]	@ (800d8d8 <_dtoa_r+0x2c0>)
 800d6d2:	6013      	str	r3, [r2, #0]
 800d6d4:	4f81      	ldr	r7, [pc, #516]	@ (800d8dc <_dtoa_r+0x2c4>)
 800d6d6:	f000 bccb 	b.w	800e070 <_dtoa_r+0xa58>
 800d6da:	aa0e      	add	r2, sp, #56	@ 0x38
 800d6dc:	a90f      	add	r1, sp, #60	@ 0x3c
 800d6de:	4648      	mov	r0, r9
 800d6e0:	eeb0 0b48 	vmov.f64	d0, d8
 800d6e4:	f001 f918 	bl	800e918 <__d2b>
 800d6e8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800d6ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d6ee:	9001      	str	r0, [sp, #4]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d045      	beq.n	800d780 <_dtoa_r+0x168>
 800d6f4:	eeb0 7b48 	vmov.f64	d7, d8
 800d6f8:	ee18 1a90 	vmov	r1, s17
 800d6fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d700:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800d704:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d708:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d70c:	2500      	movs	r5, #0
 800d70e:	ee07 1a90 	vmov	s15, r1
 800d712:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800d716:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d8b0 <_dtoa_r+0x298>
 800d71a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d71e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800d8b8 <_dtoa_r+0x2a0>
 800d722:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d726:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d8c0 <_dtoa_r+0x2a8>
 800d72a:	ee07 3a90 	vmov	s15, r3
 800d72e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d732:	eeb0 7b46 	vmov.f64	d7, d6
 800d736:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d73a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d73e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d746:	ee16 8a90 	vmov	r8, s13
 800d74a:	d508      	bpl.n	800d75e <_dtoa_r+0x146>
 800d74c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d750:	eeb4 6b47 	vcmp.f64	d6, d7
 800d754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d758:	bf18      	it	ne
 800d75a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800d75e:	f1b8 0f16 	cmp.w	r8, #22
 800d762:	d82b      	bhi.n	800d7bc <_dtoa_r+0x1a4>
 800d764:	495e      	ldr	r1, [pc, #376]	@ (800d8e0 <_dtoa_r+0x2c8>)
 800d766:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800d76a:	ed91 7b00 	vldr	d7, [r1]
 800d76e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d776:	d501      	bpl.n	800d77c <_dtoa_r+0x164>
 800d778:	f108 38ff 	add.w	r8, r8, #4294967295
 800d77c:	2100      	movs	r1, #0
 800d77e:	e01e      	b.n	800d7be <_dtoa_r+0x1a6>
 800d780:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d782:	4413      	add	r3, r2
 800d784:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800d788:	2920      	cmp	r1, #32
 800d78a:	bfc1      	itttt	gt
 800d78c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800d790:	408e      	lslgt	r6, r1
 800d792:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800d796:	fa24 f101 	lsrgt.w	r1, r4, r1
 800d79a:	bfd6      	itet	le
 800d79c:	f1c1 0120 	rsble	r1, r1, #32
 800d7a0:	4331      	orrgt	r1, r6
 800d7a2:	fa04 f101 	lslle.w	r1, r4, r1
 800d7a6:	ee07 1a90 	vmov	s15, r1
 800d7aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d7ae:	3b01      	subs	r3, #1
 800d7b0:	ee17 1a90 	vmov	r1, s15
 800d7b4:	2501      	movs	r5, #1
 800d7b6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800d7ba:	e7a8      	b.n	800d70e <_dtoa_r+0xf6>
 800d7bc:	2101      	movs	r1, #1
 800d7be:	1ad2      	subs	r2, r2, r3
 800d7c0:	1e53      	subs	r3, r2, #1
 800d7c2:	9306      	str	r3, [sp, #24]
 800d7c4:	bf45      	ittet	mi
 800d7c6:	f1c2 0301 	rsbmi	r3, r2, #1
 800d7ca:	9305      	strmi	r3, [sp, #20]
 800d7cc:	2300      	movpl	r3, #0
 800d7ce:	2300      	movmi	r3, #0
 800d7d0:	bf4c      	ite	mi
 800d7d2:	9306      	strmi	r3, [sp, #24]
 800d7d4:	9305      	strpl	r3, [sp, #20]
 800d7d6:	f1b8 0f00 	cmp.w	r8, #0
 800d7da:	910c      	str	r1, [sp, #48]	@ 0x30
 800d7dc:	db18      	blt.n	800d810 <_dtoa_r+0x1f8>
 800d7de:	9b06      	ldr	r3, [sp, #24]
 800d7e0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800d7e4:	4443      	add	r3, r8
 800d7e6:	9306      	str	r3, [sp, #24]
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	9a07      	ldr	r2, [sp, #28]
 800d7ec:	2a09      	cmp	r2, #9
 800d7ee:	d849      	bhi.n	800d884 <_dtoa_r+0x26c>
 800d7f0:	2a05      	cmp	r2, #5
 800d7f2:	bfc4      	itt	gt
 800d7f4:	3a04      	subgt	r2, #4
 800d7f6:	9207      	strgt	r2, [sp, #28]
 800d7f8:	9a07      	ldr	r2, [sp, #28]
 800d7fa:	f1a2 0202 	sub.w	r2, r2, #2
 800d7fe:	bfcc      	ite	gt
 800d800:	2400      	movgt	r4, #0
 800d802:	2401      	movle	r4, #1
 800d804:	2a03      	cmp	r2, #3
 800d806:	d848      	bhi.n	800d89a <_dtoa_r+0x282>
 800d808:	e8df f002 	tbb	[pc, r2]
 800d80c:	3a2c2e0b 	.word	0x3a2c2e0b
 800d810:	9b05      	ldr	r3, [sp, #20]
 800d812:	2200      	movs	r2, #0
 800d814:	eba3 0308 	sub.w	r3, r3, r8
 800d818:	9305      	str	r3, [sp, #20]
 800d81a:	920a      	str	r2, [sp, #40]	@ 0x28
 800d81c:	f1c8 0300 	rsb	r3, r8, #0
 800d820:	e7e3      	b.n	800d7ea <_dtoa_r+0x1d2>
 800d822:	2200      	movs	r2, #0
 800d824:	9208      	str	r2, [sp, #32]
 800d826:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d828:	2a00      	cmp	r2, #0
 800d82a:	dc39      	bgt.n	800d8a0 <_dtoa_r+0x288>
 800d82c:	f04f 0b01 	mov.w	fp, #1
 800d830:	46da      	mov	sl, fp
 800d832:	465a      	mov	r2, fp
 800d834:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800d838:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800d83c:	2100      	movs	r1, #0
 800d83e:	2004      	movs	r0, #4
 800d840:	f100 0614 	add.w	r6, r0, #20
 800d844:	4296      	cmp	r6, r2
 800d846:	d930      	bls.n	800d8aa <_dtoa_r+0x292>
 800d848:	6079      	str	r1, [r7, #4]
 800d84a:	4648      	mov	r0, r9
 800d84c:	9304      	str	r3, [sp, #16]
 800d84e:	f000 fd39 	bl	800e2c4 <_Balloc>
 800d852:	9b04      	ldr	r3, [sp, #16]
 800d854:	4607      	mov	r7, r0
 800d856:	2800      	cmp	r0, #0
 800d858:	d146      	bne.n	800d8e8 <_dtoa_r+0x2d0>
 800d85a:	4b22      	ldr	r3, [pc, #136]	@ (800d8e4 <_dtoa_r+0x2cc>)
 800d85c:	4602      	mov	r2, r0
 800d85e:	f240 11af 	movw	r1, #431	@ 0x1af
 800d862:	e6f2      	b.n	800d64a <_dtoa_r+0x32>
 800d864:	2201      	movs	r2, #1
 800d866:	e7dd      	b.n	800d824 <_dtoa_r+0x20c>
 800d868:	2200      	movs	r2, #0
 800d86a:	9208      	str	r2, [sp, #32]
 800d86c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d86e:	eb08 0b02 	add.w	fp, r8, r2
 800d872:	f10b 0a01 	add.w	sl, fp, #1
 800d876:	4652      	mov	r2, sl
 800d878:	2a01      	cmp	r2, #1
 800d87a:	bfb8      	it	lt
 800d87c:	2201      	movlt	r2, #1
 800d87e:	e7db      	b.n	800d838 <_dtoa_r+0x220>
 800d880:	2201      	movs	r2, #1
 800d882:	e7f2      	b.n	800d86a <_dtoa_r+0x252>
 800d884:	2401      	movs	r4, #1
 800d886:	2200      	movs	r2, #0
 800d888:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d88c:	f04f 3bff 	mov.w	fp, #4294967295
 800d890:	2100      	movs	r1, #0
 800d892:	46da      	mov	sl, fp
 800d894:	2212      	movs	r2, #18
 800d896:	9109      	str	r1, [sp, #36]	@ 0x24
 800d898:	e7ce      	b.n	800d838 <_dtoa_r+0x220>
 800d89a:	2201      	movs	r2, #1
 800d89c:	9208      	str	r2, [sp, #32]
 800d89e:	e7f5      	b.n	800d88c <_dtoa_r+0x274>
 800d8a0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800d8a4:	46da      	mov	sl, fp
 800d8a6:	465a      	mov	r2, fp
 800d8a8:	e7c6      	b.n	800d838 <_dtoa_r+0x220>
 800d8aa:	3101      	adds	r1, #1
 800d8ac:	0040      	lsls	r0, r0, #1
 800d8ae:	e7c7      	b.n	800d840 <_dtoa_r+0x228>
 800d8b0:	636f4361 	.word	0x636f4361
 800d8b4:	3fd287a7 	.word	0x3fd287a7
 800d8b8:	8b60c8b3 	.word	0x8b60c8b3
 800d8bc:	3fc68a28 	.word	0x3fc68a28
 800d8c0:	509f79fb 	.word	0x509f79fb
 800d8c4:	3fd34413 	.word	0x3fd34413
 800d8c8:	0800fd99 	.word	0x0800fd99
 800d8cc:	0800fdb0 	.word	0x0800fdb0
 800d8d0:	7ff00000 	.word	0x7ff00000
 800d8d4:	0800fd95 	.word	0x0800fd95
 800d8d8:	0800fd69 	.word	0x0800fd69
 800d8dc:	0800fd68 	.word	0x0800fd68
 800d8e0:	0800fea8 	.word	0x0800fea8
 800d8e4:	0800fe08 	.word	0x0800fe08
 800d8e8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800d8ec:	f1ba 0f0e 	cmp.w	sl, #14
 800d8f0:	6010      	str	r0, [r2, #0]
 800d8f2:	d86f      	bhi.n	800d9d4 <_dtoa_r+0x3bc>
 800d8f4:	2c00      	cmp	r4, #0
 800d8f6:	d06d      	beq.n	800d9d4 <_dtoa_r+0x3bc>
 800d8f8:	f1b8 0f00 	cmp.w	r8, #0
 800d8fc:	f340 80c2 	ble.w	800da84 <_dtoa_r+0x46c>
 800d900:	4aca      	ldr	r2, [pc, #808]	@ (800dc2c <_dtoa_r+0x614>)
 800d902:	f008 010f 	and.w	r1, r8, #15
 800d906:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d90a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800d90e:	ed92 7b00 	vldr	d7, [r2]
 800d912:	ea4f 1128 	mov.w	r1, r8, asr #4
 800d916:	f000 80a9 	beq.w	800da6c <_dtoa_r+0x454>
 800d91a:	4ac5      	ldr	r2, [pc, #788]	@ (800dc30 <_dtoa_r+0x618>)
 800d91c:	ed92 6b08 	vldr	d6, [r2, #32]
 800d920:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d924:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d928:	f001 010f 	and.w	r1, r1, #15
 800d92c:	2203      	movs	r2, #3
 800d92e:	48c0      	ldr	r0, [pc, #768]	@ (800dc30 <_dtoa_r+0x618>)
 800d930:	2900      	cmp	r1, #0
 800d932:	f040 809d 	bne.w	800da70 <_dtoa_r+0x458>
 800d936:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d93a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d93e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d942:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d944:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d948:	2900      	cmp	r1, #0
 800d94a:	f000 80c1 	beq.w	800dad0 <_dtoa_r+0x4b8>
 800d94e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800d952:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d95a:	f140 80b9 	bpl.w	800dad0 <_dtoa_r+0x4b8>
 800d95e:	f1ba 0f00 	cmp.w	sl, #0
 800d962:	f000 80b5 	beq.w	800dad0 <_dtoa_r+0x4b8>
 800d966:	f1bb 0f00 	cmp.w	fp, #0
 800d96a:	dd31      	ble.n	800d9d0 <_dtoa_r+0x3b8>
 800d96c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800d970:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d974:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d978:	f108 31ff 	add.w	r1, r8, #4294967295
 800d97c:	9104      	str	r1, [sp, #16]
 800d97e:	3201      	adds	r2, #1
 800d980:	465c      	mov	r4, fp
 800d982:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d986:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800d98a:	ee07 2a90 	vmov	s15, r2
 800d98e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d992:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d996:	ee15 2a90 	vmov	r2, s11
 800d99a:	ec51 0b15 	vmov	r0, r1, d5
 800d99e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800d9a2:	2c00      	cmp	r4, #0
 800d9a4:	f040 8098 	bne.w	800dad8 <_dtoa_r+0x4c0>
 800d9a8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d9ac:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d9b0:	ec41 0b17 	vmov	d7, r0, r1
 800d9b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d9b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9bc:	f300 8261 	bgt.w	800de82 <_dtoa_r+0x86a>
 800d9c0:	eeb1 7b47 	vneg.f64	d7, d7
 800d9c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9cc:	f100 80f5 	bmi.w	800dbba <_dtoa_r+0x5a2>
 800d9d0:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d9d4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d9d6:	2a00      	cmp	r2, #0
 800d9d8:	f2c0 812c 	blt.w	800dc34 <_dtoa_r+0x61c>
 800d9dc:	f1b8 0f0e 	cmp.w	r8, #14
 800d9e0:	f300 8128 	bgt.w	800dc34 <_dtoa_r+0x61c>
 800d9e4:	4b91      	ldr	r3, [pc, #580]	@ (800dc2c <_dtoa_r+0x614>)
 800d9e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d9ea:	ed93 6b00 	vldr	d6, [r3]
 800d9ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	da03      	bge.n	800d9fc <_dtoa_r+0x3e4>
 800d9f4:	f1ba 0f00 	cmp.w	sl, #0
 800d9f8:	f340 80d2 	ble.w	800dba0 <_dtoa_r+0x588>
 800d9fc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800da00:	ed9d 7b02 	vldr	d7, [sp, #8]
 800da04:	463e      	mov	r6, r7
 800da06:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800da0a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800da0e:	ee15 3a10 	vmov	r3, s10
 800da12:	3330      	adds	r3, #48	@ 0x30
 800da14:	f806 3b01 	strb.w	r3, [r6], #1
 800da18:	1bf3      	subs	r3, r6, r7
 800da1a:	459a      	cmp	sl, r3
 800da1c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800da20:	eea3 7b46 	vfms.f64	d7, d3, d6
 800da24:	f040 80f8 	bne.w	800dc18 <_dtoa_r+0x600>
 800da28:	ee37 7b07 	vadd.f64	d7, d7, d7
 800da2c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800da30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da34:	f300 80dd 	bgt.w	800dbf2 <_dtoa_r+0x5da>
 800da38:	eeb4 7b46 	vcmp.f64	d7, d6
 800da3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da40:	d104      	bne.n	800da4c <_dtoa_r+0x434>
 800da42:	ee15 3a10 	vmov	r3, s10
 800da46:	07db      	lsls	r3, r3, #31
 800da48:	f100 80d3 	bmi.w	800dbf2 <_dtoa_r+0x5da>
 800da4c:	9901      	ldr	r1, [sp, #4]
 800da4e:	4648      	mov	r0, r9
 800da50:	f000 fc78 	bl	800e344 <_Bfree>
 800da54:	2300      	movs	r3, #0
 800da56:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800da58:	7033      	strb	r3, [r6, #0]
 800da5a:	f108 0301 	add.w	r3, r8, #1
 800da5e:	6013      	str	r3, [r2, #0]
 800da60:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800da62:	2b00      	cmp	r3, #0
 800da64:	f000 8304 	beq.w	800e070 <_dtoa_r+0xa58>
 800da68:	601e      	str	r6, [r3, #0]
 800da6a:	e301      	b.n	800e070 <_dtoa_r+0xa58>
 800da6c:	2202      	movs	r2, #2
 800da6e:	e75e      	b.n	800d92e <_dtoa_r+0x316>
 800da70:	07cc      	lsls	r4, r1, #31
 800da72:	d504      	bpl.n	800da7e <_dtoa_r+0x466>
 800da74:	ed90 6b00 	vldr	d6, [r0]
 800da78:	3201      	adds	r2, #1
 800da7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800da7e:	1049      	asrs	r1, r1, #1
 800da80:	3008      	adds	r0, #8
 800da82:	e755      	b.n	800d930 <_dtoa_r+0x318>
 800da84:	d022      	beq.n	800dacc <_dtoa_r+0x4b4>
 800da86:	f1c8 0100 	rsb	r1, r8, #0
 800da8a:	4a68      	ldr	r2, [pc, #416]	@ (800dc2c <_dtoa_r+0x614>)
 800da8c:	f001 000f 	and.w	r0, r1, #15
 800da90:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800da94:	ed92 7b00 	vldr	d7, [r2]
 800da98:	ee28 7b07 	vmul.f64	d7, d8, d7
 800da9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800daa0:	4863      	ldr	r0, [pc, #396]	@ (800dc30 <_dtoa_r+0x618>)
 800daa2:	1109      	asrs	r1, r1, #4
 800daa4:	2400      	movs	r4, #0
 800daa6:	2202      	movs	r2, #2
 800daa8:	b929      	cbnz	r1, 800dab6 <_dtoa_r+0x49e>
 800daaa:	2c00      	cmp	r4, #0
 800daac:	f43f af49 	beq.w	800d942 <_dtoa_r+0x32a>
 800dab0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dab4:	e745      	b.n	800d942 <_dtoa_r+0x32a>
 800dab6:	07ce      	lsls	r6, r1, #31
 800dab8:	d505      	bpl.n	800dac6 <_dtoa_r+0x4ae>
 800daba:	ed90 6b00 	vldr	d6, [r0]
 800dabe:	3201      	adds	r2, #1
 800dac0:	2401      	movs	r4, #1
 800dac2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dac6:	1049      	asrs	r1, r1, #1
 800dac8:	3008      	adds	r0, #8
 800daca:	e7ed      	b.n	800daa8 <_dtoa_r+0x490>
 800dacc:	2202      	movs	r2, #2
 800dace:	e738      	b.n	800d942 <_dtoa_r+0x32a>
 800dad0:	f8cd 8010 	str.w	r8, [sp, #16]
 800dad4:	4654      	mov	r4, sl
 800dad6:	e754      	b.n	800d982 <_dtoa_r+0x36a>
 800dad8:	4a54      	ldr	r2, [pc, #336]	@ (800dc2c <_dtoa_r+0x614>)
 800dada:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800dade:	ed12 4b02 	vldr	d4, [r2, #-8]
 800dae2:	9a08      	ldr	r2, [sp, #32]
 800dae4:	ec41 0b17 	vmov	d7, r0, r1
 800dae8:	443c      	add	r4, r7
 800daea:	b34a      	cbz	r2, 800db40 <_dtoa_r+0x528>
 800daec:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800daf0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800daf4:	463e      	mov	r6, r7
 800daf6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800dafa:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800dafe:	ee35 7b47 	vsub.f64	d7, d5, d7
 800db02:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800db06:	ee14 2a90 	vmov	r2, s9
 800db0a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800db0e:	3230      	adds	r2, #48	@ 0x30
 800db10:	ee36 6b45 	vsub.f64	d6, d6, d5
 800db14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800db18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db1c:	f806 2b01 	strb.w	r2, [r6], #1
 800db20:	d438      	bmi.n	800db94 <_dtoa_r+0x57c>
 800db22:	ee32 5b46 	vsub.f64	d5, d2, d6
 800db26:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800db2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db2e:	d462      	bmi.n	800dbf6 <_dtoa_r+0x5de>
 800db30:	42a6      	cmp	r6, r4
 800db32:	f43f af4d 	beq.w	800d9d0 <_dtoa_r+0x3b8>
 800db36:	ee27 7b03 	vmul.f64	d7, d7, d3
 800db3a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800db3e:	e7e0      	b.n	800db02 <_dtoa_r+0x4ea>
 800db40:	4621      	mov	r1, r4
 800db42:	463e      	mov	r6, r7
 800db44:	ee27 7b04 	vmul.f64	d7, d7, d4
 800db48:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800db4c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800db50:	ee14 2a90 	vmov	r2, s9
 800db54:	3230      	adds	r2, #48	@ 0x30
 800db56:	f806 2b01 	strb.w	r2, [r6], #1
 800db5a:	42a6      	cmp	r6, r4
 800db5c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800db60:	ee36 6b45 	vsub.f64	d6, d6, d5
 800db64:	d119      	bne.n	800db9a <_dtoa_r+0x582>
 800db66:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800db6a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800db6e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800db72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db76:	dc3e      	bgt.n	800dbf6 <_dtoa_r+0x5de>
 800db78:	ee35 5b47 	vsub.f64	d5, d5, d7
 800db7c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800db80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db84:	f57f af24 	bpl.w	800d9d0 <_dtoa_r+0x3b8>
 800db88:	460e      	mov	r6, r1
 800db8a:	3901      	subs	r1, #1
 800db8c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800db90:	2b30      	cmp	r3, #48	@ 0x30
 800db92:	d0f9      	beq.n	800db88 <_dtoa_r+0x570>
 800db94:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800db98:	e758      	b.n	800da4c <_dtoa_r+0x434>
 800db9a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800db9e:	e7d5      	b.n	800db4c <_dtoa_r+0x534>
 800dba0:	d10b      	bne.n	800dbba <_dtoa_r+0x5a2>
 800dba2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800dba6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800dbaa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dbae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dbb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbb6:	f2c0 8161 	blt.w	800de7c <_dtoa_r+0x864>
 800dbba:	2400      	movs	r4, #0
 800dbbc:	4625      	mov	r5, r4
 800dbbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbc0:	43db      	mvns	r3, r3
 800dbc2:	9304      	str	r3, [sp, #16]
 800dbc4:	463e      	mov	r6, r7
 800dbc6:	f04f 0800 	mov.w	r8, #0
 800dbca:	4621      	mov	r1, r4
 800dbcc:	4648      	mov	r0, r9
 800dbce:	f000 fbb9 	bl	800e344 <_Bfree>
 800dbd2:	2d00      	cmp	r5, #0
 800dbd4:	d0de      	beq.n	800db94 <_dtoa_r+0x57c>
 800dbd6:	f1b8 0f00 	cmp.w	r8, #0
 800dbda:	d005      	beq.n	800dbe8 <_dtoa_r+0x5d0>
 800dbdc:	45a8      	cmp	r8, r5
 800dbde:	d003      	beq.n	800dbe8 <_dtoa_r+0x5d0>
 800dbe0:	4641      	mov	r1, r8
 800dbe2:	4648      	mov	r0, r9
 800dbe4:	f000 fbae 	bl	800e344 <_Bfree>
 800dbe8:	4629      	mov	r1, r5
 800dbea:	4648      	mov	r0, r9
 800dbec:	f000 fbaa 	bl	800e344 <_Bfree>
 800dbf0:	e7d0      	b.n	800db94 <_dtoa_r+0x57c>
 800dbf2:	f8cd 8010 	str.w	r8, [sp, #16]
 800dbf6:	4633      	mov	r3, r6
 800dbf8:	461e      	mov	r6, r3
 800dbfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dbfe:	2a39      	cmp	r2, #57	@ 0x39
 800dc00:	d106      	bne.n	800dc10 <_dtoa_r+0x5f8>
 800dc02:	429f      	cmp	r7, r3
 800dc04:	d1f8      	bne.n	800dbf8 <_dtoa_r+0x5e0>
 800dc06:	9a04      	ldr	r2, [sp, #16]
 800dc08:	3201      	adds	r2, #1
 800dc0a:	9204      	str	r2, [sp, #16]
 800dc0c:	2230      	movs	r2, #48	@ 0x30
 800dc0e:	703a      	strb	r2, [r7, #0]
 800dc10:	781a      	ldrb	r2, [r3, #0]
 800dc12:	3201      	adds	r2, #1
 800dc14:	701a      	strb	r2, [r3, #0]
 800dc16:	e7bd      	b.n	800db94 <_dtoa_r+0x57c>
 800dc18:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dc1c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dc20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc24:	f47f aeef 	bne.w	800da06 <_dtoa_r+0x3ee>
 800dc28:	e710      	b.n	800da4c <_dtoa_r+0x434>
 800dc2a:	bf00      	nop
 800dc2c:	0800fea8 	.word	0x0800fea8
 800dc30:	0800fe80 	.word	0x0800fe80
 800dc34:	9908      	ldr	r1, [sp, #32]
 800dc36:	2900      	cmp	r1, #0
 800dc38:	f000 80e3 	beq.w	800de02 <_dtoa_r+0x7ea>
 800dc3c:	9907      	ldr	r1, [sp, #28]
 800dc3e:	2901      	cmp	r1, #1
 800dc40:	f300 80c8 	bgt.w	800ddd4 <_dtoa_r+0x7bc>
 800dc44:	2d00      	cmp	r5, #0
 800dc46:	f000 80c1 	beq.w	800ddcc <_dtoa_r+0x7b4>
 800dc4a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800dc4e:	9e05      	ldr	r6, [sp, #20]
 800dc50:	461c      	mov	r4, r3
 800dc52:	9304      	str	r3, [sp, #16]
 800dc54:	9b05      	ldr	r3, [sp, #20]
 800dc56:	4413      	add	r3, r2
 800dc58:	9305      	str	r3, [sp, #20]
 800dc5a:	9b06      	ldr	r3, [sp, #24]
 800dc5c:	2101      	movs	r1, #1
 800dc5e:	4413      	add	r3, r2
 800dc60:	4648      	mov	r0, r9
 800dc62:	9306      	str	r3, [sp, #24]
 800dc64:	f000 fc22 	bl	800e4ac <__i2b>
 800dc68:	9b04      	ldr	r3, [sp, #16]
 800dc6a:	4605      	mov	r5, r0
 800dc6c:	b166      	cbz	r6, 800dc88 <_dtoa_r+0x670>
 800dc6e:	9a06      	ldr	r2, [sp, #24]
 800dc70:	2a00      	cmp	r2, #0
 800dc72:	dd09      	ble.n	800dc88 <_dtoa_r+0x670>
 800dc74:	42b2      	cmp	r2, r6
 800dc76:	9905      	ldr	r1, [sp, #20]
 800dc78:	bfa8      	it	ge
 800dc7a:	4632      	movge	r2, r6
 800dc7c:	1a89      	subs	r1, r1, r2
 800dc7e:	9105      	str	r1, [sp, #20]
 800dc80:	9906      	ldr	r1, [sp, #24]
 800dc82:	1ab6      	subs	r6, r6, r2
 800dc84:	1a8a      	subs	r2, r1, r2
 800dc86:	9206      	str	r2, [sp, #24]
 800dc88:	b1fb      	cbz	r3, 800dcca <_dtoa_r+0x6b2>
 800dc8a:	9a08      	ldr	r2, [sp, #32]
 800dc8c:	2a00      	cmp	r2, #0
 800dc8e:	f000 80bc 	beq.w	800de0a <_dtoa_r+0x7f2>
 800dc92:	b19c      	cbz	r4, 800dcbc <_dtoa_r+0x6a4>
 800dc94:	4629      	mov	r1, r5
 800dc96:	4622      	mov	r2, r4
 800dc98:	4648      	mov	r0, r9
 800dc9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc9c:	f000 fcc6 	bl	800e62c <__pow5mult>
 800dca0:	9a01      	ldr	r2, [sp, #4]
 800dca2:	4601      	mov	r1, r0
 800dca4:	4605      	mov	r5, r0
 800dca6:	4648      	mov	r0, r9
 800dca8:	f000 fc16 	bl	800e4d8 <__multiply>
 800dcac:	9901      	ldr	r1, [sp, #4]
 800dcae:	9004      	str	r0, [sp, #16]
 800dcb0:	4648      	mov	r0, r9
 800dcb2:	f000 fb47 	bl	800e344 <_Bfree>
 800dcb6:	9a04      	ldr	r2, [sp, #16]
 800dcb8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcba:	9201      	str	r2, [sp, #4]
 800dcbc:	1b1a      	subs	r2, r3, r4
 800dcbe:	d004      	beq.n	800dcca <_dtoa_r+0x6b2>
 800dcc0:	9901      	ldr	r1, [sp, #4]
 800dcc2:	4648      	mov	r0, r9
 800dcc4:	f000 fcb2 	bl	800e62c <__pow5mult>
 800dcc8:	9001      	str	r0, [sp, #4]
 800dcca:	2101      	movs	r1, #1
 800dccc:	4648      	mov	r0, r9
 800dcce:	f000 fbed 	bl	800e4ac <__i2b>
 800dcd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dcd4:	4604      	mov	r4, r0
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	f000 81d0 	beq.w	800e07c <_dtoa_r+0xa64>
 800dcdc:	461a      	mov	r2, r3
 800dcde:	4601      	mov	r1, r0
 800dce0:	4648      	mov	r0, r9
 800dce2:	f000 fca3 	bl	800e62c <__pow5mult>
 800dce6:	9b07      	ldr	r3, [sp, #28]
 800dce8:	2b01      	cmp	r3, #1
 800dcea:	4604      	mov	r4, r0
 800dcec:	f300 8095 	bgt.w	800de1a <_dtoa_r+0x802>
 800dcf0:	9b02      	ldr	r3, [sp, #8]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	f040 808b 	bne.w	800de0e <_dtoa_r+0x7f6>
 800dcf8:	9b03      	ldr	r3, [sp, #12]
 800dcfa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800dcfe:	2a00      	cmp	r2, #0
 800dd00:	f040 8087 	bne.w	800de12 <_dtoa_r+0x7fa>
 800dd04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800dd08:	0d12      	lsrs	r2, r2, #20
 800dd0a:	0512      	lsls	r2, r2, #20
 800dd0c:	2a00      	cmp	r2, #0
 800dd0e:	f000 8082 	beq.w	800de16 <_dtoa_r+0x7fe>
 800dd12:	9b05      	ldr	r3, [sp, #20]
 800dd14:	3301      	adds	r3, #1
 800dd16:	9305      	str	r3, [sp, #20]
 800dd18:	9b06      	ldr	r3, [sp, #24]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	9306      	str	r3, [sp, #24]
 800dd1e:	2301      	movs	r3, #1
 800dd20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	f000 81af 	beq.w	800e088 <_dtoa_r+0xa70>
 800dd2a:	6922      	ldr	r2, [r4, #16]
 800dd2c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800dd30:	6910      	ldr	r0, [r2, #16]
 800dd32:	f000 fb6f 	bl	800e414 <__hi0bits>
 800dd36:	f1c0 0020 	rsb	r0, r0, #32
 800dd3a:	9b06      	ldr	r3, [sp, #24]
 800dd3c:	4418      	add	r0, r3
 800dd3e:	f010 001f 	ands.w	r0, r0, #31
 800dd42:	d076      	beq.n	800de32 <_dtoa_r+0x81a>
 800dd44:	f1c0 0220 	rsb	r2, r0, #32
 800dd48:	2a04      	cmp	r2, #4
 800dd4a:	dd69      	ble.n	800de20 <_dtoa_r+0x808>
 800dd4c:	9b05      	ldr	r3, [sp, #20]
 800dd4e:	f1c0 001c 	rsb	r0, r0, #28
 800dd52:	4403      	add	r3, r0
 800dd54:	9305      	str	r3, [sp, #20]
 800dd56:	9b06      	ldr	r3, [sp, #24]
 800dd58:	4406      	add	r6, r0
 800dd5a:	4403      	add	r3, r0
 800dd5c:	9306      	str	r3, [sp, #24]
 800dd5e:	9b05      	ldr	r3, [sp, #20]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	dd05      	ble.n	800dd70 <_dtoa_r+0x758>
 800dd64:	9901      	ldr	r1, [sp, #4]
 800dd66:	461a      	mov	r2, r3
 800dd68:	4648      	mov	r0, r9
 800dd6a:	f000 fcb9 	bl	800e6e0 <__lshift>
 800dd6e:	9001      	str	r0, [sp, #4]
 800dd70:	9b06      	ldr	r3, [sp, #24]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	dd05      	ble.n	800dd82 <_dtoa_r+0x76a>
 800dd76:	4621      	mov	r1, r4
 800dd78:	461a      	mov	r2, r3
 800dd7a:	4648      	mov	r0, r9
 800dd7c:	f000 fcb0 	bl	800e6e0 <__lshift>
 800dd80:	4604      	mov	r4, r0
 800dd82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d056      	beq.n	800de36 <_dtoa_r+0x81e>
 800dd88:	9801      	ldr	r0, [sp, #4]
 800dd8a:	4621      	mov	r1, r4
 800dd8c:	f000 fd14 	bl	800e7b8 <__mcmp>
 800dd90:	2800      	cmp	r0, #0
 800dd92:	da50      	bge.n	800de36 <_dtoa_r+0x81e>
 800dd94:	f108 33ff 	add.w	r3, r8, #4294967295
 800dd98:	9304      	str	r3, [sp, #16]
 800dd9a:	9901      	ldr	r1, [sp, #4]
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	220a      	movs	r2, #10
 800dda0:	4648      	mov	r0, r9
 800dda2:	f000 faf1 	bl	800e388 <__multadd>
 800dda6:	9b08      	ldr	r3, [sp, #32]
 800dda8:	9001      	str	r0, [sp, #4]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	f000 816e 	beq.w	800e08c <_dtoa_r+0xa74>
 800ddb0:	4629      	mov	r1, r5
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	220a      	movs	r2, #10
 800ddb6:	4648      	mov	r0, r9
 800ddb8:	f000 fae6 	bl	800e388 <__multadd>
 800ddbc:	f1bb 0f00 	cmp.w	fp, #0
 800ddc0:	4605      	mov	r5, r0
 800ddc2:	dc64      	bgt.n	800de8e <_dtoa_r+0x876>
 800ddc4:	9b07      	ldr	r3, [sp, #28]
 800ddc6:	2b02      	cmp	r3, #2
 800ddc8:	dc3e      	bgt.n	800de48 <_dtoa_r+0x830>
 800ddca:	e060      	b.n	800de8e <_dtoa_r+0x876>
 800ddcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ddce:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ddd2:	e73c      	b.n	800dc4e <_dtoa_r+0x636>
 800ddd4:	f10a 34ff 	add.w	r4, sl, #4294967295
 800ddd8:	42a3      	cmp	r3, r4
 800ddda:	bfbf      	itttt	lt
 800dddc:	1ae2      	sublt	r2, r4, r3
 800ddde:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dde0:	189b      	addlt	r3, r3, r2
 800dde2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800dde4:	bfae      	itee	ge
 800dde6:	1b1c      	subge	r4, r3, r4
 800dde8:	4623      	movlt	r3, r4
 800ddea:	2400      	movlt	r4, #0
 800ddec:	f1ba 0f00 	cmp.w	sl, #0
 800ddf0:	bfb5      	itete	lt
 800ddf2:	9a05      	ldrlt	r2, [sp, #20]
 800ddf4:	9e05      	ldrge	r6, [sp, #20]
 800ddf6:	eba2 060a 	sublt.w	r6, r2, sl
 800ddfa:	4652      	movge	r2, sl
 800ddfc:	bfb8      	it	lt
 800ddfe:	2200      	movlt	r2, #0
 800de00:	e727      	b.n	800dc52 <_dtoa_r+0x63a>
 800de02:	9e05      	ldr	r6, [sp, #20]
 800de04:	9d08      	ldr	r5, [sp, #32]
 800de06:	461c      	mov	r4, r3
 800de08:	e730      	b.n	800dc6c <_dtoa_r+0x654>
 800de0a:	461a      	mov	r2, r3
 800de0c:	e758      	b.n	800dcc0 <_dtoa_r+0x6a8>
 800de0e:	2300      	movs	r3, #0
 800de10:	e786      	b.n	800dd20 <_dtoa_r+0x708>
 800de12:	9b02      	ldr	r3, [sp, #8]
 800de14:	e784      	b.n	800dd20 <_dtoa_r+0x708>
 800de16:	920b      	str	r2, [sp, #44]	@ 0x2c
 800de18:	e783      	b.n	800dd22 <_dtoa_r+0x70a>
 800de1a:	2300      	movs	r3, #0
 800de1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de1e:	e784      	b.n	800dd2a <_dtoa_r+0x712>
 800de20:	d09d      	beq.n	800dd5e <_dtoa_r+0x746>
 800de22:	9b05      	ldr	r3, [sp, #20]
 800de24:	321c      	adds	r2, #28
 800de26:	4413      	add	r3, r2
 800de28:	9305      	str	r3, [sp, #20]
 800de2a:	9b06      	ldr	r3, [sp, #24]
 800de2c:	4416      	add	r6, r2
 800de2e:	4413      	add	r3, r2
 800de30:	e794      	b.n	800dd5c <_dtoa_r+0x744>
 800de32:	4602      	mov	r2, r0
 800de34:	e7f5      	b.n	800de22 <_dtoa_r+0x80a>
 800de36:	f1ba 0f00 	cmp.w	sl, #0
 800de3a:	f8cd 8010 	str.w	r8, [sp, #16]
 800de3e:	46d3      	mov	fp, sl
 800de40:	dc21      	bgt.n	800de86 <_dtoa_r+0x86e>
 800de42:	9b07      	ldr	r3, [sp, #28]
 800de44:	2b02      	cmp	r3, #2
 800de46:	dd1e      	ble.n	800de86 <_dtoa_r+0x86e>
 800de48:	f1bb 0f00 	cmp.w	fp, #0
 800de4c:	f47f aeb7 	bne.w	800dbbe <_dtoa_r+0x5a6>
 800de50:	4621      	mov	r1, r4
 800de52:	465b      	mov	r3, fp
 800de54:	2205      	movs	r2, #5
 800de56:	4648      	mov	r0, r9
 800de58:	f000 fa96 	bl	800e388 <__multadd>
 800de5c:	4601      	mov	r1, r0
 800de5e:	4604      	mov	r4, r0
 800de60:	9801      	ldr	r0, [sp, #4]
 800de62:	f000 fca9 	bl	800e7b8 <__mcmp>
 800de66:	2800      	cmp	r0, #0
 800de68:	f77f aea9 	ble.w	800dbbe <_dtoa_r+0x5a6>
 800de6c:	463e      	mov	r6, r7
 800de6e:	2331      	movs	r3, #49	@ 0x31
 800de70:	f806 3b01 	strb.w	r3, [r6], #1
 800de74:	9b04      	ldr	r3, [sp, #16]
 800de76:	3301      	adds	r3, #1
 800de78:	9304      	str	r3, [sp, #16]
 800de7a:	e6a4      	b.n	800dbc6 <_dtoa_r+0x5ae>
 800de7c:	f8cd 8010 	str.w	r8, [sp, #16]
 800de80:	4654      	mov	r4, sl
 800de82:	4625      	mov	r5, r4
 800de84:	e7f2      	b.n	800de6c <_dtoa_r+0x854>
 800de86:	9b08      	ldr	r3, [sp, #32]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	f000 8103 	beq.w	800e094 <_dtoa_r+0xa7c>
 800de8e:	2e00      	cmp	r6, #0
 800de90:	dd05      	ble.n	800de9e <_dtoa_r+0x886>
 800de92:	4629      	mov	r1, r5
 800de94:	4632      	mov	r2, r6
 800de96:	4648      	mov	r0, r9
 800de98:	f000 fc22 	bl	800e6e0 <__lshift>
 800de9c:	4605      	mov	r5, r0
 800de9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d058      	beq.n	800df56 <_dtoa_r+0x93e>
 800dea4:	6869      	ldr	r1, [r5, #4]
 800dea6:	4648      	mov	r0, r9
 800dea8:	f000 fa0c 	bl	800e2c4 <_Balloc>
 800deac:	4606      	mov	r6, r0
 800deae:	b928      	cbnz	r0, 800debc <_dtoa_r+0x8a4>
 800deb0:	4b82      	ldr	r3, [pc, #520]	@ (800e0bc <_dtoa_r+0xaa4>)
 800deb2:	4602      	mov	r2, r0
 800deb4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800deb8:	f7ff bbc7 	b.w	800d64a <_dtoa_r+0x32>
 800debc:	692a      	ldr	r2, [r5, #16]
 800debe:	3202      	adds	r2, #2
 800dec0:	0092      	lsls	r2, r2, #2
 800dec2:	f105 010c 	add.w	r1, r5, #12
 800dec6:	300c      	adds	r0, #12
 800dec8:	f000 fe3a 	bl	800eb40 <memcpy>
 800decc:	2201      	movs	r2, #1
 800dece:	4631      	mov	r1, r6
 800ded0:	4648      	mov	r0, r9
 800ded2:	f000 fc05 	bl	800e6e0 <__lshift>
 800ded6:	1c7b      	adds	r3, r7, #1
 800ded8:	9305      	str	r3, [sp, #20]
 800deda:	eb07 030b 	add.w	r3, r7, fp
 800dede:	9309      	str	r3, [sp, #36]	@ 0x24
 800dee0:	9b02      	ldr	r3, [sp, #8]
 800dee2:	f003 0301 	and.w	r3, r3, #1
 800dee6:	46a8      	mov	r8, r5
 800dee8:	9308      	str	r3, [sp, #32]
 800deea:	4605      	mov	r5, r0
 800deec:	9b05      	ldr	r3, [sp, #20]
 800deee:	9801      	ldr	r0, [sp, #4]
 800def0:	4621      	mov	r1, r4
 800def2:	f103 3bff 	add.w	fp, r3, #4294967295
 800def6:	f7ff fb04 	bl	800d502 <quorem>
 800defa:	4641      	mov	r1, r8
 800defc:	9002      	str	r0, [sp, #8]
 800defe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800df02:	9801      	ldr	r0, [sp, #4]
 800df04:	f000 fc58 	bl	800e7b8 <__mcmp>
 800df08:	462a      	mov	r2, r5
 800df0a:	9006      	str	r0, [sp, #24]
 800df0c:	4621      	mov	r1, r4
 800df0e:	4648      	mov	r0, r9
 800df10:	f000 fc6e 	bl	800e7f0 <__mdiff>
 800df14:	68c2      	ldr	r2, [r0, #12]
 800df16:	4606      	mov	r6, r0
 800df18:	b9fa      	cbnz	r2, 800df5a <_dtoa_r+0x942>
 800df1a:	4601      	mov	r1, r0
 800df1c:	9801      	ldr	r0, [sp, #4]
 800df1e:	f000 fc4b 	bl	800e7b8 <__mcmp>
 800df22:	4602      	mov	r2, r0
 800df24:	4631      	mov	r1, r6
 800df26:	4648      	mov	r0, r9
 800df28:	920a      	str	r2, [sp, #40]	@ 0x28
 800df2a:	f000 fa0b 	bl	800e344 <_Bfree>
 800df2e:	9b07      	ldr	r3, [sp, #28]
 800df30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800df32:	9e05      	ldr	r6, [sp, #20]
 800df34:	ea43 0102 	orr.w	r1, r3, r2
 800df38:	9b08      	ldr	r3, [sp, #32]
 800df3a:	4319      	orrs	r1, r3
 800df3c:	d10f      	bne.n	800df5e <_dtoa_r+0x946>
 800df3e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800df42:	d028      	beq.n	800df96 <_dtoa_r+0x97e>
 800df44:	9b06      	ldr	r3, [sp, #24]
 800df46:	2b00      	cmp	r3, #0
 800df48:	dd02      	ble.n	800df50 <_dtoa_r+0x938>
 800df4a:	9b02      	ldr	r3, [sp, #8]
 800df4c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800df50:	f88b a000 	strb.w	sl, [fp]
 800df54:	e639      	b.n	800dbca <_dtoa_r+0x5b2>
 800df56:	4628      	mov	r0, r5
 800df58:	e7bd      	b.n	800ded6 <_dtoa_r+0x8be>
 800df5a:	2201      	movs	r2, #1
 800df5c:	e7e2      	b.n	800df24 <_dtoa_r+0x90c>
 800df5e:	9b06      	ldr	r3, [sp, #24]
 800df60:	2b00      	cmp	r3, #0
 800df62:	db04      	blt.n	800df6e <_dtoa_r+0x956>
 800df64:	9907      	ldr	r1, [sp, #28]
 800df66:	430b      	orrs	r3, r1
 800df68:	9908      	ldr	r1, [sp, #32]
 800df6a:	430b      	orrs	r3, r1
 800df6c:	d120      	bne.n	800dfb0 <_dtoa_r+0x998>
 800df6e:	2a00      	cmp	r2, #0
 800df70:	ddee      	ble.n	800df50 <_dtoa_r+0x938>
 800df72:	9901      	ldr	r1, [sp, #4]
 800df74:	2201      	movs	r2, #1
 800df76:	4648      	mov	r0, r9
 800df78:	f000 fbb2 	bl	800e6e0 <__lshift>
 800df7c:	4621      	mov	r1, r4
 800df7e:	9001      	str	r0, [sp, #4]
 800df80:	f000 fc1a 	bl	800e7b8 <__mcmp>
 800df84:	2800      	cmp	r0, #0
 800df86:	dc03      	bgt.n	800df90 <_dtoa_r+0x978>
 800df88:	d1e2      	bne.n	800df50 <_dtoa_r+0x938>
 800df8a:	f01a 0f01 	tst.w	sl, #1
 800df8e:	d0df      	beq.n	800df50 <_dtoa_r+0x938>
 800df90:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800df94:	d1d9      	bne.n	800df4a <_dtoa_r+0x932>
 800df96:	2339      	movs	r3, #57	@ 0x39
 800df98:	f88b 3000 	strb.w	r3, [fp]
 800df9c:	4633      	mov	r3, r6
 800df9e:	461e      	mov	r6, r3
 800dfa0:	3b01      	subs	r3, #1
 800dfa2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dfa6:	2a39      	cmp	r2, #57	@ 0x39
 800dfa8:	d053      	beq.n	800e052 <_dtoa_r+0xa3a>
 800dfaa:	3201      	adds	r2, #1
 800dfac:	701a      	strb	r2, [r3, #0]
 800dfae:	e60c      	b.n	800dbca <_dtoa_r+0x5b2>
 800dfb0:	2a00      	cmp	r2, #0
 800dfb2:	dd07      	ble.n	800dfc4 <_dtoa_r+0x9ac>
 800dfb4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800dfb8:	d0ed      	beq.n	800df96 <_dtoa_r+0x97e>
 800dfba:	f10a 0301 	add.w	r3, sl, #1
 800dfbe:	f88b 3000 	strb.w	r3, [fp]
 800dfc2:	e602      	b.n	800dbca <_dtoa_r+0x5b2>
 800dfc4:	9b05      	ldr	r3, [sp, #20]
 800dfc6:	9a05      	ldr	r2, [sp, #20]
 800dfc8:	f803 ac01 	strb.w	sl, [r3, #-1]
 800dfcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfce:	4293      	cmp	r3, r2
 800dfd0:	d029      	beq.n	800e026 <_dtoa_r+0xa0e>
 800dfd2:	9901      	ldr	r1, [sp, #4]
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	220a      	movs	r2, #10
 800dfd8:	4648      	mov	r0, r9
 800dfda:	f000 f9d5 	bl	800e388 <__multadd>
 800dfde:	45a8      	cmp	r8, r5
 800dfe0:	9001      	str	r0, [sp, #4]
 800dfe2:	f04f 0300 	mov.w	r3, #0
 800dfe6:	f04f 020a 	mov.w	r2, #10
 800dfea:	4641      	mov	r1, r8
 800dfec:	4648      	mov	r0, r9
 800dfee:	d107      	bne.n	800e000 <_dtoa_r+0x9e8>
 800dff0:	f000 f9ca 	bl	800e388 <__multadd>
 800dff4:	4680      	mov	r8, r0
 800dff6:	4605      	mov	r5, r0
 800dff8:	9b05      	ldr	r3, [sp, #20]
 800dffa:	3301      	adds	r3, #1
 800dffc:	9305      	str	r3, [sp, #20]
 800dffe:	e775      	b.n	800deec <_dtoa_r+0x8d4>
 800e000:	f000 f9c2 	bl	800e388 <__multadd>
 800e004:	4629      	mov	r1, r5
 800e006:	4680      	mov	r8, r0
 800e008:	2300      	movs	r3, #0
 800e00a:	220a      	movs	r2, #10
 800e00c:	4648      	mov	r0, r9
 800e00e:	f000 f9bb 	bl	800e388 <__multadd>
 800e012:	4605      	mov	r5, r0
 800e014:	e7f0      	b.n	800dff8 <_dtoa_r+0x9e0>
 800e016:	f1bb 0f00 	cmp.w	fp, #0
 800e01a:	bfcc      	ite	gt
 800e01c:	465e      	movgt	r6, fp
 800e01e:	2601      	movle	r6, #1
 800e020:	443e      	add	r6, r7
 800e022:	f04f 0800 	mov.w	r8, #0
 800e026:	9901      	ldr	r1, [sp, #4]
 800e028:	2201      	movs	r2, #1
 800e02a:	4648      	mov	r0, r9
 800e02c:	f000 fb58 	bl	800e6e0 <__lshift>
 800e030:	4621      	mov	r1, r4
 800e032:	9001      	str	r0, [sp, #4]
 800e034:	f000 fbc0 	bl	800e7b8 <__mcmp>
 800e038:	2800      	cmp	r0, #0
 800e03a:	dcaf      	bgt.n	800df9c <_dtoa_r+0x984>
 800e03c:	d102      	bne.n	800e044 <_dtoa_r+0xa2c>
 800e03e:	f01a 0f01 	tst.w	sl, #1
 800e042:	d1ab      	bne.n	800df9c <_dtoa_r+0x984>
 800e044:	4633      	mov	r3, r6
 800e046:	461e      	mov	r6, r3
 800e048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e04c:	2a30      	cmp	r2, #48	@ 0x30
 800e04e:	d0fa      	beq.n	800e046 <_dtoa_r+0xa2e>
 800e050:	e5bb      	b.n	800dbca <_dtoa_r+0x5b2>
 800e052:	429f      	cmp	r7, r3
 800e054:	d1a3      	bne.n	800df9e <_dtoa_r+0x986>
 800e056:	9b04      	ldr	r3, [sp, #16]
 800e058:	3301      	adds	r3, #1
 800e05a:	9304      	str	r3, [sp, #16]
 800e05c:	2331      	movs	r3, #49	@ 0x31
 800e05e:	703b      	strb	r3, [r7, #0]
 800e060:	e5b3      	b.n	800dbca <_dtoa_r+0x5b2>
 800e062:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e064:	4f16      	ldr	r7, [pc, #88]	@ (800e0c0 <_dtoa_r+0xaa8>)
 800e066:	b11b      	cbz	r3, 800e070 <_dtoa_r+0xa58>
 800e068:	f107 0308 	add.w	r3, r7, #8
 800e06c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800e06e:	6013      	str	r3, [r2, #0]
 800e070:	4638      	mov	r0, r7
 800e072:	b011      	add	sp, #68	@ 0x44
 800e074:	ecbd 8b02 	vpop	{d8}
 800e078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e07c:	9b07      	ldr	r3, [sp, #28]
 800e07e:	2b01      	cmp	r3, #1
 800e080:	f77f ae36 	ble.w	800dcf0 <_dtoa_r+0x6d8>
 800e084:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e086:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e088:	2001      	movs	r0, #1
 800e08a:	e656      	b.n	800dd3a <_dtoa_r+0x722>
 800e08c:	f1bb 0f00 	cmp.w	fp, #0
 800e090:	f77f aed7 	ble.w	800de42 <_dtoa_r+0x82a>
 800e094:	463e      	mov	r6, r7
 800e096:	9801      	ldr	r0, [sp, #4]
 800e098:	4621      	mov	r1, r4
 800e09a:	f7ff fa32 	bl	800d502 <quorem>
 800e09e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800e0a2:	f806 ab01 	strb.w	sl, [r6], #1
 800e0a6:	1bf2      	subs	r2, r6, r7
 800e0a8:	4593      	cmp	fp, r2
 800e0aa:	ddb4      	ble.n	800e016 <_dtoa_r+0x9fe>
 800e0ac:	9901      	ldr	r1, [sp, #4]
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	220a      	movs	r2, #10
 800e0b2:	4648      	mov	r0, r9
 800e0b4:	f000 f968 	bl	800e388 <__multadd>
 800e0b8:	9001      	str	r0, [sp, #4]
 800e0ba:	e7ec      	b.n	800e096 <_dtoa_r+0xa7e>
 800e0bc:	0800fe08 	.word	0x0800fe08
 800e0c0:	0800fd8c 	.word	0x0800fd8c

0800e0c4 <_free_r>:
 800e0c4:	b538      	push	{r3, r4, r5, lr}
 800e0c6:	4605      	mov	r5, r0
 800e0c8:	2900      	cmp	r1, #0
 800e0ca:	d041      	beq.n	800e150 <_free_r+0x8c>
 800e0cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0d0:	1f0c      	subs	r4, r1, #4
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	bfb8      	it	lt
 800e0d6:	18e4      	addlt	r4, r4, r3
 800e0d8:	f000 f8e8 	bl	800e2ac <__malloc_lock>
 800e0dc:	4a1d      	ldr	r2, [pc, #116]	@ (800e154 <_free_r+0x90>)
 800e0de:	6813      	ldr	r3, [r2, #0]
 800e0e0:	b933      	cbnz	r3, 800e0f0 <_free_r+0x2c>
 800e0e2:	6063      	str	r3, [r4, #4]
 800e0e4:	6014      	str	r4, [r2, #0]
 800e0e6:	4628      	mov	r0, r5
 800e0e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0ec:	f000 b8e4 	b.w	800e2b8 <__malloc_unlock>
 800e0f0:	42a3      	cmp	r3, r4
 800e0f2:	d908      	bls.n	800e106 <_free_r+0x42>
 800e0f4:	6820      	ldr	r0, [r4, #0]
 800e0f6:	1821      	adds	r1, r4, r0
 800e0f8:	428b      	cmp	r3, r1
 800e0fa:	bf01      	itttt	eq
 800e0fc:	6819      	ldreq	r1, [r3, #0]
 800e0fe:	685b      	ldreq	r3, [r3, #4]
 800e100:	1809      	addeq	r1, r1, r0
 800e102:	6021      	streq	r1, [r4, #0]
 800e104:	e7ed      	b.n	800e0e2 <_free_r+0x1e>
 800e106:	461a      	mov	r2, r3
 800e108:	685b      	ldr	r3, [r3, #4]
 800e10a:	b10b      	cbz	r3, 800e110 <_free_r+0x4c>
 800e10c:	42a3      	cmp	r3, r4
 800e10e:	d9fa      	bls.n	800e106 <_free_r+0x42>
 800e110:	6811      	ldr	r1, [r2, #0]
 800e112:	1850      	adds	r0, r2, r1
 800e114:	42a0      	cmp	r0, r4
 800e116:	d10b      	bne.n	800e130 <_free_r+0x6c>
 800e118:	6820      	ldr	r0, [r4, #0]
 800e11a:	4401      	add	r1, r0
 800e11c:	1850      	adds	r0, r2, r1
 800e11e:	4283      	cmp	r3, r0
 800e120:	6011      	str	r1, [r2, #0]
 800e122:	d1e0      	bne.n	800e0e6 <_free_r+0x22>
 800e124:	6818      	ldr	r0, [r3, #0]
 800e126:	685b      	ldr	r3, [r3, #4]
 800e128:	6053      	str	r3, [r2, #4]
 800e12a:	4408      	add	r0, r1
 800e12c:	6010      	str	r0, [r2, #0]
 800e12e:	e7da      	b.n	800e0e6 <_free_r+0x22>
 800e130:	d902      	bls.n	800e138 <_free_r+0x74>
 800e132:	230c      	movs	r3, #12
 800e134:	602b      	str	r3, [r5, #0]
 800e136:	e7d6      	b.n	800e0e6 <_free_r+0x22>
 800e138:	6820      	ldr	r0, [r4, #0]
 800e13a:	1821      	adds	r1, r4, r0
 800e13c:	428b      	cmp	r3, r1
 800e13e:	bf04      	itt	eq
 800e140:	6819      	ldreq	r1, [r3, #0]
 800e142:	685b      	ldreq	r3, [r3, #4]
 800e144:	6063      	str	r3, [r4, #4]
 800e146:	bf04      	itt	eq
 800e148:	1809      	addeq	r1, r1, r0
 800e14a:	6021      	streq	r1, [r4, #0]
 800e14c:	6054      	str	r4, [r2, #4]
 800e14e:	e7ca      	b.n	800e0e6 <_free_r+0x22>
 800e150:	bd38      	pop	{r3, r4, r5, pc}
 800e152:	bf00      	nop
 800e154:	24002830 	.word	0x24002830

0800e158 <malloc>:
 800e158:	4b02      	ldr	r3, [pc, #8]	@ (800e164 <malloc+0xc>)
 800e15a:	4601      	mov	r1, r0
 800e15c:	6818      	ldr	r0, [r3, #0]
 800e15e:	f000 b825 	b.w	800e1ac <_malloc_r>
 800e162:	bf00      	nop
 800e164:	24000024 	.word	0x24000024

0800e168 <sbrk_aligned>:
 800e168:	b570      	push	{r4, r5, r6, lr}
 800e16a:	4e0f      	ldr	r6, [pc, #60]	@ (800e1a8 <sbrk_aligned+0x40>)
 800e16c:	460c      	mov	r4, r1
 800e16e:	6831      	ldr	r1, [r6, #0]
 800e170:	4605      	mov	r5, r0
 800e172:	b911      	cbnz	r1, 800e17a <sbrk_aligned+0x12>
 800e174:	f000 fcd4 	bl	800eb20 <_sbrk_r>
 800e178:	6030      	str	r0, [r6, #0]
 800e17a:	4621      	mov	r1, r4
 800e17c:	4628      	mov	r0, r5
 800e17e:	f000 fccf 	bl	800eb20 <_sbrk_r>
 800e182:	1c43      	adds	r3, r0, #1
 800e184:	d103      	bne.n	800e18e <sbrk_aligned+0x26>
 800e186:	f04f 34ff 	mov.w	r4, #4294967295
 800e18a:	4620      	mov	r0, r4
 800e18c:	bd70      	pop	{r4, r5, r6, pc}
 800e18e:	1cc4      	adds	r4, r0, #3
 800e190:	f024 0403 	bic.w	r4, r4, #3
 800e194:	42a0      	cmp	r0, r4
 800e196:	d0f8      	beq.n	800e18a <sbrk_aligned+0x22>
 800e198:	1a21      	subs	r1, r4, r0
 800e19a:	4628      	mov	r0, r5
 800e19c:	f000 fcc0 	bl	800eb20 <_sbrk_r>
 800e1a0:	3001      	adds	r0, #1
 800e1a2:	d1f2      	bne.n	800e18a <sbrk_aligned+0x22>
 800e1a4:	e7ef      	b.n	800e186 <sbrk_aligned+0x1e>
 800e1a6:	bf00      	nop
 800e1a8:	2400282c 	.word	0x2400282c

0800e1ac <_malloc_r>:
 800e1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1b0:	1ccd      	adds	r5, r1, #3
 800e1b2:	f025 0503 	bic.w	r5, r5, #3
 800e1b6:	3508      	adds	r5, #8
 800e1b8:	2d0c      	cmp	r5, #12
 800e1ba:	bf38      	it	cc
 800e1bc:	250c      	movcc	r5, #12
 800e1be:	2d00      	cmp	r5, #0
 800e1c0:	4606      	mov	r6, r0
 800e1c2:	db01      	blt.n	800e1c8 <_malloc_r+0x1c>
 800e1c4:	42a9      	cmp	r1, r5
 800e1c6:	d904      	bls.n	800e1d2 <_malloc_r+0x26>
 800e1c8:	230c      	movs	r3, #12
 800e1ca:	6033      	str	r3, [r6, #0]
 800e1cc:	2000      	movs	r0, #0
 800e1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e2a8 <_malloc_r+0xfc>
 800e1d6:	f000 f869 	bl	800e2ac <__malloc_lock>
 800e1da:	f8d8 3000 	ldr.w	r3, [r8]
 800e1de:	461c      	mov	r4, r3
 800e1e0:	bb44      	cbnz	r4, 800e234 <_malloc_r+0x88>
 800e1e2:	4629      	mov	r1, r5
 800e1e4:	4630      	mov	r0, r6
 800e1e6:	f7ff ffbf 	bl	800e168 <sbrk_aligned>
 800e1ea:	1c43      	adds	r3, r0, #1
 800e1ec:	4604      	mov	r4, r0
 800e1ee:	d158      	bne.n	800e2a2 <_malloc_r+0xf6>
 800e1f0:	f8d8 4000 	ldr.w	r4, [r8]
 800e1f4:	4627      	mov	r7, r4
 800e1f6:	2f00      	cmp	r7, #0
 800e1f8:	d143      	bne.n	800e282 <_malloc_r+0xd6>
 800e1fa:	2c00      	cmp	r4, #0
 800e1fc:	d04b      	beq.n	800e296 <_malloc_r+0xea>
 800e1fe:	6823      	ldr	r3, [r4, #0]
 800e200:	4639      	mov	r1, r7
 800e202:	4630      	mov	r0, r6
 800e204:	eb04 0903 	add.w	r9, r4, r3
 800e208:	f000 fc8a 	bl	800eb20 <_sbrk_r>
 800e20c:	4581      	cmp	r9, r0
 800e20e:	d142      	bne.n	800e296 <_malloc_r+0xea>
 800e210:	6821      	ldr	r1, [r4, #0]
 800e212:	1a6d      	subs	r5, r5, r1
 800e214:	4629      	mov	r1, r5
 800e216:	4630      	mov	r0, r6
 800e218:	f7ff ffa6 	bl	800e168 <sbrk_aligned>
 800e21c:	3001      	adds	r0, #1
 800e21e:	d03a      	beq.n	800e296 <_malloc_r+0xea>
 800e220:	6823      	ldr	r3, [r4, #0]
 800e222:	442b      	add	r3, r5
 800e224:	6023      	str	r3, [r4, #0]
 800e226:	f8d8 3000 	ldr.w	r3, [r8]
 800e22a:	685a      	ldr	r2, [r3, #4]
 800e22c:	bb62      	cbnz	r2, 800e288 <_malloc_r+0xdc>
 800e22e:	f8c8 7000 	str.w	r7, [r8]
 800e232:	e00f      	b.n	800e254 <_malloc_r+0xa8>
 800e234:	6822      	ldr	r2, [r4, #0]
 800e236:	1b52      	subs	r2, r2, r5
 800e238:	d420      	bmi.n	800e27c <_malloc_r+0xd0>
 800e23a:	2a0b      	cmp	r2, #11
 800e23c:	d917      	bls.n	800e26e <_malloc_r+0xc2>
 800e23e:	1961      	adds	r1, r4, r5
 800e240:	42a3      	cmp	r3, r4
 800e242:	6025      	str	r5, [r4, #0]
 800e244:	bf18      	it	ne
 800e246:	6059      	strne	r1, [r3, #4]
 800e248:	6863      	ldr	r3, [r4, #4]
 800e24a:	bf08      	it	eq
 800e24c:	f8c8 1000 	streq.w	r1, [r8]
 800e250:	5162      	str	r2, [r4, r5]
 800e252:	604b      	str	r3, [r1, #4]
 800e254:	4630      	mov	r0, r6
 800e256:	f000 f82f 	bl	800e2b8 <__malloc_unlock>
 800e25a:	f104 000b 	add.w	r0, r4, #11
 800e25e:	1d23      	adds	r3, r4, #4
 800e260:	f020 0007 	bic.w	r0, r0, #7
 800e264:	1ac2      	subs	r2, r0, r3
 800e266:	bf1c      	itt	ne
 800e268:	1a1b      	subne	r3, r3, r0
 800e26a:	50a3      	strne	r3, [r4, r2]
 800e26c:	e7af      	b.n	800e1ce <_malloc_r+0x22>
 800e26e:	6862      	ldr	r2, [r4, #4]
 800e270:	42a3      	cmp	r3, r4
 800e272:	bf0c      	ite	eq
 800e274:	f8c8 2000 	streq.w	r2, [r8]
 800e278:	605a      	strne	r2, [r3, #4]
 800e27a:	e7eb      	b.n	800e254 <_malloc_r+0xa8>
 800e27c:	4623      	mov	r3, r4
 800e27e:	6864      	ldr	r4, [r4, #4]
 800e280:	e7ae      	b.n	800e1e0 <_malloc_r+0x34>
 800e282:	463c      	mov	r4, r7
 800e284:	687f      	ldr	r7, [r7, #4]
 800e286:	e7b6      	b.n	800e1f6 <_malloc_r+0x4a>
 800e288:	461a      	mov	r2, r3
 800e28a:	685b      	ldr	r3, [r3, #4]
 800e28c:	42a3      	cmp	r3, r4
 800e28e:	d1fb      	bne.n	800e288 <_malloc_r+0xdc>
 800e290:	2300      	movs	r3, #0
 800e292:	6053      	str	r3, [r2, #4]
 800e294:	e7de      	b.n	800e254 <_malloc_r+0xa8>
 800e296:	230c      	movs	r3, #12
 800e298:	6033      	str	r3, [r6, #0]
 800e29a:	4630      	mov	r0, r6
 800e29c:	f000 f80c 	bl	800e2b8 <__malloc_unlock>
 800e2a0:	e794      	b.n	800e1cc <_malloc_r+0x20>
 800e2a2:	6005      	str	r5, [r0, #0]
 800e2a4:	e7d6      	b.n	800e254 <_malloc_r+0xa8>
 800e2a6:	bf00      	nop
 800e2a8:	24002830 	.word	0x24002830

0800e2ac <__malloc_lock>:
 800e2ac:	4801      	ldr	r0, [pc, #4]	@ (800e2b4 <__malloc_lock+0x8>)
 800e2ae:	f7ff b926 	b.w	800d4fe <__retarget_lock_acquire_recursive>
 800e2b2:	bf00      	nop
 800e2b4:	24002828 	.word	0x24002828

0800e2b8 <__malloc_unlock>:
 800e2b8:	4801      	ldr	r0, [pc, #4]	@ (800e2c0 <__malloc_unlock+0x8>)
 800e2ba:	f7ff b921 	b.w	800d500 <__retarget_lock_release_recursive>
 800e2be:	bf00      	nop
 800e2c0:	24002828 	.word	0x24002828

0800e2c4 <_Balloc>:
 800e2c4:	b570      	push	{r4, r5, r6, lr}
 800e2c6:	69c6      	ldr	r6, [r0, #28]
 800e2c8:	4604      	mov	r4, r0
 800e2ca:	460d      	mov	r5, r1
 800e2cc:	b976      	cbnz	r6, 800e2ec <_Balloc+0x28>
 800e2ce:	2010      	movs	r0, #16
 800e2d0:	f7ff ff42 	bl	800e158 <malloc>
 800e2d4:	4602      	mov	r2, r0
 800e2d6:	61e0      	str	r0, [r4, #28]
 800e2d8:	b920      	cbnz	r0, 800e2e4 <_Balloc+0x20>
 800e2da:	4b18      	ldr	r3, [pc, #96]	@ (800e33c <_Balloc+0x78>)
 800e2dc:	4818      	ldr	r0, [pc, #96]	@ (800e340 <_Balloc+0x7c>)
 800e2de:	216b      	movs	r1, #107	@ 0x6b
 800e2e0:	f000 fc3c 	bl	800eb5c <__assert_func>
 800e2e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2e8:	6006      	str	r6, [r0, #0]
 800e2ea:	60c6      	str	r6, [r0, #12]
 800e2ec:	69e6      	ldr	r6, [r4, #28]
 800e2ee:	68f3      	ldr	r3, [r6, #12]
 800e2f0:	b183      	cbz	r3, 800e314 <_Balloc+0x50>
 800e2f2:	69e3      	ldr	r3, [r4, #28]
 800e2f4:	68db      	ldr	r3, [r3, #12]
 800e2f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e2fa:	b9b8      	cbnz	r0, 800e32c <_Balloc+0x68>
 800e2fc:	2101      	movs	r1, #1
 800e2fe:	fa01 f605 	lsl.w	r6, r1, r5
 800e302:	1d72      	adds	r2, r6, #5
 800e304:	0092      	lsls	r2, r2, #2
 800e306:	4620      	mov	r0, r4
 800e308:	f000 fc46 	bl	800eb98 <_calloc_r>
 800e30c:	b160      	cbz	r0, 800e328 <_Balloc+0x64>
 800e30e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e312:	e00e      	b.n	800e332 <_Balloc+0x6e>
 800e314:	2221      	movs	r2, #33	@ 0x21
 800e316:	2104      	movs	r1, #4
 800e318:	4620      	mov	r0, r4
 800e31a:	f000 fc3d 	bl	800eb98 <_calloc_r>
 800e31e:	69e3      	ldr	r3, [r4, #28]
 800e320:	60f0      	str	r0, [r6, #12]
 800e322:	68db      	ldr	r3, [r3, #12]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d1e4      	bne.n	800e2f2 <_Balloc+0x2e>
 800e328:	2000      	movs	r0, #0
 800e32a:	bd70      	pop	{r4, r5, r6, pc}
 800e32c:	6802      	ldr	r2, [r0, #0]
 800e32e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e332:	2300      	movs	r3, #0
 800e334:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e338:	e7f7      	b.n	800e32a <_Balloc+0x66>
 800e33a:	bf00      	nop
 800e33c:	0800fd99 	.word	0x0800fd99
 800e340:	0800fe19 	.word	0x0800fe19

0800e344 <_Bfree>:
 800e344:	b570      	push	{r4, r5, r6, lr}
 800e346:	69c6      	ldr	r6, [r0, #28]
 800e348:	4605      	mov	r5, r0
 800e34a:	460c      	mov	r4, r1
 800e34c:	b976      	cbnz	r6, 800e36c <_Bfree+0x28>
 800e34e:	2010      	movs	r0, #16
 800e350:	f7ff ff02 	bl	800e158 <malloc>
 800e354:	4602      	mov	r2, r0
 800e356:	61e8      	str	r0, [r5, #28]
 800e358:	b920      	cbnz	r0, 800e364 <_Bfree+0x20>
 800e35a:	4b09      	ldr	r3, [pc, #36]	@ (800e380 <_Bfree+0x3c>)
 800e35c:	4809      	ldr	r0, [pc, #36]	@ (800e384 <_Bfree+0x40>)
 800e35e:	218f      	movs	r1, #143	@ 0x8f
 800e360:	f000 fbfc 	bl	800eb5c <__assert_func>
 800e364:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e368:	6006      	str	r6, [r0, #0]
 800e36a:	60c6      	str	r6, [r0, #12]
 800e36c:	b13c      	cbz	r4, 800e37e <_Bfree+0x3a>
 800e36e:	69eb      	ldr	r3, [r5, #28]
 800e370:	6862      	ldr	r2, [r4, #4]
 800e372:	68db      	ldr	r3, [r3, #12]
 800e374:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e378:	6021      	str	r1, [r4, #0]
 800e37a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e37e:	bd70      	pop	{r4, r5, r6, pc}
 800e380:	0800fd99 	.word	0x0800fd99
 800e384:	0800fe19 	.word	0x0800fe19

0800e388 <__multadd>:
 800e388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e38c:	690d      	ldr	r5, [r1, #16]
 800e38e:	4607      	mov	r7, r0
 800e390:	460c      	mov	r4, r1
 800e392:	461e      	mov	r6, r3
 800e394:	f101 0c14 	add.w	ip, r1, #20
 800e398:	2000      	movs	r0, #0
 800e39a:	f8dc 3000 	ldr.w	r3, [ip]
 800e39e:	b299      	uxth	r1, r3
 800e3a0:	fb02 6101 	mla	r1, r2, r1, r6
 800e3a4:	0c1e      	lsrs	r6, r3, #16
 800e3a6:	0c0b      	lsrs	r3, r1, #16
 800e3a8:	fb02 3306 	mla	r3, r2, r6, r3
 800e3ac:	b289      	uxth	r1, r1
 800e3ae:	3001      	adds	r0, #1
 800e3b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e3b4:	4285      	cmp	r5, r0
 800e3b6:	f84c 1b04 	str.w	r1, [ip], #4
 800e3ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e3be:	dcec      	bgt.n	800e39a <__multadd+0x12>
 800e3c0:	b30e      	cbz	r6, 800e406 <__multadd+0x7e>
 800e3c2:	68a3      	ldr	r3, [r4, #8]
 800e3c4:	42ab      	cmp	r3, r5
 800e3c6:	dc19      	bgt.n	800e3fc <__multadd+0x74>
 800e3c8:	6861      	ldr	r1, [r4, #4]
 800e3ca:	4638      	mov	r0, r7
 800e3cc:	3101      	adds	r1, #1
 800e3ce:	f7ff ff79 	bl	800e2c4 <_Balloc>
 800e3d2:	4680      	mov	r8, r0
 800e3d4:	b928      	cbnz	r0, 800e3e2 <__multadd+0x5a>
 800e3d6:	4602      	mov	r2, r0
 800e3d8:	4b0c      	ldr	r3, [pc, #48]	@ (800e40c <__multadd+0x84>)
 800e3da:	480d      	ldr	r0, [pc, #52]	@ (800e410 <__multadd+0x88>)
 800e3dc:	21ba      	movs	r1, #186	@ 0xba
 800e3de:	f000 fbbd 	bl	800eb5c <__assert_func>
 800e3e2:	6922      	ldr	r2, [r4, #16]
 800e3e4:	3202      	adds	r2, #2
 800e3e6:	f104 010c 	add.w	r1, r4, #12
 800e3ea:	0092      	lsls	r2, r2, #2
 800e3ec:	300c      	adds	r0, #12
 800e3ee:	f000 fba7 	bl	800eb40 <memcpy>
 800e3f2:	4621      	mov	r1, r4
 800e3f4:	4638      	mov	r0, r7
 800e3f6:	f7ff ffa5 	bl	800e344 <_Bfree>
 800e3fa:	4644      	mov	r4, r8
 800e3fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e400:	3501      	adds	r5, #1
 800e402:	615e      	str	r6, [r3, #20]
 800e404:	6125      	str	r5, [r4, #16]
 800e406:	4620      	mov	r0, r4
 800e408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e40c:	0800fe08 	.word	0x0800fe08
 800e410:	0800fe19 	.word	0x0800fe19

0800e414 <__hi0bits>:
 800e414:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e418:	4603      	mov	r3, r0
 800e41a:	bf36      	itet	cc
 800e41c:	0403      	lslcc	r3, r0, #16
 800e41e:	2000      	movcs	r0, #0
 800e420:	2010      	movcc	r0, #16
 800e422:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e426:	bf3c      	itt	cc
 800e428:	021b      	lslcc	r3, r3, #8
 800e42a:	3008      	addcc	r0, #8
 800e42c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e430:	bf3c      	itt	cc
 800e432:	011b      	lslcc	r3, r3, #4
 800e434:	3004      	addcc	r0, #4
 800e436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e43a:	bf3c      	itt	cc
 800e43c:	009b      	lslcc	r3, r3, #2
 800e43e:	3002      	addcc	r0, #2
 800e440:	2b00      	cmp	r3, #0
 800e442:	db05      	blt.n	800e450 <__hi0bits+0x3c>
 800e444:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e448:	f100 0001 	add.w	r0, r0, #1
 800e44c:	bf08      	it	eq
 800e44e:	2020      	moveq	r0, #32
 800e450:	4770      	bx	lr

0800e452 <__lo0bits>:
 800e452:	6803      	ldr	r3, [r0, #0]
 800e454:	4602      	mov	r2, r0
 800e456:	f013 0007 	ands.w	r0, r3, #7
 800e45a:	d00b      	beq.n	800e474 <__lo0bits+0x22>
 800e45c:	07d9      	lsls	r1, r3, #31
 800e45e:	d421      	bmi.n	800e4a4 <__lo0bits+0x52>
 800e460:	0798      	lsls	r0, r3, #30
 800e462:	bf49      	itett	mi
 800e464:	085b      	lsrmi	r3, r3, #1
 800e466:	089b      	lsrpl	r3, r3, #2
 800e468:	2001      	movmi	r0, #1
 800e46a:	6013      	strmi	r3, [r2, #0]
 800e46c:	bf5c      	itt	pl
 800e46e:	6013      	strpl	r3, [r2, #0]
 800e470:	2002      	movpl	r0, #2
 800e472:	4770      	bx	lr
 800e474:	b299      	uxth	r1, r3
 800e476:	b909      	cbnz	r1, 800e47c <__lo0bits+0x2a>
 800e478:	0c1b      	lsrs	r3, r3, #16
 800e47a:	2010      	movs	r0, #16
 800e47c:	b2d9      	uxtb	r1, r3
 800e47e:	b909      	cbnz	r1, 800e484 <__lo0bits+0x32>
 800e480:	3008      	adds	r0, #8
 800e482:	0a1b      	lsrs	r3, r3, #8
 800e484:	0719      	lsls	r1, r3, #28
 800e486:	bf04      	itt	eq
 800e488:	091b      	lsreq	r3, r3, #4
 800e48a:	3004      	addeq	r0, #4
 800e48c:	0799      	lsls	r1, r3, #30
 800e48e:	bf04      	itt	eq
 800e490:	089b      	lsreq	r3, r3, #2
 800e492:	3002      	addeq	r0, #2
 800e494:	07d9      	lsls	r1, r3, #31
 800e496:	d403      	bmi.n	800e4a0 <__lo0bits+0x4e>
 800e498:	085b      	lsrs	r3, r3, #1
 800e49a:	f100 0001 	add.w	r0, r0, #1
 800e49e:	d003      	beq.n	800e4a8 <__lo0bits+0x56>
 800e4a0:	6013      	str	r3, [r2, #0]
 800e4a2:	4770      	bx	lr
 800e4a4:	2000      	movs	r0, #0
 800e4a6:	4770      	bx	lr
 800e4a8:	2020      	movs	r0, #32
 800e4aa:	4770      	bx	lr

0800e4ac <__i2b>:
 800e4ac:	b510      	push	{r4, lr}
 800e4ae:	460c      	mov	r4, r1
 800e4b0:	2101      	movs	r1, #1
 800e4b2:	f7ff ff07 	bl	800e2c4 <_Balloc>
 800e4b6:	4602      	mov	r2, r0
 800e4b8:	b928      	cbnz	r0, 800e4c6 <__i2b+0x1a>
 800e4ba:	4b05      	ldr	r3, [pc, #20]	@ (800e4d0 <__i2b+0x24>)
 800e4bc:	4805      	ldr	r0, [pc, #20]	@ (800e4d4 <__i2b+0x28>)
 800e4be:	f240 1145 	movw	r1, #325	@ 0x145
 800e4c2:	f000 fb4b 	bl	800eb5c <__assert_func>
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	6144      	str	r4, [r0, #20]
 800e4ca:	6103      	str	r3, [r0, #16]
 800e4cc:	bd10      	pop	{r4, pc}
 800e4ce:	bf00      	nop
 800e4d0:	0800fe08 	.word	0x0800fe08
 800e4d4:	0800fe19 	.word	0x0800fe19

0800e4d8 <__multiply>:
 800e4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4dc:	4614      	mov	r4, r2
 800e4de:	690a      	ldr	r2, [r1, #16]
 800e4e0:	6923      	ldr	r3, [r4, #16]
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	bfa8      	it	ge
 800e4e6:	4623      	movge	r3, r4
 800e4e8:	460f      	mov	r7, r1
 800e4ea:	bfa4      	itt	ge
 800e4ec:	460c      	movge	r4, r1
 800e4ee:	461f      	movge	r7, r3
 800e4f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e4f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e4f8:	68a3      	ldr	r3, [r4, #8]
 800e4fa:	6861      	ldr	r1, [r4, #4]
 800e4fc:	eb0a 0609 	add.w	r6, sl, r9
 800e500:	42b3      	cmp	r3, r6
 800e502:	b085      	sub	sp, #20
 800e504:	bfb8      	it	lt
 800e506:	3101      	addlt	r1, #1
 800e508:	f7ff fedc 	bl	800e2c4 <_Balloc>
 800e50c:	b930      	cbnz	r0, 800e51c <__multiply+0x44>
 800e50e:	4602      	mov	r2, r0
 800e510:	4b44      	ldr	r3, [pc, #272]	@ (800e624 <__multiply+0x14c>)
 800e512:	4845      	ldr	r0, [pc, #276]	@ (800e628 <__multiply+0x150>)
 800e514:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e518:	f000 fb20 	bl	800eb5c <__assert_func>
 800e51c:	f100 0514 	add.w	r5, r0, #20
 800e520:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e524:	462b      	mov	r3, r5
 800e526:	2200      	movs	r2, #0
 800e528:	4543      	cmp	r3, r8
 800e52a:	d321      	bcc.n	800e570 <__multiply+0x98>
 800e52c:	f107 0114 	add.w	r1, r7, #20
 800e530:	f104 0214 	add.w	r2, r4, #20
 800e534:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e538:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e53c:	9302      	str	r3, [sp, #8]
 800e53e:	1b13      	subs	r3, r2, r4
 800e540:	3b15      	subs	r3, #21
 800e542:	f023 0303 	bic.w	r3, r3, #3
 800e546:	3304      	adds	r3, #4
 800e548:	f104 0715 	add.w	r7, r4, #21
 800e54c:	42ba      	cmp	r2, r7
 800e54e:	bf38      	it	cc
 800e550:	2304      	movcc	r3, #4
 800e552:	9301      	str	r3, [sp, #4]
 800e554:	9b02      	ldr	r3, [sp, #8]
 800e556:	9103      	str	r1, [sp, #12]
 800e558:	428b      	cmp	r3, r1
 800e55a:	d80c      	bhi.n	800e576 <__multiply+0x9e>
 800e55c:	2e00      	cmp	r6, #0
 800e55e:	dd03      	ble.n	800e568 <__multiply+0x90>
 800e560:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e564:	2b00      	cmp	r3, #0
 800e566:	d05b      	beq.n	800e620 <__multiply+0x148>
 800e568:	6106      	str	r6, [r0, #16]
 800e56a:	b005      	add	sp, #20
 800e56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e570:	f843 2b04 	str.w	r2, [r3], #4
 800e574:	e7d8      	b.n	800e528 <__multiply+0x50>
 800e576:	f8b1 a000 	ldrh.w	sl, [r1]
 800e57a:	f1ba 0f00 	cmp.w	sl, #0
 800e57e:	d024      	beq.n	800e5ca <__multiply+0xf2>
 800e580:	f104 0e14 	add.w	lr, r4, #20
 800e584:	46a9      	mov	r9, r5
 800e586:	f04f 0c00 	mov.w	ip, #0
 800e58a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e58e:	f8d9 3000 	ldr.w	r3, [r9]
 800e592:	fa1f fb87 	uxth.w	fp, r7
 800e596:	b29b      	uxth	r3, r3
 800e598:	fb0a 330b 	mla	r3, sl, fp, r3
 800e59c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e5a0:	f8d9 7000 	ldr.w	r7, [r9]
 800e5a4:	4463      	add	r3, ip
 800e5a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e5aa:	fb0a c70b 	mla	r7, sl, fp, ip
 800e5ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e5b2:	b29b      	uxth	r3, r3
 800e5b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e5b8:	4572      	cmp	r2, lr
 800e5ba:	f849 3b04 	str.w	r3, [r9], #4
 800e5be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e5c2:	d8e2      	bhi.n	800e58a <__multiply+0xb2>
 800e5c4:	9b01      	ldr	r3, [sp, #4]
 800e5c6:	f845 c003 	str.w	ip, [r5, r3]
 800e5ca:	9b03      	ldr	r3, [sp, #12]
 800e5cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e5d0:	3104      	adds	r1, #4
 800e5d2:	f1b9 0f00 	cmp.w	r9, #0
 800e5d6:	d021      	beq.n	800e61c <__multiply+0x144>
 800e5d8:	682b      	ldr	r3, [r5, #0]
 800e5da:	f104 0c14 	add.w	ip, r4, #20
 800e5de:	46ae      	mov	lr, r5
 800e5e0:	f04f 0a00 	mov.w	sl, #0
 800e5e4:	f8bc b000 	ldrh.w	fp, [ip]
 800e5e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e5ec:	fb09 770b 	mla	r7, r9, fp, r7
 800e5f0:	4457      	add	r7, sl
 800e5f2:	b29b      	uxth	r3, r3
 800e5f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e5f8:	f84e 3b04 	str.w	r3, [lr], #4
 800e5fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e600:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e604:	f8be 3000 	ldrh.w	r3, [lr]
 800e608:	fb09 330a 	mla	r3, r9, sl, r3
 800e60c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e610:	4562      	cmp	r2, ip
 800e612:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e616:	d8e5      	bhi.n	800e5e4 <__multiply+0x10c>
 800e618:	9f01      	ldr	r7, [sp, #4]
 800e61a:	51eb      	str	r3, [r5, r7]
 800e61c:	3504      	adds	r5, #4
 800e61e:	e799      	b.n	800e554 <__multiply+0x7c>
 800e620:	3e01      	subs	r6, #1
 800e622:	e79b      	b.n	800e55c <__multiply+0x84>
 800e624:	0800fe08 	.word	0x0800fe08
 800e628:	0800fe19 	.word	0x0800fe19

0800e62c <__pow5mult>:
 800e62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e630:	4615      	mov	r5, r2
 800e632:	f012 0203 	ands.w	r2, r2, #3
 800e636:	4607      	mov	r7, r0
 800e638:	460e      	mov	r6, r1
 800e63a:	d007      	beq.n	800e64c <__pow5mult+0x20>
 800e63c:	4c25      	ldr	r4, [pc, #148]	@ (800e6d4 <__pow5mult+0xa8>)
 800e63e:	3a01      	subs	r2, #1
 800e640:	2300      	movs	r3, #0
 800e642:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e646:	f7ff fe9f 	bl	800e388 <__multadd>
 800e64a:	4606      	mov	r6, r0
 800e64c:	10ad      	asrs	r5, r5, #2
 800e64e:	d03d      	beq.n	800e6cc <__pow5mult+0xa0>
 800e650:	69fc      	ldr	r4, [r7, #28]
 800e652:	b97c      	cbnz	r4, 800e674 <__pow5mult+0x48>
 800e654:	2010      	movs	r0, #16
 800e656:	f7ff fd7f 	bl	800e158 <malloc>
 800e65a:	4602      	mov	r2, r0
 800e65c:	61f8      	str	r0, [r7, #28]
 800e65e:	b928      	cbnz	r0, 800e66c <__pow5mult+0x40>
 800e660:	4b1d      	ldr	r3, [pc, #116]	@ (800e6d8 <__pow5mult+0xac>)
 800e662:	481e      	ldr	r0, [pc, #120]	@ (800e6dc <__pow5mult+0xb0>)
 800e664:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e668:	f000 fa78 	bl	800eb5c <__assert_func>
 800e66c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e670:	6004      	str	r4, [r0, #0]
 800e672:	60c4      	str	r4, [r0, #12]
 800e674:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e678:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e67c:	b94c      	cbnz	r4, 800e692 <__pow5mult+0x66>
 800e67e:	f240 2171 	movw	r1, #625	@ 0x271
 800e682:	4638      	mov	r0, r7
 800e684:	f7ff ff12 	bl	800e4ac <__i2b>
 800e688:	2300      	movs	r3, #0
 800e68a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e68e:	4604      	mov	r4, r0
 800e690:	6003      	str	r3, [r0, #0]
 800e692:	f04f 0900 	mov.w	r9, #0
 800e696:	07eb      	lsls	r3, r5, #31
 800e698:	d50a      	bpl.n	800e6b0 <__pow5mult+0x84>
 800e69a:	4631      	mov	r1, r6
 800e69c:	4622      	mov	r2, r4
 800e69e:	4638      	mov	r0, r7
 800e6a0:	f7ff ff1a 	bl	800e4d8 <__multiply>
 800e6a4:	4631      	mov	r1, r6
 800e6a6:	4680      	mov	r8, r0
 800e6a8:	4638      	mov	r0, r7
 800e6aa:	f7ff fe4b 	bl	800e344 <_Bfree>
 800e6ae:	4646      	mov	r6, r8
 800e6b0:	106d      	asrs	r5, r5, #1
 800e6b2:	d00b      	beq.n	800e6cc <__pow5mult+0xa0>
 800e6b4:	6820      	ldr	r0, [r4, #0]
 800e6b6:	b938      	cbnz	r0, 800e6c8 <__pow5mult+0x9c>
 800e6b8:	4622      	mov	r2, r4
 800e6ba:	4621      	mov	r1, r4
 800e6bc:	4638      	mov	r0, r7
 800e6be:	f7ff ff0b 	bl	800e4d8 <__multiply>
 800e6c2:	6020      	str	r0, [r4, #0]
 800e6c4:	f8c0 9000 	str.w	r9, [r0]
 800e6c8:	4604      	mov	r4, r0
 800e6ca:	e7e4      	b.n	800e696 <__pow5mult+0x6a>
 800e6cc:	4630      	mov	r0, r6
 800e6ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6d2:	bf00      	nop
 800e6d4:	0800fe74 	.word	0x0800fe74
 800e6d8:	0800fd99 	.word	0x0800fd99
 800e6dc:	0800fe19 	.word	0x0800fe19

0800e6e0 <__lshift>:
 800e6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6e4:	460c      	mov	r4, r1
 800e6e6:	6849      	ldr	r1, [r1, #4]
 800e6e8:	6923      	ldr	r3, [r4, #16]
 800e6ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e6ee:	68a3      	ldr	r3, [r4, #8]
 800e6f0:	4607      	mov	r7, r0
 800e6f2:	4691      	mov	r9, r2
 800e6f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e6f8:	f108 0601 	add.w	r6, r8, #1
 800e6fc:	42b3      	cmp	r3, r6
 800e6fe:	db0b      	blt.n	800e718 <__lshift+0x38>
 800e700:	4638      	mov	r0, r7
 800e702:	f7ff fddf 	bl	800e2c4 <_Balloc>
 800e706:	4605      	mov	r5, r0
 800e708:	b948      	cbnz	r0, 800e71e <__lshift+0x3e>
 800e70a:	4602      	mov	r2, r0
 800e70c:	4b28      	ldr	r3, [pc, #160]	@ (800e7b0 <__lshift+0xd0>)
 800e70e:	4829      	ldr	r0, [pc, #164]	@ (800e7b4 <__lshift+0xd4>)
 800e710:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e714:	f000 fa22 	bl	800eb5c <__assert_func>
 800e718:	3101      	adds	r1, #1
 800e71a:	005b      	lsls	r3, r3, #1
 800e71c:	e7ee      	b.n	800e6fc <__lshift+0x1c>
 800e71e:	2300      	movs	r3, #0
 800e720:	f100 0114 	add.w	r1, r0, #20
 800e724:	f100 0210 	add.w	r2, r0, #16
 800e728:	4618      	mov	r0, r3
 800e72a:	4553      	cmp	r3, sl
 800e72c:	db33      	blt.n	800e796 <__lshift+0xb6>
 800e72e:	6920      	ldr	r0, [r4, #16]
 800e730:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e734:	f104 0314 	add.w	r3, r4, #20
 800e738:	f019 091f 	ands.w	r9, r9, #31
 800e73c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e740:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e744:	d02b      	beq.n	800e79e <__lshift+0xbe>
 800e746:	f1c9 0e20 	rsb	lr, r9, #32
 800e74a:	468a      	mov	sl, r1
 800e74c:	2200      	movs	r2, #0
 800e74e:	6818      	ldr	r0, [r3, #0]
 800e750:	fa00 f009 	lsl.w	r0, r0, r9
 800e754:	4310      	orrs	r0, r2
 800e756:	f84a 0b04 	str.w	r0, [sl], #4
 800e75a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e75e:	459c      	cmp	ip, r3
 800e760:	fa22 f20e 	lsr.w	r2, r2, lr
 800e764:	d8f3      	bhi.n	800e74e <__lshift+0x6e>
 800e766:	ebac 0304 	sub.w	r3, ip, r4
 800e76a:	3b15      	subs	r3, #21
 800e76c:	f023 0303 	bic.w	r3, r3, #3
 800e770:	3304      	adds	r3, #4
 800e772:	f104 0015 	add.w	r0, r4, #21
 800e776:	4584      	cmp	ip, r0
 800e778:	bf38      	it	cc
 800e77a:	2304      	movcc	r3, #4
 800e77c:	50ca      	str	r2, [r1, r3]
 800e77e:	b10a      	cbz	r2, 800e784 <__lshift+0xa4>
 800e780:	f108 0602 	add.w	r6, r8, #2
 800e784:	3e01      	subs	r6, #1
 800e786:	4638      	mov	r0, r7
 800e788:	612e      	str	r6, [r5, #16]
 800e78a:	4621      	mov	r1, r4
 800e78c:	f7ff fdda 	bl	800e344 <_Bfree>
 800e790:	4628      	mov	r0, r5
 800e792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e796:	f842 0f04 	str.w	r0, [r2, #4]!
 800e79a:	3301      	adds	r3, #1
 800e79c:	e7c5      	b.n	800e72a <__lshift+0x4a>
 800e79e:	3904      	subs	r1, #4
 800e7a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e7a8:	459c      	cmp	ip, r3
 800e7aa:	d8f9      	bhi.n	800e7a0 <__lshift+0xc0>
 800e7ac:	e7ea      	b.n	800e784 <__lshift+0xa4>
 800e7ae:	bf00      	nop
 800e7b0:	0800fe08 	.word	0x0800fe08
 800e7b4:	0800fe19 	.word	0x0800fe19

0800e7b8 <__mcmp>:
 800e7b8:	690a      	ldr	r2, [r1, #16]
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	6900      	ldr	r0, [r0, #16]
 800e7be:	1a80      	subs	r0, r0, r2
 800e7c0:	b530      	push	{r4, r5, lr}
 800e7c2:	d10e      	bne.n	800e7e2 <__mcmp+0x2a>
 800e7c4:	3314      	adds	r3, #20
 800e7c6:	3114      	adds	r1, #20
 800e7c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e7cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e7d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e7d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e7d8:	4295      	cmp	r5, r2
 800e7da:	d003      	beq.n	800e7e4 <__mcmp+0x2c>
 800e7dc:	d205      	bcs.n	800e7ea <__mcmp+0x32>
 800e7de:	f04f 30ff 	mov.w	r0, #4294967295
 800e7e2:	bd30      	pop	{r4, r5, pc}
 800e7e4:	42a3      	cmp	r3, r4
 800e7e6:	d3f3      	bcc.n	800e7d0 <__mcmp+0x18>
 800e7e8:	e7fb      	b.n	800e7e2 <__mcmp+0x2a>
 800e7ea:	2001      	movs	r0, #1
 800e7ec:	e7f9      	b.n	800e7e2 <__mcmp+0x2a>
	...

0800e7f0 <__mdiff>:
 800e7f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7f4:	4689      	mov	r9, r1
 800e7f6:	4606      	mov	r6, r0
 800e7f8:	4611      	mov	r1, r2
 800e7fa:	4648      	mov	r0, r9
 800e7fc:	4614      	mov	r4, r2
 800e7fe:	f7ff ffdb 	bl	800e7b8 <__mcmp>
 800e802:	1e05      	subs	r5, r0, #0
 800e804:	d112      	bne.n	800e82c <__mdiff+0x3c>
 800e806:	4629      	mov	r1, r5
 800e808:	4630      	mov	r0, r6
 800e80a:	f7ff fd5b 	bl	800e2c4 <_Balloc>
 800e80e:	4602      	mov	r2, r0
 800e810:	b928      	cbnz	r0, 800e81e <__mdiff+0x2e>
 800e812:	4b3f      	ldr	r3, [pc, #252]	@ (800e910 <__mdiff+0x120>)
 800e814:	f240 2137 	movw	r1, #567	@ 0x237
 800e818:	483e      	ldr	r0, [pc, #248]	@ (800e914 <__mdiff+0x124>)
 800e81a:	f000 f99f 	bl	800eb5c <__assert_func>
 800e81e:	2301      	movs	r3, #1
 800e820:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e824:	4610      	mov	r0, r2
 800e826:	b003      	add	sp, #12
 800e828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e82c:	bfbc      	itt	lt
 800e82e:	464b      	movlt	r3, r9
 800e830:	46a1      	movlt	r9, r4
 800e832:	4630      	mov	r0, r6
 800e834:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e838:	bfba      	itte	lt
 800e83a:	461c      	movlt	r4, r3
 800e83c:	2501      	movlt	r5, #1
 800e83e:	2500      	movge	r5, #0
 800e840:	f7ff fd40 	bl	800e2c4 <_Balloc>
 800e844:	4602      	mov	r2, r0
 800e846:	b918      	cbnz	r0, 800e850 <__mdiff+0x60>
 800e848:	4b31      	ldr	r3, [pc, #196]	@ (800e910 <__mdiff+0x120>)
 800e84a:	f240 2145 	movw	r1, #581	@ 0x245
 800e84e:	e7e3      	b.n	800e818 <__mdiff+0x28>
 800e850:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e854:	6926      	ldr	r6, [r4, #16]
 800e856:	60c5      	str	r5, [r0, #12]
 800e858:	f109 0310 	add.w	r3, r9, #16
 800e85c:	f109 0514 	add.w	r5, r9, #20
 800e860:	f104 0e14 	add.w	lr, r4, #20
 800e864:	f100 0b14 	add.w	fp, r0, #20
 800e868:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e86c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e870:	9301      	str	r3, [sp, #4]
 800e872:	46d9      	mov	r9, fp
 800e874:	f04f 0c00 	mov.w	ip, #0
 800e878:	9b01      	ldr	r3, [sp, #4]
 800e87a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e87e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e882:	9301      	str	r3, [sp, #4]
 800e884:	fa1f f38a 	uxth.w	r3, sl
 800e888:	4619      	mov	r1, r3
 800e88a:	b283      	uxth	r3, r0
 800e88c:	1acb      	subs	r3, r1, r3
 800e88e:	0c00      	lsrs	r0, r0, #16
 800e890:	4463      	add	r3, ip
 800e892:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e896:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e89a:	b29b      	uxth	r3, r3
 800e89c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e8a0:	4576      	cmp	r6, lr
 800e8a2:	f849 3b04 	str.w	r3, [r9], #4
 800e8a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e8aa:	d8e5      	bhi.n	800e878 <__mdiff+0x88>
 800e8ac:	1b33      	subs	r3, r6, r4
 800e8ae:	3b15      	subs	r3, #21
 800e8b0:	f023 0303 	bic.w	r3, r3, #3
 800e8b4:	3415      	adds	r4, #21
 800e8b6:	3304      	adds	r3, #4
 800e8b8:	42a6      	cmp	r6, r4
 800e8ba:	bf38      	it	cc
 800e8bc:	2304      	movcc	r3, #4
 800e8be:	441d      	add	r5, r3
 800e8c0:	445b      	add	r3, fp
 800e8c2:	461e      	mov	r6, r3
 800e8c4:	462c      	mov	r4, r5
 800e8c6:	4544      	cmp	r4, r8
 800e8c8:	d30e      	bcc.n	800e8e8 <__mdiff+0xf8>
 800e8ca:	f108 0103 	add.w	r1, r8, #3
 800e8ce:	1b49      	subs	r1, r1, r5
 800e8d0:	f021 0103 	bic.w	r1, r1, #3
 800e8d4:	3d03      	subs	r5, #3
 800e8d6:	45a8      	cmp	r8, r5
 800e8d8:	bf38      	it	cc
 800e8da:	2100      	movcc	r1, #0
 800e8dc:	440b      	add	r3, r1
 800e8de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e8e2:	b191      	cbz	r1, 800e90a <__mdiff+0x11a>
 800e8e4:	6117      	str	r7, [r2, #16]
 800e8e6:	e79d      	b.n	800e824 <__mdiff+0x34>
 800e8e8:	f854 1b04 	ldr.w	r1, [r4], #4
 800e8ec:	46e6      	mov	lr, ip
 800e8ee:	0c08      	lsrs	r0, r1, #16
 800e8f0:	fa1c fc81 	uxtah	ip, ip, r1
 800e8f4:	4471      	add	r1, lr
 800e8f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e8fa:	b289      	uxth	r1, r1
 800e8fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e900:	f846 1b04 	str.w	r1, [r6], #4
 800e904:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e908:	e7dd      	b.n	800e8c6 <__mdiff+0xd6>
 800e90a:	3f01      	subs	r7, #1
 800e90c:	e7e7      	b.n	800e8de <__mdiff+0xee>
 800e90e:	bf00      	nop
 800e910:	0800fe08 	.word	0x0800fe08
 800e914:	0800fe19 	.word	0x0800fe19

0800e918 <__d2b>:
 800e918:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e91c:	460f      	mov	r7, r1
 800e91e:	2101      	movs	r1, #1
 800e920:	ec59 8b10 	vmov	r8, r9, d0
 800e924:	4616      	mov	r6, r2
 800e926:	f7ff fccd 	bl	800e2c4 <_Balloc>
 800e92a:	4604      	mov	r4, r0
 800e92c:	b930      	cbnz	r0, 800e93c <__d2b+0x24>
 800e92e:	4602      	mov	r2, r0
 800e930:	4b23      	ldr	r3, [pc, #140]	@ (800e9c0 <__d2b+0xa8>)
 800e932:	4824      	ldr	r0, [pc, #144]	@ (800e9c4 <__d2b+0xac>)
 800e934:	f240 310f 	movw	r1, #783	@ 0x30f
 800e938:	f000 f910 	bl	800eb5c <__assert_func>
 800e93c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e940:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e944:	b10d      	cbz	r5, 800e94a <__d2b+0x32>
 800e946:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e94a:	9301      	str	r3, [sp, #4]
 800e94c:	f1b8 0300 	subs.w	r3, r8, #0
 800e950:	d023      	beq.n	800e99a <__d2b+0x82>
 800e952:	4668      	mov	r0, sp
 800e954:	9300      	str	r3, [sp, #0]
 800e956:	f7ff fd7c 	bl	800e452 <__lo0bits>
 800e95a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e95e:	b1d0      	cbz	r0, 800e996 <__d2b+0x7e>
 800e960:	f1c0 0320 	rsb	r3, r0, #32
 800e964:	fa02 f303 	lsl.w	r3, r2, r3
 800e968:	430b      	orrs	r3, r1
 800e96a:	40c2      	lsrs	r2, r0
 800e96c:	6163      	str	r3, [r4, #20]
 800e96e:	9201      	str	r2, [sp, #4]
 800e970:	9b01      	ldr	r3, [sp, #4]
 800e972:	61a3      	str	r3, [r4, #24]
 800e974:	2b00      	cmp	r3, #0
 800e976:	bf0c      	ite	eq
 800e978:	2201      	moveq	r2, #1
 800e97a:	2202      	movne	r2, #2
 800e97c:	6122      	str	r2, [r4, #16]
 800e97e:	b1a5      	cbz	r5, 800e9aa <__d2b+0x92>
 800e980:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e984:	4405      	add	r5, r0
 800e986:	603d      	str	r5, [r7, #0]
 800e988:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e98c:	6030      	str	r0, [r6, #0]
 800e98e:	4620      	mov	r0, r4
 800e990:	b003      	add	sp, #12
 800e992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e996:	6161      	str	r1, [r4, #20]
 800e998:	e7ea      	b.n	800e970 <__d2b+0x58>
 800e99a:	a801      	add	r0, sp, #4
 800e99c:	f7ff fd59 	bl	800e452 <__lo0bits>
 800e9a0:	9b01      	ldr	r3, [sp, #4]
 800e9a2:	6163      	str	r3, [r4, #20]
 800e9a4:	3020      	adds	r0, #32
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	e7e8      	b.n	800e97c <__d2b+0x64>
 800e9aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e9ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e9b2:	6038      	str	r0, [r7, #0]
 800e9b4:	6918      	ldr	r0, [r3, #16]
 800e9b6:	f7ff fd2d 	bl	800e414 <__hi0bits>
 800e9ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e9be:	e7e5      	b.n	800e98c <__d2b+0x74>
 800e9c0:	0800fe08 	.word	0x0800fe08
 800e9c4:	0800fe19 	.word	0x0800fe19

0800e9c8 <__sflush_r>:
 800e9c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9d0:	0716      	lsls	r6, r2, #28
 800e9d2:	4605      	mov	r5, r0
 800e9d4:	460c      	mov	r4, r1
 800e9d6:	d454      	bmi.n	800ea82 <__sflush_r+0xba>
 800e9d8:	684b      	ldr	r3, [r1, #4]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	dc02      	bgt.n	800e9e4 <__sflush_r+0x1c>
 800e9de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	dd48      	ble.n	800ea76 <__sflush_r+0xae>
 800e9e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e9e6:	2e00      	cmp	r6, #0
 800e9e8:	d045      	beq.n	800ea76 <__sflush_r+0xae>
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e9f0:	682f      	ldr	r7, [r5, #0]
 800e9f2:	6a21      	ldr	r1, [r4, #32]
 800e9f4:	602b      	str	r3, [r5, #0]
 800e9f6:	d030      	beq.n	800ea5a <__sflush_r+0x92>
 800e9f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e9fa:	89a3      	ldrh	r3, [r4, #12]
 800e9fc:	0759      	lsls	r1, r3, #29
 800e9fe:	d505      	bpl.n	800ea0c <__sflush_r+0x44>
 800ea00:	6863      	ldr	r3, [r4, #4]
 800ea02:	1ad2      	subs	r2, r2, r3
 800ea04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ea06:	b10b      	cbz	r3, 800ea0c <__sflush_r+0x44>
 800ea08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ea0a:	1ad2      	subs	r2, r2, r3
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea10:	6a21      	ldr	r1, [r4, #32]
 800ea12:	4628      	mov	r0, r5
 800ea14:	47b0      	blx	r6
 800ea16:	1c43      	adds	r3, r0, #1
 800ea18:	89a3      	ldrh	r3, [r4, #12]
 800ea1a:	d106      	bne.n	800ea2a <__sflush_r+0x62>
 800ea1c:	6829      	ldr	r1, [r5, #0]
 800ea1e:	291d      	cmp	r1, #29
 800ea20:	d82b      	bhi.n	800ea7a <__sflush_r+0xb2>
 800ea22:	4a2a      	ldr	r2, [pc, #168]	@ (800eacc <__sflush_r+0x104>)
 800ea24:	410a      	asrs	r2, r1
 800ea26:	07d6      	lsls	r6, r2, #31
 800ea28:	d427      	bmi.n	800ea7a <__sflush_r+0xb2>
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	6062      	str	r2, [r4, #4]
 800ea2e:	04d9      	lsls	r1, r3, #19
 800ea30:	6922      	ldr	r2, [r4, #16]
 800ea32:	6022      	str	r2, [r4, #0]
 800ea34:	d504      	bpl.n	800ea40 <__sflush_r+0x78>
 800ea36:	1c42      	adds	r2, r0, #1
 800ea38:	d101      	bne.n	800ea3e <__sflush_r+0x76>
 800ea3a:	682b      	ldr	r3, [r5, #0]
 800ea3c:	b903      	cbnz	r3, 800ea40 <__sflush_r+0x78>
 800ea3e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ea40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea42:	602f      	str	r7, [r5, #0]
 800ea44:	b1b9      	cbz	r1, 800ea76 <__sflush_r+0xae>
 800ea46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea4a:	4299      	cmp	r1, r3
 800ea4c:	d002      	beq.n	800ea54 <__sflush_r+0x8c>
 800ea4e:	4628      	mov	r0, r5
 800ea50:	f7ff fb38 	bl	800e0c4 <_free_r>
 800ea54:	2300      	movs	r3, #0
 800ea56:	6363      	str	r3, [r4, #52]	@ 0x34
 800ea58:	e00d      	b.n	800ea76 <__sflush_r+0xae>
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	4628      	mov	r0, r5
 800ea5e:	47b0      	blx	r6
 800ea60:	4602      	mov	r2, r0
 800ea62:	1c50      	adds	r0, r2, #1
 800ea64:	d1c9      	bne.n	800e9fa <__sflush_r+0x32>
 800ea66:	682b      	ldr	r3, [r5, #0]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d0c6      	beq.n	800e9fa <__sflush_r+0x32>
 800ea6c:	2b1d      	cmp	r3, #29
 800ea6e:	d001      	beq.n	800ea74 <__sflush_r+0xac>
 800ea70:	2b16      	cmp	r3, #22
 800ea72:	d11e      	bne.n	800eab2 <__sflush_r+0xea>
 800ea74:	602f      	str	r7, [r5, #0]
 800ea76:	2000      	movs	r0, #0
 800ea78:	e022      	b.n	800eac0 <__sflush_r+0xf8>
 800ea7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea7e:	b21b      	sxth	r3, r3
 800ea80:	e01b      	b.n	800eaba <__sflush_r+0xf2>
 800ea82:	690f      	ldr	r7, [r1, #16]
 800ea84:	2f00      	cmp	r7, #0
 800ea86:	d0f6      	beq.n	800ea76 <__sflush_r+0xae>
 800ea88:	0793      	lsls	r3, r2, #30
 800ea8a:	680e      	ldr	r6, [r1, #0]
 800ea8c:	bf08      	it	eq
 800ea8e:	694b      	ldreq	r3, [r1, #20]
 800ea90:	600f      	str	r7, [r1, #0]
 800ea92:	bf18      	it	ne
 800ea94:	2300      	movne	r3, #0
 800ea96:	eba6 0807 	sub.w	r8, r6, r7
 800ea9a:	608b      	str	r3, [r1, #8]
 800ea9c:	f1b8 0f00 	cmp.w	r8, #0
 800eaa0:	dde9      	ble.n	800ea76 <__sflush_r+0xae>
 800eaa2:	6a21      	ldr	r1, [r4, #32]
 800eaa4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eaa6:	4643      	mov	r3, r8
 800eaa8:	463a      	mov	r2, r7
 800eaaa:	4628      	mov	r0, r5
 800eaac:	47b0      	blx	r6
 800eaae:	2800      	cmp	r0, #0
 800eab0:	dc08      	bgt.n	800eac4 <__sflush_r+0xfc>
 800eab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eaba:	81a3      	strh	r3, [r4, #12]
 800eabc:	f04f 30ff 	mov.w	r0, #4294967295
 800eac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eac4:	4407      	add	r7, r0
 800eac6:	eba8 0800 	sub.w	r8, r8, r0
 800eaca:	e7e7      	b.n	800ea9c <__sflush_r+0xd4>
 800eacc:	dfbffffe 	.word	0xdfbffffe

0800ead0 <_fflush_r>:
 800ead0:	b538      	push	{r3, r4, r5, lr}
 800ead2:	690b      	ldr	r3, [r1, #16]
 800ead4:	4605      	mov	r5, r0
 800ead6:	460c      	mov	r4, r1
 800ead8:	b913      	cbnz	r3, 800eae0 <_fflush_r+0x10>
 800eada:	2500      	movs	r5, #0
 800eadc:	4628      	mov	r0, r5
 800eade:	bd38      	pop	{r3, r4, r5, pc}
 800eae0:	b118      	cbz	r0, 800eaea <_fflush_r+0x1a>
 800eae2:	6a03      	ldr	r3, [r0, #32]
 800eae4:	b90b      	cbnz	r3, 800eaea <_fflush_r+0x1a>
 800eae6:	f7fe fc13 	bl	800d310 <__sinit>
 800eaea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d0f3      	beq.n	800eada <_fflush_r+0xa>
 800eaf2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eaf4:	07d0      	lsls	r0, r2, #31
 800eaf6:	d404      	bmi.n	800eb02 <_fflush_r+0x32>
 800eaf8:	0599      	lsls	r1, r3, #22
 800eafa:	d402      	bmi.n	800eb02 <_fflush_r+0x32>
 800eafc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eafe:	f7fe fcfe 	bl	800d4fe <__retarget_lock_acquire_recursive>
 800eb02:	4628      	mov	r0, r5
 800eb04:	4621      	mov	r1, r4
 800eb06:	f7ff ff5f 	bl	800e9c8 <__sflush_r>
 800eb0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eb0c:	07da      	lsls	r2, r3, #31
 800eb0e:	4605      	mov	r5, r0
 800eb10:	d4e4      	bmi.n	800eadc <_fflush_r+0xc>
 800eb12:	89a3      	ldrh	r3, [r4, #12]
 800eb14:	059b      	lsls	r3, r3, #22
 800eb16:	d4e1      	bmi.n	800eadc <_fflush_r+0xc>
 800eb18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb1a:	f7fe fcf1 	bl	800d500 <__retarget_lock_release_recursive>
 800eb1e:	e7dd      	b.n	800eadc <_fflush_r+0xc>

0800eb20 <_sbrk_r>:
 800eb20:	b538      	push	{r3, r4, r5, lr}
 800eb22:	4d06      	ldr	r5, [pc, #24]	@ (800eb3c <_sbrk_r+0x1c>)
 800eb24:	2300      	movs	r3, #0
 800eb26:	4604      	mov	r4, r0
 800eb28:	4608      	mov	r0, r1
 800eb2a:	602b      	str	r3, [r5, #0]
 800eb2c:	f7f4 fa5c 	bl	8002fe8 <_sbrk>
 800eb30:	1c43      	adds	r3, r0, #1
 800eb32:	d102      	bne.n	800eb3a <_sbrk_r+0x1a>
 800eb34:	682b      	ldr	r3, [r5, #0]
 800eb36:	b103      	cbz	r3, 800eb3a <_sbrk_r+0x1a>
 800eb38:	6023      	str	r3, [r4, #0]
 800eb3a:	bd38      	pop	{r3, r4, r5, pc}
 800eb3c:	24002824 	.word	0x24002824

0800eb40 <memcpy>:
 800eb40:	440a      	add	r2, r1
 800eb42:	4291      	cmp	r1, r2
 800eb44:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb48:	d100      	bne.n	800eb4c <memcpy+0xc>
 800eb4a:	4770      	bx	lr
 800eb4c:	b510      	push	{r4, lr}
 800eb4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb56:	4291      	cmp	r1, r2
 800eb58:	d1f9      	bne.n	800eb4e <memcpy+0xe>
 800eb5a:	bd10      	pop	{r4, pc}

0800eb5c <__assert_func>:
 800eb5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb5e:	4614      	mov	r4, r2
 800eb60:	461a      	mov	r2, r3
 800eb62:	4b09      	ldr	r3, [pc, #36]	@ (800eb88 <__assert_func+0x2c>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	4605      	mov	r5, r0
 800eb68:	68d8      	ldr	r0, [r3, #12]
 800eb6a:	b954      	cbnz	r4, 800eb82 <__assert_func+0x26>
 800eb6c:	4b07      	ldr	r3, [pc, #28]	@ (800eb8c <__assert_func+0x30>)
 800eb6e:	461c      	mov	r4, r3
 800eb70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eb74:	9100      	str	r1, [sp, #0]
 800eb76:	462b      	mov	r3, r5
 800eb78:	4905      	ldr	r1, [pc, #20]	@ (800eb90 <__assert_func+0x34>)
 800eb7a:	f000 f841 	bl	800ec00 <fiprintf>
 800eb7e:	f000 f851 	bl	800ec24 <abort>
 800eb82:	4b04      	ldr	r3, [pc, #16]	@ (800eb94 <__assert_func+0x38>)
 800eb84:	e7f4      	b.n	800eb70 <__assert_func+0x14>
 800eb86:	bf00      	nop
 800eb88:	24000024 	.word	0x24000024
 800eb8c:	0800ffb5 	.word	0x0800ffb5
 800eb90:	0800ff87 	.word	0x0800ff87
 800eb94:	0800ff7a 	.word	0x0800ff7a

0800eb98 <_calloc_r>:
 800eb98:	b570      	push	{r4, r5, r6, lr}
 800eb9a:	fba1 5402 	umull	r5, r4, r1, r2
 800eb9e:	b93c      	cbnz	r4, 800ebb0 <_calloc_r+0x18>
 800eba0:	4629      	mov	r1, r5
 800eba2:	f7ff fb03 	bl	800e1ac <_malloc_r>
 800eba6:	4606      	mov	r6, r0
 800eba8:	b928      	cbnz	r0, 800ebb6 <_calloc_r+0x1e>
 800ebaa:	2600      	movs	r6, #0
 800ebac:	4630      	mov	r0, r6
 800ebae:	bd70      	pop	{r4, r5, r6, pc}
 800ebb0:	220c      	movs	r2, #12
 800ebb2:	6002      	str	r2, [r0, #0]
 800ebb4:	e7f9      	b.n	800ebaa <_calloc_r+0x12>
 800ebb6:	462a      	mov	r2, r5
 800ebb8:	4621      	mov	r1, r4
 800ebba:	f7fe fc22 	bl	800d402 <memset>
 800ebbe:	e7f5      	b.n	800ebac <_calloc_r+0x14>

0800ebc0 <__ascii_mbtowc>:
 800ebc0:	b082      	sub	sp, #8
 800ebc2:	b901      	cbnz	r1, 800ebc6 <__ascii_mbtowc+0x6>
 800ebc4:	a901      	add	r1, sp, #4
 800ebc6:	b142      	cbz	r2, 800ebda <__ascii_mbtowc+0x1a>
 800ebc8:	b14b      	cbz	r3, 800ebde <__ascii_mbtowc+0x1e>
 800ebca:	7813      	ldrb	r3, [r2, #0]
 800ebcc:	600b      	str	r3, [r1, #0]
 800ebce:	7812      	ldrb	r2, [r2, #0]
 800ebd0:	1e10      	subs	r0, r2, #0
 800ebd2:	bf18      	it	ne
 800ebd4:	2001      	movne	r0, #1
 800ebd6:	b002      	add	sp, #8
 800ebd8:	4770      	bx	lr
 800ebda:	4610      	mov	r0, r2
 800ebdc:	e7fb      	b.n	800ebd6 <__ascii_mbtowc+0x16>
 800ebde:	f06f 0001 	mvn.w	r0, #1
 800ebe2:	e7f8      	b.n	800ebd6 <__ascii_mbtowc+0x16>

0800ebe4 <__ascii_wctomb>:
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	4608      	mov	r0, r1
 800ebe8:	b141      	cbz	r1, 800ebfc <__ascii_wctomb+0x18>
 800ebea:	2aff      	cmp	r2, #255	@ 0xff
 800ebec:	d904      	bls.n	800ebf8 <__ascii_wctomb+0x14>
 800ebee:	228a      	movs	r2, #138	@ 0x8a
 800ebf0:	601a      	str	r2, [r3, #0]
 800ebf2:	f04f 30ff 	mov.w	r0, #4294967295
 800ebf6:	4770      	bx	lr
 800ebf8:	700a      	strb	r2, [r1, #0]
 800ebfa:	2001      	movs	r0, #1
 800ebfc:	4770      	bx	lr
	...

0800ec00 <fiprintf>:
 800ec00:	b40e      	push	{r1, r2, r3}
 800ec02:	b503      	push	{r0, r1, lr}
 800ec04:	4601      	mov	r1, r0
 800ec06:	ab03      	add	r3, sp, #12
 800ec08:	4805      	ldr	r0, [pc, #20]	@ (800ec20 <fiprintf+0x20>)
 800ec0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec0e:	6800      	ldr	r0, [r0, #0]
 800ec10:	9301      	str	r3, [sp, #4]
 800ec12:	f000 f837 	bl	800ec84 <_vfiprintf_r>
 800ec16:	b002      	add	sp, #8
 800ec18:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec1c:	b003      	add	sp, #12
 800ec1e:	4770      	bx	lr
 800ec20:	24000024 	.word	0x24000024

0800ec24 <abort>:
 800ec24:	b508      	push	{r3, lr}
 800ec26:	2006      	movs	r0, #6
 800ec28:	f000 fa00 	bl	800f02c <raise>
 800ec2c:	2001      	movs	r0, #1
 800ec2e:	f7f4 f963 	bl	8002ef8 <_exit>

0800ec32 <__sfputc_r>:
 800ec32:	6893      	ldr	r3, [r2, #8]
 800ec34:	3b01      	subs	r3, #1
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	b410      	push	{r4}
 800ec3a:	6093      	str	r3, [r2, #8]
 800ec3c:	da08      	bge.n	800ec50 <__sfputc_r+0x1e>
 800ec3e:	6994      	ldr	r4, [r2, #24]
 800ec40:	42a3      	cmp	r3, r4
 800ec42:	db01      	blt.n	800ec48 <__sfputc_r+0x16>
 800ec44:	290a      	cmp	r1, #10
 800ec46:	d103      	bne.n	800ec50 <__sfputc_r+0x1e>
 800ec48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec4c:	f000 b932 	b.w	800eeb4 <__swbuf_r>
 800ec50:	6813      	ldr	r3, [r2, #0]
 800ec52:	1c58      	adds	r0, r3, #1
 800ec54:	6010      	str	r0, [r2, #0]
 800ec56:	7019      	strb	r1, [r3, #0]
 800ec58:	4608      	mov	r0, r1
 800ec5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec5e:	4770      	bx	lr

0800ec60 <__sfputs_r>:
 800ec60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec62:	4606      	mov	r6, r0
 800ec64:	460f      	mov	r7, r1
 800ec66:	4614      	mov	r4, r2
 800ec68:	18d5      	adds	r5, r2, r3
 800ec6a:	42ac      	cmp	r4, r5
 800ec6c:	d101      	bne.n	800ec72 <__sfputs_r+0x12>
 800ec6e:	2000      	movs	r0, #0
 800ec70:	e007      	b.n	800ec82 <__sfputs_r+0x22>
 800ec72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec76:	463a      	mov	r2, r7
 800ec78:	4630      	mov	r0, r6
 800ec7a:	f7ff ffda 	bl	800ec32 <__sfputc_r>
 800ec7e:	1c43      	adds	r3, r0, #1
 800ec80:	d1f3      	bne.n	800ec6a <__sfputs_r+0xa>
 800ec82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ec84 <_vfiprintf_r>:
 800ec84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec88:	460d      	mov	r5, r1
 800ec8a:	b09d      	sub	sp, #116	@ 0x74
 800ec8c:	4614      	mov	r4, r2
 800ec8e:	4698      	mov	r8, r3
 800ec90:	4606      	mov	r6, r0
 800ec92:	b118      	cbz	r0, 800ec9c <_vfiprintf_r+0x18>
 800ec94:	6a03      	ldr	r3, [r0, #32]
 800ec96:	b90b      	cbnz	r3, 800ec9c <_vfiprintf_r+0x18>
 800ec98:	f7fe fb3a 	bl	800d310 <__sinit>
 800ec9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec9e:	07d9      	lsls	r1, r3, #31
 800eca0:	d405      	bmi.n	800ecae <_vfiprintf_r+0x2a>
 800eca2:	89ab      	ldrh	r3, [r5, #12]
 800eca4:	059a      	lsls	r2, r3, #22
 800eca6:	d402      	bmi.n	800ecae <_vfiprintf_r+0x2a>
 800eca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ecaa:	f7fe fc28 	bl	800d4fe <__retarget_lock_acquire_recursive>
 800ecae:	89ab      	ldrh	r3, [r5, #12]
 800ecb0:	071b      	lsls	r3, r3, #28
 800ecb2:	d501      	bpl.n	800ecb8 <_vfiprintf_r+0x34>
 800ecb4:	692b      	ldr	r3, [r5, #16]
 800ecb6:	b99b      	cbnz	r3, 800ece0 <_vfiprintf_r+0x5c>
 800ecb8:	4629      	mov	r1, r5
 800ecba:	4630      	mov	r0, r6
 800ecbc:	f000 f938 	bl	800ef30 <__swsetup_r>
 800ecc0:	b170      	cbz	r0, 800ece0 <_vfiprintf_r+0x5c>
 800ecc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ecc4:	07dc      	lsls	r4, r3, #31
 800ecc6:	d504      	bpl.n	800ecd2 <_vfiprintf_r+0x4e>
 800ecc8:	f04f 30ff 	mov.w	r0, #4294967295
 800eccc:	b01d      	add	sp, #116	@ 0x74
 800ecce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecd2:	89ab      	ldrh	r3, [r5, #12]
 800ecd4:	0598      	lsls	r0, r3, #22
 800ecd6:	d4f7      	bmi.n	800ecc8 <_vfiprintf_r+0x44>
 800ecd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ecda:	f7fe fc11 	bl	800d500 <__retarget_lock_release_recursive>
 800ecde:	e7f3      	b.n	800ecc8 <_vfiprintf_r+0x44>
 800ece0:	2300      	movs	r3, #0
 800ece2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ece4:	2320      	movs	r3, #32
 800ece6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ecea:	f8cd 800c 	str.w	r8, [sp, #12]
 800ecee:	2330      	movs	r3, #48	@ 0x30
 800ecf0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800eea0 <_vfiprintf_r+0x21c>
 800ecf4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ecf8:	f04f 0901 	mov.w	r9, #1
 800ecfc:	4623      	mov	r3, r4
 800ecfe:	469a      	mov	sl, r3
 800ed00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed04:	b10a      	cbz	r2, 800ed0a <_vfiprintf_r+0x86>
 800ed06:	2a25      	cmp	r2, #37	@ 0x25
 800ed08:	d1f9      	bne.n	800ecfe <_vfiprintf_r+0x7a>
 800ed0a:	ebba 0b04 	subs.w	fp, sl, r4
 800ed0e:	d00b      	beq.n	800ed28 <_vfiprintf_r+0xa4>
 800ed10:	465b      	mov	r3, fp
 800ed12:	4622      	mov	r2, r4
 800ed14:	4629      	mov	r1, r5
 800ed16:	4630      	mov	r0, r6
 800ed18:	f7ff ffa2 	bl	800ec60 <__sfputs_r>
 800ed1c:	3001      	adds	r0, #1
 800ed1e:	f000 80a7 	beq.w	800ee70 <_vfiprintf_r+0x1ec>
 800ed22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed24:	445a      	add	r2, fp
 800ed26:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed28:	f89a 3000 	ldrb.w	r3, [sl]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	f000 809f 	beq.w	800ee70 <_vfiprintf_r+0x1ec>
 800ed32:	2300      	movs	r3, #0
 800ed34:	f04f 32ff 	mov.w	r2, #4294967295
 800ed38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed3c:	f10a 0a01 	add.w	sl, sl, #1
 800ed40:	9304      	str	r3, [sp, #16]
 800ed42:	9307      	str	r3, [sp, #28]
 800ed44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ed48:	931a      	str	r3, [sp, #104]	@ 0x68
 800ed4a:	4654      	mov	r4, sl
 800ed4c:	2205      	movs	r2, #5
 800ed4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed52:	4853      	ldr	r0, [pc, #332]	@ (800eea0 <_vfiprintf_r+0x21c>)
 800ed54:	f7f1 fac4 	bl	80002e0 <memchr>
 800ed58:	9a04      	ldr	r2, [sp, #16]
 800ed5a:	b9d8      	cbnz	r0, 800ed94 <_vfiprintf_r+0x110>
 800ed5c:	06d1      	lsls	r1, r2, #27
 800ed5e:	bf44      	itt	mi
 800ed60:	2320      	movmi	r3, #32
 800ed62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed66:	0713      	lsls	r3, r2, #28
 800ed68:	bf44      	itt	mi
 800ed6a:	232b      	movmi	r3, #43	@ 0x2b
 800ed6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed70:	f89a 3000 	ldrb.w	r3, [sl]
 800ed74:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed76:	d015      	beq.n	800eda4 <_vfiprintf_r+0x120>
 800ed78:	9a07      	ldr	r2, [sp, #28]
 800ed7a:	4654      	mov	r4, sl
 800ed7c:	2000      	movs	r0, #0
 800ed7e:	f04f 0c0a 	mov.w	ip, #10
 800ed82:	4621      	mov	r1, r4
 800ed84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed88:	3b30      	subs	r3, #48	@ 0x30
 800ed8a:	2b09      	cmp	r3, #9
 800ed8c:	d94b      	bls.n	800ee26 <_vfiprintf_r+0x1a2>
 800ed8e:	b1b0      	cbz	r0, 800edbe <_vfiprintf_r+0x13a>
 800ed90:	9207      	str	r2, [sp, #28]
 800ed92:	e014      	b.n	800edbe <_vfiprintf_r+0x13a>
 800ed94:	eba0 0308 	sub.w	r3, r0, r8
 800ed98:	fa09 f303 	lsl.w	r3, r9, r3
 800ed9c:	4313      	orrs	r3, r2
 800ed9e:	9304      	str	r3, [sp, #16]
 800eda0:	46a2      	mov	sl, r4
 800eda2:	e7d2      	b.n	800ed4a <_vfiprintf_r+0xc6>
 800eda4:	9b03      	ldr	r3, [sp, #12]
 800eda6:	1d19      	adds	r1, r3, #4
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	9103      	str	r1, [sp, #12]
 800edac:	2b00      	cmp	r3, #0
 800edae:	bfbb      	ittet	lt
 800edb0:	425b      	neglt	r3, r3
 800edb2:	f042 0202 	orrlt.w	r2, r2, #2
 800edb6:	9307      	strge	r3, [sp, #28]
 800edb8:	9307      	strlt	r3, [sp, #28]
 800edba:	bfb8      	it	lt
 800edbc:	9204      	strlt	r2, [sp, #16]
 800edbe:	7823      	ldrb	r3, [r4, #0]
 800edc0:	2b2e      	cmp	r3, #46	@ 0x2e
 800edc2:	d10a      	bne.n	800edda <_vfiprintf_r+0x156>
 800edc4:	7863      	ldrb	r3, [r4, #1]
 800edc6:	2b2a      	cmp	r3, #42	@ 0x2a
 800edc8:	d132      	bne.n	800ee30 <_vfiprintf_r+0x1ac>
 800edca:	9b03      	ldr	r3, [sp, #12]
 800edcc:	1d1a      	adds	r2, r3, #4
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	9203      	str	r2, [sp, #12]
 800edd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800edd6:	3402      	adds	r4, #2
 800edd8:	9305      	str	r3, [sp, #20]
 800edda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800eeb0 <_vfiprintf_r+0x22c>
 800edde:	7821      	ldrb	r1, [r4, #0]
 800ede0:	2203      	movs	r2, #3
 800ede2:	4650      	mov	r0, sl
 800ede4:	f7f1 fa7c 	bl	80002e0 <memchr>
 800ede8:	b138      	cbz	r0, 800edfa <_vfiprintf_r+0x176>
 800edea:	9b04      	ldr	r3, [sp, #16]
 800edec:	eba0 000a 	sub.w	r0, r0, sl
 800edf0:	2240      	movs	r2, #64	@ 0x40
 800edf2:	4082      	lsls	r2, r0
 800edf4:	4313      	orrs	r3, r2
 800edf6:	3401      	adds	r4, #1
 800edf8:	9304      	str	r3, [sp, #16]
 800edfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edfe:	4829      	ldr	r0, [pc, #164]	@ (800eea4 <_vfiprintf_r+0x220>)
 800ee00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ee04:	2206      	movs	r2, #6
 800ee06:	f7f1 fa6b 	bl	80002e0 <memchr>
 800ee0a:	2800      	cmp	r0, #0
 800ee0c:	d03f      	beq.n	800ee8e <_vfiprintf_r+0x20a>
 800ee0e:	4b26      	ldr	r3, [pc, #152]	@ (800eea8 <_vfiprintf_r+0x224>)
 800ee10:	bb1b      	cbnz	r3, 800ee5a <_vfiprintf_r+0x1d6>
 800ee12:	9b03      	ldr	r3, [sp, #12]
 800ee14:	3307      	adds	r3, #7
 800ee16:	f023 0307 	bic.w	r3, r3, #7
 800ee1a:	3308      	adds	r3, #8
 800ee1c:	9303      	str	r3, [sp, #12]
 800ee1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee20:	443b      	add	r3, r7
 800ee22:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee24:	e76a      	b.n	800ecfc <_vfiprintf_r+0x78>
 800ee26:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee2a:	460c      	mov	r4, r1
 800ee2c:	2001      	movs	r0, #1
 800ee2e:	e7a8      	b.n	800ed82 <_vfiprintf_r+0xfe>
 800ee30:	2300      	movs	r3, #0
 800ee32:	3401      	adds	r4, #1
 800ee34:	9305      	str	r3, [sp, #20]
 800ee36:	4619      	mov	r1, r3
 800ee38:	f04f 0c0a 	mov.w	ip, #10
 800ee3c:	4620      	mov	r0, r4
 800ee3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee42:	3a30      	subs	r2, #48	@ 0x30
 800ee44:	2a09      	cmp	r2, #9
 800ee46:	d903      	bls.n	800ee50 <_vfiprintf_r+0x1cc>
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d0c6      	beq.n	800edda <_vfiprintf_r+0x156>
 800ee4c:	9105      	str	r1, [sp, #20]
 800ee4e:	e7c4      	b.n	800edda <_vfiprintf_r+0x156>
 800ee50:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee54:	4604      	mov	r4, r0
 800ee56:	2301      	movs	r3, #1
 800ee58:	e7f0      	b.n	800ee3c <_vfiprintf_r+0x1b8>
 800ee5a:	ab03      	add	r3, sp, #12
 800ee5c:	9300      	str	r3, [sp, #0]
 800ee5e:	462a      	mov	r2, r5
 800ee60:	4b12      	ldr	r3, [pc, #72]	@ (800eeac <_vfiprintf_r+0x228>)
 800ee62:	a904      	add	r1, sp, #16
 800ee64:	4630      	mov	r0, r6
 800ee66:	f7fd fe1f 	bl	800caa8 <_printf_float>
 800ee6a:	4607      	mov	r7, r0
 800ee6c:	1c78      	adds	r0, r7, #1
 800ee6e:	d1d6      	bne.n	800ee1e <_vfiprintf_r+0x19a>
 800ee70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee72:	07d9      	lsls	r1, r3, #31
 800ee74:	d405      	bmi.n	800ee82 <_vfiprintf_r+0x1fe>
 800ee76:	89ab      	ldrh	r3, [r5, #12]
 800ee78:	059a      	lsls	r2, r3, #22
 800ee7a:	d402      	bmi.n	800ee82 <_vfiprintf_r+0x1fe>
 800ee7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee7e:	f7fe fb3f 	bl	800d500 <__retarget_lock_release_recursive>
 800ee82:	89ab      	ldrh	r3, [r5, #12]
 800ee84:	065b      	lsls	r3, r3, #25
 800ee86:	f53f af1f 	bmi.w	800ecc8 <_vfiprintf_r+0x44>
 800ee8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee8c:	e71e      	b.n	800eccc <_vfiprintf_r+0x48>
 800ee8e:	ab03      	add	r3, sp, #12
 800ee90:	9300      	str	r3, [sp, #0]
 800ee92:	462a      	mov	r2, r5
 800ee94:	4b05      	ldr	r3, [pc, #20]	@ (800eeac <_vfiprintf_r+0x228>)
 800ee96:	a904      	add	r1, sp, #16
 800ee98:	4630      	mov	r0, r6
 800ee9a:	f7fe f88d 	bl	800cfb8 <_printf_i>
 800ee9e:	e7e4      	b.n	800ee6a <_vfiprintf_r+0x1e6>
 800eea0:	080100b7 	.word	0x080100b7
 800eea4:	080100c1 	.word	0x080100c1
 800eea8:	0800caa9 	.word	0x0800caa9
 800eeac:	0800ec61 	.word	0x0800ec61
 800eeb0:	080100bd 	.word	0x080100bd

0800eeb4 <__swbuf_r>:
 800eeb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeb6:	460e      	mov	r6, r1
 800eeb8:	4614      	mov	r4, r2
 800eeba:	4605      	mov	r5, r0
 800eebc:	b118      	cbz	r0, 800eec6 <__swbuf_r+0x12>
 800eebe:	6a03      	ldr	r3, [r0, #32]
 800eec0:	b90b      	cbnz	r3, 800eec6 <__swbuf_r+0x12>
 800eec2:	f7fe fa25 	bl	800d310 <__sinit>
 800eec6:	69a3      	ldr	r3, [r4, #24]
 800eec8:	60a3      	str	r3, [r4, #8]
 800eeca:	89a3      	ldrh	r3, [r4, #12]
 800eecc:	071a      	lsls	r2, r3, #28
 800eece:	d501      	bpl.n	800eed4 <__swbuf_r+0x20>
 800eed0:	6923      	ldr	r3, [r4, #16]
 800eed2:	b943      	cbnz	r3, 800eee6 <__swbuf_r+0x32>
 800eed4:	4621      	mov	r1, r4
 800eed6:	4628      	mov	r0, r5
 800eed8:	f000 f82a 	bl	800ef30 <__swsetup_r>
 800eedc:	b118      	cbz	r0, 800eee6 <__swbuf_r+0x32>
 800eede:	f04f 37ff 	mov.w	r7, #4294967295
 800eee2:	4638      	mov	r0, r7
 800eee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eee6:	6823      	ldr	r3, [r4, #0]
 800eee8:	6922      	ldr	r2, [r4, #16]
 800eeea:	1a98      	subs	r0, r3, r2
 800eeec:	6963      	ldr	r3, [r4, #20]
 800eeee:	b2f6      	uxtb	r6, r6
 800eef0:	4283      	cmp	r3, r0
 800eef2:	4637      	mov	r7, r6
 800eef4:	dc05      	bgt.n	800ef02 <__swbuf_r+0x4e>
 800eef6:	4621      	mov	r1, r4
 800eef8:	4628      	mov	r0, r5
 800eefa:	f7ff fde9 	bl	800ead0 <_fflush_r>
 800eefe:	2800      	cmp	r0, #0
 800ef00:	d1ed      	bne.n	800eede <__swbuf_r+0x2a>
 800ef02:	68a3      	ldr	r3, [r4, #8]
 800ef04:	3b01      	subs	r3, #1
 800ef06:	60a3      	str	r3, [r4, #8]
 800ef08:	6823      	ldr	r3, [r4, #0]
 800ef0a:	1c5a      	adds	r2, r3, #1
 800ef0c:	6022      	str	r2, [r4, #0]
 800ef0e:	701e      	strb	r6, [r3, #0]
 800ef10:	6962      	ldr	r2, [r4, #20]
 800ef12:	1c43      	adds	r3, r0, #1
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d004      	beq.n	800ef22 <__swbuf_r+0x6e>
 800ef18:	89a3      	ldrh	r3, [r4, #12]
 800ef1a:	07db      	lsls	r3, r3, #31
 800ef1c:	d5e1      	bpl.n	800eee2 <__swbuf_r+0x2e>
 800ef1e:	2e0a      	cmp	r6, #10
 800ef20:	d1df      	bne.n	800eee2 <__swbuf_r+0x2e>
 800ef22:	4621      	mov	r1, r4
 800ef24:	4628      	mov	r0, r5
 800ef26:	f7ff fdd3 	bl	800ead0 <_fflush_r>
 800ef2a:	2800      	cmp	r0, #0
 800ef2c:	d0d9      	beq.n	800eee2 <__swbuf_r+0x2e>
 800ef2e:	e7d6      	b.n	800eede <__swbuf_r+0x2a>

0800ef30 <__swsetup_r>:
 800ef30:	b538      	push	{r3, r4, r5, lr}
 800ef32:	4b29      	ldr	r3, [pc, #164]	@ (800efd8 <__swsetup_r+0xa8>)
 800ef34:	4605      	mov	r5, r0
 800ef36:	6818      	ldr	r0, [r3, #0]
 800ef38:	460c      	mov	r4, r1
 800ef3a:	b118      	cbz	r0, 800ef44 <__swsetup_r+0x14>
 800ef3c:	6a03      	ldr	r3, [r0, #32]
 800ef3e:	b90b      	cbnz	r3, 800ef44 <__swsetup_r+0x14>
 800ef40:	f7fe f9e6 	bl	800d310 <__sinit>
 800ef44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef48:	0719      	lsls	r1, r3, #28
 800ef4a:	d422      	bmi.n	800ef92 <__swsetup_r+0x62>
 800ef4c:	06da      	lsls	r2, r3, #27
 800ef4e:	d407      	bmi.n	800ef60 <__swsetup_r+0x30>
 800ef50:	2209      	movs	r2, #9
 800ef52:	602a      	str	r2, [r5, #0]
 800ef54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef58:	81a3      	strh	r3, [r4, #12]
 800ef5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef5e:	e033      	b.n	800efc8 <__swsetup_r+0x98>
 800ef60:	0758      	lsls	r0, r3, #29
 800ef62:	d512      	bpl.n	800ef8a <__swsetup_r+0x5a>
 800ef64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef66:	b141      	cbz	r1, 800ef7a <__swsetup_r+0x4a>
 800ef68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef6c:	4299      	cmp	r1, r3
 800ef6e:	d002      	beq.n	800ef76 <__swsetup_r+0x46>
 800ef70:	4628      	mov	r0, r5
 800ef72:	f7ff f8a7 	bl	800e0c4 <_free_r>
 800ef76:	2300      	movs	r3, #0
 800ef78:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef7a:	89a3      	ldrh	r3, [r4, #12]
 800ef7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ef80:	81a3      	strh	r3, [r4, #12]
 800ef82:	2300      	movs	r3, #0
 800ef84:	6063      	str	r3, [r4, #4]
 800ef86:	6923      	ldr	r3, [r4, #16]
 800ef88:	6023      	str	r3, [r4, #0]
 800ef8a:	89a3      	ldrh	r3, [r4, #12]
 800ef8c:	f043 0308 	orr.w	r3, r3, #8
 800ef90:	81a3      	strh	r3, [r4, #12]
 800ef92:	6923      	ldr	r3, [r4, #16]
 800ef94:	b94b      	cbnz	r3, 800efaa <__swsetup_r+0x7a>
 800ef96:	89a3      	ldrh	r3, [r4, #12]
 800ef98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ef9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800efa0:	d003      	beq.n	800efaa <__swsetup_r+0x7a>
 800efa2:	4621      	mov	r1, r4
 800efa4:	4628      	mov	r0, r5
 800efa6:	f000 f883 	bl	800f0b0 <__smakebuf_r>
 800efaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efae:	f013 0201 	ands.w	r2, r3, #1
 800efb2:	d00a      	beq.n	800efca <__swsetup_r+0x9a>
 800efb4:	2200      	movs	r2, #0
 800efb6:	60a2      	str	r2, [r4, #8]
 800efb8:	6962      	ldr	r2, [r4, #20]
 800efba:	4252      	negs	r2, r2
 800efbc:	61a2      	str	r2, [r4, #24]
 800efbe:	6922      	ldr	r2, [r4, #16]
 800efc0:	b942      	cbnz	r2, 800efd4 <__swsetup_r+0xa4>
 800efc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800efc6:	d1c5      	bne.n	800ef54 <__swsetup_r+0x24>
 800efc8:	bd38      	pop	{r3, r4, r5, pc}
 800efca:	0799      	lsls	r1, r3, #30
 800efcc:	bf58      	it	pl
 800efce:	6962      	ldrpl	r2, [r4, #20]
 800efd0:	60a2      	str	r2, [r4, #8]
 800efd2:	e7f4      	b.n	800efbe <__swsetup_r+0x8e>
 800efd4:	2000      	movs	r0, #0
 800efd6:	e7f7      	b.n	800efc8 <__swsetup_r+0x98>
 800efd8:	24000024 	.word	0x24000024

0800efdc <_raise_r>:
 800efdc:	291f      	cmp	r1, #31
 800efde:	b538      	push	{r3, r4, r5, lr}
 800efe0:	4605      	mov	r5, r0
 800efe2:	460c      	mov	r4, r1
 800efe4:	d904      	bls.n	800eff0 <_raise_r+0x14>
 800efe6:	2316      	movs	r3, #22
 800efe8:	6003      	str	r3, [r0, #0]
 800efea:	f04f 30ff 	mov.w	r0, #4294967295
 800efee:	bd38      	pop	{r3, r4, r5, pc}
 800eff0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eff2:	b112      	cbz	r2, 800effa <_raise_r+0x1e>
 800eff4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eff8:	b94b      	cbnz	r3, 800f00e <_raise_r+0x32>
 800effa:	4628      	mov	r0, r5
 800effc:	f000 f830 	bl	800f060 <_getpid_r>
 800f000:	4622      	mov	r2, r4
 800f002:	4601      	mov	r1, r0
 800f004:	4628      	mov	r0, r5
 800f006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f00a:	f000 b817 	b.w	800f03c <_kill_r>
 800f00e:	2b01      	cmp	r3, #1
 800f010:	d00a      	beq.n	800f028 <_raise_r+0x4c>
 800f012:	1c59      	adds	r1, r3, #1
 800f014:	d103      	bne.n	800f01e <_raise_r+0x42>
 800f016:	2316      	movs	r3, #22
 800f018:	6003      	str	r3, [r0, #0]
 800f01a:	2001      	movs	r0, #1
 800f01c:	e7e7      	b.n	800efee <_raise_r+0x12>
 800f01e:	2100      	movs	r1, #0
 800f020:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f024:	4620      	mov	r0, r4
 800f026:	4798      	blx	r3
 800f028:	2000      	movs	r0, #0
 800f02a:	e7e0      	b.n	800efee <_raise_r+0x12>

0800f02c <raise>:
 800f02c:	4b02      	ldr	r3, [pc, #8]	@ (800f038 <raise+0xc>)
 800f02e:	4601      	mov	r1, r0
 800f030:	6818      	ldr	r0, [r3, #0]
 800f032:	f7ff bfd3 	b.w	800efdc <_raise_r>
 800f036:	bf00      	nop
 800f038:	24000024 	.word	0x24000024

0800f03c <_kill_r>:
 800f03c:	b538      	push	{r3, r4, r5, lr}
 800f03e:	4d07      	ldr	r5, [pc, #28]	@ (800f05c <_kill_r+0x20>)
 800f040:	2300      	movs	r3, #0
 800f042:	4604      	mov	r4, r0
 800f044:	4608      	mov	r0, r1
 800f046:	4611      	mov	r1, r2
 800f048:	602b      	str	r3, [r5, #0]
 800f04a:	f7f3 ff45 	bl	8002ed8 <_kill>
 800f04e:	1c43      	adds	r3, r0, #1
 800f050:	d102      	bne.n	800f058 <_kill_r+0x1c>
 800f052:	682b      	ldr	r3, [r5, #0]
 800f054:	b103      	cbz	r3, 800f058 <_kill_r+0x1c>
 800f056:	6023      	str	r3, [r4, #0]
 800f058:	bd38      	pop	{r3, r4, r5, pc}
 800f05a:	bf00      	nop
 800f05c:	24002824 	.word	0x24002824

0800f060 <_getpid_r>:
 800f060:	f7f3 bf32 	b.w	8002ec8 <_getpid>

0800f064 <__swhatbuf_r>:
 800f064:	b570      	push	{r4, r5, r6, lr}
 800f066:	460c      	mov	r4, r1
 800f068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f06c:	2900      	cmp	r1, #0
 800f06e:	b096      	sub	sp, #88	@ 0x58
 800f070:	4615      	mov	r5, r2
 800f072:	461e      	mov	r6, r3
 800f074:	da0d      	bge.n	800f092 <__swhatbuf_r+0x2e>
 800f076:	89a3      	ldrh	r3, [r4, #12]
 800f078:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f07c:	f04f 0100 	mov.w	r1, #0
 800f080:	bf14      	ite	ne
 800f082:	2340      	movne	r3, #64	@ 0x40
 800f084:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f088:	2000      	movs	r0, #0
 800f08a:	6031      	str	r1, [r6, #0]
 800f08c:	602b      	str	r3, [r5, #0]
 800f08e:	b016      	add	sp, #88	@ 0x58
 800f090:	bd70      	pop	{r4, r5, r6, pc}
 800f092:	466a      	mov	r2, sp
 800f094:	f000 f848 	bl	800f128 <_fstat_r>
 800f098:	2800      	cmp	r0, #0
 800f09a:	dbec      	blt.n	800f076 <__swhatbuf_r+0x12>
 800f09c:	9901      	ldr	r1, [sp, #4]
 800f09e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f0a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f0a6:	4259      	negs	r1, r3
 800f0a8:	4159      	adcs	r1, r3
 800f0aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f0ae:	e7eb      	b.n	800f088 <__swhatbuf_r+0x24>

0800f0b0 <__smakebuf_r>:
 800f0b0:	898b      	ldrh	r3, [r1, #12]
 800f0b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0b4:	079d      	lsls	r5, r3, #30
 800f0b6:	4606      	mov	r6, r0
 800f0b8:	460c      	mov	r4, r1
 800f0ba:	d507      	bpl.n	800f0cc <__smakebuf_r+0x1c>
 800f0bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f0c0:	6023      	str	r3, [r4, #0]
 800f0c2:	6123      	str	r3, [r4, #16]
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	6163      	str	r3, [r4, #20]
 800f0c8:	b003      	add	sp, #12
 800f0ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0cc:	ab01      	add	r3, sp, #4
 800f0ce:	466a      	mov	r2, sp
 800f0d0:	f7ff ffc8 	bl	800f064 <__swhatbuf_r>
 800f0d4:	9f00      	ldr	r7, [sp, #0]
 800f0d6:	4605      	mov	r5, r0
 800f0d8:	4639      	mov	r1, r7
 800f0da:	4630      	mov	r0, r6
 800f0dc:	f7ff f866 	bl	800e1ac <_malloc_r>
 800f0e0:	b948      	cbnz	r0, 800f0f6 <__smakebuf_r+0x46>
 800f0e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0e6:	059a      	lsls	r2, r3, #22
 800f0e8:	d4ee      	bmi.n	800f0c8 <__smakebuf_r+0x18>
 800f0ea:	f023 0303 	bic.w	r3, r3, #3
 800f0ee:	f043 0302 	orr.w	r3, r3, #2
 800f0f2:	81a3      	strh	r3, [r4, #12]
 800f0f4:	e7e2      	b.n	800f0bc <__smakebuf_r+0xc>
 800f0f6:	89a3      	ldrh	r3, [r4, #12]
 800f0f8:	6020      	str	r0, [r4, #0]
 800f0fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0fe:	81a3      	strh	r3, [r4, #12]
 800f100:	9b01      	ldr	r3, [sp, #4]
 800f102:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f106:	b15b      	cbz	r3, 800f120 <__smakebuf_r+0x70>
 800f108:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f10c:	4630      	mov	r0, r6
 800f10e:	f000 f81d 	bl	800f14c <_isatty_r>
 800f112:	b128      	cbz	r0, 800f120 <__smakebuf_r+0x70>
 800f114:	89a3      	ldrh	r3, [r4, #12]
 800f116:	f023 0303 	bic.w	r3, r3, #3
 800f11a:	f043 0301 	orr.w	r3, r3, #1
 800f11e:	81a3      	strh	r3, [r4, #12]
 800f120:	89a3      	ldrh	r3, [r4, #12]
 800f122:	431d      	orrs	r5, r3
 800f124:	81a5      	strh	r5, [r4, #12]
 800f126:	e7cf      	b.n	800f0c8 <__smakebuf_r+0x18>

0800f128 <_fstat_r>:
 800f128:	b538      	push	{r3, r4, r5, lr}
 800f12a:	4d07      	ldr	r5, [pc, #28]	@ (800f148 <_fstat_r+0x20>)
 800f12c:	2300      	movs	r3, #0
 800f12e:	4604      	mov	r4, r0
 800f130:	4608      	mov	r0, r1
 800f132:	4611      	mov	r1, r2
 800f134:	602b      	str	r3, [r5, #0]
 800f136:	f7f3 ff2f 	bl	8002f98 <_fstat>
 800f13a:	1c43      	adds	r3, r0, #1
 800f13c:	d102      	bne.n	800f144 <_fstat_r+0x1c>
 800f13e:	682b      	ldr	r3, [r5, #0]
 800f140:	b103      	cbz	r3, 800f144 <_fstat_r+0x1c>
 800f142:	6023      	str	r3, [r4, #0]
 800f144:	bd38      	pop	{r3, r4, r5, pc}
 800f146:	bf00      	nop
 800f148:	24002824 	.word	0x24002824

0800f14c <_isatty_r>:
 800f14c:	b538      	push	{r3, r4, r5, lr}
 800f14e:	4d06      	ldr	r5, [pc, #24]	@ (800f168 <_isatty_r+0x1c>)
 800f150:	2300      	movs	r3, #0
 800f152:	4604      	mov	r4, r0
 800f154:	4608      	mov	r0, r1
 800f156:	602b      	str	r3, [r5, #0]
 800f158:	f7f3 ff2e 	bl	8002fb8 <_isatty>
 800f15c:	1c43      	adds	r3, r0, #1
 800f15e:	d102      	bne.n	800f166 <_isatty_r+0x1a>
 800f160:	682b      	ldr	r3, [r5, #0]
 800f162:	b103      	cbz	r3, 800f166 <_isatty_r+0x1a>
 800f164:	6023      	str	r3, [r4, #0]
 800f166:	bd38      	pop	{r3, r4, r5, pc}
 800f168:	24002824 	.word	0x24002824
 800f16c:	00000000 	.word	0x00000000

0800f170 <sin>:
 800f170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f172:	eeb0 7b40 	vmov.f64	d7, d0
 800f176:	ee17 3a90 	vmov	r3, s15
 800f17a:	4a21      	ldr	r2, [pc, #132]	@ (800f200 <sin+0x90>)
 800f17c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f180:	4293      	cmp	r3, r2
 800f182:	d807      	bhi.n	800f194 <sin+0x24>
 800f184:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800f1f8 <sin+0x88>
 800f188:	2000      	movs	r0, #0
 800f18a:	b005      	add	sp, #20
 800f18c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f190:	f000 b8a2 	b.w	800f2d8 <__kernel_sin>
 800f194:	4a1b      	ldr	r2, [pc, #108]	@ (800f204 <sin+0x94>)
 800f196:	4293      	cmp	r3, r2
 800f198:	d904      	bls.n	800f1a4 <sin+0x34>
 800f19a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800f19e:	b005      	add	sp, #20
 800f1a0:	f85d fb04 	ldr.w	pc, [sp], #4
 800f1a4:	4668      	mov	r0, sp
 800f1a6:	f000 f8ef 	bl	800f388 <__ieee754_rem_pio2>
 800f1aa:	f000 0003 	and.w	r0, r0, #3
 800f1ae:	2801      	cmp	r0, #1
 800f1b0:	d00a      	beq.n	800f1c8 <sin+0x58>
 800f1b2:	2802      	cmp	r0, #2
 800f1b4:	d00f      	beq.n	800f1d6 <sin+0x66>
 800f1b6:	b9c0      	cbnz	r0, 800f1ea <sin+0x7a>
 800f1b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f1bc:	ed9d 0b00 	vldr	d0, [sp]
 800f1c0:	2001      	movs	r0, #1
 800f1c2:	f000 f889 	bl	800f2d8 <__kernel_sin>
 800f1c6:	e7ea      	b.n	800f19e <sin+0x2e>
 800f1c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f1cc:	ed9d 0b00 	vldr	d0, [sp]
 800f1d0:	f000 f81a 	bl	800f208 <__kernel_cos>
 800f1d4:	e7e3      	b.n	800f19e <sin+0x2e>
 800f1d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f1da:	ed9d 0b00 	vldr	d0, [sp]
 800f1de:	2001      	movs	r0, #1
 800f1e0:	f000 f87a 	bl	800f2d8 <__kernel_sin>
 800f1e4:	eeb1 0b40 	vneg.f64	d0, d0
 800f1e8:	e7d9      	b.n	800f19e <sin+0x2e>
 800f1ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f1ee:	ed9d 0b00 	vldr	d0, [sp]
 800f1f2:	f000 f809 	bl	800f208 <__kernel_cos>
 800f1f6:	e7f5      	b.n	800f1e4 <sin+0x74>
	...
 800f200:	3fe921fb 	.word	0x3fe921fb
 800f204:	7fefffff 	.word	0x7fefffff

0800f208 <__kernel_cos>:
 800f208:	eeb0 5b40 	vmov.f64	d5, d0
 800f20c:	ee15 1a90 	vmov	r1, s11
 800f210:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800f214:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800f218:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800f21c:	d204      	bcs.n	800f228 <__kernel_cos+0x20>
 800f21e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800f222:	ee17 3a90 	vmov	r3, s15
 800f226:	b343      	cbz	r3, 800f27a <__kernel_cos+0x72>
 800f228:	ee25 6b05 	vmul.f64	d6, d5, d5
 800f22c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800f230:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800f2a0 <__kernel_cos+0x98>
 800f234:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800f2a8 <__kernel_cos+0xa0>
 800f238:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f23c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800f2b0 <__kernel_cos+0xa8>
 800f240:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f244:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800f2b8 <__kernel_cos+0xb0>
 800f248:	eea7 4b06 	vfma.f64	d4, d7, d6
 800f24c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800f2c0 <__kernel_cos+0xb8>
 800f250:	4b1f      	ldr	r3, [pc, #124]	@ (800f2d0 <__kernel_cos+0xc8>)
 800f252:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f256:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800f2c8 <__kernel_cos+0xc0>
 800f25a:	4299      	cmp	r1, r3
 800f25c:	eea7 4b06 	vfma.f64	d4, d7, d6
 800f260:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800f264:	ee24 4b06 	vmul.f64	d4, d4, d6
 800f268:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f26c:	eea6 1b04 	vfma.f64	d1, d6, d4
 800f270:	d804      	bhi.n	800f27c <__kernel_cos+0x74>
 800f272:	ee37 7b41 	vsub.f64	d7, d7, d1
 800f276:	ee30 0b47 	vsub.f64	d0, d0, d7
 800f27a:	4770      	bx	lr
 800f27c:	4b15      	ldr	r3, [pc, #84]	@ (800f2d4 <__kernel_cos+0xcc>)
 800f27e:	4299      	cmp	r1, r3
 800f280:	d809      	bhi.n	800f296 <__kernel_cos+0x8e>
 800f282:	2200      	movs	r2, #0
 800f284:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800f288:	ec43 2b16 	vmov	d6, r2, r3
 800f28c:	ee30 0b46 	vsub.f64	d0, d0, d6
 800f290:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f294:	e7ed      	b.n	800f272 <__kernel_cos+0x6a>
 800f296:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800f29a:	e7f7      	b.n	800f28c <__kernel_cos+0x84>
 800f29c:	f3af 8000 	nop.w
 800f2a0:	be8838d4 	.word	0xbe8838d4
 800f2a4:	bda8fae9 	.word	0xbda8fae9
 800f2a8:	bdb4b1c4 	.word	0xbdb4b1c4
 800f2ac:	3e21ee9e 	.word	0x3e21ee9e
 800f2b0:	809c52ad 	.word	0x809c52ad
 800f2b4:	be927e4f 	.word	0xbe927e4f
 800f2b8:	19cb1590 	.word	0x19cb1590
 800f2bc:	3efa01a0 	.word	0x3efa01a0
 800f2c0:	16c15177 	.word	0x16c15177
 800f2c4:	bf56c16c 	.word	0xbf56c16c
 800f2c8:	5555554c 	.word	0x5555554c
 800f2cc:	3fa55555 	.word	0x3fa55555
 800f2d0:	3fd33332 	.word	0x3fd33332
 800f2d4:	3fe90000 	.word	0x3fe90000

0800f2d8 <__kernel_sin>:
 800f2d8:	ee10 3a90 	vmov	r3, s1
 800f2dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f2e0:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800f2e4:	d204      	bcs.n	800f2f0 <__kernel_sin+0x18>
 800f2e6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800f2ea:	ee17 3a90 	vmov	r3, s15
 800f2ee:	b35b      	cbz	r3, 800f348 <__kernel_sin+0x70>
 800f2f0:	ee20 6b00 	vmul.f64	d6, d0, d0
 800f2f4:	ee20 5b06 	vmul.f64	d5, d0, d6
 800f2f8:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800f350 <__kernel_sin+0x78>
 800f2fc:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800f358 <__kernel_sin+0x80>
 800f300:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f304:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800f360 <__kernel_sin+0x88>
 800f308:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f30c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800f368 <__kernel_sin+0x90>
 800f310:	eea7 4b06 	vfma.f64	d4, d7, d6
 800f314:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800f370 <__kernel_sin+0x98>
 800f318:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f31c:	b930      	cbnz	r0, 800f32c <__kernel_sin+0x54>
 800f31e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800f378 <__kernel_sin+0xa0>
 800f322:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f326:	eea4 0b05 	vfma.f64	d0, d4, d5
 800f32a:	4770      	bx	lr
 800f32c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800f330:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800f334:	eea1 7b04 	vfma.f64	d7, d1, d4
 800f338:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800f33c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800f380 <__kernel_sin+0xa8>
 800f340:	eea5 1b07 	vfma.f64	d1, d5, d7
 800f344:	ee30 0b41 	vsub.f64	d0, d0, d1
 800f348:	4770      	bx	lr
 800f34a:	bf00      	nop
 800f34c:	f3af 8000 	nop.w
 800f350:	5acfd57c 	.word	0x5acfd57c
 800f354:	3de5d93a 	.word	0x3de5d93a
 800f358:	8a2b9ceb 	.word	0x8a2b9ceb
 800f35c:	be5ae5e6 	.word	0xbe5ae5e6
 800f360:	57b1fe7d 	.word	0x57b1fe7d
 800f364:	3ec71de3 	.word	0x3ec71de3
 800f368:	19c161d5 	.word	0x19c161d5
 800f36c:	bf2a01a0 	.word	0xbf2a01a0
 800f370:	1110f8a6 	.word	0x1110f8a6
 800f374:	3f811111 	.word	0x3f811111
 800f378:	55555549 	.word	0x55555549
 800f37c:	bfc55555 	.word	0xbfc55555
 800f380:	55555549 	.word	0x55555549
 800f384:	3fc55555 	.word	0x3fc55555

0800f388 <__ieee754_rem_pio2>:
 800f388:	b570      	push	{r4, r5, r6, lr}
 800f38a:	eeb0 7b40 	vmov.f64	d7, d0
 800f38e:	ee17 5a90 	vmov	r5, s15
 800f392:	4b99      	ldr	r3, [pc, #612]	@ (800f5f8 <__ieee754_rem_pio2+0x270>)
 800f394:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800f398:	429e      	cmp	r6, r3
 800f39a:	b088      	sub	sp, #32
 800f39c:	4604      	mov	r4, r0
 800f39e:	d807      	bhi.n	800f3b0 <__ieee754_rem_pio2+0x28>
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	ed84 0b00 	vstr	d0, [r4]
 800f3a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f3ac:	2000      	movs	r0, #0
 800f3ae:	e01b      	b.n	800f3e8 <__ieee754_rem_pio2+0x60>
 800f3b0:	4b92      	ldr	r3, [pc, #584]	@ (800f5fc <__ieee754_rem_pio2+0x274>)
 800f3b2:	429e      	cmp	r6, r3
 800f3b4:	d83b      	bhi.n	800f42e <__ieee754_rem_pio2+0xa6>
 800f3b6:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800f3ba:	2d00      	cmp	r5, #0
 800f3bc:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800f5b8 <__ieee754_rem_pio2+0x230>
 800f3c0:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800f3c4:	dd19      	ble.n	800f3fa <__ieee754_rem_pio2+0x72>
 800f3c6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800f3ca:	429e      	cmp	r6, r3
 800f3cc:	d00e      	beq.n	800f3ec <__ieee754_rem_pio2+0x64>
 800f3ce:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800f5c0 <__ieee754_rem_pio2+0x238>
 800f3d2:	ee37 6b45 	vsub.f64	d6, d7, d5
 800f3d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f3da:	ed84 6b00 	vstr	d6, [r4]
 800f3de:	ee37 7b45 	vsub.f64	d7, d7, d5
 800f3e2:	ed84 7b02 	vstr	d7, [r4, #8]
 800f3e6:	2001      	movs	r0, #1
 800f3e8:	b008      	add	sp, #32
 800f3ea:	bd70      	pop	{r4, r5, r6, pc}
 800f3ec:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800f5c8 <__ieee754_rem_pio2+0x240>
 800f3f0:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800f5d0 <__ieee754_rem_pio2+0x248>
 800f3f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f3f8:	e7eb      	b.n	800f3d2 <__ieee754_rem_pio2+0x4a>
 800f3fa:	429e      	cmp	r6, r3
 800f3fc:	ee30 7b06 	vadd.f64	d7, d0, d6
 800f400:	d00e      	beq.n	800f420 <__ieee754_rem_pio2+0x98>
 800f402:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800f5c0 <__ieee754_rem_pio2+0x238>
 800f406:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f40a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f40e:	ed84 6b00 	vstr	d6, [r4]
 800f412:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f416:	f04f 30ff 	mov.w	r0, #4294967295
 800f41a:	ed84 7b02 	vstr	d7, [r4, #8]
 800f41e:	e7e3      	b.n	800f3e8 <__ieee754_rem_pio2+0x60>
 800f420:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800f5c8 <__ieee754_rem_pio2+0x240>
 800f424:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800f5d0 <__ieee754_rem_pio2+0x248>
 800f428:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f42c:	e7eb      	b.n	800f406 <__ieee754_rem_pio2+0x7e>
 800f42e:	4b74      	ldr	r3, [pc, #464]	@ (800f600 <__ieee754_rem_pio2+0x278>)
 800f430:	429e      	cmp	r6, r3
 800f432:	d870      	bhi.n	800f516 <__ieee754_rem_pio2+0x18e>
 800f434:	f000 f8ec 	bl	800f610 <fabs>
 800f438:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800f43c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800f5d8 <__ieee754_rem_pio2+0x250>
 800f440:	eea0 7b06 	vfma.f64	d7, d0, d6
 800f444:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800f448:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800f44c:	ee17 0a90 	vmov	r0, s15
 800f450:	eeb1 4b45 	vneg.f64	d4, d5
 800f454:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800f5b8 <__ieee754_rem_pio2+0x230>
 800f458:	eea5 0b47 	vfms.f64	d0, d5, d7
 800f45c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800f5c0 <__ieee754_rem_pio2+0x238>
 800f460:	281f      	cmp	r0, #31
 800f462:	ee25 7b07 	vmul.f64	d7, d5, d7
 800f466:	ee30 6b47 	vsub.f64	d6, d0, d7
 800f46a:	dc05      	bgt.n	800f478 <__ieee754_rem_pio2+0xf0>
 800f46c:	4b65      	ldr	r3, [pc, #404]	@ (800f604 <__ieee754_rem_pio2+0x27c>)
 800f46e:	1e42      	subs	r2, r0, #1
 800f470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f474:	42b3      	cmp	r3, r6
 800f476:	d109      	bne.n	800f48c <__ieee754_rem_pio2+0x104>
 800f478:	ee16 3a90 	vmov	r3, s13
 800f47c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800f480:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800f484:	2b10      	cmp	r3, #16
 800f486:	ea4f 5226 	mov.w	r2, r6, asr #20
 800f48a:	dc02      	bgt.n	800f492 <__ieee754_rem_pio2+0x10a>
 800f48c:	ed84 6b00 	vstr	d6, [r4]
 800f490:	e01a      	b.n	800f4c8 <__ieee754_rem_pio2+0x140>
 800f492:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800f5c8 <__ieee754_rem_pio2+0x240>
 800f496:	eeb0 6b40 	vmov.f64	d6, d0
 800f49a:	eea4 6b03 	vfma.f64	d6, d4, d3
 800f49e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800f4a2:	eea4 7b03 	vfma.f64	d7, d4, d3
 800f4a6:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800f5d0 <__ieee754_rem_pio2+0x248>
 800f4aa:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800f4ae:	ee36 3b47 	vsub.f64	d3, d6, d7
 800f4b2:	ee13 3a90 	vmov	r3, s7
 800f4b6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800f4ba:	1ad3      	subs	r3, r2, r3
 800f4bc:	2b31      	cmp	r3, #49	@ 0x31
 800f4be:	dc17      	bgt.n	800f4f0 <__ieee754_rem_pio2+0x168>
 800f4c0:	eeb0 0b46 	vmov.f64	d0, d6
 800f4c4:	ed84 3b00 	vstr	d3, [r4]
 800f4c8:	ed94 6b00 	vldr	d6, [r4]
 800f4cc:	2d00      	cmp	r5, #0
 800f4ce:	ee30 0b46 	vsub.f64	d0, d0, d6
 800f4d2:	ee30 0b47 	vsub.f64	d0, d0, d7
 800f4d6:	ed84 0b02 	vstr	d0, [r4, #8]
 800f4da:	da85      	bge.n	800f3e8 <__ieee754_rem_pio2+0x60>
 800f4dc:	eeb1 6b46 	vneg.f64	d6, d6
 800f4e0:	eeb1 0b40 	vneg.f64	d0, d0
 800f4e4:	ed84 6b00 	vstr	d6, [r4]
 800f4e8:	ed84 0b02 	vstr	d0, [r4, #8]
 800f4ec:	4240      	negs	r0, r0
 800f4ee:	e77b      	b.n	800f3e8 <__ieee754_rem_pio2+0x60>
 800f4f0:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800f5e0 <__ieee754_rem_pio2+0x258>
 800f4f4:	eeb0 0b46 	vmov.f64	d0, d6
 800f4f8:	eea4 0b07 	vfma.f64	d0, d4, d7
 800f4fc:	ee36 6b40 	vsub.f64	d6, d6, d0
 800f500:	eea4 6b07 	vfma.f64	d6, d4, d7
 800f504:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800f5e8 <__ieee754_rem_pio2+0x260>
 800f508:	eeb0 7b46 	vmov.f64	d7, d6
 800f50c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800f510:	ee30 6b47 	vsub.f64	d6, d0, d7
 800f514:	e7ba      	b.n	800f48c <__ieee754_rem_pio2+0x104>
 800f516:	4b3c      	ldr	r3, [pc, #240]	@ (800f608 <__ieee754_rem_pio2+0x280>)
 800f518:	429e      	cmp	r6, r3
 800f51a:	d906      	bls.n	800f52a <__ieee754_rem_pio2+0x1a2>
 800f51c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800f520:	ed80 7b02 	vstr	d7, [r0, #8]
 800f524:	ed80 7b00 	vstr	d7, [r0]
 800f528:	e740      	b.n	800f3ac <__ieee754_rem_pio2+0x24>
 800f52a:	ee10 3a10 	vmov	r3, s0
 800f52e:	1532      	asrs	r2, r6, #20
 800f530:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800f534:	4618      	mov	r0, r3
 800f536:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800f53a:	ec41 0b17 	vmov	d7, r0, r1
 800f53e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800f542:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800f5f0 <__ieee754_rem_pio2+0x268>
 800f546:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800f54a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f54e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f552:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f556:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800f55a:	a808      	add	r0, sp, #32
 800f55c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800f560:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f564:	ed8d 6b04 	vstr	d6, [sp, #16]
 800f568:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f56c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f570:	2103      	movs	r1, #3
 800f572:	ed30 7b02 	vldmdb	r0!, {d7}
 800f576:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f57e:	460b      	mov	r3, r1
 800f580:	f101 31ff 	add.w	r1, r1, #4294967295
 800f584:	d0f5      	beq.n	800f572 <__ieee754_rem_pio2+0x1ea>
 800f586:	4921      	ldr	r1, [pc, #132]	@ (800f60c <__ieee754_rem_pio2+0x284>)
 800f588:	9101      	str	r1, [sp, #4]
 800f58a:	2102      	movs	r1, #2
 800f58c:	9100      	str	r1, [sp, #0]
 800f58e:	a802      	add	r0, sp, #8
 800f590:	4621      	mov	r1, r4
 800f592:	f000 f845 	bl	800f620 <__kernel_rem_pio2>
 800f596:	2d00      	cmp	r5, #0
 800f598:	f6bf af26 	bge.w	800f3e8 <__ieee754_rem_pio2+0x60>
 800f59c:	ed94 7b00 	vldr	d7, [r4]
 800f5a0:	eeb1 7b47 	vneg.f64	d7, d7
 800f5a4:	ed84 7b00 	vstr	d7, [r4]
 800f5a8:	ed94 7b02 	vldr	d7, [r4, #8]
 800f5ac:	eeb1 7b47 	vneg.f64	d7, d7
 800f5b0:	ed84 7b02 	vstr	d7, [r4, #8]
 800f5b4:	e79a      	b.n	800f4ec <__ieee754_rem_pio2+0x164>
 800f5b6:	bf00      	nop
 800f5b8:	54400000 	.word	0x54400000
 800f5bc:	3ff921fb 	.word	0x3ff921fb
 800f5c0:	1a626331 	.word	0x1a626331
 800f5c4:	3dd0b461 	.word	0x3dd0b461
 800f5c8:	1a600000 	.word	0x1a600000
 800f5cc:	3dd0b461 	.word	0x3dd0b461
 800f5d0:	2e037073 	.word	0x2e037073
 800f5d4:	3ba3198a 	.word	0x3ba3198a
 800f5d8:	6dc9c883 	.word	0x6dc9c883
 800f5dc:	3fe45f30 	.word	0x3fe45f30
 800f5e0:	2e000000 	.word	0x2e000000
 800f5e4:	3ba3198a 	.word	0x3ba3198a
 800f5e8:	252049c1 	.word	0x252049c1
 800f5ec:	397b839a 	.word	0x397b839a
 800f5f0:	00000000 	.word	0x00000000
 800f5f4:	41700000 	.word	0x41700000
 800f5f8:	3fe921fb 	.word	0x3fe921fb
 800f5fc:	4002d97b 	.word	0x4002d97b
 800f600:	413921fb 	.word	0x413921fb
 800f604:	080100c8 	.word	0x080100c8
 800f608:	7fefffff 	.word	0x7fefffff
 800f60c:	08010148 	.word	0x08010148

0800f610 <fabs>:
 800f610:	ec51 0b10 	vmov	r0, r1, d0
 800f614:	4602      	mov	r2, r0
 800f616:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f61a:	ec43 2b10 	vmov	d0, r2, r3
 800f61e:	4770      	bx	lr

0800f620 <__kernel_rem_pio2>:
 800f620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f624:	ed2d 8b06 	vpush	{d8-d10}
 800f628:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800f62c:	469b      	mov	fp, r3
 800f62e:	9001      	str	r0, [sp, #4]
 800f630:	4bbb      	ldr	r3, [pc, #748]	@ (800f920 <__kernel_rem_pio2+0x300>)
 800f632:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800f634:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800f638:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800f63c:	f112 0f14 	cmn.w	r2, #20
 800f640:	bfa8      	it	ge
 800f642:	1ed3      	subge	r3, r2, #3
 800f644:	f10b 3aff 	add.w	sl, fp, #4294967295
 800f648:	bfb8      	it	lt
 800f64a:	2300      	movlt	r3, #0
 800f64c:	f06f 0517 	mvn.w	r5, #23
 800f650:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800f908 <__kernel_rem_pio2+0x2e8>
 800f654:	bfa4      	itt	ge
 800f656:	2018      	movge	r0, #24
 800f658:	fb93 f3f0 	sdivge	r3, r3, r0
 800f65c:	fb03 5505 	mla	r5, r3, r5, r5
 800f660:	eba3 040a 	sub.w	r4, r3, sl
 800f664:	4415      	add	r5, r2
 800f666:	460f      	mov	r7, r1
 800f668:	eb09 060a 	add.w	r6, r9, sl
 800f66c:	a81a      	add	r0, sp, #104	@ 0x68
 800f66e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800f672:	2200      	movs	r2, #0
 800f674:	42b2      	cmp	r2, r6
 800f676:	dd0e      	ble.n	800f696 <__kernel_rem_pio2+0x76>
 800f678:	aa1a      	add	r2, sp, #104	@ 0x68
 800f67a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800f67e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800f682:	2600      	movs	r6, #0
 800f684:	454e      	cmp	r6, r9
 800f686:	dc25      	bgt.n	800f6d4 <__kernel_rem_pio2+0xb4>
 800f688:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800f908 <__kernel_rem_pio2+0x2e8>
 800f68c:	f8dd c004 	ldr.w	ip, [sp, #4]
 800f690:	4614      	mov	r4, r2
 800f692:	2000      	movs	r0, #0
 800f694:	e015      	b.n	800f6c2 <__kernel_rem_pio2+0xa2>
 800f696:	42d4      	cmn	r4, r2
 800f698:	d409      	bmi.n	800f6ae <__kernel_rem_pio2+0x8e>
 800f69a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800f69e:	ee07 1a90 	vmov	s15, r1
 800f6a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f6a6:	eca0 7b02 	vstmia	r0!, {d7}
 800f6aa:	3201      	adds	r2, #1
 800f6ac:	e7e2      	b.n	800f674 <__kernel_rem_pio2+0x54>
 800f6ae:	eeb0 7b46 	vmov.f64	d7, d6
 800f6b2:	e7f8      	b.n	800f6a6 <__kernel_rem_pio2+0x86>
 800f6b4:	ecbc 5b02 	vldmia	ip!, {d5}
 800f6b8:	ed94 6b00 	vldr	d6, [r4]
 800f6bc:	3001      	adds	r0, #1
 800f6be:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f6c2:	4550      	cmp	r0, sl
 800f6c4:	f1a4 0408 	sub.w	r4, r4, #8
 800f6c8:	ddf4      	ble.n	800f6b4 <__kernel_rem_pio2+0x94>
 800f6ca:	ecae 7b02 	vstmia	lr!, {d7}
 800f6ce:	3601      	adds	r6, #1
 800f6d0:	3208      	adds	r2, #8
 800f6d2:	e7d7      	b.n	800f684 <__kernel_rem_pio2+0x64>
 800f6d4:	aa06      	add	r2, sp, #24
 800f6d6:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800f910 <__kernel_rem_pio2+0x2f0>
 800f6da:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800f918 <__kernel_rem_pio2+0x2f8>
 800f6de:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800f6e2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800f6e6:	9203      	str	r2, [sp, #12]
 800f6e8:	9302      	str	r3, [sp, #8]
 800f6ea:	464c      	mov	r4, r9
 800f6ec:	00e3      	lsls	r3, r4, #3
 800f6ee:	9304      	str	r3, [sp, #16]
 800f6f0:	ab92      	add	r3, sp, #584	@ 0x248
 800f6f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f6f6:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800f6fa:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800f6fc:	ab06      	add	r3, sp, #24
 800f6fe:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800f702:	461e      	mov	r6, r3
 800f704:	4620      	mov	r0, r4
 800f706:	2800      	cmp	r0, #0
 800f708:	f1a2 0208 	sub.w	r2, r2, #8
 800f70c:	dc4a      	bgt.n	800f7a4 <__kernel_rem_pio2+0x184>
 800f70e:	4628      	mov	r0, r5
 800f710:	9305      	str	r3, [sp, #20]
 800f712:	f000 fa01 	bl	800fb18 <scalbn>
 800f716:	eeb0 8b40 	vmov.f64	d8, d0
 800f71a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800f71e:	ee28 0b00 	vmul.f64	d0, d8, d0
 800f722:	f000 fa79 	bl	800fc18 <floor>
 800f726:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800f72a:	eea0 8b47 	vfms.f64	d8, d0, d7
 800f72e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800f732:	2d00      	cmp	r5, #0
 800f734:	ee17 8a90 	vmov	r8, s15
 800f738:	9b05      	ldr	r3, [sp, #20]
 800f73a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f73e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800f742:	dd41      	ble.n	800f7c8 <__kernel_rem_pio2+0x1a8>
 800f744:	1e60      	subs	r0, r4, #1
 800f746:	aa06      	add	r2, sp, #24
 800f748:	f1c5 0c18 	rsb	ip, r5, #24
 800f74c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800f750:	fa46 f20c 	asr.w	r2, r6, ip
 800f754:	4490      	add	r8, r2
 800f756:	fa02 f20c 	lsl.w	r2, r2, ip
 800f75a:	1ab6      	subs	r6, r6, r2
 800f75c:	aa06      	add	r2, sp, #24
 800f75e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800f762:	f1c5 0217 	rsb	r2, r5, #23
 800f766:	4116      	asrs	r6, r2
 800f768:	2e00      	cmp	r6, #0
 800f76a:	dd3c      	ble.n	800f7e6 <__kernel_rem_pio2+0x1c6>
 800f76c:	f04f 0c00 	mov.w	ip, #0
 800f770:	f108 0801 	add.w	r8, r8, #1
 800f774:	4660      	mov	r0, ip
 800f776:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800f77a:	4564      	cmp	r4, ip
 800f77c:	dc66      	bgt.n	800f84c <__kernel_rem_pio2+0x22c>
 800f77e:	2d00      	cmp	r5, #0
 800f780:	dd03      	ble.n	800f78a <__kernel_rem_pio2+0x16a>
 800f782:	2d01      	cmp	r5, #1
 800f784:	d072      	beq.n	800f86c <__kernel_rem_pio2+0x24c>
 800f786:	2d02      	cmp	r5, #2
 800f788:	d07a      	beq.n	800f880 <__kernel_rem_pio2+0x260>
 800f78a:	2e02      	cmp	r6, #2
 800f78c:	d12b      	bne.n	800f7e6 <__kernel_rem_pio2+0x1c6>
 800f78e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800f792:	ee30 8b48 	vsub.f64	d8, d0, d8
 800f796:	b330      	cbz	r0, 800f7e6 <__kernel_rem_pio2+0x1c6>
 800f798:	4628      	mov	r0, r5
 800f79a:	f000 f9bd 	bl	800fb18 <scalbn>
 800f79e:	ee38 8b40 	vsub.f64	d8, d8, d0
 800f7a2:	e020      	b.n	800f7e6 <__kernel_rem_pio2+0x1c6>
 800f7a4:	ee20 7b09 	vmul.f64	d7, d0, d9
 800f7a8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f7ac:	3801      	subs	r0, #1
 800f7ae:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800f7b2:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800f7b6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f7ba:	eca6 0a01 	vstmia	r6!, {s0}
 800f7be:	ed92 0b00 	vldr	d0, [r2]
 800f7c2:	ee37 0b00 	vadd.f64	d0, d7, d0
 800f7c6:	e79e      	b.n	800f706 <__kernel_rem_pio2+0xe6>
 800f7c8:	d105      	bne.n	800f7d6 <__kernel_rem_pio2+0x1b6>
 800f7ca:	1e62      	subs	r2, r4, #1
 800f7cc:	a906      	add	r1, sp, #24
 800f7ce:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800f7d2:	15f6      	asrs	r6, r6, #23
 800f7d4:	e7c8      	b.n	800f768 <__kernel_rem_pio2+0x148>
 800f7d6:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800f7da:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f7de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7e2:	da31      	bge.n	800f848 <__kernel_rem_pio2+0x228>
 800f7e4:	2600      	movs	r6, #0
 800f7e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ee:	f040 809b 	bne.w	800f928 <__kernel_rem_pio2+0x308>
 800f7f2:	1e62      	subs	r2, r4, #1
 800f7f4:	2000      	movs	r0, #0
 800f7f6:	454a      	cmp	r2, r9
 800f7f8:	da49      	bge.n	800f88e <__kernel_rem_pio2+0x26e>
 800f7fa:	2800      	cmp	r0, #0
 800f7fc:	d062      	beq.n	800f8c4 <__kernel_rem_pio2+0x2a4>
 800f7fe:	3c01      	subs	r4, #1
 800f800:	ab06      	add	r3, sp, #24
 800f802:	3d18      	subs	r5, #24
 800f804:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d0f8      	beq.n	800f7fe <__kernel_rem_pio2+0x1de>
 800f80c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800f810:	4628      	mov	r0, r5
 800f812:	f000 f981 	bl	800fb18 <scalbn>
 800f816:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800f910 <__kernel_rem_pio2+0x2f0>
 800f81a:	1c62      	adds	r2, r4, #1
 800f81c:	a96a      	add	r1, sp, #424	@ 0x1a8
 800f81e:	00d3      	lsls	r3, r2, #3
 800f820:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f824:	4622      	mov	r2, r4
 800f826:	2a00      	cmp	r2, #0
 800f828:	f280 80a8 	bge.w	800f97c <__kernel_rem_pio2+0x35c>
 800f82c:	4622      	mov	r2, r4
 800f82e:	2a00      	cmp	r2, #0
 800f830:	f2c0 80c6 	blt.w	800f9c0 <__kernel_rem_pio2+0x3a0>
 800f834:	a96a      	add	r1, sp, #424	@ 0x1a8
 800f836:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800f83a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800f908 <__kernel_rem_pio2+0x2e8>
 800f83e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800f924 <__kernel_rem_pio2+0x304>
 800f842:	2000      	movs	r0, #0
 800f844:	1aa1      	subs	r1, r4, r2
 800f846:	e0b0      	b.n	800f9aa <__kernel_rem_pio2+0x38a>
 800f848:	2602      	movs	r6, #2
 800f84a:	e78f      	b.n	800f76c <__kernel_rem_pio2+0x14c>
 800f84c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f850:	b948      	cbnz	r0, 800f866 <__kernel_rem_pio2+0x246>
 800f852:	b122      	cbz	r2, 800f85e <__kernel_rem_pio2+0x23e>
 800f854:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800f858:	f843 2c04 	str.w	r2, [r3, #-4]
 800f85c:	2201      	movs	r2, #1
 800f85e:	f10c 0c01 	add.w	ip, ip, #1
 800f862:	4610      	mov	r0, r2
 800f864:	e789      	b.n	800f77a <__kernel_rem_pio2+0x15a>
 800f866:	ebae 0202 	sub.w	r2, lr, r2
 800f86a:	e7f5      	b.n	800f858 <__kernel_rem_pio2+0x238>
 800f86c:	1e62      	subs	r2, r4, #1
 800f86e:	ab06      	add	r3, sp, #24
 800f870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f874:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f878:	a906      	add	r1, sp, #24
 800f87a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f87e:	e784      	b.n	800f78a <__kernel_rem_pio2+0x16a>
 800f880:	1e62      	subs	r2, r4, #1
 800f882:	ab06      	add	r3, sp, #24
 800f884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f888:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f88c:	e7f4      	b.n	800f878 <__kernel_rem_pio2+0x258>
 800f88e:	ab06      	add	r3, sp, #24
 800f890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f894:	3a01      	subs	r2, #1
 800f896:	4318      	orrs	r0, r3
 800f898:	e7ad      	b.n	800f7f6 <__kernel_rem_pio2+0x1d6>
 800f89a:	3301      	adds	r3, #1
 800f89c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800f8a0:	2800      	cmp	r0, #0
 800f8a2:	d0fa      	beq.n	800f89a <__kernel_rem_pio2+0x27a>
 800f8a4:	9a04      	ldr	r2, [sp, #16]
 800f8a6:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800f8aa:	446a      	add	r2, sp
 800f8ac:	eb04 000b 	add.w	r0, r4, fp
 800f8b0:	a91a      	add	r1, sp, #104	@ 0x68
 800f8b2:	1c66      	adds	r6, r4, #1
 800f8b4:	3a98      	subs	r2, #152	@ 0x98
 800f8b6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800f8ba:	4423      	add	r3, r4
 800f8bc:	42b3      	cmp	r3, r6
 800f8be:	da04      	bge.n	800f8ca <__kernel_rem_pio2+0x2aa>
 800f8c0:	461c      	mov	r4, r3
 800f8c2:	e713      	b.n	800f6ec <__kernel_rem_pio2+0xcc>
 800f8c4:	9a03      	ldr	r2, [sp, #12]
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	e7e8      	b.n	800f89c <__kernel_rem_pio2+0x27c>
 800f8ca:	9902      	ldr	r1, [sp, #8]
 800f8cc:	f8dd c004 	ldr.w	ip, [sp, #4]
 800f8d0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800f8d4:	9104      	str	r1, [sp, #16]
 800f8d6:	ee07 1a90 	vmov	s15, r1
 800f8da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f8de:	2400      	movs	r4, #0
 800f8e0:	eca0 7b02 	vstmia	r0!, {d7}
 800f8e4:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800f908 <__kernel_rem_pio2+0x2e8>
 800f8e8:	4686      	mov	lr, r0
 800f8ea:	4554      	cmp	r4, sl
 800f8ec:	dd03      	ble.n	800f8f6 <__kernel_rem_pio2+0x2d6>
 800f8ee:	eca2 7b02 	vstmia	r2!, {d7}
 800f8f2:	3601      	adds	r6, #1
 800f8f4:	e7e2      	b.n	800f8bc <__kernel_rem_pio2+0x29c>
 800f8f6:	ecbc 5b02 	vldmia	ip!, {d5}
 800f8fa:	ed3e 6b02 	vldmdb	lr!, {d6}
 800f8fe:	3401      	adds	r4, #1
 800f900:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f904:	e7f1      	b.n	800f8ea <__kernel_rem_pio2+0x2ca>
 800f906:	bf00      	nop
	...
 800f914:	3e700000 	.word	0x3e700000
 800f918:	00000000 	.word	0x00000000
 800f91c:	41700000 	.word	0x41700000
 800f920:	08010290 	.word	0x08010290
 800f924:	08010250 	.word	0x08010250
 800f928:	4268      	negs	r0, r5
 800f92a:	eeb0 0b48 	vmov.f64	d0, d8
 800f92e:	f000 f8f3 	bl	800fb18 <scalbn>
 800f932:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800fb00 <__kernel_rem_pio2+0x4e0>
 800f936:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800f93a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f93e:	db17      	blt.n	800f970 <__kernel_rem_pio2+0x350>
 800f940:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 800fb08 <__kernel_rem_pio2+0x4e8>
 800f944:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f948:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f94c:	aa06      	add	r2, sp, #24
 800f94e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800f952:	eea5 0b46 	vfms.f64	d0, d5, d6
 800f956:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f95a:	3518      	adds	r5, #24
 800f95c:	ee10 3a10 	vmov	r3, s0
 800f960:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800f964:	ee17 3a10 	vmov	r3, s14
 800f968:	3401      	adds	r4, #1
 800f96a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800f96e:	e74d      	b.n	800f80c <__kernel_rem_pio2+0x1ec>
 800f970:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f974:	aa06      	add	r2, sp, #24
 800f976:	ee10 3a10 	vmov	r3, s0
 800f97a:	e7f6      	b.n	800f96a <__kernel_rem_pio2+0x34a>
 800f97c:	a806      	add	r0, sp, #24
 800f97e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800f982:	9001      	str	r0, [sp, #4]
 800f984:	ee07 0a90 	vmov	s15, r0
 800f988:	3a01      	subs	r2, #1
 800f98a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f98e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800f992:	ee20 0b06 	vmul.f64	d0, d0, d6
 800f996:	ed21 7b02 	vstmdb	r1!, {d7}
 800f99a:	e744      	b.n	800f826 <__kernel_rem_pio2+0x206>
 800f99c:	ecbc 5b02 	vldmia	ip!, {d5}
 800f9a0:	ecb5 6b02 	vldmia	r5!, {d6}
 800f9a4:	3001      	adds	r0, #1
 800f9a6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f9aa:	4548      	cmp	r0, r9
 800f9ac:	dc01      	bgt.n	800f9b2 <__kernel_rem_pio2+0x392>
 800f9ae:	4281      	cmp	r1, r0
 800f9b0:	daf4      	bge.n	800f99c <__kernel_rem_pio2+0x37c>
 800f9b2:	a842      	add	r0, sp, #264	@ 0x108
 800f9b4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f9b8:	ed81 7b00 	vstr	d7, [r1]
 800f9bc:	3a01      	subs	r2, #1
 800f9be:	e736      	b.n	800f82e <__kernel_rem_pio2+0x20e>
 800f9c0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800f9c2:	2a02      	cmp	r2, #2
 800f9c4:	dc0a      	bgt.n	800f9dc <__kernel_rem_pio2+0x3bc>
 800f9c6:	2a00      	cmp	r2, #0
 800f9c8:	dc2d      	bgt.n	800fa26 <__kernel_rem_pio2+0x406>
 800f9ca:	d046      	beq.n	800fa5a <__kernel_rem_pio2+0x43a>
 800f9cc:	f008 0007 	and.w	r0, r8, #7
 800f9d0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800f9d4:	ecbd 8b06 	vpop	{d8-d10}
 800f9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9dc:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800f9de:	2a03      	cmp	r2, #3
 800f9e0:	d1f4      	bne.n	800f9cc <__kernel_rem_pio2+0x3ac>
 800f9e2:	a942      	add	r1, sp, #264	@ 0x108
 800f9e4:	f1a3 0208 	sub.w	r2, r3, #8
 800f9e8:	440a      	add	r2, r1
 800f9ea:	4611      	mov	r1, r2
 800f9ec:	4620      	mov	r0, r4
 800f9ee:	2800      	cmp	r0, #0
 800f9f0:	f1a1 0108 	sub.w	r1, r1, #8
 800f9f4:	dc52      	bgt.n	800fa9c <__kernel_rem_pio2+0x47c>
 800f9f6:	4621      	mov	r1, r4
 800f9f8:	2901      	cmp	r1, #1
 800f9fa:	f1a2 0208 	sub.w	r2, r2, #8
 800f9fe:	dc5d      	bgt.n	800fabc <__kernel_rem_pio2+0x49c>
 800fa00:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800fb10 <__kernel_rem_pio2+0x4f0>
 800fa04:	aa42      	add	r2, sp, #264	@ 0x108
 800fa06:	4413      	add	r3, r2
 800fa08:	2c01      	cmp	r4, #1
 800fa0a:	dc67      	bgt.n	800fadc <__kernel_rem_pio2+0x4bc>
 800fa0c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800fa10:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800fa14:	2e00      	cmp	r6, #0
 800fa16:	d167      	bne.n	800fae8 <__kernel_rem_pio2+0x4c8>
 800fa18:	ed87 5b00 	vstr	d5, [r7]
 800fa1c:	ed87 6b02 	vstr	d6, [r7, #8]
 800fa20:	ed87 7b04 	vstr	d7, [r7, #16]
 800fa24:	e7d2      	b.n	800f9cc <__kernel_rem_pio2+0x3ac>
 800fa26:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800fb10 <__kernel_rem_pio2+0x4f0>
 800fa2a:	aa42      	add	r2, sp, #264	@ 0x108
 800fa2c:	4413      	add	r3, r2
 800fa2e:	4622      	mov	r2, r4
 800fa30:	2a00      	cmp	r2, #0
 800fa32:	da24      	bge.n	800fa7e <__kernel_rem_pio2+0x45e>
 800fa34:	b34e      	cbz	r6, 800fa8a <__kernel_rem_pio2+0x46a>
 800fa36:	eeb1 7b46 	vneg.f64	d7, d6
 800fa3a:	ed87 7b00 	vstr	d7, [r7]
 800fa3e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800fa42:	aa44      	add	r2, sp, #272	@ 0x110
 800fa44:	2301      	movs	r3, #1
 800fa46:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fa4a:	429c      	cmp	r4, r3
 800fa4c:	da20      	bge.n	800fa90 <__kernel_rem_pio2+0x470>
 800fa4e:	b10e      	cbz	r6, 800fa54 <__kernel_rem_pio2+0x434>
 800fa50:	eeb1 7b47 	vneg.f64	d7, d7
 800fa54:	ed87 7b02 	vstr	d7, [r7, #8]
 800fa58:	e7b8      	b.n	800f9cc <__kernel_rem_pio2+0x3ac>
 800fa5a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800fb10 <__kernel_rem_pio2+0x4f0>
 800fa5e:	aa42      	add	r2, sp, #264	@ 0x108
 800fa60:	4413      	add	r3, r2
 800fa62:	2c00      	cmp	r4, #0
 800fa64:	da05      	bge.n	800fa72 <__kernel_rem_pio2+0x452>
 800fa66:	b10e      	cbz	r6, 800fa6c <__kernel_rem_pio2+0x44c>
 800fa68:	eeb1 7b47 	vneg.f64	d7, d7
 800fa6c:	ed87 7b00 	vstr	d7, [r7]
 800fa70:	e7ac      	b.n	800f9cc <__kernel_rem_pio2+0x3ac>
 800fa72:	ed33 6b02 	vldmdb	r3!, {d6}
 800fa76:	3c01      	subs	r4, #1
 800fa78:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fa7c:	e7f1      	b.n	800fa62 <__kernel_rem_pio2+0x442>
 800fa7e:	ed33 7b02 	vldmdb	r3!, {d7}
 800fa82:	3a01      	subs	r2, #1
 800fa84:	ee36 6b07 	vadd.f64	d6, d6, d7
 800fa88:	e7d2      	b.n	800fa30 <__kernel_rem_pio2+0x410>
 800fa8a:	eeb0 7b46 	vmov.f64	d7, d6
 800fa8e:	e7d4      	b.n	800fa3a <__kernel_rem_pio2+0x41a>
 800fa90:	ecb2 6b02 	vldmia	r2!, {d6}
 800fa94:	3301      	adds	r3, #1
 800fa96:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fa9a:	e7d6      	b.n	800fa4a <__kernel_rem_pio2+0x42a>
 800fa9c:	ed91 7b00 	vldr	d7, [r1]
 800faa0:	ed91 5b02 	vldr	d5, [r1, #8]
 800faa4:	3801      	subs	r0, #1
 800faa6:	ee37 6b05 	vadd.f64	d6, d7, d5
 800faaa:	ee37 7b46 	vsub.f64	d7, d7, d6
 800faae:	ed81 6b00 	vstr	d6, [r1]
 800fab2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800fab6:	ed81 7b02 	vstr	d7, [r1, #8]
 800faba:	e798      	b.n	800f9ee <__kernel_rem_pio2+0x3ce>
 800fabc:	ed92 7b00 	vldr	d7, [r2]
 800fac0:	ed92 5b02 	vldr	d5, [r2, #8]
 800fac4:	3901      	subs	r1, #1
 800fac6:	ee37 6b05 	vadd.f64	d6, d7, d5
 800faca:	ee37 7b46 	vsub.f64	d7, d7, d6
 800face:	ed82 6b00 	vstr	d6, [r2]
 800fad2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800fad6:	ed82 7b02 	vstr	d7, [r2, #8]
 800fada:	e78d      	b.n	800f9f8 <__kernel_rem_pio2+0x3d8>
 800fadc:	ed33 6b02 	vldmdb	r3!, {d6}
 800fae0:	3c01      	subs	r4, #1
 800fae2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fae6:	e78f      	b.n	800fa08 <__kernel_rem_pio2+0x3e8>
 800fae8:	eeb1 5b45 	vneg.f64	d5, d5
 800faec:	eeb1 6b46 	vneg.f64	d6, d6
 800faf0:	ed87 5b00 	vstr	d5, [r7]
 800faf4:	eeb1 7b47 	vneg.f64	d7, d7
 800faf8:	ed87 6b02 	vstr	d6, [r7, #8]
 800fafc:	e790      	b.n	800fa20 <__kernel_rem_pio2+0x400>
 800fafe:	bf00      	nop
 800fb00:	00000000 	.word	0x00000000
 800fb04:	41700000 	.word	0x41700000
 800fb08:	00000000 	.word	0x00000000
 800fb0c:	3e700000 	.word	0x3e700000
	...

0800fb18 <scalbn>:
 800fb18:	ee10 1a90 	vmov	r1, s1
 800fb1c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fb20:	b98b      	cbnz	r3, 800fb46 <scalbn+0x2e>
 800fb22:	ee10 3a10 	vmov	r3, s0
 800fb26:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800fb2a:	4319      	orrs	r1, r3
 800fb2c:	d00a      	beq.n	800fb44 <scalbn+0x2c>
 800fb2e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800fbe0 <scalbn+0xc8>
 800fb32:	4b37      	ldr	r3, [pc, #220]	@ (800fc10 <scalbn+0xf8>)
 800fb34:	ee20 0b07 	vmul.f64	d0, d0, d7
 800fb38:	4298      	cmp	r0, r3
 800fb3a:	da0b      	bge.n	800fb54 <scalbn+0x3c>
 800fb3c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800fbe8 <scalbn+0xd0>
 800fb40:	ee20 0b07 	vmul.f64	d0, d0, d7
 800fb44:	4770      	bx	lr
 800fb46:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800fb4a:	4293      	cmp	r3, r2
 800fb4c:	d107      	bne.n	800fb5e <scalbn+0x46>
 800fb4e:	ee30 0b00 	vadd.f64	d0, d0, d0
 800fb52:	4770      	bx	lr
 800fb54:	ee10 1a90 	vmov	r1, s1
 800fb58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fb5c:	3b36      	subs	r3, #54	@ 0x36
 800fb5e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800fb62:	4290      	cmp	r0, r2
 800fb64:	dd0d      	ble.n	800fb82 <scalbn+0x6a>
 800fb66:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800fbf0 <scalbn+0xd8>
 800fb6a:	ee10 3a90 	vmov	r3, s1
 800fb6e:	eeb0 6b47 	vmov.f64	d6, d7
 800fb72:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 800fbf8 <scalbn+0xe0>
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	fe27 7b05 	vselge.f64	d7, d7, d5
 800fb7c:	ee27 0b06 	vmul.f64	d0, d7, d6
 800fb80:	4770      	bx	lr
 800fb82:	4418      	add	r0, r3
 800fb84:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800fb88:	4298      	cmp	r0, r3
 800fb8a:	dcec      	bgt.n	800fb66 <scalbn+0x4e>
 800fb8c:	2800      	cmp	r0, #0
 800fb8e:	dd0a      	ble.n	800fba6 <scalbn+0x8e>
 800fb90:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800fb94:	ec53 2b10 	vmov	r2, r3, d0
 800fb98:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800fb9c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800fba0:	ec43 2b10 	vmov	d0, r2, r3
 800fba4:	4770      	bx	lr
 800fba6:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800fbaa:	da09      	bge.n	800fbc0 <scalbn+0xa8>
 800fbac:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800fbe8 <scalbn+0xd0>
 800fbb0:	ee10 3a90 	vmov	r3, s1
 800fbb4:	eeb0 6b47 	vmov.f64	d6, d7
 800fbb8:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 800fc00 <scalbn+0xe8>
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	e7db      	b.n	800fb78 <scalbn+0x60>
 800fbc0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800fbc4:	ec53 2b10 	vmov	r2, r3, d0
 800fbc8:	3036      	adds	r0, #54	@ 0x36
 800fbca:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800fbce:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800fbd2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800fc08 <scalbn+0xf0>
 800fbd6:	ec43 2b10 	vmov	d0, r2, r3
 800fbda:	e7b1      	b.n	800fb40 <scalbn+0x28>
 800fbdc:	f3af 8000 	nop.w
 800fbe0:	00000000 	.word	0x00000000
 800fbe4:	43500000 	.word	0x43500000
 800fbe8:	c2f8f359 	.word	0xc2f8f359
 800fbec:	01a56e1f 	.word	0x01a56e1f
 800fbf0:	8800759c 	.word	0x8800759c
 800fbf4:	7e37e43c 	.word	0x7e37e43c
 800fbf8:	8800759c 	.word	0x8800759c
 800fbfc:	fe37e43c 	.word	0xfe37e43c
 800fc00:	c2f8f359 	.word	0xc2f8f359
 800fc04:	81a56e1f 	.word	0x81a56e1f
 800fc08:	00000000 	.word	0x00000000
 800fc0c:	3c900000 	.word	0x3c900000
 800fc10:	ffff3cb0 	.word	0xffff3cb0
 800fc14:	00000000 	.word	0x00000000

0800fc18 <floor>:
 800fc18:	ee10 3a90 	vmov	r3, s1
 800fc1c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800fc20:	ee10 2a10 	vmov	r2, s0
 800fc24:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800fc28:	2913      	cmp	r1, #19
 800fc2a:	b530      	push	{r4, r5, lr}
 800fc2c:	4615      	mov	r5, r2
 800fc2e:	dc33      	bgt.n	800fc98 <floor+0x80>
 800fc30:	2900      	cmp	r1, #0
 800fc32:	da18      	bge.n	800fc66 <floor+0x4e>
 800fc34:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800fcf8 <floor+0xe0>
 800fc38:	ee30 0b07 	vadd.f64	d0, d0, d7
 800fc3c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fc40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc44:	dd0a      	ble.n	800fc5c <floor+0x44>
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	da50      	bge.n	800fcec <floor+0xd4>
 800fc4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fc4e:	4313      	orrs	r3, r2
 800fc50:	2200      	movs	r2, #0
 800fc52:	4293      	cmp	r3, r2
 800fc54:	4b2a      	ldr	r3, [pc, #168]	@ (800fd00 <floor+0xe8>)
 800fc56:	bf08      	it	eq
 800fc58:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800fc5c:	4619      	mov	r1, r3
 800fc5e:	4610      	mov	r0, r2
 800fc60:	ec41 0b10 	vmov	d0, r0, r1
 800fc64:	e01f      	b.n	800fca6 <floor+0x8e>
 800fc66:	4827      	ldr	r0, [pc, #156]	@ (800fd04 <floor+0xec>)
 800fc68:	4108      	asrs	r0, r1
 800fc6a:	ea03 0400 	and.w	r4, r3, r0
 800fc6e:	4314      	orrs	r4, r2
 800fc70:	d019      	beq.n	800fca6 <floor+0x8e>
 800fc72:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800fcf8 <floor+0xe0>
 800fc76:	ee30 0b07 	vadd.f64	d0, d0, d7
 800fc7a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc82:	ddeb      	ble.n	800fc5c <floor+0x44>
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	bfbe      	ittt	lt
 800fc88:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800fc8c:	410a      	asrlt	r2, r1
 800fc8e:	189b      	addlt	r3, r3, r2
 800fc90:	ea23 0300 	bic.w	r3, r3, r0
 800fc94:	2200      	movs	r2, #0
 800fc96:	e7e1      	b.n	800fc5c <floor+0x44>
 800fc98:	2933      	cmp	r1, #51	@ 0x33
 800fc9a:	dd05      	ble.n	800fca8 <floor+0x90>
 800fc9c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800fca0:	d101      	bne.n	800fca6 <floor+0x8e>
 800fca2:	ee30 0b00 	vadd.f64	d0, d0, d0
 800fca6:	bd30      	pop	{r4, r5, pc}
 800fca8:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800fcac:	f04f 30ff 	mov.w	r0, #4294967295
 800fcb0:	40e0      	lsrs	r0, r4
 800fcb2:	4210      	tst	r0, r2
 800fcb4:	d0f7      	beq.n	800fca6 <floor+0x8e>
 800fcb6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800fcf8 <floor+0xe0>
 800fcba:	ee30 0b07 	vadd.f64	d0, d0, d7
 800fcbe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fcc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcc6:	ddc9      	ble.n	800fc5c <floor+0x44>
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	da02      	bge.n	800fcd2 <floor+0xba>
 800fccc:	2914      	cmp	r1, #20
 800fcce:	d103      	bne.n	800fcd8 <floor+0xc0>
 800fcd0:	3301      	adds	r3, #1
 800fcd2:	ea22 0200 	bic.w	r2, r2, r0
 800fcd6:	e7c1      	b.n	800fc5c <floor+0x44>
 800fcd8:	2401      	movs	r4, #1
 800fcda:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800fcde:	fa04 f101 	lsl.w	r1, r4, r1
 800fce2:	440a      	add	r2, r1
 800fce4:	42aa      	cmp	r2, r5
 800fce6:	bf38      	it	cc
 800fce8:	191b      	addcc	r3, r3, r4
 800fcea:	e7f2      	b.n	800fcd2 <floor+0xba>
 800fcec:	2200      	movs	r2, #0
 800fcee:	4613      	mov	r3, r2
 800fcf0:	e7b4      	b.n	800fc5c <floor+0x44>
 800fcf2:	bf00      	nop
 800fcf4:	f3af 8000 	nop.w
 800fcf8:	8800759c 	.word	0x8800759c
 800fcfc:	7e37e43c 	.word	0x7e37e43c
 800fd00:	bff00000 	.word	0xbff00000
 800fd04:	000fffff 	.word	0x000fffff

0800fd08 <_init>:
 800fd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd0a:	bf00      	nop
 800fd0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd0e:	bc08      	pop	{r3}
 800fd10:	469e      	mov	lr, r3
 800fd12:	4770      	bx	lr

0800fd14 <_fini>:
 800fd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd16:	bf00      	nop
 800fd18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd1a:	bc08      	pop	{r3}
 800fd1c:	469e      	mov	lr, r3
 800fd1e:	4770      	bx	lr
>>>>>>> main
