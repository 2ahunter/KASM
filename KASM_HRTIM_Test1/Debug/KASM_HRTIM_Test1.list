
KASM_HRTIM_Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010238  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  080104d8  080104d8  000114d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010a58  08010a58  00011a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010a60  08010a60  00011a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010a64  08010a64  00011a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e8  24000000  08010a68  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003dc0  240001e8  08010c50  000121e8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24003fa8  08010c50  00012fa8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000121e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d0f9  00000000  00000000  00012216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e2b  00000000  00000000  0002f30f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017a8  00000000  00000000  00032140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012aa  00000000  00000000  000338e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a436  00000000  00000000  00034b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e2c1  00000000  00000000  0006efc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d944  00000000  00000000  0008d289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020abcd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007668  00000000  00000000  0020ac10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004e  00000000  00000000  00212278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080104c0 	.word	0x080104c0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	080104c0 	.word	0x080104c0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000684:	f002 fa72 	bl	8002b6c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000688:	f003 f972 	bl	8003970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068c:	f000 f98c 	bl	80009a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f001 f9d6 	bl	8001a40 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000694:	f000 fc3a 	bl	8000f0c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000698:	f000 fd08 	bl	80010ac <MX_TIM2_Init>
  MX_TIM4_Init();
 800069c:	f000 fd7c 	bl	8001198 <MX_TIM4_Init>
  MX_TIM5_Init();
 80006a0:	f000 fe12 	bl	80012c8 <MX_TIM5_Init>
  MX_TIM8_Init();
 80006a4:	f000 fe92 	bl	80013cc <MX_TIM8_Init>
  MX_TIM12_Init();
 80006a8:	f000 ff3a 	bl	8001520 <MX_TIM12_Init>
  MX_TIM13_Init();
 80006ac:	f000 ffb0 	bl	8001610 <MX_TIM13_Init>
  MX_TIM14_Init();
 80006b0:	f000 fffc 	bl	80016ac <MX_TIM14_Init>
  MX_TIM15_Init();
 80006b4:	f001 f848 	bl	8001748 <MX_TIM15_Init>
  MX_TIM16_Init();
 80006b8:	f001 f8f6 	bl	80018a8 <MX_TIM16_Init>
  MX_HRTIM_Init();
 80006bc:	f000 fa22 	bl	8000b04 <MX_HRTIM_Init>
  MX_LPTIM1_Init();
 80006c0:	f000 fbf6 	bl	8000eb0 <MX_LPTIM1_Init>
  MX_UART4_Init();
 80006c4:	f001 f96a 	bl	800199c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */


  //Timer 1
  HAL_TIM_Base_Start_IT(&htim1);
 80006c8:	4896      	ldr	r0, [pc, #600]	@ (8000924 <main+0x2a4>)
 80006ca:	f008 fe87 	bl	80093dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);    //Starts the PWM on each of the desired channels
 80006ce:	2100      	movs	r1, #0
 80006d0:	4894      	ldr	r0, [pc, #592]	@ (8000924 <main+0x2a4>)
 80006d2:	f008 ff5d 	bl	8009590 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80006d6:	2104      	movs	r1, #4
 80006d8:	4892      	ldr	r0, [pc, #584]	@ (8000924 <main+0x2a4>)
 80006da:	f008 ff59 	bl	8009590 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80006de:	2108      	movs	r1, #8
 80006e0:	4890      	ldr	r0, [pc, #576]	@ (8000924 <main+0x2a4>)
 80006e2:	f008 ff55 	bl	8009590 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80006e6:	210c      	movs	r1, #12
 80006e8:	488e      	ldr	r0, [pc, #568]	@ (8000924 <main+0x2a4>)
 80006ea:	f008 ff51 	bl	8009590 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, GPIO_PIN_SET);   //Sets the pin to 1
 80006ee:	2201      	movs	r2, #1
 80006f0:	2101      	movs	r1, #1
 80006f2:	488d      	ldr	r0, [pc, #564]	@ (8000928 <main+0x2a8>)
 80006f4:	f004 fa76 	bl	8004be4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2102      	movs	r1, #2
 80006fc:	488a      	ldr	r0, [pc, #552]	@ (8000928 <main+0x2a8>)
 80006fe:	f004 fa71 	bl	8004be4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	2104      	movs	r1, #4
 8000706:	4888      	ldr	r0, [pc, #544]	@ (8000928 <main+0x2a8>)
 8000708:	f004 fa6c 	bl	8004be4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	2108      	movs	r1, #8
 8000710:	4885      	ldr	r0, [pc, #532]	@ (8000928 <main+0x2a8>)
 8000712:	f004 fa67 	bl	8004be4 <HAL_GPIO_WritePin>
  			 *
  			 */
  //End Timer 1

  //Timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 8000716:	4885      	ldr	r0, [pc, #532]	@ (800092c <main+0x2ac>)
 8000718:	f008 fe60 	bl	80093dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800071c:	2100      	movs	r1, #0
 800071e:	4883      	ldr	r0, [pc, #524]	@ (800092c <main+0x2ac>)
 8000720:	f008 ff36 	bl	8009590 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM2_CH1_PH_GPIO_Port, TIM2_CH1_PH_Pin, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	2110      	movs	r1, #16
 8000728:	487f      	ldr	r0, [pc, #508]	@ (8000928 <main+0x2a8>)
 800072a:	f004 fa5b 	bl	8004be4 <HAL_GPIO_WritePin>
  //End Timer 2

  //Timer 4
  HAL_TIM_Base_Start_IT(&htim4);
 800072e:	4880      	ldr	r0, [pc, #512]	@ (8000930 <main+0x2b0>)
 8000730:	f008 fe54 	bl	80093dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000734:	2100      	movs	r1, #0
 8000736:	487e      	ldr	r0, [pc, #504]	@ (8000930 <main+0x2b0>)
 8000738:	f008 ff2a 	bl	8009590 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800073c:	2104      	movs	r1, #4
 800073e:	487c      	ldr	r0, [pc, #496]	@ (8000930 <main+0x2b0>)
 8000740:	f008 ff26 	bl	8009590 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000744:	2108      	movs	r1, #8
 8000746:	487a      	ldr	r0, [pc, #488]	@ (8000930 <main+0x2b0>)
 8000748:	f008 ff22 	bl	8009590 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800074c:	210c      	movs	r1, #12
 800074e:	4878      	ldr	r0, [pc, #480]	@ (8000930 <main+0x2b0>)
 8000750:	f008 ff1e 	bl	8009590 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM4_CH1_PH_GPIO_Port, TIM4_CH1_PH_Pin, GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800075a:	4876      	ldr	r0, [pc, #472]	@ (8000934 <main+0x2b4>)
 800075c:	f004 fa42 	bl	8004be4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH2_PH_GPIO_Port, TIM4_CH2_PH_Pin, GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000766:	4873      	ldr	r0, [pc, #460]	@ (8000934 <main+0x2b4>)
 8000768:	f004 fa3c 	bl	8004be4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH3_PH_GPIO_Port, TIM4_CH3_PH_Pin, GPIO_PIN_SET);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000772:	4871      	ldr	r0, [pc, #452]	@ (8000938 <main+0x2b8>)
 8000774:	f004 fa36 	bl	8004be4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH4_PH_GPIO_Port, TIM4_CH4_PH_Pin, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800077e:	486e      	ldr	r0, [pc, #440]	@ (8000938 <main+0x2b8>)
 8000780:	f004 fa30 	bl	8004be4 <HAL_GPIO_WritePin>
  //End Timer 4

  //Timer 5
  HAL_TIM_Base_Start_IT(&htim5);
 8000784:	486d      	ldr	r0, [pc, #436]	@ (800093c <main+0x2bc>)
 8000786:	f008 fe29 	bl	80093dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800078a:	2104      	movs	r1, #4
 800078c:	486b      	ldr	r0, [pc, #428]	@ (800093c <main+0x2bc>)
 800078e:	f008 feff 	bl	8009590 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8000792:	2108      	movs	r1, #8
 8000794:	4869      	ldr	r0, [pc, #420]	@ (800093c <main+0x2bc>)
 8000796:	f008 fefb 	bl	8009590 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM5_CH2_PH_GPIO_Port, TIM5_CH2_PH_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007a0:	4865      	ldr	r0, [pc, #404]	@ (8000938 <main+0x2b8>)
 80007a2:	f004 fa1f 	bl	8004be4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM5_CH3_PH_GPIO_Port, TIM5_CH3_PH_Pin, GPIO_PIN_SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ac:	4862      	ldr	r0, [pc, #392]	@ (8000938 <main+0x2b8>)
 80007ae:	f004 fa19 	bl	8004be4 <HAL_GPIO_WritePin>
  //End Timer 5

  //Timer 8
  HAL_TIM_Base_Start_IT(&htim8);
 80007b2:	4863      	ldr	r0, [pc, #396]	@ (8000940 <main+0x2c0>)
 80007b4:	f008 fe12 	bl	80093dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80007b8:	210c      	movs	r1, #12
 80007ba:	4861      	ldr	r0, [pc, #388]	@ (8000940 <main+0x2c0>)
 80007bc:	f008 fee8 	bl	8009590 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM8_CH4_PH_GPIO_Port, TIM8_CH4_PH_Pin, GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	2180      	movs	r1, #128	@ 0x80
 80007c4:	4858      	ldr	r0, [pc, #352]	@ (8000928 <main+0x2a8>)
 80007c6:	f004 fa0d 	bl	8004be4 <HAL_GPIO_WritePin>
  //End Timer 8

  //Timer 12
  HAL_TIM_Base_Start_IT(&htim12);
 80007ca:	485e      	ldr	r0, [pc, #376]	@ (8000944 <main+0x2c4>)
 80007cc:	f008 fe06 	bl	80093dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 80007d0:	2104      	movs	r1, #4
 80007d2:	485c      	ldr	r0, [pc, #368]	@ (8000944 <main+0x2c4>)
 80007d4:	f008 fedc 	bl	8009590 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM12_CH2_PH_GPIO_Port, TIM12_CH2_PH_Pin, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007de:	4852      	ldr	r0, [pc, #328]	@ (8000928 <main+0x2a8>)
 80007e0:	f004 fa00 	bl	8004be4 <HAL_GPIO_WritePin>
  //End Timer 12

  //Timer 13
  HAL_TIM_Base_Start_IT(&htim13);
 80007e4:	4858      	ldr	r0, [pc, #352]	@ (8000948 <main+0x2c8>)
 80007e6:	f008 fdf9 	bl	80093dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80007ea:	2100      	movs	r1, #0
 80007ec:	4856      	ldr	r0, [pc, #344]	@ (8000948 <main+0x2c8>)
 80007ee:	f008 fecf 	bl	8009590 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM13_CH1_PH_GPIO_Port, TIM13_CH1_PH_Pin, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007f8:	484b      	ldr	r0, [pc, #300]	@ (8000928 <main+0x2a8>)
 80007fa:	f004 f9f3 	bl	8004be4 <HAL_GPIO_WritePin>
  //End Timer 13

  //Timer 14
  HAL_TIM_Base_Start_IT(&htim14);
 80007fe:	4853      	ldr	r0, [pc, #332]	@ (800094c <main+0x2cc>)
 8000800:	f008 fdec 	bl	80093dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000804:	2100      	movs	r1, #0
 8000806:	4851      	ldr	r0, [pc, #324]	@ (800094c <main+0x2cc>)
 8000808:	f008 fec2 	bl	8009590 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM14_CH1_PH_GPIO_Port, TIM14_CH1_PH_Pin, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000812:	4845      	ldr	r0, [pc, #276]	@ (8000928 <main+0x2a8>)
 8000814:	f004 f9e6 	bl	8004be4 <HAL_GPIO_WritePin>
  //End Timer 14

  //Timer 15
  HAL_TIM_Base_Start_IT(&htim15);
 8000818:	484d      	ldr	r0, [pc, #308]	@ (8000950 <main+0x2d0>)
 800081a:	f008 fddf 	bl	80093dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800081e:	2100      	movs	r1, #0
 8000820:	484b      	ldr	r0, [pc, #300]	@ (8000950 <main+0x2d0>)
 8000822:	f008 feb5 	bl	8009590 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000826:	2104      	movs	r1, #4
 8000828:	4849      	ldr	r0, [pc, #292]	@ (8000950 <main+0x2d0>)
 800082a:	f008 feb1 	bl	8009590 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM15_CH1_PH_GPIO_Port, TIM15_CH1_PH_Pin, GPIO_PIN_SET);
 800082e:	2201      	movs	r2, #1
 8000830:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000834:	483c      	ldr	r0, [pc, #240]	@ (8000928 <main+0x2a8>)
 8000836:	f004 f9d5 	bl	8004be4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM15_CH2_PH_GPIO_Port, TIM15_CH2_PH_Pin, GPIO_PIN_SET);
 800083a:	2201      	movs	r2, #1
 800083c:	2101      	movs	r1, #1
 800083e:	4845      	ldr	r0, [pc, #276]	@ (8000954 <main+0x2d4>)
 8000840:	f004 f9d0 	bl	8004be4 <HAL_GPIO_WritePin>
  //End Timer 15

  //Timer 16
  HAL_TIM_Base_Start_IT(&htim16);
 8000844:	4844      	ldr	r0, [pc, #272]	@ (8000958 <main+0x2d8>)
 8000846:	f008 fdc9 	bl	80093dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800084a:	2100      	movs	r1, #0
 800084c:	4842      	ldr	r0, [pc, #264]	@ (8000958 <main+0x2d8>)
 800084e:	f008 fe9f 	bl	8009590 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM16_CH1_PH_GPIO_Port, TIM16_CH1_PH_Pin, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2102      	movs	r1, #2
 8000856:	483f      	ldr	r0, [pc, #252]	@ (8000954 <main+0x2d4>)
 8000858:	f004 f9c4 	bl	8004be4 <HAL_GPIO_WritePin>
  //End Timer 16

  //HRTIM CODE GOES HERE *******
     // Enable output
     HRTIM1->sCommonRegs.OENR = HRTIM_OENR_TA1OEN + HRTIM_OENR_TA2OEN +
 800085c:	4b3f      	ldr	r3, [pc, #252]	@ (800095c <main+0x2dc>)
 800085e:	22ff      	movs	r2, #255	@ 0xff
 8000860:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
     	 	HRTIM_OENR_TB1OEN + HRTIM_OENR_TB2OEN + HRTIM_OENR_TC1OEN + HRTIM_OENR_TC2OEN + HRTIM_OENR_TD1OEN + HRTIM_OENR_TD2OEN;
     //Start Timer
     HRTIM1->sMasterRegs.MCR = HRTIM_MCR_TACEN + HRTIM_MCR_TBCEN + HRTIM_MCR_TCCEN + HRTIM_MCR_TDCEN;
 8000864:	4b3d      	ldr	r3, [pc, #244]	@ (800095c <main+0x2dc>)
 8000866:	f44f 12f0 	mov.w	r2, #1966080	@ 0x1e0000
 800086a:	601a      	str	r2, [r3, #0]
  //END HRTIM CODE

  //Low-Power Timer
     HAL_LPTIM_Counter_Start_IT(&hlptim1, LPTIM_ARR_ARR);
 800086c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000870:	483b      	ldr	r0, [pc, #236]	@ (8000960 <main+0x2e0>)
 8000872:	f005 fbb6 	bl	8005fe2 <HAL_LPTIM_Counter_Start_IT>
     HAL_LPTIM_PWM_Start(&hlptim1, LPTIM_ARR_ARR, LPTIM_CMP_CMP);
 8000876:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800087a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800087e:	4838      	ldr	r0, [pc, #224]	@ (8000960 <main+0x2e0>)
 8000880:	f005 fb62 	bl	8005f48 <HAL_LPTIM_PWM_Start>
     HAL_GPIO_WritePin(LPTIM1_OUT_PH_GPIO_Port, LPTIM1_OUT_PH_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2104      	movs	r1, #4
 8000888:	4832      	ldr	r0, [pc, #200]	@ (8000954 <main+0x2d4>)
 800088a:	f004 f9ab 	bl	8004be4 <HAL_GPIO_WritePin>
       	LPTIM1->ARR = (12000-1);
 800088e:	4b35      	ldr	r3, [pc, #212]	@ (8000964 <main+0x2e4>)
 8000890:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8000894:	619a      	str	r2, [r3, #24]
  //End Low Power Timer

       	    //Timer Synchronization
       	    TIM1->CNT = 0;
 8000896:	4b34      	ldr	r3, [pc, #208]	@ (8000968 <main+0x2e8>)
 8000898:	2200      	movs	r2, #0
 800089a:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM2->CNT = 0;
 800089c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008a0:	2200      	movs	r2, #0
 80008a2:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM4->CNT = 0;
 80008a4:	4b31      	ldr	r3, [pc, #196]	@ (800096c <main+0x2ec>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM5->CNT = 0;
 80008aa:	4b31      	ldr	r3, [pc, #196]	@ (8000970 <main+0x2f0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM8->CNT = 0;
 80008b0:	4b30      	ldr	r3, [pc, #192]	@ (8000974 <main+0x2f4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM12->CNT = 0;
 80008b6:	4b30      	ldr	r3, [pc, #192]	@ (8000978 <main+0x2f8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM13->CNT = 0;
 80008bc:	4b2f      	ldr	r3, [pc, #188]	@ (800097c <main+0x2fc>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM14->CNT = 0;
 80008c2:	4b2f      	ldr	r3, [pc, #188]	@ (8000980 <main+0x300>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM15->CNT = 0;
 80008c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000984 <main+0x304>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM16->CNT = 0;
 80008ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000988 <main+0x308>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	@ 0x24
       	    LPTIM1->CNT = 0;
 80008d4:	4b23      	ldr	r3, [pc, #140]	@ (8000964 <main+0x2e4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]

   gen_sine();
 80008da:	f002 f911 	bl	8002b00 <gen_sine>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   init_buffer(rxp);
 80008de:	4b2b      	ldr	r3, [pc, #172]	@ (800098c <main+0x30c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 fae1 	bl	8001eaa <init_buffer>
   HAL_UART_Receive_IT(&huart4, rx_buff, sizeof(rx_buff));
 80008e8:	2201      	movs	r2, #1
 80008ea:	4929      	ldr	r1, [pc, #164]	@ (8000990 <main+0x310>)
 80008ec:	4829      	ldr	r0, [pc, #164]	@ (8000994 <main+0x314>)
 80008ee:	f00a f8e1 	bl	800aab4 <HAL_UART_Receive_IT>

  while (1)
  {
	  if(ctrl_tmr_expired == TRUE) control_update(ref); //Sets flag for timer interrupt
 80008f2:	4b29      	ldr	r3, [pc, #164]	@ (8000998 <main+0x318>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d106      	bne.n	8000908 <main+0x288>
 80008fa:	4b28      	ldr	r3, [pc, #160]	@ (800099c <main+0x31c>)
 80008fc:	ed93 7b00 	vldr	d7, [r3]
 8000900:	eeb0 0b47 	vmov.f64	d0, d7
 8000904:	f001 fb6c 	bl	8001fe0 <control_update>
	  if(data_ready == TRUE) UART_update(); //Sets flag when a message is received
 8000908:	4b25      	ldr	r3, [pc, #148]	@ (80009a0 <main+0x320>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d101      	bne.n	8000914 <main+0x294>
 8000910:	f001 f9b2 	bl	8001c78 <UART_update>
	  if(cmd_ready == TRUE) command_update(); //Sets flag once message is ready to send
 8000914:	4b23      	ldr	r3, [pc, #140]	@ (80009a4 <main+0x324>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d1ea      	bne.n	80008f2 <main+0x272>
 800091c:	f001 f9ca 	bl	8001cb4 <command_update>
	  if(ctrl_tmr_expired == TRUE) control_update(ref); //Sets flag for timer interrupt
 8000920:	e7e7      	b.n	80008f2 <main+0x272>
 8000922:	bf00      	nop
 8000924:	24000318 	.word	0x24000318
 8000928:	58021000 	.word	0x58021000
 800092c:	24000364 	.word	0x24000364
 8000930:	240003b0 	.word	0x240003b0
 8000934:	58020400 	.word	0x58020400
 8000938:	58020800 	.word	0x58020800
 800093c:	240003fc 	.word	0x240003fc
 8000940:	24000448 	.word	0x24000448
 8000944:	24000494 	.word	0x24000494
 8000948:	240004e0 	.word	0x240004e0
 800094c:	2400052c 	.word	0x2400052c
 8000950:	24000578 	.word	0x24000578
 8000954:	58020c00 	.word	0x58020c00
 8000958:	240005c4 	.word	0x240005c4
 800095c:	40017400 	.word	0x40017400
 8000960:	240002e0 	.word	0x240002e0
 8000964:	40002400 	.word	0x40002400
 8000968:	40010000 	.word	0x40010000
 800096c:	40000800 	.word	0x40000800
 8000970:	40000c00 	.word	0x40000c00
 8000974:	40010400 	.word	0x40010400
 8000978:	40001800 	.word	0x40001800
 800097c:	40001c00 	.word	0x40001c00
 8000980:	40002000 	.word	0x40002000
 8000984:	40014000 	.word	0x40014000
 8000988:	40014400 	.word	0x40014400
 800098c:	24000000 	.word	0x24000000
 8000990:	24003e3c 	.word	0x24003e3c
 8000994:	24000610 	.word	0x24000610
 8000998:	240006a4 	.word	0x240006a4
 800099c:	240006a8 	.word	0x240006a8
 80009a0:	240025f0 	.word	0x240025f0
 80009a4:	24003e02 	.word	0x24003e02

080009a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b09e      	sub	sp, #120	@ 0x78
 80009ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009b2:	224c      	movs	r2, #76	@ 0x4c
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f00d f8ff 	bl	800dbba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	2220      	movs	r2, #32
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f00d f8f8 	bl	800dbba <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009ca:	2002      	movs	r0, #2
 80009cc:	f005 fe62 	bl	8006694 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	4b48      	ldr	r3, [pc, #288]	@ (8000af8 <SystemClock_Config+0x150>)
 80009d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009d8:	4a47      	ldr	r2, [pc, #284]	@ (8000af8 <SystemClock_Config+0x150>)
 80009da:	f023 0301 	bic.w	r3, r3, #1
 80009de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009e0:	4b45      	ldr	r3, [pc, #276]	@ (8000af8 <SystemClock_Config+0x150>)
 80009e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b44      	ldr	r3, [pc, #272]	@ (8000afc <SystemClock_Config+0x154>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	4a43      	ldr	r2, [pc, #268]	@ (8000afc <SystemClock_Config+0x154>)
 80009f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009f4:	6193      	str	r3, [r2, #24]
 80009f6:	4b41      	ldr	r3, [pc, #260]	@ (8000afc <SystemClock_Config+0x154>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a02:	bf00      	nop
 8000a04:	4b3d      	ldr	r3, [pc, #244]	@ (8000afc <SystemClock_Config+0x154>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a10:	d1f8      	bne.n	8000a04 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b3b      	ldr	r3, [pc, #236]	@ (8000b00 <SystemClock_Config+0x158>)
 8000a14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a18:	4a39      	ldr	r2, [pc, #228]	@ (8000b00 <SystemClock_Config+0x158>)
 8000a1a:	f043 0302 	orr.w	r3, r3, #2
 8000a1e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a22:	4b37      	ldr	r3, [pc, #220]	@ (8000b00 <SystemClock_Config+0x158>)
 8000a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a30:	2300      	movs	r3, #0
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	4b31      	ldr	r3, [pc, #196]	@ (8000afc <SystemClock_Config+0x154>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a30      	ldr	r2, [pc, #192]	@ (8000afc <SystemClock_Config+0x154>)
 8000a3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b2e      	ldr	r3, [pc, #184]	@ (8000afc <SystemClock_Config+0x154>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000af8 <SystemClock_Config+0x150>)
 8000a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8000af8 <SystemClock_Config+0x150>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a56:	4b28      	ldr	r3, [pc, #160]	@ (8000af8 <SystemClock_Config+0x150>)
 8000a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a62:	bf00      	nop
 8000a64:	4b25      	ldr	r3, [pc, #148]	@ (8000afc <SystemClock_Config+0x154>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a70:	d1f8      	bne.n	8000a64 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a72:	2301      	movs	r3, #1
 8000a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a7a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a80:	2302      	movs	r3, #2
 8000a82:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000a88:	2350      	movs	r3, #80	@ 0x50
 8000a8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a94:	2302      	movs	r3, #2
 8000a96:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a98:	230c      	movs	r3, #12
 8000a9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f005 fe2d 	bl	8006708 <HAL_RCC_OscConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000ab4:	f002 f886 	bl	8002bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab8:	233f      	movs	r3, #63	@ 0x3f
 8000aba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abc:	2303      	movs	r3, #3
 8000abe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ac8:	2340      	movs	r3, #64	@ 0x40
 8000aca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000acc:	2340      	movs	r3, #64	@ 0x40
 8000ace:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ad0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ad6:	2340      	movs	r3, #64	@ 0x40
 8000ad8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	2104      	movs	r1, #4
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f006 fa6b 	bl	8006fbc <HAL_RCC_ClockConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000aec:	f002 f86a 	bl	8002bc4 <Error_Handler>
  }
}
 8000af0:	bf00      	nop
 8000af2:	3778      	adds	r7, #120	@ 0x78
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	58000400 	.word	0x58000400
 8000afc:	58024800 	.word	0x58024800
 8000b00:	58024400 	.word	0x58024400

08000b04 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0aa      	sub	sp, #168	@ 0xa8
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_EventCfgTypeDef pEventCfg = {0};
 8000b0a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000b1a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000b28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b2c:	2254      	movs	r2, #84	@ 0x54
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f00d f842 	bl	800dbba <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8000b36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2220      	movs	r2, #32
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f00d f836 	bl	800dbba <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */


  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8000b4e:	4bc4      	ldr	r3, [pc, #784]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000b50:	4ac4      	ldr	r2, [pc, #784]	@ (8000e64 <MX_HRTIM_Init+0x360>)
 8000b52:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000b54:	4bc2      	ldr	r3, [pc, #776]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000b5a:	4bc1      	ldr	r3, [pc, #772]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8000b60:	48bf      	ldr	r0, [pc, #764]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000b62:	f004 f859 	bl	8004c18 <HAL_HRTIM_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_HRTIM_Init+0x6c>
  {
    Error_Handler();
 8000b6c:	f002 f82a 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_HRTIM_EventPrescalerConfig(&hhrtim, HRTIM_EVENTPRESCALER_DIV1) != HAL_OK)
 8000b70:	2100      	movs	r1, #0
 8000b72:	48bb      	ldr	r0, [pc, #748]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000b74:	f004 f977 	bl	8004e66 <HAL_HRTIM_EventPrescalerConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_HRTIM_Init+0x7e>
  {
    Error_Handler();
 8000b7e:	f002 f821 	bl	8002bc4 <Error_Handler>
  }
  pEventCfg.Source = HRTIM_EVENTSRC_3;
 8000b82:	2302      	movs	r3, #2
 8000b84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  pEventCfg.Polarity = HRTIM_EVENTPOLARITY_HIGH;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pEventCfg.Sensitivity = HRTIM_EVENTSENSITIVITY_RISINGEDGE;
 8000b8e:	2308      	movs	r3, #8
 8000b90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  pEventCfg.FastMode = HRTIM_EVENTFASTMODE_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_HRTIM_EventConfig(&hhrtim, HRTIM_EVENT_1, &pEventCfg) != HAL_OK)
 8000b9a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	48af      	ldr	r0, [pc, #700]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000ba4:	f004 f930 	bl	8004e08 <HAL_HRTIM_EventConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_HRTIM_Init+0xae>
  {
    Error_Handler();
 8000bae:	f002 f809 	bl	8002bc4 <Error_Handler>
  }
  pTimeBaseCfg.Period = 24000-1;
 8000bb2:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 8000bb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000bc0:	2305      	movs	r3, #5
 8000bc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000bc6:	2308      	movs	r3, #8
 8000bc8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000bcc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	48a2      	ldr	r0, [pc, #648]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000bd6:	f004 f8ef 	bl	8004db8 <HAL_HRTIM_TimeBaseConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_HRTIM_Init+0xe0>
  {
    Error_Handler();
 8000be0:	f001 fff0 	bl	8002bc4 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.DMASrcAddress = 0x0000;
 8000bec:	2300      	movs	r3, #0
 8000bee:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.DMADstAddress = 0x0000;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.DMASize = 0x1;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000c00:	2300      	movs	r3, #0
 8000c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8000c08:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c0c:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000c16:	2300      	movs	r3, #0
 8000c18:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8000c26:	2300      	movs	r3, #0
 8000c28:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_EEV_1;
 8000c32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c36:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 8000c38:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000c3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8000c40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c44:	461a      	mov	r2, r3
 8000c46:	2100      	movs	r1, #0
 8000c48:	4885      	ldr	r0, [pc, #532]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000c4a:	f004 f945 	bl	8004ed8 <HAL_HRTIM_WaveformTimerConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_HRTIM_Init+0x154>
  {
    Error_Handler();
 8000c54:	f001 ffb6 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8000c58:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	2101      	movs	r1, #1
 8000c60:	487f      	ldr	r0, [pc, #508]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000c62:	f004 f939 	bl	8004ed8 <HAL_HRTIM_WaveformTimerConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_HRTIM_Init+0x16c>
  {
    Error_Handler();
 8000c6c:	f001 ffaa 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8000c70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c74:	461a      	mov	r2, r3
 8000c76:	2102      	movs	r1, #2
 8000c78:	4879      	ldr	r0, [pc, #484]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000c7a:	f004 f92d 	bl	8004ed8 <HAL_HRTIM_WaveformTimerConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_HRTIM_Init+0x184>
  {
    Error_Handler();
 8000c84:	f001 ff9e 	bl	8002bc4 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 8000c8c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c90:	461a      	mov	r2, r3
 8000c92:	2103      	movs	r1, #3
 8000c94:	4872      	ldr	r0, [pc, #456]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000c96:	f004 f91f 	bl	8004ed8 <HAL_HRTIM_WaveformTimerConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_HRTIM_Init+0x1a0>
  {
    Error_Handler();
 8000ca0:	f001 ff90 	bl	8002bc4 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x00005A00/2;
 8000ca4:	f44f 5334 	mov.w	r3, #11520	@ 0x2d00
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000caa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	486b      	ldr	r0, [pc, #428]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000cb4:	f004 f982 	bl	8004fbc <HAL_HRTIM_WaveformCompareConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_HRTIM_Init+0x1be>
  {
    Error_Handler();
 8000cbe:	f001 ff81 	bl	8002bc4 <Error_Handler>
  }
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cce:	2202      	movs	r2, #2
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4863      	ldr	r0, [pc, #396]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000cd4:	f004 f972 	bl	8004fbc <HAL_HRTIM_WaveformCompareConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_HRTIM_Init+0x1de>
  {
    Error_Handler();
 8000cde:	f001 ff71 	bl	8002bc4 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000ce2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	2101      	movs	r1, #1
 8000cea:	485d      	ldr	r0, [pc, #372]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000cec:	f004 f966 	bl	8004fbc <HAL_HRTIM_WaveformCompareConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_HRTIM_Init+0x1f6>
  {
    Error_Handler();
 8000cf6:	f001 ff65 	bl	8002bc4 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfe:	2202      	movs	r2, #2
 8000d00:	2102      	movs	r1, #2
 8000d02:	4857      	ldr	r0, [pc, #348]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000d04:	f004 f95a 	bl	8004fbc <HAL_HRTIM_WaveformCompareConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_HRTIM_Init+0x20e>
  {
    Error_Handler();
 8000d0e:	f001 ff59 	bl	8002bc4 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d16:	2202      	movs	r2, #2
 8000d18:	2103      	movs	r1, #3
 8000d1a:	4851      	ldr	r0, [pc, #324]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000d1c:	f004 f94e 	bl	8004fbc <HAL_HRTIM_WaveformCompareConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_HRTIM_Init+0x226>
  {
    Error_Handler();
 8000d26:	f001 ff4d 	bl	8002bc4 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_EEV_1|HRTIM_OUTPUTSET_TIMPER;
 8000d2e:	4b4e      	ldr	r3, [pc, #312]	@ (8000e68 <MX_HRTIM_Init+0x364>)
 8000d30:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8000d32:	2308      	movs	r3, #8
 8000d34:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4843      	ldr	r0, [pc, #268]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000d52:	f004 faa1 	bl	8005298 <HAL_HRTIM_WaveformOutputConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_HRTIM_Init+0x25c>
  {
    Error_Handler();
 8000d5c:	f001 ff32 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2204      	movs	r2, #4
 8000d64:	2101      	movs	r1, #1
 8000d66:	483e      	ldr	r0, [pc, #248]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000d68:	f004 fa96 	bl	8005298 <HAL_HRTIM_WaveformOutputConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_HRTIM_Init+0x272>
  {
    Error_Handler();
 8000d72:	f001 ff27 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2210      	movs	r2, #16
 8000d7a:	2102      	movs	r1, #2
 8000d7c:	4838      	ldr	r0, [pc, #224]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000d7e:	f004 fa8b 	bl	8005298 <HAL_HRTIM_WaveformOutputConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_HRTIM_Init+0x288>
  {
    Error_Handler();
 8000d88:	f001 ff1c 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2240      	movs	r2, #64	@ 0x40
 8000d90:	2103      	movs	r1, #3
 8000d92:	4833      	ldr	r0, [pc, #204]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000d94:	f004 fa80 	bl	8005298 <HAL_HRTIM_WaveformOutputConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_HRTIM_Init+0x29e>
  {
    Error_Handler();
 8000d9e:	f001 ff11 	bl	8002bc4 <Error_Handler>
  }
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8000da2:	2310      	movs	r3, #16
 8000da4:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2202      	movs	r2, #2
 8000daa:	2100      	movs	r1, #0
 8000dac:	482c      	ldr	r0, [pc, #176]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000dae:	f004 fa73 	bl	8005298 <HAL_HRTIM_WaveformOutputConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_HRTIM_Init+0x2b8>
  {
    Error_Handler();
 8000db8:	f001 ff04 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2208      	movs	r2, #8
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	4827      	ldr	r0, [pc, #156]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000dc4:	f004 fa68 	bl	8005298 <HAL_HRTIM_WaveformOutputConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_HRTIM_Init+0x2ce>
  {
    Error_Handler();
 8000dce:	f001 fef9 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2220      	movs	r2, #32
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	4821      	ldr	r0, [pc, #132]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000dda:	f004 fa5d 	bl	8005298 <HAL_HRTIM_WaveformOutputConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_HRTIM_Init+0x2e4>
  {
    Error_Handler();
 8000de4:	f001 feee 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2280      	movs	r2, #128	@ 0x80
 8000dec:	2103      	movs	r1, #3
 8000dee:	481c      	ldr	r0, [pc, #112]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000df0:	f004 fa52 	bl	8005298 <HAL_HRTIM_WaveformOutputConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_HRTIM_Init+0x2fa>
  {
    Error_Handler();
 8000dfa:	f001 fee3 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8000dfe:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e02:	461a      	mov	r2, r3
 8000e04:	2101      	movs	r1, #1
 8000e06:	4816      	ldr	r0, [pc, #88]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000e08:	f003 ffd6 	bl	8004db8 <HAL_HRTIM_TimeBaseConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_HRTIM_Init+0x312>
  {
    Error_Handler();
 8000e12:	f001 fed7 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000e16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	4810      	ldr	r0, [pc, #64]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000e20:	f004 f8cc 	bl	8004fbc <HAL_HRTIM_WaveformCompareConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_HRTIM_Init+0x32a>
  {
    Error_Handler();
 8000e2a:	f001 fecb 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8000e2e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e32:	461a      	mov	r2, r3
 8000e34:	2102      	movs	r1, #2
 8000e36:	480a      	ldr	r0, [pc, #40]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000e38:	f003 ffbe 	bl	8004db8 <HAL_HRTIM_TimeBaseConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_HRTIM_Init+0x342>
  {
    Error_Handler();
 8000e42:	f001 febf 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000e46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	4804      	ldr	r0, [pc, #16]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000e50:	f004 f8b4 	bl	8004fbc <HAL_HRTIM_WaveformCompareConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d008      	beq.n	8000e6c <MX_HRTIM_Init+0x368>
  {
    Error_Handler();
 8000e5a:	f001 feb3 	bl	8002bc4 <Error_Handler>
 8000e5e:	e005      	b.n	8000e6c <MX_HRTIM_Init+0x368>
 8000e60:	24000204 	.word	0x24000204
 8000e64:	40017400 	.word	0x40017400
 8000e68:	00200004 	.word	0x00200004
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000e6c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e70:	461a      	mov	r2, r3
 8000e72:	2103      	movs	r1, #3
 8000e74:	480d      	ldr	r0, [pc, #52]	@ (8000eac <MX_HRTIM_Init+0x3a8>)
 8000e76:	f003 ff9f 	bl	8004db8 <HAL_HRTIM_TimeBaseConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_HRTIM_Init+0x380>
  {
    Error_Handler();
 8000e80:	f001 fea0 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000e84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2103      	movs	r1, #3
 8000e8c:	4807      	ldr	r0, [pc, #28]	@ (8000eac <MX_HRTIM_Init+0x3a8>)
 8000e8e:	f004 f895 	bl	8004fbc <HAL_HRTIM_WaveformCompareConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_HRTIM_Init+0x398>
  {
    Error_Handler();
 8000e98:	f001 fe94 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8000e9c:	4803      	ldr	r0, [pc, #12]	@ (8000eac <MX_HRTIM_Init+0x3a8>)
 8000e9e:	f001 feeb 	bl	8002c78 <HAL_HRTIM_MspPostInit>

}
 8000ea2:	bf00      	nop
 8000ea4:	37a8      	adds	r7, #168	@ 0xa8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	24000204 	.word	0x24000204

08000eb0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000eb4:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000eb6:	4a14      	ldr	r2, [pc, #80]	@ (8000f08 <MX_LPTIM1_Init+0x58>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000eba:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000ec0:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ec8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ecc:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_LOW;
 8000ece:	4b0d      	ldr	r3, [pc, #52]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ed0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000ed4:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000edc:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000eee:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ef0:	f004 ff7a 	bl	8005de8 <HAL_LPTIM_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8000efa:	f001 fe63 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	240002e0 	.word	0x240002e0
 8000f08:	40002400 	.word	0x40002400

08000f0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b09a      	sub	sp, #104	@ 0x68
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f12:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f20:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
 8000f3c:	615a      	str	r2, [r3, #20]
 8000f3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	222c      	movs	r2, #44	@ 0x2c
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f00c fe37 	bl	800dbba <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f4c:	4b55      	ldr	r3, [pc, #340]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f4e:	4a56      	ldr	r2, [pc, #344]	@ (80010a8 <MX_TIM1_Init+0x19c>)
 8000f50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f52:	4b54      	ldr	r3, [pc, #336]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f58:	4b52      	ldr	r3, [pc, #328]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000-1;
 8000f5e:	4b51      	ldr	r3, [pc, #324]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f60:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000f64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f66:	4b4f      	ldr	r3, [pc, #316]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f6c:	4b4d      	ldr	r3, [pc, #308]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f72:	4b4c      	ldr	r3, [pc, #304]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f74:	2280      	movs	r2, #128	@ 0x80
 8000f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f78:	484a      	ldr	r0, [pc, #296]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f7a:	f008 f9d7 	bl	800932c <HAL_TIM_Base_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f84:	f001 fe1e 	bl	8002bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f8e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f92:	4619      	mov	r1, r3
 8000f94:	4843      	ldr	r0, [pc, #268]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f96:	f008 fe25 	bl	8009be4 <HAL_TIM_ConfigClockSource>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000fa0:	f001 fe10 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fa4:	483f      	ldr	r0, [pc, #252]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000fa6:	f008 fa91 	bl	80094cc <HAL_TIM_PWM_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000fb0:	f001 fe08 	bl	8002bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fb4:	2320      	movs	r3, #32
 8000fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fc0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4837      	ldr	r0, [pc, #220]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000fc8:	f009 fb6c 	bl	800a6a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000fd2:	f001 fdf7 	bl	8002bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd6:	2360      	movs	r3, #96	@ 0x60
 8000fd8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fea:	2300      	movs	r3, #0
 8000fec:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	482a      	ldr	r0, [pc, #168]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000ffc:	f008 fcde 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001006:	f001 fddd 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800100a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800100e:	2204      	movs	r2, #4
 8001010:	4619      	mov	r1, r3
 8001012:	4824      	ldr	r0, [pc, #144]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8001014:	f008 fcd2 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800101e:	f001 fdd1 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001022:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001026:	2208      	movs	r2, #8
 8001028:	4619      	mov	r1, r3
 800102a:	481e      	ldr	r0, [pc, #120]	@ (80010a4 <MX_TIM1_Init+0x198>)
 800102c:	f008 fcc6 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001036:	f001 fdc5 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800103a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800103e:	220c      	movs	r2, #12
 8001040:	4619      	mov	r1, r3
 8001042:	4818      	ldr	r0, [pc, #96]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8001044:	f008 fcba 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800104e:	f001 fdb9 	bl	8002bc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001066:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800106a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001074:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4619      	mov	r1, r3
 8001086:	4807      	ldr	r0, [pc, #28]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8001088:	f009 fb9a 	bl	800a7c0 <HAL_TIMEx_ConfigBreakDeadTime>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8001092:	f001 fd97 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001096:	4803      	ldr	r0, [pc, #12]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8001098:	f002 f80c 	bl	80030b4 <HAL_TIM_MspPostInit>

}
 800109c:	bf00      	nop
 800109e:	3768      	adds	r7, #104	@ 0x68
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	24000318 	.word	0x24000318
 80010a8:	40010000 	.word	0x40010000

080010ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08e      	sub	sp, #56	@ 0x38
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010cc:	463b      	mov	r3, r7
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]
 80010da:	615a      	str	r2, [r3, #20]
 80010dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010de:	4b2d      	ldr	r3, [pc, #180]	@ (8001194 <MX_TIM2_Init+0xe8>)
 80010e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001194 <MX_TIM2_Init+0xe8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ec:	4b29      	ldr	r3, [pc, #164]	@ (8001194 <MX_TIM2_Init+0xe8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000-1;
 80010f2:	4b28      	ldr	r3, [pc, #160]	@ (8001194 <MX_TIM2_Init+0xe8>)
 80010f4:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80010f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fa:	4b26      	ldr	r3, [pc, #152]	@ (8001194 <MX_TIM2_Init+0xe8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001100:	4b24      	ldr	r3, [pc, #144]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001102:	2280      	movs	r2, #128	@ 0x80
 8001104:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001106:	4823      	ldr	r0, [pc, #140]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001108:	f008 f910 	bl	800932c <HAL_TIM_Base_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001112:	f001 fd57 	bl	8002bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001116:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800111a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800111c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001120:	4619      	mov	r1, r3
 8001122:	481c      	ldr	r0, [pc, #112]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001124:	f008 fd5e 	bl	8009be4 <HAL_TIM_ConfigClockSource>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800112e:	f001 fd49 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001132:	4818      	ldr	r0, [pc, #96]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001134:	f008 f9ca 	bl	80094cc <HAL_TIM_PWM_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800113e:	f001 fd41 	bl	8002bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	4619      	mov	r1, r3
 8001150:	4810      	ldr	r0, [pc, #64]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001152:	f009 faa7 	bl	800a6a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800115c:	f001 fd32 	bl	8002bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001160:	2360      	movs	r3, #96	@ 0x60
 8001162:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001170:	463b      	mov	r3, r7
 8001172:	2200      	movs	r2, #0
 8001174:	4619      	mov	r1, r3
 8001176:	4807      	ldr	r0, [pc, #28]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001178:	f008 fc20 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001182:	f001 fd1f 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001186:	4803      	ldr	r0, [pc, #12]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001188:	f001 ff94 	bl	80030b4 <HAL_TIM_MspPostInit>

}
 800118c:	bf00      	nop
 800118e:	3738      	adds	r7, #56	@ 0x38
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	24000364 	.word	0x24000364

08001198 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08e      	sub	sp, #56	@ 0x38
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]
 80011c6:	615a      	str	r2, [r3, #20]
 80011c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011ca:	4b3d      	ldr	r3, [pc, #244]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011cc:	4a3d      	ldr	r2, [pc, #244]	@ (80012c4 <MX_TIM4_Init+0x12c>)
 80011ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011d0:	4b3b      	ldr	r3, [pc, #236]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d6:	4b3a      	ldr	r3, [pc, #232]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 24000-1;
 80011dc:	4b38      	ldr	r3, [pc, #224]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011de:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80011e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e4:	4b36      	ldr	r3, [pc, #216]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ea:	4b35      	ldr	r3, [pc, #212]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011ec:	2280      	movs	r2, #128	@ 0x80
 80011ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011f0:	4833      	ldr	r0, [pc, #204]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011f2:	f008 f89b 	bl	800932c <HAL_TIM_Base_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80011fc:	f001 fce2 	bl	8002bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001200:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001204:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001206:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800120a:	4619      	mov	r1, r3
 800120c:	482c      	ldr	r0, [pc, #176]	@ (80012c0 <MX_TIM4_Init+0x128>)
 800120e:	f008 fce9 	bl	8009be4 <HAL_TIM_ConfigClockSource>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001218:	f001 fcd4 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800121c:	4828      	ldr	r0, [pc, #160]	@ (80012c0 <MX_TIM4_Init+0x128>)
 800121e:	f008 f955 	bl	80094cc <HAL_TIM_PWM_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001228:	f001 fccc 	bl	8002bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	4619      	mov	r1, r3
 800123a:	4821      	ldr	r0, [pc, #132]	@ (80012c0 <MX_TIM4_Init+0x128>)
 800123c:	f009 fa32 	bl	800a6a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001246:	f001 fcbd 	bl	8002bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124a:	2360      	movs	r3, #96	@ 0x60
 800124c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	2200      	movs	r2, #0
 800125e:	4619      	mov	r1, r3
 8001260:	4817      	ldr	r0, [pc, #92]	@ (80012c0 <MX_TIM4_Init+0x128>)
 8001262:	f008 fbab 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800126c:	f001 fcaa 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	2204      	movs	r2, #4
 8001274:	4619      	mov	r1, r3
 8001276:	4812      	ldr	r0, [pc, #72]	@ (80012c0 <MX_TIM4_Init+0x128>)
 8001278:	f008 fba0 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001282:	f001 fc9f 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001286:	463b      	mov	r3, r7
 8001288:	2208      	movs	r2, #8
 800128a:	4619      	mov	r1, r3
 800128c:	480c      	ldr	r0, [pc, #48]	@ (80012c0 <MX_TIM4_Init+0x128>)
 800128e:	f008 fb95 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001298:	f001 fc94 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	220c      	movs	r2, #12
 80012a0:	4619      	mov	r1, r3
 80012a2:	4807      	ldr	r0, [pc, #28]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80012a4:	f008 fb8a 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 80012ae:	f001 fc89 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80012b2:	4803      	ldr	r0, [pc, #12]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80012b4:	f001 fefe 	bl	80030b4 <HAL_TIM_MspPostInit>

}
 80012b8:	bf00      	nop
 80012ba:	3738      	adds	r7, #56	@ 0x38
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	240003b0 	.word	0x240003b0
 80012c4:	40000800 	.word	0x40000800

080012c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08e      	sub	sp, #56	@ 0x38
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e8:	463b      	mov	r3, r7
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
 80012f6:	615a      	str	r2, [r3, #20]
 80012f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012fa:	4b32      	ldr	r3, [pc, #200]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 80012fc:	4a32      	ldr	r2, [pc, #200]	@ (80013c8 <MX_TIM5_Init+0x100>)
 80012fe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001300:	4b30      	ldr	r3, [pc, #192]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001302:	2200      	movs	r2, #0
 8001304:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001306:	4b2f      	ldr	r3, [pc, #188]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 24000-1;
 800130c:	4b2d      	ldr	r3, [pc, #180]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800130e:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001312:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001314:	4b2b      	ldr	r3, [pc, #172]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800131a:	4b2a      	ldr	r3, [pc, #168]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800131c:	2280      	movs	r2, #128	@ 0x80
 800131e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001320:	4828      	ldr	r0, [pc, #160]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001322:	f008 f803 	bl	800932c <HAL_TIM_Base_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800132c:	f001 fc4a 	bl	8002bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001330:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001334:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001336:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800133a:	4619      	mov	r1, r3
 800133c:	4821      	ldr	r0, [pc, #132]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800133e:	f008 fc51 	bl	8009be4 <HAL_TIM_ConfigClockSource>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001348:	f001 fc3c 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800134c:	481d      	ldr	r0, [pc, #116]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800134e:	f008 f8bd 	bl	80094cc <HAL_TIM_PWM_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001358:	f001 fc34 	bl	8002bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	4816      	ldr	r0, [pc, #88]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800136c:	f009 f99a 	bl	800a6a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001376:	f001 fc25 	bl	8002bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137a:	2360      	movs	r3, #96	@ 0x60
 800137c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800138a:	463b      	mov	r3, r7
 800138c:	2204      	movs	r2, #4
 800138e:	4619      	mov	r1, r3
 8001390:	480c      	ldr	r0, [pc, #48]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001392:	f008 fb13 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800139c:	f001 fc12 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013a0:	463b      	mov	r3, r7
 80013a2:	2208      	movs	r2, #8
 80013a4:	4619      	mov	r1, r3
 80013a6:	4807      	ldr	r0, [pc, #28]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 80013a8:	f008 fb08 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 80013b2:	f001 fc07 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80013b6:	4803      	ldr	r0, [pc, #12]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 80013b8:	f001 fe7c 	bl	80030b4 <HAL_TIM_MspPostInit>

}
 80013bc:	bf00      	nop
 80013be:	3738      	adds	r7, #56	@ 0x38
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	240003fc 	.word	0x240003fc
 80013c8:	40000c00 	.word	0x40000c00

080013cc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b09a      	sub	sp, #104	@ 0x68
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	615a      	str	r2, [r3, #20]
 80013fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	222c      	movs	r2, #44	@ 0x2c
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f00c fbd7 	bl	800dbba <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800140c:	4b42      	ldr	r3, [pc, #264]	@ (8001518 <MX_TIM8_Init+0x14c>)
 800140e:	4a43      	ldr	r2, [pc, #268]	@ (800151c <MX_TIM8_Init+0x150>)
 8001410:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001412:	4b41      	ldr	r3, [pc, #260]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001414:	2200      	movs	r2, #0
 8001416:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001418:	4b3f      	ldr	r3, [pc, #252]	@ (8001518 <MX_TIM8_Init+0x14c>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 24000-1;
 800141e:	4b3e      	ldr	r3, [pc, #248]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001420:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001424:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001426:	4b3c      	ldr	r3, [pc, #240]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800142c:	4b3a      	ldr	r3, [pc, #232]	@ (8001518 <MX_TIM8_Init+0x14c>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001432:	4b39      	ldr	r3, [pc, #228]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001438:	4837      	ldr	r0, [pc, #220]	@ (8001518 <MX_TIM8_Init+0x14c>)
 800143a:	f007 ff77 	bl	800932c <HAL_TIM_Base_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001444:	f001 fbbe 	bl	8002bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001448:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800144c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800144e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001452:	4619      	mov	r1, r3
 8001454:	4830      	ldr	r0, [pc, #192]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001456:	f008 fbc5 	bl	8009be4 <HAL_TIM_ConfigClockSource>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001460:	f001 fbb0 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001464:	482c      	ldr	r0, [pc, #176]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001466:	f008 f831 	bl	80094cc <HAL_TIM_PWM_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001470:	f001 fba8 	bl	8002bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001474:	2300      	movs	r3, #0
 8001476:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001480:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001484:	4619      	mov	r1, r3
 8001486:	4824      	ldr	r0, [pc, #144]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001488:	f009 f90c 	bl	800a6a4 <HAL_TIMEx_MasterConfigSynchronization>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001492:	f001 fb97 	bl	8002bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001496:	2360      	movs	r3, #96	@ 0x60
 8001498:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149e:	2300      	movs	r3, #0
 80014a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014b2:	220c      	movs	r2, #12
 80014b4:	4619      	mov	r1, r3
 80014b6:	4818      	ldr	r0, [pc, #96]	@ (8001518 <MX_TIM8_Init+0x14c>)
 80014b8:	f008 fa80 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80014c2:	f001 fb7f 	bl	8002bc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	4619      	mov	r1, r3
 80014fa:	4807      	ldr	r0, [pc, #28]	@ (8001518 <MX_TIM8_Init+0x14c>)
 80014fc:	f009 f960 	bl	800a7c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001506:	f001 fb5d 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800150a:	4803      	ldr	r0, [pc, #12]	@ (8001518 <MX_TIM8_Init+0x14c>)
 800150c:	f001 fdd2 	bl	80030b4 <HAL_TIM_MspPostInit>

}
 8001510:	bf00      	nop
 8001512:	3768      	adds	r7, #104	@ 0x68
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	24000448 	.word	0x24000448
 800151c:	40010400 	.word	0x40010400

08001520 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08e      	sub	sp, #56	@ 0x38
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001526:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001540:	463b      	mov	r3, r7
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
 800154c:	611a      	str	r2, [r3, #16]
 800154e:	615a      	str	r2, [r3, #20]
 8001550:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001552:	4b2d      	ldr	r3, [pc, #180]	@ (8001608 <MX_TIM12_Init+0xe8>)
 8001554:	4a2d      	ldr	r2, [pc, #180]	@ (800160c <MX_TIM12_Init+0xec>)
 8001556:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001558:	4b2b      	ldr	r3, [pc, #172]	@ (8001608 <MX_TIM12_Init+0xe8>)
 800155a:	2200      	movs	r2, #0
 800155c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155e:	4b2a      	ldr	r3, [pc, #168]	@ (8001608 <MX_TIM12_Init+0xe8>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 24000-1;
 8001564:	4b28      	ldr	r3, [pc, #160]	@ (8001608 <MX_TIM12_Init+0xe8>)
 8001566:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800156a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156c:	4b26      	ldr	r3, [pc, #152]	@ (8001608 <MX_TIM12_Init+0xe8>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001572:	4b25      	ldr	r3, [pc, #148]	@ (8001608 <MX_TIM12_Init+0xe8>)
 8001574:	2280      	movs	r2, #128	@ 0x80
 8001576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001578:	4823      	ldr	r0, [pc, #140]	@ (8001608 <MX_TIM12_Init+0xe8>)
 800157a:	f007 fed7 	bl	800932c <HAL_TIM_Base_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM12_Init+0x68>
  {
    Error_Handler();
 8001584:	f001 fb1e 	bl	8002bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001588:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800158c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800158e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001592:	4619      	mov	r1, r3
 8001594:	481c      	ldr	r0, [pc, #112]	@ (8001608 <MX_TIM12_Init+0xe8>)
 8001596:	f008 fb25 	bl	8009be4 <HAL_TIM_ConfigClockSource>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM12_Init+0x84>
  {
    Error_Handler();
 80015a0:	f001 fb10 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80015a4:	4818      	ldr	r0, [pc, #96]	@ (8001608 <MX_TIM12_Init+0xe8>)
 80015a6:	f007 ff91 	bl	80094cc <HAL_TIM_PWM_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM12_Init+0x94>
  {
    Error_Handler();
 80015b0:	f001 fb08 	bl	8002bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	4619      	mov	r1, r3
 80015c2:	4811      	ldr	r0, [pc, #68]	@ (8001608 <MX_TIM12_Init+0xe8>)
 80015c4:	f009 f86e 	bl	800a6a4 <HAL_TIMEx_MasterConfigSynchronization>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 80015ce:	f001 faf9 	bl	8002bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d2:	2360      	movs	r3, #96	@ 0x60
 80015d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015e2:	463b      	mov	r3, r7
 80015e4:	2204      	movs	r2, #4
 80015e6:	4619      	mov	r1, r3
 80015e8:	4807      	ldr	r0, [pc, #28]	@ (8001608 <MX_TIM12_Init+0xe8>)
 80015ea:	f008 f9e7 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM12_Init+0xd8>
  {
    Error_Handler();
 80015f4:	f001 fae6 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80015f8:	4803      	ldr	r0, [pc, #12]	@ (8001608 <MX_TIM12_Init+0xe8>)
 80015fa:	f001 fd5b 	bl	80030b4 <HAL_TIM_MspPostInit>

}
 80015fe:	bf00      	nop
 8001600:	3738      	adds	r7, #56	@ 0x38
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	24000494 	.word	0x24000494
 800160c:	40001800 	.word	0x40001800

08001610 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	615a      	str	r2, [r3, #20]
 8001626:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001628:	4b1e      	ldr	r3, [pc, #120]	@ (80016a4 <MX_TIM13_Init+0x94>)
 800162a:	4a1f      	ldr	r2, [pc, #124]	@ (80016a8 <MX_TIM13_Init+0x98>)
 800162c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800162e:	4b1d      	ldr	r3, [pc, #116]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001630:	2200      	movs	r2, #0
 8001632:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 24000-1;
 800163a:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <MX_TIM13_Init+0x94>)
 800163c:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001640:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001642:	4b18      	ldr	r3, [pc, #96]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001648:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <MX_TIM13_Init+0x94>)
 800164a:	2280      	movs	r2, #128	@ 0x80
 800164c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800164e:	4815      	ldr	r0, [pc, #84]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001650:	f007 fe6c 	bl	800932c <HAL_TIM_Base_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800165a:	f001 fab3 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800165e:	4811      	ldr	r0, [pc, #68]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001660:	f007 ff34 	bl	80094cc <HAL_TIM_PWM_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800166a:	f001 faab 	bl	8002bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166e:	2360      	movs	r3, #96	@ 0x60
 8001670:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	4619      	mov	r1, r3
 8001684:	4807      	ldr	r0, [pc, #28]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001686:	f008 f999 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001690:	f001 fa98 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001694:	4803      	ldr	r0, [pc, #12]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001696:	f001 fd0d 	bl	80030b4 <HAL_TIM_MspPostInit>

}
 800169a:	bf00      	nop
 800169c:	3720      	adds	r7, #32
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	240004e0 	.word	0x240004e0
 80016a8:	40001c00 	.word	0x40001c00

080016ac <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
 80016c0:	615a      	str	r2, [r3, #20]
 80016c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80016c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001744 <MX_TIM14_Init+0x98>)
 80016c8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80016ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 24000-1;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016d8:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80016dc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016de:	4b18      	ldr	r3, [pc, #96]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016e4:	4b16      	ldr	r3, [pc, #88]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016e6:	2280      	movs	r2, #128	@ 0x80
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80016ea:	4815      	ldr	r0, [pc, #84]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016ec:	f007 fe1e 	bl	800932c <HAL_TIM_Base_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80016f6:	f001 fa65 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80016fa:	4811      	ldr	r0, [pc, #68]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016fc:	f007 fee6 	bl	80094cc <HAL_TIM_PWM_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001706:	f001 fa5d 	bl	8002bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800170a:	2360      	movs	r3, #96	@ 0x60
 800170c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2200      	movs	r2, #0
 800171e:	4619      	mov	r1, r3
 8001720:	4807      	ldr	r0, [pc, #28]	@ (8001740 <MX_TIM14_Init+0x94>)
 8001722:	f008 f94b 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800172c:	f001 fa4a 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001730:	4803      	ldr	r0, [pc, #12]	@ (8001740 <MX_TIM14_Init+0x94>)
 8001732:	f001 fcbf 	bl	80030b4 <HAL_TIM_MspPostInit>

}
 8001736:	bf00      	nop
 8001738:	3720      	adds	r7, #32
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2400052c 	.word	0x2400052c
 8001744:	40002000 	.word	0x40002000

08001748 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b09a      	sub	sp, #104	@ 0x68
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001768:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
 8001778:	615a      	str	r2, [r3, #20]
 800177a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	222c      	movs	r2, #44	@ 0x2c
 8001780:	2100      	movs	r1, #0
 8001782:	4618      	mov	r0, r3
 8001784:	f00c fa19 	bl	800dbba <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001788:	4b45      	ldr	r3, [pc, #276]	@ (80018a0 <MX_TIM15_Init+0x158>)
 800178a:	4a46      	ldr	r2, [pc, #280]	@ (80018a4 <MX_TIM15_Init+0x15c>)
 800178c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800178e:	4b44      	ldr	r3, [pc, #272]	@ (80018a0 <MX_TIM15_Init+0x158>)
 8001790:	2200      	movs	r2, #0
 8001792:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001794:	4b42      	ldr	r3, [pc, #264]	@ (80018a0 <MX_TIM15_Init+0x158>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 24000-1;
 800179a:	4b41      	ldr	r3, [pc, #260]	@ (80018a0 <MX_TIM15_Init+0x158>)
 800179c:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80017a0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a2:	4b3f      	ldr	r3, [pc, #252]	@ (80018a0 <MX_TIM15_Init+0x158>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80017a8:	4b3d      	ldr	r3, [pc, #244]	@ (80018a0 <MX_TIM15_Init+0x158>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ae:	4b3c      	ldr	r3, [pc, #240]	@ (80018a0 <MX_TIM15_Init+0x158>)
 80017b0:	2280      	movs	r2, #128	@ 0x80
 80017b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80017b4:	483a      	ldr	r0, [pc, #232]	@ (80018a0 <MX_TIM15_Init+0x158>)
 80017b6:	f007 fdb9 	bl	800932c <HAL_TIM_Base_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80017c0:	f001 fa00 	bl	8002bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80017ca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80017ce:	4619      	mov	r1, r3
 80017d0:	4833      	ldr	r0, [pc, #204]	@ (80018a0 <MX_TIM15_Init+0x158>)
 80017d2:	f008 fa07 	bl	8009be4 <HAL_TIM_ConfigClockSource>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80017dc:	f001 f9f2 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80017e0:	482f      	ldr	r0, [pc, #188]	@ (80018a0 <MX_TIM15_Init+0x158>)
 80017e2:	f007 fe73 	bl	80094cc <HAL_TIM_PWM_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80017ec:	f001 f9ea 	bl	8002bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f0:	2300      	movs	r3, #0
 80017f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80017f8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80017fc:	4619      	mov	r1, r3
 80017fe:	4828      	ldr	r0, [pc, #160]	@ (80018a0 <MX_TIM15_Init+0x158>)
 8001800:	f008 ff50 	bl	800a6a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800180a:	f001 f9db 	bl	8002bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800180e:	2360      	movs	r3, #96	@ 0x60
 8001810:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001816:	2300      	movs	r3, #0
 8001818:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800181a:	2300      	movs	r3, #0
 800181c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001826:	2300      	movs	r3, #0
 8001828:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800182a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800182e:	2200      	movs	r2, #0
 8001830:	4619      	mov	r1, r3
 8001832:	481b      	ldr	r0, [pc, #108]	@ (80018a0 <MX_TIM15_Init+0x158>)
 8001834:	f008 f8c2 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 800183e:	f001 f9c1 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001842:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001846:	2204      	movs	r2, #4
 8001848:	4619      	mov	r1, r3
 800184a:	4815      	ldr	r0, [pc, #84]	@ (80018a0 <MX_TIM15_Init+0x158>)
 800184c:	f008 f8b6 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM15_Init+0x112>
  {
    Error_Handler();
 8001856:	f001 f9b5 	bl	8002bc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800186e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001872:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	4619      	mov	r1, r3
 8001880:	4807      	ldr	r0, [pc, #28]	@ (80018a0 <MX_TIM15_Init+0x158>)
 8001882:	f008 ff9d 	bl	800a7c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM15_Init+0x148>
  {
    Error_Handler();
 800188c:	f001 f99a 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001890:	4803      	ldr	r0, [pc, #12]	@ (80018a0 <MX_TIM15_Init+0x158>)
 8001892:	f001 fc0f 	bl	80030b4 <HAL_TIM_MspPostInit>

}
 8001896:	bf00      	nop
 8001898:	3768      	adds	r7, #104	@ 0x68
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	24000578 	.word	0x24000578
 80018a4:	40014000 	.word	0x40014000

080018a8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b092      	sub	sp, #72	@ 0x48
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	611a      	str	r2, [r3, #16]
 80018be:	615a      	str	r2, [r3, #20]
 80018c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018c2:	463b      	mov	r3, r7
 80018c4:	222c      	movs	r2, #44	@ 0x2c
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f00c f976 	bl	800dbba <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80018ce:	4b31      	ldr	r3, [pc, #196]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018d0:	4a31      	ldr	r2, [pc, #196]	@ (8001998 <MX_TIM16_Init+0xf0>)
 80018d2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80018d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018da:	4b2e      	ldr	r3, [pc, #184]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 24000-1;
 80018e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018e2:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80018e6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018ee:	4b29      	ldr	r3, [pc, #164]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018f4:	4b27      	ldr	r3, [pc, #156]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018f6:	2280      	movs	r2, #128	@ 0x80
 80018f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018fa:	4826      	ldr	r0, [pc, #152]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018fc:	f007 fd16 	bl	800932c <HAL_TIM_Base_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001906:	f001 f95d 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800190a:	4822      	ldr	r0, [pc, #136]	@ (8001994 <MX_TIM16_Init+0xec>)
 800190c:	f007 fdde 	bl	80094cc <HAL_TIM_PWM_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001916:	f001 f955 	bl	8002bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800191a:	2360      	movs	r3, #96	@ 0x60
 800191c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001922:	2300      	movs	r3, #0
 8001924:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001926:	2300      	movs	r3, #0
 8001928:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800192e:	2300      	movs	r3, #0
 8001930:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001936:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800193a:	2200      	movs	r2, #0
 800193c:	4619      	mov	r1, r3
 800193e:	4815      	ldr	r0, [pc, #84]	@ (8001994 <MX_TIM16_Init+0xec>)
 8001940:	f008 f83c 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800194a:	f001 f93b 	bl	8002bc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001962:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001966:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001970:	463b      	mov	r3, r7
 8001972:	4619      	mov	r1, r3
 8001974:	4807      	ldr	r0, [pc, #28]	@ (8001994 <MX_TIM16_Init+0xec>)
 8001976:	f008 ff23 	bl	800a7c0 <HAL_TIMEx_ConfigBreakDeadTime>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001980:	f001 f920 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001984:	4803      	ldr	r0, [pc, #12]	@ (8001994 <MX_TIM16_Init+0xec>)
 8001986:	f001 fb95 	bl	80030b4 <HAL_TIM_MspPostInit>

}
 800198a:	bf00      	nop
 800198c:	3748      	adds	r7, #72	@ 0x48
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	240005c4 	.word	0x240005c4
 8001998:	40014400 	.word	0x40014400

0800199c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019a0:	4b25      	ldr	r3, [pc, #148]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019a2:	4a26      	ldr	r2, [pc, #152]	@ (8001a3c <MX_UART4_Init+0xa0>)
 80019a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80019a6:	4b24      	ldr	r3, [pc, #144]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019ae:	4b22      	ldr	r3, [pc, #136]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019b4:	4b20      	ldr	r3, [pc, #128]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019c2:	220c      	movs	r2, #12
 80019c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019d2:	4b19      	ldr	r3, [pc, #100]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019d8:	4b17      	ldr	r3, [pc, #92]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019de:	4b16      	ldr	r3, [pc, #88]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019e4:	4814      	ldr	r0, [pc, #80]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019e6:	f008 ff87 	bl	800a8f8 <HAL_UART_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80019f0:	f001 f8e8 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019f4:	2100      	movs	r1, #0
 80019f6:	4810      	ldr	r0, [pc, #64]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019f8:	f00b fad7 	bl	800cfaa <HAL_UARTEx_SetTxFifoThreshold>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001a02:	f001 f8df 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a06:	2100      	movs	r1, #0
 8001a08:	480b      	ldr	r0, [pc, #44]	@ (8001a38 <MX_UART4_Init+0x9c>)
 8001a0a:	f00b fb0c 	bl	800d026 <HAL_UARTEx_SetRxFifoThreshold>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001a14:	f001 f8d6 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001a18:	4807      	ldr	r0, [pc, #28]	@ (8001a38 <MX_UART4_Init+0x9c>)
 8001a1a:	f00b fa8d 	bl	800cf38 <HAL_UARTEx_DisableFifoMode>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001a24:	f001 f8ce 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */
  UART4->CR1 |= (USART_CR1_TE|USART_CR1_RXNEIE|USART_CR1_RE|USART_CR1_UE);
 8001a28:	4b04      	ldr	r3, [pc, #16]	@ (8001a3c <MX_UART4_Init+0xa0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a03      	ldr	r2, [pc, #12]	@ (8001a3c <MX_UART4_Init+0xa0>)
 8001a2e:	f043 032d 	orr.w	r3, r3, #45	@ 0x2d
 8001a32:	6013      	str	r3, [r2, #0]
  /* USER CODE END UART4_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	24000610 	.word	0x24000610
 8001a3c:	40004c00 	.word	0x40004c00

08001a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	@ 0x30
 8001a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a46:	f107 031c 	add.w	r3, r7, #28
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
 8001a54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a56:	4b59      	ldr	r3, [pc, #356]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a5c:	4a57      	ldr	r2, [pc, #348]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a5e:	f043 0310 	orr.w	r3, r3, #16
 8001a62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a66:	4b55      	ldr	r3, [pc, #340]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a74:	4b51      	ldr	r3, [pc, #324]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a7a:	4a50      	ldr	r2, [pc, #320]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a7c:	f043 0304 	orr.w	r3, r3, #4
 8001a80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a84:	4b4d      	ldr	r3, [pc, #308]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a92:	4b4a      	ldr	r3, [pc, #296]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a98:	4a48      	ldr	r2, [pc, #288]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aa2:	4b46      	ldr	r3, [pc, #280]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab0:	4b42      	ldr	r3, [pc, #264]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab6:	4a41      	ldr	r2, [pc, #260]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ac0:	4b3e      	ldr	r3, [pc, #248]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	4b3b      	ldr	r3, [pc, #236]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ad4:	4a39      	ldr	r2, [pc, #228]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001ad6:	f043 0302 	orr.w	r3, r3, #2
 8001ada:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ade:	4b37      	ldr	r3, [pc, #220]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aec:	4b33      	ldr	r3, [pc, #204]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001af2:	4a32      	ldr	r2, [pc, #200]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001af4:	f043 0308 	orr.w	r3, r3, #8
 8001af8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001afc:	4b2f      	ldr	r3, [pc, #188]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f249 519f 	movw	r1, #38303	@ 0x959f
 8001b10:	482b      	ldr	r0, [pc, #172]	@ (8001bc0 <MX_GPIO_Init+0x180>)
 8001b12:	f003 f867 	bl	8004be4 <HAL_GPIO_WritePin>
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001b1c:	4829      	ldr	r0, [pc, #164]	@ (8001bc4 <MX_GPIO_Init+0x184>)
 8001b1e:	f003 f861 	bl	8004be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8001b28:	4827      	ldr	r0, [pc, #156]	@ (8001bc8 <MX_GPIO_Init+0x188>)
 8001b2a:	f003 f85b 	bl	8004be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f640 71f7 	movw	r1, #4087	@ 0xff7
 8001b34:	4825      	ldr	r0, [pc, #148]	@ (8001bcc <MX_GPIO_Init+0x18c>)
 8001b36:	f003 f855 	bl	8004be4 <HAL_GPIO_WritePin>
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : TIM1_CH3_PH_Pin TIM1_CH4_PH_Pin TIM2_CH1_PH_Pin TIM8_CH4_PH_Pin
                           TIM12_CH2_PH_Pin TIM13_CH1_PH_Pin TIM14_CH1_PH_Pin TIM15_CH1_PH_Pin
                           TIM1_CH1_PH_Pin TIM1_CH2_PH_Pin */
  GPIO_InitStruct.Pin = TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 8001b3a:	f249 539f 	movw	r3, #38303	@ 0x959f
 8001b3e:	61fb      	str	r3, [r7, #28]
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b40:	2301      	movs	r3, #1
 8001b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	4619      	mov	r1, r3
 8001b52:	481b      	ldr	r0, [pc, #108]	@ (8001bc0 <MX_GPIO_Init+0x180>)
 8001b54:	f002 fe96 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH4_PH_Pin TIM5_CH2_PH_Pin TIM5_CH3_PH_Pin TIM4_CH3_PH_Pin */
  GPIO_InitStruct.Pin = TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin;
 8001b58:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6a:	f107 031c 	add.w	r3, r7, #28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4814      	ldr	r0, [pc, #80]	@ (8001bc4 <MX_GPIO_Init+0x184>)
 8001b72:	f002 fe87 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH1_PH_Pin TIM4_CH2_PH_Pin */
  GPIO_InitStruct.Pin = TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin;
 8001b76:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b88:	f107 031c 	add.w	r3, r7, #28
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	480e      	ldr	r0, [pc, #56]	@ (8001bc8 <MX_GPIO_Init+0x188>)
 8001b90:	f002 fe78 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pins : HRTIM_CHC1_PH_Pin HRTIM_CHC2_PH_Pin HRTIM_CHD1_PH_Pin HRTIM_CHD2_PH_Pin
                           TIM15_CH2_PH_Pin TIM16_CH1_PH_Pin LPTIM1_OUT_PH_Pin HRTIM_CHA1_PH_Pin
                           HRTIM_CHA2_PH_Pin HRTIM_CHB1_PH_Pin HRTIM_CHB2_PH_Pin */
  GPIO_InitStruct.Pin = HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 8001b94:	f640 73f7 	movw	r3, #4087	@ 0xff7
 8001b98:	61fb      	str	r3, [r7, #28]
                          |TIM15_CH2_PH_Pin|TIM16_CH1_PH_Pin|LPTIM1_OUT_PH_Pin|HRTIM_CHA1_PH_Pin
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	4619      	mov	r1, r3
 8001bac:	4807      	ldr	r0, [pc, #28]	@ (8001bcc <MX_GPIO_Init+0x18c>)
 8001bae:	f002 fe69 	bl	8004884 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bb2:	bf00      	nop
 8001bb4:	3730      	adds	r7, #48	@ 0x30
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	58024400 	.word	0x58024400
 8001bc0:	58021000 	.word	0x58021000
 8001bc4:	58020800 	.word	0x58020800
 8001bc8:	58020400 	.word	0x58020400
 8001bcc:	58020c00 	.word	0x58020c00

08001bd0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	static int i = 0;  // index for actuator update
	static int t = 0; // variable to track time
	const int period = 10; // number of timer rollovers between updates
 8001bd8:	230a      	movs	r3, #10
 8001bda:	617b      	str	r3, [r7, #20]
	const double step = 0.3;// max step size in volts
 8001bdc:	a324      	add	r3, pc, #144	@ (adr r3, 8001c70 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	/*//Used to account for period in time clicks for UART Output
		sys_timer+= 24000;
		period_ticks ++;
	*/

    if (htim==&htim1){
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d12d      	bne.n	8001c4a <HAL_TIM_PeriodElapsedCallback+0x7a>
    	t+=1;
 8001bee:	4b1b      	ldr	r3, [pc, #108]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	4a19      	ldr	r2, [pc, #100]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001bf6:	6013      	str	r3, [r2, #0]
    	if(t%period == 0)
 8001bf8:	4b18      	ldr	r3, [pc, #96]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	fb93 f2f2 	sdiv	r2, r3, r2
 8001c02:	6979      	ldr	r1, [r7, #20]
 8001c04:	fb01 f202 	mul.w	r2, r1, r2
 8001c08:	1a9b      	subs	r3, r3, r2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d11d      	bne.n	8001c4a <HAL_TIM_PeriodElapsedCallback+0x7a>
    	{
    		if(i>=SIN_PERIOD) i = 0;
 8001c0e:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c16:	db02      	blt.n	8001c1e <HAL_TIM_PeriodElapsedCallback+0x4e>
 8001c18:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
    		//update the output
    		ref = sine_vals[i]*step;
 8001c1e:	4b10      	ldr	r3, [pc, #64]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a10      	ldr	r2, [pc, #64]	@ (8001c64 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4413      	add	r3, r2
 8001c28:	ed93 6b00 	vldr	d6, [r3]
 8001c2c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001c30:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c34:	4b0c      	ldr	r3, [pc, #48]	@ (8001c68 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001c36:	ed83 7b00 	vstr	d7, [r3]
			// inform main that the actuators need an update
    		i+=1;
 8001c3a:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	4a07      	ldr	r2, [pc, #28]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001c42:	6013      	str	r3, [r2, #0]
			ctrl_tmr_expired = TRUE;
 8001c44:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
    	}
	}

}
 8001c4a:	bf00      	nop
 8001c4c:	371c      	adds	r7, #28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	24000318 	.word	0x24000318
 8001c5c:	24003e40 	.word	0x24003e40
 8001c60:	24003e44 	.word	0x24003e44
 8001c64:	240006b0 	.word	0x240006b0
 8001c68:	240006a8 	.word	0x240006a8
 8001c6c:	240006a4 	.word	0x240006a4
 8001c70:	33333333 	.word	0x33333333
 8001c74:	3fd33333 	.word	0x3fd33333

08001c78 <UART_update>:

/*Writes commands into the circular buffer as they are sent,
once the elements is equal to the command length, a flag is sent*/
void UART_update(){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0

	uint8_t c;
	c = UART4->RDR;
 8001c7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <UART_update+0x2c>)
 8001c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c82:	71fb      	strb	r3, [r7, #7]

	run_state_machine(c);
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 f87a 	bl	8001d80 <run_state_machine>

	HAL_UART_Receive_IT(&huart4, rx_buff, sizeof(rx_buff));
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4906      	ldr	r1, [pc, #24]	@ (8001ca8 <UART_update+0x30>)
 8001c90:	4806      	ldr	r0, [pc, #24]	@ (8001cac <UART_update+0x34>)
 8001c92:	f008 ff0f 	bl	800aab4 <HAL_UART_Receive_IT>
	data_ready = FALSE;
 8001c96:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <UART_update+0x38>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40004c00 	.word	0x40004c00
 8001ca8:	24003e3c 	.word	0x24003e3c
 8001cac:	24000610 	.word	0x24000610
 8001cb0:	240025f0 	.word	0x240025f0

08001cb4 <command_update>:

/*Function that is called once the number of elements in the buffer
is equal to the command length. Fills elements into an array to print */
void command_update(){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0

	for(index = 0; index <= CMD_LENGTH ; index ++){
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d68 <command_update+0xb4>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	801a      	strh	r2, [r3, #0]
 8001cbe:	e017      	b.n	8001cf0 <command_update+0x3c>
		 cmd_bytes[index] = read_from_buffer(rxp);
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d6c <command_update+0xb8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 f968 	bl	8001f9a <read_from_buffer>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4b26      	ldr	r3, [pc, #152]	@ (8001d68 <command_update+0xb4>)
 8001cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	b209      	sxth	r1, r1
 8001cd8:	4b25      	ldr	r3, [pc, #148]	@ (8001d70 <command_update+0xbc>)
 8001cda:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(index = 0; index <= CMD_LENGTH ; index ++){
 8001cde:	4b22      	ldr	r3, [pc, #136]	@ (8001d68 <command_update+0xb4>)
 8001ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	b21a      	sxth	r2, r3
 8001cec:	4b1e      	ldr	r3, [pc, #120]	@ (8001d68 <command_update+0xb4>)
 8001cee:	801a      	strh	r2, [r3, #0]
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d68 <command_update+0xb4>)
 8001cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf6:	2b36      	cmp	r3, #54	@ 0x36
 8001cf8:	dde2      	ble.n	8001cc0 <command_update+0xc>
	 }

	for(index = 0; index <= NUM_ACTUATORS ; index ++){
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001d68 <command_update+0xb4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	801a      	strh	r2, [r3, #0]
 8001d00:	e021      	b.n	8001d46 <command_update+0x92>
		cmd_ref[index] = (cmd_bytes[(2*index)+1]<<8|cmd_bytes[2*index]);
 8001d02:	4b19      	ldr	r3, [pc, #100]	@ (8001d68 <command_update+0xb4>)
 8001d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	4a18      	ldr	r2, [pc, #96]	@ (8001d70 <command_update+0xbc>)
 8001d0e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	b21a      	sxth	r2, r3
 8001d16:	4b14      	ldr	r3, [pc, #80]	@ (8001d68 <command_update+0xb4>)
 8001d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4914      	ldr	r1, [pc, #80]	@ (8001d70 <command_update+0xbc>)
 8001d20:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001d24:	4910      	ldr	r1, [pc, #64]	@ (8001d68 <command_update+0xb4>)
 8001d26:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	b21a      	sxth	r2, r3
 8001d2e:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <command_update+0xc0>)
 8001d30:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	for(index = 0; index <= NUM_ACTUATORS ; index ++){
 8001d34:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <command_update+0xb4>)
 8001d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	b21a      	sxth	r2, r3
 8001d42:	4b09      	ldr	r3, [pc, #36]	@ (8001d68 <command_update+0xb4>)
 8001d44:	801a      	strh	r2, [r3, #0]
 8001d46:	4b08      	ldr	r3, [pc, #32]	@ (8001d68 <command_update+0xb4>)
 8001d48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d4c:	2b1b      	cmp	r3, #27
 8001d4e:	ddd8      	ble.n	8001d02 <command_update+0x4e>
	}

		HAL_UART_Transmit(&huart4, cmd_bytes, sizeof(cmd_bytes), 10);
 8001d50:	230a      	movs	r3, #10
 8001d52:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d56:	4906      	ldr	r1, [pc, #24]	@ (8001d70 <command_update+0xbc>)
 8001d58:	4807      	ldr	r0, [pc, #28]	@ (8001d78 <command_update+0xc4>)
 8001d5a:	f008 fe1d 	bl	800a998 <HAL_UART_Transmit>

	cmd_ready = FALSE;
 8001d5e:	4b07      	ldr	r3, [pc, #28]	@ (8001d7c <command_update+0xc8>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	24003e00 	.word	0x24003e00
 8001d6c:	24000000 	.word	0x24000000
 8001d70:	24002e00 	.word	0x24002e00
 8001d74:	24003e04 	.word	0x24003e04
 8001d78:	24000610 	.word	0x24000610
 8001d7c:	24003e02 	.word	0x24003e02

08001d80 <run_state_machine>:


static void run_state_machine(uint8_t byte)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
	static int current_state = startByte1;
	static int counter = 0;
	int next_state;

	switch(current_state){
 8001d8a:	4b34      	ldr	r3, [pc, #208]	@ (8001e5c <run_state_machine+0xdc>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d85b      	bhi.n	8001e4a <run_state_machine+0xca>
 8001d92:	a201      	add	r2, pc, #4	@ (adr r2, 8001d98 <run_state_machine+0x18>)
 8001d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d98:	08001dad 	.word	0x08001dad
 8001d9c:	08001dc5 	.word	0x08001dc5
 8001da0:	08001de1 	.word	0x08001de1
 8001da4:	08001e0d 	.word	0x08001e0d
 8001da8:	08001e23 	.word	0x08001e23
		case startByte1:
			if(byte == start_bytes[0]){
 8001dac:	4b2c      	ldr	r3, [pc, #176]	@ (8001e60 <run_state_machine+0xe0>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	79fa      	ldrb	r2, [r7, #7]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d102      	bne.n	8001dbc <run_state_machine+0x3c>
				next_state = startByte2;
 8001db6:	2301      	movs	r3, #1
 8001db8:	60fb      	str	r3, [r7, #12]
			} else{
				next_state = current_state;
			}
			break;
 8001dba:	e047      	b.n	8001e4c <run_state_machine+0xcc>
				next_state = current_state;
 8001dbc:	4b27      	ldr	r3, [pc, #156]	@ (8001e5c <run_state_machine+0xdc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	60fb      	str	r3, [r7, #12]
			break;
 8001dc2:	e043      	b.n	8001e4c <run_state_machine+0xcc>
		case(startByte2):
			if(byte == start_bytes[1]){
 8001dc4:	4b26      	ldr	r3, [pc, #152]	@ (8001e60 <run_state_machine+0xe0>)
 8001dc6:	785b      	ldrb	r3, [r3, #1]
 8001dc8:	79fa      	ldrb	r2, [r7, #7]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d105      	bne.n	8001dda <run_state_machine+0x5a>
				next_state = storeMessage;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	60fb      	str	r3, [r7, #12]
				counter = 0;
 8001dd2:	4b24      	ldr	r3, [pc, #144]	@ (8001e64 <run_state_machine+0xe4>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
			} else{
				next_state = startByte1;
			}
			break;
 8001dd8:	e038      	b.n	8001e4c <run_state_machine+0xcc>
				next_state = startByte1;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
			break;
 8001dde:	e035      	b.n	8001e4c <run_state_machine+0xcc>
		case(storeMessage):
			if(counter == CMD_LENGTH-1){
 8001de0:	4b20      	ldr	r3, [pc, #128]	@ (8001e64 <run_state_machine+0xe4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b35      	cmp	r3, #53	@ 0x35
 8001de6:	d102      	bne.n	8001dee <run_state_machine+0x6e>
				next_state = endByte1;
 8001de8:	2303      	movs	r3, #3
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	e001      	b.n	8001df2 <run_state_machine+0x72>
			}else{
				next_state = storeMessage;
 8001dee:	2302      	movs	r3, #2
 8001df0:	60fb      	str	r3, [r7, #12]
			}
			write_buffer(rxp, byte);
 8001df2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e68 <run_state_machine+0xe8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	79fa      	ldrb	r2, [r7, #7]
 8001df8:	4611      	mov	r1, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f8a8 	bl	8001f50 <write_buffer>
			counter++;
 8001e00:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <run_state_machine+0xe4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3301      	adds	r3, #1
 8001e06:	4a17      	ldr	r2, [pc, #92]	@ (8001e64 <run_state_machine+0xe4>)
 8001e08:	6013      	str	r3, [r2, #0]
			break;
 8001e0a:	e01f      	b.n	8001e4c <run_state_machine+0xcc>
		case(endByte1):
			if(byte == end_bytes[0]){
 8001e0c:	4b17      	ldr	r3, [pc, #92]	@ (8001e6c <run_state_machine+0xec>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	79fa      	ldrb	r2, [r7, #7]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d102      	bne.n	8001e1c <run_state_machine+0x9c>
				next_state = endByte2;
 8001e16:	2304      	movs	r3, #4
 8001e18:	60fb      	str	r3, [r7, #12]
			}else{
				next_state = startByte1;
			}
			break;
 8001e1a:	e017      	b.n	8001e4c <run_state_machine+0xcc>
				next_state = startByte1;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
			break;
 8001e20:	e014      	b.n	8001e4c <run_state_machine+0xcc>
		case(endByte2):
			if(byte == end_bytes[1]){
 8001e22:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <run_state_machine+0xec>)
 8001e24:	785b      	ldrb	r3, [r3, #1]
 8001e26:	79fa      	ldrb	r2, [r7, #7]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d103      	bne.n	8001e34 <run_state_machine+0xb4>
				cmd_ready = TRUE;
 8001e2c:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <run_state_machine+0xf0>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	e007      	b.n	8001e44 <run_state_machine+0xc4>
			}else{
			rxp->read_index = 0;
 8001e34:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <run_state_machine+0xe8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
			rxp->write_index = 0;
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e68 <run_state_machine+0xe8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2200      	movs	r2, #0
 8001e42:	605a      	str	r2, [r3, #4]
			}
			next_state = startByte1;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
			break;
 8001e48:	e000      	b.n	8001e4c <run_state_machine+0xcc>
		default:
			break;
 8001e4a:	bf00      	nop
	}
	current_state = next_state;
 8001e4c:	4a03      	ldr	r2, [pc, #12]	@ (8001e5c <run_state_machine+0xdc>)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6013      	str	r3, [r2, #0]
}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	24003e48 	.word	0x24003e48
 8001e60:	24000004 	.word	0x24000004
 8001e64:	24003e4c 	.word	0x24003e4c
 8001e68:	24000000 	.word	0x24000000
 8001e6c:	24000008 	.word	0x24000008
 8001e70:	24003e02 	.word	0x24003e02

08001e74 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef*huart)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	data_ready = TRUE;
 8001e7c:	4b04      	ldr	r3, [pc, #16]	@ (8001e90 <HAL_UART_RxCpltCallback+0x1c>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	240025f0 	.word	0x240025f0

08001e94 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef*huart)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 __NOP();
 8001e9c:	bf00      	nop
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <init_buffer>:
    }
    return 0; /*no data available*/
}


static void init_buffer(struct circular_buffer *buf) {
 8001eaa:	b480      	push	{r7}
 8001eac:	b085      	sub	sp, #20
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
    int i;
    buf->read_index = 0; /*initialize read index to 0 */
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
    buf->write_index = 0; /*initialize write index to 0 */
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	605a      	str	r2, [r3, #4]
    buf->size = BUFFER_LENGTH; /*Set size to buffer length const*/
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ec4:	609a      	str	r2, [r3, #8]
    for (i = 0; i < BUFFER_LENGTH; i++) { /*initialize data to zero*/
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	e008      	b.n	8001ede <init_buffer+0x34>
        buf->data[i] = 0;
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	330c      	adds	r3, #12
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < BUFFER_LENGTH; i++) { /*initialize data to zero*/
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	3301      	adds	r3, #1
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ee4:	dbf2      	blt.n	8001ecc <init_buffer+0x22>
    } /*end for */
}
 8001ee6:	bf00      	nop
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <is_buffer_empty>:

/* function int is_buffer_empty(struct circular_buffer *buf)
 * takes a pointer to a circular buffer and compares the read and write indices
 * if they are equal then the buffer is empty
 */
static int8_t is_buffer_empty(struct circular_buffer *buf) {
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
    if (buf->read_index == buf->write_index) { //if read = write then the buffer is empty
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d101      	bne.n	8001f0c <is_buffer_empty+0x18>
        return TRUE;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <is_buffer_empty+0x1a>
    }
    return FALSE;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <is_buffer_full>:

/*  bufFull(struct oBuffer *buf)
 * takes a pointer to a circular buffer and compares the read and write indices
 * if write+1 = read, then the buffer is full.
 */
static int8_t is_buffer_full(struct circular_buffer *buf) {
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
    /* write index +1 == read index is full,  the mod provides wrap around*/
    if ((buf->write_index + 1) % BUFFER_LENGTH == buf->read_index) {
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	3301      	adds	r3, #1
 8001f28:	425a      	negs	r2, r3
 8001f2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f2e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001f32:	bf58      	it	pl
 8001f34:	4253      	negpl	r3, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d101      	bne.n	8001f42 <is_buffer_full+0x28>
        return TRUE;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <is_buffer_full+0x2a>
    }
    return FALSE;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <write_buffer>:

/* writeBuffer( (struct oBuffer *buf, unsigned char c)
 * takes a pointer to a circular buffer and a char to be written
 * returns SUCCESS or ERROR
 */
static int8_t write_buffer(struct circular_buffer *buf, unsigned char c) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	70fb      	strb	r3, [r7, #3]
    if (is_buffer_full(buf) == FALSE) {
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff ffdc 	bl	8001f1a <is_buffer_full>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d113      	bne.n	8001f90 <write_buffer+0x40>
        buf->data[buf->write_index] = c;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	4413      	add	r3, r2
 8001f70:	78fa      	ldrb	r2, [r7, #3]
 8001f72:	731a      	strb	r2, [r3, #12]
        /*increment the write index and wrap using modulus arithmetic */
        buf->write_index = (buf->write_index + 1) % BUFFER_LENGTH;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	425a      	negs	r2, r3
 8001f7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f80:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001f84:	bf58      	it	pl
 8001f86:	4253      	negpl	r3, r2
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6053      	str	r3, [r2, #4]
        return SUCCESS;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e000      	b.n	8001f92 <write_buffer+0x42>
    }
    return ERROR; /*no data written*/
 8001f90:	2301      	movs	r3, #1
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <read_from_buffer>:
 * takes a pointer to a circular buffer
 * returns the value from the buffer
 * the read index is incremented and wrapped using modulus arithmetic
 * Returns 0 if the buffer is empty or the pointer is invalid
 */
static unsigned char read_from_buffer(struct circular_buffer *buf) {
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
    unsigned char val;
    if (is_buffer_empty(buf) == FALSE) {
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff ffa6 	bl	8001ef4 <is_buffer_empty>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d113      	bne.n	8001fd6 <read_from_buffer+0x3c>
        val = buf->data[buf->read_index]; //get the char from the buffer
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	7b1b      	ldrb	r3, [r3, #12]
 8001fb8:	73fb      	strb	r3, [r7, #15]
        /*increment the read index and wrap using modulus arithmetic*/
        buf->read_index = (buf->read_index + 1) % BUFFER_LENGTH;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	425a      	negs	r2, r3
 8001fc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fc6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001fca:	bf58      	it	pl
 8001fcc:	4253      	negpl	r3, r2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6013      	str	r3, [r2, #0]
        return val;
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
 8001fd4:	e000      	b.n	8001fd8 <read_from_buffer+0x3e>
    }
    return 0;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <control_update>:
    return 0;
}


static void control_update(double ref)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	ed87 0b00 	vstr	d0, [r7]
	// sign bit of the command fed to phase input on the h-bridge
	static int phase=GPIO_PIN_SET;
	//int new_phase = {0};
	static uint16_t dutycycle=0;
	//uint16_t new_dc;
	double absref = 0;
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	e9c7 2302 	strd	r2, r3, [r7, #8]


	//Timer 1
		// set the sign of the move (phase)
			if(cmd_ref[T1C1] < 0){
 8001ff6:	4b9f      	ldr	r3, [pc, #636]	@ (8002274 <control_update+0x294>)
 8001ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	da03      	bge.n	8002008 <control_update+0x28>
				phase = GPIO_PIN_RESET; // reverse direction
 8002000:	4b9d      	ldr	r3, [pc, #628]	@ (8002278 <control_update+0x298>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	e002      	b.n	800200e <control_update+0x2e>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002008:	4b9b      	ldr	r3, [pc, #620]	@ (8002278 <control_update+0x298>)
 800200a:	2201      	movs	r2, #1
 800200c:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, phase);  //Starts the phase generation on each of the pins (Channels)
 800200e:	4b9a      	ldr	r3, [pc, #616]	@ (8002278 <control_update+0x298>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	2101      	movs	r1, #1
 8002018:	4898      	ldr	r0, [pc, #608]	@ (800227c <control_update+0x29c>)
 800201a:	f002 fde3 	bl	8004be4 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[T1C2] < 0){
 800201e:	4b95      	ldr	r3, [pc, #596]	@ (8002274 <control_update+0x294>)
 8002020:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002024:	2b00      	cmp	r3, #0
 8002026:	da03      	bge.n	8002030 <control_update+0x50>
				phase = GPIO_PIN_RESET; // reverse direction
 8002028:	4b93      	ldr	r3, [pc, #588]	@ (8002278 <control_update+0x298>)
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	e002      	b.n	8002036 <control_update+0x56>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002030:	4b91      	ldr	r3, [pc, #580]	@ (8002278 <control_update+0x298>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, phase);
 8002036:	4b90      	ldr	r3, [pc, #576]	@ (8002278 <control_update+0x298>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	b2db      	uxtb	r3, r3
 800203c:	461a      	mov	r2, r3
 800203e:	2102      	movs	r1, #2
 8002040:	488e      	ldr	r0, [pc, #568]	@ (800227c <control_update+0x29c>)
 8002042:	f002 fdcf 	bl	8004be4 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[T1C3] < 0){
 8002046:	4b8b      	ldr	r3, [pc, #556]	@ (8002274 <control_update+0x294>)
 8002048:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	da03      	bge.n	8002058 <control_update+0x78>
				phase = GPIO_PIN_RESET; // reverse direction
 8002050:	4b89      	ldr	r3, [pc, #548]	@ (8002278 <control_update+0x298>)
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	e002      	b.n	800205e <control_update+0x7e>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002058:	4b87      	ldr	r3, [pc, #540]	@ (8002278 <control_update+0x298>)
 800205a:	2201      	movs	r2, #1
 800205c:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, phase);
 800205e:	4b86      	ldr	r3, [pc, #536]	@ (8002278 <control_update+0x298>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	461a      	mov	r2, r3
 8002066:	2104      	movs	r1, #4
 8002068:	4884      	ldr	r0, [pc, #528]	@ (800227c <control_update+0x29c>)
 800206a:	f002 fdbb 	bl	8004be4 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[T1C4] < 0){
 800206e:	4b81      	ldr	r3, [pc, #516]	@ (8002274 <control_update+0x294>)
 8002070:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002074:	2b00      	cmp	r3, #0
 8002076:	da03      	bge.n	8002080 <control_update+0xa0>
				phase = GPIO_PIN_RESET; // reverse direction
 8002078:	4b7f      	ldr	r3, [pc, #508]	@ (8002278 <control_update+0x298>)
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	e002      	b.n	8002086 <control_update+0xa6>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002080:	4b7d      	ldr	r3, [pc, #500]	@ (8002278 <control_update+0x298>)
 8002082:	2201      	movs	r2, #1
 8002084:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, phase);
 8002086:	4b7c      	ldr	r3, [pc, #496]	@ (8002278 <control_update+0x298>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	2108      	movs	r1, #8
 8002090:	487a      	ldr	r0, [pc, #488]	@ (800227c <control_update+0x29c>)
 8002092:	f002 fda7 	bl	8004be4 <HAL_GPIO_WritePin>
	//End Timer 1

	//Timer 2
		// set the sign of the move (phase)
			if(cmd_ref[T2C1] < 0){
 8002096:	4b77      	ldr	r3, [pc, #476]	@ (8002274 <control_update+0x294>)
 8002098:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	da03      	bge.n	80020a8 <control_update+0xc8>
				phase = GPIO_PIN_RESET; // reverse direction
 80020a0:	4b75      	ldr	r3, [pc, #468]	@ (8002278 <control_update+0x298>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	e002      	b.n	80020ae <control_update+0xce>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80020a8:	4b73      	ldr	r3, [pc, #460]	@ (8002278 <control_update+0x298>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM2_CH1_PH_GPIO_Port, TIM2_CH1_PH_Pin, phase);
 80020ae:	4b72      	ldr	r3, [pc, #456]	@ (8002278 <control_update+0x298>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	2110      	movs	r1, #16
 80020b8:	4870      	ldr	r0, [pc, #448]	@ (800227c <control_update+0x29c>)
 80020ba:	f002 fd93 	bl	8004be4 <HAL_GPIO_WritePin>
	//End Timer 2

	//Timer 4
		// set the sign of the move (phase)
			if(cmd_ref[T4C1] < 0){
 80020be:	4b6d      	ldr	r3, [pc, #436]	@ (8002274 <control_update+0x294>)
 80020c0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	da03      	bge.n	80020d0 <control_update+0xf0>
				phase = GPIO_PIN_RESET; // reverse direction
 80020c8:	4b6b      	ldr	r3, [pc, #428]	@ (8002278 <control_update+0x298>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	e002      	b.n	80020d6 <control_update+0xf6>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80020d0:	4b69      	ldr	r3, [pc, #420]	@ (8002278 <control_update+0x298>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM4_CH1_PH_GPIO_Port, TIM4_CH1_PH_Pin, phase);
 80020d6:	4b68      	ldr	r3, [pc, #416]	@ (8002278 <control_update+0x298>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020e2:	4867      	ldr	r0, [pc, #412]	@ (8002280 <control_update+0x2a0>)
 80020e4:	f002 fd7e 	bl	8004be4 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[T4C2] < 0){
 80020e8:	4b62      	ldr	r3, [pc, #392]	@ (8002274 <control_update+0x294>)
 80020ea:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	da03      	bge.n	80020fa <control_update+0x11a>
				phase = GPIO_PIN_RESET; // reverse direction
 80020f2:	4b61      	ldr	r3, [pc, #388]	@ (8002278 <control_update+0x298>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	e002      	b.n	8002100 <control_update+0x120>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80020fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002278 <control_update+0x298>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM4_CH2_PH_GPIO_Port, TIM4_CH2_PH_Pin, phase);
 8002100:	4b5d      	ldr	r3, [pc, #372]	@ (8002278 <control_update+0x298>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800210c:	485c      	ldr	r0, [pc, #368]	@ (8002280 <control_update+0x2a0>)
 800210e:	f002 fd69 	bl	8004be4 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[T4C3] < 0){
 8002112:	4b58      	ldr	r3, [pc, #352]	@ (8002274 <control_update+0x294>)
 8002114:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002118:	2b00      	cmp	r3, #0
 800211a:	da03      	bge.n	8002124 <control_update+0x144>
				phase = GPIO_PIN_RESET; // reverse direction
 800211c:	4b56      	ldr	r3, [pc, #344]	@ (8002278 <control_update+0x298>)
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	e002      	b.n	800212a <control_update+0x14a>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002124:	4b54      	ldr	r3, [pc, #336]	@ (8002278 <control_update+0x298>)
 8002126:	2201      	movs	r2, #1
 8002128:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM4_CH3_PH_GPIO_Port, TIM4_CH3_PH_Pin, phase);
 800212a:	4b53      	ldr	r3, [pc, #332]	@ (8002278 <control_update+0x298>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002136:	4853      	ldr	r0, [pc, #332]	@ (8002284 <control_update+0x2a4>)
 8002138:	f002 fd54 	bl	8004be4 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[T4C4] < 0){
 800213c:	4b4d      	ldr	r3, [pc, #308]	@ (8002274 <control_update+0x294>)
 800213e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002142:	2b00      	cmp	r3, #0
 8002144:	da03      	bge.n	800214e <control_update+0x16e>
				phase = GPIO_PIN_RESET; // reverse direction
 8002146:	4b4c      	ldr	r3, [pc, #304]	@ (8002278 <control_update+0x298>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e002      	b.n	8002154 <control_update+0x174>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 800214e:	4b4a      	ldr	r3, [pc, #296]	@ (8002278 <control_update+0x298>)
 8002150:	2201      	movs	r2, #1
 8002152:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM4_CH4_PH_GPIO_Port, TIM4_CH4_PH_Pin, phase);
 8002154:	4b48      	ldr	r3, [pc, #288]	@ (8002278 <control_update+0x298>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	461a      	mov	r2, r3
 800215c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002160:	4848      	ldr	r0, [pc, #288]	@ (8002284 <control_update+0x2a4>)
 8002162:	f002 fd3f 	bl	8004be4 <HAL_GPIO_WritePin>
	//End Timer 4


	//Timer 5
		// set the sign of the move (phase)
			if(cmd_ref[T5C2] < 0){
 8002166:	4b43      	ldr	r3, [pc, #268]	@ (8002274 <control_update+0x294>)
 8002168:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800216c:	2b00      	cmp	r3, #0
 800216e:	da03      	bge.n	8002178 <control_update+0x198>
				phase = GPIO_PIN_RESET; // reverse direction
 8002170:	4b41      	ldr	r3, [pc, #260]	@ (8002278 <control_update+0x298>)
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	e002      	b.n	800217e <control_update+0x19e>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002178:	4b3f      	ldr	r3, [pc, #252]	@ (8002278 <control_update+0x298>)
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM5_CH2_PH_GPIO_Port, TIM5_CH2_PH_Pin, phase);
 800217e:	4b3e      	ldr	r3, [pc, #248]	@ (8002278 <control_update+0x298>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	461a      	mov	r2, r3
 8002186:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800218a:	483e      	ldr	r0, [pc, #248]	@ (8002284 <control_update+0x2a4>)
 800218c:	f002 fd2a 	bl	8004be4 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[T5C3] < 0){
 8002190:	4b38      	ldr	r3, [pc, #224]	@ (8002274 <control_update+0x294>)
 8002192:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002196:	2b00      	cmp	r3, #0
 8002198:	da03      	bge.n	80021a2 <control_update+0x1c2>
				phase = GPIO_PIN_RESET; // reverse direction
 800219a:	4b37      	ldr	r3, [pc, #220]	@ (8002278 <control_update+0x298>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	e002      	b.n	80021a8 <control_update+0x1c8>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80021a2:	4b35      	ldr	r3, [pc, #212]	@ (8002278 <control_update+0x298>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM5_CH3_PH_GPIO_Port, TIM5_CH3_PH_Pin, phase);
 80021a8:	4b33      	ldr	r3, [pc, #204]	@ (8002278 <control_update+0x298>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	461a      	mov	r2, r3
 80021b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021b4:	4833      	ldr	r0, [pc, #204]	@ (8002284 <control_update+0x2a4>)
 80021b6:	f002 fd15 	bl	8004be4 <HAL_GPIO_WritePin>
    //End Timer 5


    //Timer 8
		// set the sign of the move (phase)
			if(cmd_ref[T8C4] < 0){
 80021ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002274 <control_update+0x294>)
 80021bc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	da03      	bge.n	80021cc <control_update+0x1ec>
				phase = GPIO_PIN_RESET; // reverse direction
 80021c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002278 <control_update+0x298>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	e002      	b.n	80021d2 <control_update+0x1f2>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80021cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002278 <control_update+0x298>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM8_CH4_PH_GPIO_Port, TIM8_CH4_PH_Pin, phase);
 80021d2:	4b29      	ldr	r3, [pc, #164]	@ (8002278 <control_update+0x298>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	2180      	movs	r1, #128	@ 0x80
 80021dc:	4827      	ldr	r0, [pc, #156]	@ (800227c <control_update+0x29c>)
 80021de:	f002 fd01 	bl	8004be4 <HAL_GPIO_WritePin>
	//End Timer 8


    //Timer 12
		// set the sign of the move (phase)
			if(cmd_ref[T12C2] < 0){
 80021e2:	4b24      	ldr	r3, [pc, #144]	@ (8002274 <control_update+0x294>)
 80021e4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	da03      	bge.n	80021f4 <control_update+0x214>
				phase = GPIO_PIN_RESET; // reverse direction
 80021ec:	4b22      	ldr	r3, [pc, #136]	@ (8002278 <control_update+0x298>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	e002      	b.n	80021fa <control_update+0x21a>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80021f4:	4b20      	ldr	r3, [pc, #128]	@ (8002278 <control_update+0x298>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM12_CH2_PH_GPIO_Port, TIM12_CH2_PH_Pin, phase);
 80021fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002278 <control_update+0x298>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002206:	481d      	ldr	r0, [pc, #116]	@ (800227c <control_update+0x29c>)
 8002208:	f002 fcec 	bl	8004be4 <HAL_GPIO_WritePin>
    //End Timer 12


    //Timer 13
		// set the sign of the move (phase)
			if(cmd_ref[T13C1] < 0){
 800220c:	4b19      	ldr	r3, [pc, #100]	@ (8002274 <control_update+0x294>)
 800220e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002212:	2b00      	cmp	r3, #0
 8002214:	da03      	bge.n	800221e <control_update+0x23e>
				phase = GPIO_PIN_RESET; // reverse direction
 8002216:	4b18      	ldr	r3, [pc, #96]	@ (8002278 <control_update+0x298>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e002      	b.n	8002224 <control_update+0x244>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 800221e:	4b16      	ldr	r3, [pc, #88]	@ (8002278 <control_update+0x298>)
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM13_CH1_PH_GPIO_Port, TIM13_CH1_PH_Pin, phase);
 8002224:	4b14      	ldr	r3, [pc, #80]	@ (8002278 <control_update+0x298>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002230:	4812      	ldr	r0, [pc, #72]	@ (800227c <control_update+0x29c>)
 8002232:	f002 fcd7 	bl	8004be4 <HAL_GPIO_WritePin>
    //End Timer 13


    //Timer 14
		// set the sign of the move (phase)
			if(cmd_ref[T14C1] < 0){
 8002236:	4b0f      	ldr	r3, [pc, #60]	@ (8002274 <control_update+0x294>)
 8002238:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800223c:	2b00      	cmp	r3, #0
 800223e:	da03      	bge.n	8002248 <control_update+0x268>
				phase = GPIO_PIN_RESET; // reverse direction
 8002240:	4b0d      	ldr	r3, [pc, #52]	@ (8002278 <control_update+0x298>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	e002      	b.n	800224e <control_update+0x26e>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002248:	4b0b      	ldr	r3, [pc, #44]	@ (8002278 <control_update+0x298>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM14_CH1_PH_GPIO_Port, TIM14_CH1_PH_Pin, phase);
 800224e:	4b0a      	ldr	r3, [pc, #40]	@ (8002278 <control_update+0x298>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	461a      	mov	r2, r3
 8002256:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800225a:	4808      	ldr	r0, [pc, #32]	@ (800227c <control_update+0x29c>)
 800225c:	f002 fcc2 	bl	8004be4 <HAL_GPIO_WritePin>
    //End Timer 14


    //Timer 15
		// set the sign of the move (phase)
			if(cmd_ref[T15C1] < 0){
 8002260:	4b04      	ldr	r3, [pc, #16]	@ (8002274 <control_update+0x294>)
 8002262:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002266:	2b00      	cmp	r3, #0
 8002268:	da0e      	bge.n	8002288 <control_update+0x2a8>
				phase = GPIO_PIN_RESET; // reverse direction
 800226a:	4b03      	ldr	r3, [pc, #12]	@ (8002278 <control_update+0x298>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	e00d      	b.n	800228e <control_update+0x2ae>
 8002272:	bf00      	nop
 8002274:	24003e04 	.word	0x24003e04
 8002278:	2400000c 	.word	0x2400000c
 800227c:	58021000 	.word	0x58021000
 8002280:	58020400 	.word	0x58020400
 8002284:	58020800 	.word	0x58020800
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002288:	4b70      	ldr	r3, [pc, #448]	@ (800244c <control_update+0x46c>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM15_CH1_PH_GPIO_Port, TIM15_CH1_PH_Pin, phase);
 800228e:	4b6f      	ldr	r3, [pc, #444]	@ (800244c <control_update+0x46c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	461a      	mov	r2, r3
 8002296:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800229a:	486d      	ldr	r0, [pc, #436]	@ (8002450 <control_update+0x470>)
 800229c:	f002 fca2 	bl	8004be4 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[T15C2] < 0){
 80022a0:	4b6c      	ldr	r3, [pc, #432]	@ (8002454 <control_update+0x474>)
 80022a2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	da03      	bge.n	80022b2 <control_update+0x2d2>
				phase = GPIO_PIN_RESET; // reverse direction
 80022aa:	4b68      	ldr	r3, [pc, #416]	@ (800244c <control_update+0x46c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	e002      	b.n	80022b8 <control_update+0x2d8>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80022b2:	4b66      	ldr	r3, [pc, #408]	@ (800244c <control_update+0x46c>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM15_CH2_PH_GPIO_Port, TIM15_CH2_PH_Pin, phase);
 80022b8:	4b64      	ldr	r3, [pc, #400]	@ (800244c <control_update+0x46c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	2101      	movs	r1, #1
 80022c2:	4865      	ldr	r0, [pc, #404]	@ (8002458 <control_update+0x478>)
 80022c4:	f002 fc8e 	bl	8004be4 <HAL_GPIO_WritePin>
   //End Timer 15


   //Timer 16
		// set the sign of the move (phase)
			if(cmd_ref[T16C1] < 0){
 80022c8:	4b62      	ldr	r3, [pc, #392]	@ (8002454 <control_update+0x474>)
 80022ca:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	da03      	bge.n	80022da <control_update+0x2fa>
				phase = GPIO_PIN_RESET; // reverse direction
 80022d2:	4b5e      	ldr	r3, [pc, #376]	@ (800244c <control_update+0x46c>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	e002      	b.n	80022e0 <control_update+0x300>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80022da:	4b5c      	ldr	r3, [pc, #368]	@ (800244c <control_update+0x46c>)
 80022dc:	2201      	movs	r2, #1
 80022de:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM16_CH1_PH_GPIO_Port, TIM16_CH1_PH_Pin, phase);
 80022e0:	4b5a      	ldr	r3, [pc, #360]	@ (800244c <control_update+0x46c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	461a      	mov	r2, r3
 80022e8:	2102      	movs	r1, #2
 80022ea:	485b      	ldr	r0, [pc, #364]	@ (8002458 <control_update+0x478>)
 80022ec:	f002 fc7a 	bl	8004be4 <HAL_GPIO_WritePin>


    //HRTIM CODE HERE **************
    //High Resolution Timer CHA
		// set the sign of the move (phase)
			if(cmd_ref[HRA1] < 0){
 80022f0:	4b58      	ldr	r3, [pc, #352]	@ (8002454 <control_update+0x474>)
 80022f2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	da03      	bge.n	8002302 <control_update+0x322>
				phase = GPIO_PIN_RESET; // reverse direction
 80022fa:	4b54      	ldr	r3, [pc, #336]	@ (800244c <control_update+0x46c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	e002      	b.n	8002308 <control_update+0x328>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002302:	4b52      	ldr	r3, [pc, #328]	@ (800244c <control_update+0x46c>)
 8002304:	2201      	movs	r2, #1
 8002306:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(HRTIM_CHA1_PH_GPIO_Port, HRTIM_CHA1_PH_Pin, phase);
 8002308:	4b50      	ldr	r3, [pc, #320]	@ (800244c <control_update+0x46c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	2110      	movs	r1, #16
 8002312:	4851      	ldr	r0, [pc, #324]	@ (8002458 <control_update+0x478>)
 8002314:	f002 fc66 	bl	8004be4 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[HRA2] < 0){
 8002318:	4b4e      	ldr	r3, [pc, #312]	@ (8002454 <control_update+0x474>)
 800231a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800231e:	2b00      	cmp	r3, #0
 8002320:	da03      	bge.n	800232a <control_update+0x34a>
				phase = GPIO_PIN_RESET; // reverse direction
 8002322:	4b4a      	ldr	r3, [pc, #296]	@ (800244c <control_update+0x46c>)
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	e002      	b.n	8002330 <control_update+0x350>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 800232a:	4b48      	ldr	r3, [pc, #288]	@ (800244c <control_update+0x46c>)
 800232c:	2201      	movs	r2, #1
 800232e:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(HRTIM_CHA2_PH_GPIO_Port, HRTIM_CHA2_PH_Pin, phase);
 8002330:	4b46      	ldr	r3, [pc, #280]	@ (800244c <control_update+0x46c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	2120      	movs	r1, #32
 800233a:	4847      	ldr	r0, [pc, #284]	@ (8002458 <control_update+0x478>)
 800233c:	f002 fc52 	bl	8004be4 <HAL_GPIO_WritePin>
    //End High HRTIM CHA

    //High Resolution Timer CHB
		// set the sign of the move (phase)
			if(cmd_ref[HRB1] < 0){
 8002340:	4b44      	ldr	r3, [pc, #272]	@ (8002454 <control_update+0x474>)
 8002342:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8002346:	2b00      	cmp	r3, #0
 8002348:	da03      	bge.n	8002352 <control_update+0x372>
				phase = GPIO_PIN_RESET; // reverse direction
 800234a:	4b40      	ldr	r3, [pc, #256]	@ (800244c <control_update+0x46c>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	e002      	b.n	8002358 <control_update+0x378>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002352:	4b3e      	ldr	r3, [pc, #248]	@ (800244c <control_update+0x46c>)
 8002354:	2201      	movs	r2, #1
 8002356:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(HRTIM_CHB1_PH_GPIO_Port, HRTIM_CHB1_PH_Pin, phase);
 8002358:	4b3c      	ldr	r3, [pc, #240]	@ (800244c <control_update+0x46c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	2140      	movs	r1, #64	@ 0x40
 8002362:	483d      	ldr	r0, [pc, #244]	@ (8002458 <control_update+0x478>)
 8002364:	f002 fc3e 	bl	8004be4 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[HRB2] < 0){
 8002368:	4b3a      	ldr	r3, [pc, #232]	@ (8002454 <control_update+0x474>)
 800236a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 800236e:	2b00      	cmp	r3, #0
 8002370:	da03      	bge.n	800237a <control_update+0x39a>
				phase = GPIO_PIN_RESET; // reverse direction
 8002372:	4b36      	ldr	r3, [pc, #216]	@ (800244c <control_update+0x46c>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e002      	b.n	8002380 <control_update+0x3a0>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 800237a:	4b34      	ldr	r3, [pc, #208]	@ (800244c <control_update+0x46c>)
 800237c:	2201      	movs	r2, #1
 800237e:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(HRTIM_CHB2_PH_GPIO_Port, HRTIM_CHB2_PH_Pin, phase);
 8002380:	4b32      	ldr	r3, [pc, #200]	@ (800244c <control_update+0x46c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	2180      	movs	r1, #128	@ 0x80
 800238a:	4833      	ldr	r0, [pc, #204]	@ (8002458 <control_update+0x478>)
 800238c:	f002 fc2a 	bl	8004be4 <HAL_GPIO_WritePin>
    //End High HRTIM CHB

    //High Resolution Timer CHC
		// set the sign of the move (phase)
			if(cmd_ref[HRC1] < 0){
 8002390:	4b30      	ldr	r3, [pc, #192]	@ (8002454 <control_update+0x474>)
 8002392:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8002396:	2b00      	cmp	r3, #0
 8002398:	da03      	bge.n	80023a2 <control_update+0x3c2>
				phase = GPIO_PIN_RESET; // reverse direction
 800239a:	4b2c      	ldr	r3, [pc, #176]	@ (800244c <control_update+0x46c>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	e002      	b.n	80023a8 <control_update+0x3c8>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80023a2:	4b2a      	ldr	r3, [pc, #168]	@ (800244c <control_update+0x46c>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(HRTIM_CHC1_PH_GPIO_Port, HRTIM_CHC1_PH_Pin, phase);
 80023a8:	4b28      	ldr	r3, [pc, #160]	@ (800244c <control_update+0x46c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	461a      	mov	r2, r3
 80023b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023b4:	4828      	ldr	r0, [pc, #160]	@ (8002458 <control_update+0x478>)
 80023b6:	f002 fc15 	bl	8004be4 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[HRC2] < 0){
 80023ba:	4b26      	ldr	r3, [pc, #152]	@ (8002454 <control_update+0x474>)
 80023bc:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	da03      	bge.n	80023cc <control_update+0x3ec>
				phase = GPIO_PIN_RESET; // reverse direction
 80023c4:	4b21      	ldr	r3, [pc, #132]	@ (800244c <control_update+0x46c>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	e002      	b.n	80023d2 <control_update+0x3f2>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80023cc:	4b1f      	ldr	r3, [pc, #124]	@ (800244c <control_update+0x46c>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(HRTIM_CHC2_PH_GPIO_Port, HRTIM_CHC2_PH_Pin, phase);
 80023d2:	4b1e      	ldr	r3, [pc, #120]	@ (800244c <control_update+0x46c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	461a      	mov	r2, r3
 80023da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023de:	481e      	ldr	r0, [pc, #120]	@ (8002458 <control_update+0x478>)
 80023e0:	f002 fc00 	bl	8004be4 <HAL_GPIO_WritePin>
    //End High HRTIM CHC

    //High Resolution Timer CHD
		// set the sign of the move (phase)
			if(cmd_ref[HRD1] < 0){
 80023e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002454 <control_update+0x474>)
 80023e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	da03      	bge.n	80023f6 <control_update+0x416>
				phase = GPIO_PIN_RESET; // reverse direction
 80023ee:	4b17      	ldr	r3, [pc, #92]	@ (800244c <control_update+0x46c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	e002      	b.n	80023fc <control_update+0x41c>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80023f6:	4b15      	ldr	r3, [pc, #84]	@ (800244c <control_update+0x46c>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(HRTIM_CHD1_PH_GPIO_Port, HRTIM_CHD1_PH_Pin, phase);
 80023fc:	4b13      	ldr	r3, [pc, #76]	@ (800244c <control_update+0x46c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002408:	4813      	ldr	r0, [pc, #76]	@ (8002458 <control_update+0x478>)
 800240a:	f002 fbeb 	bl	8004be4 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[HRD2] < 0){
 800240e:	4b11      	ldr	r3, [pc, #68]	@ (8002454 <control_update+0x474>)
 8002410:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8002414:	2b00      	cmp	r3, #0
 8002416:	da03      	bge.n	8002420 <control_update+0x440>
				phase = GPIO_PIN_RESET; // reverse direction
 8002418:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <control_update+0x46c>)
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	e002      	b.n	8002426 <control_update+0x446>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002420:	4b0a      	ldr	r3, [pc, #40]	@ (800244c <control_update+0x46c>)
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(HRTIM_CHD2_PH_GPIO_Port, HRTIM_CHD2_PH_Pin, phase);
 8002426:	4b09      	ldr	r3, [pc, #36]	@ (800244c <control_update+0x46c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	461a      	mov	r2, r3
 800242e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002432:	4809      	ldr	r0, [pc, #36]	@ (8002458 <control_update+0x478>)
 8002434:	f002 fbd6 	bl	8004be4 <HAL_GPIO_WritePin>
     //END HRTIM CODE


    //Low Power Timer
		// set the sign of the move (phase)
			if(cmd_ref[LPTIM] < 0){
 8002438:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <control_update+0x474>)
 800243a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 800243e:	2b00      	cmp	r3, #0
 8002440:	da0c      	bge.n	800245c <control_update+0x47c>
				phase = GPIO_PIN_RESET; // reverse direction
 8002442:	4b02      	ldr	r3, [pc, #8]	@ (800244c <control_update+0x46c>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	e00b      	b.n	8002462 <control_update+0x482>
 800244a:	bf00      	nop
 800244c:	2400000c 	.word	0x2400000c
 8002450:	58021000 	.word	0x58021000
 8002454:	24003e04 	.word	0x24003e04
 8002458:	58020c00 	.word	0x58020c00
			} else {
				phase = GPIO_PIN_SET; //forward direction
 800245c:	4bc8      	ldr	r3, [pc, #800]	@ (8002780 <control_update+0x7a0>)
 800245e:	2201      	movs	r2, #1
 8002460:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(LPTIM1_OUT_PH_GPIO_Port, LPTIM1_OUT_PH_Pin, phase);
 8002462:	4bc7      	ldr	r3, [pc, #796]	@ (8002780 <control_update+0x7a0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	461a      	mov	r2, r3
 800246a:	2104      	movs	r1, #4
 800246c:	48c5      	ldr	r0, [pc, #788]	@ (8002784 <control_update+0x7a4>)
 800246e:	f002 fbb9 	bl	8004be4 <HAL_GPIO_WritePin>

//	}

	//Timer 1
	// calculate the dutycycle
	absref = fabs(cmd_ref[T1C1]); // duty cycle must be positive
 8002472:	4bc5      	ldr	r3, [pc, #788]	@ (8002788 <control_update+0x7a8>)
 8002474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002478:	ee07 3a90 	vmov	s15, r3
 800247c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002480:	eeb0 7bc7 	vabs.f64	d7, d7
 8002484:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002488:	ed9f 7bbb 	vldr	d7, [pc, #748]	@ 8002778 <control_update+0x798>
 800248c:	eeb0 1b47 	vmov.f64	d1, d7
 8002490:	ed97 0b02 	vldr	d0, [r7, #8]
 8002494:	f000 fb08 	bl	8002aa8 <calc_dutycycle>
 8002498:	4603      	mov	r3, r0
 800249a:	461a      	mov	r2, r3
 800249c:	4bbb      	ldr	r3, [pc, #748]	@ (800278c <control_update+0x7ac>)
 800249e:	801a      	strh	r2, [r3, #0]
		TIM1->CCR1 = dutycycle;   //Calls the duty cycle on the timers at the desired channel
 80024a0:	4bba      	ldr	r3, [pc, #744]	@ (800278c <control_update+0x7ac>)
 80024a2:	881a      	ldrh	r2, [r3, #0]
 80024a4:	4bba      	ldr	r3, [pc, #744]	@ (8002790 <control_update+0x7b0>)
 80024a6:	635a      	str	r2, [r3, #52]	@ 0x34

	absref = fabs(cmd_ref[T1C2]); // duty cycle must be positive
 80024a8:	4bb7      	ldr	r3, [pc, #732]	@ (8002788 <control_update+0x7a8>)
 80024aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024ae:	ee07 3a90 	vmov	s15, r3
 80024b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80024b6:	eeb0 7bc7 	vabs.f64	d7, d7
 80024ba:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80024be:	ed9f 7bae 	vldr	d7, [pc, #696]	@ 8002778 <control_update+0x798>
 80024c2:	eeb0 1b47 	vmov.f64	d1, d7
 80024c6:	ed97 0b02 	vldr	d0, [r7, #8]
 80024ca:	f000 faed 	bl	8002aa8 <calc_dutycycle>
 80024ce:	4603      	mov	r3, r0
 80024d0:	461a      	mov	r2, r3
 80024d2:	4bae      	ldr	r3, [pc, #696]	@ (800278c <control_update+0x7ac>)
 80024d4:	801a      	strh	r2, [r3, #0]
		TIM1->CCR2 = dutycycle;
 80024d6:	4bad      	ldr	r3, [pc, #692]	@ (800278c <control_update+0x7ac>)
 80024d8:	881a      	ldrh	r2, [r3, #0]
 80024da:	4bad      	ldr	r3, [pc, #692]	@ (8002790 <control_update+0x7b0>)
 80024dc:	639a      	str	r2, [r3, #56]	@ 0x38

	absref = fabs(cmd_ref[T1C3]); // duty cycle must be positive
 80024de:	4baa      	ldr	r3, [pc, #680]	@ (8002788 <control_update+0x7a8>)
 80024e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80024ec:	eeb0 7bc7 	vabs.f64	d7, d7
 80024f0:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80024f4:	ed9f 7ba0 	vldr	d7, [pc, #640]	@ 8002778 <control_update+0x798>
 80024f8:	eeb0 1b47 	vmov.f64	d1, d7
 80024fc:	ed97 0b02 	vldr	d0, [r7, #8]
 8002500:	f000 fad2 	bl	8002aa8 <calc_dutycycle>
 8002504:	4603      	mov	r3, r0
 8002506:	461a      	mov	r2, r3
 8002508:	4ba0      	ldr	r3, [pc, #640]	@ (800278c <control_update+0x7ac>)
 800250a:	801a      	strh	r2, [r3, #0]
		TIM1->CCR3 = dutycycle;
 800250c:	4b9f      	ldr	r3, [pc, #636]	@ (800278c <control_update+0x7ac>)
 800250e:	881a      	ldrh	r2, [r3, #0]
 8002510:	4b9f      	ldr	r3, [pc, #636]	@ (8002790 <control_update+0x7b0>)
 8002512:	63da      	str	r2, [r3, #60]	@ 0x3c

	absref = fabs(cmd_ref[T1C4]); // duty cycle must be positive
 8002514:	4b9c      	ldr	r3, [pc, #624]	@ (8002788 <control_update+0x7a8>)
 8002516:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800251a:	ee07 3a90 	vmov	s15, r3
 800251e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002522:	eeb0 7bc7 	vabs.f64	d7, d7
 8002526:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 800252a:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 8002778 <control_update+0x798>
 800252e:	eeb0 1b47 	vmov.f64	d1, d7
 8002532:	ed97 0b02 	vldr	d0, [r7, #8]
 8002536:	f000 fab7 	bl	8002aa8 <calc_dutycycle>
 800253a:	4603      	mov	r3, r0
 800253c:	461a      	mov	r2, r3
 800253e:	4b93      	ldr	r3, [pc, #588]	@ (800278c <control_update+0x7ac>)
 8002540:	801a      	strh	r2, [r3, #0]
		TIM1->CCR4 = dutycycle;
 8002542:	4b92      	ldr	r3, [pc, #584]	@ (800278c <control_update+0x7ac>)
 8002544:	881a      	ldrh	r2, [r3, #0]
 8002546:	4b92      	ldr	r3, [pc, #584]	@ (8002790 <control_update+0x7b0>)
 8002548:	641a      	str	r2, [r3, #64]	@ 0x40
	//End Timer 1


	//Timer 2
	absref = fabs(cmd_ref[T2C1]); // duty cycle must be positive
 800254a:	4b8f      	ldr	r3, [pc, #572]	@ (8002788 <control_update+0x7a8>)
 800254c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002550:	ee07 3a90 	vmov	s15, r3
 8002554:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002558:	eeb0 7bc7 	vabs.f64	d7, d7
 800255c:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002560:	ed9f 7b85 	vldr	d7, [pc, #532]	@ 8002778 <control_update+0x798>
 8002564:	eeb0 1b47 	vmov.f64	d1, d7
 8002568:	ed97 0b02 	vldr	d0, [r7, #8]
 800256c:	f000 fa9c 	bl	8002aa8 <calc_dutycycle>
 8002570:	4603      	mov	r3, r0
 8002572:	461a      	mov	r2, r3
 8002574:	4b85      	ldr	r3, [pc, #532]	@ (800278c <control_update+0x7ac>)
 8002576:	801a      	strh	r2, [r3, #0]
		TIM2->CCR1 = dutycycle;
 8002578:	4b84      	ldr	r3, [pc, #528]	@ (800278c <control_update+0x7ac>)
 800257a:	881a      	ldrh	r2, [r3, #0]
 800257c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002580:	635a      	str	r2, [r3, #52]	@ 0x34
	//End Timer 2


	//Timer 4
	absref = fabs(cmd_ref[T4C1]); // duty cycle must be positive
 8002582:	4b81      	ldr	r3, [pc, #516]	@ (8002788 <control_update+0x7a8>)
 8002584:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002588:	ee07 3a90 	vmov	s15, r3
 800258c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002590:	eeb0 7bc7 	vabs.f64	d7, d7
 8002594:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002598:	ed9f 7b77 	vldr	d7, [pc, #476]	@ 8002778 <control_update+0x798>
 800259c:	eeb0 1b47 	vmov.f64	d1, d7
 80025a0:	ed97 0b02 	vldr	d0, [r7, #8]
 80025a4:	f000 fa80 	bl	8002aa8 <calc_dutycycle>
 80025a8:	4603      	mov	r3, r0
 80025aa:	461a      	mov	r2, r3
 80025ac:	4b77      	ldr	r3, [pc, #476]	@ (800278c <control_update+0x7ac>)
 80025ae:	801a      	strh	r2, [r3, #0]
		TIM4->CCR1 = dutycycle;
 80025b0:	4b76      	ldr	r3, [pc, #472]	@ (800278c <control_update+0x7ac>)
 80025b2:	881a      	ldrh	r2, [r3, #0]
 80025b4:	4b77      	ldr	r3, [pc, #476]	@ (8002794 <control_update+0x7b4>)
 80025b6:	635a      	str	r2, [r3, #52]	@ 0x34

	absref = fabs(cmd_ref[T4C2]); // duty cycle must be positive
 80025b8:	4b73      	ldr	r3, [pc, #460]	@ (8002788 <control_update+0x7a8>)
 80025ba:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80025be:	ee07 3a90 	vmov	s15, r3
 80025c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80025c6:	eeb0 7bc7 	vabs.f64	d7, d7
 80025ca:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80025ce:	ed9f 7b6a 	vldr	d7, [pc, #424]	@ 8002778 <control_update+0x798>
 80025d2:	eeb0 1b47 	vmov.f64	d1, d7
 80025d6:	ed97 0b02 	vldr	d0, [r7, #8]
 80025da:	f000 fa65 	bl	8002aa8 <calc_dutycycle>
 80025de:	4603      	mov	r3, r0
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b6a      	ldr	r3, [pc, #424]	@ (800278c <control_update+0x7ac>)
 80025e4:	801a      	strh	r2, [r3, #0]
		TIM4->CCR2 = dutycycle;
 80025e6:	4b69      	ldr	r3, [pc, #420]	@ (800278c <control_update+0x7ac>)
 80025e8:	881a      	ldrh	r2, [r3, #0]
 80025ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002794 <control_update+0x7b4>)
 80025ec:	639a      	str	r2, [r3, #56]	@ 0x38

	absref = fabs(cmd_ref[T4C3]); // duty cycle must be positive
 80025ee:	4b66      	ldr	r3, [pc, #408]	@ (8002788 <control_update+0x7a8>)
 80025f0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80025f4:	ee07 3a90 	vmov	s15, r3
 80025f8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80025fc:	eeb0 7bc7 	vabs.f64	d7, d7
 8002600:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002604:	ed9f 7b5c 	vldr	d7, [pc, #368]	@ 8002778 <control_update+0x798>
 8002608:	eeb0 1b47 	vmov.f64	d1, d7
 800260c:	ed97 0b02 	vldr	d0, [r7, #8]
 8002610:	f000 fa4a 	bl	8002aa8 <calc_dutycycle>
 8002614:	4603      	mov	r3, r0
 8002616:	461a      	mov	r2, r3
 8002618:	4b5c      	ldr	r3, [pc, #368]	@ (800278c <control_update+0x7ac>)
 800261a:	801a      	strh	r2, [r3, #0]
		TIM4->CCR3 = dutycycle;
 800261c:	4b5b      	ldr	r3, [pc, #364]	@ (800278c <control_update+0x7ac>)
 800261e:	881a      	ldrh	r2, [r3, #0]
 8002620:	4b5c      	ldr	r3, [pc, #368]	@ (8002794 <control_update+0x7b4>)
 8002622:	63da      	str	r2, [r3, #60]	@ 0x3c

	absref = fabs(cmd_ref[T4C4]); // duty cycle must be positive
 8002624:	4b58      	ldr	r3, [pc, #352]	@ (8002788 <control_update+0x7a8>)
 8002626:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800262a:	ee07 3a90 	vmov	s15, r3
 800262e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002632:	eeb0 7bc7 	vabs.f64	d7, d7
 8002636:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 800263a:	ed9f 7b4f 	vldr	d7, [pc, #316]	@ 8002778 <control_update+0x798>
 800263e:	eeb0 1b47 	vmov.f64	d1, d7
 8002642:	ed97 0b02 	vldr	d0, [r7, #8]
 8002646:	f000 fa2f 	bl	8002aa8 <calc_dutycycle>
 800264a:	4603      	mov	r3, r0
 800264c:	461a      	mov	r2, r3
 800264e:	4b4f      	ldr	r3, [pc, #316]	@ (800278c <control_update+0x7ac>)
 8002650:	801a      	strh	r2, [r3, #0]
		TIM4->CCR4 = dutycycle;
 8002652:	4b4e      	ldr	r3, [pc, #312]	@ (800278c <control_update+0x7ac>)
 8002654:	881a      	ldrh	r2, [r3, #0]
 8002656:	4b4f      	ldr	r3, [pc, #316]	@ (8002794 <control_update+0x7b4>)
 8002658:	641a      	str	r2, [r3, #64]	@ 0x40
	//End Timer 4


	//Timer 5
	absref = fabs(cmd_ref[T5C2]); // duty cycle must be positive
 800265a:	4b4b      	ldr	r3, [pc, #300]	@ (8002788 <control_update+0x7a8>)
 800265c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002660:	ee07 3a90 	vmov	s15, r3
 8002664:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002668:	eeb0 7bc7 	vabs.f64	d7, d7
 800266c:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002670:	ed9f 7b41 	vldr	d7, [pc, #260]	@ 8002778 <control_update+0x798>
 8002674:	eeb0 1b47 	vmov.f64	d1, d7
 8002678:	ed97 0b02 	vldr	d0, [r7, #8]
 800267c:	f000 fa14 	bl	8002aa8 <calc_dutycycle>
 8002680:	4603      	mov	r3, r0
 8002682:	461a      	mov	r2, r3
 8002684:	4b41      	ldr	r3, [pc, #260]	@ (800278c <control_update+0x7ac>)
 8002686:	801a      	strh	r2, [r3, #0]
		TIM5->CCR2 = dutycycle;
 8002688:	4b40      	ldr	r3, [pc, #256]	@ (800278c <control_update+0x7ac>)
 800268a:	881a      	ldrh	r2, [r3, #0]
 800268c:	4b42      	ldr	r3, [pc, #264]	@ (8002798 <control_update+0x7b8>)
 800268e:	639a      	str	r2, [r3, #56]	@ 0x38

	absref = fabs(cmd_ref[T5C3]); // duty cycle must be positive
 8002690:	4b3d      	ldr	r3, [pc, #244]	@ (8002788 <control_update+0x7a8>)
 8002692:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002696:	ee07 3a90 	vmov	s15, r3
 800269a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800269e:	eeb0 7bc7 	vabs.f64	d7, d7
 80026a2:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80026a6:	ed9f 7b34 	vldr	d7, [pc, #208]	@ 8002778 <control_update+0x798>
 80026aa:	eeb0 1b47 	vmov.f64	d1, d7
 80026ae:	ed97 0b02 	vldr	d0, [r7, #8]
 80026b2:	f000 f9f9 	bl	8002aa8 <calc_dutycycle>
 80026b6:	4603      	mov	r3, r0
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b34      	ldr	r3, [pc, #208]	@ (800278c <control_update+0x7ac>)
 80026bc:	801a      	strh	r2, [r3, #0]
		TIM5->CCR3 = dutycycle;
 80026be:	4b33      	ldr	r3, [pc, #204]	@ (800278c <control_update+0x7ac>)
 80026c0:	881a      	ldrh	r2, [r3, #0]
 80026c2:	4b35      	ldr	r3, [pc, #212]	@ (8002798 <control_update+0x7b8>)
 80026c4:	63da      	str	r2, [r3, #60]	@ 0x3c
	//End Timer 5


	//Timer 8
	absref = fabs(cmd_ref[T8C4]); // duty cycle must be positive
 80026c6:	4b30      	ldr	r3, [pc, #192]	@ (8002788 <control_update+0x7a8>)
 80026c8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80026cc:	ee07 3a90 	vmov	s15, r3
 80026d0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80026d4:	eeb0 7bc7 	vabs.f64	d7, d7
 80026d8:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80026dc:	ed9f 7b26 	vldr	d7, [pc, #152]	@ 8002778 <control_update+0x798>
 80026e0:	eeb0 1b47 	vmov.f64	d1, d7
 80026e4:	ed97 0b02 	vldr	d0, [r7, #8]
 80026e8:	f000 f9de 	bl	8002aa8 <calc_dutycycle>
 80026ec:	4603      	mov	r3, r0
 80026ee:	461a      	mov	r2, r3
 80026f0:	4b26      	ldr	r3, [pc, #152]	@ (800278c <control_update+0x7ac>)
 80026f2:	801a      	strh	r2, [r3, #0]
		TIM8->CCR4 = dutycycle;
 80026f4:	4b25      	ldr	r3, [pc, #148]	@ (800278c <control_update+0x7ac>)
 80026f6:	881a      	ldrh	r2, [r3, #0]
 80026f8:	4b28      	ldr	r3, [pc, #160]	@ (800279c <control_update+0x7bc>)
 80026fa:	641a      	str	r2, [r3, #64]	@ 0x40
	//End Timer 8


	//Timer 12
	absref = fabs(cmd_ref[T12C2]); // duty cycle must be positive
 80026fc:	4b22      	ldr	r3, [pc, #136]	@ (8002788 <control_update+0x7a8>)
 80026fe:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002702:	ee07 3a90 	vmov	s15, r3
 8002706:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800270a:	eeb0 7bc7 	vabs.f64	d7, d7
 800270e:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002712:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8002778 <control_update+0x798>
 8002716:	eeb0 1b47 	vmov.f64	d1, d7
 800271a:	ed97 0b02 	vldr	d0, [r7, #8]
 800271e:	f000 f9c3 	bl	8002aa8 <calc_dutycycle>
 8002722:	4603      	mov	r3, r0
 8002724:	461a      	mov	r2, r3
 8002726:	4b19      	ldr	r3, [pc, #100]	@ (800278c <control_update+0x7ac>)
 8002728:	801a      	strh	r2, [r3, #0]
		TIM12->CCR2 = dutycycle;
 800272a:	4b18      	ldr	r3, [pc, #96]	@ (800278c <control_update+0x7ac>)
 800272c:	881a      	ldrh	r2, [r3, #0]
 800272e:	4b1c      	ldr	r3, [pc, #112]	@ (80027a0 <control_update+0x7c0>)
 8002730:	639a      	str	r2, [r3, #56]	@ 0x38
	//End Timer 12


	//Timer 13
	absref = fabs(cmd_ref[T13C1]); // duty cycle must be positive
 8002732:	4b15      	ldr	r3, [pc, #84]	@ (8002788 <control_update+0x7a8>)
 8002734:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002738:	ee07 3a90 	vmov	s15, r3
 800273c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002740:	eeb0 7bc7 	vabs.f64	d7, d7
 8002744:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002748:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8002778 <control_update+0x798>
 800274c:	eeb0 1b47 	vmov.f64	d1, d7
 8002750:	ed97 0b02 	vldr	d0, [r7, #8]
 8002754:	f000 f9a8 	bl	8002aa8 <calc_dutycycle>
 8002758:	4603      	mov	r3, r0
 800275a:	461a      	mov	r2, r3
 800275c:	4b0b      	ldr	r3, [pc, #44]	@ (800278c <control_update+0x7ac>)
 800275e:	801a      	strh	r2, [r3, #0]
		TIM13->CCR1 = dutycycle;
 8002760:	4b0a      	ldr	r3, [pc, #40]	@ (800278c <control_update+0x7ac>)
 8002762:	881a      	ldrh	r2, [r3, #0]
 8002764:	4b0f      	ldr	r3, [pc, #60]	@ (80027a4 <control_update+0x7c4>)
 8002766:	635a      	str	r2, [r3, #52]	@ 0x34
	//End Timer 13


	//Timer 14
	absref = fabs(cmd_ref[T14C1]); // duty cycle must be positive
 8002768:	4b07      	ldr	r3, [pc, #28]	@ (8002788 <control_update+0x7a8>)
 800276a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800276e:	ee07 3a90 	vmov	s15, r3
 8002772:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002776:	e017      	b.n	80027a8 <control_update+0x7c8>
 8002778:	cccccccd 	.word	0xcccccccd
 800277c:	3ffccccc 	.word	0x3ffccccc
 8002780:	2400000c 	.word	0x2400000c
 8002784:	58020c00 	.word	0x58020c00
 8002788:	24003e04 	.word	0x24003e04
 800278c:	24003e50 	.word	0x24003e50
 8002790:	40010000 	.word	0x40010000
 8002794:	40000800 	.word	0x40000800
 8002798:	40000c00 	.word	0x40000c00
 800279c:	40010400 	.word	0x40010400
 80027a0:	40001800 	.word	0x40001800
 80027a4:	40001c00 	.word	0x40001c00
 80027a8:	eeb0 7bc7 	vabs.f64	d7, d7
 80027ac:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80027b0:	ed9f 7bb3 	vldr	d7, [pc, #716]	@ 8002a80 <control_update+0xaa0>
 80027b4:	eeb0 1b47 	vmov.f64	d1, d7
 80027b8:	ed97 0b02 	vldr	d0, [r7, #8]
 80027bc:	f000 f974 	bl	8002aa8 <calc_dutycycle>
 80027c0:	4603      	mov	r3, r0
 80027c2:	461a      	mov	r2, r3
 80027c4:	4bb0      	ldr	r3, [pc, #704]	@ (8002a88 <control_update+0xaa8>)
 80027c6:	801a      	strh	r2, [r3, #0]
		TIM14->CCR1 = dutycycle;
 80027c8:	4baf      	ldr	r3, [pc, #700]	@ (8002a88 <control_update+0xaa8>)
 80027ca:	881a      	ldrh	r2, [r3, #0]
 80027cc:	4baf      	ldr	r3, [pc, #700]	@ (8002a8c <control_update+0xaac>)
 80027ce:	635a      	str	r2, [r3, #52]	@ 0x34
	//End Timer 14


	//Timer 15
	absref = fabs(cmd_ref[T15C1]); // duty cycle must be positive
 80027d0:	4baf      	ldr	r3, [pc, #700]	@ (8002a90 <control_update+0xab0>)
 80027d2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80027d6:	ee07 3a90 	vmov	s15, r3
 80027da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80027de:	eeb0 7bc7 	vabs.f64	d7, d7
 80027e2:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80027e6:	ed9f 7ba6 	vldr	d7, [pc, #664]	@ 8002a80 <control_update+0xaa0>
 80027ea:	eeb0 1b47 	vmov.f64	d1, d7
 80027ee:	ed97 0b02 	vldr	d0, [r7, #8]
 80027f2:	f000 f959 	bl	8002aa8 <calc_dutycycle>
 80027f6:	4603      	mov	r3, r0
 80027f8:	461a      	mov	r2, r3
 80027fa:	4ba3      	ldr	r3, [pc, #652]	@ (8002a88 <control_update+0xaa8>)
 80027fc:	801a      	strh	r2, [r3, #0]
		TIM15->CCR1 = dutycycle;
 80027fe:	4ba2      	ldr	r3, [pc, #648]	@ (8002a88 <control_update+0xaa8>)
 8002800:	881a      	ldrh	r2, [r3, #0]
 8002802:	4ba4      	ldr	r3, [pc, #656]	@ (8002a94 <control_update+0xab4>)
 8002804:	635a      	str	r2, [r3, #52]	@ 0x34

	absref = fabs(cmd_ref[T15C2]); // duty cycle must be positive
 8002806:	4ba2      	ldr	r3, [pc, #648]	@ (8002a90 <control_update+0xab0>)
 8002808:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800280c:	ee07 3a90 	vmov	s15, r3
 8002810:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002814:	eeb0 7bc7 	vabs.f64	d7, d7
 8002818:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 800281c:	ed9f 7b98 	vldr	d7, [pc, #608]	@ 8002a80 <control_update+0xaa0>
 8002820:	eeb0 1b47 	vmov.f64	d1, d7
 8002824:	ed97 0b02 	vldr	d0, [r7, #8]
 8002828:	f000 f93e 	bl	8002aa8 <calc_dutycycle>
 800282c:	4603      	mov	r3, r0
 800282e:	461a      	mov	r2, r3
 8002830:	4b95      	ldr	r3, [pc, #596]	@ (8002a88 <control_update+0xaa8>)
 8002832:	801a      	strh	r2, [r3, #0]
		TIM15->CCR2 = dutycycle;
 8002834:	4b94      	ldr	r3, [pc, #592]	@ (8002a88 <control_update+0xaa8>)
 8002836:	881a      	ldrh	r2, [r3, #0]
 8002838:	4b96      	ldr	r3, [pc, #600]	@ (8002a94 <control_update+0xab4>)
 800283a:	639a      	str	r2, [r3, #56]	@ 0x38
	//End Timer 15


	//Timer 16
	absref = fabs(cmd_ref[T16C1]); // duty cycle must be positive
 800283c:	4b94      	ldr	r3, [pc, #592]	@ (8002a90 <control_update+0xab0>)
 800283e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8002842:	ee07 3a90 	vmov	s15, r3
 8002846:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800284a:	eeb0 7bc7 	vabs.f64	d7, d7
 800284e:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002852:	ed9f 7b8b 	vldr	d7, [pc, #556]	@ 8002a80 <control_update+0xaa0>
 8002856:	eeb0 1b47 	vmov.f64	d1, d7
 800285a:	ed97 0b02 	vldr	d0, [r7, #8]
 800285e:	f000 f923 	bl	8002aa8 <calc_dutycycle>
 8002862:	4603      	mov	r3, r0
 8002864:	461a      	mov	r2, r3
 8002866:	4b88      	ldr	r3, [pc, #544]	@ (8002a88 <control_update+0xaa8>)
 8002868:	801a      	strh	r2, [r3, #0]
		TIM16->CCR1 = dutycycle;
 800286a:	4b87      	ldr	r3, [pc, #540]	@ (8002a88 <control_update+0xaa8>)
 800286c:	881a      	ldrh	r2, [r3, #0]
 800286e:	4b8a      	ldr	r3, [pc, #552]	@ (8002a98 <control_update+0xab8>)
 8002870:	635a      	str	r2, [r3, #52]	@ 0x34
	//End Timer 16


	//HRTIM CODE GOES HERE ********
	//HRTIM CHA
	absref = fabs(cmd_ref[HRA1]); // duty cycle must be positive
 8002872:	4b87      	ldr	r3, [pc, #540]	@ (8002a90 <control_update+0xab0>)
 8002874:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8002878:	ee07 3a90 	vmov	s15, r3
 800287c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002880:	eeb0 7bc7 	vabs.f64	d7, d7
 8002884:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002888:	ed9f 7b7d 	vldr	d7, [pc, #500]	@ 8002a80 <control_update+0xaa0>
 800288c:	eeb0 1b47 	vmov.f64	d1, d7
 8002890:	ed97 0b02 	vldr	d0, [r7, #8]
 8002894:	f000 f908 	bl	8002aa8 <calc_dutycycle>
 8002898:	4603      	mov	r3, r0
 800289a:	461a      	mov	r2, r3
 800289c:	4b7a      	ldr	r3, [pc, #488]	@ (8002a88 <control_update+0xaa8>)
 800289e:	801a      	strh	r2, [r3, #0]
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP1xR = dutycycle;
 80028a0:	4b79      	ldr	r3, [pc, #484]	@ (8002a88 <control_update+0xaa8>)
 80028a2:	881a      	ldrh	r2, [r3, #0]
 80028a4:	4b7d      	ldr	r3, [pc, #500]	@ (8002a9c <control_update+0xabc>)
 80028a6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

	absref = fabs(cmd_ref[HRA2]); // duty cycle must be positive
 80028aa:	4b79      	ldr	r3, [pc, #484]	@ (8002a90 <control_update+0xab0>)
 80028ac:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 80028b0:	ee07 3a90 	vmov	s15, r3
 80028b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80028b8:	eeb0 7bc7 	vabs.f64	d7, d7
 80028bc:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80028c0:	ed9f 7b6f 	vldr	d7, [pc, #444]	@ 8002a80 <control_update+0xaa0>
 80028c4:	eeb0 1b47 	vmov.f64	d1, d7
 80028c8:	ed97 0b02 	vldr	d0, [r7, #8]
 80028cc:	f000 f8ec 	bl	8002aa8 <calc_dutycycle>
 80028d0:	4603      	mov	r3, r0
 80028d2:	461a      	mov	r2, r3
 80028d4:	4b6c      	ldr	r3, [pc, #432]	@ (8002a88 <control_update+0xaa8>)
 80028d6:	801a      	strh	r2, [r3, #0]
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP2xR = dutycycle;
 80028d8:	4b6b      	ldr	r3, [pc, #428]	@ (8002a88 <control_update+0xaa8>)
 80028da:	881a      	ldrh	r2, [r3, #0]
 80028dc:	4b6f      	ldr	r3, [pc, #444]	@ (8002a9c <control_update+0xabc>)
 80028de:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	//End HRTIM CHA

	//HRTIM CHB
	absref = fabs(cmd_ref[HRB1]); // duty cycle must be positive
 80028e2:	4b6b      	ldr	r3, [pc, #428]	@ (8002a90 <control_update+0xab0>)
 80028e4:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 80028e8:	ee07 3a90 	vmov	s15, r3
 80028ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80028f0:	eeb0 7bc7 	vabs.f64	d7, d7
 80028f4:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80028f8:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8002a80 <control_update+0xaa0>
 80028fc:	eeb0 1b47 	vmov.f64	d1, d7
 8002900:	ed97 0b02 	vldr	d0, [r7, #8]
 8002904:	f000 f8d0 	bl	8002aa8 <calc_dutycycle>
 8002908:	4603      	mov	r3, r0
 800290a:	461a      	mov	r2, r3
 800290c:	4b5e      	ldr	r3, [pc, #376]	@ (8002a88 <control_update+0xaa8>)
 800290e:	801a      	strh	r2, [r3, #0]
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP1xR = dutycycle;
 8002910:	4b5d      	ldr	r3, [pc, #372]	@ (8002a88 <control_update+0xaa8>)
 8002912:	881a      	ldrh	r2, [r3, #0]
 8002914:	4b61      	ldr	r3, [pc, #388]	@ (8002a9c <control_update+0xabc>)
 8002916:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

	absref = fabs(cmd_ref[HRB2]); // duty cycle must be positive
 800291a:	4b5d      	ldr	r3, [pc, #372]	@ (8002a90 <control_update+0xab0>)
 800291c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8002920:	ee07 3a90 	vmov	s15, r3
 8002924:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002928:	eeb0 7bc7 	vabs.f64	d7, d7
 800292c:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002930:	ed9f 7b53 	vldr	d7, [pc, #332]	@ 8002a80 <control_update+0xaa0>
 8002934:	eeb0 1b47 	vmov.f64	d1, d7
 8002938:	ed97 0b02 	vldr	d0, [r7, #8]
 800293c:	f000 f8b4 	bl	8002aa8 <calc_dutycycle>
 8002940:	4603      	mov	r3, r0
 8002942:	461a      	mov	r2, r3
 8002944:	4b50      	ldr	r3, [pc, #320]	@ (8002a88 <control_update+0xaa8>)
 8002946:	801a      	strh	r2, [r3, #0]
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP2xR = dutycycle;
 8002948:	4b4f      	ldr	r3, [pc, #316]	@ (8002a88 <control_update+0xaa8>)
 800294a:	881a      	ldrh	r2, [r3, #0]
 800294c:	4b53      	ldr	r3, [pc, #332]	@ (8002a9c <control_update+0xabc>)
 800294e:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
	//End HRTIM CHB

	//HRTIM CHC
	absref = fabs(cmd_ref[HRC1]); // duty cycle must be positive
 8002952:	4b4f      	ldr	r3, [pc, #316]	@ (8002a90 <control_update+0xab0>)
 8002954:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8002958:	ee07 3a90 	vmov	s15, r3
 800295c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002960:	eeb0 7bc7 	vabs.f64	d7, d7
 8002964:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002968:	ed9f 7b45 	vldr	d7, [pc, #276]	@ 8002a80 <control_update+0xaa0>
 800296c:	eeb0 1b47 	vmov.f64	d1, d7
 8002970:	ed97 0b02 	vldr	d0, [r7, #8]
 8002974:	f000 f898 	bl	8002aa8 <calc_dutycycle>
 8002978:	4603      	mov	r3, r0
 800297a:	461a      	mov	r2, r3
 800297c:	4b42      	ldr	r3, [pc, #264]	@ (8002a88 <control_update+0xaa8>)
 800297e:	801a      	strh	r2, [r3, #0]
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP1xR = dutycycle;
 8002980:	4b41      	ldr	r3, [pc, #260]	@ (8002a88 <control_update+0xaa8>)
 8002982:	881a      	ldrh	r2, [r3, #0]
 8002984:	4b45      	ldr	r3, [pc, #276]	@ (8002a9c <control_update+0xabc>)
 8002986:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c

	absref = fabs(cmd_ref[HRC2]); // duty cycle must be positive
 800298a:	4b41      	ldr	r3, [pc, #260]	@ (8002a90 <control_update+0xab0>)
 800298c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8002990:	ee07 3a90 	vmov	s15, r3
 8002994:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002998:	eeb0 7bc7 	vabs.f64	d7, d7
 800299c:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80029a0:	ed9f 7b37 	vldr	d7, [pc, #220]	@ 8002a80 <control_update+0xaa0>
 80029a4:	eeb0 1b47 	vmov.f64	d1, d7
 80029a8:	ed97 0b02 	vldr	d0, [r7, #8]
 80029ac:	f000 f87c 	bl	8002aa8 <calc_dutycycle>
 80029b0:	4603      	mov	r3, r0
 80029b2:	461a      	mov	r2, r3
 80029b4:	4b34      	ldr	r3, [pc, #208]	@ (8002a88 <control_update+0xaa8>)
 80029b6:	801a      	strh	r2, [r3, #0]
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP2xR = dutycycle;
 80029b8:	4b33      	ldr	r3, [pc, #204]	@ (8002a88 <control_update+0xaa8>)
 80029ba:	881a      	ldrh	r2, [r3, #0]
 80029bc:	4b37      	ldr	r3, [pc, #220]	@ (8002a9c <control_update+0xabc>)
 80029be:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
	//End HRTIM CHC

	//HRTIM CHD
	absref = fabs(cmd_ref[HRD1]); // duty cycle must be positive
 80029c2:	4b33      	ldr	r3, [pc, #204]	@ (8002a90 <control_update+0xab0>)
 80029c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80029c8:	ee07 3a90 	vmov	s15, r3
 80029cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80029d0:	eeb0 7bc7 	vabs.f64	d7, d7
 80029d4:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80029d8:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 8002a80 <control_update+0xaa0>
 80029dc:	eeb0 1b47 	vmov.f64	d1, d7
 80029e0:	ed97 0b02 	vldr	d0, [r7, #8]
 80029e4:	f000 f860 	bl	8002aa8 <calc_dutycycle>
 80029e8:	4603      	mov	r3, r0
 80029ea:	461a      	mov	r2, r3
 80029ec:	4b26      	ldr	r3, [pc, #152]	@ (8002a88 <control_update+0xaa8>)
 80029ee:	801a      	strh	r2, [r3, #0]
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = dutycycle;
 80029f0:	4b25      	ldr	r3, [pc, #148]	@ (8002a88 <control_update+0xaa8>)
 80029f2:	881a      	ldrh	r2, [r3, #0]
 80029f4:	4b29      	ldr	r3, [pc, #164]	@ (8002a9c <control_update+0xabc>)
 80029f6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

	absref = fabs(cmd_ref[HRD2]); // duty cycle must be positive
 80029fa:	4b25      	ldr	r3, [pc, #148]	@ (8002a90 <control_update+0xab0>)
 80029fc:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8002a00:	ee07 3a90 	vmov	s15, r3
 8002a04:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a08:	eeb0 7bc7 	vabs.f64	d7, d7
 8002a0c:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002a10:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8002a80 <control_update+0xaa0>
 8002a14:	eeb0 1b47 	vmov.f64	d1, d7
 8002a18:	ed97 0b02 	vldr	d0, [r7, #8]
 8002a1c:	f000 f844 	bl	8002aa8 <calc_dutycycle>
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	4b18      	ldr	r3, [pc, #96]	@ (8002a88 <control_update+0xaa8>)
 8002a26:	801a      	strh	r2, [r3, #0]
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP2xR = dutycycle;
 8002a28:	4b17      	ldr	r3, [pc, #92]	@ (8002a88 <control_update+0xaa8>)
 8002a2a:	881a      	ldrh	r2, [r3, #0]
 8002a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a9c <control_update+0xabc>)
 8002a2e:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
	//End HRTIM CHD
	//END HRTIM CODE HERE


	//LPTIM1
	absref = fabs(cmd_ref[LPTIM]); // duty cycle must be positive
 8002a32:	4b17      	ldr	r3, [pc, #92]	@ (8002a90 <control_update+0xab0>)
 8002a34:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8002a38:	ee07 3a90 	vmov	s15, r3
 8002a3c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a40:	eeb0 7bc7 	vabs.f64	d7, d7
 8002a44:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002a48:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8002a80 <control_update+0xaa0>
 8002a4c:	eeb0 1b47 	vmov.f64	d1, d7
 8002a50:	ed97 0b02 	vldr	d0, [r7, #8]
 8002a54:	f000 f828 	bl	8002aa8 <calc_dutycycle>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a88 <control_update+0xaa8>)
 8002a5e:	801a      	strh	r2, [r3, #0]
		LPTIM1->CMP = dutycycle/2;
 8002a60:	4b09      	ldr	r3, [pc, #36]	@ (8002a88 <control_update+0xaa8>)
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	085b      	lsrs	r3, r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa0 <control_update+0xac0>)
 8002a6a:	615a      	str	r2, [r3, #20]
	//End LPTIM1

	// reset timer flag
	ctrl_tmr_expired = FALSE;
 8002a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa4 <control_update+0xac4>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
}
 8002a72:	bf00      	nop
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	f3af 8000 	nop.w
 8002a80:	cccccccd 	.word	0xcccccccd
 8002a84:	3ffccccc 	.word	0x3ffccccc
 8002a88:	24003e50 	.word	0x24003e50
 8002a8c:	40002000 	.word	0x40002000
 8002a90:	24003e04 	.word	0x24003e04
 8002a94:	40014000 	.word	0x40014000
 8002a98:	40014400 	.word	0x40014400
 8002a9c:	40017400 	.word	0x40017400
 8002aa0:	40002400 	.word	0x40002400
 8002aa4:	240006a4 	.word	0x240006a4

08002aa8 <calc_dutycycle>:


static uint16_t calc_dutycycle(double cmd, double vss)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	ed87 0b02 	vstr	d0, [r7, #8]
 8002ab2:	ed87 1b00 	vstr	d1, [r7]
	//	@ param cmd command voltage
	//	@ param vss supply voltage
	//	@ return dutycycle

	// duty cycle variable
	uint16_t dc={0};
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	82fb      	strh	r3, [r7, #22]

	dc = (uint16_t)(cmd/vss * (double)PERIOD);
 8002aba:	ed97 5b02 	vldr	d5, [r7, #8]
 8002abe:	ed97 6b00 	vldr	d6, [r7]
 8002ac2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002ac6:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8002af8 <calc_dutycycle+0x50>
 8002aca:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002ace:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002ad2:	ee17 3a90 	vmov	r3, s15
 8002ad6:	82fb      	strh	r3, [r7, #22]
	// keep the dutycycle within the period of the PWM signal
	if(dc>PERIOD) dc = PERIOD;
 8002ad8:	8afb      	ldrh	r3, [r7, #22]
 8002ada:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d902      	bls.n	8002ae8 <calc_dutycycle+0x40>
 8002ae2:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 8002ae6:	82fb      	strh	r3, [r7, #22]

	return dc;
 8002ae8:	8afb      	ldrh	r3, [r7, #22]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	371c      	adds	r7, #28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	00000000 	.word	0x00000000
 8002afc:	40d76fc0 	.word	0x40d76fc0

08002b00 <gen_sine>:

static void gen_sine(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
	int i = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
	double scale = TWO_PI/SIN_PERIOD;
 8002b0a:	a316      	add	r3, pc, #88	@ (adr r3, 8002b64 <gen_sine+0x64>)
 8002b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b10:	e9c7 2300 	strd	r2, r3, [r7]
	for(i=0; i<SIN_PERIOD; i++ )
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	e017      	b.n	8002b4a <gen_sine+0x4a>
	{
		sine_vals[i] = sin(i*scale);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	ee07 3a90 	vmov	s15, r3
 8002b20:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002b24:	ed97 7b00 	vldr	d7, [r7]
 8002b28:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002b2c:	eeb0 0b47 	vmov.f64	d0, d7
 8002b30:	f00c fefa 	bl	800f928 <sin>
 8002b34:	eeb0 7b40 	vmov.f64	d7, d0
 8002b38:	4a09      	ldr	r2, [pc, #36]	@ (8002b60 <gen_sine+0x60>)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4413      	add	r3, r2
 8002b40:	ed83 7b00 	vstr	d7, [r3]
	for(i=0; i<SIN_PERIOD; i++ )
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	3301      	adds	r3, #1
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b50:	dbe3      	blt.n	8002b1a <gen_sine+0x1a>
	}
}
 8002b52:	bf00      	nop
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	f3af 8000 	nop.w
 8002b60:	240006b0 	.word	0x240006b0
 8002b64:	b68b71c3 	.word	0xb68b71c3
 8002b68:	3f79bc65 	.word	0x3f79bc65

08002b6c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002b72:	463b      	mov	r3, r7
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002b7e:	f001 f8a5 	bl	8003ccc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002b82:	2301      	movs	r3, #1
 8002b84:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002b8e:	231f      	movs	r3, #31
 8002b90:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002b92:	2387      	movs	r3, #135	@ 0x87
 8002b94:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002baa:	2300      	movs	r3, #0
 8002bac:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002bae:	463b      	mov	r3, r7
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f001 f8c3 	bl	8003d3c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002bb6:	2004      	movs	r0, #4
 8002bb8:	f001 f8a0 	bl	8003cfc <HAL_MPU_Enable>

}
 8002bbc:	bf00      	nop
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bc8:	b672      	cpsid	i
}
 8002bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bcc:	bf00      	nop
 8002bce:	e7fd      	b.n	8002bcc <Error_Handler+0x8>

08002bd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c00 <HAL_MspInit+0x30>)
 8002bd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002bdc:	4a08      	ldr	r2, [pc, #32]	@ (8002c00 <HAL_MspInit+0x30>)
 8002bde:	f043 0302 	orr.w	r3, r3, #2
 8002be2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002be6:	4b06      	ldr	r3, [pc, #24]	@ (8002c00 <HAL_MspInit+0x30>)
 8002be8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	607b      	str	r3, [r7, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	58024400 	.word	0x58024400

08002c04 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b0b4      	sub	sp, #208	@ 0xd0
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c0c:	f107 0310 	add.w	r3, r7, #16
 8002c10:	22c0      	movs	r2, #192	@ 0xc0
 8002c12:	2100      	movs	r1, #0
 8002c14:	4618      	mov	r0, r3
 8002c16:	f00a ffd0 	bl	800dbba <memset>
  if(hhrtim->Instance==HRTIM1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a14      	ldr	r2, [pc, #80]	@ (8002c70 <HAL_HRTIM_MspInit+0x6c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d121      	bne.n	8002c68 <HAL_HRTIM_MspInit+0x64>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8002c24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c36:	f107 0310 	add.w	r3, r7, #16
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f004 fd4a 	bl	80076d4 <HAL_RCCEx_PeriphCLKConfig>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8002c46:	f7ff ffbd 	bl	8002bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c74 <HAL_HRTIM_MspInit+0x70>)
 8002c4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c50:	4a08      	ldr	r2, [pc, #32]	@ (8002c74 <HAL_HRTIM_MspInit+0x70>)
 8002c52:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002c56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002c5a:	4b06      	ldr	r3, [pc, #24]	@ (8002c74 <HAL_HRTIM_MspInit+0x70>)
 8002c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8002c68:	bf00      	nop
 8002c6a:	37d0      	adds	r7, #208	@ 0xd0
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40017400 	.word	0x40017400
 8002c74:	58024400 	.word	0x58024400

08002c78 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	@ 0x28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a23      	ldr	r2, [pc, #140]	@ (8002d24 <HAL_HRTIM_MspPostInit+0xac>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d13f      	bne.n	8002d1a <HAL_HRTIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c9a:	4b23      	ldr	r3, [pc, #140]	@ (8002d28 <HAL_HRTIM_MspPostInit+0xb0>)
 8002c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ca0:	4a21      	ldr	r2, [pc, #132]	@ (8002d28 <HAL_HRTIM_MspPostInit+0xb0>)
 8002ca2:	f043 0304 	orr.w	r3, r3, #4
 8002ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002caa:	4b1f      	ldr	r3, [pc, #124]	@ (8002d28 <HAL_HRTIM_MspPostInit+0xb0>)
 8002cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d28 <HAL_HRTIM_MspPostInit+0xb0>)
 8002cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cbe:	4a1a      	ldr	r2, [pc, #104]	@ (8002d28 <HAL_HRTIM_MspPostInit+0xb0>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002cc8:	4b17      	ldr	r3, [pc, #92]	@ (8002d28 <HAL_HRTIM_MspPostInit+0xb0>)
 8002cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> HRTIM_CHC1
    PA10     ------> HRTIM_CHC2
    PA11     ------> HRTIM_CHD1
    PA12     ------> HRTIM_CHD2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002cd6:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cec:	f107 0314 	add.w	r3, r7, #20
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	480e      	ldr	r0, [pc, #56]	@ (8002d2c <HAL_HRTIM_MspPostInit+0xb4>)
 8002cf4:	f001 fdc6 	bl	8004884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002cf8:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002cfc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d06:	2303      	movs	r3, #3
 8002d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0e:	f107 0314 	add.w	r3, r7, #20
 8002d12:	4619      	mov	r1, r3
 8002d14:	4806      	ldr	r0, [pc, #24]	@ (8002d30 <HAL_HRTIM_MspPostInit+0xb8>)
 8002d16:	f001 fdb5 	bl	8004884 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8002d1a:	bf00      	nop
 8002d1c:	3728      	adds	r7, #40	@ 0x28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40017400 	.word	0x40017400
 8002d28:	58024400 	.word	0x58024400
 8002d2c:	58020800 	.word	0x58020800
 8002d30:	58020000 	.word	0x58020000

08002d34 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b0ba      	sub	sp, #232	@ 0xe8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d4c:	f107 0310 	add.w	r3, r7, #16
 8002d50:	22c0      	movs	r2, #192	@ 0xc0
 8002d52:	2100      	movs	r1, #0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f00a ff30 	bl	800dbba <memset>
  if(hlptim->Instance==LPTIM1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a2b      	ldr	r2, [pc, #172]	@ (8002e0c <HAL_LPTIM_MspInit+0xd8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d14e      	bne.n	8002e02 <HAL_LPTIM_MspInit+0xce>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002d64:	f04f 0220 	mov.w	r2, #32
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 8002d70:	2300      	movs	r3, #0
 8002d72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d76:	f107 0310 	add.w	r3, r7, #16
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f004 fcaa 	bl	80076d4 <HAL_RCCEx_PeriphCLKConfig>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_LPTIM_MspInit+0x56>
    {
      Error_Handler();
 8002d86:	f7ff ff1d 	bl	8002bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002d8a:	4b21      	ldr	r3, [pc, #132]	@ (8002e10 <HAL_LPTIM_MspInit+0xdc>)
 8002d8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d90:	4a1f      	ldr	r2, [pc, #124]	@ (8002e10 <HAL_LPTIM_MspInit+0xdc>)
 8002d92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d96:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002e10 <HAL_LPTIM_MspInit+0xdc>)
 8002d9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002da0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002da8:	4b19      	ldr	r3, [pc, #100]	@ (8002e10 <HAL_LPTIM_MspInit+0xdc>)
 8002daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dae:	4a18      	ldr	r2, [pc, #96]	@ (8002e10 <HAL_LPTIM_MspInit+0xdc>)
 8002db0:	f043 0308 	orr.w	r3, r3, #8
 8002db4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002db8:	4b15      	ldr	r3, [pc, #84]	@ (8002e10 <HAL_LPTIM_MspInit+0xdc>)
 8002dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration
    PD13     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002dc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002dca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8002de0:	2301      	movs	r3, #1
 8002de2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002de6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002dea:	4619      	mov	r1, r3
 8002dec:	4809      	ldr	r0, [pc, #36]	@ (8002e14 <HAL_LPTIM_MspInit+0xe0>)
 8002dee:	f001 fd49 	bl	8004884 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8002df2:	2200      	movs	r2, #0
 8002df4:	2100      	movs	r1, #0
 8002df6:	205d      	movs	r0, #93	@ 0x5d
 8002df8:	f000 ff33 	bl	8003c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002dfc:	205d      	movs	r0, #93	@ 0x5d
 8002dfe:	f000 ff4a 	bl	8003c96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8002e02:	bf00      	nop
 8002e04:	37e8      	adds	r7, #232	@ 0xe8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40002400 	.word	0x40002400
 8002e10:	58024400 	.word	0x58024400
 8002e14:	58020c00 	.word	0x58020c00

08002e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08c      	sub	sp, #48	@ 0x30
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a99      	ldr	r2, [pc, #612]	@ (800308c <HAL_TIM_Base_MspInit+0x274>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d117      	bne.n	8002e5a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e2a:	4b99      	ldr	r3, [pc, #612]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8002e2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e30:	4a97      	ldr	r2, [pc, #604]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e3a:	4b95      	ldr	r3, [pc, #596]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8002e3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	2019      	movs	r0, #25
 8002e4e:	f000 ff08 	bl	8003c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002e52:	2019      	movs	r0, #25
 8002e54:	f000 ff1f 	bl	8003c96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002e58:	e113      	b.n	8003082 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM2)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e62:	d117      	bne.n	8002e94 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e64:	4b8a      	ldr	r3, [pc, #552]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8002e66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e6a:	4a89      	ldr	r2, [pc, #548]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e74:	4b86      	ldr	r3, [pc, #536]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8002e76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e82:	2200      	movs	r2, #0
 8002e84:	2100      	movs	r1, #0
 8002e86:	201c      	movs	r0, #28
 8002e88:	f000 feeb 	bl	8003c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e8c:	201c      	movs	r0, #28
 8002e8e:	f000 ff02 	bl	8003c96 <HAL_NVIC_EnableIRQ>
}
 8002e92:	e0f6      	b.n	8003082 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM4)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a7e      	ldr	r2, [pc, #504]	@ (8003094 <HAL_TIM_Base_MspInit+0x27c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d117      	bne.n	8002ece <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e9e:	4b7c      	ldr	r3, [pc, #496]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8002ea0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ea4:	4a7a      	ldr	r2, [pc, #488]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8002ea6:	f043 0304 	orr.w	r3, r3, #4
 8002eaa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002eae:	4b78      	ldr	r3, [pc, #480]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8002eb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	201e      	movs	r0, #30
 8002ec2:	f000 fece 	bl	8003c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002ec6:	201e      	movs	r0, #30
 8002ec8:	f000 fee5 	bl	8003c96 <HAL_NVIC_EnableIRQ>
}
 8002ecc:	e0d9      	b.n	8003082 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM5)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a71      	ldr	r2, [pc, #452]	@ (8003098 <HAL_TIM_Base_MspInit+0x280>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d117      	bne.n	8002f08 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ed8:	4b6d      	ldr	r3, [pc, #436]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8002eda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ede:	4a6c      	ldr	r2, [pc, #432]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8002ee0:	f043 0308 	orr.w	r3, r3, #8
 8002ee4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002ee8:	4b69      	ldr	r3, [pc, #420]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8002eea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	623b      	str	r3, [r7, #32]
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2100      	movs	r1, #0
 8002efa:	2032      	movs	r0, #50	@ 0x32
 8002efc:	f000 feb1 	bl	8003c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002f00:	2032      	movs	r0, #50	@ 0x32
 8002f02:	f000 fec8 	bl	8003c96 <HAL_NVIC_EnableIRQ>
}
 8002f06:	e0bc      	b.n	8003082 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM8)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a63      	ldr	r2, [pc, #396]	@ (800309c <HAL_TIM_Base_MspInit+0x284>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d127      	bne.n	8002f62 <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f12:	4b5f      	ldr	r3, [pc, #380]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8002f14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f18:	4a5d      	ldr	r2, [pc, #372]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8002f1a:	f043 0302 	orr.w	r3, r3, #2
 8002f1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f22:	4b5b      	ldr	r3, [pc, #364]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8002f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002f30:	2200      	movs	r2, #0
 8002f32:	2100      	movs	r1, #0
 8002f34:	202b      	movs	r0, #43	@ 0x2b
 8002f36:	f000 fe94 	bl	8003c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002f3a:	202b      	movs	r0, #43	@ 0x2b
 8002f3c:	f000 feab 	bl	8003c96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002f40:	2200      	movs	r2, #0
 8002f42:	2100      	movs	r1, #0
 8002f44:	202c      	movs	r0, #44	@ 0x2c
 8002f46:	f000 fe8c 	bl	8003c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002f4a:	202c      	movs	r0, #44	@ 0x2c
 8002f4c:	f000 fea3 	bl	8003c96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002f50:	2200      	movs	r2, #0
 8002f52:	2100      	movs	r1, #0
 8002f54:	202d      	movs	r0, #45	@ 0x2d
 8002f56:	f000 fe84 	bl	8003c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002f5a:	202d      	movs	r0, #45	@ 0x2d
 8002f5c:	f000 fe9b 	bl	8003c96 <HAL_NVIC_EnableIRQ>
}
 8002f60:	e08f      	b.n	8003082 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM12)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a4e      	ldr	r2, [pc, #312]	@ (80030a0 <HAL_TIM_Base_MspInit+0x288>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d117      	bne.n	8002f9c <HAL_TIM_Base_MspInit+0x184>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002f6c:	4b48      	ldr	r3, [pc, #288]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8002f6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f72:	4a47      	ldr	r2, [pc, #284]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8002f74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f78:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002f7c:	4b44      	ldr	r3, [pc, #272]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8002f7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f86:	61bb      	str	r3, [r7, #24]
 8002f88:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	202b      	movs	r0, #43	@ 0x2b
 8002f90:	f000 fe67 	bl	8003c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002f94:	202b      	movs	r0, #43	@ 0x2b
 8002f96:	f000 fe7e 	bl	8003c96 <HAL_NVIC_EnableIRQ>
}
 8002f9a:	e072      	b.n	8003082 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM13)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a40      	ldr	r2, [pc, #256]	@ (80030a4 <HAL_TIM_Base_MspInit+0x28c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d117      	bne.n	8002fd6 <HAL_TIM_Base_MspInit+0x1be>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002fa6:	4b3a      	ldr	r3, [pc, #232]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8002fa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fac:	4a38      	ldr	r2, [pc, #224]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8002fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fb2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002fb6:	4b36      	ldr	r3, [pc, #216]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8002fb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	202c      	movs	r0, #44	@ 0x2c
 8002fca:	f000 fe4a 	bl	8003c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002fce:	202c      	movs	r0, #44	@ 0x2c
 8002fd0:	f000 fe61 	bl	8003c96 <HAL_NVIC_EnableIRQ>
}
 8002fd4:	e055      	b.n	8003082 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM14)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a33      	ldr	r2, [pc, #204]	@ (80030a8 <HAL_TIM_Base_MspInit+0x290>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d117      	bne.n	8003010 <HAL_TIM_Base_MspInit+0x1f8>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8002fe2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fe6:	4a2a      	ldr	r2, [pc, #168]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8002fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002ff0:	4b27      	ldr	r3, [pc, #156]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8002ff2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002ffe:	2200      	movs	r2, #0
 8003000:	2100      	movs	r1, #0
 8003002:	202d      	movs	r0, #45	@ 0x2d
 8003004:	f000 fe2d 	bl	8003c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003008:	202d      	movs	r0, #45	@ 0x2d
 800300a:	f000 fe44 	bl	8003c96 <HAL_NVIC_EnableIRQ>
}
 800300e:	e038      	b.n	8003082 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM15)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a25      	ldr	r2, [pc, #148]	@ (80030ac <HAL_TIM_Base_MspInit+0x294>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d117      	bne.n	800304a <HAL_TIM_Base_MspInit+0x232>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800301a:	4b1d      	ldr	r3, [pc, #116]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 800301c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003020:	4a1b      	ldr	r2, [pc, #108]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8003022:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003026:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800302a:	4b19      	ldr	r3, [pc, #100]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 800302c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003030:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8003038:	2200      	movs	r2, #0
 800303a:	2100      	movs	r1, #0
 800303c:	2074      	movs	r0, #116	@ 0x74
 800303e:	f000 fe10 	bl	8003c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8003042:	2074      	movs	r0, #116	@ 0x74
 8003044:	f000 fe27 	bl	8003c96 <HAL_NVIC_EnableIRQ>
}
 8003048:	e01b      	b.n	8003082 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM16)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a18      	ldr	r2, [pc, #96]	@ (80030b0 <HAL_TIM_Base_MspInit+0x298>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d116      	bne.n	8003082 <HAL_TIM_Base_MspInit+0x26a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003054:	4b0e      	ldr	r3, [pc, #56]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8003056:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800305a:	4a0d      	ldr	r2, [pc, #52]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 800305c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003060:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003064:	4b0a      	ldr	r3, [pc, #40]	@ (8003090 <HAL_TIM_Base_MspInit+0x278>)
 8003066:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800306a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003072:	2200      	movs	r2, #0
 8003074:	2100      	movs	r1, #0
 8003076:	2075      	movs	r0, #117	@ 0x75
 8003078:	f000 fdf3 	bl	8003c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800307c:	2075      	movs	r0, #117	@ 0x75
 800307e:	f000 fe0a 	bl	8003c96 <HAL_NVIC_EnableIRQ>
}
 8003082:	bf00      	nop
 8003084:	3730      	adds	r7, #48	@ 0x30
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40010000 	.word	0x40010000
 8003090:	58024400 	.word	0x58024400
 8003094:	40000800 	.word	0x40000800
 8003098:	40000c00 	.word	0x40000c00
 800309c:	40010400 	.word	0x40010400
 80030a0:	40001800 	.word	0x40001800
 80030a4:	40001c00 	.word	0x40001c00
 80030a8:	40002000 	.word	0x40002000
 80030ac:	40014000 	.word	0x40014000
 80030b0:	40014400 	.word	0x40014400

080030b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b092      	sub	sp, #72	@ 0x48
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	60da      	str	r2, [r3, #12]
 80030ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4aa4      	ldr	r2, [pc, #656]	@ (8003364 <HAL_TIM_MspPostInit+0x2b0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d120      	bne.n	8003118 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030d6:	4ba4      	ldr	r3, [pc, #656]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 80030d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030dc:	4aa2      	ldr	r2, [pc, #648]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 80030de:	f043 0310 	orr.w	r3, r3, #16
 80030e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030e6:	4ba0      	ldr	r3, [pc, #640]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 80030e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80030f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80030f4:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80030f8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fa:	2302      	movs	r3, #2
 80030fc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fe:	2300      	movs	r3, #0
 8003100:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003102:	2300      	movs	r3, #0
 8003104:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003106:	2301      	movs	r3, #1
 8003108:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800310a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800310e:	4619      	mov	r1, r3
 8003110:	4896      	ldr	r0, [pc, #600]	@ (800336c <HAL_TIM_MspPostInit+0x2b8>)
 8003112:	f001 fbb7 	bl	8004884 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8003116:	e189      	b.n	800342c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003120:	d11f      	bne.n	8003162 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003122:	4b91      	ldr	r3, [pc, #580]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 8003124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003128:	4a8f      	ldr	r2, [pc, #572]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003132:	4b8d      	ldr	r3, [pc, #564]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 8003134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800313e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003140:	2301      	movs	r3, #1
 8003142:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003144:	2302      	movs	r3, #2
 8003146:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003148:	2300      	movs	r3, #0
 800314a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314c:	2300      	movs	r3, #0
 800314e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003150:	2301      	movs	r3, #1
 8003152:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003154:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003158:	4619      	mov	r1, r3
 800315a:	4885      	ldr	r0, [pc, #532]	@ (8003370 <HAL_TIM_MspPostInit+0x2bc>)
 800315c:	f001 fb92 	bl	8004884 <HAL_GPIO_Init>
}
 8003160:	e164      	b.n	800342c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM4)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a83      	ldr	r2, [pc, #524]	@ (8003374 <HAL_TIM_MspPostInit+0x2c0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d13f      	bne.n	80031ec <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800316c:	4b7e      	ldr	r3, [pc, #504]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 800316e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003172:	4a7d      	ldr	r2, [pc, #500]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 8003174:	f043 0308 	orr.w	r3, r3, #8
 8003178:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800317c:	4b7a      	ldr	r3, [pc, #488]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 800317e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800318a:	4b77      	ldr	r3, [pc, #476]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 800318c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003190:	4a75      	ldr	r2, [pc, #468]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 8003192:	f043 0302 	orr.w	r3, r3, #2
 8003196:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800319a:	4b73      	ldr	r3, [pc, #460]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 800319c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80031a8:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80031ac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ae:	2302      	movs	r3, #2
 80031b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b6:	2300      	movs	r3, #0
 80031b8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80031ba:	2302      	movs	r3, #2
 80031bc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80031c2:	4619      	mov	r1, r3
 80031c4:	486c      	ldr	r0, [pc, #432]	@ (8003378 <HAL_TIM_MspPostInit+0x2c4>)
 80031c6:	f001 fb5d 	bl	8004884 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80031ca:	2380      	movs	r3, #128	@ 0x80
 80031cc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ce:	2302      	movs	r3, #2
 80031d0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d6:	2300      	movs	r3, #0
 80031d8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80031da:	2302      	movs	r3, #2
 80031dc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80031e2:	4619      	mov	r1, r3
 80031e4:	4865      	ldr	r0, [pc, #404]	@ (800337c <HAL_TIM_MspPostInit+0x2c8>)
 80031e6:	f001 fb4d 	bl	8004884 <HAL_GPIO_Init>
}
 80031ea:	e11f      	b.n	800342c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM5)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a63      	ldr	r2, [pc, #396]	@ (8003380 <HAL_TIM_MspPostInit+0x2cc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d11f      	bne.n	8003236 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f6:	4b5c      	ldr	r3, [pc, #368]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 80031f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031fc:	4a5a      	ldr	r2, [pc, #360]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003206:	4b58      	ldr	r3, [pc, #352]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 8003208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	623b      	str	r3, [r7, #32]
 8003212:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003214:	2306      	movs	r3, #6
 8003216:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003218:	2302      	movs	r3, #2
 800321a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321c:	2300      	movs	r3, #0
 800321e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003220:	2300      	movs	r3, #0
 8003222:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003224:	2302      	movs	r3, #2
 8003226:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003228:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800322c:	4619      	mov	r1, r3
 800322e:	4850      	ldr	r0, [pc, #320]	@ (8003370 <HAL_TIM_MspPostInit+0x2bc>)
 8003230:	f001 fb28 	bl	8004884 <HAL_GPIO_Init>
}
 8003234:	e0fa      	b.n	800342c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM8)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a52      	ldr	r2, [pc, #328]	@ (8003384 <HAL_TIM_MspPostInit+0x2d0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d120      	bne.n	8003282 <HAL_TIM_MspPostInit+0x1ce>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003240:	4b49      	ldr	r3, [pc, #292]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 8003242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003246:	4a48      	ldr	r2, [pc, #288]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 8003248:	f043 0304 	orr.w	r3, r3, #4
 800324c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003250:	4b45      	ldr	r3, [pc, #276]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 8003252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	61fb      	str	r3, [r7, #28]
 800325c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800325e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003262:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003264:	2302      	movs	r3, #2
 8003266:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003268:	2300      	movs	r3, #0
 800326a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326c:	2300      	movs	r3, #0
 800326e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003270:	2303      	movs	r3, #3
 8003272:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003274:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003278:	4619      	mov	r1, r3
 800327a:	4843      	ldr	r0, [pc, #268]	@ (8003388 <HAL_TIM_MspPostInit+0x2d4>)
 800327c:	f001 fb02 	bl	8004884 <HAL_GPIO_Init>
}
 8003280:	e0d4      	b.n	800342c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM12)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a41      	ldr	r2, [pc, #260]	@ (800338c <HAL_TIM_MspPostInit+0x2d8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d120      	bne.n	80032ce <HAL_TIM_MspPostInit+0x21a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800328c:	4b36      	ldr	r3, [pc, #216]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 800328e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003292:	4a35      	ldr	r2, [pc, #212]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 8003294:	f043 0302 	orr.w	r3, r3, #2
 8003298:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800329c:	4b32      	ldr	r3, [pc, #200]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 800329e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	61bb      	str	r3, [r7, #24]
 80032a8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80032aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032ae:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b0:	2302      	movs	r3, #2
 80032b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b8:	2300      	movs	r3, #0
 80032ba:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80032bc:	2302      	movs	r3, #2
 80032be:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80032c4:	4619      	mov	r1, r3
 80032c6:	482d      	ldr	r0, [pc, #180]	@ (800337c <HAL_TIM_MspPostInit+0x2c8>)
 80032c8:	f001 fadc 	bl	8004884 <HAL_GPIO_Init>
}
 80032cc:	e0ae      	b.n	800342c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM13)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a2f      	ldr	r2, [pc, #188]	@ (8003390 <HAL_TIM_MspPostInit+0x2dc>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d11f      	bne.n	8003318 <HAL_TIM_MspPostInit+0x264>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d8:	4b23      	ldr	r3, [pc, #140]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 80032da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032de:	4a22      	ldr	r2, [pc, #136]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 80032ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032f6:	2340      	movs	r3, #64	@ 0x40
 80032f8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fa:	2302      	movs	r3, #2
 80032fc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003302:	2300      	movs	r3, #0
 8003304:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003306:	2309      	movs	r3, #9
 8003308:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800330e:	4619      	mov	r1, r3
 8003310:	4817      	ldr	r0, [pc, #92]	@ (8003370 <HAL_TIM_MspPostInit+0x2bc>)
 8003312:	f001 fab7 	bl	8004884 <HAL_GPIO_Init>
}
 8003316:	e089      	b.n	800342c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM14)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a1d      	ldr	r2, [pc, #116]	@ (8003394 <HAL_TIM_MspPostInit+0x2e0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d13a      	bne.n	8003398 <HAL_TIM_MspPostInit+0x2e4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003322:	4b11      	ldr	r3, [pc, #68]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 8003324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003328:	4a0f      	ldr	r2, [pc, #60]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003332:	4b0d      	ldr	r3, [pc, #52]	@ (8003368 <HAL_TIM_MspPostInit+0x2b4>)
 8003334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003340:	2380      	movs	r3, #128	@ 0x80
 8003342:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003344:	2302      	movs	r3, #2
 8003346:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	2300      	movs	r3, #0
 800334a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334c:	2300      	movs	r3, #0
 800334e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003350:	2309      	movs	r3, #9
 8003352:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003354:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003358:	4619      	mov	r1, r3
 800335a:	4805      	ldr	r0, [pc, #20]	@ (8003370 <HAL_TIM_MspPostInit+0x2bc>)
 800335c:	f001 fa92 	bl	8004884 <HAL_GPIO_Init>
}
 8003360:	e064      	b.n	800342c <HAL_TIM_MspPostInit+0x378>
 8003362:	bf00      	nop
 8003364:	40010000 	.word	0x40010000
 8003368:	58024400 	.word	0x58024400
 800336c:	58021000 	.word	0x58021000
 8003370:	58020000 	.word	0x58020000
 8003374:	40000800 	.word	0x40000800
 8003378:	58020c00 	.word	0x58020c00
 800337c:	58020400 	.word	0x58020400
 8003380:	40000c00 	.word	0x40000c00
 8003384:	40010400 	.word	0x40010400
 8003388:	58020800 	.word	0x58020800
 800338c:	40001800 	.word	0x40001800
 8003390:	40001c00 	.word	0x40001c00
 8003394:	40002000 	.word	0x40002000
  else if(htim->Instance==TIM15)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a25      	ldr	r2, [pc, #148]	@ (8003434 <HAL_TIM_MspPostInit+0x380>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d11f      	bne.n	80033e2 <HAL_TIM_MspPostInit+0x32e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033a2:	4b25      	ldr	r3, [pc, #148]	@ (8003438 <HAL_TIM_MspPostInit+0x384>)
 80033a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033a8:	4a23      	ldr	r2, [pc, #140]	@ (8003438 <HAL_TIM_MspPostInit+0x384>)
 80033aa:	f043 0310 	orr.w	r3, r3, #16
 80033ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033b2:	4b21      	ldr	r3, [pc, #132]	@ (8003438 <HAL_TIM_MspPostInit+0x384>)
 80033b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80033c0:	2360      	movs	r3, #96	@ 0x60
 80033c2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c4:	2302      	movs	r3, #2
 80033c6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033cc:	2300      	movs	r3, #0
 80033ce:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80033d0:	2304      	movs	r3, #4
 80033d2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033d4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80033d8:	4619      	mov	r1, r3
 80033da:	4818      	ldr	r0, [pc, #96]	@ (800343c <HAL_TIM_MspPostInit+0x388>)
 80033dc:	f001 fa52 	bl	8004884 <HAL_GPIO_Init>
}
 80033e0:	e024      	b.n	800342c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM16)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a16      	ldr	r2, [pc, #88]	@ (8003440 <HAL_TIM_MspPostInit+0x38c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d11f      	bne.n	800342c <HAL_TIM_MspPostInit+0x378>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ec:	4b12      	ldr	r3, [pc, #72]	@ (8003438 <HAL_TIM_MspPostInit+0x384>)
 80033ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033f2:	4a11      	ldr	r2, [pc, #68]	@ (8003438 <HAL_TIM_MspPostInit+0x384>)
 80033f4:	f043 0302 	orr.w	r3, r3, #2
 80033f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003438 <HAL_TIM_MspPostInit+0x384>)
 80033fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	60bb      	str	r3, [r7, #8]
 8003408:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800340a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800340e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003410:	2302      	movs	r3, #2
 8003412:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003414:	2300      	movs	r3, #0
 8003416:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003418:	2300      	movs	r3, #0
 800341a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800341c:	2301      	movs	r3, #1
 800341e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003420:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003424:	4619      	mov	r1, r3
 8003426:	4807      	ldr	r0, [pc, #28]	@ (8003444 <HAL_TIM_MspPostInit+0x390>)
 8003428:	f001 fa2c 	bl	8004884 <HAL_GPIO_Init>
}
 800342c:	bf00      	nop
 800342e:	3748      	adds	r7, #72	@ 0x48
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40014000 	.word	0x40014000
 8003438:	58024400 	.word	0x58024400
 800343c:	58021000 	.word	0x58021000
 8003440:	40014400 	.word	0x40014400
 8003444:	58020400 	.word	0x58020400

08003448 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b0ba      	sub	sp, #232	@ 0xe8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003450:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003460:	f107 0310 	add.w	r3, r7, #16
 8003464:	22c0      	movs	r2, #192	@ 0xc0
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f00a fba6 	bl	800dbba <memset>
  if(huart->Instance==UART4)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a2b      	ldr	r2, [pc, #172]	@ (8003520 <HAL_UART_MspInit+0xd8>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d14e      	bne.n	8003516 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003478:	f04f 0202 	mov.w	r2, #2
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003484:	2300      	movs	r3, #0
 8003486:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800348a:	f107 0310 	add.w	r3, r7, #16
 800348e:	4618      	mov	r0, r3
 8003490:	f004 f920 	bl	80076d4 <HAL_RCCEx_PeriphCLKConfig>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800349a:	f7ff fb93 	bl	8002bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800349e:	4b21      	ldr	r3, [pc, #132]	@ (8003524 <HAL_UART_MspInit+0xdc>)
 80034a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80034a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003524 <HAL_UART_MspInit+0xdc>)
 80034a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80034aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80034ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003524 <HAL_UART_MspInit+0xdc>)
 80034b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80034b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034bc:	4b19      	ldr	r3, [pc, #100]	@ (8003524 <HAL_UART_MspInit+0xdc>)
 80034be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034c2:	4a18      	ldr	r2, [pc, #96]	@ (8003524 <HAL_UART_MspInit+0xdc>)
 80034c4:	f043 0304 	orr.w	r3, r3, #4
 80034c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034cc:	4b15      	ldr	r3, [pc, #84]	@ (8003524 <HAL_UART_MspInit+0xdc>)
 80034ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	60bb      	str	r3, [r7, #8]
 80034d8:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80034da:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80034de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e2:	2302      	movs	r3, #2
 80034e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ee:	2300      	movs	r3, #0
 80034f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80034f4:	2308      	movs	r3, #8
 80034f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034fa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80034fe:	4619      	mov	r1, r3
 8003500:	4809      	ldr	r0, [pc, #36]	@ (8003528 <HAL_UART_MspInit+0xe0>)
 8003502:	f001 f9bf 	bl	8004884 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003506:	2200      	movs	r2, #0
 8003508:	2100      	movs	r1, #0
 800350a:	2034      	movs	r0, #52	@ 0x34
 800350c:	f000 fba9 	bl	8003c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003510:	2034      	movs	r0, #52	@ 0x34
 8003512:	f000 fbc0 	bl	8003c96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8003516:	bf00      	nop
 8003518:	37e8      	adds	r7, #232	@ 0xe8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40004c00 	.word	0x40004c00
 8003524:	58024400 	.word	0x58024400
 8003528:	58020800 	.word	0x58020800

0800352c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003530:	bf00      	nop
 8003532:	e7fd      	b.n	8003530 <NMI_Handler+0x4>

08003534 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003538:	bf00      	nop
 800353a:	e7fd      	b.n	8003538 <HardFault_Handler+0x4>

0800353c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003540:	bf00      	nop
 8003542:	e7fd      	b.n	8003540 <MemManage_Handler+0x4>

08003544 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003548:	bf00      	nop
 800354a:	e7fd      	b.n	8003548 <BusFault_Handler+0x4>

0800354c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003550:	bf00      	nop
 8003552:	e7fd      	b.n	8003550 <UsageFault_Handler+0x4>

08003554 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003558:	bf00      	nop
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003562:	b480      	push	{r7}
 8003564:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003574:	bf00      	nop
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003582:	f000 fa67 	bl	8003a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003590:	4802      	ldr	r0, [pc, #8]	@ (800359c <TIM1_UP_IRQHandler+0x10>)
 8003592:	f006 f90b 	bl	80097ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	24000318 	.word	0x24000318

080035a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80035a4:	4802      	ldr	r0, [pc, #8]	@ (80035b0 <TIM2_IRQHandler+0x10>)
 80035a6:	f006 f901 	bl	80097ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	24000364 	.word	0x24000364

080035b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80035b8:	4802      	ldr	r0, [pc, #8]	@ (80035c4 <TIM4_IRQHandler+0x10>)
 80035ba:	f006 f8f7 	bl	80097ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	240003b0 	.word	0x240003b0

080035c8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80035cc:	4803      	ldr	r0, [pc, #12]	@ (80035dc <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80035ce:	f006 f8ed 	bl	80097ac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80035d2:	4803      	ldr	r0, [pc, #12]	@ (80035e0 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80035d4:	f006 f8ea 	bl	80097ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80035d8:	bf00      	nop
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	24000448 	.word	0x24000448
 80035e0:	24000494 	.word	0x24000494

080035e4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80035e8:	4803      	ldr	r0, [pc, #12]	@ (80035f8 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80035ea:	f006 f8df 	bl	80097ac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80035ee:	4803      	ldr	r0, [pc, #12]	@ (80035fc <TIM8_UP_TIM13_IRQHandler+0x18>)
 80035f0:	f006 f8dc 	bl	80097ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80035f4:	bf00      	nop
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	24000448 	.word	0x24000448
 80035fc:	240004e0 	.word	0x240004e0

08003600 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003604:	4803      	ldr	r0, [pc, #12]	@ (8003614 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8003606:	f006 f8d1 	bl	80097ac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800360a:	4803      	ldr	r0, [pc, #12]	@ (8003618 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 800360c:	f006 f8ce 	bl	80097ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003610:	bf00      	nop
 8003612:	bd80      	pop	{r7, pc}
 8003614:	24000448 	.word	0x24000448
 8003618:	2400052c 	.word	0x2400052c

0800361c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003620:	4802      	ldr	r0, [pc, #8]	@ (800362c <TIM5_IRQHandler+0x10>)
 8003622:	f006 f8c3 	bl	80097ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	240003fc 	.word	0x240003fc

08003630 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003634:	4802      	ldr	r0, [pc, #8]	@ (8003640 <UART4_IRQHandler+0x10>)
 8003636:	f007 fa89 	bl	800ab4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800363a:	bf00      	nop
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	24000610 	.word	0x24000610

08003644 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003648:	4802      	ldr	r0, [pc, #8]	@ (8003654 <LPTIM1_IRQHandler+0x10>)
 800364a:	f002 fd31 	bl	80060b0 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800364e:	bf00      	nop
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	240002e0 	.word	0x240002e0

08003658 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800365c:	4802      	ldr	r0, [pc, #8]	@ (8003668 <TIM15_IRQHandler+0x10>)
 800365e:	f006 f8a5 	bl	80097ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8003662:	bf00      	nop
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	24000578 	.word	0x24000578

0800366c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003670:	4802      	ldr	r0, [pc, #8]	@ (800367c <TIM16_IRQHandler+0x10>)
 8003672:	f006 f89b 	bl	80097ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	240005c4 	.word	0x240005c4

08003680 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return 1;
 8003684:	2301      	movs	r3, #1
}
 8003686:	4618      	mov	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <_kill>:

int _kill(int pid, int sig)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800369a:	f00a fae1 	bl	800dc60 <__errno>
 800369e:	4603      	mov	r3, r0
 80036a0:	2216      	movs	r2, #22
 80036a2:	601a      	str	r2, [r3, #0]
  return -1;
 80036a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <_exit>:

void _exit (int status)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80036b8:	f04f 31ff 	mov.w	r1, #4294967295
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff ffe7 	bl	8003690 <_kill>
  while (1) {}    /* Make sure we hang here */
 80036c2:	bf00      	nop
 80036c4:	e7fd      	b.n	80036c2 <_exit+0x12>

080036c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b086      	sub	sp, #24
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	e00a      	b.n	80036ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036d8:	f3af 8000 	nop.w
 80036dc:	4601      	mov	r1, r0
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	60ba      	str	r2, [r7, #8]
 80036e4:	b2ca      	uxtb	r2, r1
 80036e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	3301      	adds	r3, #1
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	dbf0      	blt.n	80036d8 <_read+0x12>
  }

  return len;
 80036f6:	687b      	ldr	r3, [r7, #4]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	e009      	b.n	8003726 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	60ba      	str	r2, [r7, #8]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	3301      	adds	r3, #1
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	429a      	cmp	r2, r3
 800372c:	dbf1      	blt.n	8003712 <_write+0x12>
  }
  return len;
 800372e:	687b      	ldr	r3, [r7, #4]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <_close>:

int _close(int file)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003740:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003744:	4618      	mov	r0, r3
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003760:	605a      	str	r2, [r3, #4]
  return 0;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <_isatty>:

int _isatty(int file)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003778:	2301      	movs	r3, #1
}
 800377a:	4618      	mov	r0, r3
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003786:	b480      	push	{r7}
 8003788:	b085      	sub	sp, #20
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037a8:	4a14      	ldr	r2, [pc, #80]	@ (80037fc <_sbrk+0x5c>)
 80037aa:	4b15      	ldr	r3, [pc, #84]	@ (8003800 <_sbrk+0x60>)
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037b4:	4b13      	ldr	r3, [pc, #76]	@ (8003804 <_sbrk+0x64>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d102      	bne.n	80037c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037bc:	4b11      	ldr	r3, [pc, #68]	@ (8003804 <_sbrk+0x64>)
 80037be:	4a12      	ldr	r2, [pc, #72]	@ (8003808 <_sbrk+0x68>)
 80037c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037c2:	4b10      	ldr	r3, [pc, #64]	@ (8003804 <_sbrk+0x64>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4413      	add	r3, r2
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d207      	bcs.n	80037e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037d0:	f00a fa46 	bl	800dc60 <__errno>
 80037d4:	4603      	mov	r3, r0
 80037d6:	220c      	movs	r2, #12
 80037d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037da:	f04f 33ff 	mov.w	r3, #4294967295
 80037de:	e009      	b.n	80037f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037e0:	4b08      	ldr	r3, [pc, #32]	@ (8003804 <_sbrk+0x64>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037e6:	4b07      	ldr	r3, [pc, #28]	@ (8003804 <_sbrk+0x64>)
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4413      	add	r3, r2
 80037ee:	4a05      	ldr	r2, [pc, #20]	@ (8003804 <_sbrk+0x64>)
 80037f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037f2:	68fb      	ldr	r3, [r7, #12]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	24080000 	.word	0x24080000
 8003800:	00000400 	.word	0x00000400
 8003804:	24003e54 	.word	0x24003e54
 8003808:	24003fa8 	.word	0x24003fa8

0800380c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003810:	4b37      	ldr	r3, [pc, #220]	@ (80038f0 <SystemInit+0xe4>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003816:	4a36      	ldr	r2, [pc, #216]	@ (80038f0 <SystemInit+0xe4>)
 8003818:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800381c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003820:	4b34      	ldr	r3, [pc, #208]	@ (80038f4 <SystemInit+0xe8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	2b06      	cmp	r3, #6
 800382a:	d807      	bhi.n	800383c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800382c:	4b31      	ldr	r3, [pc, #196]	@ (80038f4 <SystemInit+0xe8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f023 030f 	bic.w	r3, r3, #15
 8003834:	4a2f      	ldr	r2, [pc, #188]	@ (80038f4 <SystemInit+0xe8>)
 8003836:	f043 0307 	orr.w	r3, r3, #7
 800383a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800383c:	4b2e      	ldr	r3, [pc, #184]	@ (80038f8 <SystemInit+0xec>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a2d      	ldr	r2, [pc, #180]	@ (80038f8 <SystemInit+0xec>)
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003848:	4b2b      	ldr	r3, [pc, #172]	@ (80038f8 <SystemInit+0xec>)
 800384a:	2200      	movs	r2, #0
 800384c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800384e:	4b2a      	ldr	r3, [pc, #168]	@ (80038f8 <SystemInit+0xec>)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	4929      	ldr	r1, [pc, #164]	@ (80038f8 <SystemInit+0xec>)
 8003854:	4b29      	ldr	r3, [pc, #164]	@ (80038fc <SystemInit+0xf0>)
 8003856:	4013      	ands	r3, r2
 8003858:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800385a:	4b26      	ldr	r3, [pc, #152]	@ (80038f4 <SystemInit+0xe8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d007      	beq.n	8003876 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003866:	4b23      	ldr	r3, [pc, #140]	@ (80038f4 <SystemInit+0xe8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 030f 	bic.w	r3, r3, #15
 800386e:	4a21      	ldr	r2, [pc, #132]	@ (80038f4 <SystemInit+0xe8>)
 8003870:	f043 0307 	orr.w	r3, r3, #7
 8003874:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003876:	4b20      	ldr	r3, [pc, #128]	@ (80038f8 <SystemInit+0xec>)
 8003878:	2200      	movs	r2, #0
 800387a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800387c:	4b1e      	ldr	r3, [pc, #120]	@ (80038f8 <SystemInit+0xec>)
 800387e:	2200      	movs	r2, #0
 8003880:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003882:	4b1d      	ldr	r3, [pc, #116]	@ (80038f8 <SystemInit+0xec>)
 8003884:	2200      	movs	r2, #0
 8003886:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003888:	4b1b      	ldr	r3, [pc, #108]	@ (80038f8 <SystemInit+0xec>)
 800388a:	4a1d      	ldr	r2, [pc, #116]	@ (8003900 <SystemInit+0xf4>)
 800388c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800388e:	4b1a      	ldr	r3, [pc, #104]	@ (80038f8 <SystemInit+0xec>)
 8003890:	4a1c      	ldr	r2, [pc, #112]	@ (8003904 <SystemInit+0xf8>)
 8003892:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003894:	4b18      	ldr	r3, [pc, #96]	@ (80038f8 <SystemInit+0xec>)
 8003896:	4a1c      	ldr	r2, [pc, #112]	@ (8003908 <SystemInit+0xfc>)
 8003898:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800389a:	4b17      	ldr	r3, [pc, #92]	@ (80038f8 <SystemInit+0xec>)
 800389c:	2200      	movs	r2, #0
 800389e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80038a0:	4b15      	ldr	r3, [pc, #84]	@ (80038f8 <SystemInit+0xec>)
 80038a2:	4a19      	ldr	r2, [pc, #100]	@ (8003908 <SystemInit+0xfc>)
 80038a4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80038a6:	4b14      	ldr	r3, [pc, #80]	@ (80038f8 <SystemInit+0xec>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80038ac:	4b12      	ldr	r3, [pc, #72]	@ (80038f8 <SystemInit+0xec>)
 80038ae:	4a16      	ldr	r2, [pc, #88]	@ (8003908 <SystemInit+0xfc>)
 80038b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80038b2:	4b11      	ldr	r3, [pc, #68]	@ (80038f8 <SystemInit+0xec>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80038b8:	4b0f      	ldr	r3, [pc, #60]	@ (80038f8 <SystemInit+0xec>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a0e      	ldr	r2, [pc, #56]	@ (80038f8 <SystemInit+0xec>)
 80038be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80038c4:	4b0c      	ldr	r3, [pc, #48]	@ (80038f8 <SystemInit+0xec>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80038ca:	4b10      	ldr	r3, [pc, #64]	@ (800390c <SystemInit+0x100>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	4b10      	ldr	r3, [pc, #64]	@ (8003910 <SystemInit+0x104>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038d6:	d202      	bcs.n	80038de <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80038d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003914 <SystemInit+0x108>)
 80038da:	2201      	movs	r2, #1
 80038dc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80038de:	4b0e      	ldr	r3, [pc, #56]	@ (8003918 <SystemInit+0x10c>)
 80038e0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80038e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80038e6:	bf00      	nop
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	e000ed00 	.word	0xe000ed00
 80038f4:	52002000 	.word	0x52002000
 80038f8:	58024400 	.word	0x58024400
 80038fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8003900:	02020200 	.word	0x02020200
 8003904:	01ff0000 	.word	0x01ff0000
 8003908:	01010280 	.word	0x01010280
 800390c:	5c001000 	.word	0x5c001000
 8003910:	ffff0000 	.word	0xffff0000
 8003914:	51008108 	.word	0x51008108
 8003918:	52004000 	.word	0x52004000

0800391c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800391c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003954 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003920:	f7ff ff74 	bl	800380c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003924:	480c      	ldr	r0, [pc, #48]	@ (8003958 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003926:	490d      	ldr	r1, [pc, #52]	@ (800395c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003928:	4a0d      	ldr	r2, [pc, #52]	@ (8003960 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800392a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800392c:	e002      	b.n	8003934 <LoopCopyDataInit>

0800392e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800392e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003932:	3304      	adds	r3, #4

08003934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003938:	d3f9      	bcc.n	800392e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800393a:	4a0a      	ldr	r2, [pc, #40]	@ (8003964 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800393c:	4c0a      	ldr	r4, [pc, #40]	@ (8003968 <LoopFillZerobss+0x22>)
  movs r3, #0
 800393e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003940:	e001      	b.n	8003946 <LoopFillZerobss>

08003942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003944:	3204      	adds	r2, #4

08003946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003948:	d3fb      	bcc.n	8003942 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800394a:	f00a f98f 	bl	800dc6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800394e:	f7fc fe97 	bl	8000680 <main>
  bx  lr
 8003952:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003954:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003958:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800395c:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8003960:	08010a68 	.word	0x08010a68
  ldr r2, =_sbss
 8003964:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8003968:	24003fa8 	.word	0x24003fa8

0800396c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800396c:	e7fe      	b.n	800396c <ADC3_IRQHandler>
	...

08003970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003976:	2003      	movs	r0, #3
 8003978:	f000 f968 	bl	8003c4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800397c:	f003 fcd4 	bl	8007328 <HAL_RCC_GetSysClockFreq>
 8003980:	4602      	mov	r2, r0
 8003982:	4b15      	ldr	r3, [pc, #84]	@ (80039d8 <HAL_Init+0x68>)
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	0a1b      	lsrs	r3, r3, #8
 8003988:	f003 030f 	and.w	r3, r3, #15
 800398c:	4913      	ldr	r1, [pc, #76]	@ (80039dc <HAL_Init+0x6c>)
 800398e:	5ccb      	ldrb	r3, [r1, r3]
 8003990:	f003 031f 	and.w	r3, r3, #31
 8003994:	fa22 f303 	lsr.w	r3, r2, r3
 8003998:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800399a:	4b0f      	ldr	r3, [pc, #60]	@ (80039d8 <HAL_Init+0x68>)
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	4a0e      	ldr	r2, [pc, #56]	@ (80039dc <HAL_Init+0x6c>)
 80039a4:	5cd3      	ldrb	r3, [r2, r3]
 80039a6:	f003 031f 	and.w	r3, r3, #31
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	fa22 f303 	lsr.w	r3, r2, r3
 80039b0:	4a0b      	ldr	r2, [pc, #44]	@ (80039e0 <HAL_Init+0x70>)
 80039b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039b4:	4a0b      	ldr	r2, [pc, #44]	@ (80039e4 <HAL_Init+0x74>)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039ba:	200f      	movs	r0, #15
 80039bc:	f000 f814 	bl	80039e8 <HAL_InitTick>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e002      	b.n	80039d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80039ca:	f7ff f901 	bl	8002bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	58024400 	.word	0x58024400
 80039dc:	080104d8 	.word	0x080104d8
 80039e0:	24000014 	.word	0x24000014
 80039e4:	24000010 	.word	0x24000010

080039e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80039f0:	4b15      	ldr	r3, [pc, #84]	@ (8003a48 <HAL_InitTick+0x60>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e021      	b.n	8003a40 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80039fc:	4b13      	ldr	r3, [pc, #76]	@ (8003a4c <HAL_InitTick+0x64>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	4b11      	ldr	r3, [pc, #68]	@ (8003a48 <HAL_InitTick+0x60>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	4619      	mov	r1, r3
 8003a06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 f94d 	bl	8003cb2 <HAL_SYSTICK_Config>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e00e      	b.n	8003a40 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b0f      	cmp	r3, #15
 8003a26:	d80a      	bhi.n	8003a3e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a28:	2200      	movs	r2, #0
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a30:	f000 f917 	bl	8003c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a34:	4a06      	ldr	r2, [pc, #24]	@ (8003a50 <HAL_InitTick+0x68>)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e000      	b.n	8003a40 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	2400001c 	.word	0x2400001c
 8003a4c:	24000010 	.word	0x24000010
 8003a50:	24000018 	.word	0x24000018

08003a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a58:	4b06      	ldr	r3, [pc, #24]	@ (8003a74 <HAL_IncTick+0x20>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	4b06      	ldr	r3, [pc, #24]	@ (8003a78 <HAL_IncTick+0x24>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4413      	add	r3, r2
 8003a64:	4a04      	ldr	r2, [pc, #16]	@ (8003a78 <HAL_IncTick+0x24>)
 8003a66:	6013      	str	r3, [r2, #0]
}
 8003a68:	bf00      	nop
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	2400001c 	.word	0x2400001c
 8003a78:	24003e58 	.word	0x24003e58

08003a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a80:	4b03      	ldr	r3, [pc, #12]	@ (8003a90 <HAL_GetTick+0x14>)
 8003a82:	681b      	ldr	r3, [r3, #0]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	24003e58 	.word	0x24003e58

08003a94 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003a98:	4b03      	ldr	r3, [pc, #12]	@ (8003aa8 <HAL_GetREVID+0x14>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	0c1b      	lsrs	r3, r3, #16
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	5c001000 	.word	0x5c001000

08003aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003abc:	4b0b      	ldr	r3, [pc, #44]	@ (8003aec <__NVIC_SetPriorityGrouping+0x40>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ac8:	4013      	ands	r3, r2
 8003aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ad4:	4b06      	ldr	r3, [pc, #24]	@ (8003af0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ada:	4a04      	ldr	r2, [pc, #16]	@ (8003aec <__NVIC_SetPriorityGrouping+0x40>)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	60d3      	str	r3, [r2, #12]
}
 8003ae0:	bf00      	nop
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	e000ed00 	.word	0xe000ed00
 8003af0:	05fa0000 	.word	0x05fa0000

08003af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003af8:	4b04      	ldr	r3, [pc, #16]	@ (8003b0c <__NVIC_GetPriorityGrouping+0x18>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	0a1b      	lsrs	r3, r3, #8
 8003afe:	f003 0307 	and.w	r3, r3, #7
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	e000ed00 	.word	0xe000ed00

08003b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	db0b      	blt.n	8003b3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b22:	88fb      	ldrh	r3, [r7, #6]
 8003b24:	f003 021f 	and.w	r2, r3, #31
 8003b28:	4907      	ldr	r1, [pc, #28]	@ (8003b48 <__NVIC_EnableIRQ+0x38>)
 8003b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	2001      	movs	r0, #1
 8003b32:	fa00 f202 	lsl.w	r2, r0, r2
 8003b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	e000e100 	.word	0xe000e100

08003b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	6039      	str	r1, [r7, #0]
 8003b56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	db0a      	blt.n	8003b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	490c      	ldr	r1, [pc, #48]	@ (8003b98 <__NVIC_SetPriority+0x4c>)
 8003b66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b6a:	0112      	lsls	r2, r2, #4
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	440b      	add	r3, r1
 8003b70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b74:	e00a      	b.n	8003b8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	4908      	ldr	r1, [pc, #32]	@ (8003b9c <__NVIC_SetPriority+0x50>)
 8003b7c:	88fb      	ldrh	r3, [r7, #6]
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	3b04      	subs	r3, #4
 8003b84:	0112      	lsls	r2, r2, #4
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	440b      	add	r3, r1
 8003b8a:	761a      	strb	r2, [r3, #24]
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	e000e100 	.word	0xe000e100
 8003b9c:	e000ed00 	.word	0xe000ed00

08003ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b089      	sub	sp, #36	@ 0x24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f1c3 0307 	rsb	r3, r3, #7
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	bf28      	it	cs
 8003bbe:	2304      	movcs	r3, #4
 8003bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	2b06      	cmp	r3, #6
 8003bc8:	d902      	bls.n	8003bd0 <NVIC_EncodePriority+0x30>
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	3b03      	subs	r3, #3
 8003bce:	e000      	b.n	8003bd2 <NVIC_EncodePriority+0x32>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	43da      	mvns	r2, r3
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	401a      	ands	r2, r3
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003be8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf2:	43d9      	mvns	r1, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf8:	4313      	orrs	r3, r2
         );
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3724      	adds	r7, #36	@ 0x24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
	...

08003c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c18:	d301      	bcc.n	8003c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e00f      	b.n	8003c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8003c48 <SysTick_Config+0x40>)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c26:	210f      	movs	r1, #15
 8003c28:	f04f 30ff 	mov.w	r0, #4294967295
 8003c2c:	f7ff ff8e 	bl	8003b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c30:	4b05      	ldr	r3, [pc, #20]	@ (8003c48 <SysTick_Config+0x40>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c36:	4b04      	ldr	r3, [pc, #16]	@ (8003c48 <SysTick_Config+0x40>)
 8003c38:	2207      	movs	r2, #7
 8003c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	e000e010 	.word	0xe000e010

08003c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff ff29 	bl	8003aac <__NVIC_SetPriorityGrouping>
}
 8003c5a:	bf00      	nop
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b086      	sub	sp, #24
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	4603      	mov	r3, r0
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	607a      	str	r2, [r7, #4]
 8003c6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c70:	f7ff ff40 	bl	8003af4 <__NVIC_GetPriorityGrouping>
 8003c74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	68b9      	ldr	r1, [r7, #8]
 8003c7a:	6978      	ldr	r0, [r7, #20]
 8003c7c:	f7ff ff90 	bl	8003ba0 <NVIC_EncodePriority>
 8003c80:	4602      	mov	r2, r0
 8003c82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c86:	4611      	mov	r1, r2
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff ff5f 	bl	8003b4c <__NVIC_SetPriority>
}
 8003c8e:	bf00      	nop
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ca0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff ff33 	bl	8003b10 <__NVIC_EnableIRQ>
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b082      	sub	sp, #8
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff ffa4 	bl	8003c08 <SysTick_Config>
 8003cc0:	4603      	mov	r3, r0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003cd0:	f3bf 8f5f 	dmb	sy
}
 8003cd4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003cd6:	4b07      	ldr	r3, [pc, #28]	@ (8003cf4 <HAL_MPU_Disable+0x28>)
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cda:	4a06      	ldr	r2, [pc, #24]	@ (8003cf4 <HAL_MPU_Disable+0x28>)
 8003cdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ce0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003ce2:	4b05      	ldr	r3, [pc, #20]	@ (8003cf8 <HAL_MPU_Disable+0x2c>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	605a      	str	r2, [r3, #4]
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	e000ed00 	.word	0xe000ed00
 8003cf8:	e000ed90 	.word	0xe000ed90

08003cfc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003d04:	4a0b      	ldr	r2, [pc, #44]	@ (8003d34 <HAL_MPU_Enable+0x38>)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d38 <HAL_MPU_Enable+0x3c>)
 8003d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d12:	4a09      	ldr	r2, [pc, #36]	@ (8003d38 <HAL_MPU_Enable+0x3c>)
 8003d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d18:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003d1a:	f3bf 8f4f 	dsb	sy
}
 8003d1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d20:	f3bf 8f6f 	isb	sy
}
 8003d24:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	e000ed90 	.word	0xe000ed90
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	785a      	ldrb	r2, [r3, #1]
 8003d48:	4b1b      	ldr	r3, [pc, #108]	@ (8003db8 <HAL_MPU_ConfigRegion+0x7c>)
 8003d4a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003db8 <HAL_MPU_ConfigRegion+0x7c>)
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	4a19      	ldr	r2, [pc, #100]	@ (8003db8 <HAL_MPU_ConfigRegion+0x7c>)
 8003d52:	f023 0301 	bic.w	r3, r3, #1
 8003d56:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003d58:	4a17      	ldr	r2, [pc, #92]	@ (8003db8 <HAL_MPU_ConfigRegion+0x7c>)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	7b1b      	ldrb	r3, [r3, #12]
 8003d64:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	7adb      	ldrb	r3, [r3, #11]
 8003d6a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	7a9b      	ldrb	r3, [r3, #10]
 8003d72:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003d74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	7b5b      	ldrb	r3, [r3, #13]
 8003d7a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003d7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	7b9b      	ldrb	r3, [r3, #14]
 8003d82:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003d84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	7bdb      	ldrb	r3, [r3, #15]
 8003d8a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003d8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	7a5b      	ldrb	r3, [r3, #9]
 8003d92:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003d94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	7a1b      	ldrb	r3, [r3, #8]
 8003d9a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003d9c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	7812      	ldrb	r2, [r2, #0]
 8003da2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003da4:	4a04      	ldr	r2, [pc, #16]	@ (8003db8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003da6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003da8:	6113      	str	r3, [r2, #16]
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	e000ed90 	.word	0xe000ed90

08003dbc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003dc4:	f7ff fe5a 	bl	8003a7c <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e2dc      	b.n	800438e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d008      	beq.n	8003df2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2280      	movs	r2, #128	@ 0x80
 8003de4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e2cd      	b.n	800438e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a76      	ldr	r2, [pc, #472]	@ (8003fd0 <HAL_DMA_Abort+0x214>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d04a      	beq.n	8003e92 <HAL_DMA_Abort+0xd6>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a74      	ldr	r2, [pc, #464]	@ (8003fd4 <HAL_DMA_Abort+0x218>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d045      	beq.n	8003e92 <HAL_DMA_Abort+0xd6>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a73      	ldr	r2, [pc, #460]	@ (8003fd8 <HAL_DMA_Abort+0x21c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d040      	beq.n	8003e92 <HAL_DMA_Abort+0xd6>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a71      	ldr	r2, [pc, #452]	@ (8003fdc <HAL_DMA_Abort+0x220>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d03b      	beq.n	8003e92 <HAL_DMA_Abort+0xd6>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a70      	ldr	r2, [pc, #448]	@ (8003fe0 <HAL_DMA_Abort+0x224>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d036      	beq.n	8003e92 <HAL_DMA_Abort+0xd6>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a6e      	ldr	r2, [pc, #440]	@ (8003fe4 <HAL_DMA_Abort+0x228>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d031      	beq.n	8003e92 <HAL_DMA_Abort+0xd6>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a6d      	ldr	r2, [pc, #436]	@ (8003fe8 <HAL_DMA_Abort+0x22c>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d02c      	beq.n	8003e92 <HAL_DMA_Abort+0xd6>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a6b      	ldr	r2, [pc, #428]	@ (8003fec <HAL_DMA_Abort+0x230>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d027      	beq.n	8003e92 <HAL_DMA_Abort+0xd6>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a6a      	ldr	r2, [pc, #424]	@ (8003ff0 <HAL_DMA_Abort+0x234>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d022      	beq.n	8003e92 <HAL_DMA_Abort+0xd6>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a68      	ldr	r2, [pc, #416]	@ (8003ff4 <HAL_DMA_Abort+0x238>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d01d      	beq.n	8003e92 <HAL_DMA_Abort+0xd6>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a67      	ldr	r2, [pc, #412]	@ (8003ff8 <HAL_DMA_Abort+0x23c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d018      	beq.n	8003e92 <HAL_DMA_Abort+0xd6>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a65      	ldr	r2, [pc, #404]	@ (8003ffc <HAL_DMA_Abort+0x240>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <HAL_DMA_Abort+0xd6>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a64      	ldr	r2, [pc, #400]	@ (8004000 <HAL_DMA_Abort+0x244>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d00e      	beq.n	8003e92 <HAL_DMA_Abort+0xd6>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a62      	ldr	r2, [pc, #392]	@ (8004004 <HAL_DMA_Abort+0x248>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d009      	beq.n	8003e92 <HAL_DMA_Abort+0xd6>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a61      	ldr	r2, [pc, #388]	@ (8004008 <HAL_DMA_Abort+0x24c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d004      	beq.n	8003e92 <HAL_DMA_Abort+0xd6>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a5f      	ldr	r2, [pc, #380]	@ (800400c <HAL_DMA_Abort+0x250>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d101      	bne.n	8003e96 <HAL_DMA_Abort+0xda>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <HAL_DMA_Abort+0xdc>
 8003e96:	2300      	movs	r3, #0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d013      	beq.n	8003ec4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 021e 	bic.w	r2, r2, #30
 8003eaa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695a      	ldr	r2, [r3, #20]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003eba:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	e00a      	b.n	8003eda <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 020e 	bic.w	r2, r2, #14
 8003ed2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a3c      	ldr	r2, [pc, #240]	@ (8003fd0 <HAL_DMA_Abort+0x214>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d072      	beq.n	8003fca <HAL_DMA_Abort+0x20e>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a3a      	ldr	r2, [pc, #232]	@ (8003fd4 <HAL_DMA_Abort+0x218>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d06d      	beq.n	8003fca <HAL_DMA_Abort+0x20e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a39      	ldr	r2, [pc, #228]	@ (8003fd8 <HAL_DMA_Abort+0x21c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d068      	beq.n	8003fca <HAL_DMA_Abort+0x20e>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a37      	ldr	r2, [pc, #220]	@ (8003fdc <HAL_DMA_Abort+0x220>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d063      	beq.n	8003fca <HAL_DMA_Abort+0x20e>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a36      	ldr	r2, [pc, #216]	@ (8003fe0 <HAL_DMA_Abort+0x224>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d05e      	beq.n	8003fca <HAL_DMA_Abort+0x20e>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a34      	ldr	r2, [pc, #208]	@ (8003fe4 <HAL_DMA_Abort+0x228>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d059      	beq.n	8003fca <HAL_DMA_Abort+0x20e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a33      	ldr	r2, [pc, #204]	@ (8003fe8 <HAL_DMA_Abort+0x22c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d054      	beq.n	8003fca <HAL_DMA_Abort+0x20e>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a31      	ldr	r2, [pc, #196]	@ (8003fec <HAL_DMA_Abort+0x230>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d04f      	beq.n	8003fca <HAL_DMA_Abort+0x20e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a30      	ldr	r2, [pc, #192]	@ (8003ff0 <HAL_DMA_Abort+0x234>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d04a      	beq.n	8003fca <HAL_DMA_Abort+0x20e>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a2e      	ldr	r2, [pc, #184]	@ (8003ff4 <HAL_DMA_Abort+0x238>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d045      	beq.n	8003fca <HAL_DMA_Abort+0x20e>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a2d      	ldr	r2, [pc, #180]	@ (8003ff8 <HAL_DMA_Abort+0x23c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d040      	beq.n	8003fca <HAL_DMA_Abort+0x20e>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a2b      	ldr	r2, [pc, #172]	@ (8003ffc <HAL_DMA_Abort+0x240>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d03b      	beq.n	8003fca <HAL_DMA_Abort+0x20e>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a2a      	ldr	r2, [pc, #168]	@ (8004000 <HAL_DMA_Abort+0x244>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d036      	beq.n	8003fca <HAL_DMA_Abort+0x20e>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a28      	ldr	r2, [pc, #160]	@ (8004004 <HAL_DMA_Abort+0x248>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d031      	beq.n	8003fca <HAL_DMA_Abort+0x20e>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a27      	ldr	r2, [pc, #156]	@ (8004008 <HAL_DMA_Abort+0x24c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d02c      	beq.n	8003fca <HAL_DMA_Abort+0x20e>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a25      	ldr	r2, [pc, #148]	@ (800400c <HAL_DMA_Abort+0x250>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d027      	beq.n	8003fca <HAL_DMA_Abort+0x20e>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a24      	ldr	r2, [pc, #144]	@ (8004010 <HAL_DMA_Abort+0x254>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d022      	beq.n	8003fca <HAL_DMA_Abort+0x20e>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a22      	ldr	r2, [pc, #136]	@ (8004014 <HAL_DMA_Abort+0x258>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d01d      	beq.n	8003fca <HAL_DMA_Abort+0x20e>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a21      	ldr	r2, [pc, #132]	@ (8004018 <HAL_DMA_Abort+0x25c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d018      	beq.n	8003fca <HAL_DMA_Abort+0x20e>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800401c <HAL_DMA_Abort+0x260>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <HAL_DMA_Abort+0x20e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8004020 <HAL_DMA_Abort+0x264>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00e      	beq.n	8003fca <HAL_DMA_Abort+0x20e>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a1c      	ldr	r2, [pc, #112]	@ (8004024 <HAL_DMA_Abort+0x268>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d009      	beq.n	8003fca <HAL_DMA_Abort+0x20e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a1b      	ldr	r2, [pc, #108]	@ (8004028 <HAL_DMA_Abort+0x26c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d004      	beq.n	8003fca <HAL_DMA_Abort+0x20e>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a19      	ldr	r2, [pc, #100]	@ (800402c <HAL_DMA_Abort+0x270>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d132      	bne.n	8004030 <HAL_DMA_Abort+0x274>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e031      	b.n	8004032 <HAL_DMA_Abort+0x276>
 8003fce:	bf00      	nop
 8003fd0:	40020010 	.word	0x40020010
 8003fd4:	40020028 	.word	0x40020028
 8003fd8:	40020040 	.word	0x40020040
 8003fdc:	40020058 	.word	0x40020058
 8003fe0:	40020070 	.word	0x40020070
 8003fe4:	40020088 	.word	0x40020088
 8003fe8:	400200a0 	.word	0x400200a0
 8003fec:	400200b8 	.word	0x400200b8
 8003ff0:	40020410 	.word	0x40020410
 8003ff4:	40020428 	.word	0x40020428
 8003ff8:	40020440 	.word	0x40020440
 8003ffc:	40020458 	.word	0x40020458
 8004000:	40020470 	.word	0x40020470
 8004004:	40020488 	.word	0x40020488
 8004008:	400204a0 	.word	0x400204a0
 800400c:	400204b8 	.word	0x400204b8
 8004010:	58025408 	.word	0x58025408
 8004014:	5802541c 	.word	0x5802541c
 8004018:	58025430 	.word	0x58025430
 800401c:	58025444 	.word	0x58025444
 8004020:	58025458 	.word	0x58025458
 8004024:	5802546c 	.word	0x5802546c
 8004028:	58025480 	.word	0x58025480
 800402c:	58025494 	.word	0x58025494
 8004030:	2300      	movs	r3, #0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d007      	beq.n	8004046 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004040:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004044:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a6d      	ldr	r2, [pc, #436]	@ (8004200 <HAL_DMA_Abort+0x444>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d04a      	beq.n	80040e6 <HAL_DMA_Abort+0x32a>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a6b      	ldr	r2, [pc, #428]	@ (8004204 <HAL_DMA_Abort+0x448>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d045      	beq.n	80040e6 <HAL_DMA_Abort+0x32a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a6a      	ldr	r2, [pc, #424]	@ (8004208 <HAL_DMA_Abort+0x44c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d040      	beq.n	80040e6 <HAL_DMA_Abort+0x32a>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a68      	ldr	r2, [pc, #416]	@ (800420c <HAL_DMA_Abort+0x450>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d03b      	beq.n	80040e6 <HAL_DMA_Abort+0x32a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a67      	ldr	r2, [pc, #412]	@ (8004210 <HAL_DMA_Abort+0x454>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d036      	beq.n	80040e6 <HAL_DMA_Abort+0x32a>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a65      	ldr	r2, [pc, #404]	@ (8004214 <HAL_DMA_Abort+0x458>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d031      	beq.n	80040e6 <HAL_DMA_Abort+0x32a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a64      	ldr	r2, [pc, #400]	@ (8004218 <HAL_DMA_Abort+0x45c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d02c      	beq.n	80040e6 <HAL_DMA_Abort+0x32a>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a62      	ldr	r2, [pc, #392]	@ (800421c <HAL_DMA_Abort+0x460>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d027      	beq.n	80040e6 <HAL_DMA_Abort+0x32a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a61      	ldr	r2, [pc, #388]	@ (8004220 <HAL_DMA_Abort+0x464>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d022      	beq.n	80040e6 <HAL_DMA_Abort+0x32a>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a5f      	ldr	r2, [pc, #380]	@ (8004224 <HAL_DMA_Abort+0x468>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d01d      	beq.n	80040e6 <HAL_DMA_Abort+0x32a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a5e      	ldr	r2, [pc, #376]	@ (8004228 <HAL_DMA_Abort+0x46c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d018      	beq.n	80040e6 <HAL_DMA_Abort+0x32a>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a5c      	ldr	r2, [pc, #368]	@ (800422c <HAL_DMA_Abort+0x470>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d013      	beq.n	80040e6 <HAL_DMA_Abort+0x32a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004230 <HAL_DMA_Abort+0x474>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00e      	beq.n	80040e6 <HAL_DMA_Abort+0x32a>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a59      	ldr	r2, [pc, #356]	@ (8004234 <HAL_DMA_Abort+0x478>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d009      	beq.n	80040e6 <HAL_DMA_Abort+0x32a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a58      	ldr	r2, [pc, #352]	@ (8004238 <HAL_DMA_Abort+0x47c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d004      	beq.n	80040e6 <HAL_DMA_Abort+0x32a>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a56      	ldr	r2, [pc, #344]	@ (800423c <HAL_DMA_Abort+0x480>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d108      	bne.n	80040f8 <HAL_DMA_Abort+0x33c>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0201 	bic.w	r2, r2, #1
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	e007      	b.n	8004108 <HAL_DMA_Abort+0x34c>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0201 	bic.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004108:	e013      	b.n	8004132 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800410a:	f7ff fcb7 	bl	8003a7c <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b05      	cmp	r3, #5
 8004116:	d90c      	bls.n	8004132 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2220      	movs	r2, #32
 800411c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2203      	movs	r2, #3
 8004122:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e12d      	b.n	800438e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1e5      	bne.n	800410a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a2f      	ldr	r2, [pc, #188]	@ (8004200 <HAL_DMA_Abort+0x444>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d04a      	beq.n	80041de <HAL_DMA_Abort+0x422>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a2d      	ldr	r2, [pc, #180]	@ (8004204 <HAL_DMA_Abort+0x448>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d045      	beq.n	80041de <HAL_DMA_Abort+0x422>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a2c      	ldr	r2, [pc, #176]	@ (8004208 <HAL_DMA_Abort+0x44c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d040      	beq.n	80041de <HAL_DMA_Abort+0x422>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a2a      	ldr	r2, [pc, #168]	@ (800420c <HAL_DMA_Abort+0x450>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d03b      	beq.n	80041de <HAL_DMA_Abort+0x422>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a29      	ldr	r2, [pc, #164]	@ (8004210 <HAL_DMA_Abort+0x454>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d036      	beq.n	80041de <HAL_DMA_Abort+0x422>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a27      	ldr	r2, [pc, #156]	@ (8004214 <HAL_DMA_Abort+0x458>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d031      	beq.n	80041de <HAL_DMA_Abort+0x422>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a26      	ldr	r2, [pc, #152]	@ (8004218 <HAL_DMA_Abort+0x45c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d02c      	beq.n	80041de <HAL_DMA_Abort+0x422>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a24      	ldr	r2, [pc, #144]	@ (800421c <HAL_DMA_Abort+0x460>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d027      	beq.n	80041de <HAL_DMA_Abort+0x422>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a23      	ldr	r2, [pc, #140]	@ (8004220 <HAL_DMA_Abort+0x464>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d022      	beq.n	80041de <HAL_DMA_Abort+0x422>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a21      	ldr	r2, [pc, #132]	@ (8004224 <HAL_DMA_Abort+0x468>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d01d      	beq.n	80041de <HAL_DMA_Abort+0x422>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a20      	ldr	r2, [pc, #128]	@ (8004228 <HAL_DMA_Abort+0x46c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d018      	beq.n	80041de <HAL_DMA_Abort+0x422>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a1e      	ldr	r2, [pc, #120]	@ (800422c <HAL_DMA_Abort+0x470>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d013      	beq.n	80041de <HAL_DMA_Abort+0x422>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a1d      	ldr	r2, [pc, #116]	@ (8004230 <HAL_DMA_Abort+0x474>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d00e      	beq.n	80041de <HAL_DMA_Abort+0x422>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004234 <HAL_DMA_Abort+0x478>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d009      	beq.n	80041de <HAL_DMA_Abort+0x422>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004238 <HAL_DMA_Abort+0x47c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d004      	beq.n	80041de <HAL_DMA_Abort+0x422>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a18      	ldr	r2, [pc, #96]	@ (800423c <HAL_DMA_Abort+0x480>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d101      	bne.n	80041e2 <HAL_DMA_Abort+0x426>
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <HAL_DMA_Abort+0x428>
 80041e2:	2300      	movs	r3, #0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d02b      	beq.n	8004240 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ec:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f2:	f003 031f 	and.w	r3, r3, #31
 80041f6:	223f      	movs	r2, #63	@ 0x3f
 80041f8:	409a      	lsls	r2, r3
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	609a      	str	r2, [r3, #8]
 80041fe:	e02a      	b.n	8004256 <HAL_DMA_Abort+0x49a>
 8004200:	40020010 	.word	0x40020010
 8004204:	40020028 	.word	0x40020028
 8004208:	40020040 	.word	0x40020040
 800420c:	40020058 	.word	0x40020058
 8004210:	40020070 	.word	0x40020070
 8004214:	40020088 	.word	0x40020088
 8004218:	400200a0 	.word	0x400200a0
 800421c:	400200b8 	.word	0x400200b8
 8004220:	40020410 	.word	0x40020410
 8004224:	40020428 	.word	0x40020428
 8004228:	40020440 	.word	0x40020440
 800422c:	40020458 	.word	0x40020458
 8004230:	40020470 	.word	0x40020470
 8004234:	40020488 	.word	0x40020488
 8004238:	400204a0 	.word	0x400204a0
 800423c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004244:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800424a:	f003 031f 	and.w	r3, r3, #31
 800424e:	2201      	movs	r2, #1
 8004250:	409a      	lsls	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a4f      	ldr	r2, [pc, #316]	@ (8004398 <HAL_DMA_Abort+0x5dc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d072      	beq.n	8004346 <HAL_DMA_Abort+0x58a>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a4d      	ldr	r2, [pc, #308]	@ (800439c <HAL_DMA_Abort+0x5e0>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d06d      	beq.n	8004346 <HAL_DMA_Abort+0x58a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a4c      	ldr	r2, [pc, #304]	@ (80043a0 <HAL_DMA_Abort+0x5e4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d068      	beq.n	8004346 <HAL_DMA_Abort+0x58a>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a4a      	ldr	r2, [pc, #296]	@ (80043a4 <HAL_DMA_Abort+0x5e8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d063      	beq.n	8004346 <HAL_DMA_Abort+0x58a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a49      	ldr	r2, [pc, #292]	@ (80043a8 <HAL_DMA_Abort+0x5ec>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d05e      	beq.n	8004346 <HAL_DMA_Abort+0x58a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a47      	ldr	r2, [pc, #284]	@ (80043ac <HAL_DMA_Abort+0x5f0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d059      	beq.n	8004346 <HAL_DMA_Abort+0x58a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a46      	ldr	r2, [pc, #280]	@ (80043b0 <HAL_DMA_Abort+0x5f4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d054      	beq.n	8004346 <HAL_DMA_Abort+0x58a>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a44      	ldr	r2, [pc, #272]	@ (80043b4 <HAL_DMA_Abort+0x5f8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d04f      	beq.n	8004346 <HAL_DMA_Abort+0x58a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a43      	ldr	r2, [pc, #268]	@ (80043b8 <HAL_DMA_Abort+0x5fc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d04a      	beq.n	8004346 <HAL_DMA_Abort+0x58a>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a41      	ldr	r2, [pc, #260]	@ (80043bc <HAL_DMA_Abort+0x600>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d045      	beq.n	8004346 <HAL_DMA_Abort+0x58a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a40      	ldr	r2, [pc, #256]	@ (80043c0 <HAL_DMA_Abort+0x604>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d040      	beq.n	8004346 <HAL_DMA_Abort+0x58a>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a3e      	ldr	r2, [pc, #248]	@ (80043c4 <HAL_DMA_Abort+0x608>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d03b      	beq.n	8004346 <HAL_DMA_Abort+0x58a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a3d      	ldr	r2, [pc, #244]	@ (80043c8 <HAL_DMA_Abort+0x60c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d036      	beq.n	8004346 <HAL_DMA_Abort+0x58a>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a3b      	ldr	r2, [pc, #236]	@ (80043cc <HAL_DMA_Abort+0x610>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d031      	beq.n	8004346 <HAL_DMA_Abort+0x58a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a3a      	ldr	r2, [pc, #232]	@ (80043d0 <HAL_DMA_Abort+0x614>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d02c      	beq.n	8004346 <HAL_DMA_Abort+0x58a>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a38      	ldr	r2, [pc, #224]	@ (80043d4 <HAL_DMA_Abort+0x618>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d027      	beq.n	8004346 <HAL_DMA_Abort+0x58a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a37      	ldr	r2, [pc, #220]	@ (80043d8 <HAL_DMA_Abort+0x61c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d022      	beq.n	8004346 <HAL_DMA_Abort+0x58a>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a35      	ldr	r2, [pc, #212]	@ (80043dc <HAL_DMA_Abort+0x620>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d01d      	beq.n	8004346 <HAL_DMA_Abort+0x58a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a34      	ldr	r2, [pc, #208]	@ (80043e0 <HAL_DMA_Abort+0x624>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d018      	beq.n	8004346 <HAL_DMA_Abort+0x58a>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a32      	ldr	r2, [pc, #200]	@ (80043e4 <HAL_DMA_Abort+0x628>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d013      	beq.n	8004346 <HAL_DMA_Abort+0x58a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a31      	ldr	r2, [pc, #196]	@ (80043e8 <HAL_DMA_Abort+0x62c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d00e      	beq.n	8004346 <HAL_DMA_Abort+0x58a>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a2f      	ldr	r2, [pc, #188]	@ (80043ec <HAL_DMA_Abort+0x630>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d009      	beq.n	8004346 <HAL_DMA_Abort+0x58a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a2e      	ldr	r2, [pc, #184]	@ (80043f0 <HAL_DMA_Abort+0x634>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d004      	beq.n	8004346 <HAL_DMA_Abort+0x58a>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a2c      	ldr	r2, [pc, #176]	@ (80043f4 <HAL_DMA_Abort+0x638>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d101      	bne.n	800434a <HAL_DMA_Abort+0x58e>
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <HAL_DMA_Abort+0x590>
 800434a:	2300      	movs	r3, #0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d015      	beq.n	800437c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004358:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00c      	beq.n	800437c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800436c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004370:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800437a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40020010 	.word	0x40020010
 800439c:	40020028 	.word	0x40020028
 80043a0:	40020040 	.word	0x40020040
 80043a4:	40020058 	.word	0x40020058
 80043a8:	40020070 	.word	0x40020070
 80043ac:	40020088 	.word	0x40020088
 80043b0:	400200a0 	.word	0x400200a0
 80043b4:	400200b8 	.word	0x400200b8
 80043b8:	40020410 	.word	0x40020410
 80043bc:	40020428 	.word	0x40020428
 80043c0:	40020440 	.word	0x40020440
 80043c4:	40020458 	.word	0x40020458
 80043c8:	40020470 	.word	0x40020470
 80043cc:	40020488 	.word	0x40020488
 80043d0:	400204a0 	.word	0x400204a0
 80043d4:	400204b8 	.word	0x400204b8
 80043d8:	58025408 	.word	0x58025408
 80043dc:	5802541c 	.word	0x5802541c
 80043e0:	58025430 	.word	0x58025430
 80043e4:	58025444 	.word	0x58025444
 80043e8:	58025458 	.word	0x58025458
 80043ec:	5802546c 	.word	0x5802546c
 80043f0:	58025480 	.word	0x58025480
 80043f4:	58025494 	.word	0x58025494

080043f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e237      	b.n	800487a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d004      	beq.n	8004420 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2280      	movs	r2, #128	@ 0x80
 800441a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e22c      	b.n	800487a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a5c      	ldr	r2, [pc, #368]	@ (8004598 <HAL_DMA_Abort_IT+0x1a0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d04a      	beq.n	80044c0 <HAL_DMA_Abort_IT+0xc8>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a5b      	ldr	r2, [pc, #364]	@ (800459c <HAL_DMA_Abort_IT+0x1a4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d045      	beq.n	80044c0 <HAL_DMA_Abort_IT+0xc8>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a59      	ldr	r2, [pc, #356]	@ (80045a0 <HAL_DMA_Abort_IT+0x1a8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d040      	beq.n	80044c0 <HAL_DMA_Abort_IT+0xc8>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a58      	ldr	r2, [pc, #352]	@ (80045a4 <HAL_DMA_Abort_IT+0x1ac>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d03b      	beq.n	80044c0 <HAL_DMA_Abort_IT+0xc8>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a56      	ldr	r2, [pc, #344]	@ (80045a8 <HAL_DMA_Abort_IT+0x1b0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d036      	beq.n	80044c0 <HAL_DMA_Abort_IT+0xc8>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a55      	ldr	r2, [pc, #340]	@ (80045ac <HAL_DMA_Abort_IT+0x1b4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d031      	beq.n	80044c0 <HAL_DMA_Abort_IT+0xc8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a53      	ldr	r2, [pc, #332]	@ (80045b0 <HAL_DMA_Abort_IT+0x1b8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d02c      	beq.n	80044c0 <HAL_DMA_Abort_IT+0xc8>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a52      	ldr	r2, [pc, #328]	@ (80045b4 <HAL_DMA_Abort_IT+0x1bc>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d027      	beq.n	80044c0 <HAL_DMA_Abort_IT+0xc8>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a50      	ldr	r2, [pc, #320]	@ (80045b8 <HAL_DMA_Abort_IT+0x1c0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d022      	beq.n	80044c0 <HAL_DMA_Abort_IT+0xc8>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a4f      	ldr	r2, [pc, #316]	@ (80045bc <HAL_DMA_Abort_IT+0x1c4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d01d      	beq.n	80044c0 <HAL_DMA_Abort_IT+0xc8>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a4d      	ldr	r2, [pc, #308]	@ (80045c0 <HAL_DMA_Abort_IT+0x1c8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d018      	beq.n	80044c0 <HAL_DMA_Abort_IT+0xc8>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a4c      	ldr	r2, [pc, #304]	@ (80045c4 <HAL_DMA_Abort_IT+0x1cc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d013      	beq.n	80044c0 <HAL_DMA_Abort_IT+0xc8>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a4a      	ldr	r2, [pc, #296]	@ (80045c8 <HAL_DMA_Abort_IT+0x1d0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00e      	beq.n	80044c0 <HAL_DMA_Abort_IT+0xc8>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a49      	ldr	r2, [pc, #292]	@ (80045cc <HAL_DMA_Abort_IT+0x1d4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d009      	beq.n	80044c0 <HAL_DMA_Abort_IT+0xc8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a47      	ldr	r2, [pc, #284]	@ (80045d0 <HAL_DMA_Abort_IT+0x1d8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d004      	beq.n	80044c0 <HAL_DMA_Abort_IT+0xc8>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a46      	ldr	r2, [pc, #280]	@ (80045d4 <HAL_DMA_Abort_IT+0x1dc>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d101      	bne.n	80044c4 <HAL_DMA_Abort_IT+0xcc>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <HAL_DMA_Abort_IT+0xce>
 80044c4:	2300      	movs	r3, #0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 8086 	beq.w	80045d8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2204      	movs	r2, #4
 80044d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a2f      	ldr	r2, [pc, #188]	@ (8004598 <HAL_DMA_Abort_IT+0x1a0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d04a      	beq.n	8004574 <HAL_DMA_Abort_IT+0x17c>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a2e      	ldr	r2, [pc, #184]	@ (800459c <HAL_DMA_Abort_IT+0x1a4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d045      	beq.n	8004574 <HAL_DMA_Abort_IT+0x17c>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a2c      	ldr	r2, [pc, #176]	@ (80045a0 <HAL_DMA_Abort_IT+0x1a8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d040      	beq.n	8004574 <HAL_DMA_Abort_IT+0x17c>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a2b      	ldr	r2, [pc, #172]	@ (80045a4 <HAL_DMA_Abort_IT+0x1ac>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d03b      	beq.n	8004574 <HAL_DMA_Abort_IT+0x17c>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a29      	ldr	r2, [pc, #164]	@ (80045a8 <HAL_DMA_Abort_IT+0x1b0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d036      	beq.n	8004574 <HAL_DMA_Abort_IT+0x17c>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a28      	ldr	r2, [pc, #160]	@ (80045ac <HAL_DMA_Abort_IT+0x1b4>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d031      	beq.n	8004574 <HAL_DMA_Abort_IT+0x17c>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a26      	ldr	r2, [pc, #152]	@ (80045b0 <HAL_DMA_Abort_IT+0x1b8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d02c      	beq.n	8004574 <HAL_DMA_Abort_IT+0x17c>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a25      	ldr	r2, [pc, #148]	@ (80045b4 <HAL_DMA_Abort_IT+0x1bc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d027      	beq.n	8004574 <HAL_DMA_Abort_IT+0x17c>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a23      	ldr	r2, [pc, #140]	@ (80045b8 <HAL_DMA_Abort_IT+0x1c0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d022      	beq.n	8004574 <HAL_DMA_Abort_IT+0x17c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a22      	ldr	r2, [pc, #136]	@ (80045bc <HAL_DMA_Abort_IT+0x1c4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d01d      	beq.n	8004574 <HAL_DMA_Abort_IT+0x17c>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a20      	ldr	r2, [pc, #128]	@ (80045c0 <HAL_DMA_Abort_IT+0x1c8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d018      	beq.n	8004574 <HAL_DMA_Abort_IT+0x17c>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a1f      	ldr	r2, [pc, #124]	@ (80045c4 <HAL_DMA_Abort_IT+0x1cc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d013      	beq.n	8004574 <HAL_DMA_Abort_IT+0x17c>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1d      	ldr	r2, [pc, #116]	@ (80045c8 <HAL_DMA_Abort_IT+0x1d0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00e      	beq.n	8004574 <HAL_DMA_Abort_IT+0x17c>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1c      	ldr	r2, [pc, #112]	@ (80045cc <HAL_DMA_Abort_IT+0x1d4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d009      	beq.n	8004574 <HAL_DMA_Abort_IT+0x17c>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1a      	ldr	r2, [pc, #104]	@ (80045d0 <HAL_DMA_Abort_IT+0x1d8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d004      	beq.n	8004574 <HAL_DMA_Abort_IT+0x17c>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a19      	ldr	r2, [pc, #100]	@ (80045d4 <HAL_DMA_Abort_IT+0x1dc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d108      	bne.n	8004586 <HAL_DMA_Abort_IT+0x18e>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0201 	bic.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	e178      	b.n	8004878 <HAL_DMA_Abort_IT+0x480>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0201 	bic.w	r2, r2, #1
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	e16f      	b.n	8004878 <HAL_DMA_Abort_IT+0x480>
 8004598:	40020010 	.word	0x40020010
 800459c:	40020028 	.word	0x40020028
 80045a0:	40020040 	.word	0x40020040
 80045a4:	40020058 	.word	0x40020058
 80045a8:	40020070 	.word	0x40020070
 80045ac:	40020088 	.word	0x40020088
 80045b0:	400200a0 	.word	0x400200a0
 80045b4:	400200b8 	.word	0x400200b8
 80045b8:	40020410 	.word	0x40020410
 80045bc:	40020428 	.word	0x40020428
 80045c0:	40020440 	.word	0x40020440
 80045c4:	40020458 	.word	0x40020458
 80045c8:	40020470 	.word	0x40020470
 80045cc:	40020488 	.word	0x40020488
 80045d0:	400204a0 	.word	0x400204a0
 80045d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 020e 	bic.w	r2, r2, #14
 80045e6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a6c      	ldr	r2, [pc, #432]	@ (80047a0 <HAL_DMA_Abort_IT+0x3a8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d04a      	beq.n	8004688 <HAL_DMA_Abort_IT+0x290>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a6b      	ldr	r2, [pc, #428]	@ (80047a4 <HAL_DMA_Abort_IT+0x3ac>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d045      	beq.n	8004688 <HAL_DMA_Abort_IT+0x290>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a69      	ldr	r2, [pc, #420]	@ (80047a8 <HAL_DMA_Abort_IT+0x3b0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d040      	beq.n	8004688 <HAL_DMA_Abort_IT+0x290>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a68      	ldr	r2, [pc, #416]	@ (80047ac <HAL_DMA_Abort_IT+0x3b4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d03b      	beq.n	8004688 <HAL_DMA_Abort_IT+0x290>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a66      	ldr	r2, [pc, #408]	@ (80047b0 <HAL_DMA_Abort_IT+0x3b8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d036      	beq.n	8004688 <HAL_DMA_Abort_IT+0x290>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a65      	ldr	r2, [pc, #404]	@ (80047b4 <HAL_DMA_Abort_IT+0x3bc>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d031      	beq.n	8004688 <HAL_DMA_Abort_IT+0x290>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a63      	ldr	r2, [pc, #396]	@ (80047b8 <HAL_DMA_Abort_IT+0x3c0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d02c      	beq.n	8004688 <HAL_DMA_Abort_IT+0x290>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a62      	ldr	r2, [pc, #392]	@ (80047bc <HAL_DMA_Abort_IT+0x3c4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d027      	beq.n	8004688 <HAL_DMA_Abort_IT+0x290>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a60      	ldr	r2, [pc, #384]	@ (80047c0 <HAL_DMA_Abort_IT+0x3c8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d022      	beq.n	8004688 <HAL_DMA_Abort_IT+0x290>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a5f      	ldr	r2, [pc, #380]	@ (80047c4 <HAL_DMA_Abort_IT+0x3cc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d01d      	beq.n	8004688 <HAL_DMA_Abort_IT+0x290>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a5d      	ldr	r2, [pc, #372]	@ (80047c8 <HAL_DMA_Abort_IT+0x3d0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d018      	beq.n	8004688 <HAL_DMA_Abort_IT+0x290>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a5c      	ldr	r2, [pc, #368]	@ (80047cc <HAL_DMA_Abort_IT+0x3d4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d013      	beq.n	8004688 <HAL_DMA_Abort_IT+0x290>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a5a      	ldr	r2, [pc, #360]	@ (80047d0 <HAL_DMA_Abort_IT+0x3d8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00e      	beq.n	8004688 <HAL_DMA_Abort_IT+0x290>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a59      	ldr	r2, [pc, #356]	@ (80047d4 <HAL_DMA_Abort_IT+0x3dc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d009      	beq.n	8004688 <HAL_DMA_Abort_IT+0x290>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a57      	ldr	r2, [pc, #348]	@ (80047d8 <HAL_DMA_Abort_IT+0x3e0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <HAL_DMA_Abort_IT+0x290>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a56      	ldr	r2, [pc, #344]	@ (80047dc <HAL_DMA_Abort_IT+0x3e4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d108      	bne.n	800469a <HAL_DMA_Abort_IT+0x2a2>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0201 	bic.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	e007      	b.n	80046aa <HAL_DMA_Abort_IT+0x2b2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0201 	bic.w	r2, r2, #1
 80046a8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a3c      	ldr	r2, [pc, #240]	@ (80047a0 <HAL_DMA_Abort_IT+0x3a8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d072      	beq.n	800479a <HAL_DMA_Abort_IT+0x3a2>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a3a      	ldr	r2, [pc, #232]	@ (80047a4 <HAL_DMA_Abort_IT+0x3ac>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d06d      	beq.n	800479a <HAL_DMA_Abort_IT+0x3a2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a39      	ldr	r2, [pc, #228]	@ (80047a8 <HAL_DMA_Abort_IT+0x3b0>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d068      	beq.n	800479a <HAL_DMA_Abort_IT+0x3a2>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a37      	ldr	r2, [pc, #220]	@ (80047ac <HAL_DMA_Abort_IT+0x3b4>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d063      	beq.n	800479a <HAL_DMA_Abort_IT+0x3a2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a36      	ldr	r2, [pc, #216]	@ (80047b0 <HAL_DMA_Abort_IT+0x3b8>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d05e      	beq.n	800479a <HAL_DMA_Abort_IT+0x3a2>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a34      	ldr	r2, [pc, #208]	@ (80047b4 <HAL_DMA_Abort_IT+0x3bc>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d059      	beq.n	800479a <HAL_DMA_Abort_IT+0x3a2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a33      	ldr	r2, [pc, #204]	@ (80047b8 <HAL_DMA_Abort_IT+0x3c0>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d054      	beq.n	800479a <HAL_DMA_Abort_IT+0x3a2>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a31      	ldr	r2, [pc, #196]	@ (80047bc <HAL_DMA_Abort_IT+0x3c4>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d04f      	beq.n	800479a <HAL_DMA_Abort_IT+0x3a2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a30      	ldr	r2, [pc, #192]	@ (80047c0 <HAL_DMA_Abort_IT+0x3c8>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d04a      	beq.n	800479a <HAL_DMA_Abort_IT+0x3a2>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a2e      	ldr	r2, [pc, #184]	@ (80047c4 <HAL_DMA_Abort_IT+0x3cc>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d045      	beq.n	800479a <HAL_DMA_Abort_IT+0x3a2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a2d      	ldr	r2, [pc, #180]	@ (80047c8 <HAL_DMA_Abort_IT+0x3d0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d040      	beq.n	800479a <HAL_DMA_Abort_IT+0x3a2>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a2b      	ldr	r2, [pc, #172]	@ (80047cc <HAL_DMA_Abort_IT+0x3d4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d03b      	beq.n	800479a <HAL_DMA_Abort_IT+0x3a2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a2a      	ldr	r2, [pc, #168]	@ (80047d0 <HAL_DMA_Abort_IT+0x3d8>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d036      	beq.n	800479a <HAL_DMA_Abort_IT+0x3a2>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a28      	ldr	r2, [pc, #160]	@ (80047d4 <HAL_DMA_Abort_IT+0x3dc>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d031      	beq.n	800479a <HAL_DMA_Abort_IT+0x3a2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a27      	ldr	r2, [pc, #156]	@ (80047d8 <HAL_DMA_Abort_IT+0x3e0>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d02c      	beq.n	800479a <HAL_DMA_Abort_IT+0x3a2>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a25      	ldr	r2, [pc, #148]	@ (80047dc <HAL_DMA_Abort_IT+0x3e4>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d027      	beq.n	800479a <HAL_DMA_Abort_IT+0x3a2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a24      	ldr	r2, [pc, #144]	@ (80047e0 <HAL_DMA_Abort_IT+0x3e8>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d022      	beq.n	800479a <HAL_DMA_Abort_IT+0x3a2>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a22      	ldr	r2, [pc, #136]	@ (80047e4 <HAL_DMA_Abort_IT+0x3ec>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d01d      	beq.n	800479a <HAL_DMA_Abort_IT+0x3a2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a21      	ldr	r2, [pc, #132]	@ (80047e8 <HAL_DMA_Abort_IT+0x3f0>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d018      	beq.n	800479a <HAL_DMA_Abort_IT+0x3a2>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1f      	ldr	r2, [pc, #124]	@ (80047ec <HAL_DMA_Abort_IT+0x3f4>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d013      	beq.n	800479a <HAL_DMA_Abort_IT+0x3a2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1e      	ldr	r2, [pc, #120]	@ (80047f0 <HAL_DMA_Abort_IT+0x3f8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00e      	beq.n	800479a <HAL_DMA_Abort_IT+0x3a2>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1c      	ldr	r2, [pc, #112]	@ (80047f4 <HAL_DMA_Abort_IT+0x3fc>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d009      	beq.n	800479a <HAL_DMA_Abort_IT+0x3a2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a1b      	ldr	r2, [pc, #108]	@ (80047f8 <HAL_DMA_Abort_IT+0x400>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d004      	beq.n	800479a <HAL_DMA_Abort_IT+0x3a2>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a19      	ldr	r2, [pc, #100]	@ (80047fc <HAL_DMA_Abort_IT+0x404>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d132      	bne.n	8004800 <HAL_DMA_Abort_IT+0x408>
 800479a:	2301      	movs	r3, #1
 800479c:	e031      	b.n	8004802 <HAL_DMA_Abort_IT+0x40a>
 800479e:	bf00      	nop
 80047a0:	40020010 	.word	0x40020010
 80047a4:	40020028 	.word	0x40020028
 80047a8:	40020040 	.word	0x40020040
 80047ac:	40020058 	.word	0x40020058
 80047b0:	40020070 	.word	0x40020070
 80047b4:	40020088 	.word	0x40020088
 80047b8:	400200a0 	.word	0x400200a0
 80047bc:	400200b8 	.word	0x400200b8
 80047c0:	40020410 	.word	0x40020410
 80047c4:	40020428 	.word	0x40020428
 80047c8:	40020440 	.word	0x40020440
 80047cc:	40020458 	.word	0x40020458
 80047d0:	40020470 	.word	0x40020470
 80047d4:	40020488 	.word	0x40020488
 80047d8:	400204a0 	.word	0x400204a0
 80047dc:	400204b8 	.word	0x400204b8
 80047e0:	58025408 	.word	0x58025408
 80047e4:	5802541c 	.word	0x5802541c
 80047e8:	58025430 	.word	0x58025430
 80047ec:	58025444 	.word	0x58025444
 80047f0:	58025458 	.word	0x58025458
 80047f4:	5802546c 	.word	0x5802546c
 80047f8:	58025480 	.word	0x58025480
 80047fc:	58025494 	.word	0x58025494
 8004800:	2300      	movs	r3, #0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d028      	beq.n	8004858 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004810:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004814:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004820:	f003 031f 	and.w	r3, r3, #31
 8004824:	2201      	movs	r2, #1
 8004826:	409a      	lsls	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004834:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00c      	beq.n	8004858 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004848:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800484c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004856:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop

08004884 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004884:	b480      	push	{r7}
 8004886:	b089      	sub	sp, #36	@ 0x24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800488e:	2300      	movs	r3, #0
 8004890:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004892:	4b89      	ldr	r3, [pc, #548]	@ (8004ab8 <HAL_GPIO_Init+0x234>)
 8004894:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004896:	e194      	b.n	8004bc2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	2101      	movs	r1, #1
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	fa01 f303 	lsl.w	r3, r1, r3
 80048a4:	4013      	ands	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 8186 	beq.w	8004bbc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d005      	beq.n	80048c8 <HAL_GPIO_Init+0x44>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d130      	bne.n	800492a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	2203      	movs	r2, #3
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4013      	ands	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048fe:	2201      	movs	r2, #1
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	43db      	mvns	r3, r3
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	4013      	ands	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	091b      	lsrs	r3, r3, #4
 8004914:	f003 0201 	and.w	r2, r3, #1
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	4313      	orrs	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	2b03      	cmp	r3, #3
 8004934:	d017      	beq.n	8004966 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	2203      	movs	r2, #3
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	43db      	mvns	r3, r3
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	4013      	ands	r3, r2
 800494c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	689a      	ldr	r2, [r3, #8]
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	4313      	orrs	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d123      	bne.n	80049ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	08da      	lsrs	r2, r3, #3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3208      	adds	r2, #8
 800497a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800497e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	220f      	movs	r2, #15
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	43db      	mvns	r3, r3
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	4013      	ands	r3, r2
 8004994:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	691a      	ldr	r2, [r3, #16]
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	fa02 f303 	lsl.w	r3, r2, r3
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	08da      	lsrs	r2, r3, #3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3208      	adds	r2, #8
 80049b4:	69b9      	ldr	r1, [r7, #24]
 80049b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	2203      	movs	r2, #3
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	43db      	mvns	r3, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4013      	ands	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f003 0203 	and.w	r2, r3, #3
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	fa02 f303 	lsl.w	r3, r2, r3
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 80e0 	beq.w	8004bbc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049fc:	4b2f      	ldr	r3, [pc, #188]	@ (8004abc <HAL_GPIO_Init+0x238>)
 80049fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a02:	4a2e      	ldr	r2, [pc, #184]	@ (8004abc <HAL_GPIO_Init+0x238>)
 8004a04:	f043 0302 	orr.w	r3, r3, #2
 8004a08:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004abc <HAL_GPIO_Init+0x238>)
 8004a0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a1a:	4a29      	ldr	r2, [pc, #164]	@ (8004ac0 <HAL_GPIO_Init+0x23c>)
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	089b      	lsrs	r3, r3, #2
 8004a20:	3302      	adds	r3, #2
 8004a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	220f      	movs	r2, #15
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	43db      	mvns	r3, r3
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a20      	ldr	r2, [pc, #128]	@ (8004ac4 <HAL_GPIO_Init+0x240>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d052      	beq.n	8004aec <HAL_GPIO_Init+0x268>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a1f      	ldr	r2, [pc, #124]	@ (8004ac8 <HAL_GPIO_Init+0x244>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d031      	beq.n	8004ab2 <HAL_GPIO_Init+0x22e>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a1e      	ldr	r2, [pc, #120]	@ (8004acc <HAL_GPIO_Init+0x248>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d02b      	beq.n	8004aae <HAL_GPIO_Init+0x22a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a1d      	ldr	r2, [pc, #116]	@ (8004ad0 <HAL_GPIO_Init+0x24c>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d025      	beq.n	8004aaa <HAL_GPIO_Init+0x226>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a1c      	ldr	r2, [pc, #112]	@ (8004ad4 <HAL_GPIO_Init+0x250>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d01f      	beq.n	8004aa6 <HAL_GPIO_Init+0x222>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a1b      	ldr	r2, [pc, #108]	@ (8004ad8 <HAL_GPIO_Init+0x254>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d019      	beq.n	8004aa2 <HAL_GPIO_Init+0x21e>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a1a      	ldr	r2, [pc, #104]	@ (8004adc <HAL_GPIO_Init+0x258>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d013      	beq.n	8004a9e <HAL_GPIO_Init+0x21a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a19      	ldr	r2, [pc, #100]	@ (8004ae0 <HAL_GPIO_Init+0x25c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d00d      	beq.n	8004a9a <HAL_GPIO_Init+0x216>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a18      	ldr	r2, [pc, #96]	@ (8004ae4 <HAL_GPIO_Init+0x260>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d007      	beq.n	8004a96 <HAL_GPIO_Init+0x212>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a17      	ldr	r2, [pc, #92]	@ (8004ae8 <HAL_GPIO_Init+0x264>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d101      	bne.n	8004a92 <HAL_GPIO_Init+0x20e>
 8004a8e:	2309      	movs	r3, #9
 8004a90:	e02d      	b.n	8004aee <HAL_GPIO_Init+0x26a>
 8004a92:	230a      	movs	r3, #10
 8004a94:	e02b      	b.n	8004aee <HAL_GPIO_Init+0x26a>
 8004a96:	2308      	movs	r3, #8
 8004a98:	e029      	b.n	8004aee <HAL_GPIO_Init+0x26a>
 8004a9a:	2307      	movs	r3, #7
 8004a9c:	e027      	b.n	8004aee <HAL_GPIO_Init+0x26a>
 8004a9e:	2306      	movs	r3, #6
 8004aa0:	e025      	b.n	8004aee <HAL_GPIO_Init+0x26a>
 8004aa2:	2305      	movs	r3, #5
 8004aa4:	e023      	b.n	8004aee <HAL_GPIO_Init+0x26a>
 8004aa6:	2304      	movs	r3, #4
 8004aa8:	e021      	b.n	8004aee <HAL_GPIO_Init+0x26a>
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e01f      	b.n	8004aee <HAL_GPIO_Init+0x26a>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e01d      	b.n	8004aee <HAL_GPIO_Init+0x26a>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e01b      	b.n	8004aee <HAL_GPIO_Init+0x26a>
 8004ab6:	bf00      	nop
 8004ab8:	58000080 	.word	0x58000080
 8004abc:	58024400 	.word	0x58024400
 8004ac0:	58000400 	.word	0x58000400
 8004ac4:	58020000 	.word	0x58020000
 8004ac8:	58020400 	.word	0x58020400
 8004acc:	58020800 	.word	0x58020800
 8004ad0:	58020c00 	.word	0x58020c00
 8004ad4:	58021000 	.word	0x58021000
 8004ad8:	58021400 	.word	0x58021400
 8004adc:	58021800 	.word	0x58021800
 8004ae0:	58021c00 	.word	0x58021c00
 8004ae4:	58022000 	.word	0x58022000
 8004ae8:	58022400 	.word	0x58022400
 8004aec:	2300      	movs	r3, #0
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	f002 0203 	and.w	r2, r2, #3
 8004af4:	0092      	lsls	r2, r2, #2
 8004af6:	4093      	lsls	r3, r2
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004afe:	4938      	ldr	r1, [pc, #224]	@ (8004be0 <HAL_GPIO_Init+0x35c>)
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	089b      	lsrs	r3, r3, #2
 8004b04:	3302      	adds	r3, #2
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	43db      	mvns	r3, r3
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	43db      	mvns	r3, r3
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	43db      	mvns	r3, r3
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	4013      	ands	r3, r2
 8004b76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	43db      	mvns	r3, r3
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f47f ae63 	bne.w	8004898 <HAL_GPIO_Init+0x14>
  }
}
 8004bd2:	bf00      	nop
 8004bd4:	bf00      	nop
 8004bd6:	3724      	adds	r7, #36	@ 0x24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	58000400 	.word	0x58000400

08004be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	807b      	strh	r3, [r7, #2]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bf4:	787b      	ldrb	r3, [r7, #1]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bfa:	887a      	ldrh	r2, [r7, #2]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004c00:	e003      	b.n	8004c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c02:	887b      	ldrh	r3, [r7, #2]
 8004c04:	041a      	lsls	r2, r3, #16
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	619a      	str	r2, [r3, #24]
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
	...

08004c18 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e0bd      	b.n	8004da6 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d031      	beq.n	8004cd2 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a4f      	ldr	r2, [pc, #316]	@ (8004db0 <HAL_HRTIM_Init+0x198>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d10e      	bne.n	8004c96 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8004c78:	4b4e      	ldr	r3, [pc, #312]	@ (8004db4 <HAL_HRTIM_Init+0x19c>)
 8004c7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c7e:	4a4d      	ldr	r2, [pc, #308]	@ (8004db4 <HAL_HRTIM_Init+0x19c>)
 8004c80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c84:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c88:	4b4a      	ldr	r3, [pc, #296]	@ (8004db4 <HAL_HRTIM_Init+0x19c>)
 8004c8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004ca4:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004cba:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7fd ff96 	bl	8002c04 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d012      	beq.n	8004d0a <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cf2:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	75fb      	strb	r3, [r7, #23]
 8004d1e:	e03e      	b.n	8004d9e <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8004d20:	7dfa      	ldrb	r2, [r7, #23]
 8004d22:	6879      	ldr	r1, [r7, #4]
 8004d24:	4613      	mov	r3, r2
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	1a9b      	subs	r3, r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	3318      	adds	r3, #24
 8004d30:	2200      	movs	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8004d34:	7dfa      	ldrb	r2, [r7, #23]
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	1a9b      	subs	r3, r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	331c      	adds	r3, #28
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8004d48:	7dfa      	ldrb	r2, [r7, #23]
 8004d4a:	6879      	ldr	r1, [r7, #4]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	1a9b      	subs	r3, r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	3320      	adds	r3, #32
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8004d5c:	7dfa      	ldrb	r2, [r7, #23]
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	4613      	mov	r3, r2
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	1a9b      	subs	r3, r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	440b      	add	r3, r1
 8004d6a:	3324      	adds	r3, #36	@ 0x24
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8004d70:	7dfa      	ldrb	r2, [r7, #23]
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	1a9b      	subs	r3, r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	3328      	adds	r3, #40	@ 0x28
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8004d84:	7dfa      	ldrb	r2, [r7, #23]
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	1a9b      	subs	r3, r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	3330      	adds	r3, #48	@ 0x30
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8004d98:	7dfb      	ldrb	r3, [r7, #23]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8004d9e:	7dfb      	ldrb	r3, [r7, #23]
 8004da0:	2b05      	cmp	r3, #5
 8004da2:	d9bd      	bls.n	8004d20 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	40017400 	.word	0x40017400
 8004db4:	58024400 	.word	0x58024400

08004db8 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d101      	bne.n	8004dd4 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e015      	b.n	8004e00 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2b05      	cmp	r3, #5
 8004de0:	d104      	bne.n	8004dec <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 fa88 	bl	80052fa <HRTIM_MasterBase_Config>
 8004dea:	e004      	b.n	8004df6 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	68b9      	ldr	r1, [r7, #8]
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 fab1 	bl	8005358 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_HRTIM_EventConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Event,
                                        const HRTIM_EventCfgTypeDef* pEventCfg)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_EVENTPOLARITY(pEventCfg->Sensitivity, pEventCfg->Polarity));
  assert_param(IS_HRTIM_EVENTSENSITIVITY(pEventCfg->Sensitivity));
  assert_param(IS_HRTIM_EVENTFASTMODE(Event, pEventCfg->FastMode));
  assert_param(IS_HRTIM_EVENTFILTER(Event, pEventCfg->Filter));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d101      	bne.n	8004e24 <HAL_HRTIM_EventConfig+0x1c>
  {
     return HAL_BUSY;
 8004e20:	2302      	movs	r3, #2
 8004e22:	e01c      	b.n	8004e5e <HAL_HRTIM_EventConfig+0x56>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d101      	bne.n	8004e32 <HAL_HRTIM_EventConfig+0x2a>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	e015      	b.n	8004e5e <HAL_HRTIM_EventConfig+0x56>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the event channel */
  HRTIM_EventConfig(hhrtim, Event, pEventCfg);
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	68b9      	ldr	r1, [r7, #8]
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 fd44 	bl	80058d4 <HRTIM_EventConfig>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_HRTIM_EventPrescalerConfig>:
  * @note This function must be called before starting the timer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_EVENTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d101      	bne.n	8004e80 <HAL_HRTIM_EventPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e025      	b.n	8004ecc <HAL_HRTIM_EventPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d101      	bne.n	8004e8e <HAL_HRTIM_EventPrescalerConfig+0x28>
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	e01e      	b.n	8004ecc <HAL_HRTIM_EventPrescalerConfig+0x66>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 8004ea6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d101      	bne.n	8004ef4 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e05f      	b.n	8004fb4 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e058      	b.n	8004fb4 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2b05      	cmp	r3, #5
 8004f16:	d104      	bne.n	8004f22 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 fa5c 	bl	80053d8 <HRTIM_MasterWaveform_Config>
 8004f20:	e004      	b.n	8004f2c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 fabc 	bl	80054a4 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6819      	ldr	r1, [r3, #0]
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	4613      	mov	r3, r2
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	1a9b      	subs	r3, r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4403      	add	r3, r0
 8004f3e:	3320      	adds	r3, #32
 8004f40:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6859      	ldr	r1, [r3, #4]
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4403      	add	r3, r0
 8004f54:	3324      	adds	r3, #36	@ 0x24
 8004f56:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6899      	ldr	r1, [r3, #8]
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	4613      	mov	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	1a9b      	subs	r3, r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4403      	add	r3, r0
 8004f6a:	3328      	adds	r3, #40	@ 0x28
 8004f6c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68d9      	ldr	r1, [r3, #12]
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	4613      	mov	r3, r2
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	1a9b      	subs	r3, r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4403      	add	r3, r0
 8004f80:	332c      	adds	r3, #44	@ 0x2c
 8004f82:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6919      	ldr	r1, [r3, #16]
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	1a9b      	subs	r3, r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4403      	add	r3, r0
 8004f96:	3330      	adds	r3, #48	@ 0x30
 8004f98:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8004f9a:	68b9      	ldr	r1, [r7, #8]
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 fec1 	bl	8005d24 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d101      	bne.n	8004fda <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e157      	b.n	800528a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d101      	bne.n	8004fe8 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	e150      	b.n	800528a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2b05      	cmp	r3, #5
 8004ffc:	d140      	bne.n	8005080 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3b01      	subs	r3, #1
 8005002:	2b07      	cmp	r3, #7
 8005004:	d82a      	bhi.n	800505c <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8005006:	a201      	add	r2, pc, #4	@ (adr r2, 800500c <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8005008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500c:	0800502d 	.word	0x0800502d
 8005010:	08005039 	.word	0x08005039
 8005014:	0800505d 	.word	0x0800505d
 8005018:	08005045 	.word	0x08005045
 800501c:	0800505d 	.word	0x0800505d
 8005020:	0800505d 	.word	0x0800505d
 8005024:	0800505d 	.word	0x0800505d
 8005028:	08005051 	.word	0x08005051
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	6812      	ldr	r2, [r2, #0]
 8005034:	61da      	str	r2, [r3, #28]
        break;
 8005036:	e01a      	b.n	800506e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	6812      	ldr	r2, [r2, #0]
 8005040:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 8005042:	e014      	b.n	800506e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	6812      	ldr	r2, [r2, #0]
 800504c:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 800504e:	e00e      	b.n	800506e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	6812      	ldr	r2, [r2, #0]
 8005058:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 800505a:	e008      	b.n	800506e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2207      	movs	r2, #7
 8005060:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

        break;
 800506c:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b07      	cmp	r3, #7
 8005078:	f040 80fe 	bne.w	8005278 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e104      	b.n	800528a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3b01      	subs	r3, #1
 8005084:	2b07      	cmp	r3, #7
 8005086:	f200 80e3 	bhi.w	8005250 <HAL_HRTIM_WaveformCompareConfig+0x294>
 800508a:	a201      	add	r2, pc, #4	@ (adr r2, 8005090 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 800508c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005090:	080050b1 	.word	0x080050b1
 8005094:	080050c5 	.word	0x080050c5
 8005098:	08005251 	.word	0x08005251
 800509c:	08005181 	.word	0x08005181
 80050a0:	08005251 	.word	0x08005251
 80050a4:	08005251 	.word	0x08005251
 80050a8:	08005251 	.word	0x08005251
 80050ac:	08005195 	.word	0x08005195
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6819      	ldr	r1, [r3, #0]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	01db      	lsls	r3, r3, #7
 80050bc:	440b      	add	r3, r1
 80050be:	339c      	adds	r3, #156	@ 0x9c
 80050c0:	601a      	str	r2, [r3, #0]
        break;
 80050c2:	e0d1      	b.n	8005268 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6819      	ldr	r1, [r3, #0]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	01db      	lsls	r3, r3, #7
 80050d0:	440b      	add	r3, r1
 80050d2:	33a4      	adds	r3, #164	@ 0xa4
 80050d4:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d03f      	beq.n	800515e <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	3301      	adds	r3, #1
 80050e6:	01db      	lsls	r3, r3, #7
 80050e8:	4413      	add	r3, r2
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	6811      	ldr	r1, [r2, #0]
 80050f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	3301      	adds	r3, #1
 80050f8:	01db      	lsls	r3, r3, #7
 80050fa:	440b      	add	r3, r1
 80050fc:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	3301      	adds	r3, #1
 8005106:	01db      	lsls	r3, r3, #7
 8005108:	4413      	add	r3, r2
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	68f9      	ldr	r1, [r7, #12]
 8005112:	6809      	ldr	r1, [r1, #0]
 8005114:	431a      	orrs	r2, r3
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	3301      	adds	r3, #1
 800511a:	01db      	lsls	r3, r3, #7
 800511c:	440b      	add	r3, r1
 800511e:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005128:	d109      	bne.n	800513e <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6819      	ldr	r1, [r3, #0]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	01db      	lsls	r3, r3, #7
 8005136:	440b      	add	r3, r1
 8005138:	339c      	adds	r3, #156	@ 0x9c
 800513a:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 800513c:	e091      	b.n	8005262 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005146:	f040 808c 	bne.w	8005262 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6819      	ldr	r1, [r3, #0]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	01db      	lsls	r3, r3, #7
 8005156:	440b      	add	r3, r1
 8005158:	33a8      	adds	r3, #168	@ 0xa8
 800515a:	601a      	str	r2, [r3, #0]
         break;
 800515c:	e081      	b.n	8005262 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	3301      	adds	r3, #1
 8005166:	01db      	lsls	r3, r3, #7
 8005168:	4413      	add	r3, r2
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	6811      	ldr	r1, [r2, #0]
 8005170:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	3301      	adds	r3, #1
 8005178:	01db      	lsls	r3, r3, #7
 800517a:	440b      	add	r3, r1
 800517c:	601a      	str	r2, [r3, #0]
         break;
 800517e:	e070      	b.n	8005262 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6819      	ldr	r1, [r3, #0]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	01db      	lsls	r3, r3, #7
 800518c:	440b      	add	r3, r1
 800518e:	33a8      	adds	r3, #168	@ 0xa8
 8005190:	601a      	str	r2, [r3, #0]
        break;
 8005192:	e069      	b.n	8005268 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6819      	ldr	r1, [r3, #0]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	01db      	lsls	r3, r3, #7
 80051a0:	440b      	add	r3, r1
 80051a2:	33ac      	adds	r3, #172	@ 0xac
 80051a4:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d03f      	beq.n	800522e <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	3301      	adds	r3, #1
 80051b6:	01db      	lsls	r3, r3, #7
 80051b8:	4413      	add	r3, r2
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	6811      	ldr	r1, [r2, #0]
 80051c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	3301      	adds	r3, #1
 80051c8:	01db      	lsls	r3, r3, #7
 80051ca:	440b      	add	r3, r1
 80051cc:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	3301      	adds	r3, #1
 80051d6:	01db      	lsls	r3, r3, #7
 80051d8:	4413      	add	r3, r2
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	68f9      	ldr	r1, [r7, #12]
 80051e4:	6809      	ldr	r1, [r1, #0]
 80051e6:	431a      	orrs	r2, r3
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	3301      	adds	r3, #1
 80051ec:	01db      	lsls	r3, r3, #7
 80051ee:	440b      	add	r3, r1
 80051f0:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051fa:	d109      	bne.n	8005210 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6819      	ldr	r1, [r3, #0]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	01db      	lsls	r3, r3, #7
 8005208:	440b      	add	r3, r1
 800520a:	339c      	adds	r3, #156	@ 0x9c
 800520c:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 800520e:	e02a      	b.n	8005266 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005218:	d125      	bne.n	8005266 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6819      	ldr	r1, [r3, #0]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	01db      	lsls	r3, r3, #7
 8005226:	440b      	add	r3, r1
 8005228:	33a8      	adds	r3, #168	@ 0xa8
 800522a:	601a      	str	r2, [r3, #0]
         break;
 800522c:	e01b      	b.n	8005266 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	3301      	adds	r3, #1
 8005236:	01db      	lsls	r3, r3, #7
 8005238:	4413      	add	r3, r2
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	6811      	ldr	r1, [r2, #0]
 8005240:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	3301      	adds	r3, #1
 8005248:	01db      	lsls	r3, r3, #7
 800524a:	440b      	add	r3, r1
 800524c:	601a      	str	r2, [r3, #0]
         break;
 800524e:	e00a      	b.n	8005266 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2207      	movs	r2, #7
 8005254:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

      break;
 8005260:	e002      	b.n	8005268 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8005262:	bf00      	nop
 8005264:	e000      	b.n	8005268 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8005266:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b07      	cmp	r3, #7
 8005272:	d101      	bne.n	8005278 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e008      	b.n	800528a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop

08005298 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d101      	bne.n	80052b6 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 80052b2:	2302      	movs	r3, #2
 80052b4:	e01d      	b.n	80052f2 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e016      	b.n	80052f2 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	68b9      	ldr	r1, [r7, #8]
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 fa22 	bl	8005724 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b085      	sub	sp, #20
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 0307 	bic.w	r3, r3, #7
 8005312:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f023 0318 	bic.w	r3, r3, #24
 8005324:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4313      	orrs	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	6812      	ldr	r2, [r2, #0]
 8005340:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	6852      	ldr	r2, [r2, #4]
 800534a:	619a      	str	r2, [r3, #24]
}
 800534c:	bf00      	nop
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	3301      	adds	r3, #1
 800536c:	01db      	lsls	r3, r3, #7
 800536e:	4413      	add	r3, r2
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f023 0307 	bic.w	r3, r3, #7
 800537a:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	4313      	orrs	r3, r2
 8005384:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f023 0318 	bic.w	r3, r3, #24
 800538c:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	4313      	orrs	r3, r2
 8005396:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	3301      	adds	r3, #1
 80053a0:	01db      	lsls	r3, r3, #7
 80053a2:	4413      	add	r3, r2
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6819      	ldr	r1, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	01db      	lsls	r3, r3, #7
 80053b4:	440b      	add	r3, r1
 80053b6:	3394      	adds	r3, #148	@ 0x94
 80053b8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6819      	ldr	r1, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	01db      	lsls	r3, r3, #7
 80053c6:	440b      	add	r3, r1
 80053c8:	3398      	adds	r3, #152	@ 0x98
 80053ca:	601a      	str	r2, [r3, #0]
}
 80053cc:	bf00      	nop
 80053ce:	371c      	adds	r7, #28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 80053f2:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f023 0320 	bic.w	r3, r3, #32
 80053fa:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800540c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4313      	orrs	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800541e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005430:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8005442:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005454:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005468:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	4313      	orrs	r3, r2
 8005472:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800547a:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	4313      	orrs	r3, r2
 8005484:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8005498:	bf00      	nop
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b08b      	sub	sp, #44	@ 0x2c
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	3301      	adds	r3, #1
 80054b8:	01db      	lsls	r3, r3, #7
 80054ba:	4413      	add	r3, r2
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	6811      	ldr	r1, [r2, #0]
 80054c2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	3301      	adds	r3, #1
 80054ca:	01db      	lsls	r3, r3, #7
 80054cc:	440b      	add	r3, r1
 80054ce:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	3301      	adds	r3, #1
 80054d8:	01db      	lsls	r3, r3, #7
 80054da:	4413      	add	r3, r2
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	01db      	lsls	r3, r3, #7
 80054e8:	4413      	add	r3, r2
 80054ea:	33e8      	adds	r3, #232	@ 0xe8
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	01db      	lsls	r3, r3, #7
 80054f8:	4413      	add	r3, r2
 80054fa:	33e4      	adds	r3, #228	@ 0xe4
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8005508:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800550a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550c:	f023 0320 	bic.w	r3, r3, #32
 8005510:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005518:	4313      	orrs	r3, r2
 800551a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 800551c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005522:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800552a:	4313      	orrs	r3, r2
 800552c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 800552e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005530:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005534:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800553c:	4313      	orrs	r3, r2
 800553e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8005540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005542:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005546:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800554e:	4313      	orrs	r3, r2
 8005550:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8005552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005554:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8005558:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005560:	4313      	orrs	r3, r2
 8005562:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8005564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005566:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800556a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005572:	4313      	orrs	r3, r2
 8005574:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8005576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005578:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800557c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005582:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005586:	d103      	bne.n	8005590 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8005588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800558e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8005590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005592:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005596:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800559c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800559e:	4313      	orrs	r3, r2
 80055a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80055a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055a8:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055b0:	4313      	orrs	r3, r2
 80055b2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80055b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b6:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 80055ba:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c2:	4313      	orrs	r3, r2
 80055c4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	f023 031f 	bic.w	r3, r3, #31
 80055cc:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d2:	f003 031f 	and.w	r3, r3, #31
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	4313      	orrs	r3, r2
 80055da:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80055e2:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d108      	bne.n	8005608 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055fc:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005602:	6a3a      	ldr	r2, [r7, #32]
 8005604:	4313      	orrs	r3, r2
 8005606:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800560c:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8005610:	d004      	beq.n	800561c <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005616:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 800561a:	d103      	bne.n	8005624 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005620:	2b40      	cmp	r3, #64	@ 0x40
 8005622:	d108      	bne.n	8005636 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 800562a:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005630:	6a3a      	ldr	r2, [r7, #32]
 8005632:	4313      	orrs	r3, r2
 8005634:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800563a:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2b04      	cmp	r3, #4
 8005640:	d843      	bhi.n	80056ca <HRTIM_TimingUnitWaveform_Config+0x226>
 8005642:	a201      	add	r2, pc, #4	@ (adr r2, 8005648 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8005644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005648:	0800565d 	.word	0x0800565d
 800564c:	08005673 	.word	0x08005673
 8005650:	08005689 	.word	0x08005689
 8005654:	0800569f 	.word	0x0800569f
 8005658:	080056b5 	.word	0x080056b5
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005662:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	69fa      	ldr	r2, [r7, #28]
 800566c:	4313      	orrs	r3, r2
 800566e:	61fb      	str	r3, [r7, #28]
      break;
 8005670:	e02c      	b.n	80056cc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005678:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	69fa      	ldr	r2, [r7, #28]
 8005682:	4313      	orrs	r3, r2
 8005684:	61fb      	str	r3, [r7, #28]
      break;
 8005686:	e021      	b.n	80056cc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800568e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	4313      	orrs	r3, r2
 800569a:	61fb      	str	r3, [r7, #28]
      break;
 800569c:	e016      	b.n	80056cc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80056a4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	69fa      	ldr	r2, [r7, #28]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	61fb      	str	r3, [r7, #28]
      break;
 80056b2:	e00b      	b.n	80056cc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80056ba:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c0:	015b      	lsls	r3, r3, #5
 80056c2:	69fa      	ldr	r2, [r7, #28]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	61fb      	str	r3, [r7, #28]
      break;
 80056c8:	e000      	b.n	80056cc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 80056ca:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	3301      	adds	r3, #1
 80056d4:	01db      	lsls	r3, r3, #7
 80056d6:	4413      	add	r3, r2
 80056d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056da:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	01db      	lsls	r3, r3, #7
 80056e4:	4413      	add	r3, r2
 80056e6:	33e8      	adds	r3, #232	@ 0xe8
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	01db      	lsls	r3, r3, #7
 80056f4:	4413      	add	r3, r2
 80056f6:	33e4      	adds	r3, #228	@ 0xe4
 80056f8:	6a3a      	ldr	r2, [r7, #32]
 80056fa:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	01db      	lsls	r3, r3, #7
 8005704:	4413      	add	r3, r2
 8005706:	33d4      	adds	r3, #212	@ 0xd4
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	69fa      	ldr	r2, [r7, #28]
 8005712:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8005716:	bf00      	nop
 8005718:	372c      	adds	r7, #44	@ 0x2c
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop

08005724 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8005724:	b480      	push	{r7}
 8005726:	b089      	sub	sp, #36	@ 0x24
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
 8005730:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	01db      	lsls	r3, r3, #7
 800573e:	4413      	add	r3, r2
 8005740:	33e4      	adds	r3, #228	@ 0xe4
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	01db      	lsls	r3, r3, #7
 800574e:	4413      	add	r3, r2
 8005750:	33b8      	adds	r3, #184	@ 0xb8
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	617b      	str	r3, [r7, #20]

  switch (Output)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800575c:	d04d      	beq.n	80057fa <HRTIM_OutputConfig+0xd6>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005764:	d85e      	bhi.n	8005824 <HRTIM_OutputConfig+0x100>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800576c:	d032      	beq.n	80057d4 <HRTIM_OutputConfig+0xb0>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005774:	d856      	bhi.n	8005824 <HRTIM_OutputConfig+0x100>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b80      	cmp	r3, #128	@ 0x80
 800577a:	d03e      	beq.n	80057fa <HRTIM_OutputConfig+0xd6>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b80      	cmp	r3, #128	@ 0x80
 8005780:	d850      	bhi.n	8005824 <HRTIM_OutputConfig+0x100>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b40      	cmp	r3, #64	@ 0x40
 8005786:	d025      	beq.n	80057d4 <HRTIM_OutputConfig+0xb0>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b40      	cmp	r3, #64	@ 0x40
 800578c:	d84a      	bhi.n	8005824 <HRTIM_OutputConfig+0x100>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d01f      	beq.n	80057d4 <HRTIM_OutputConfig+0xb0>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d044      	beq.n	8005824 <HRTIM_OutputConfig+0x100>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b20      	cmp	r3, #32
 800579e:	d841      	bhi.n	8005824 <HRTIM_OutputConfig+0x100>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d33e      	bcc.n	8005824 <HRTIM_OutputConfig+0x100>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	3b02      	subs	r3, #2
 80057aa:	2201      	movs	r2, #1
 80057ac:	409a      	lsls	r2, r3
 80057ae:	4b48      	ldr	r3, [pc, #288]	@ (80058d0 <HRTIM_OutputConfig+0x1ac>)
 80057b0:	4013      	ands	r3, r2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	bf14      	ite	ne
 80057b6:	2301      	movne	r3, #1
 80057b8:	2300      	moveq	r3, #0
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d11c      	bne.n	80057fa <HRTIM_OutputConfig+0xd6>
 80057c0:	f244 0304 	movw	r3, #16388	@ 0x4004
 80057c4:	4013      	ands	r3, r2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	bf14      	ite	ne
 80057ca:	2301      	movne	r3, #1
 80057cc:	2300      	moveq	r3, #0
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d027      	beq.n	8005824 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6819      	ldr	r1, [r3, #0]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	01db      	lsls	r3, r3, #7
 80057e0:	440b      	add	r3, r1
 80057e2:	33bc      	adds	r3, #188	@ 0xbc
 80057e4:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6819      	ldr	r1, [r3, #0]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	01db      	lsls	r3, r3, #7
 80057f2:	440b      	add	r3, r1
 80057f4:	33c0      	adds	r3, #192	@ 0xc0
 80057f6:	601a      	str	r2, [r3, #0]
      break;
 80057f8:	e015      	b.n	8005826 <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6819      	ldr	r1, [r3, #0]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	01db      	lsls	r3, r3, #7
 8005806:	440b      	add	r3, r1
 8005808:	33c4      	adds	r3, #196	@ 0xc4
 800580a:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6819      	ldr	r1, [r3, #0]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	01db      	lsls	r3, r3, #7
 8005818:	440b      	add	r3, r1
 800581a:	33c8      	adds	r3, #200	@ 0xc8
 800581c:	601a      	str	r2, [r3, #0]
      shift = 16U;
 800581e:	2310      	movs	r3, #16
 8005820:	61bb      	str	r3, [r7, #24]
      break;
 8005822:	e000      	b.n	8005826 <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8005824:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8005826:	22fe      	movs	r2, #254	@ 0xfe
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 800582e:	43db      	mvns	r3, r3
 8005830:	69fa      	ldr	r2, [r7, #28]
 8005832:	4013      	ands	r3, r2
 8005834:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	69fa      	ldr	r2, [r7, #28]
 8005842:	4313      	orrs	r3, r2
 8005844:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	fa02 f303 	lsl.w	r3, r2, r3
 8005850:	69fa      	ldr	r2, [r7, #28]
 8005852:	4313      	orrs	r3, r2
 8005854:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	691a      	ldr	r2, [r3, #16]
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	69fa      	ldr	r2, [r7, #28]
 8005862:	4313      	orrs	r3, r2
 8005864:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	695a      	ldr	r2, [r3, #20]
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	69fa      	ldr	r2, [r7, #28]
 8005872:	4313      	orrs	r3, r2
 8005874:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	fa02 f303 	lsl.w	r3, r2, r3
 8005880:	69fa      	ldr	r2, [r7, #28]
 8005882:	4313      	orrs	r3, r2
 8005884:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	2b08      	cmp	r3, #8
 800588c:	d111      	bne.n	80058b2 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10c      	bne.n	80058b2 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d107      	bne.n	80058b2 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	69da      	ldr	r2, [r3, #28]
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ac:	69fa      	ldr	r2, [r7, #28]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	01db      	lsls	r3, r3, #7
 80058ba:	4413      	add	r3, r2
 80058bc:	33e4      	adds	r3, #228	@ 0xe4
 80058be:	69fa      	ldr	r2, [r7, #28]
 80058c0:	601a      	str	r2, [r3, #0]
}
 80058c2:	bf00      	nop
 80058c4:	3724      	adds	r7, #36	@ 0x24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	40000041 	.word	0x40000041

080058d4 <HRTIM_EventConfig>:
  * @retval None
  */
static void HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                              uint32_t Event,
                              const HRTIM_EventCfgTypeDef *pEventCfg)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b089      	sub	sp, #36	@ 0x24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_eecr1;
  uint32_t hrtim_eecr2;
  uint32_t hrtim_eecr3;

  /* Configure external event channel */
  hrtim_eecr1 = hhrtim->Instance->sCommonRegs.EECR1;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 80058e8:	61fb      	str	r3, [r7, #28]
  hrtim_eecr2 = hhrtim->Instance->sCommonRegs.EECR2;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 80058f2:	61bb      	str	r3, [r7, #24]
  hrtim_eecr3 = hhrtim->Instance->sCommonRegs.EECR3;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 80058fc:	617b      	str	r3, [r7, #20]

  switch (Event)
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b0a      	cmp	r3, #10
 8005902:	f200 8208 	bhi.w	8005d16 <HRTIM_EventConfig+0x442>
 8005906:	a201      	add	r2, pc, #4	@ (adr r2, 800590c <HRTIM_EventConfig+0x38>)
 8005908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590c:	08005939 	.word	0x08005939
 8005910:	08005959 	.word	0x08005959
 8005914:	080059af 	.word	0x080059af
 8005918:	08005a0b 	.word	0x08005a0b
 800591c:	08005a69 	.word	0x08005a69
 8005920:	08005ac7 	.word	0x08005ac7
 8005924:	08005b25 	.word	0x08005b25
 8005928:	08005b83 	.word	0x08005b83
 800592c:	08005be7 	.word	0x08005be7
 8005930:	08005c4b 	.word	0x08005c4b
 8005934:	08005cb1 	.word	0x08005cb1
  {
  case HRTIM_EVENT_NONE:
    {
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR1 = 0U;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2200      	movs	r2, #0
 800593e:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      hhrtim->Instance->sCommonRegs.EECR2 = 0U;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2200      	movs	r2, #0
 8005948:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = 0U;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2200      	movs	r2, #0
 8005952:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005956:	e1df      	b.n	8005d18 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_1:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE1SRC | HRTIM_EECR1_EE1POL | HRTIM_EECR1_EE1SNS | HRTIM_EECR1_EE1FAST);
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800595e:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Source & HRTIM_EECR1_EE1SRC);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0303 	and.w	r3, r3, #3
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	4313      	orrs	r3, r2
 800596c:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Polarity & HRTIM_EECR1_EE1POL);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f003 0304 	and.w	r3, r3, #4
 8005976:	69fa      	ldr	r2, [r7, #28]
 8005978:	4313      	orrs	r3, r2
 800597a:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 0318 	and.w	r3, r3, #24
 8005984:	69fa      	ldr	r2, [r7, #28]
 8005986:	4313      	orrs	r3, r2
 8005988:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE1FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69fa      	ldr	r2, [r7, #28]
 8005990:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE1FAST bit) */
      hrtim_eecr1 |= (pEventCfg->FastMode  & HRTIM_EECR1_EE1FAST);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	f003 0320 	and.w	r3, r3, #32
 800599c:	69fa      	ldr	r2, [r7, #28]
 800599e:	4313      	orrs	r3, r2
 80059a0:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69fa      	ldr	r2, [r7, #28]
 80059a8:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 80059ac:	e1b4      	b.n	8005d18 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_2:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE2SRC | HRTIM_EECR1_EE2POL | HRTIM_EECR1_EE2SNS | HRTIM_EECR1_EE2FAST);
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 80059b4:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 6U) & HRTIM_EECR1_EE2SRC);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	019b      	lsls	r3, r3, #6
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	69fa      	ldr	r2, [r7, #28]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR1_EE2POL);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	019b      	lsls	r3, r3, #6
 80059ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ce:	69fa      	ldr	r2, [r7, #28]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	019b      	lsls	r3, r3, #6
 80059da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80059de:	69fa      	ldr	r2, [r7, #28]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE2FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	69fa      	ldr	r2, [r7, #28]
 80059ea:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE2FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	019b      	lsls	r3, r3, #6
 80059f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059f8:	69fa      	ldr	r2, [r7, #28]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69fa      	ldr	r2, [r7, #28]
 8005a04:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8005a08:	e186      	b.n	8005d18 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_3:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE3SRC | HRTIM_EECR1_EE3POL | HRTIM_EECR1_EE3SNS | HRTIM_EECR1_EE3FAST);
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005a10:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 12U) & HRTIM_EECR1_EE3SRC);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	031b      	lsls	r3, r3, #12
 8005a18:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR1_EE3POL);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	031b      	lsls	r3, r3, #12
 8005a28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	031b      	lsls	r3, r3, #12
 8005a38:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8005a3c:	69fa      	ldr	r2, [r7, #28]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE3FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	69fa      	ldr	r2, [r7, #28]
 8005a48:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE3FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	031b      	lsls	r3, r3, #12
 8005a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a56:	69fa      	ldr	r2, [r7, #28]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8005a66:	e157      	b.n	8005d18 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_4:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE4SRC | HRTIM_EECR1_EE4POL | HRTIM_EECR1_EE4SNS | HRTIM_EECR1_EE4FAST);
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f423 037c 	bic.w	r3, r3, #16515072	@ 0xfc0000
 8005a6e:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 18U) & HRTIM_EECR1_EE4SRC);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	049b      	lsls	r3, r3, #18
 8005a76:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005a7a:	69fa      	ldr	r2, [r7, #28]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR1_EE4POL);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	049b      	lsls	r3, r3, #18
 8005a86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a8a:	69fa      	ldr	r2, [r7, #28]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	049b      	lsls	r3, r3, #18
 8005a96:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE4FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	69fa      	ldr	r2, [r7, #28]
 8005aa6:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE4FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	049b      	lsls	r3, r3, #18
 8005ab0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ab4:	69fa      	ldr	r2, [r7, #28]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69fa      	ldr	r2, [r7, #28]
 8005ac0:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8005ac4:	e128      	b.n	8005d18 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_5:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE5SRC | HRTIM_EECR1_EE5POL | HRTIM_EECR1_EE5SNS | HRTIM_EECR1_EE5FAST);
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8005acc:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 24U) & HRTIM_EECR1_EE5SRC);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	061b      	lsls	r3, r3, #24
 8005ad4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005ad8:	69fa      	ldr	r2, [r7, #28]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR1_EE5POL);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	061b      	lsls	r3, r3, #24
 8005ae4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005ae8:	69fa      	ldr	r2, [r7, #28]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	061b      	lsls	r3, r3, #24
 8005af4:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8005af8:	69fa      	ldr	r2, [r7, #28]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE5FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69fa      	ldr	r2, [r7, #28]
 8005b04:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE5FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	061b      	lsls	r3, r3, #24
 8005b0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	69fa      	ldr	r2, [r7, #28]
 8005b1e:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8005b22:	e0f9      	b.n	8005d18 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_6:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE6SRC | HRTIM_EECR2_EE6POL | HRTIM_EECR2_EE6SNS);
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	f023 031f 	bic.w	r3, r3, #31
 8005b2a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Source & HRTIM_EECR2_EE6SRC);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0303 	and.w	r3, r3, #3
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Polarity & HRTIM_EECR2_EE6POL);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f003 0304 	and.w	r3, r3, #4
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f003 0318 	and.w	r3, r3, #24
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE6F);
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f023 030f 	bic.w	r3, r3, #15
 8005b5c:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005b80:	e0ca      	b.n	8005d18 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_7:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE7SRC | HRTIM_EECR2_EE7POL | HRTIM_EECR2_EE7SNS);
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 8005b88:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	019b      	lsls	r3, r3, #6
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR2_EE7POL);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	019b      	lsls	r3, r3, #6
 8005b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	019b      	lsls	r3, r3, #6
 8005bae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE7F);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f423 7370 	bic.w	r3, r3, #960	@ 0x3c0
 8005bbe:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	019b      	lsls	r3, r3, #6
 8005bc6:	f403 7370 	and.w	r3, r3, #960	@ 0x3c0
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005be4:	e098      	b.n	8005d18 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_8:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE8SRC | HRTIM_EECR2_EE8POL | HRTIM_EECR2_EE8SNS);
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	f423 33f8 	bic.w	r3, r3, #126976	@ 0x1f000
 8005bec:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	031b      	lsls	r3, r3, #12
 8005bf4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR2_EE8POL);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	031b      	lsls	r3, r3, #12
 8005c04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	031b      	lsls	r3, r3, #12
 8005c14:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE8F);
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c24:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	031b      	lsls	r3, r3, #12
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005c48:	e066      	b.n	8005d18 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_9:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE9SRC | HRTIM_EECR2_EE9POL | HRTIM_EECR2_EE9SNS);
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	f423 03f8 	bic.w	r3, r3, #8126464	@ 0x7c0000
 8005c50:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	049b      	lsls	r3, r3, #18
 8005c58:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR2_EE9POL);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	049b      	lsls	r3, r3, #18
 8005c68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	049b      	lsls	r3, r3, #18
 8005c78:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE9F);
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8005c88:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	049b      	lsls	r3, r3, #18
 8005c90:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005cae:	e033      	b.n	8005d18 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_10:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE10SRC | HRTIM_EECR2_EE10POL | HRTIM_EECR2_EE10SNS);
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8005cb6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	061b      	lsls	r3, r3, #24
 8005cbe:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	061b      	lsls	r3, r3, #24
 8005cce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	061b      	lsls	r3, r3, #24
 8005cde:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE10F);
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8005cee:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	061b      	lsls	r3, r3, #24
 8005cf6:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005d14:	e000      	b.n	8005d18 <HRTIM_EventConfig+0x444>
    }

  default:
    break;
 8005d16:	bf00      	nop
  }
}
 8005d18:	bf00      	nop
 8005d1a:	3724      	adds	r7, #36	@ 0x24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2b05      	cmp	r3, #5
 8005d32:	d851      	bhi.n	8005dd8 <HRTIM_ForceRegistersUpdate+0xb4>
 8005d34:	a201      	add	r2, pc, #4	@ (adr r2, 8005d3c <HRTIM_ForceRegistersUpdate+0x18>)
 8005d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3a:	bf00      	nop
 8005d3c:	08005d6b 	.word	0x08005d6b
 8005d40:	08005d81 	.word	0x08005d81
 8005d44:	08005d97 	.word	0x08005d97
 8005d48:	08005dad 	.word	0x08005dad
 8005d4c:	08005dc3 	.word	0x08005dc3
 8005d50:	08005d55 	.word	0x08005d55
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f042 0201 	orr.w	r2, r2, #1
 8005d64:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005d68:	e037      	b.n	8005dda <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 0202 	orr.w	r2, r2, #2
 8005d7a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005d7e:	e02c      	b.n	8005dda <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f042 0204 	orr.w	r2, r2, #4
 8005d90:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005d94:	e021      	b.n	8005dda <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0208 	orr.w	r2, r2, #8
 8005da6:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005daa:	e016      	b.n	8005dda <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f042 0210 	orr.w	r2, r2, #16
 8005dbc:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005dc0:	e00b      	b.n	8005dda <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 0220 	orr.w	r2, r2, #32
 8005dd2:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005dd6:	e000      	b.n	8005dda <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8005dd8:	bf00      	nop
  }
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop

08005de8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e097      	b.n	8005f2a <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d106      	bne.n	8005e1a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7fc ff8d 	bl	8002d34 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d004      	beq.n	8005e3c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e3a:	d103      	bne.n	8005e44 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 031e 	bic.w	r3, r3, #30
 8005e42:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d003      	beq.n	8005e58 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	4b38      	ldr	r3, [pc, #224]	@ (8005f34 <HAL_LPTIM_Init+0x14c>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4b37      	ldr	r3, [pc, #220]	@ (8005f38 <HAL_LPTIM_Init+0x150>)
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005e68:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8005e6e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8005e74:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8005e7a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d107      	bne.n	8005e9a <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005e92:	4313      	orrs	r3, r2
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d004      	beq.n	8005eac <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005eaa:	d107      	bne.n	8005ebc <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00a      	beq.n	8005ede <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005ed0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8005ed6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a14      	ldr	r2, [pc, #80]	@ (8005f3c <HAL_LPTIM_Init+0x154>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d004      	beq.n	8005efa <HAL_LPTIM_Init+0x112>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a12      	ldr	r2, [pc, #72]	@ (8005f40 <HAL_LPTIM_Init+0x158>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d108      	bne.n	8005f0c <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	625a      	str	r2, [r3, #36]	@ 0x24
 8005f0a:	e009      	b.n	8005f20 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a0c      	ldr	r2, [pc, #48]	@ (8005f44 <HAL_LPTIM_Init+0x15c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d104      	bne.n	8005f20 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005f1e:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	ffff1f3f 	.word	0xffff1f3f
 8005f38:	ff19f1fe 	.word	0xff19f1fe
 8005f3c:	40002400 	.word	0x40002400
 8005f40:	58002400 	.word	0x58002400
 8005f44:	58002800 	.word	0x58002800

08005f48 <HAL_LPTIM_PWM_Start>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Reset WAVE bit to set PWM mode */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8005f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	691a      	ldr	r2, [r3, #16]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0201 	orr.w	r2, r2, #1
 8005f7a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2210      	movs	r2, #16
 8005f82:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005f8c:	2110      	movs	r1, #16
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 f97e 	bl	8006290 <LPTIM_WaitForFlag>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d101      	bne.n	8005f9e <HAL_LPTIM_PWM_Start+0x56>
  {
    return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e01d      	b.n	8005fda <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2208      	movs	r2, #8
 8005fa4:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8005fae:	2108      	movs	r1, #8
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 f96d 	bl	8006290 <LPTIM_WaitForFlag>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	d101      	bne.n	8005fc0 <HAL_LPTIM_PWM_Start+0x78>
  {
    return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e00c      	b.n	8005fda <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691a      	ldr	r2, [r3, #16]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 0204 	orr.w	r2, r2, #4
 8005fce:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b082      	sub	sp, #8
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d00c      	beq.n	8006016 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006000:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006004:	d107      	bne.n	8006016 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 8006014:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691a      	ldr	r2, [r3, #16]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f042 0201 	orr.w	r2, r2, #1
 8006024:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2210      	movs	r2, #16
 800602c:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8006036:	2110      	movs	r1, #16
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f929 	bl	8006290 <LPTIM_WaitForFlag>
 800603e:	4603      	mov	r3, r0
 8006040:	2b03      	cmp	r3, #3
 8006042:	d101      	bne.n	8006048 <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e02f      	b.n	80060a8 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f951 	bl	80062f0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f90f 	bl	8006272 <HAL_LPTIM_GetState>
 8006054:	4603      	mov	r3, r0
 8006056:	2b03      	cmp	r3, #3
 8006058:	d101      	bne.n	800605e <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e024      	b.n	80060a8 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f042 0210 	orr.w	r2, r2, #16
 800606c:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f042 0202 	orr.w	r2, r2, #2
 800607c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	691a      	ldr	r2, [r3, #16]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f042 0201 	orr.w	r2, r2, #1
 800608c:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	691a      	ldr	r2, [r3, #16]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f042 0204 	orr.w	r2, r2, #4
 800609c:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d10d      	bne.n	80060e2 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d106      	bne.n	80060e2 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2201      	movs	r2, #1
 80060da:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f882 	bl	80061e6 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d10d      	bne.n	800610c <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d106      	bne.n	800610c <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2202      	movs	r2, #2
 8006104:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f877 	bl	80061fa <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0304 	and.w	r3, r3, #4
 8006116:	2b04      	cmp	r3, #4
 8006118:	d10d      	bne.n	8006136 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b04      	cmp	r3, #4
 8006126:	d106      	bne.n	8006136 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2204      	movs	r2, #4
 800612e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f86c 	bl	800620e <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0308 	and.w	r3, r3, #8
 8006140:	2b08      	cmp	r3, #8
 8006142:	d10d      	bne.n	8006160 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f003 0308 	and.w	r3, r3, #8
 800614e:	2b08      	cmp	r3, #8
 8006150:	d106      	bne.n	8006160 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2208      	movs	r2, #8
 8006158:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f861 	bl	8006222 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0310 	and.w	r3, r3, #16
 800616a:	2b10      	cmp	r3, #16
 800616c:	d10d      	bne.n	800618a <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f003 0310 	and.w	r3, r3, #16
 8006178:	2b10      	cmp	r3, #16
 800617a:	d106      	bne.n	800618a <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2210      	movs	r2, #16
 8006182:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 f856 	bl	8006236 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0320 	and.w	r3, r3, #32
 8006194:	2b20      	cmp	r3, #32
 8006196:	d10d      	bne.n	80061b4 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f003 0320 	and.w	r3, r3, #32
 80061a2:	2b20      	cmp	r3, #32
 80061a4:	d106      	bne.n	80061b4 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2220      	movs	r2, #32
 80061ac:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f84b 	bl	800624a <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061be:	2b40      	cmp	r3, #64	@ 0x40
 80061c0:	d10d      	bne.n	80061de <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061cc:	2b40      	cmp	r3, #64	@ 0x40
 80061ce:	d106      	bne.n	80061de <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2240      	movs	r2, #64	@ 0x40
 80061d6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f840 	bl	800625e <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80061de:	bf00      	nop
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80061ee:	bf00      	nop
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006280:	b2db      	uxtb	r3, r3
}
 8006282:	4618      	mov	r0, r3
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
	...

08006290 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800629e:	4b12      	ldr	r3, [pc, #72]	@ (80062e8 <LPTIM_WaitForFlag+0x58>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a12      	ldr	r2, [pc, #72]	@ (80062ec <LPTIM_WaitForFlag+0x5c>)
 80062a4:	fba2 2303 	umull	r2, r3, r2, r3
 80062a8:	0b9b      	lsrs	r3, r3, #14
 80062aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80062ae:	fb02 f303 	mul.w	r3, r2, r3
 80062b2:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	3b01      	subs	r3, #1
 80062b8:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	4013      	ands	r3, r2
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d002      	beq.n	80062da <LPTIM_WaitForFlag+0x4a>
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1ec      	bne.n	80062b4 <LPTIM_WaitForFlag+0x24>

  return result;
 80062da:	7bfb      	ldrb	r3, [r7, #15]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	24000010 	.word	0x24000010
 80062ec:	d1b71759 	.word	0xd1b71759

080062f0 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b08c      	sub	sp, #48	@ 0x30
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80062f8:	2300      	movs	r3, #0
 80062fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062fc:	f3ef 8310 	mrs	r3, PRIMASK
 8006300:	60fb      	str	r3, [r7, #12]
  return(result);
 8006302:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8006304:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006306:	2301      	movs	r3, #1
 8006308:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	f383 8810 	msr	PRIMASK, r3
}
 8006310:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a81      	ldr	r2, [pc, #516]	@ (800651c <LPTIM_Disable+0x22c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d02d      	beq.n	8006378 <LPTIM_Disable+0x88>
 800631c:	4a7f      	ldr	r2, [pc, #508]	@ (800651c <LPTIM_Disable+0x22c>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d830      	bhi.n	8006384 <LPTIM_Disable+0x94>
 8006322:	4a7f      	ldr	r2, [pc, #508]	@ (8006520 <LPTIM_Disable+0x230>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d021      	beq.n	800636c <LPTIM_Disable+0x7c>
 8006328:	4a7d      	ldr	r2, [pc, #500]	@ (8006520 <LPTIM_Disable+0x230>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d82a      	bhi.n	8006384 <LPTIM_Disable+0x94>
 800632e:	4a7d      	ldr	r2, [pc, #500]	@ (8006524 <LPTIM_Disable+0x234>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d015      	beq.n	8006360 <LPTIM_Disable+0x70>
 8006334:	4a7b      	ldr	r2, [pc, #492]	@ (8006524 <LPTIM_Disable+0x234>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d824      	bhi.n	8006384 <LPTIM_Disable+0x94>
 800633a:	4a7b      	ldr	r2, [pc, #492]	@ (8006528 <LPTIM_Disable+0x238>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d003      	beq.n	8006348 <LPTIM_Disable+0x58>
 8006340:	4a7a      	ldr	r2, [pc, #488]	@ (800652c <LPTIM_Disable+0x23c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d006      	beq.n	8006354 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8006346:	e01d      	b.n	8006384 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006348:	4b79      	ldr	r3, [pc, #484]	@ (8006530 <LPTIM_Disable+0x240>)
 800634a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800634c:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006350:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006352:	e018      	b.n	8006386 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006354:	4b76      	ldr	r3, [pc, #472]	@ (8006530 <LPTIM_Disable+0x240>)
 8006356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006358:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800635c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800635e:	e012      	b.n	8006386 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8006360:	4b73      	ldr	r3, [pc, #460]	@ (8006530 <LPTIM_Disable+0x240>)
 8006362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006364:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006368:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800636a:	e00c      	b.n	8006386 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 800636c:	4b70      	ldr	r3, [pc, #448]	@ (8006530 <LPTIM_Disable+0x240>)
 800636e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006370:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006374:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006376:	e006      	b.n	8006386 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8006378:	4b6d      	ldr	r3, [pc, #436]	@ (8006530 <LPTIM_Disable+0x240>)
 800637a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800637c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006380:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006382:	e000      	b.n	8006386 <LPTIM_Disable+0x96>
      break;
 8006384:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ac:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a5a      	ldr	r2, [pc, #360]	@ (800651c <LPTIM_Disable+0x22c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d059      	beq.n	800646c <LPTIM_Disable+0x17c>
 80063b8:	4a58      	ldr	r2, [pc, #352]	@ (800651c <LPTIM_Disable+0x22c>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d867      	bhi.n	800648e <LPTIM_Disable+0x19e>
 80063be:	4a58      	ldr	r2, [pc, #352]	@ (8006520 <LPTIM_Disable+0x230>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d042      	beq.n	800644a <LPTIM_Disable+0x15a>
 80063c4:	4a56      	ldr	r2, [pc, #344]	@ (8006520 <LPTIM_Disable+0x230>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d861      	bhi.n	800648e <LPTIM_Disable+0x19e>
 80063ca:	4a56      	ldr	r2, [pc, #344]	@ (8006524 <LPTIM_Disable+0x234>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d02b      	beq.n	8006428 <LPTIM_Disable+0x138>
 80063d0:	4a54      	ldr	r2, [pc, #336]	@ (8006524 <LPTIM_Disable+0x234>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d85b      	bhi.n	800648e <LPTIM_Disable+0x19e>
 80063d6:	4a54      	ldr	r2, [pc, #336]	@ (8006528 <LPTIM_Disable+0x238>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d003      	beq.n	80063e4 <LPTIM_Disable+0xf4>
 80063dc:	4a53      	ldr	r2, [pc, #332]	@ (800652c <LPTIM_Disable+0x23c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d011      	beq.n	8006406 <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 80063e2:	e054      	b.n	800648e <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80063e4:	4b52      	ldr	r3, [pc, #328]	@ (8006530 <LPTIM_Disable+0x240>)
 80063e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ea:	4a51      	ldr	r2, [pc, #324]	@ (8006530 <LPTIM_Disable+0x240>)
 80063ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80063f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80063f4:	4b4e      	ldr	r3, [pc, #312]	@ (8006530 <LPTIM_Disable+0x240>)
 80063f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063fa:	4a4d      	ldr	r2, [pc, #308]	@ (8006530 <LPTIM_Disable+0x240>)
 80063fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006400:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      break;
 8006404:	e044      	b.n	8006490 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8006406:	4b4a      	ldr	r3, [pc, #296]	@ (8006530 <LPTIM_Disable+0x240>)
 8006408:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800640c:	4a48      	ldr	r2, [pc, #288]	@ (8006530 <LPTIM_Disable+0x240>)
 800640e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006412:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8006416:	4b46      	ldr	r3, [pc, #280]	@ (8006530 <LPTIM_Disable+0x240>)
 8006418:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800641c:	4a44      	ldr	r2, [pc, #272]	@ (8006530 <LPTIM_Disable+0x240>)
 800641e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006422:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8006426:	e033      	b.n	8006490 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8006428:	4b41      	ldr	r3, [pc, #260]	@ (8006530 <LPTIM_Disable+0x240>)
 800642a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800642e:	4a40      	ldr	r2, [pc, #256]	@ (8006530 <LPTIM_Disable+0x240>)
 8006430:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006434:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8006438:	4b3d      	ldr	r3, [pc, #244]	@ (8006530 <LPTIM_Disable+0x240>)
 800643a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800643e:	4a3c      	ldr	r2, [pc, #240]	@ (8006530 <LPTIM_Disable+0x240>)
 8006440:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006444:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8006448:	e022      	b.n	8006490 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 800644a:	4b39      	ldr	r3, [pc, #228]	@ (8006530 <LPTIM_Disable+0x240>)
 800644c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006450:	4a37      	ldr	r2, [pc, #220]	@ (8006530 <LPTIM_Disable+0x240>)
 8006452:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006456:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 800645a:	4b35      	ldr	r3, [pc, #212]	@ (8006530 <LPTIM_Disable+0x240>)
 800645c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006460:	4a33      	ldr	r2, [pc, #204]	@ (8006530 <LPTIM_Disable+0x240>)
 8006462:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006466:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 800646a:	e011      	b.n	8006490 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 800646c:	4b30      	ldr	r3, [pc, #192]	@ (8006530 <LPTIM_Disable+0x240>)
 800646e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006472:	4a2f      	ldr	r2, [pc, #188]	@ (8006530 <LPTIM_Disable+0x240>)
 8006474:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006478:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 800647c:	4b2c      	ldr	r3, [pc, #176]	@ (8006530 <LPTIM_Disable+0x240>)
 800647e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006482:	4a2b      	ldr	r2, [pc, #172]	@ (8006530 <LPTIM_Disable+0x240>)
 8006484:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006488:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 800648c:	e000      	b.n	8006490 <LPTIM_Disable+0x1a0>
      break;
 800648e:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d103      	bne.n	800649e <LPTIM_Disable+0x1ae>
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 80d1 	beq.w	8006640 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a1e      	ldr	r2, [pc, #120]	@ (800651c <LPTIM_Disable+0x22c>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d031      	beq.n	800650c <LPTIM_Disable+0x21c>
 80064a8:	4a1c      	ldr	r2, [pc, #112]	@ (800651c <LPTIM_Disable+0x22c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d842      	bhi.n	8006534 <LPTIM_Disable+0x244>
 80064ae:	4a1c      	ldr	r2, [pc, #112]	@ (8006520 <LPTIM_Disable+0x230>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d024      	beq.n	80064fe <LPTIM_Disable+0x20e>
 80064b4:	4a1a      	ldr	r2, [pc, #104]	@ (8006520 <LPTIM_Disable+0x230>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d83c      	bhi.n	8006534 <LPTIM_Disable+0x244>
 80064ba:	4a1a      	ldr	r2, [pc, #104]	@ (8006524 <LPTIM_Disable+0x234>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d017      	beq.n	80064f0 <LPTIM_Disable+0x200>
 80064c0:	4a18      	ldr	r2, [pc, #96]	@ (8006524 <LPTIM_Disable+0x234>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d836      	bhi.n	8006534 <LPTIM_Disable+0x244>
 80064c6:	4a18      	ldr	r2, [pc, #96]	@ (8006528 <LPTIM_Disable+0x238>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d003      	beq.n	80064d4 <LPTIM_Disable+0x1e4>
 80064cc:	4a17      	ldr	r2, [pc, #92]	@ (800652c <LPTIM_Disable+0x23c>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d007      	beq.n	80064e2 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 80064d2:	e02f      	b.n	8006534 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 80064d4:	4b16      	ldr	r3, [pc, #88]	@ (8006530 <LPTIM_Disable+0x240>)
 80064d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d8:	4a15      	ldr	r2, [pc, #84]	@ (8006530 <LPTIM_Disable+0x240>)
 80064da:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 80064de:	6553      	str	r3, [r2, #84]	@ 0x54
        break;
 80064e0:	e029      	b.n	8006536 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 80064e2:	4b13      	ldr	r3, [pc, #76]	@ (8006530 <LPTIM_Disable+0x240>)
 80064e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064e6:	4a12      	ldr	r2, [pc, #72]	@ (8006530 <LPTIM_Disable+0x240>)
 80064e8:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80064ec:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 80064ee:	e022      	b.n	8006536 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 80064f0:	4b0f      	ldr	r3, [pc, #60]	@ (8006530 <LPTIM_Disable+0x240>)
 80064f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064f4:	4a0e      	ldr	r2, [pc, #56]	@ (8006530 <LPTIM_Disable+0x240>)
 80064f6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80064fa:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 80064fc:	e01b      	b.n	8006536 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 80064fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006530 <LPTIM_Disable+0x240>)
 8006500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006502:	4a0b      	ldr	r2, [pc, #44]	@ (8006530 <LPTIM_Disable+0x240>)
 8006504:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8006508:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 800650a:	e014      	b.n	8006536 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 800650c:	4b08      	ldr	r3, [pc, #32]	@ (8006530 <LPTIM_Disable+0x240>)
 800650e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006510:	4a07      	ldr	r2, [pc, #28]	@ (8006530 <LPTIM_Disable+0x240>)
 8006512:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8006516:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8006518:	e00d      	b.n	8006536 <LPTIM_Disable+0x246>
 800651a:	bf00      	nop
 800651c:	58003000 	.word	0x58003000
 8006520:	58002c00 	.word	0x58002c00
 8006524:	58002800 	.word	0x58002800
 8006528:	40002400 	.word	0x40002400
 800652c:	58002400 	.word	0x58002400
 8006530:	58024400 	.word	0x58024400
        break;
 8006534:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d01a      	beq.n	8006572 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	691a      	ldr	r2, [r3, #16]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f042 0201 	orr.w	r2, r2, #1
 800654a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	69fa      	ldr	r2, [r7, #28]
 8006552:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8006554:	2108      	movs	r1, #8
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7ff fe9a 	bl	8006290 <LPTIM_WaitForFlag>
 800655c:	4603      	mov	r3, r0
 800655e:	2b03      	cmp	r3, #3
 8006560:	d103      	bne.n	800656a <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2203      	movs	r2, #3
 8006566:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2208      	movs	r2, #8
 8006570:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d01a      	beq.n	80065ae <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	691a      	ldr	r2, [r3, #16]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0201 	orr.w	r2, r2, #1
 8006586:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8006590:	2110      	movs	r1, #16
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7ff fe7c 	bl	8006290 <LPTIM_WaitForFlag>
 8006598:	4603      	mov	r3, r0
 800659a:	2b03      	cmp	r3, #3
 800659c:	d103      	bne.n	80065a6 <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2203      	movs	r2, #3
 80065a2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2210      	movs	r2, #16
 80065ac:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a32      	ldr	r2, [pc, #200]	@ (800667c <LPTIM_Disable+0x38c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d039      	beq.n	800662c <LPTIM_Disable+0x33c>
 80065b8:	4a30      	ldr	r2, [pc, #192]	@ (800667c <LPTIM_Disable+0x38c>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d83f      	bhi.n	800663e <LPTIM_Disable+0x34e>
 80065be:	4a30      	ldr	r2, [pc, #192]	@ (8006680 <LPTIM_Disable+0x390>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d02a      	beq.n	800661a <LPTIM_Disable+0x32a>
 80065c4:	4a2e      	ldr	r2, [pc, #184]	@ (8006680 <LPTIM_Disable+0x390>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d839      	bhi.n	800663e <LPTIM_Disable+0x34e>
 80065ca:	4a2e      	ldr	r2, [pc, #184]	@ (8006684 <LPTIM_Disable+0x394>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d01b      	beq.n	8006608 <LPTIM_Disable+0x318>
 80065d0:	4a2c      	ldr	r2, [pc, #176]	@ (8006684 <LPTIM_Disable+0x394>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d833      	bhi.n	800663e <LPTIM_Disable+0x34e>
 80065d6:	4a2c      	ldr	r2, [pc, #176]	@ (8006688 <LPTIM_Disable+0x398>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d003      	beq.n	80065e4 <LPTIM_Disable+0x2f4>
 80065dc:	4a2b      	ldr	r2, [pc, #172]	@ (800668c <LPTIM_Disable+0x39c>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d009      	beq.n	80065f6 <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 80065e2:	e02c      	b.n	800663e <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80065e4:	4b2a      	ldr	r3, [pc, #168]	@ (8006690 <LPTIM_Disable+0x3a0>)
 80065e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065e8:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 80065ec:	4928      	ldr	r1, [pc, #160]	@ (8006690 <LPTIM_Disable+0x3a0>)
 80065ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f0:	4313      	orrs	r3, r2
 80065f2:	654b      	str	r3, [r1, #84]	@ 0x54
        break;
 80065f4:	e024      	b.n	8006640 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80065f6:	4b26      	ldr	r3, [pc, #152]	@ (8006690 <LPTIM_Disable+0x3a0>)
 80065f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065fa:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80065fe:	4924      	ldr	r1, [pc, #144]	@ (8006690 <LPTIM_Disable+0x3a0>)
 8006600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006602:	4313      	orrs	r3, r2
 8006604:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8006606:	e01b      	b.n	8006640 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8006608:	4b21      	ldr	r3, [pc, #132]	@ (8006690 <LPTIM_Disable+0x3a0>)
 800660a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800660c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006610:	491f      	ldr	r1, [pc, #124]	@ (8006690 <LPTIM_Disable+0x3a0>)
 8006612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006614:	4313      	orrs	r3, r2
 8006616:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8006618:	e012      	b.n	8006640 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 800661a:	4b1d      	ldr	r3, [pc, #116]	@ (8006690 <LPTIM_Disable+0x3a0>)
 800661c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800661e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006622:	491b      	ldr	r1, [pc, #108]	@ (8006690 <LPTIM_Disable+0x3a0>)
 8006624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006626:	4313      	orrs	r3, r2
 8006628:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 800662a:	e009      	b.n	8006640 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 800662c:	4b18      	ldr	r3, [pc, #96]	@ (8006690 <LPTIM_Disable+0x3a0>)
 800662e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006630:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006634:	4916      	ldr	r1, [pc, #88]	@ (8006690 <LPTIM_Disable+0x3a0>)
 8006636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006638:	4313      	orrs	r3, r2
 800663a:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 800663c:	e000      	b.n	8006640 <LPTIM_Disable+0x350>
        break;
 800663e:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	691a      	ldr	r2, [r3, #16]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0201 	bic.w	r2, r2, #1
 800664e:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006656:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6a3a      	ldr	r2, [r7, #32]
 800665e:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	625a      	str	r2, [r3, #36]	@ 0x24
 8006668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	f383 8810 	msr	PRIMASK, r3
}
 8006672:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006674:	bf00      	nop
 8006676:	3730      	adds	r7, #48	@ 0x30
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	58003000 	.word	0x58003000
 8006680:	58002c00 	.word	0x58002c00
 8006684:	58002800 	.word	0x58002800
 8006688:	40002400 	.word	0x40002400
 800668c:	58002400 	.word	0x58002400
 8006690:	58024400 	.word	0x58024400

08006694 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800669c:	4b19      	ldr	r3, [pc, #100]	@ (8006704 <HAL_PWREx_ConfigSupply+0x70>)
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b04      	cmp	r3, #4
 80066a6:	d00a      	beq.n	80066be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80066a8:	4b16      	ldr	r3, [pc, #88]	@ (8006704 <HAL_PWREx_ConfigSupply+0x70>)
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f003 0307 	and.w	r3, r3, #7
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d001      	beq.n	80066ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e01f      	b.n	80066fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	e01d      	b.n	80066fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80066be:	4b11      	ldr	r3, [pc, #68]	@ (8006704 <HAL_PWREx_ConfigSupply+0x70>)
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	f023 0207 	bic.w	r2, r3, #7
 80066c6:	490f      	ldr	r1, [pc, #60]	@ (8006704 <HAL_PWREx_ConfigSupply+0x70>)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80066ce:	f7fd f9d5 	bl	8003a7c <HAL_GetTick>
 80066d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80066d4:	e009      	b.n	80066ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80066d6:	f7fd f9d1 	bl	8003a7c <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80066e4:	d901      	bls.n	80066ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e007      	b.n	80066fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80066ea:	4b06      	ldr	r3, [pc, #24]	@ (8006704 <HAL_PWREx_ConfigSupply+0x70>)
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066f6:	d1ee      	bne.n	80066d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	58024800 	.word	0x58024800

08006708 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b08c      	sub	sp, #48	@ 0x30
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d102      	bne.n	800671c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	f000 bc48 	b.w	8006fac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 8088 	beq.w	800683a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800672a:	4b99      	ldr	r3, [pc, #612]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006732:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006734:	4b96      	ldr	r3, [pc, #600]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 8006736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006738:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800673a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800673c:	2b10      	cmp	r3, #16
 800673e:	d007      	beq.n	8006750 <HAL_RCC_OscConfig+0x48>
 8006740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006742:	2b18      	cmp	r3, #24
 8006744:	d111      	bne.n	800676a <HAL_RCC_OscConfig+0x62>
 8006746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006748:	f003 0303 	and.w	r3, r3, #3
 800674c:	2b02      	cmp	r3, #2
 800674e:	d10c      	bne.n	800676a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006750:	4b8f      	ldr	r3, [pc, #572]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d06d      	beq.n	8006838 <HAL_RCC_OscConfig+0x130>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d169      	bne.n	8006838 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	f000 bc21 	b.w	8006fac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006772:	d106      	bne.n	8006782 <HAL_RCC_OscConfig+0x7a>
 8006774:	4b86      	ldr	r3, [pc, #536]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a85      	ldr	r2, [pc, #532]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 800677a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	e02e      	b.n	80067e0 <HAL_RCC_OscConfig+0xd8>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10c      	bne.n	80067a4 <HAL_RCC_OscConfig+0x9c>
 800678a:	4b81      	ldr	r3, [pc, #516]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a80      	ldr	r2, [pc, #512]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 8006790:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	4b7e      	ldr	r3, [pc, #504]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a7d      	ldr	r2, [pc, #500]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 800679c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067a0:	6013      	str	r3, [r2, #0]
 80067a2:	e01d      	b.n	80067e0 <HAL_RCC_OscConfig+0xd8>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067ac:	d10c      	bne.n	80067c8 <HAL_RCC_OscConfig+0xc0>
 80067ae:	4b78      	ldr	r3, [pc, #480]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a77      	ldr	r2, [pc, #476]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 80067b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067b8:	6013      	str	r3, [r2, #0]
 80067ba:	4b75      	ldr	r3, [pc, #468]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a74      	ldr	r2, [pc, #464]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 80067c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	e00b      	b.n	80067e0 <HAL_RCC_OscConfig+0xd8>
 80067c8:	4b71      	ldr	r3, [pc, #452]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a70      	ldr	r2, [pc, #448]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 80067ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067d2:	6013      	str	r3, [r2, #0]
 80067d4:	4b6e      	ldr	r3, [pc, #440]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a6d      	ldr	r2, [pc, #436]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 80067da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d013      	beq.n	8006810 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e8:	f7fd f948 	bl	8003a7c <HAL_GetTick>
 80067ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80067ee:	e008      	b.n	8006802 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067f0:	f7fd f944 	bl	8003a7c <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	2b64      	cmp	r3, #100	@ 0x64
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e3d4      	b.n	8006fac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006802:	4b63      	ldr	r3, [pc, #396]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d0f0      	beq.n	80067f0 <HAL_RCC_OscConfig+0xe8>
 800680e:	e014      	b.n	800683a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006810:	f7fd f934 	bl	8003a7c <HAL_GetTick>
 8006814:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006816:	e008      	b.n	800682a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006818:	f7fd f930 	bl	8003a7c <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	2b64      	cmp	r3, #100	@ 0x64
 8006824:	d901      	bls.n	800682a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e3c0      	b.n	8006fac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800682a:	4b59      	ldr	r3, [pc, #356]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1f0      	bne.n	8006818 <HAL_RCC_OscConfig+0x110>
 8006836:	e000      	b.n	800683a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 80ca 	beq.w	80069dc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006848:	4b51      	ldr	r3, [pc, #324]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006850:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006852:	4b4f      	ldr	r3, [pc, #316]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 8006854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006856:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006858:	6a3b      	ldr	r3, [r7, #32]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d007      	beq.n	800686e <HAL_RCC_OscConfig+0x166>
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	2b18      	cmp	r3, #24
 8006862:	d156      	bne.n	8006912 <HAL_RCC_OscConfig+0x20a>
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	f003 0303 	and.w	r3, r3, #3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d151      	bne.n	8006912 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800686e:	4b48      	ldr	r3, [pc, #288]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0304 	and.w	r3, r3, #4
 8006876:	2b00      	cmp	r3, #0
 8006878:	d005      	beq.n	8006886 <HAL_RCC_OscConfig+0x17e>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e392      	b.n	8006fac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006886:	4b42      	ldr	r3, [pc, #264]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f023 0219 	bic.w	r2, r3, #25
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	493f      	ldr	r1, [pc, #252]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 8006894:	4313      	orrs	r3, r2
 8006896:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006898:	f7fd f8f0 	bl	8003a7c <HAL_GetTick>
 800689c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800689e:	e008      	b.n	80068b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068a0:	f7fd f8ec 	bl	8003a7c <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d901      	bls.n	80068b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e37c      	b.n	8006fac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068b2:	4b37      	ldr	r3, [pc, #220]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0304 	and.w	r3, r3, #4
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d0f0      	beq.n	80068a0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068be:	f7fd f8e9 	bl	8003a94 <HAL_GetREVID>
 80068c2:	4603      	mov	r3, r0
 80068c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d817      	bhi.n	80068fc <HAL_RCC_OscConfig+0x1f4>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	2b40      	cmp	r3, #64	@ 0x40
 80068d2:	d108      	bne.n	80068e6 <HAL_RCC_OscConfig+0x1de>
 80068d4:	4b2e      	ldr	r3, [pc, #184]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80068dc:	4a2c      	ldr	r2, [pc, #176]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 80068de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068e2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068e4:	e07a      	b.n	80069dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068e6:	4b2a      	ldr	r3, [pc, #168]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	031b      	lsls	r3, r3, #12
 80068f4:	4926      	ldr	r1, [pc, #152]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068fa:	e06f      	b.n	80069dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068fc:	4b24      	ldr	r3, [pc, #144]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	061b      	lsls	r3, r3, #24
 800690a:	4921      	ldr	r1, [pc, #132]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 800690c:	4313      	orrs	r3, r2
 800690e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006910:	e064      	b.n	80069dc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d047      	beq.n	80069aa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800691a:	4b1d      	ldr	r3, [pc, #116]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f023 0219 	bic.w	r2, r3, #25
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	491a      	ldr	r1, [pc, #104]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 8006928:	4313      	orrs	r3, r2
 800692a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800692c:	f7fd f8a6 	bl	8003a7c <HAL_GetTick>
 8006930:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006932:	e008      	b.n	8006946 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006934:	f7fd f8a2 	bl	8003a7c <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b02      	cmp	r3, #2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e332      	b.n	8006fac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006946:	4b12      	ldr	r3, [pc, #72]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0304 	and.w	r3, r3, #4
 800694e:	2b00      	cmp	r3, #0
 8006950:	d0f0      	beq.n	8006934 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006952:	f7fd f89f 	bl	8003a94 <HAL_GetREVID>
 8006956:	4603      	mov	r3, r0
 8006958:	f241 0203 	movw	r2, #4099	@ 0x1003
 800695c:	4293      	cmp	r3, r2
 800695e:	d819      	bhi.n	8006994 <HAL_RCC_OscConfig+0x28c>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	2b40      	cmp	r3, #64	@ 0x40
 8006966:	d108      	bne.n	800697a <HAL_RCC_OscConfig+0x272>
 8006968:	4b09      	ldr	r3, [pc, #36]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006970:	4a07      	ldr	r2, [pc, #28]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 8006972:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006976:	6053      	str	r3, [r2, #4]
 8006978:	e030      	b.n	80069dc <HAL_RCC_OscConfig+0x2d4>
 800697a:	4b05      	ldr	r3, [pc, #20]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	031b      	lsls	r3, r3, #12
 8006988:	4901      	ldr	r1, [pc, #4]	@ (8006990 <HAL_RCC_OscConfig+0x288>)
 800698a:	4313      	orrs	r3, r2
 800698c:	604b      	str	r3, [r1, #4]
 800698e:	e025      	b.n	80069dc <HAL_RCC_OscConfig+0x2d4>
 8006990:	58024400 	.word	0x58024400
 8006994:	4b9a      	ldr	r3, [pc, #616]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	061b      	lsls	r3, r3, #24
 80069a2:	4997      	ldr	r1, [pc, #604]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	604b      	str	r3, [r1, #4]
 80069a8:	e018      	b.n	80069dc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069aa:	4b95      	ldr	r3, [pc, #596]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a94      	ldr	r2, [pc, #592]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 80069b0:	f023 0301 	bic.w	r3, r3, #1
 80069b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b6:	f7fd f861 	bl	8003a7c <HAL_GetTick>
 80069ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80069bc:	e008      	b.n	80069d0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069be:	f7fd f85d 	bl	8003a7c <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d901      	bls.n	80069d0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e2ed      	b.n	8006fac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80069d0:	4b8b      	ldr	r3, [pc, #556]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0304 	and.w	r3, r3, #4
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1f0      	bne.n	80069be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0310 	and.w	r3, r3, #16
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 80a9 	beq.w	8006b3c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069ea:	4b85      	ldr	r3, [pc, #532]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069f4:	4b82      	ldr	r3, [pc, #520]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 80069f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	d007      	beq.n	8006a10 <HAL_RCC_OscConfig+0x308>
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	2b18      	cmp	r3, #24
 8006a04:	d13a      	bne.n	8006a7c <HAL_RCC_OscConfig+0x374>
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f003 0303 	and.w	r3, r3, #3
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d135      	bne.n	8006a7c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a10:	4b7b      	ldr	r3, [pc, #492]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d005      	beq.n	8006a28 <HAL_RCC_OscConfig+0x320>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	2b80      	cmp	r3, #128	@ 0x80
 8006a22:	d001      	beq.n	8006a28 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e2c1      	b.n	8006fac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a28:	f7fd f834 	bl	8003a94 <HAL_GetREVID>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d817      	bhi.n	8006a66 <HAL_RCC_OscConfig+0x35e>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	2b20      	cmp	r3, #32
 8006a3c:	d108      	bne.n	8006a50 <HAL_RCC_OscConfig+0x348>
 8006a3e:	4b70      	ldr	r3, [pc, #448]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006a46:	4a6e      	ldr	r2, [pc, #440]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006a48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a4c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a4e:	e075      	b.n	8006b3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a50:	4b6b      	ldr	r3, [pc, #428]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a1b      	ldr	r3, [r3, #32]
 8006a5c:	069b      	lsls	r3, r3, #26
 8006a5e:	4968      	ldr	r1, [pc, #416]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a64:	e06a      	b.n	8006b3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a66:	4b66      	ldr	r3, [pc, #408]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	061b      	lsls	r3, r3, #24
 8006a74:	4962      	ldr	r1, [pc, #392]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a7a:	e05f      	b.n	8006b3c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	69db      	ldr	r3, [r3, #28]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d042      	beq.n	8006b0a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006a84:	4b5e      	ldr	r3, [pc, #376]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a5d      	ldr	r2, [pc, #372]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006a8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a90:	f7fc fff4 	bl	8003a7c <HAL_GetTick>
 8006a94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a96:	e008      	b.n	8006aaa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006a98:	f7fc fff0 	bl	8003a7c <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e280      	b.n	8006fac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006aaa:	4b55      	ldr	r3, [pc, #340]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d0f0      	beq.n	8006a98 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ab6:	f7fc ffed 	bl	8003a94 <HAL_GetREVID>
 8006aba:	4603      	mov	r3, r0
 8006abc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d817      	bhi.n	8006af4 <HAL_RCC_OscConfig+0x3ec>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	2b20      	cmp	r3, #32
 8006aca:	d108      	bne.n	8006ade <HAL_RCC_OscConfig+0x3d6>
 8006acc:	4b4c      	ldr	r3, [pc, #304]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006ad4:	4a4a      	ldr	r2, [pc, #296]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006ad6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ada:	6053      	str	r3, [r2, #4]
 8006adc:	e02e      	b.n	8006b3c <HAL_RCC_OscConfig+0x434>
 8006ade:	4b48      	ldr	r3, [pc, #288]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	069b      	lsls	r3, r3, #26
 8006aec:	4944      	ldr	r1, [pc, #272]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	604b      	str	r3, [r1, #4]
 8006af2:	e023      	b.n	8006b3c <HAL_RCC_OscConfig+0x434>
 8006af4:	4b42      	ldr	r3, [pc, #264]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a1b      	ldr	r3, [r3, #32]
 8006b00:	061b      	lsls	r3, r3, #24
 8006b02:	493f      	ldr	r1, [pc, #252]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006b04:	4313      	orrs	r3, r2
 8006b06:	60cb      	str	r3, [r1, #12]
 8006b08:	e018      	b.n	8006b3c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006b0a:	4b3d      	ldr	r3, [pc, #244]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a3c      	ldr	r2, [pc, #240]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006b10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b16:	f7fc ffb1 	bl	8003a7c <HAL_GetTick>
 8006b1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b1c:	e008      	b.n	8006b30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006b1e:	f7fc ffad 	bl	8003a7c <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d901      	bls.n	8006b30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e23d      	b.n	8006fac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b30:	4b33      	ldr	r3, [pc, #204]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1f0      	bne.n	8006b1e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d036      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d019      	beq.n	8006b84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b50:	4b2b      	ldr	r3, [pc, #172]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006b52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b54:	4a2a      	ldr	r2, [pc, #168]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006b56:	f043 0301 	orr.w	r3, r3, #1
 8006b5a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b5c:	f7fc ff8e 	bl	8003a7c <HAL_GetTick>
 8006b60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b62:	e008      	b.n	8006b76 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b64:	f7fc ff8a 	bl	8003a7c <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e21a      	b.n	8006fac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b76:	4b22      	ldr	r3, [pc, #136]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0f0      	beq.n	8006b64 <HAL_RCC_OscConfig+0x45c>
 8006b82:	e018      	b.n	8006bb6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b84:	4b1e      	ldr	r3, [pc, #120]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006b86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b88:	4a1d      	ldr	r2, [pc, #116]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006b8a:	f023 0301 	bic.w	r3, r3, #1
 8006b8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b90:	f7fc ff74 	bl	8003a7c <HAL_GetTick>
 8006b94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b96:	e008      	b.n	8006baa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b98:	f7fc ff70 	bl	8003a7c <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e200      	b.n	8006fac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006baa:	4b15      	ldr	r3, [pc, #84]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1f0      	bne.n	8006b98 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0320 	and.w	r3, r3, #32
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d039      	beq.n	8006c36 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d01c      	beq.n	8006c04 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006bca:	4b0d      	ldr	r3, [pc, #52]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a0c      	ldr	r2, [pc, #48]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006bd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006bd4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006bd6:	f7fc ff51 	bl	8003a7c <HAL_GetTick>
 8006bda:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006bdc:	e008      	b.n	8006bf0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bde:	f7fc ff4d 	bl	8003a7c <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d901      	bls.n	8006bf0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e1dd      	b.n	8006fac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006bf0:	4b03      	ldr	r3, [pc, #12]	@ (8006c00 <HAL_RCC_OscConfig+0x4f8>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d0f0      	beq.n	8006bde <HAL_RCC_OscConfig+0x4d6>
 8006bfc:	e01b      	b.n	8006c36 <HAL_RCC_OscConfig+0x52e>
 8006bfe:	bf00      	nop
 8006c00:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c04:	4b9b      	ldr	r3, [pc, #620]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a9a      	ldr	r2, [pc, #616]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006c0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c10:	f7fc ff34 	bl	8003a7c <HAL_GetTick>
 8006c14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c16:	e008      	b.n	8006c2a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c18:	f7fc ff30 	bl	8003a7c <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d901      	bls.n	8006c2a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e1c0      	b.n	8006fac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c2a:	4b92      	ldr	r3, [pc, #584]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1f0      	bne.n	8006c18 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0304 	and.w	r3, r3, #4
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f000 8081 	beq.w	8006d46 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006c44:	4b8c      	ldr	r3, [pc, #560]	@ (8006e78 <HAL_RCC_OscConfig+0x770>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a8b      	ldr	r2, [pc, #556]	@ (8006e78 <HAL_RCC_OscConfig+0x770>)
 8006c4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c50:	f7fc ff14 	bl	8003a7c <HAL_GetTick>
 8006c54:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c56:	e008      	b.n	8006c6a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c58:	f7fc ff10 	bl	8003a7c <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b64      	cmp	r3, #100	@ 0x64
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e1a0      	b.n	8006fac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c6a:	4b83      	ldr	r3, [pc, #524]	@ (8006e78 <HAL_RCC_OscConfig+0x770>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d0f0      	beq.n	8006c58 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d106      	bne.n	8006c8c <HAL_RCC_OscConfig+0x584>
 8006c7e:	4b7d      	ldr	r3, [pc, #500]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c82:	4a7c      	ldr	r2, [pc, #496]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006c84:	f043 0301 	orr.w	r3, r3, #1
 8006c88:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c8a:	e02d      	b.n	8006ce8 <HAL_RCC_OscConfig+0x5e0>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10c      	bne.n	8006cae <HAL_RCC_OscConfig+0x5a6>
 8006c94:	4b77      	ldr	r3, [pc, #476]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c98:	4a76      	ldr	r2, [pc, #472]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006c9a:	f023 0301 	bic.w	r3, r3, #1
 8006c9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ca0:	4b74      	ldr	r3, [pc, #464]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ca4:	4a73      	ldr	r2, [pc, #460]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006ca6:	f023 0304 	bic.w	r3, r3, #4
 8006caa:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cac:	e01c      	b.n	8006ce8 <HAL_RCC_OscConfig+0x5e0>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	2b05      	cmp	r3, #5
 8006cb4:	d10c      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x5c8>
 8006cb6:	4b6f      	ldr	r3, [pc, #444]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cba:	4a6e      	ldr	r2, [pc, #440]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006cbc:	f043 0304 	orr.w	r3, r3, #4
 8006cc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cc2:	4b6c      	ldr	r3, [pc, #432]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cc6:	4a6b      	ldr	r2, [pc, #428]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006cc8:	f043 0301 	orr.w	r3, r3, #1
 8006ccc:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cce:	e00b      	b.n	8006ce8 <HAL_RCC_OscConfig+0x5e0>
 8006cd0:	4b68      	ldr	r3, [pc, #416]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cd4:	4a67      	ldr	r2, [pc, #412]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006cd6:	f023 0301 	bic.w	r3, r3, #1
 8006cda:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cdc:	4b65      	ldr	r3, [pc, #404]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ce0:	4a64      	ldr	r2, [pc, #400]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006ce2:	f023 0304 	bic.w	r3, r3, #4
 8006ce6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d015      	beq.n	8006d1c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf0:	f7fc fec4 	bl	8003a7c <HAL_GetTick>
 8006cf4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cf6:	e00a      	b.n	8006d0e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cf8:	f7fc fec0 	bl	8003a7c <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d901      	bls.n	8006d0e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e14e      	b.n	8006fac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d0e:	4b59      	ldr	r3, [pc, #356]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d0ee      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x5f0>
 8006d1a:	e014      	b.n	8006d46 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d1c:	f7fc feae 	bl	8003a7c <HAL_GetTick>
 8006d20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d22:	e00a      	b.n	8006d3a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d24:	f7fc feaa 	bl	8003a7c <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e138      	b.n	8006fac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1ee      	bne.n	8006d24 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 812d 	beq.w	8006faa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006d50:	4b48      	ldr	r3, [pc, #288]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d58:	2b18      	cmp	r3, #24
 8006d5a:	f000 80bd 	beq.w	8006ed8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	f040 809e 	bne.w	8006ea4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d68:	4b42      	ldr	r3, [pc, #264]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a41      	ldr	r2, [pc, #260]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006d6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d74:	f7fc fe82 	bl	8003a7c <HAL_GetTick>
 8006d78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d7a:	e008      	b.n	8006d8e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d7c:	f7fc fe7e 	bl	8003a7c <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d901      	bls.n	8006d8e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e10e      	b.n	8006fac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d8e:	4b39      	ldr	r3, [pc, #228]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1f0      	bne.n	8006d7c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d9a:	4b36      	ldr	r3, [pc, #216]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006d9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d9e:	4b37      	ldr	r3, [pc, #220]	@ (8006e7c <HAL_RCC_OscConfig+0x774>)
 8006da0:	4013      	ands	r3, r2
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006daa:	0112      	lsls	r2, r2, #4
 8006dac:	430a      	orrs	r2, r1
 8006dae:	4931      	ldr	r1, [pc, #196]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	628b      	str	r3, [r1, #40]	@ 0x28
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db8:	3b01      	subs	r3, #1
 8006dba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	025b      	lsls	r3, r3, #9
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	041b      	lsls	r3, r3, #16
 8006dd2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	061b      	lsls	r3, r3, #24
 8006de0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006de4:	4923      	ldr	r1, [pc, #140]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006de6:	4313      	orrs	r3, r2
 8006de8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006dea:	4b22      	ldr	r3, [pc, #136]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dee:	4a21      	ldr	r2, [pc, #132]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006df0:	f023 0301 	bic.w	r3, r3, #1
 8006df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006df6:	4b1f      	ldr	r3, [pc, #124]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006df8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006dfa:	4b21      	ldr	r3, [pc, #132]	@ (8006e80 <HAL_RCC_OscConfig+0x778>)
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006e02:	00d2      	lsls	r2, r2, #3
 8006e04:	491b      	ldr	r1, [pc, #108]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006e06:	4313      	orrs	r3, r2
 8006e08:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0e:	f023 020c 	bic.w	r2, r3, #12
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e16:	4917      	ldr	r1, [pc, #92]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006e1c:	4b15      	ldr	r3, [pc, #84]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e20:	f023 0202 	bic.w	r2, r3, #2
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e28:	4912      	ldr	r1, [pc, #72]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006e2e:	4b11      	ldr	r3, [pc, #68]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e32:	4a10      	ldr	r2, [pc, #64]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3e:	4a0d      	ldr	r2, [pc, #52]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006e40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006e46:	4b0b      	ldr	r3, [pc, #44]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006e4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006e52:	4b08      	ldr	r3, [pc, #32]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e56:	4a07      	ldr	r2, [pc, #28]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006e58:	f043 0301 	orr.w	r3, r3, #1
 8006e5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e5e:	4b05      	ldr	r3, [pc, #20]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a04      	ldr	r2, [pc, #16]	@ (8006e74 <HAL_RCC_OscConfig+0x76c>)
 8006e64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e6a:	f7fc fe07 	bl	8003a7c <HAL_GetTick>
 8006e6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e70:	e011      	b.n	8006e96 <HAL_RCC_OscConfig+0x78e>
 8006e72:	bf00      	nop
 8006e74:	58024400 	.word	0x58024400
 8006e78:	58024800 	.word	0x58024800
 8006e7c:	fffffc0c 	.word	0xfffffc0c
 8006e80:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e84:	f7fc fdfa 	bl	8003a7c <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d901      	bls.n	8006e96 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e08a      	b.n	8006fac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e96:	4b47      	ldr	r3, [pc, #284]	@ (8006fb4 <HAL_RCC_OscConfig+0x8ac>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d0f0      	beq.n	8006e84 <HAL_RCC_OscConfig+0x77c>
 8006ea2:	e082      	b.n	8006faa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ea4:	4b43      	ldr	r3, [pc, #268]	@ (8006fb4 <HAL_RCC_OscConfig+0x8ac>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a42      	ldr	r2, [pc, #264]	@ (8006fb4 <HAL_RCC_OscConfig+0x8ac>)
 8006eaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb0:	f7fc fde4 	bl	8003a7c <HAL_GetTick>
 8006eb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006eb6:	e008      	b.n	8006eca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eb8:	f7fc fde0 	bl	8003a7c <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e070      	b.n	8006fac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006eca:	4b3a      	ldr	r3, [pc, #232]	@ (8006fb4 <HAL_RCC_OscConfig+0x8ac>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1f0      	bne.n	8006eb8 <HAL_RCC_OscConfig+0x7b0>
 8006ed6:	e068      	b.n	8006faa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006ed8:	4b36      	ldr	r3, [pc, #216]	@ (8006fb4 <HAL_RCC_OscConfig+0x8ac>)
 8006eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006edc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006ede:	4b35      	ldr	r3, [pc, #212]	@ (8006fb4 <HAL_RCC_OscConfig+0x8ac>)
 8006ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ee2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d031      	beq.n	8006f50 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	f003 0203 	and.w	r2, r3, #3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d12a      	bne.n	8006f50 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	091b      	lsrs	r3, r3, #4
 8006efe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d122      	bne.n	8006f50 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f14:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d11a      	bne.n	8006f50 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	0a5b      	lsrs	r3, r3, #9
 8006f1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f26:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d111      	bne.n	8006f50 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	0c1b      	lsrs	r3, r3, #16
 8006f30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f38:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d108      	bne.n	8006f50 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	0e1b      	lsrs	r3, r3, #24
 8006f42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f4a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d001      	beq.n	8006f54 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e02b      	b.n	8006fac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006f54:	4b17      	ldr	r3, [pc, #92]	@ (8006fb4 <HAL_RCC_OscConfig+0x8ac>)
 8006f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f58:	08db      	lsrs	r3, r3, #3
 8006f5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f5e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d01f      	beq.n	8006faa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006f6a:	4b12      	ldr	r3, [pc, #72]	@ (8006fb4 <HAL_RCC_OscConfig+0x8ac>)
 8006f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f6e:	4a11      	ldr	r2, [pc, #68]	@ (8006fb4 <HAL_RCC_OscConfig+0x8ac>)
 8006f70:	f023 0301 	bic.w	r3, r3, #1
 8006f74:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f76:	f7fc fd81 	bl	8003a7c <HAL_GetTick>
 8006f7a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006f7c:	bf00      	nop
 8006f7e:	f7fc fd7d 	bl	8003a7c <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d0f9      	beq.n	8006f7e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8006fb4 <HAL_RCC_OscConfig+0x8ac>)
 8006f8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8006fb8 <HAL_RCC_OscConfig+0x8b0>)
 8006f90:	4013      	ands	r3, r2
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006f96:	00d2      	lsls	r2, r2, #3
 8006f98:	4906      	ldr	r1, [pc, #24]	@ (8006fb4 <HAL_RCC_OscConfig+0x8ac>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006f9e:	4b05      	ldr	r3, [pc, #20]	@ (8006fb4 <HAL_RCC_OscConfig+0x8ac>)
 8006fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa2:	4a04      	ldr	r2, [pc, #16]	@ (8006fb4 <HAL_RCC_OscConfig+0x8ac>)
 8006fa4:	f043 0301 	orr.w	r3, r3, #1
 8006fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3730      	adds	r7, #48	@ 0x30
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	58024400 	.word	0x58024400
 8006fb8:	ffff0007 	.word	0xffff0007

08006fbc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e19c      	b.n	800730a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006fd0:	4b8a      	ldr	r3, [pc, #552]	@ (80071fc <HAL_RCC_ClockConfig+0x240>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 030f 	and.w	r3, r3, #15
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d910      	bls.n	8007000 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fde:	4b87      	ldr	r3, [pc, #540]	@ (80071fc <HAL_RCC_ClockConfig+0x240>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f023 020f 	bic.w	r2, r3, #15
 8006fe6:	4985      	ldr	r1, [pc, #532]	@ (80071fc <HAL_RCC_ClockConfig+0x240>)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fee:	4b83      	ldr	r3, [pc, #524]	@ (80071fc <HAL_RCC_ClockConfig+0x240>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d001      	beq.n	8007000 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e184      	b.n	800730a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0304 	and.w	r3, r3, #4
 8007008:	2b00      	cmp	r3, #0
 800700a:	d010      	beq.n	800702e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	691a      	ldr	r2, [r3, #16]
 8007010:	4b7b      	ldr	r3, [pc, #492]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007018:	429a      	cmp	r2, r3
 800701a:	d908      	bls.n	800702e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800701c:	4b78      	ldr	r3, [pc, #480]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	4975      	ldr	r1, [pc, #468]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 800702a:	4313      	orrs	r3, r2
 800702c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0308 	and.w	r3, r3, #8
 8007036:	2b00      	cmp	r3, #0
 8007038:	d010      	beq.n	800705c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	695a      	ldr	r2, [r3, #20]
 800703e:	4b70      	ldr	r3, [pc, #448]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007046:	429a      	cmp	r2, r3
 8007048:	d908      	bls.n	800705c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800704a:	4b6d      	ldr	r3, [pc, #436]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	496a      	ldr	r1, [pc, #424]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 8007058:	4313      	orrs	r3, r2
 800705a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0310 	and.w	r3, r3, #16
 8007064:	2b00      	cmp	r3, #0
 8007066:	d010      	beq.n	800708a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	699a      	ldr	r2, [r3, #24]
 800706c:	4b64      	ldr	r3, [pc, #400]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 800706e:	69db      	ldr	r3, [r3, #28]
 8007070:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007074:	429a      	cmp	r2, r3
 8007076:	d908      	bls.n	800708a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007078:	4b61      	ldr	r3, [pc, #388]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 800707a:	69db      	ldr	r3, [r3, #28]
 800707c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	495e      	ldr	r1, [pc, #376]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 8007086:	4313      	orrs	r3, r2
 8007088:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0320 	and.w	r3, r3, #32
 8007092:	2b00      	cmp	r3, #0
 8007094:	d010      	beq.n	80070b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	69da      	ldr	r2, [r3, #28]
 800709a:	4b59      	ldr	r3, [pc, #356]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d908      	bls.n	80070b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80070a6:	4b56      	ldr	r3, [pc, #344]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	4953      	ldr	r1, [pc, #332]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0302 	and.w	r3, r3, #2
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d010      	beq.n	80070e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68da      	ldr	r2, [r3, #12]
 80070c8:	4b4d      	ldr	r3, [pc, #308]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	f003 030f 	and.w	r3, r3, #15
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d908      	bls.n	80070e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070d4:	4b4a      	ldr	r3, [pc, #296]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	f023 020f 	bic.w	r2, r3, #15
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	4947      	ldr	r1, [pc, #284]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d055      	beq.n	800719e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80070f2:	4b43      	ldr	r3, [pc, #268]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	4940      	ldr	r1, [pc, #256]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 8007100:	4313      	orrs	r3, r2
 8007102:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	2b02      	cmp	r3, #2
 800710a:	d107      	bne.n	800711c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800710c:	4b3c      	ldr	r3, [pc, #240]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d121      	bne.n	800715c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e0f6      	b.n	800730a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	2b03      	cmp	r3, #3
 8007122:	d107      	bne.n	8007134 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007124:	4b36      	ldr	r3, [pc, #216]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d115      	bne.n	800715c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e0ea      	b.n	800730a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d107      	bne.n	800714c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800713c:	4b30      	ldr	r3, [pc, #192]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007144:	2b00      	cmp	r3, #0
 8007146:	d109      	bne.n	800715c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e0de      	b.n	800730a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800714c:	4b2c      	ldr	r3, [pc, #176]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b00      	cmp	r3, #0
 8007156:	d101      	bne.n	800715c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e0d6      	b.n	800730a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800715c:	4b28      	ldr	r3, [pc, #160]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	f023 0207 	bic.w	r2, r3, #7
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	4925      	ldr	r1, [pc, #148]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 800716a:	4313      	orrs	r3, r2
 800716c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800716e:	f7fc fc85 	bl	8003a7c <HAL_GetTick>
 8007172:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007174:	e00a      	b.n	800718c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007176:	f7fc fc81 	bl	8003a7c <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007184:	4293      	cmp	r3, r2
 8007186:	d901      	bls.n	800718c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e0be      	b.n	800730a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800718c:	4b1c      	ldr	r3, [pc, #112]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	00db      	lsls	r3, r3, #3
 800719a:	429a      	cmp	r2, r3
 800719c:	d1eb      	bne.n	8007176 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0302 	and.w	r3, r3, #2
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d010      	beq.n	80071cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68da      	ldr	r2, [r3, #12]
 80071ae:	4b14      	ldr	r3, [pc, #80]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	f003 030f 	and.w	r3, r3, #15
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d208      	bcs.n	80071cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071ba:	4b11      	ldr	r3, [pc, #68]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	f023 020f 	bic.w	r2, r3, #15
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	490e      	ldr	r1, [pc, #56]	@ (8007200 <HAL_RCC_ClockConfig+0x244>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071cc:	4b0b      	ldr	r3, [pc, #44]	@ (80071fc <HAL_RCC_ClockConfig+0x240>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 030f 	and.w	r3, r3, #15
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d214      	bcs.n	8007204 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071da:	4b08      	ldr	r3, [pc, #32]	@ (80071fc <HAL_RCC_ClockConfig+0x240>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f023 020f 	bic.w	r2, r3, #15
 80071e2:	4906      	ldr	r1, [pc, #24]	@ (80071fc <HAL_RCC_ClockConfig+0x240>)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ea:	4b04      	ldr	r3, [pc, #16]	@ (80071fc <HAL_RCC_ClockConfig+0x240>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 030f 	and.w	r3, r3, #15
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d005      	beq.n	8007204 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e086      	b.n	800730a <HAL_RCC_ClockConfig+0x34e>
 80071fc:	52002000 	.word	0x52002000
 8007200:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0304 	and.w	r3, r3, #4
 800720c:	2b00      	cmp	r3, #0
 800720e:	d010      	beq.n	8007232 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	691a      	ldr	r2, [r3, #16]
 8007214:	4b3f      	ldr	r3, [pc, #252]	@ (8007314 <HAL_RCC_ClockConfig+0x358>)
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800721c:	429a      	cmp	r2, r3
 800721e:	d208      	bcs.n	8007232 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007220:	4b3c      	ldr	r3, [pc, #240]	@ (8007314 <HAL_RCC_ClockConfig+0x358>)
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	4939      	ldr	r1, [pc, #228]	@ (8007314 <HAL_RCC_ClockConfig+0x358>)
 800722e:	4313      	orrs	r3, r2
 8007230:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0308 	and.w	r3, r3, #8
 800723a:	2b00      	cmp	r3, #0
 800723c:	d010      	beq.n	8007260 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	695a      	ldr	r2, [r3, #20]
 8007242:	4b34      	ldr	r3, [pc, #208]	@ (8007314 <HAL_RCC_ClockConfig+0x358>)
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800724a:	429a      	cmp	r2, r3
 800724c:	d208      	bcs.n	8007260 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800724e:	4b31      	ldr	r3, [pc, #196]	@ (8007314 <HAL_RCC_ClockConfig+0x358>)
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	492e      	ldr	r1, [pc, #184]	@ (8007314 <HAL_RCC_ClockConfig+0x358>)
 800725c:	4313      	orrs	r3, r2
 800725e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0310 	and.w	r3, r3, #16
 8007268:	2b00      	cmp	r3, #0
 800726a:	d010      	beq.n	800728e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	699a      	ldr	r2, [r3, #24]
 8007270:	4b28      	ldr	r3, [pc, #160]	@ (8007314 <HAL_RCC_ClockConfig+0x358>)
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007278:	429a      	cmp	r2, r3
 800727a:	d208      	bcs.n	800728e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800727c:	4b25      	ldr	r3, [pc, #148]	@ (8007314 <HAL_RCC_ClockConfig+0x358>)
 800727e:	69db      	ldr	r3, [r3, #28]
 8007280:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	4922      	ldr	r1, [pc, #136]	@ (8007314 <HAL_RCC_ClockConfig+0x358>)
 800728a:	4313      	orrs	r3, r2
 800728c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0320 	and.w	r3, r3, #32
 8007296:	2b00      	cmp	r3, #0
 8007298:	d010      	beq.n	80072bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	69da      	ldr	r2, [r3, #28]
 800729e:	4b1d      	ldr	r3, [pc, #116]	@ (8007314 <HAL_RCC_ClockConfig+0x358>)
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d208      	bcs.n	80072bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80072aa:	4b1a      	ldr	r3, [pc, #104]	@ (8007314 <HAL_RCC_ClockConfig+0x358>)
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	4917      	ldr	r1, [pc, #92]	@ (8007314 <HAL_RCC_ClockConfig+0x358>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80072bc:	f000 f834 	bl	8007328 <HAL_RCC_GetSysClockFreq>
 80072c0:	4602      	mov	r2, r0
 80072c2:	4b14      	ldr	r3, [pc, #80]	@ (8007314 <HAL_RCC_ClockConfig+0x358>)
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	0a1b      	lsrs	r3, r3, #8
 80072c8:	f003 030f 	and.w	r3, r3, #15
 80072cc:	4912      	ldr	r1, [pc, #72]	@ (8007318 <HAL_RCC_ClockConfig+0x35c>)
 80072ce:	5ccb      	ldrb	r3, [r1, r3]
 80072d0:	f003 031f 	and.w	r3, r3, #31
 80072d4:	fa22 f303 	lsr.w	r3, r2, r3
 80072d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072da:	4b0e      	ldr	r3, [pc, #56]	@ (8007314 <HAL_RCC_ClockConfig+0x358>)
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	f003 030f 	and.w	r3, r3, #15
 80072e2:	4a0d      	ldr	r2, [pc, #52]	@ (8007318 <HAL_RCC_ClockConfig+0x35c>)
 80072e4:	5cd3      	ldrb	r3, [r2, r3]
 80072e6:	f003 031f 	and.w	r3, r3, #31
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	fa22 f303 	lsr.w	r3, r2, r3
 80072f0:	4a0a      	ldr	r2, [pc, #40]	@ (800731c <HAL_RCC_ClockConfig+0x360>)
 80072f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072f4:	4a0a      	ldr	r2, [pc, #40]	@ (8007320 <HAL_RCC_ClockConfig+0x364>)
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80072fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007324 <HAL_RCC_ClockConfig+0x368>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4618      	mov	r0, r3
 8007300:	f7fc fb72 	bl	80039e8 <HAL_InitTick>
 8007304:	4603      	mov	r3, r0
 8007306:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007308:	7bfb      	ldrb	r3, [r7, #15]
}
 800730a:	4618      	mov	r0, r3
 800730c:	3718      	adds	r7, #24
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	58024400 	.word	0x58024400
 8007318:	080104d8 	.word	0x080104d8
 800731c:	24000014 	.word	0x24000014
 8007320:	24000010 	.word	0x24000010
 8007324:	24000018 	.word	0x24000018

08007328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007328:	b480      	push	{r7}
 800732a:	b089      	sub	sp, #36	@ 0x24
 800732c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800732e:	4bb3      	ldr	r3, [pc, #716]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007336:	2b18      	cmp	r3, #24
 8007338:	f200 8155 	bhi.w	80075e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800733c:	a201      	add	r2, pc, #4	@ (adr r2, 8007344 <HAL_RCC_GetSysClockFreq+0x1c>)
 800733e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007342:	bf00      	nop
 8007344:	080073a9 	.word	0x080073a9
 8007348:	080075e7 	.word	0x080075e7
 800734c:	080075e7 	.word	0x080075e7
 8007350:	080075e7 	.word	0x080075e7
 8007354:	080075e7 	.word	0x080075e7
 8007358:	080075e7 	.word	0x080075e7
 800735c:	080075e7 	.word	0x080075e7
 8007360:	080075e7 	.word	0x080075e7
 8007364:	080073cf 	.word	0x080073cf
 8007368:	080075e7 	.word	0x080075e7
 800736c:	080075e7 	.word	0x080075e7
 8007370:	080075e7 	.word	0x080075e7
 8007374:	080075e7 	.word	0x080075e7
 8007378:	080075e7 	.word	0x080075e7
 800737c:	080075e7 	.word	0x080075e7
 8007380:	080075e7 	.word	0x080075e7
 8007384:	080073d5 	.word	0x080073d5
 8007388:	080075e7 	.word	0x080075e7
 800738c:	080075e7 	.word	0x080075e7
 8007390:	080075e7 	.word	0x080075e7
 8007394:	080075e7 	.word	0x080075e7
 8007398:	080075e7 	.word	0x080075e7
 800739c:	080075e7 	.word	0x080075e7
 80073a0:	080075e7 	.word	0x080075e7
 80073a4:	080073db 	.word	0x080073db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073a8:	4b94      	ldr	r3, [pc, #592]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0320 	and.w	r3, r3, #32
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d009      	beq.n	80073c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073b4:	4b91      	ldr	r3, [pc, #580]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	08db      	lsrs	r3, r3, #3
 80073ba:	f003 0303 	and.w	r3, r3, #3
 80073be:	4a90      	ldr	r2, [pc, #576]	@ (8007600 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80073c0:	fa22 f303 	lsr.w	r3, r2, r3
 80073c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80073c6:	e111      	b.n	80075ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80073c8:	4b8d      	ldr	r3, [pc, #564]	@ (8007600 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80073ca:	61bb      	str	r3, [r7, #24]
      break;
 80073cc:	e10e      	b.n	80075ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80073ce:	4b8d      	ldr	r3, [pc, #564]	@ (8007604 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80073d0:	61bb      	str	r3, [r7, #24]
      break;
 80073d2:	e10b      	b.n	80075ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80073d4:	4b8c      	ldr	r3, [pc, #560]	@ (8007608 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80073d6:	61bb      	str	r3, [r7, #24]
      break;
 80073d8:	e108      	b.n	80075ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073da:	4b88      	ldr	r3, [pc, #544]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073de:	f003 0303 	and.w	r3, r3, #3
 80073e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80073e4:	4b85      	ldr	r3, [pc, #532]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e8:	091b      	lsrs	r3, r3, #4
 80073ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80073f0:	4b82      	ldr	r3, [pc, #520]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80073fa:	4b80      	ldr	r3, [pc, #512]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073fe:	08db      	lsrs	r3, r3, #3
 8007400:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	fb02 f303 	mul.w	r3, r2, r3
 800740a:	ee07 3a90 	vmov	s15, r3
 800740e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007412:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 80e1 	beq.w	80075e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	2b02      	cmp	r3, #2
 8007422:	f000 8083 	beq.w	800752c <HAL_RCC_GetSysClockFreq+0x204>
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	2b02      	cmp	r3, #2
 800742a:	f200 80a1 	bhi.w	8007570 <HAL_RCC_GetSysClockFreq+0x248>
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d003      	beq.n	800743c <HAL_RCC_GetSysClockFreq+0x114>
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d056      	beq.n	80074e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800743a:	e099      	b.n	8007570 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800743c:	4b6f      	ldr	r3, [pc, #444]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0320 	and.w	r3, r3, #32
 8007444:	2b00      	cmp	r3, #0
 8007446:	d02d      	beq.n	80074a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007448:	4b6c      	ldr	r3, [pc, #432]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	08db      	lsrs	r3, r3, #3
 800744e:	f003 0303 	and.w	r3, r3, #3
 8007452:	4a6b      	ldr	r2, [pc, #428]	@ (8007600 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007454:	fa22 f303 	lsr.w	r3, r2, r3
 8007458:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	ee07 3a90 	vmov	s15, r3
 8007460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	ee07 3a90 	vmov	s15, r3
 800746a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007472:	4b62      	ldr	r3, [pc, #392]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800747a:	ee07 3a90 	vmov	s15, r3
 800747e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007482:	ed97 6a02 	vldr	s12, [r7, #8]
 8007486:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800760c <HAL_RCC_GetSysClockFreq+0x2e4>
 800748a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800748e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800749a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800749e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80074a2:	e087      	b.n	80075b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	ee07 3a90 	vmov	s15, r3
 80074aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007610 <HAL_RCC_GetSysClockFreq+0x2e8>
 80074b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074b6:	4b51      	ldr	r3, [pc, #324]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80074ca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800760c <HAL_RCC_GetSysClockFreq+0x2e4>
 80074ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80074e6:	e065      	b.n	80075b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	ee07 3a90 	vmov	s15, r3
 80074ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007614 <HAL_RCC_GetSysClockFreq+0x2ec>
 80074f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074fa:	4b40      	ldr	r3, [pc, #256]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800750a:	ed97 6a02 	vldr	s12, [r7, #8]
 800750e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800760c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800751a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800751e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007526:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800752a:	e043      	b.n	80075b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	ee07 3a90 	vmov	s15, r3
 8007532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007536:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007618 <HAL_RCC_GetSysClockFreq+0x2f0>
 800753a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800753e:	4b2f      	ldr	r3, [pc, #188]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007546:	ee07 3a90 	vmov	s15, r3
 800754a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800754e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007552:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800760c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800755a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800755e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800756a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800756e:	e021      	b.n	80075b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	ee07 3a90 	vmov	s15, r3
 8007576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007614 <HAL_RCC_GetSysClockFreq+0x2ec>
 800757e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007582:	4b1e      	ldr	r3, [pc, #120]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007592:	ed97 6a02 	vldr	s12, [r7, #8]
 8007596:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800760c <HAL_RCC_GetSysClockFreq+0x2e4>
 800759a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800759e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80075b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80075b4:	4b11      	ldr	r3, [pc, #68]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075b8:	0a5b      	lsrs	r3, r3, #9
 80075ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075be:	3301      	adds	r3, #1
 80075c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	ee07 3a90 	vmov	s15, r3
 80075c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80075cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80075d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075d8:	ee17 3a90 	vmov	r3, s15
 80075dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80075de:	e005      	b.n	80075ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80075e0:	2300      	movs	r3, #0
 80075e2:	61bb      	str	r3, [r7, #24]
      break;
 80075e4:	e002      	b.n	80075ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80075e6:	4b07      	ldr	r3, [pc, #28]	@ (8007604 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80075e8:	61bb      	str	r3, [r7, #24]
      break;
 80075ea:	bf00      	nop
  }

  return sysclockfreq;
 80075ec:	69bb      	ldr	r3, [r7, #24]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3724      	adds	r7, #36	@ 0x24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	58024400 	.word	0x58024400
 8007600:	03d09000 	.word	0x03d09000
 8007604:	003d0900 	.word	0x003d0900
 8007608:	016e3600 	.word	0x016e3600
 800760c:	46000000 	.word	0x46000000
 8007610:	4c742400 	.word	0x4c742400
 8007614:	4a742400 	.word	0x4a742400
 8007618:	4bb71b00 	.word	0x4bb71b00

0800761c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007622:	f7ff fe81 	bl	8007328 <HAL_RCC_GetSysClockFreq>
 8007626:	4602      	mov	r2, r0
 8007628:	4b10      	ldr	r3, [pc, #64]	@ (800766c <HAL_RCC_GetHCLKFreq+0x50>)
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	0a1b      	lsrs	r3, r3, #8
 800762e:	f003 030f 	and.w	r3, r3, #15
 8007632:	490f      	ldr	r1, [pc, #60]	@ (8007670 <HAL_RCC_GetHCLKFreq+0x54>)
 8007634:	5ccb      	ldrb	r3, [r1, r3]
 8007636:	f003 031f 	and.w	r3, r3, #31
 800763a:	fa22 f303 	lsr.w	r3, r2, r3
 800763e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007640:	4b0a      	ldr	r3, [pc, #40]	@ (800766c <HAL_RCC_GetHCLKFreq+0x50>)
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	f003 030f 	and.w	r3, r3, #15
 8007648:	4a09      	ldr	r2, [pc, #36]	@ (8007670 <HAL_RCC_GetHCLKFreq+0x54>)
 800764a:	5cd3      	ldrb	r3, [r2, r3]
 800764c:	f003 031f 	and.w	r3, r3, #31
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	fa22 f303 	lsr.w	r3, r2, r3
 8007656:	4a07      	ldr	r2, [pc, #28]	@ (8007674 <HAL_RCC_GetHCLKFreq+0x58>)
 8007658:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800765a:	4a07      	ldr	r2, [pc, #28]	@ (8007678 <HAL_RCC_GetHCLKFreq+0x5c>)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007660:	4b04      	ldr	r3, [pc, #16]	@ (8007674 <HAL_RCC_GetHCLKFreq+0x58>)
 8007662:	681b      	ldr	r3, [r3, #0]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	58024400 	.word	0x58024400
 8007670:	080104d8 	.word	0x080104d8
 8007674:	24000014 	.word	0x24000014
 8007678:	24000010 	.word	0x24000010

0800767c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007680:	f7ff ffcc 	bl	800761c <HAL_RCC_GetHCLKFreq>
 8007684:	4602      	mov	r2, r0
 8007686:	4b06      	ldr	r3, [pc, #24]	@ (80076a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	091b      	lsrs	r3, r3, #4
 800768c:	f003 0307 	and.w	r3, r3, #7
 8007690:	4904      	ldr	r1, [pc, #16]	@ (80076a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007692:	5ccb      	ldrb	r3, [r1, r3]
 8007694:	f003 031f 	and.w	r3, r3, #31
 8007698:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800769c:	4618      	mov	r0, r3
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	58024400 	.word	0x58024400
 80076a4:	080104d8 	.word	0x080104d8

080076a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80076ac:	f7ff ffb6 	bl	800761c <HAL_RCC_GetHCLKFreq>
 80076b0:	4602      	mov	r2, r0
 80076b2:	4b06      	ldr	r3, [pc, #24]	@ (80076cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80076b4:	69db      	ldr	r3, [r3, #28]
 80076b6:	0a1b      	lsrs	r3, r3, #8
 80076b8:	f003 0307 	and.w	r3, r3, #7
 80076bc:	4904      	ldr	r1, [pc, #16]	@ (80076d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80076be:	5ccb      	ldrb	r3, [r1, r3]
 80076c0:	f003 031f 	and.w	r3, r3, #31
 80076c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	58024400 	.word	0x58024400
 80076d0:	080104d8 	.word	0x080104d8

080076d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076d8:	b0ca      	sub	sp, #296	@ 0x128
 80076da:	af00      	add	r7, sp, #0
 80076dc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80076e0:	2300      	movs	r3, #0
 80076e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80076e6:	2300      	movs	r3, #0
 80076e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80076ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80076f8:	2500      	movs	r5, #0
 80076fa:	ea54 0305 	orrs.w	r3, r4, r5
 80076fe:	d049      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007704:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007706:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800770a:	d02f      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800770c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007710:	d828      	bhi.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007712:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007716:	d01a      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007718:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800771c:	d822      	bhi.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800771e:	2b00      	cmp	r3, #0
 8007720:	d003      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007722:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007726:	d007      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007728:	e01c      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800772a:	4bb8      	ldr	r3, [pc, #736]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800772c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772e:	4ab7      	ldr	r2, [pc, #732]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007734:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007736:	e01a      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800773c:	3308      	adds	r3, #8
 800773e:	2102      	movs	r1, #2
 8007740:	4618      	mov	r0, r3
 8007742:	f001 fc8f 	bl	8009064 <RCCEx_PLL2_Config>
 8007746:	4603      	mov	r3, r0
 8007748:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800774c:	e00f      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800774e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007752:	3328      	adds	r3, #40	@ 0x28
 8007754:	2102      	movs	r1, #2
 8007756:	4618      	mov	r0, r3
 8007758:	f001 fd36 	bl	80091c8 <RCCEx_PLL3_Config>
 800775c:	4603      	mov	r3, r0
 800775e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007762:	e004      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800776a:	e000      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800776c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800776e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10a      	bne.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007776:	4ba5      	ldr	r3, [pc, #660]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800777a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800777e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007782:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007784:	4aa1      	ldr	r2, [pc, #644]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007786:	430b      	orrs	r3, r1
 8007788:	6513      	str	r3, [r2, #80]	@ 0x50
 800778a:	e003      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800778c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007790:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80077a0:	f04f 0900 	mov.w	r9, #0
 80077a4:	ea58 0309 	orrs.w	r3, r8, r9
 80077a8:	d047      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80077aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077b0:	2b04      	cmp	r3, #4
 80077b2:	d82a      	bhi.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80077b4:	a201      	add	r2, pc, #4	@ (adr r2, 80077bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80077b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ba:	bf00      	nop
 80077bc:	080077d1 	.word	0x080077d1
 80077c0:	080077df 	.word	0x080077df
 80077c4:	080077f5 	.word	0x080077f5
 80077c8:	08007813 	.word	0x08007813
 80077cc:	08007813 	.word	0x08007813
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077d0:	4b8e      	ldr	r3, [pc, #568]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d4:	4a8d      	ldr	r2, [pc, #564]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077dc:	e01a      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e2:	3308      	adds	r3, #8
 80077e4:	2100      	movs	r1, #0
 80077e6:	4618      	mov	r0, r3
 80077e8:	f001 fc3c 	bl	8009064 <RCCEx_PLL2_Config>
 80077ec:	4603      	mov	r3, r0
 80077ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077f2:	e00f      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f8:	3328      	adds	r3, #40	@ 0x28
 80077fa:	2100      	movs	r1, #0
 80077fc:	4618      	mov	r0, r3
 80077fe:	f001 fce3 	bl	80091c8 <RCCEx_PLL3_Config>
 8007802:	4603      	mov	r3, r0
 8007804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007808:	e004      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007810:	e000      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007814:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10a      	bne.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800781c:	4b7b      	ldr	r3, [pc, #492]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800781e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007820:	f023 0107 	bic.w	r1, r3, #7
 8007824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800782a:	4a78      	ldr	r2, [pc, #480]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800782c:	430b      	orrs	r3, r1
 800782e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007830:	e003      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007836:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800783a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800783e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007842:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007846:	f04f 0b00 	mov.w	fp, #0
 800784a:	ea5a 030b 	orrs.w	r3, sl, fp
 800784e:	d04c      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800785a:	d030      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800785c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007860:	d829      	bhi.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007862:	2bc0      	cmp	r3, #192	@ 0xc0
 8007864:	d02d      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007866:	2bc0      	cmp	r3, #192	@ 0xc0
 8007868:	d825      	bhi.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800786a:	2b80      	cmp	r3, #128	@ 0x80
 800786c:	d018      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800786e:	2b80      	cmp	r3, #128	@ 0x80
 8007870:	d821      	bhi.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007872:	2b00      	cmp	r3, #0
 8007874:	d002      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007876:	2b40      	cmp	r3, #64	@ 0x40
 8007878:	d007      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800787a:	e01c      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800787c:	4b63      	ldr	r3, [pc, #396]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800787e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007880:	4a62      	ldr	r2, [pc, #392]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007882:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007886:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007888:	e01c      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800788a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800788e:	3308      	adds	r3, #8
 8007890:	2100      	movs	r1, #0
 8007892:	4618      	mov	r0, r3
 8007894:	f001 fbe6 	bl	8009064 <RCCEx_PLL2_Config>
 8007898:	4603      	mov	r3, r0
 800789a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800789e:	e011      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80078a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a4:	3328      	adds	r3, #40	@ 0x28
 80078a6:	2100      	movs	r1, #0
 80078a8:	4618      	mov	r0, r3
 80078aa:	f001 fc8d 	bl	80091c8 <RCCEx_PLL3_Config>
 80078ae:	4603      	mov	r3, r0
 80078b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80078b4:	e006      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078bc:	e002      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80078be:	bf00      	nop
 80078c0:	e000      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80078c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10a      	bne.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80078cc:	4b4f      	ldr	r3, [pc, #316]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078d0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80078d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078da:	4a4c      	ldr	r2, [pc, #304]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078dc:	430b      	orrs	r3, r1
 80078de:	6513      	str	r3, [r2, #80]	@ 0x50
 80078e0:	e003      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80078ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80078f6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80078fa:	2300      	movs	r3, #0
 80078fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007900:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007904:	460b      	mov	r3, r1
 8007906:	4313      	orrs	r3, r2
 8007908:	d053      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800790a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800790e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007912:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007916:	d035      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007918:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800791c:	d82e      	bhi.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800791e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007922:	d031      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007924:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007928:	d828      	bhi.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800792a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800792e:	d01a      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007930:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007934:	d822      	bhi.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007936:	2b00      	cmp	r3, #0
 8007938:	d003      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800793a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800793e:	d007      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007940:	e01c      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007942:	4b32      	ldr	r3, [pc, #200]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007946:	4a31      	ldr	r2, [pc, #196]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800794c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800794e:	e01c      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007954:	3308      	adds	r3, #8
 8007956:	2100      	movs	r1, #0
 8007958:	4618      	mov	r0, r3
 800795a:	f001 fb83 	bl	8009064 <RCCEx_PLL2_Config>
 800795e:	4603      	mov	r3, r0
 8007960:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007964:	e011      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800796a:	3328      	adds	r3, #40	@ 0x28
 800796c:	2100      	movs	r1, #0
 800796e:	4618      	mov	r0, r3
 8007970:	f001 fc2a 	bl	80091c8 <RCCEx_PLL3_Config>
 8007974:	4603      	mov	r3, r0
 8007976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800797a:	e006      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007982:	e002      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007984:	bf00      	nop
 8007986:	e000      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800798a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10b      	bne.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007992:	4b1e      	ldr	r3, [pc, #120]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007996:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800799a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800799e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80079a2:	4a1a      	ldr	r2, [pc, #104]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079a4:	430b      	orrs	r3, r1
 80079a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80079a8:	e003      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80079b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ba:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80079be:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80079c2:	2300      	movs	r3, #0
 80079c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80079c8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80079cc:	460b      	mov	r3, r1
 80079ce:	4313      	orrs	r3, r2
 80079d0:	d056      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80079d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80079da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80079de:	d038      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80079e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80079e4:	d831      	bhi.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80079e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80079ea:	d034      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80079ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80079f0:	d82b      	bhi.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80079f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079f6:	d01d      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80079f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079fc:	d825      	bhi.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d006      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007a02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a06:	d00a      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007a08:	e01f      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a0a:	bf00      	nop
 8007a0c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a10:	4ba2      	ldr	r3, [pc, #648]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a14:	4aa1      	ldr	r2, [pc, #644]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a1c:	e01c      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a22:	3308      	adds	r3, #8
 8007a24:	2100      	movs	r1, #0
 8007a26:	4618      	mov	r0, r3
 8007a28:	f001 fb1c 	bl	8009064 <RCCEx_PLL2_Config>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007a32:	e011      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a38:	3328      	adds	r3, #40	@ 0x28
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f001 fbc3 	bl	80091c8 <RCCEx_PLL3_Config>
 8007a42:	4603      	mov	r3, r0
 8007a44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a48:	e006      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a50:	e002      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007a52:	bf00      	nop
 8007a54:	e000      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007a56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10b      	bne.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007a60:	4b8e      	ldr	r3, [pc, #568]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a64:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007a70:	4a8a      	ldr	r2, [pc, #552]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a72:	430b      	orrs	r3, r1
 8007a74:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a76:	e003      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a88:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007a8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007a90:	2300      	movs	r3, #0
 8007a92:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007a96:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	d03a      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007aa6:	2b30      	cmp	r3, #48	@ 0x30
 8007aa8:	d01f      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007aaa:	2b30      	cmp	r3, #48	@ 0x30
 8007aac:	d819      	bhi.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007aae:	2b20      	cmp	r3, #32
 8007ab0:	d00c      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007ab2:	2b20      	cmp	r3, #32
 8007ab4:	d815      	bhi.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d019      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007aba:	2b10      	cmp	r3, #16
 8007abc:	d111      	bne.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007abe:	4b77      	ldr	r3, [pc, #476]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac2:	4a76      	ldr	r2, [pc, #472]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ac8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007aca:	e011      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad0:	3308      	adds	r3, #8
 8007ad2:	2102      	movs	r1, #2
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f001 fac5 	bl	8009064 <RCCEx_PLL2_Config>
 8007ada:	4603      	mov	r3, r0
 8007adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007ae0:	e006      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ae8:	e002      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007aea:	bf00      	nop
 8007aec:	e000      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007af0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d10a      	bne.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007af8:	4b68      	ldr	r3, [pc, #416]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007afc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b06:	4a65      	ldr	r2, [pc, #404]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b08:	430b      	orrs	r3, r1
 8007b0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007b0c:	e003      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007b22:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b26:	2300      	movs	r3, #0
 8007b28:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007b2c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007b30:	460b      	mov	r3, r1
 8007b32:	4313      	orrs	r3, r2
 8007b34:	d051      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b40:	d035      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007b42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b46:	d82e      	bhi.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007b48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b4c:	d031      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007b4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b52:	d828      	bhi.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b58:	d01a      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b5e:	d822      	bhi.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d003      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007b64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b68:	d007      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007b6a:	e01c      	b.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b6c:	4b4b      	ldr	r3, [pc, #300]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b70:	4a4a      	ldr	r2, [pc, #296]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007b78:	e01c      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b7e:	3308      	adds	r3, #8
 8007b80:	2100      	movs	r1, #0
 8007b82:	4618      	mov	r0, r3
 8007b84:	f001 fa6e 	bl	8009064 <RCCEx_PLL2_Config>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007b8e:	e011      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b94:	3328      	adds	r3, #40	@ 0x28
 8007b96:	2100      	movs	r1, #0
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f001 fb15 	bl	80091c8 <RCCEx_PLL3_Config>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ba4:	e006      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bac:	e002      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007bae:	bf00      	nop
 8007bb0:	e000      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10a      	bne.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007bbc:	4b37      	ldr	r3, [pc, #220]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bc0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bca:	4a34      	ldr	r2, [pc, #208]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bcc:	430b      	orrs	r3, r1
 8007bce:	6513      	str	r3, [r2, #80]	@ 0x50
 8007bd0:	e003      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007be6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007bea:	2300      	movs	r3, #0
 8007bec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007bf0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	d056      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c04:	d033      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007c06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c0a:	d82c      	bhi.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007c0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c10:	d02f      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007c12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c16:	d826      	bhi.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007c18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c1c:	d02b      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007c1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c22:	d820      	bhi.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007c24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c28:	d012      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007c2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c2e:	d81a      	bhi.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d022      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007c34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c38:	d115      	bne.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c3e:	3308      	adds	r3, #8
 8007c40:	2101      	movs	r1, #1
 8007c42:	4618      	mov	r0, r3
 8007c44:	f001 fa0e 	bl	8009064 <RCCEx_PLL2_Config>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007c4e:	e015      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c54:	3328      	adds	r3, #40	@ 0x28
 8007c56:	2101      	movs	r1, #1
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f001 fab5 	bl	80091c8 <RCCEx_PLL3_Config>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007c64:	e00a      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c6c:	e006      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007c6e:	bf00      	nop
 8007c70:	e004      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007c72:	bf00      	nop
 8007c74:	e002      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007c76:	bf00      	nop
 8007c78:	e000      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10d      	bne.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007c84:	4b05      	ldr	r3, [pc, #20]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c88:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c92:	4a02      	ldr	r2, [pc, #8]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c94:	430b      	orrs	r3, r1
 8007c96:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c98:	e006      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007c9a:	bf00      	nop
 8007c9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ca4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007cb8:	2300      	movs	r3, #0
 8007cba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007cbe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	d055      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ccc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007cd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007cd4:	d033      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007cd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007cda:	d82c      	bhi.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ce0:	d02f      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ce6:	d826      	bhi.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007ce8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007cec:	d02b      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007cee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007cf2:	d820      	bhi.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007cf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cf8:	d012      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007cfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cfe:	d81a      	bhi.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d022      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007d04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d08:	d115      	bne.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d0e:	3308      	adds	r3, #8
 8007d10:	2101      	movs	r1, #1
 8007d12:	4618      	mov	r0, r3
 8007d14:	f001 f9a6 	bl	8009064 <RCCEx_PLL2_Config>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007d1e:	e015      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d24:	3328      	adds	r3, #40	@ 0x28
 8007d26:	2101      	movs	r1, #1
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f001 fa4d 	bl	80091c8 <RCCEx_PLL3_Config>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007d34:	e00a      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d3c:	e006      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d3e:	bf00      	nop
 8007d40:	e004      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d42:	bf00      	nop
 8007d44:	e002      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d46:	bf00      	nop
 8007d48:	e000      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d10b      	bne.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007d54:	4ba3      	ldr	r3, [pc, #652]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d58:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d64:	4a9f      	ldr	r2, [pc, #636]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d66:	430b      	orrs	r3, r1
 8007d68:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d6a:	e003      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007d80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d84:	2300      	movs	r3, #0
 8007d86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007d8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007d8e:	460b      	mov	r3, r1
 8007d90:	4313      	orrs	r3, r2
 8007d92:	d037      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d9e:	d00e      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007da0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007da4:	d816      	bhi.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d018      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007daa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dae:	d111      	bne.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007db0:	4b8c      	ldr	r3, [pc, #560]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db4:	4a8b      	ldr	r2, [pc, #556]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007db6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007dbc:	e00f      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc2:	3308      	adds	r3, #8
 8007dc4:	2101      	movs	r1, #1
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f001 f94c 	bl	8009064 <RCCEx_PLL2_Config>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007dd2:	e004      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dda:	e000      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d10a      	bne.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007de6:	4b7f      	ldr	r3, [pc, #508]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dea:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007df4:	4a7b      	ldr	r2, [pc, #492]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007df6:	430b      	orrs	r3, r1
 8007df8:	6513      	str	r3, [r2, #80]	@ 0x50
 8007dfa:	e003      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007e10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e14:	2300      	movs	r3, #0
 8007e16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007e1a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007e1e:	460b      	mov	r3, r1
 8007e20:	4313      	orrs	r3, r2
 8007e22:	d039      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d81c      	bhi.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e34 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e34:	08007e71 	.word	0x08007e71
 8007e38:	08007e45 	.word	0x08007e45
 8007e3c:	08007e53 	.word	0x08007e53
 8007e40:	08007e71 	.word	0x08007e71
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e44:	4b67      	ldr	r3, [pc, #412]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e48:	4a66      	ldr	r2, [pc, #408]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007e50:	e00f      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e56:	3308      	adds	r3, #8
 8007e58:	2102      	movs	r1, #2
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f001 f902 	bl	8009064 <RCCEx_PLL2_Config>
 8007e60:	4603      	mov	r3, r0
 8007e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007e66:	e004      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e6e:	e000      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10a      	bne.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007e7a:	4b5a      	ldr	r3, [pc, #360]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e7e:	f023 0103 	bic.w	r1, r3, #3
 8007e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e88:	4a56      	ldr	r2, [pc, #344]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e8a:	430b      	orrs	r3, r1
 8007e8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007e8e:	e003      	b.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007ea4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007eae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	f000 809f 	beq.w	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007eba:	4b4b      	ldr	r3, [pc, #300]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a4a      	ldr	r2, [pc, #296]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007ec0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ec4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ec6:	f7fb fdd9 	bl	8003a7c <HAL_GetTick>
 8007eca:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ece:	e00b      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ed0:	f7fb fdd4 	bl	8003a7c <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	2b64      	cmp	r3, #100	@ 0x64
 8007ede:	d903      	bls.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ee6:	e005      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ee8:	4b3f      	ldr	r3, [pc, #252]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d0ed      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007ef4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d179      	bne.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007efc:	4b39      	ldr	r3, [pc, #228]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007efe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007f08:	4053      	eors	r3, r2
 8007f0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d015      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f12:	4b34      	ldr	r3, [pc, #208]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f1a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f1e:	4b31      	ldr	r3, [pc, #196]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f22:	4a30      	ldr	r2, [pc, #192]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f28:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f2a:	4b2e      	ldr	r3, [pc, #184]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f2e:	4a2d      	ldr	r2, [pc, #180]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f34:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007f36:	4a2b      	ldr	r2, [pc, #172]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007f3c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007f46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f4a:	d118      	bne.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f4c:	f7fb fd96 	bl	8003a7c <HAL_GetTick>
 8007f50:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f54:	e00d      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f56:	f7fb fd91 	bl	8003a7c <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007f60:	1ad2      	subs	r2, r2, r3
 8007f62:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d903      	bls.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007f70:	e005      	b.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f72:	4b1c      	ldr	r3, [pc, #112]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f76:	f003 0302 	and.w	r3, r3, #2
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d0eb      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d129      	bne.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f96:	d10e      	bne.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007f98:	4b12      	ldr	r3, [pc, #72]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007fa8:	091a      	lsrs	r2, r3, #4
 8007faa:	4b10      	ldr	r3, [pc, #64]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007fac:	4013      	ands	r3, r2
 8007fae:	4a0d      	ldr	r2, [pc, #52]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fb0:	430b      	orrs	r3, r1
 8007fb2:	6113      	str	r3, [r2, #16]
 8007fb4:	e005      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	4a0a      	ldr	r2, [pc, #40]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fbc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007fc0:	6113      	str	r3, [r2, #16]
 8007fc2:	4b08      	ldr	r3, [pc, #32]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fc4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fd2:	4a04      	ldr	r2, [pc, #16]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fd4:	430b      	orrs	r3, r1
 8007fd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fd8:	e00e      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007fe2:	e009      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007fe4:	58024400 	.word	0x58024400
 8007fe8:	58024800 	.word	0x58024800
 8007fec:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ff4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008000:	f002 0301 	and.w	r3, r2, #1
 8008004:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008008:	2300      	movs	r3, #0
 800800a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800800e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008012:	460b      	mov	r3, r1
 8008014:	4313      	orrs	r3, r2
 8008016:	f000 8089 	beq.w	800812c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800801a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800801e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008020:	2b28      	cmp	r3, #40	@ 0x28
 8008022:	d86b      	bhi.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008024:	a201      	add	r2, pc, #4	@ (adr r2, 800802c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802a:	bf00      	nop
 800802c:	08008105 	.word	0x08008105
 8008030:	080080fd 	.word	0x080080fd
 8008034:	080080fd 	.word	0x080080fd
 8008038:	080080fd 	.word	0x080080fd
 800803c:	080080fd 	.word	0x080080fd
 8008040:	080080fd 	.word	0x080080fd
 8008044:	080080fd 	.word	0x080080fd
 8008048:	080080fd 	.word	0x080080fd
 800804c:	080080d1 	.word	0x080080d1
 8008050:	080080fd 	.word	0x080080fd
 8008054:	080080fd 	.word	0x080080fd
 8008058:	080080fd 	.word	0x080080fd
 800805c:	080080fd 	.word	0x080080fd
 8008060:	080080fd 	.word	0x080080fd
 8008064:	080080fd 	.word	0x080080fd
 8008068:	080080fd 	.word	0x080080fd
 800806c:	080080e7 	.word	0x080080e7
 8008070:	080080fd 	.word	0x080080fd
 8008074:	080080fd 	.word	0x080080fd
 8008078:	080080fd 	.word	0x080080fd
 800807c:	080080fd 	.word	0x080080fd
 8008080:	080080fd 	.word	0x080080fd
 8008084:	080080fd 	.word	0x080080fd
 8008088:	080080fd 	.word	0x080080fd
 800808c:	08008105 	.word	0x08008105
 8008090:	080080fd 	.word	0x080080fd
 8008094:	080080fd 	.word	0x080080fd
 8008098:	080080fd 	.word	0x080080fd
 800809c:	080080fd 	.word	0x080080fd
 80080a0:	080080fd 	.word	0x080080fd
 80080a4:	080080fd 	.word	0x080080fd
 80080a8:	080080fd 	.word	0x080080fd
 80080ac:	08008105 	.word	0x08008105
 80080b0:	080080fd 	.word	0x080080fd
 80080b4:	080080fd 	.word	0x080080fd
 80080b8:	080080fd 	.word	0x080080fd
 80080bc:	080080fd 	.word	0x080080fd
 80080c0:	080080fd 	.word	0x080080fd
 80080c4:	080080fd 	.word	0x080080fd
 80080c8:	080080fd 	.word	0x080080fd
 80080cc:	08008105 	.word	0x08008105
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d4:	3308      	adds	r3, #8
 80080d6:	2101      	movs	r1, #1
 80080d8:	4618      	mov	r0, r3
 80080da:	f000 ffc3 	bl	8009064 <RCCEx_PLL2_Config>
 80080de:	4603      	mov	r3, r0
 80080e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80080e4:	e00f      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ea:	3328      	adds	r3, #40	@ 0x28
 80080ec:	2101      	movs	r1, #1
 80080ee:	4618      	mov	r0, r3
 80080f0:	f001 f86a 	bl	80091c8 <RCCEx_PLL3_Config>
 80080f4:	4603      	mov	r3, r0
 80080f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80080fa:	e004      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008102:	e000      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008104:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008106:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10a      	bne.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800810e:	4bbf      	ldr	r3, [pc, #764]	@ (800840c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008112:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800811a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800811c:	4abb      	ldr	r2, [pc, #748]	@ (800840c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800811e:	430b      	orrs	r3, r1
 8008120:	6553      	str	r3, [r2, #84]	@ 0x54
 8008122:	e003      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008128:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800812c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008134:	f002 0302 	and.w	r3, r2, #2
 8008138:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800813c:	2300      	movs	r3, #0
 800813e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008142:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008146:	460b      	mov	r3, r1
 8008148:	4313      	orrs	r3, r2
 800814a:	d041      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800814c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008150:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008152:	2b05      	cmp	r3, #5
 8008154:	d824      	bhi.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008156:	a201      	add	r2, pc, #4	@ (adr r2, 800815c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815c:	080081a9 	.word	0x080081a9
 8008160:	08008175 	.word	0x08008175
 8008164:	0800818b 	.word	0x0800818b
 8008168:	080081a9 	.word	0x080081a9
 800816c:	080081a9 	.word	0x080081a9
 8008170:	080081a9 	.word	0x080081a9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008178:	3308      	adds	r3, #8
 800817a:	2101      	movs	r1, #1
 800817c:	4618      	mov	r0, r3
 800817e:	f000 ff71 	bl	8009064 <RCCEx_PLL2_Config>
 8008182:	4603      	mov	r3, r0
 8008184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008188:	e00f      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800818a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800818e:	3328      	adds	r3, #40	@ 0x28
 8008190:	2101      	movs	r1, #1
 8008192:	4618      	mov	r0, r3
 8008194:	f001 f818 	bl	80091c8 <RCCEx_PLL3_Config>
 8008198:	4603      	mov	r3, r0
 800819a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800819e:	e004      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081a6:	e000      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80081a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10a      	bne.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80081b2:	4b96      	ldr	r3, [pc, #600]	@ (800840c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80081b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081b6:	f023 0107 	bic.w	r1, r3, #7
 80081ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80081c0:	4a92      	ldr	r2, [pc, #584]	@ (800840c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80081c2:	430b      	orrs	r3, r1
 80081c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80081c6:	e003      	b.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80081d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d8:	f002 0304 	and.w	r3, r2, #4
 80081dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80081e0:	2300      	movs	r3, #0
 80081e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80081e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80081ea:	460b      	mov	r3, r1
 80081ec:	4313      	orrs	r3, r2
 80081ee:	d044      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80081f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081f8:	2b05      	cmp	r3, #5
 80081fa:	d825      	bhi.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80081fc:	a201      	add	r2, pc, #4	@ (adr r2, 8008204 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80081fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008202:	bf00      	nop
 8008204:	08008251 	.word	0x08008251
 8008208:	0800821d 	.word	0x0800821d
 800820c:	08008233 	.word	0x08008233
 8008210:	08008251 	.word	0x08008251
 8008214:	08008251 	.word	0x08008251
 8008218:	08008251 	.word	0x08008251
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800821c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008220:	3308      	adds	r3, #8
 8008222:	2101      	movs	r1, #1
 8008224:	4618      	mov	r0, r3
 8008226:	f000 ff1d 	bl	8009064 <RCCEx_PLL2_Config>
 800822a:	4603      	mov	r3, r0
 800822c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008230:	e00f      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008236:	3328      	adds	r3, #40	@ 0x28
 8008238:	2101      	movs	r1, #1
 800823a:	4618      	mov	r0, r3
 800823c:	f000 ffc4 	bl	80091c8 <RCCEx_PLL3_Config>
 8008240:	4603      	mov	r3, r0
 8008242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008246:	e004      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800824e:	e000      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10b      	bne.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800825a:	4b6c      	ldr	r3, [pc, #432]	@ (800840c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800825c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800825e:	f023 0107 	bic.w	r1, r3, #7
 8008262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008266:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800826a:	4a68      	ldr	r2, [pc, #416]	@ (800840c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800826c:	430b      	orrs	r3, r1
 800826e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008270:	e003      	b.n	800827a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008276:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800827a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800827e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008282:	f002 0320 	and.w	r3, r2, #32
 8008286:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800828a:	2300      	movs	r3, #0
 800828c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008290:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008294:	460b      	mov	r3, r1
 8008296:	4313      	orrs	r3, r2
 8008298:	d055      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800829a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800829e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80082a6:	d033      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80082a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80082ac:	d82c      	bhi.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80082ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082b2:	d02f      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80082b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082b8:	d826      	bhi.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80082ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80082be:	d02b      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80082c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80082c4:	d820      	bhi.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80082c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082ca:	d012      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80082cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082d0:	d81a      	bhi.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d022      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80082d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082da:	d115      	bne.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082e0:	3308      	adds	r3, #8
 80082e2:	2100      	movs	r1, #0
 80082e4:	4618      	mov	r0, r3
 80082e6:	f000 febd 	bl	8009064 <RCCEx_PLL2_Config>
 80082ea:	4603      	mov	r3, r0
 80082ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80082f0:	e015      	b.n	800831e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082f6:	3328      	adds	r3, #40	@ 0x28
 80082f8:	2102      	movs	r1, #2
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 ff64 	bl	80091c8 <RCCEx_PLL3_Config>
 8008300:	4603      	mov	r3, r0
 8008302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008306:	e00a      	b.n	800831e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800830e:	e006      	b.n	800831e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008310:	bf00      	nop
 8008312:	e004      	b.n	800831e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008314:	bf00      	nop
 8008316:	e002      	b.n	800831e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008318:	bf00      	nop
 800831a:	e000      	b.n	800831e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800831c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800831e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10b      	bne.n	800833e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008326:	4b39      	ldr	r3, [pc, #228]	@ (800840c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800832a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800832e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008336:	4a35      	ldr	r2, [pc, #212]	@ (800840c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008338:	430b      	orrs	r3, r1
 800833a:	6553      	str	r3, [r2, #84]	@ 0x54
 800833c:	e003      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800833e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008342:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800834a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008352:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008356:	2300      	movs	r3, #0
 8008358:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800835c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008360:	460b      	mov	r3, r1
 8008362:	4313      	orrs	r3, r2
 8008364:	d058      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800836a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800836e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008372:	d033      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008374:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008378:	d82c      	bhi.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800837a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800837e:	d02f      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008384:	d826      	bhi.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008386:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800838a:	d02b      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800838c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008390:	d820      	bhi.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008392:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008396:	d012      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008398:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800839c:	d81a      	bhi.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d022      	beq.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80083a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083a6:	d115      	bne.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ac:	3308      	adds	r3, #8
 80083ae:	2100      	movs	r1, #0
 80083b0:	4618      	mov	r0, r3
 80083b2:	f000 fe57 	bl	8009064 <RCCEx_PLL2_Config>
 80083b6:	4603      	mov	r3, r0
 80083b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80083bc:	e015      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80083be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c2:	3328      	adds	r3, #40	@ 0x28
 80083c4:	2102      	movs	r1, #2
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 fefe 	bl	80091c8 <RCCEx_PLL3_Config>
 80083cc:	4603      	mov	r3, r0
 80083ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80083d2:	e00a      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083da:	e006      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80083dc:	bf00      	nop
 80083de:	e004      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80083e0:	bf00      	nop
 80083e2:	e002      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80083e4:	bf00      	nop
 80083e6:	e000      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80083e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10e      	bne.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80083f2:	4b06      	ldr	r3, [pc, #24]	@ (800840c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083f6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80083fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008402:	4a02      	ldr	r2, [pc, #8]	@ (800840c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008404:	430b      	orrs	r3, r1
 8008406:	6593      	str	r3, [r2, #88]	@ 0x58
 8008408:	e006      	b.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800840a:	bf00      	nop
 800840c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008410:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008414:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800841c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008420:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008424:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008428:	2300      	movs	r3, #0
 800842a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800842e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008432:	460b      	mov	r3, r1
 8008434:	4313      	orrs	r3, r2
 8008436:	d055      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800843c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008440:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008444:	d033      	beq.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008446:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800844a:	d82c      	bhi.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800844c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008450:	d02f      	beq.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008452:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008456:	d826      	bhi.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008458:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800845c:	d02b      	beq.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800845e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008462:	d820      	bhi.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008464:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008468:	d012      	beq.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800846a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800846e:	d81a      	bhi.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008470:	2b00      	cmp	r3, #0
 8008472:	d022      	beq.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008474:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008478:	d115      	bne.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800847a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800847e:	3308      	adds	r3, #8
 8008480:	2100      	movs	r1, #0
 8008482:	4618      	mov	r0, r3
 8008484:	f000 fdee 	bl	8009064 <RCCEx_PLL2_Config>
 8008488:	4603      	mov	r3, r0
 800848a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800848e:	e015      	b.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008494:	3328      	adds	r3, #40	@ 0x28
 8008496:	2102      	movs	r1, #2
 8008498:	4618      	mov	r0, r3
 800849a:	f000 fe95 	bl	80091c8 <RCCEx_PLL3_Config>
 800849e:	4603      	mov	r3, r0
 80084a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80084a4:	e00a      	b.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084ac:	e006      	b.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80084ae:	bf00      	nop
 80084b0:	e004      	b.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80084b2:	bf00      	nop
 80084b4:	e002      	b.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80084b6:	bf00      	nop
 80084b8:	e000      	b.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80084ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10b      	bne.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80084c4:	4ba1      	ldr	r3, [pc, #644]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084c8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80084cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80084d4:	4a9d      	ldr	r2, [pc, #628]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084d6:	430b      	orrs	r3, r1
 80084d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80084da:	e003      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80084e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ec:	f002 0308 	and.w	r3, r2, #8
 80084f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80084f4:	2300      	movs	r3, #0
 80084f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80084fa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80084fe:	460b      	mov	r3, r1
 8008500:	4313      	orrs	r3, r2
 8008502:	d01e      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008508:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800850c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008510:	d10c      	bne.n	800852c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008516:	3328      	adds	r3, #40	@ 0x28
 8008518:	2102      	movs	r1, #2
 800851a:	4618      	mov	r0, r3
 800851c:	f000 fe54 	bl	80091c8 <RCCEx_PLL3_Config>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d002      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800852c:	4b87      	ldr	r3, [pc, #540]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800852e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008530:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008538:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800853c:	4a83      	ldr	r2, [pc, #524]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800853e:	430b      	orrs	r3, r1
 8008540:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854a:	f002 0310 	and.w	r3, r2, #16
 800854e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008552:	2300      	movs	r3, #0
 8008554:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008558:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800855c:	460b      	mov	r3, r1
 800855e:	4313      	orrs	r3, r2
 8008560:	d01e      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008566:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800856a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800856e:	d10c      	bne.n	800858a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008574:	3328      	adds	r3, #40	@ 0x28
 8008576:	2102      	movs	r1, #2
 8008578:	4618      	mov	r0, r3
 800857a:	f000 fe25 	bl	80091c8 <RCCEx_PLL3_Config>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d002      	beq.n	800858a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800858a:	4b70      	ldr	r3, [pc, #448]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800858c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800858e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008596:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800859a:	4a6c      	ldr	r2, [pc, #432]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800859c:	430b      	orrs	r3, r1
 800859e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80085a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80085ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80085b0:	2300      	movs	r3, #0
 80085b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80085b6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80085ba:	460b      	mov	r3, r1
 80085bc:	4313      	orrs	r3, r2
 80085be:	d03e      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80085c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80085c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085cc:	d022      	beq.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80085ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085d2:	d81b      	bhi.n	800860c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d003      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80085d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085dc:	d00b      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80085de:	e015      	b.n	800860c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085e4:	3308      	adds	r3, #8
 80085e6:	2100      	movs	r1, #0
 80085e8:	4618      	mov	r0, r3
 80085ea:	f000 fd3b 	bl	8009064 <RCCEx_PLL2_Config>
 80085ee:	4603      	mov	r3, r0
 80085f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80085f4:	e00f      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085fa:	3328      	adds	r3, #40	@ 0x28
 80085fc:	2102      	movs	r1, #2
 80085fe:	4618      	mov	r0, r3
 8008600:	f000 fde2 	bl	80091c8 <RCCEx_PLL3_Config>
 8008604:	4603      	mov	r3, r0
 8008606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800860a:	e004      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008612:	e000      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10b      	bne.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800861e:	4b4b      	ldr	r3, [pc, #300]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008622:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800862a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800862e:	4a47      	ldr	r2, [pc, #284]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008630:	430b      	orrs	r3, r1
 8008632:	6593      	str	r3, [r2, #88]	@ 0x58
 8008634:	e003      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800863a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800863e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008646:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800864a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800864c:	2300      	movs	r3, #0
 800864e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008650:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008654:	460b      	mov	r3, r1
 8008656:	4313      	orrs	r3, r2
 8008658:	d03b      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800865a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800865e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008662:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008666:	d01f      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008668:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800866c:	d818      	bhi.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800866e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008672:	d003      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008674:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008678:	d007      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800867a:	e011      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800867c:	4b33      	ldr	r3, [pc, #204]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800867e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008680:	4a32      	ldr	r2, [pc, #200]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008682:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008686:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008688:	e00f      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800868a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800868e:	3328      	adds	r3, #40	@ 0x28
 8008690:	2101      	movs	r1, #1
 8008692:	4618      	mov	r0, r3
 8008694:	f000 fd98 	bl	80091c8 <RCCEx_PLL3_Config>
 8008698:	4603      	mov	r3, r0
 800869a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800869e:	e004      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086a6:	e000      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80086a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10b      	bne.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80086b2:	4b26      	ldr	r3, [pc, #152]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086b6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80086ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086c2:	4a22      	ldr	r2, [pc, #136]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086c4:	430b      	orrs	r3, r1
 80086c6:	6553      	str	r3, [r2, #84]	@ 0x54
 80086c8:	e003      	b.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80086d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086da:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80086de:	673b      	str	r3, [r7, #112]	@ 0x70
 80086e0:	2300      	movs	r3, #0
 80086e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80086e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80086e8:	460b      	mov	r3, r1
 80086ea:	4313      	orrs	r3, r2
 80086ec:	d034      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80086ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d003      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80086f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086fc:	d007      	beq.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80086fe:	e011      	b.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008700:	4b12      	ldr	r3, [pc, #72]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008704:	4a11      	ldr	r2, [pc, #68]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008706:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800870a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800870c:	e00e      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800870e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008712:	3308      	adds	r3, #8
 8008714:	2102      	movs	r1, #2
 8008716:	4618      	mov	r0, r3
 8008718:	f000 fca4 	bl	8009064 <RCCEx_PLL2_Config>
 800871c:	4603      	mov	r3, r0
 800871e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008722:	e003      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800872a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800872c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10d      	bne.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008734:	4b05      	ldr	r3, [pc, #20]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008738:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800873c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008740:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008742:	4a02      	ldr	r2, [pc, #8]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008744:	430b      	orrs	r3, r1
 8008746:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008748:	e006      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800874a:	bf00      	nop
 800874c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008750:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008754:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800875c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008760:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008764:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008766:	2300      	movs	r3, #0
 8008768:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800876a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800876e:	460b      	mov	r3, r1
 8008770:	4313      	orrs	r3, r2
 8008772:	d00c      	beq.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008778:	3328      	adds	r3, #40	@ 0x28
 800877a:	2102      	movs	r1, #2
 800877c:	4618      	mov	r0, r3
 800877e:	f000 fd23 	bl	80091c8 <RCCEx_PLL3_Config>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d002      	beq.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800878e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008796:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800879a:	663b      	str	r3, [r7, #96]	@ 0x60
 800879c:	2300      	movs	r3, #0
 800879e:	667b      	str	r3, [r7, #100]	@ 0x64
 80087a0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80087a4:	460b      	mov	r3, r1
 80087a6:	4313      	orrs	r3, r2
 80087a8:	d038      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80087aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087b6:	d018      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80087b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087bc:	d811      	bhi.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80087be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087c2:	d014      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80087c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087c8:	d80b      	bhi.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d011      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80087ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087d2:	d106      	bne.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087d4:	4bc3      	ldr	r3, [pc, #780]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d8:	4ac2      	ldr	r2, [pc, #776]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80087e0:	e008      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087e8:	e004      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80087ea:	bf00      	nop
 80087ec:	e002      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80087ee:	bf00      	nop
 80087f0:	e000      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80087f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10b      	bne.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80087fc:	4bb9      	ldr	r3, [pc, #740]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008800:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800880c:	4ab5      	ldr	r2, [pc, #724]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800880e:	430b      	orrs	r3, r1
 8008810:	6553      	str	r3, [r2, #84]	@ 0x54
 8008812:	e003      	b.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008814:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008818:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800881c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008824:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008828:	65bb      	str	r3, [r7, #88]	@ 0x58
 800882a:	2300      	movs	r3, #0
 800882c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800882e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008832:	460b      	mov	r3, r1
 8008834:	4313      	orrs	r3, r2
 8008836:	d009      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008838:	4baa      	ldr	r3, [pc, #680]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800883a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800883c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008846:	4aa7      	ldr	r2, [pc, #668]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008848:	430b      	orrs	r3, r1
 800884a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800884c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008854:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008858:	653b      	str	r3, [r7, #80]	@ 0x50
 800885a:	2300      	movs	r3, #0
 800885c:	657b      	str	r3, [r7, #84]	@ 0x54
 800885e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008862:	460b      	mov	r3, r1
 8008864:	4313      	orrs	r3, r2
 8008866:	d00a      	beq.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008868:	4b9e      	ldr	r3, [pc, #632]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008874:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008878:	4a9a      	ldr	r2, [pc, #616]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800887a:	430b      	orrs	r3, r1
 800887c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800887e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008886:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800888a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800888c:	2300      	movs	r3, #0
 800888e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008890:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008894:	460b      	mov	r3, r1
 8008896:	4313      	orrs	r3, r2
 8008898:	d009      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800889a:	4b92      	ldr	r3, [pc, #584]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800889c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800889e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80088a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088a8:	4a8e      	ldr	r2, [pc, #568]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088aa:	430b      	orrs	r3, r1
 80088ac:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80088ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80088ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80088bc:	2300      	movs	r3, #0
 80088be:	647b      	str	r3, [r7, #68]	@ 0x44
 80088c0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80088c4:	460b      	mov	r3, r1
 80088c6:	4313      	orrs	r3, r2
 80088c8:	d00e      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80088ca:	4b86      	ldr	r3, [pc, #536]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	4a85      	ldr	r2, [pc, #532]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088d0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80088d4:	6113      	str	r3, [r2, #16]
 80088d6:	4b83      	ldr	r3, [pc, #524]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088d8:	6919      	ldr	r1, [r3, #16]
 80088da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80088e2:	4a80      	ldr	r2, [pc, #512]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088e4:	430b      	orrs	r3, r1
 80088e6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80088e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80088f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80088f6:	2300      	movs	r3, #0
 80088f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088fa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80088fe:	460b      	mov	r3, r1
 8008900:	4313      	orrs	r3, r2
 8008902:	d009      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008904:	4b77      	ldr	r3, [pc, #476]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008908:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800890c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008912:	4a74      	ldr	r2, [pc, #464]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008914:	430b      	orrs	r3, r1
 8008916:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800891c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008920:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008924:	633b      	str	r3, [r7, #48]	@ 0x30
 8008926:	2300      	movs	r3, #0
 8008928:	637b      	str	r3, [r7, #52]	@ 0x34
 800892a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800892e:	460b      	mov	r3, r1
 8008930:	4313      	orrs	r3, r2
 8008932:	d00a      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008934:	4b6b      	ldr	r3, [pc, #428]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008938:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800893c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008940:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008944:	4a67      	ldr	r2, [pc, #412]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008946:	430b      	orrs	r3, r1
 8008948:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800894a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800894e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008952:	2100      	movs	r1, #0
 8008954:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800895c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008960:	460b      	mov	r3, r1
 8008962:	4313      	orrs	r3, r2
 8008964:	d011      	beq.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800896a:	3308      	adds	r3, #8
 800896c:	2100      	movs	r1, #0
 800896e:	4618      	mov	r0, r3
 8008970:	f000 fb78 	bl	8009064 <RCCEx_PLL2_Config>
 8008974:	4603      	mov	r3, r0
 8008976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800897a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800897e:	2b00      	cmp	r3, #0
 8008980:	d003      	beq.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008986:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800898a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800898e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008992:	2100      	movs	r1, #0
 8008994:	6239      	str	r1, [r7, #32]
 8008996:	f003 0302 	and.w	r3, r3, #2
 800899a:	627b      	str	r3, [r7, #36]	@ 0x24
 800899c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80089a0:	460b      	mov	r3, r1
 80089a2:	4313      	orrs	r3, r2
 80089a4:	d011      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089aa:	3308      	adds	r3, #8
 80089ac:	2101      	movs	r1, #1
 80089ae:	4618      	mov	r0, r3
 80089b0:	f000 fb58 	bl	8009064 <RCCEx_PLL2_Config>
 80089b4:	4603      	mov	r3, r0
 80089b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80089ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d003      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80089ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d2:	2100      	movs	r1, #0
 80089d4:	61b9      	str	r1, [r7, #24]
 80089d6:	f003 0304 	and.w	r3, r3, #4
 80089da:	61fb      	str	r3, [r7, #28]
 80089dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80089e0:	460b      	mov	r3, r1
 80089e2:	4313      	orrs	r3, r2
 80089e4:	d011      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80089e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ea:	3308      	adds	r3, #8
 80089ec:	2102      	movs	r1, #2
 80089ee:	4618      	mov	r0, r3
 80089f0:	f000 fb38 	bl	8009064 <RCCEx_PLL2_Config>
 80089f4:	4603      	mov	r3, r0
 80089f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80089fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d003      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a12:	2100      	movs	r1, #0
 8008a14:	6139      	str	r1, [r7, #16]
 8008a16:	f003 0308 	and.w	r3, r3, #8
 8008a1a:	617b      	str	r3, [r7, #20]
 8008a1c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008a20:	460b      	mov	r3, r1
 8008a22:	4313      	orrs	r3, r2
 8008a24:	d011      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a2a:	3328      	adds	r3, #40	@ 0x28
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f000 fbca 	bl	80091c8 <RCCEx_PLL3_Config>
 8008a34:	4603      	mov	r3, r0
 8008a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d003      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a52:	2100      	movs	r1, #0
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	f003 0310 	and.w	r3, r3, #16
 8008a5a:	60fb      	str	r3, [r7, #12]
 8008a5c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008a60:	460b      	mov	r3, r1
 8008a62:	4313      	orrs	r3, r2
 8008a64:	d011      	beq.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a6a:	3328      	adds	r3, #40	@ 0x28
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f000 fbaa 	bl	80091c8 <RCCEx_PLL3_Config>
 8008a74:	4603      	mov	r3, r0
 8008a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d003      	beq.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a92:	2100      	movs	r1, #0
 8008a94:	6039      	str	r1, [r7, #0]
 8008a96:	f003 0320 	and.w	r3, r3, #32
 8008a9a:	607b      	str	r3, [r7, #4]
 8008a9c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	d011      	beq.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aaa:	3328      	adds	r3, #40	@ 0x28
 8008aac:	2102      	movs	r1, #2
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f000 fb8a 	bl	80091c8 <RCCEx_PLL3_Config>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d003      	beq.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ac6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008aca:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d101      	bne.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	e000      	b.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ae4:	58024400 	.word	0x58024400

08008ae8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008aec:	f7fe fd96 	bl	800761c <HAL_RCC_GetHCLKFreq>
 8008af0:	4602      	mov	r2, r0
 8008af2:	4b06      	ldr	r3, [pc, #24]	@ (8008b0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	091b      	lsrs	r3, r3, #4
 8008af8:	f003 0307 	and.w	r3, r3, #7
 8008afc:	4904      	ldr	r1, [pc, #16]	@ (8008b10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008afe:	5ccb      	ldrb	r3, [r1, r3]
 8008b00:	f003 031f 	and.w	r3, r3, #31
 8008b04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	58024400 	.word	0x58024400
 8008b10:	080104d8 	.word	0x080104d8

08008b14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b089      	sub	sp, #36	@ 0x24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b1c:	4ba1      	ldr	r3, [pc, #644]	@ (8008da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b20:	f003 0303 	and.w	r3, r3, #3
 8008b24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008b26:	4b9f      	ldr	r3, [pc, #636]	@ (8008da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b2a:	0b1b      	lsrs	r3, r3, #12
 8008b2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008b32:	4b9c      	ldr	r3, [pc, #624]	@ (8008da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b36:	091b      	lsrs	r3, r3, #4
 8008b38:	f003 0301 	and.w	r3, r3, #1
 8008b3c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008b3e:	4b99      	ldr	r3, [pc, #612]	@ (8008da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b42:	08db      	lsrs	r3, r3, #3
 8008b44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	fb02 f303 	mul.w	r3, r2, r3
 8008b4e:	ee07 3a90 	vmov	s15, r3
 8008b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 8111 	beq.w	8008d84 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	f000 8083 	beq.w	8008c70 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	f200 80a1 	bhi.w	8008cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d003      	beq.n	8008b80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d056      	beq.n	8008c2c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008b7e:	e099      	b.n	8008cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b80:	4b88      	ldr	r3, [pc, #544]	@ (8008da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 0320 	and.w	r3, r3, #32
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d02d      	beq.n	8008be8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b8c:	4b85      	ldr	r3, [pc, #532]	@ (8008da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	08db      	lsrs	r3, r3, #3
 8008b92:	f003 0303 	and.w	r3, r3, #3
 8008b96:	4a84      	ldr	r2, [pc, #528]	@ (8008da8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008b98:	fa22 f303 	lsr.w	r3, r2, r3
 8008b9c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	ee07 3a90 	vmov	s15, r3
 8008ba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	ee07 3a90 	vmov	s15, r3
 8008bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bb6:	4b7b      	ldr	r3, [pc, #492]	@ (8008da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bbe:	ee07 3a90 	vmov	s15, r3
 8008bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008be2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008be6:	e087      	b.n	8008cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	ee07 3a90 	vmov	s15, r3
 8008bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008db0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bfa:	4b6a      	ldr	r3, [pc, #424]	@ (8008da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c02:	ee07 3a90 	vmov	s15, r3
 8008c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c2a:	e065      	b.n	8008cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	ee07 3a90 	vmov	s15, r3
 8008c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008db4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c3e:	4b59      	ldr	r3, [pc, #356]	@ (8008da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c46:	ee07 3a90 	vmov	s15, r3
 8008c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c6e:	e043      	b.n	8008cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	ee07 3a90 	vmov	s15, r3
 8008c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008db8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c82:	4b48      	ldr	r3, [pc, #288]	@ (8008da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c8a:	ee07 3a90 	vmov	s15, r3
 8008c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cb2:	e021      	b.n	8008cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	ee07 3a90 	vmov	s15, r3
 8008cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cbe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008db4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cc6:	4b37      	ldr	r3, [pc, #220]	@ (8008da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cce:	ee07 3a90 	vmov	s15, r3
 8008cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cf6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8008da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cfc:	0a5b      	lsrs	r3, r3, #9
 8008cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d02:	ee07 3a90 	vmov	s15, r3
 8008d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d12:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d1e:	ee17 2a90 	vmov	r2, s15
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008d26:	4b1f      	ldr	r3, [pc, #124]	@ (8008da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d2a:	0c1b      	lsrs	r3, r3, #16
 8008d2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d30:	ee07 3a90 	vmov	s15, r3
 8008d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d40:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d4c:	ee17 2a90 	vmov	r2, s15
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008d54:	4b13      	ldr	r3, [pc, #76]	@ (8008da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d58:	0e1b      	lsrs	r3, r3, #24
 8008d5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d5e:	ee07 3a90 	vmov	s15, r3
 8008d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d7a:	ee17 2a90 	vmov	r2, s15
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008d82:	e008      	b.n	8008d96 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	609a      	str	r2, [r3, #8]
}
 8008d96:	bf00      	nop
 8008d98:	3724      	adds	r7, #36	@ 0x24
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	58024400 	.word	0x58024400
 8008da8:	03d09000 	.word	0x03d09000
 8008dac:	46000000 	.word	0x46000000
 8008db0:	4c742400 	.word	0x4c742400
 8008db4:	4a742400 	.word	0x4a742400
 8008db8:	4bb71b00 	.word	0x4bb71b00

08008dbc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b089      	sub	sp, #36	@ 0x24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008dc4:	4ba1      	ldr	r3, [pc, #644]	@ (800904c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dc8:	f003 0303 	and.w	r3, r3, #3
 8008dcc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008dce:	4b9f      	ldr	r3, [pc, #636]	@ (800904c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd2:	0d1b      	lsrs	r3, r3, #20
 8008dd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008dd8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008dda:	4b9c      	ldr	r3, [pc, #624]	@ (800904c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dde:	0a1b      	lsrs	r3, r3, #8
 8008de0:	f003 0301 	and.w	r3, r3, #1
 8008de4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008de6:	4b99      	ldr	r3, [pc, #612]	@ (800904c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dea:	08db      	lsrs	r3, r3, #3
 8008dec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	fb02 f303 	mul.w	r3, r2, r3
 8008df6:	ee07 3a90 	vmov	s15, r3
 8008dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dfe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f000 8111 	beq.w	800902c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	f000 8083 	beq.w	8008f18 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	f200 80a1 	bhi.w	8008f5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d003      	beq.n	8008e28 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d056      	beq.n	8008ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008e26:	e099      	b.n	8008f5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e28:	4b88      	ldr	r3, [pc, #544]	@ (800904c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 0320 	and.w	r3, r3, #32
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d02d      	beq.n	8008e90 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e34:	4b85      	ldr	r3, [pc, #532]	@ (800904c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	08db      	lsrs	r3, r3, #3
 8008e3a:	f003 0303 	and.w	r3, r3, #3
 8008e3e:	4a84      	ldr	r2, [pc, #528]	@ (8009050 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008e40:	fa22 f303 	lsr.w	r3, r2, r3
 8008e44:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	ee07 3a90 	vmov	s15, r3
 8008e4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	ee07 3a90 	vmov	s15, r3
 8008e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e5e:	4b7b      	ldr	r3, [pc, #492]	@ (800904c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e66:	ee07 3a90 	vmov	s15, r3
 8008e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e72:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008e8e:	e087      	b.n	8008fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	ee07 3a90 	vmov	s15, r3
 8008e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e9a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009058 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ea2:	4b6a      	ldr	r3, [pc, #424]	@ (800904c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eaa:	ee07 3a90 	vmov	s15, r3
 8008eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eb6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ec2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ed2:	e065      	b.n	8008fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	ee07 3a90 	vmov	s15, r3
 8008eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ede:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800905c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ee6:	4b59      	ldr	r3, [pc, #356]	@ (800904c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eee:	ee07 3a90 	vmov	s15, r3
 8008ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008efa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f16:	e043      	b.n	8008fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	ee07 3a90 	vmov	s15, r3
 8008f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f22:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f2a:	4b48      	ldr	r3, [pc, #288]	@ (800904c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f32:	ee07 3a90 	vmov	s15, r3
 8008f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f3e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f5a:	e021      	b.n	8008fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	ee07 3a90 	vmov	s15, r3
 8008f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f66:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800905c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f6e:	4b37      	ldr	r3, [pc, #220]	@ (800904c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f76:	ee07 3a90 	vmov	s15, r3
 8008f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f82:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f9e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800904c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fa4:	0a5b      	lsrs	r3, r3, #9
 8008fa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008faa:	ee07 3a90 	vmov	s15, r3
 8008fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008fb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fba:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fc6:	ee17 2a90 	vmov	r2, s15
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008fce:	4b1f      	ldr	r3, [pc, #124]	@ (800904c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fd2:	0c1b      	lsrs	r3, r3, #16
 8008fd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fd8:	ee07 3a90 	vmov	s15, r3
 8008fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fe0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008fe4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fe8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ff4:	ee17 2a90 	vmov	r2, s15
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008ffc:	4b13      	ldr	r3, [pc, #76]	@ (800904c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009000:	0e1b      	lsrs	r3, r3, #24
 8009002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009006:	ee07 3a90 	vmov	s15, r3
 800900a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800900e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009012:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009016:	edd7 6a07 	vldr	s13, [r7, #28]
 800901a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800901e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009022:	ee17 2a90 	vmov	r2, s15
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800902a:	e008      	b.n	800903e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	609a      	str	r2, [r3, #8]
}
 800903e:	bf00      	nop
 8009040:	3724      	adds	r7, #36	@ 0x24
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	58024400 	.word	0x58024400
 8009050:	03d09000 	.word	0x03d09000
 8009054:	46000000 	.word	0x46000000
 8009058:	4c742400 	.word	0x4c742400
 800905c:	4a742400 	.word	0x4a742400
 8009060:	4bb71b00 	.word	0x4bb71b00

08009064 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800906e:	2300      	movs	r3, #0
 8009070:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009072:	4b53      	ldr	r3, [pc, #332]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 8009074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009076:	f003 0303 	and.w	r3, r3, #3
 800907a:	2b03      	cmp	r3, #3
 800907c:	d101      	bne.n	8009082 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	e099      	b.n	80091b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009082:	4b4f      	ldr	r3, [pc, #316]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a4e      	ldr	r2, [pc, #312]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 8009088:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800908c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800908e:	f7fa fcf5 	bl	8003a7c <HAL_GetTick>
 8009092:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009094:	e008      	b.n	80090a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009096:	f7fa fcf1 	bl	8003a7c <HAL_GetTick>
 800909a:	4602      	mov	r2, r0
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d901      	bls.n	80090a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e086      	b.n	80091b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80090a8:	4b45      	ldr	r3, [pc, #276]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1f0      	bne.n	8009096 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80090b4:	4b42      	ldr	r3, [pc, #264]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 80090b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090b8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	031b      	lsls	r3, r3, #12
 80090c2:	493f      	ldr	r1, [pc, #252]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 80090c4:	4313      	orrs	r3, r2
 80090c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	3b01      	subs	r3, #1
 80090ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	3b01      	subs	r3, #1
 80090d8:	025b      	lsls	r3, r3, #9
 80090da:	b29b      	uxth	r3, r3
 80090dc:	431a      	orrs	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	3b01      	subs	r3, #1
 80090e4:	041b      	lsls	r3, r3, #16
 80090e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80090ea:	431a      	orrs	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	3b01      	subs	r3, #1
 80090f2:	061b      	lsls	r3, r3, #24
 80090f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80090f8:	4931      	ldr	r1, [pc, #196]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 80090fa:	4313      	orrs	r3, r2
 80090fc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80090fe:	4b30      	ldr	r3, [pc, #192]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 8009100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009102:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	695b      	ldr	r3, [r3, #20]
 800910a:	492d      	ldr	r1, [pc, #180]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 800910c:	4313      	orrs	r3, r2
 800910e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009110:	4b2b      	ldr	r3, [pc, #172]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 8009112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009114:	f023 0220 	bic.w	r2, r3, #32
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	699b      	ldr	r3, [r3, #24]
 800911c:	4928      	ldr	r1, [pc, #160]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 800911e:	4313      	orrs	r3, r2
 8009120:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009122:	4b27      	ldr	r3, [pc, #156]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 8009124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009126:	4a26      	ldr	r2, [pc, #152]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 8009128:	f023 0310 	bic.w	r3, r3, #16
 800912c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800912e:	4b24      	ldr	r3, [pc, #144]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 8009130:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009132:	4b24      	ldr	r3, [pc, #144]	@ (80091c4 <RCCEx_PLL2_Config+0x160>)
 8009134:	4013      	ands	r3, r2
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	69d2      	ldr	r2, [r2, #28]
 800913a:	00d2      	lsls	r2, r2, #3
 800913c:	4920      	ldr	r1, [pc, #128]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 800913e:	4313      	orrs	r3, r2
 8009140:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009142:	4b1f      	ldr	r3, [pc, #124]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 8009144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009146:	4a1e      	ldr	r2, [pc, #120]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 8009148:	f043 0310 	orr.w	r3, r3, #16
 800914c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d106      	bne.n	8009162 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009154:	4b1a      	ldr	r3, [pc, #104]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 8009156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009158:	4a19      	ldr	r2, [pc, #100]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 800915a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800915e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009160:	e00f      	b.n	8009182 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	2b01      	cmp	r3, #1
 8009166:	d106      	bne.n	8009176 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009168:	4b15      	ldr	r3, [pc, #84]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 800916a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800916c:	4a14      	ldr	r2, [pc, #80]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 800916e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009172:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009174:	e005      	b.n	8009182 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009176:	4b12      	ldr	r3, [pc, #72]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 8009178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800917a:	4a11      	ldr	r2, [pc, #68]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 800917c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009180:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009182:	4b0f      	ldr	r3, [pc, #60]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a0e      	ldr	r2, [pc, #56]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 8009188:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800918c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800918e:	f7fa fc75 	bl	8003a7c <HAL_GetTick>
 8009192:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009194:	e008      	b.n	80091a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009196:	f7fa fc71 	bl	8003a7c <HAL_GetTick>
 800919a:	4602      	mov	r2, r0
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	1ad3      	subs	r3, r2, r3
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d901      	bls.n	80091a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80091a4:	2303      	movs	r3, #3
 80091a6:	e006      	b.n	80091b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80091a8:	4b05      	ldr	r3, [pc, #20]	@ (80091c0 <RCCEx_PLL2_Config+0x15c>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d0f0      	beq.n	8009196 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	58024400 	.word	0x58024400
 80091c4:	ffff0007 	.word	0xffff0007

080091c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091d2:	2300      	movs	r3, #0
 80091d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091d6:	4b53      	ldr	r3, [pc, #332]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 80091d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091da:	f003 0303 	and.w	r3, r3, #3
 80091de:	2b03      	cmp	r3, #3
 80091e0:	d101      	bne.n	80091e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e099      	b.n	800931a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80091e6:	4b4f      	ldr	r3, [pc, #316]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a4e      	ldr	r2, [pc, #312]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 80091ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80091f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091f2:	f7fa fc43 	bl	8003a7c <HAL_GetTick>
 80091f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80091f8:	e008      	b.n	800920c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80091fa:	f7fa fc3f 	bl	8003a7c <HAL_GetTick>
 80091fe:	4602      	mov	r2, r0
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	2b02      	cmp	r3, #2
 8009206:	d901      	bls.n	800920c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009208:	2303      	movs	r3, #3
 800920a:	e086      	b.n	800931a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800920c:	4b45      	ldr	r3, [pc, #276]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1f0      	bne.n	80091fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009218:	4b42      	ldr	r3, [pc, #264]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 800921a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800921c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	051b      	lsls	r3, r3, #20
 8009226:	493f      	ldr	r1, [pc, #252]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 8009228:	4313      	orrs	r3, r2
 800922a:	628b      	str	r3, [r1, #40]	@ 0x28
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	3b01      	subs	r3, #1
 8009232:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	3b01      	subs	r3, #1
 800923c:	025b      	lsls	r3, r3, #9
 800923e:	b29b      	uxth	r3, r3
 8009240:	431a      	orrs	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	3b01      	subs	r3, #1
 8009248:	041b      	lsls	r3, r3, #16
 800924a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800924e:	431a      	orrs	r2, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	3b01      	subs	r3, #1
 8009256:	061b      	lsls	r3, r3, #24
 8009258:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800925c:	4931      	ldr	r1, [pc, #196]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 800925e:	4313      	orrs	r3, r2
 8009260:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009262:	4b30      	ldr	r3, [pc, #192]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 8009264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009266:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	492d      	ldr	r1, [pc, #180]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 8009270:	4313      	orrs	r3, r2
 8009272:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009274:	4b2b      	ldr	r3, [pc, #172]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 8009276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009278:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	699b      	ldr	r3, [r3, #24]
 8009280:	4928      	ldr	r1, [pc, #160]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 8009282:	4313      	orrs	r3, r2
 8009284:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009286:	4b27      	ldr	r3, [pc, #156]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 8009288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800928a:	4a26      	ldr	r2, [pc, #152]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 800928c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009290:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009292:	4b24      	ldr	r3, [pc, #144]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 8009294:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009296:	4b24      	ldr	r3, [pc, #144]	@ (8009328 <RCCEx_PLL3_Config+0x160>)
 8009298:	4013      	ands	r3, r2
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	69d2      	ldr	r2, [r2, #28]
 800929e:	00d2      	lsls	r2, r2, #3
 80092a0:	4920      	ldr	r1, [pc, #128]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 80092a2:	4313      	orrs	r3, r2
 80092a4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80092a6:	4b1f      	ldr	r3, [pc, #124]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 80092a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092aa:	4a1e      	ldr	r2, [pc, #120]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 80092ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d106      	bne.n	80092c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80092b8:	4b1a      	ldr	r3, [pc, #104]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 80092ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092bc:	4a19      	ldr	r2, [pc, #100]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 80092be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80092c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80092c4:	e00f      	b.n	80092e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d106      	bne.n	80092da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80092cc:	4b15      	ldr	r3, [pc, #84]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 80092ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d0:	4a14      	ldr	r2, [pc, #80]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 80092d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80092d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80092d8:	e005      	b.n	80092e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80092da:	4b12      	ldr	r3, [pc, #72]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 80092dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092de:	4a11      	ldr	r2, [pc, #68]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 80092e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80092e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80092e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a0e      	ldr	r2, [pc, #56]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 80092ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092f2:	f7fa fbc3 	bl	8003a7c <HAL_GetTick>
 80092f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80092f8:	e008      	b.n	800930c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80092fa:	f7fa fbbf 	bl	8003a7c <HAL_GetTick>
 80092fe:	4602      	mov	r2, r0
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	2b02      	cmp	r3, #2
 8009306:	d901      	bls.n	800930c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009308:	2303      	movs	r3, #3
 800930a:	e006      	b.n	800931a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800930c:	4b05      	ldr	r3, [pc, #20]	@ (8009324 <RCCEx_PLL3_Config+0x15c>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009314:	2b00      	cmp	r3, #0
 8009316:	d0f0      	beq.n	80092fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009318:	7bfb      	ldrb	r3, [r7, #15]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	58024400 	.word	0x58024400
 8009328:	ffff0007 	.word	0xffff0007

0800932c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d101      	bne.n	800933e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	e049      	b.n	80093d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009344:	b2db      	uxtb	r3, r3
 8009346:	2b00      	cmp	r3, #0
 8009348:	d106      	bne.n	8009358 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f7f9 fd60 	bl	8002e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2202      	movs	r2, #2
 800935c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	3304      	adds	r3, #4
 8009368:	4619      	mov	r1, r3
 800936a:	4610      	mov	r0, r2
 800936c:	f000 fd5a 	bl	8009e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3708      	adds	r7, #8
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
	...

080093dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d001      	beq.n	80093f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e054      	b.n	800949e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2202      	movs	r2, #2
 80093f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68da      	ldr	r2, [r3, #12]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f042 0201 	orr.w	r2, r2, #1
 800940a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a26      	ldr	r2, [pc, #152]	@ (80094ac <HAL_TIM_Base_Start_IT+0xd0>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d022      	beq.n	800945c <HAL_TIM_Base_Start_IT+0x80>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800941e:	d01d      	beq.n	800945c <HAL_TIM_Base_Start_IT+0x80>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a22      	ldr	r2, [pc, #136]	@ (80094b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d018      	beq.n	800945c <HAL_TIM_Base_Start_IT+0x80>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a21      	ldr	r2, [pc, #132]	@ (80094b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d013      	beq.n	800945c <HAL_TIM_Base_Start_IT+0x80>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a1f      	ldr	r2, [pc, #124]	@ (80094b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d00e      	beq.n	800945c <HAL_TIM_Base_Start_IT+0x80>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a1e      	ldr	r2, [pc, #120]	@ (80094bc <HAL_TIM_Base_Start_IT+0xe0>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d009      	beq.n	800945c <HAL_TIM_Base_Start_IT+0x80>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a1c      	ldr	r2, [pc, #112]	@ (80094c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d004      	beq.n	800945c <HAL_TIM_Base_Start_IT+0x80>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a1b      	ldr	r2, [pc, #108]	@ (80094c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d115      	bne.n	8009488 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	689a      	ldr	r2, [r3, #8]
 8009462:	4b19      	ldr	r3, [pc, #100]	@ (80094c8 <HAL_TIM_Base_Start_IT+0xec>)
 8009464:	4013      	ands	r3, r2
 8009466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b06      	cmp	r3, #6
 800946c:	d015      	beq.n	800949a <HAL_TIM_Base_Start_IT+0xbe>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009474:	d011      	beq.n	800949a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f042 0201 	orr.w	r2, r2, #1
 8009484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009486:	e008      	b.n	800949a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f042 0201 	orr.w	r2, r2, #1
 8009496:	601a      	str	r2, [r3, #0]
 8009498:	e000      	b.n	800949c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800949a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	40010000 	.word	0x40010000
 80094b0:	40000400 	.word	0x40000400
 80094b4:	40000800 	.word	0x40000800
 80094b8:	40000c00 	.word	0x40000c00
 80094bc:	40010400 	.word	0x40010400
 80094c0:	40001800 	.word	0x40001800
 80094c4:	40014000 	.word	0x40014000
 80094c8:	00010007 	.word	0x00010007

080094cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	e049      	b.n	8009572 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d106      	bne.n	80094f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 f841 	bl	800957a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2202      	movs	r2, #2
 80094fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	3304      	adds	r3, #4
 8009508:	4619      	mov	r1, r3
 800950a:	4610      	mov	r0, r2
 800950c:	f000 fc8a 	bl	8009e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3708      	adds	r7, #8
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800957a:	b480      	push	{r7}
 800957c:	b083      	sub	sp, #12
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009582:	bf00      	nop
 8009584:	370c      	adds	r7, #12
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
	...

08009590 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d109      	bne.n	80095b4 <HAL_TIM_PWM_Start+0x24>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	bf14      	ite	ne
 80095ac:	2301      	movne	r3, #1
 80095ae:	2300      	moveq	r3, #0
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	e03c      	b.n	800962e <HAL_TIM_PWM_Start+0x9e>
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	2b04      	cmp	r3, #4
 80095b8:	d109      	bne.n	80095ce <HAL_TIM_PWM_Start+0x3e>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	bf14      	ite	ne
 80095c6:	2301      	movne	r3, #1
 80095c8:	2300      	moveq	r3, #0
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	e02f      	b.n	800962e <HAL_TIM_PWM_Start+0x9e>
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	2b08      	cmp	r3, #8
 80095d2:	d109      	bne.n	80095e8 <HAL_TIM_PWM_Start+0x58>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	2b01      	cmp	r3, #1
 80095de:	bf14      	ite	ne
 80095e0:	2301      	movne	r3, #1
 80095e2:	2300      	moveq	r3, #0
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	e022      	b.n	800962e <HAL_TIM_PWM_Start+0x9e>
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	2b0c      	cmp	r3, #12
 80095ec:	d109      	bne.n	8009602 <HAL_TIM_PWM_Start+0x72>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	bf14      	ite	ne
 80095fa:	2301      	movne	r3, #1
 80095fc:	2300      	moveq	r3, #0
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	e015      	b.n	800962e <HAL_TIM_PWM_Start+0x9e>
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	2b10      	cmp	r3, #16
 8009606:	d109      	bne.n	800961c <HAL_TIM_PWM_Start+0x8c>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800960e:	b2db      	uxtb	r3, r3
 8009610:	2b01      	cmp	r3, #1
 8009612:	bf14      	ite	ne
 8009614:	2301      	movne	r3, #1
 8009616:	2300      	moveq	r3, #0
 8009618:	b2db      	uxtb	r3, r3
 800961a:	e008      	b.n	800962e <HAL_TIM_PWM_Start+0x9e>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009622:	b2db      	uxtb	r3, r3
 8009624:	2b01      	cmp	r3, #1
 8009626:	bf14      	ite	ne
 8009628:	2301      	movne	r3, #1
 800962a:	2300      	moveq	r3, #0
 800962c:	b2db      	uxtb	r3, r3
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	e0a1      	b.n	800977a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d104      	bne.n	8009646 <HAL_TIM_PWM_Start+0xb6>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2202      	movs	r2, #2
 8009640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009644:	e023      	b.n	800968e <HAL_TIM_PWM_Start+0xfe>
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	2b04      	cmp	r3, #4
 800964a:	d104      	bne.n	8009656 <HAL_TIM_PWM_Start+0xc6>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2202      	movs	r2, #2
 8009650:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009654:	e01b      	b.n	800968e <HAL_TIM_PWM_Start+0xfe>
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	2b08      	cmp	r3, #8
 800965a:	d104      	bne.n	8009666 <HAL_TIM_PWM_Start+0xd6>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2202      	movs	r2, #2
 8009660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009664:	e013      	b.n	800968e <HAL_TIM_PWM_Start+0xfe>
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	2b0c      	cmp	r3, #12
 800966a:	d104      	bne.n	8009676 <HAL_TIM_PWM_Start+0xe6>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2202      	movs	r2, #2
 8009670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009674:	e00b      	b.n	800968e <HAL_TIM_PWM_Start+0xfe>
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2b10      	cmp	r3, #16
 800967a:	d104      	bne.n	8009686 <HAL_TIM_PWM_Start+0xf6>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2202      	movs	r2, #2
 8009680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009684:	e003      	b.n	800968e <HAL_TIM_PWM_Start+0xfe>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2202      	movs	r2, #2
 800968a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2201      	movs	r2, #1
 8009694:	6839      	ldr	r1, [r7, #0]
 8009696:	4618      	mov	r0, r3
 8009698:	f000 ffde 	bl	800a658 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a38      	ldr	r2, [pc, #224]	@ (8009784 <HAL_TIM_PWM_Start+0x1f4>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d013      	beq.n	80096ce <HAL_TIM_PWM_Start+0x13e>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a37      	ldr	r2, [pc, #220]	@ (8009788 <HAL_TIM_PWM_Start+0x1f8>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d00e      	beq.n	80096ce <HAL_TIM_PWM_Start+0x13e>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a35      	ldr	r2, [pc, #212]	@ (800978c <HAL_TIM_PWM_Start+0x1fc>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d009      	beq.n	80096ce <HAL_TIM_PWM_Start+0x13e>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a34      	ldr	r2, [pc, #208]	@ (8009790 <HAL_TIM_PWM_Start+0x200>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d004      	beq.n	80096ce <HAL_TIM_PWM_Start+0x13e>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a32      	ldr	r2, [pc, #200]	@ (8009794 <HAL_TIM_PWM_Start+0x204>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d101      	bne.n	80096d2 <HAL_TIM_PWM_Start+0x142>
 80096ce:	2301      	movs	r3, #1
 80096d0:	e000      	b.n	80096d4 <HAL_TIM_PWM_Start+0x144>
 80096d2:	2300      	movs	r3, #0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d007      	beq.n	80096e8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80096e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a25      	ldr	r2, [pc, #148]	@ (8009784 <HAL_TIM_PWM_Start+0x1f4>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d022      	beq.n	8009738 <HAL_TIM_PWM_Start+0x1a8>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096fa:	d01d      	beq.n	8009738 <HAL_TIM_PWM_Start+0x1a8>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a25      	ldr	r2, [pc, #148]	@ (8009798 <HAL_TIM_PWM_Start+0x208>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d018      	beq.n	8009738 <HAL_TIM_PWM_Start+0x1a8>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a24      	ldr	r2, [pc, #144]	@ (800979c <HAL_TIM_PWM_Start+0x20c>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d013      	beq.n	8009738 <HAL_TIM_PWM_Start+0x1a8>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a22      	ldr	r2, [pc, #136]	@ (80097a0 <HAL_TIM_PWM_Start+0x210>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d00e      	beq.n	8009738 <HAL_TIM_PWM_Start+0x1a8>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a1a      	ldr	r2, [pc, #104]	@ (8009788 <HAL_TIM_PWM_Start+0x1f8>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d009      	beq.n	8009738 <HAL_TIM_PWM_Start+0x1a8>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a1e      	ldr	r2, [pc, #120]	@ (80097a4 <HAL_TIM_PWM_Start+0x214>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d004      	beq.n	8009738 <HAL_TIM_PWM_Start+0x1a8>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a16      	ldr	r2, [pc, #88]	@ (800978c <HAL_TIM_PWM_Start+0x1fc>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d115      	bne.n	8009764 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	689a      	ldr	r2, [r3, #8]
 800973e:	4b1a      	ldr	r3, [pc, #104]	@ (80097a8 <HAL_TIM_PWM_Start+0x218>)
 8009740:	4013      	ands	r3, r2
 8009742:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2b06      	cmp	r3, #6
 8009748:	d015      	beq.n	8009776 <HAL_TIM_PWM_Start+0x1e6>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009750:	d011      	beq.n	8009776 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f042 0201 	orr.w	r2, r2, #1
 8009760:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009762:	e008      	b.n	8009776 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f042 0201 	orr.w	r2, r2, #1
 8009772:	601a      	str	r2, [r3, #0]
 8009774:	e000      	b.n	8009778 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009776:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	40010000 	.word	0x40010000
 8009788:	40010400 	.word	0x40010400
 800978c:	40014000 	.word	0x40014000
 8009790:	40014400 	.word	0x40014400
 8009794:	40014800 	.word	0x40014800
 8009798:	40000400 	.word	0x40000400
 800979c:	40000800 	.word	0x40000800
 80097a0:	40000c00 	.word	0x40000c00
 80097a4:	40001800 	.word	0x40001800
 80097a8:	00010007 	.word	0x00010007

080097ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	f003 0302 	and.w	r3, r3, #2
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d020      	beq.n	8009810 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f003 0302 	and.w	r3, r3, #2
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d01b      	beq.n	8009810 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f06f 0202 	mvn.w	r2, #2
 80097e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2201      	movs	r2, #1
 80097e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	699b      	ldr	r3, [r3, #24]
 80097ee:	f003 0303 	and.w	r3, r3, #3
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d003      	beq.n	80097fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 faf6 	bl	8009de8 <HAL_TIM_IC_CaptureCallback>
 80097fc:	e005      	b.n	800980a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 fae8 	bl	8009dd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 faf9 	bl	8009dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	f003 0304 	and.w	r3, r3, #4
 8009816:	2b00      	cmp	r3, #0
 8009818:	d020      	beq.n	800985c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f003 0304 	and.w	r3, r3, #4
 8009820:	2b00      	cmp	r3, #0
 8009822:	d01b      	beq.n	800985c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f06f 0204 	mvn.w	r2, #4
 800982c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2202      	movs	r2, #2
 8009832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	699b      	ldr	r3, [r3, #24]
 800983a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800983e:	2b00      	cmp	r3, #0
 8009840:	d003      	beq.n	800984a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 fad0 	bl	8009de8 <HAL_TIM_IC_CaptureCallback>
 8009848:	e005      	b.n	8009856 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fac2 	bl	8009dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 fad3 	bl	8009dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	f003 0308 	and.w	r3, r3, #8
 8009862:	2b00      	cmp	r3, #0
 8009864:	d020      	beq.n	80098a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f003 0308 	and.w	r3, r3, #8
 800986c:	2b00      	cmp	r3, #0
 800986e:	d01b      	beq.n	80098a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f06f 0208 	mvn.w	r2, #8
 8009878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2204      	movs	r2, #4
 800987e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	69db      	ldr	r3, [r3, #28]
 8009886:	f003 0303 	and.w	r3, r3, #3
 800988a:	2b00      	cmp	r3, #0
 800988c:	d003      	beq.n	8009896 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 faaa 	bl	8009de8 <HAL_TIM_IC_CaptureCallback>
 8009894:	e005      	b.n	80098a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 fa9c 	bl	8009dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 faad 	bl	8009dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	f003 0310 	and.w	r3, r3, #16
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d020      	beq.n	80098f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f003 0310 	and.w	r3, r3, #16
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d01b      	beq.n	80098f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f06f 0210 	mvn.w	r2, #16
 80098c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2208      	movs	r2, #8
 80098ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	69db      	ldr	r3, [r3, #28]
 80098d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d003      	beq.n	80098e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fa84 	bl	8009de8 <HAL_TIM_IC_CaptureCallback>
 80098e0:	e005      	b.n	80098ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fa76 	bl	8009dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 fa87 	bl	8009dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	f003 0301 	and.w	r3, r3, #1
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00c      	beq.n	8009918 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f003 0301 	and.w	r3, r3, #1
 8009904:	2b00      	cmp	r3, #0
 8009906:	d007      	beq.n	8009918 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f06f 0201 	mvn.w	r2, #1
 8009910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f7f8 f95c 	bl	8001bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800991e:	2b00      	cmp	r3, #0
 8009920:	d104      	bne.n	800992c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00c      	beq.n	8009946 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009932:	2b00      	cmp	r3, #0
 8009934:	d007      	beq.n	8009946 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800993e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 ffc5 	bl	800a8d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00c      	beq.n	800996a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009956:	2b00      	cmp	r3, #0
 8009958:	d007      	beq.n	800996a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 ffbd 	bl	800a8e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00c      	beq.n	800998e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800997a:	2b00      	cmp	r3, #0
 800997c:	d007      	beq.n	800998e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fa41 	bl	8009e10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	f003 0320 	and.w	r3, r3, #32
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00c      	beq.n	80099b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f003 0320 	and.w	r3, r3, #32
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d007      	beq.n	80099b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f06f 0220 	mvn.w	r2, #32
 80099aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 ff85 	bl	800a8bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099b2:	bf00      	nop
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
	...

080099bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b086      	sub	sp, #24
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099c8:	2300      	movs	r3, #0
 80099ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d101      	bne.n	80099da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80099d6:	2302      	movs	r3, #2
 80099d8:	e0ff      	b.n	8009bda <HAL_TIM_PWM_ConfigChannel+0x21e>
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2b14      	cmp	r3, #20
 80099e6:	f200 80f0 	bhi.w	8009bca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80099ea:	a201      	add	r2, pc, #4	@ (adr r2, 80099f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80099ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f0:	08009a45 	.word	0x08009a45
 80099f4:	08009bcb 	.word	0x08009bcb
 80099f8:	08009bcb 	.word	0x08009bcb
 80099fc:	08009bcb 	.word	0x08009bcb
 8009a00:	08009a85 	.word	0x08009a85
 8009a04:	08009bcb 	.word	0x08009bcb
 8009a08:	08009bcb 	.word	0x08009bcb
 8009a0c:	08009bcb 	.word	0x08009bcb
 8009a10:	08009ac7 	.word	0x08009ac7
 8009a14:	08009bcb 	.word	0x08009bcb
 8009a18:	08009bcb 	.word	0x08009bcb
 8009a1c:	08009bcb 	.word	0x08009bcb
 8009a20:	08009b07 	.word	0x08009b07
 8009a24:	08009bcb 	.word	0x08009bcb
 8009a28:	08009bcb 	.word	0x08009bcb
 8009a2c:	08009bcb 	.word	0x08009bcb
 8009a30:	08009b49 	.word	0x08009b49
 8009a34:	08009bcb 	.word	0x08009bcb
 8009a38:	08009bcb 	.word	0x08009bcb
 8009a3c:	08009bcb 	.word	0x08009bcb
 8009a40:	08009b89 	.word	0x08009b89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68b9      	ldr	r1, [r7, #8]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 fa90 	bl	8009f70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	699a      	ldr	r2, [r3, #24]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f042 0208 	orr.w	r2, r2, #8
 8009a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	699a      	ldr	r2, [r3, #24]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f022 0204 	bic.w	r2, r2, #4
 8009a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	6999      	ldr	r1, [r3, #24]
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	691a      	ldr	r2, [r3, #16]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	430a      	orrs	r2, r1
 8009a80:	619a      	str	r2, [r3, #24]
      break;
 8009a82:	e0a5      	b.n	8009bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	68b9      	ldr	r1, [r7, #8]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f000 fb00 	bl	800a090 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	699a      	ldr	r2, [r3, #24]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	699a      	ldr	r2, [r3, #24]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	6999      	ldr	r1, [r3, #24]
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	021a      	lsls	r2, r3, #8
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	430a      	orrs	r2, r1
 8009ac2:	619a      	str	r2, [r3, #24]
      break;
 8009ac4:	e084      	b.n	8009bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68b9      	ldr	r1, [r7, #8]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f000 fb69 	bl	800a1a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	69da      	ldr	r2, [r3, #28]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f042 0208 	orr.w	r2, r2, #8
 8009ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	69da      	ldr	r2, [r3, #28]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f022 0204 	bic.w	r2, r2, #4
 8009af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	69d9      	ldr	r1, [r3, #28]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	691a      	ldr	r2, [r3, #16]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	430a      	orrs	r2, r1
 8009b02:	61da      	str	r2, [r3, #28]
      break;
 8009b04:	e064      	b.n	8009bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68b9      	ldr	r1, [r7, #8]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f000 fbd1 	bl	800a2b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	69da      	ldr	r2, [r3, #28]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	69da      	ldr	r2, [r3, #28]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	69d9      	ldr	r1, [r3, #28]
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	021a      	lsls	r2, r3, #8
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	430a      	orrs	r2, r1
 8009b44:	61da      	str	r2, [r3, #28]
      break;
 8009b46:	e043      	b.n	8009bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	68b9      	ldr	r1, [r7, #8]
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f000 fc1a 	bl	800a388 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f042 0208 	orr.w	r2, r2, #8
 8009b62:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f022 0204 	bic.w	r2, r2, #4
 8009b72:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	691a      	ldr	r2, [r3, #16]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	430a      	orrs	r2, r1
 8009b84:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009b86:	e023      	b.n	8009bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	68b9      	ldr	r1, [r7, #8]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f000 fc5e 	bl	800a450 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ba2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009bb2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	021a      	lsls	r2, r3, #8
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	430a      	orrs	r2, r1
 8009bc6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009bc8:	e002      	b.n	8009bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8009bce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3718      	adds	r7, #24
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop

08009be4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d101      	bne.n	8009c00 <HAL_TIM_ConfigClockSource+0x1c>
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	e0dc      	b.n	8009dba <HAL_TIM_ConfigClockSource+0x1d6>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2201      	movs	r2, #1
 8009c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	4b6a      	ldr	r3, [pc, #424]	@ (8009dc4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a64      	ldr	r2, [pc, #400]	@ (8009dc8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	f000 80a9 	beq.w	8009d8e <HAL_TIM_ConfigClockSource+0x1aa>
 8009c3c:	4a62      	ldr	r2, [pc, #392]	@ (8009dc8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	f200 80ae 	bhi.w	8009da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c44:	4a61      	ldr	r2, [pc, #388]	@ (8009dcc <HAL_TIM_ConfigClockSource+0x1e8>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	f000 80a1 	beq.w	8009d8e <HAL_TIM_ConfigClockSource+0x1aa>
 8009c4c:	4a5f      	ldr	r2, [pc, #380]	@ (8009dcc <HAL_TIM_ConfigClockSource+0x1e8>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	f200 80a6 	bhi.w	8009da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c54:	4a5e      	ldr	r2, [pc, #376]	@ (8009dd0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	f000 8099 	beq.w	8009d8e <HAL_TIM_ConfigClockSource+0x1aa>
 8009c5c:	4a5c      	ldr	r2, [pc, #368]	@ (8009dd0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	f200 809e 	bhi.w	8009da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c64:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009c68:	f000 8091 	beq.w	8009d8e <HAL_TIM_ConfigClockSource+0x1aa>
 8009c6c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009c70:	f200 8096 	bhi.w	8009da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c78:	f000 8089 	beq.w	8009d8e <HAL_TIM_ConfigClockSource+0x1aa>
 8009c7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c80:	f200 808e 	bhi.w	8009da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c88:	d03e      	beq.n	8009d08 <HAL_TIM_ConfigClockSource+0x124>
 8009c8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c8e:	f200 8087 	bhi.w	8009da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c96:	f000 8086 	beq.w	8009da6 <HAL_TIM_ConfigClockSource+0x1c2>
 8009c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c9e:	d87f      	bhi.n	8009da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ca0:	2b70      	cmp	r3, #112	@ 0x70
 8009ca2:	d01a      	beq.n	8009cda <HAL_TIM_ConfigClockSource+0xf6>
 8009ca4:	2b70      	cmp	r3, #112	@ 0x70
 8009ca6:	d87b      	bhi.n	8009da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ca8:	2b60      	cmp	r3, #96	@ 0x60
 8009caa:	d050      	beq.n	8009d4e <HAL_TIM_ConfigClockSource+0x16a>
 8009cac:	2b60      	cmp	r3, #96	@ 0x60
 8009cae:	d877      	bhi.n	8009da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cb0:	2b50      	cmp	r3, #80	@ 0x50
 8009cb2:	d03c      	beq.n	8009d2e <HAL_TIM_ConfigClockSource+0x14a>
 8009cb4:	2b50      	cmp	r3, #80	@ 0x50
 8009cb6:	d873      	bhi.n	8009da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cb8:	2b40      	cmp	r3, #64	@ 0x40
 8009cba:	d058      	beq.n	8009d6e <HAL_TIM_ConfigClockSource+0x18a>
 8009cbc:	2b40      	cmp	r3, #64	@ 0x40
 8009cbe:	d86f      	bhi.n	8009da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cc0:	2b30      	cmp	r3, #48	@ 0x30
 8009cc2:	d064      	beq.n	8009d8e <HAL_TIM_ConfigClockSource+0x1aa>
 8009cc4:	2b30      	cmp	r3, #48	@ 0x30
 8009cc6:	d86b      	bhi.n	8009da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cc8:	2b20      	cmp	r3, #32
 8009cca:	d060      	beq.n	8009d8e <HAL_TIM_ConfigClockSource+0x1aa>
 8009ccc:	2b20      	cmp	r3, #32
 8009cce:	d867      	bhi.n	8009da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d05c      	beq.n	8009d8e <HAL_TIM_ConfigClockSource+0x1aa>
 8009cd4:	2b10      	cmp	r3, #16
 8009cd6:	d05a      	beq.n	8009d8e <HAL_TIM_ConfigClockSource+0x1aa>
 8009cd8:	e062      	b.n	8009da0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009cea:	f000 fc95 	bl	800a618 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009cfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	609a      	str	r2, [r3, #8]
      break;
 8009d06:	e04f      	b.n	8009da8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009d18:	f000 fc7e 	bl	800a618 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	689a      	ldr	r2, [r3, #8]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d2a:	609a      	str	r2, [r3, #8]
      break;
 8009d2c:	e03c      	b.n	8009da8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	f000 fbee 	bl	800a51c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2150      	movs	r1, #80	@ 0x50
 8009d46:	4618      	mov	r0, r3
 8009d48:	f000 fc48 	bl	800a5dc <TIM_ITRx_SetConfig>
      break;
 8009d4c:	e02c      	b.n	8009da8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	f000 fc0d 	bl	800a57a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2160      	movs	r1, #96	@ 0x60
 8009d66:	4618      	mov	r0, r3
 8009d68:	f000 fc38 	bl	800a5dc <TIM_ITRx_SetConfig>
      break;
 8009d6c:	e01c      	b.n	8009da8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	f000 fbce 	bl	800a51c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2140      	movs	r1, #64	@ 0x40
 8009d86:	4618      	mov	r0, r3
 8009d88:	f000 fc28 	bl	800a5dc <TIM_ITRx_SetConfig>
      break;
 8009d8c:	e00c      	b.n	8009da8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4619      	mov	r1, r3
 8009d98:	4610      	mov	r0, r2
 8009d9a:	f000 fc1f 	bl	800a5dc <TIM_ITRx_SetConfig>
      break;
 8009d9e:	e003      	b.n	8009da8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	73fb      	strb	r3, [r7, #15]
      break;
 8009da4:	e000      	b.n	8009da8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009da6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	ffceff88 	.word	0xffceff88
 8009dc8:	00100040 	.word	0x00100040
 8009dcc:	00100030 	.word	0x00100030
 8009dd0:	00100020 	.word	0x00100020

08009dd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ddc:	bf00      	nop
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009df0:	bf00      	nop
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e04:	bf00      	nop
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b083      	sub	sp, #12
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e18:	bf00      	nop
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4a46      	ldr	r2, [pc, #280]	@ (8009f50 <TIM_Base_SetConfig+0x12c>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d013      	beq.n	8009e64 <TIM_Base_SetConfig+0x40>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e42:	d00f      	beq.n	8009e64 <TIM_Base_SetConfig+0x40>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4a43      	ldr	r2, [pc, #268]	@ (8009f54 <TIM_Base_SetConfig+0x130>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d00b      	beq.n	8009e64 <TIM_Base_SetConfig+0x40>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4a42      	ldr	r2, [pc, #264]	@ (8009f58 <TIM_Base_SetConfig+0x134>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d007      	beq.n	8009e64 <TIM_Base_SetConfig+0x40>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4a41      	ldr	r2, [pc, #260]	@ (8009f5c <TIM_Base_SetConfig+0x138>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d003      	beq.n	8009e64 <TIM_Base_SetConfig+0x40>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a40      	ldr	r2, [pc, #256]	@ (8009f60 <TIM_Base_SetConfig+0x13c>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d108      	bne.n	8009e76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	4a35      	ldr	r2, [pc, #212]	@ (8009f50 <TIM_Base_SetConfig+0x12c>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d01f      	beq.n	8009ebe <TIM_Base_SetConfig+0x9a>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e84:	d01b      	beq.n	8009ebe <TIM_Base_SetConfig+0x9a>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	4a32      	ldr	r2, [pc, #200]	@ (8009f54 <TIM_Base_SetConfig+0x130>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d017      	beq.n	8009ebe <TIM_Base_SetConfig+0x9a>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a31      	ldr	r2, [pc, #196]	@ (8009f58 <TIM_Base_SetConfig+0x134>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d013      	beq.n	8009ebe <TIM_Base_SetConfig+0x9a>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4a30      	ldr	r2, [pc, #192]	@ (8009f5c <TIM_Base_SetConfig+0x138>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d00f      	beq.n	8009ebe <TIM_Base_SetConfig+0x9a>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a2f      	ldr	r2, [pc, #188]	@ (8009f60 <TIM_Base_SetConfig+0x13c>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d00b      	beq.n	8009ebe <TIM_Base_SetConfig+0x9a>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a2e      	ldr	r2, [pc, #184]	@ (8009f64 <TIM_Base_SetConfig+0x140>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d007      	beq.n	8009ebe <TIM_Base_SetConfig+0x9a>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a2d      	ldr	r2, [pc, #180]	@ (8009f68 <TIM_Base_SetConfig+0x144>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d003      	beq.n	8009ebe <TIM_Base_SetConfig+0x9a>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	4a2c      	ldr	r2, [pc, #176]	@ (8009f6c <TIM_Base_SetConfig+0x148>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d108      	bne.n	8009ed0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	68fa      	ldr	r2, [r7, #12]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	695b      	ldr	r3, [r3, #20]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	68fa      	ldr	r2, [r7, #12]
 8009ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	689a      	ldr	r2, [r3, #8]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a16      	ldr	r2, [pc, #88]	@ (8009f50 <TIM_Base_SetConfig+0x12c>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d00f      	beq.n	8009f1c <TIM_Base_SetConfig+0xf8>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4a18      	ldr	r2, [pc, #96]	@ (8009f60 <TIM_Base_SetConfig+0x13c>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d00b      	beq.n	8009f1c <TIM_Base_SetConfig+0xf8>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4a17      	ldr	r2, [pc, #92]	@ (8009f64 <TIM_Base_SetConfig+0x140>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d007      	beq.n	8009f1c <TIM_Base_SetConfig+0xf8>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a16      	ldr	r2, [pc, #88]	@ (8009f68 <TIM_Base_SetConfig+0x144>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d003      	beq.n	8009f1c <TIM_Base_SetConfig+0xf8>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a15      	ldr	r2, [pc, #84]	@ (8009f6c <TIM_Base_SetConfig+0x148>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d103      	bne.n	8009f24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	691a      	ldr	r2, [r3, #16]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	691b      	ldr	r3, [r3, #16]
 8009f2e:	f003 0301 	and.w	r3, r3, #1
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d105      	bne.n	8009f42 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	f023 0201 	bic.w	r2, r3, #1
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	611a      	str	r2, [r3, #16]
  }
}
 8009f42:	bf00      	nop
 8009f44:	3714      	adds	r7, #20
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	40010000 	.word	0x40010000
 8009f54:	40000400 	.word	0x40000400
 8009f58:	40000800 	.word	0x40000800
 8009f5c:	40000c00 	.word	0x40000c00
 8009f60:	40010400 	.word	0x40010400
 8009f64:	40014000 	.word	0x40014000
 8009f68:	40014400 	.word	0x40014400
 8009f6c:	40014800 	.word	0x40014800

08009f70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b087      	sub	sp, #28
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a1b      	ldr	r3, [r3, #32]
 8009f7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a1b      	ldr	r3, [r3, #32]
 8009f84:	f023 0201 	bic.w	r2, r3, #1
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	699b      	ldr	r3, [r3, #24]
 8009f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	4b37      	ldr	r3, [pc, #220]	@ (800a078 <TIM_OC1_SetConfig+0x108>)
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f023 0303 	bic.w	r3, r3, #3
 8009fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	f023 0302 	bic.w	r3, r3, #2
 8009fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a2d      	ldr	r2, [pc, #180]	@ (800a07c <TIM_OC1_SetConfig+0x10c>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d00f      	beq.n	8009fec <TIM_OC1_SetConfig+0x7c>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a2c      	ldr	r2, [pc, #176]	@ (800a080 <TIM_OC1_SetConfig+0x110>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d00b      	beq.n	8009fec <TIM_OC1_SetConfig+0x7c>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a2b      	ldr	r2, [pc, #172]	@ (800a084 <TIM_OC1_SetConfig+0x114>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d007      	beq.n	8009fec <TIM_OC1_SetConfig+0x7c>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a2a      	ldr	r2, [pc, #168]	@ (800a088 <TIM_OC1_SetConfig+0x118>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d003      	beq.n	8009fec <TIM_OC1_SetConfig+0x7c>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a29      	ldr	r2, [pc, #164]	@ (800a08c <TIM_OC1_SetConfig+0x11c>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d10c      	bne.n	800a006 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	f023 0308 	bic.w	r3, r3, #8
 8009ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	697a      	ldr	r2, [r7, #20]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	f023 0304 	bic.w	r3, r3, #4
 800a004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	4a1c      	ldr	r2, [pc, #112]	@ (800a07c <TIM_OC1_SetConfig+0x10c>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d00f      	beq.n	800a02e <TIM_OC1_SetConfig+0xbe>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4a1b      	ldr	r2, [pc, #108]	@ (800a080 <TIM_OC1_SetConfig+0x110>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d00b      	beq.n	800a02e <TIM_OC1_SetConfig+0xbe>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	4a1a      	ldr	r2, [pc, #104]	@ (800a084 <TIM_OC1_SetConfig+0x114>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d007      	beq.n	800a02e <TIM_OC1_SetConfig+0xbe>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a19      	ldr	r2, [pc, #100]	@ (800a088 <TIM_OC1_SetConfig+0x118>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d003      	beq.n	800a02e <TIM_OC1_SetConfig+0xbe>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a18      	ldr	r2, [pc, #96]	@ (800a08c <TIM_OC1_SetConfig+0x11c>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d111      	bne.n	800a052 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a03c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	695b      	ldr	r3, [r3, #20]
 800a042:	693a      	ldr	r2, [r7, #16]
 800a044:	4313      	orrs	r3, r2
 800a046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	699b      	ldr	r3, [r3, #24]
 800a04c:	693a      	ldr	r2, [r7, #16]
 800a04e:	4313      	orrs	r3, r2
 800a050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	693a      	ldr	r2, [r7, #16]
 800a056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	685a      	ldr	r2, [r3, #4]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	697a      	ldr	r2, [r7, #20]
 800a06a:	621a      	str	r2, [r3, #32]
}
 800a06c:	bf00      	nop
 800a06e:	371c      	adds	r7, #28
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr
 800a078:	fffeff8f 	.word	0xfffeff8f
 800a07c:	40010000 	.word	0x40010000
 800a080:	40010400 	.word	0x40010400
 800a084:	40014000 	.word	0x40014000
 800a088:	40014400 	.word	0x40014400
 800a08c:	40014800 	.word	0x40014800

0800a090 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a090:	b480      	push	{r7}
 800a092:	b087      	sub	sp, #28
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a1b      	ldr	r3, [r3, #32]
 800a09e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6a1b      	ldr	r3, [r3, #32]
 800a0a4:	f023 0210 	bic.w	r2, r3, #16
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	699b      	ldr	r3, [r3, #24]
 800a0b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	4b34      	ldr	r3, [pc, #208]	@ (800a18c <TIM_OC2_SetConfig+0xfc>)
 800a0bc:	4013      	ands	r3, r2
 800a0be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a0c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	021b      	lsls	r3, r3, #8
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	f023 0320 	bic.w	r3, r3, #32
 800a0da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	011b      	lsls	r3, r3, #4
 800a0e2:	697a      	ldr	r2, [r7, #20]
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a29      	ldr	r2, [pc, #164]	@ (800a190 <TIM_OC2_SetConfig+0x100>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d003      	beq.n	800a0f8 <TIM_OC2_SetConfig+0x68>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a28      	ldr	r2, [pc, #160]	@ (800a194 <TIM_OC2_SetConfig+0x104>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d10d      	bne.n	800a114 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	011b      	lsls	r3, r3, #4
 800a106:	697a      	ldr	r2, [r7, #20]
 800a108:	4313      	orrs	r3, r2
 800a10a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a112:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a1e      	ldr	r2, [pc, #120]	@ (800a190 <TIM_OC2_SetConfig+0x100>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d00f      	beq.n	800a13c <TIM_OC2_SetConfig+0xac>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4a1d      	ldr	r2, [pc, #116]	@ (800a194 <TIM_OC2_SetConfig+0x104>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d00b      	beq.n	800a13c <TIM_OC2_SetConfig+0xac>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4a1c      	ldr	r2, [pc, #112]	@ (800a198 <TIM_OC2_SetConfig+0x108>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d007      	beq.n	800a13c <TIM_OC2_SetConfig+0xac>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a1b      	ldr	r2, [pc, #108]	@ (800a19c <TIM_OC2_SetConfig+0x10c>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d003      	beq.n	800a13c <TIM_OC2_SetConfig+0xac>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a1a      	ldr	r2, [pc, #104]	@ (800a1a0 <TIM_OC2_SetConfig+0x110>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d113      	bne.n	800a164 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a142:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a14a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	695b      	ldr	r3, [r3, #20]
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	693a      	ldr	r2, [r7, #16]
 800a154:	4313      	orrs	r3, r2
 800a156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	699b      	ldr	r3, [r3, #24]
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	693a      	ldr	r2, [r7, #16]
 800a160:	4313      	orrs	r3, r2
 800a162:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	693a      	ldr	r2, [r7, #16]
 800a168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	685a      	ldr	r2, [r3, #4]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	697a      	ldr	r2, [r7, #20]
 800a17c:	621a      	str	r2, [r3, #32]
}
 800a17e:	bf00      	nop
 800a180:	371c      	adds	r7, #28
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	feff8fff 	.word	0xfeff8fff
 800a190:	40010000 	.word	0x40010000
 800a194:	40010400 	.word	0x40010400
 800a198:	40014000 	.word	0x40014000
 800a19c:	40014400 	.word	0x40014400
 800a1a0:	40014800 	.word	0x40014800

0800a1a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b087      	sub	sp, #28
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6a1b      	ldr	r3, [r3, #32]
 800a1b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	69db      	ldr	r3, [r3, #28]
 800a1ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	4b33      	ldr	r3, [pc, #204]	@ (800a29c <TIM_OC3_SetConfig+0xf8>)
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f023 0303 	bic.w	r3, r3, #3
 800a1da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a1ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	021b      	lsls	r3, r3, #8
 800a1f4:	697a      	ldr	r2, [r7, #20]
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4a28      	ldr	r2, [pc, #160]	@ (800a2a0 <TIM_OC3_SetConfig+0xfc>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d003      	beq.n	800a20a <TIM_OC3_SetConfig+0x66>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4a27      	ldr	r2, [pc, #156]	@ (800a2a4 <TIM_OC3_SetConfig+0x100>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d10d      	bne.n	800a226 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a210:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	021b      	lsls	r3, r3, #8
 800a218:	697a      	ldr	r2, [r7, #20]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a1d      	ldr	r2, [pc, #116]	@ (800a2a0 <TIM_OC3_SetConfig+0xfc>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d00f      	beq.n	800a24e <TIM_OC3_SetConfig+0xaa>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a1c      	ldr	r2, [pc, #112]	@ (800a2a4 <TIM_OC3_SetConfig+0x100>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d00b      	beq.n	800a24e <TIM_OC3_SetConfig+0xaa>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a1b      	ldr	r2, [pc, #108]	@ (800a2a8 <TIM_OC3_SetConfig+0x104>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d007      	beq.n	800a24e <TIM_OC3_SetConfig+0xaa>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a1a      	ldr	r2, [pc, #104]	@ (800a2ac <TIM_OC3_SetConfig+0x108>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d003      	beq.n	800a24e <TIM_OC3_SetConfig+0xaa>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4a19      	ldr	r2, [pc, #100]	@ (800a2b0 <TIM_OC3_SetConfig+0x10c>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d113      	bne.n	800a276 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a25c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	011b      	lsls	r3, r3, #4
 800a264:	693a      	ldr	r2, [r7, #16]
 800a266:	4313      	orrs	r3, r2
 800a268:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	699b      	ldr	r3, [r3, #24]
 800a26e:	011b      	lsls	r3, r3, #4
 800a270:	693a      	ldr	r2, [r7, #16]
 800a272:	4313      	orrs	r3, r2
 800a274:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	685a      	ldr	r2, [r3, #4]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	697a      	ldr	r2, [r7, #20]
 800a28e:	621a      	str	r2, [r3, #32]
}
 800a290:	bf00      	nop
 800a292:	371c      	adds	r7, #28
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr
 800a29c:	fffeff8f 	.word	0xfffeff8f
 800a2a0:	40010000 	.word	0x40010000
 800a2a4:	40010400 	.word	0x40010400
 800a2a8:	40014000 	.word	0x40014000
 800a2ac:	40014400 	.word	0x40014400
 800a2b0:	40014800 	.word	0x40014800

0800a2b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b087      	sub	sp, #28
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a1b      	ldr	r3, [r3, #32]
 800a2c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6a1b      	ldr	r3, [r3, #32]
 800a2c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	69db      	ldr	r3, [r3, #28]
 800a2da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	4b24      	ldr	r3, [pc, #144]	@ (800a370 <TIM_OC4_SetConfig+0xbc>)
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a2ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	021b      	lsls	r3, r3, #8
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a2fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	031b      	lsls	r3, r3, #12
 800a306:	693a      	ldr	r2, [r7, #16]
 800a308:	4313      	orrs	r3, r2
 800a30a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a19      	ldr	r2, [pc, #100]	@ (800a374 <TIM_OC4_SetConfig+0xc0>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d00f      	beq.n	800a334 <TIM_OC4_SetConfig+0x80>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a18      	ldr	r2, [pc, #96]	@ (800a378 <TIM_OC4_SetConfig+0xc4>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d00b      	beq.n	800a334 <TIM_OC4_SetConfig+0x80>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4a17      	ldr	r2, [pc, #92]	@ (800a37c <TIM_OC4_SetConfig+0xc8>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d007      	beq.n	800a334 <TIM_OC4_SetConfig+0x80>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4a16      	ldr	r2, [pc, #88]	@ (800a380 <TIM_OC4_SetConfig+0xcc>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d003      	beq.n	800a334 <TIM_OC4_SetConfig+0x80>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a15      	ldr	r2, [pc, #84]	@ (800a384 <TIM_OC4_SetConfig+0xd0>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d109      	bne.n	800a348 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a33a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	695b      	ldr	r3, [r3, #20]
 800a340:	019b      	lsls	r3, r3, #6
 800a342:	697a      	ldr	r2, [r7, #20]
 800a344:	4313      	orrs	r3, r2
 800a346:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	697a      	ldr	r2, [r7, #20]
 800a34c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	685a      	ldr	r2, [r3, #4]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	693a      	ldr	r2, [r7, #16]
 800a360:	621a      	str	r2, [r3, #32]
}
 800a362:	bf00      	nop
 800a364:	371c      	adds	r7, #28
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	feff8fff 	.word	0xfeff8fff
 800a374:	40010000 	.word	0x40010000
 800a378:	40010400 	.word	0x40010400
 800a37c:	40014000 	.word	0x40014000
 800a380:	40014400 	.word	0x40014400
 800a384:	40014800 	.word	0x40014800

0800a388 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a388:	b480      	push	{r7}
 800a38a:	b087      	sub	sp, #28
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a1b      	ldr	r3, [r3, #32]
 800a396:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6a1b      	ldr	r3, [r3, #32]
 800a39c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	4b21      	ldr	r3, [pc, #132]	@ (800a438 <TIM_OC5_SetConfig+0xb0>)
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68fa      	ldr	r2, [r7, #12]
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a3c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	041b      	lsls	r3, r3, #16
 800a3d0:	693a      	ldr	r2, [r7, #16]
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4a18      	ldr	r2, [pc, #96]	@ (800a43c <TIM_OC5_SetConfig+0xb4>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d00f      	beq.n	800a3fe <TIM_OC5_SetConfig+0x76>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4a17      	ldr	r2, [pc, #92]	@ (800a440 <TIM_OC5_SetConfig+0xb8>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d00b      	beq.n	800a3fe <TIM_OC5_SetConfig+0x76>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a16      	ldr	r2, [pc, #88]	@ (800a444 <TIM_OC5_SetConfig+0xbc>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d007      	beq.n	800a3fe <TIM_OC5_SetConfig+0x76>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a15      	ldr	r2, [pc, #84]	@ (800a448 <TIM_OC5_SetConfig+0xc0>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d003      	beq.n	800a3fe <TIM_OC5_SetConfig+0x76>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a14      	ldr	r2, [pc, #80]	@ (800a44c <TIM_OC5_SetConfig+0xc4>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d109      	bne.n	800a412 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a404:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	021b      	lsls	r3, r3, #8
 800a40c:	697a      	ldr	r2, [r7, #20]
 800a40e:	4313      	orrs	r3, r2
 800a410:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	697a      	ldr	r2, [r7, #20]
 800a416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	685a      	ldr	r2, [r3, #4]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	693a      	ldr	r2, [r7, #16]
 800a42a:	621a      	str	r2, [r3, #32]
}
 800a42c:	bf00      	nop
 800a42e:	371c      	adds	r7, #28
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr
 800a438:	fffeff8f 	.word	0xfffeff8f
 800a43c:	40010000 	.word	0x40010000
 800a440:	40010400 	.word	0x40010400
 800a444:	40014000 	.word	0x40014000
 800a448:	40014400 	.word	0x40014400
 800a44c:	40014800 	.word	0x40014800

0800a450 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a450:	b480      	push	{r7}
 800a452:	b087      	sub	sp, #28
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a1b      	ldr	r3, [r3, #32]
 800a45e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a1b      	ldr	r3, [r3, #32]
 800a464:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	4b22      	ldr	r3, [pc, #136]	@ (800a504 <TIM_OC6_SetConfig+0xb4>)
 800a47c:	4013      	ands	r3, r2
 800a47e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	021b      	lsls	r3, r3, #8
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	4313      	orrs	r3, r2
 800a48a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a492:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	051b      	lsls	r3, r3, #20
 800a49a:	693a      	ldr	r2, [r7, #16]
 800a49c:	4313      	orrs	r3, r2
 800a49e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4a19      	ldr	r2, [pc, #100]	@ (800a508 <TIM_OC6_SetConfig+0xb8>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d00f      	beq.n	800a4c8 <TIM_OC6_SetConfig+0x78>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a18      	ldr	r2, [pc, #96]	@ (800a50c <TIM_OC6_SetConfig+0xbc>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d00b      	beq.n	800a4c8 <TIM_OC6_SetConfig+0x78>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a17      	ldr	r2, [pc, #92]	@ (800a510 <TIM_OC6_SetConfig+0xc0>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d007      	beq.n	800a4c8 <TIM_OC6_SetConfig+0x78>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a16      	ldr	r2, [pc, #88]	@ (800a514 <TIM_OC6_SetConfig+0xc4>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d003      	beq.n	800a4c8 <TIM_OC6_SetConfig+0x78>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a15      	ldr	r2, [pc, #84]	@ (800a518 <TIM_OC6_SetConfig+0xc8>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d109      	bne.n	800a4dc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a4ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	695b      	ldr	r3, [r3, #20]
 800a4d4:	029b      	lsls	r3, r3, #10
 800a4d6:	697a      	ldr	r2, [r7, #20]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	697a      	ldr	r2, [r7, #20]
 800a4e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	685a      	ldr	r2, [r3, #4]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	693a      	ldr	r2, [r7, #16]
 800a4f4:	621a      	str	r2, [r3, #32]
}
 800a4f6:	bf00      	nop
 800a4f8:	371c      	adds	r7, #28
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	feff8fff 	.word	0xfeff8fff
 800a508:	40010000 	.word	0x40010000
 800a50c:	40010400 	.word	0x40010400
 800a510:	40014000 	.word	0x40014000
 800a514:	40014400 	.word	0x40014400
 800a518:	40014800 	.word	0x40014800

0800a51c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b087      	sub	sp, #28
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6a1b      	ldr	r3, [r3, #32]
 800a52c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	6a1b      	ldr	r3, [r3, #32]
 800a532:	f023 0201 	bic.w	r2, r3, #1
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	699b      	ldr	r3, [r3, #24]
 800a53e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	011b      	lsls	r3, r3, #4
 800a54c:	693a      	ldr	r2, [r7, #16]
 800a54e:	4313      	orrs	r3, r2
 800a550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	f023 030a 	bic.w	r3, r3, #10
 800a558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a55a:	697a      	ldr	r2, [r7, #20]
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	4313      	orrs	r3, r2
 800a560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	693a      	ldr	r2, [r7, #16]
 800a566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	697a      	ldr	r2, [r7, #20]
 800a56c:	621a      	str	r2, [r3, #32]
}
 800a56e:	bf00      	nop
 800a570:	371c      	adds	r7, #28
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr

0800a57a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a57a:	b480      	push	{r7}
 800a57c:	b087      	sub	sp, #28
 800a57e:	af00      	add	r7, sp, #0
 800a580:	60f8      	str	r0, [r7, #12]
 800a582:	60b9      	str	r1, [r7, #8]
 800a584:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	6a1b      	ldr	r3, [r3, #32]
 800a58a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6a1b      	ldr	r3, [r3, #32]
 800a590:	f023 0210 	bic.w	r2, r3, #16
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	699b      	ldr	r3, [r3, #24]
 800a59c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a5a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	031b      	lsls	r3, r3, #12
 800a5aa:	693a      	ldr	r2, [r7, #16]
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a5b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	011b      	lsls	r3, r3, #4
 800a5bc:	697a      	ldr	r2, [r7, #20]
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	693a      	ldr	r2, [r7, #16]
 800a5c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	697a      	ldr	r2, [r7, #20]
 800a5cc:	621a      	str	r2, [r3, #32]
}
 800a5ce:	bf00      	nop
 800a5d0:	371c      	adds	r7, #28
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr
	...

0800a5dc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	4b09      	ldr	r3, [pc, #36]	@ (800a614 <TIM_ITRx_SetConfig+0x38>)
 800a5f0:	4013      	ands	r3, r2
 800a5f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a5f4:	683a      	ldr	r2, [r7, #0]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	f043 0307 	orr.w	r3, r3, #7
 800a5fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	68fa      	ldr	r2, [r7, #12]
 800a604:	609a      	str	r2, [r3, #8]
}
 800a606:	bf00      	nop
 800a608:	3714      	adds	r7, #20
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	ffcfff8f 	.word	0xffcfff8f

0800a618 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a618:	b480      	push	{r7}
 800a61a:	b087      	sub	sp, #28
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	607a      	str	r2, [r7, #4]
 800a624:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a632:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	021a      	lsls	r2, r3, #8
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	431a      	orrs	r2, r3
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	4313      	orrs	r3, r2
 800a640:	697a      	ldr	r2, [r7, #20]
 800a642:	4313      	orrs	r3, r2
 800a644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	697a      	ldr	r2, [r7, #20]
 800a64a:	609a      	str	r2, [r3, #8]
}
 800a64c:	bf00      	nop
 800a64e:	371c      	adds	r7, #28
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a658:	b480      	push	{r7}
 800a65a:	b087      	sub	sp, #28
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	f003 031f 	and.w	r3, r3, #31
 800a66a:	2201      	movs	r2, #1
 800a66c:	fa02 f303 	lsl.w	r3, r2, r3
 800a670:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6a1a      	ldr	r2, [r3, #32]
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	43db      	mvns	r3, r3
 800a67a:	401a      	ands	r2, r3
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6a1a      	ldr	r2, [r3, #32]
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	f003 031f 	and.w	r3, r3, #31
 800a68a:	6879      	ldr	r1, [r7, #4]
 800a68c:	fa01 f303 	lsl.w	r3, r1, r3
 800a690:	431a      	orrs	r2, r3
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	621a      	str	r2, [r3, #32]
}
 800a696:	bf00      	nop
 800a698:	371c      	adds	r7, #28
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
	...

0800a6a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d101      	bne.n	800a6bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6b8:	2302      	movs	r3, #2
 800a6ba:	e06d      	b.n	800a798 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2202      	movs	r2, #2
 800a6c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a30      	ldr	r2, [pc, #192]	@ (800a7a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d004      	beq.n	800a6f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a2f      	ldr	r2, [pc, #188]	@ (800a7a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d108      	bne.n	800a702 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a6f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a708:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	4313      	orrs	r3, r2
 800a712:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a20      	ldr	r2, [pc, #128]	@ (800a7a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d022      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a72e:	d01d      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a1d      	ldr	r2, [pc, #116]	@ (800a7ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d018      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a1c      	ldr	r2, [pc, #112]	@ (800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d013      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a1a      	ldr	r2, [pc, #104]	@ (800a7b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d00e      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a15      	ldr	r2, [pc, #84]	@ (800a7a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d009      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a16      	ldr	r2, [pc, #88]	@ (800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d004      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a15      	ldr	r2, [pc, #84]	@ (800a7bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d10c      	bne.n	800a786 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a772:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	4313      	orrs	r3, r2
 800a77c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	68ba      	ldr	r2, [r7, #8]
 800a784:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2201      	movs	r2, #1
 800a78a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3714      	adds	r7, #20
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr
 800a7a4:	40010000 	.word	0x40010000
 800a7a8:	40010400 	.word	0x40010400
 800a7ac:	40000400 	.word	0x40000400
 800a7b0:	40000800 	.word	0x40000800
 800a7b4:	40000c00 	.word	0x40000c00
 800a7b8:	40001800 	.word	0x40001800
 800a7bc:	40014000 	.word	0x40014000

0800a7c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d101      	bne.n	800a7dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a7d8:	2302      	movs	r3, #2
 800a7da:	e065      	b.n	800a8a8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	4313      	orrs	r3, r2
 800a80c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4313      	orrs	r3, r2
 800a81a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	691b      	ldr	r3, [r3, #16]
 800a826:	4313      	orrs	r3, r2
 800a828:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	695b      	ldr	r3, [r3, #20]
 800a834:	4313      	orrs	r3, r2
 800a836:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a842:	4313      	orrs	r3, r2
 800a844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	041b      	lsls	r3, r3, #16
 800a852:	4313      	orrs	r3, r2
 800a854:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a16      	ldr	r2, [pc, #88]	@ (800a8b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d004      	beq.n	800a86a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a14      	ldr	r2, [pc, #80]	@ (800a8b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d115      	bne.n	800a896 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a874:	051b      	lsls	r3, r3, #20
 800a876:	4313      	orrs	r3, r2
 800a878:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	69db      	ldr	r3, [r3, #28]
 800a884:	4313      	orrs	r3, r2
 800a886:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	6a1b      	ldr	r3, [r3, #32]
 800a892:	4313      	orrs	r3, r2
 800a894:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3714      	adds	r7, #20
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr
 800a8b4:	40010000 	.word	0x40010000
 800a8b8:	40010400 	.word	0x40010400

0800a8bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a8c4:	bf00      	nop
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a8d8:	bf00      	nop
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a8ec:	bf00      	nop
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d101      	bne.n	800a90a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	e042      	b.n	800a990 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a910:	2b00      	cmp	r3, #0
 800a912:	d106      	bne.n	800a922 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f7f8 fd93 	bl	8003448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2224      	movs	r2, #36	@ 0x24
 800a926:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f022 0201 	bic.w	r2, r2, #1
 800a938:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d002      	beq.n	800a948 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f001 fa3a 	bl	800bdbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 fccf 	bl	800b2ec <UART_SetConfig>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b01      	cmp	r3, #1
 800a952:	d101      	bne.n	800a958 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a954:	2301      	movs	r3, #1
 800a956:	e01b      	b.n	800a990 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	685a      	ldr	r2, [r3, #4]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a966:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	689a      	ldr	r2, [r3, #8]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a976:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f042 0201 	orr.w	r2, r2, #1
 800a986:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f001 fab9 	bl	800bf00 <UART_CheckIdleState>
 800a98e:	4603      	mov	r3, r0
}
 800a990:	4618      	mov	r0, r3
 800a992:	3708      	adds	r7, #8
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b08a      	sub	sp, #40	@ 0x28
 800a99c:	af02      	add	r7, sp, #8
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	603b      	str	r3, [r7, #0]
 800a9a4:	4613      	mov	r3, r2
 800a9a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9ae:	2b20      	cmp	r3, #32
 800a9b0:	d17b      	bne.n	800aaaa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d002      	beq.n	800a9be <HAL_UART_Transmit+0x26>
 800a9b8:	88fb      	ldrh	r3, [r7, #6]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d101      	bne.n	800a9c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e074      	b.n	800aaac <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2221      	movs	r2, #33	@ 0x21
 800a9ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a9d2:	f7f9 f853 	bl	8003a7c <HAL_GetTick>
 800a9d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	88fa      	ldrh	r2, [r7, #6]
 800a9dc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	88fa      	ldrh	r2, [r7, #6]
 800a9e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9f0:	d108      	bne.n	800aa04 <HAL_UART_Transmit+0x6c>
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d104      	bne.n	800aa04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	61bb      	str	r3, [r7, #24]
 800aa02:	e003      	b.n	800aa0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800aa0c:	e030      	b.n	800aa70 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	9300      	str	r3, [sp, #0]
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	2200      	movs	r2, #0
 800aa16:	2180      	movs	r1, #128	@ 0x80
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	f001 fb1b 	bl	800c054 <UART_WaitOnFlagUntilTimeout>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d005      	beq.n	800aa30 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2220      	movs	r2, #32
 800aa28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800aa2c:	2303      	movs	r3, #3
 800aa2e:	e03d      	b.n	800aaac <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d10b      	bne.n	800aa4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	881b      	ldrh	r3, [r3, #0]
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa44:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	3302      	adds	r3, #2
 800aa4a:	61bb      	str	r3, [r7, #24]
 800aa4c:	e007      	b.n	800aa5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	781a      	ldrb	r2, [r3, #0]
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800aa58:	69fb      	ldr	r3, [r7, #28]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	3b01      	subs	r3, #1
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d1c8      	bne.n	800aa0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	9300      	str	r3, [sp, #0]
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	2200      	movs	r2, #0
 800aa84:	2140      	movs	r1, #64	@ 0x40
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	f001 fae4 	bl	800c054 <UART_WaitOnFlagUntilTimeout>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d005      	beq.n	800aa9e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2220      	movs	r2, #32
 800aa96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800aa9a:	2303      	movs	r3, #3
 800aa9c:	e006      	b.n	800aaac <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2220      	movs	r2, #32
 800aaa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	e000      	b.n	800aaac <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800aaaa:	2302      	movs	r3, #2
  }
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3720      	adds	r7, #32
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b08a      	sub	sp, #40	@ 0x28
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	4613      	mov	r3, r2
 800aac0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aac8:	2b20      	cmp	r3, #32
 800aaca:	d137      	bne.n	800ab3c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d002      	beq.n	800aad8 <HAL_UART_Receive_IT+0x24>
 800aad2:	88fb      	ldrh	r3, [r7, #6]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d101      	bne.n	800aadc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800aad8:	2301      	movs	r3, #1
 800aada:	e030      	b.n	800ab3e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a18      	ldr	r2, [pc, #96]	@ (800ab48 <HAL_UART_Receive_IT+0x94>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d01f      	beq.n	800ab2c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d018      	beq.n	800ab2c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	e853 3f00 	ldrex	r3, [r3]
 800ab06:	613b      	str	r3, [r7, #16]
   return(result);
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ab0e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	461a      	mov	r2, r3
 800ab16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab18:	623b      	str	r3, [r7, #32]
 800ab1a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1c:	69f9      	ldr	r1, [r7, #28]
 800ab1e:	6a3a      	ldr	r2, [r7, #32]
 800ab20:	e841 2300 	strex	r3, r2, [r1]
 800ab24:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1e6      	bne.n	800aafa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ab2c:	88fb      	ldrh	r3, [r7, #6]
 800ab2e:	461a      	mov	r2, r3
 800ab30:	68b9      	ldr	r1, [r7, #8]
 800ab32:	68f8      	ldr	r0, [r7, #12]
 800ab34:	f001 fafc 	bl	800c130 <UART_Start_Receive_IT>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	e000      	b.n	800ab3e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ab3c:	2302      	movs	r3, #2
  }
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3728      	adds	r7, #40	@ 0x28
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	58000c00 	.word	0x58000c00

0800ab4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b0ba      	sub	sp, #232	@ 0xe8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	69db      	ldr	r3, [r3, #28]
 800ab5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	689b      	ldr	r3, [r3, #8]
 800ab6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ab72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ab76:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ab7a:	4013      	ands	r3, r2
 800ab7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ab80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d11b      	bne.n	800abc0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ab88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab8c:	f003 0320 	and.w	r3, r3, #32
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d015      	beq.n	800abc0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ab94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab98:	f003 0320 	and.w	r3, r3, #32
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d105      	bne.n	800abac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aba4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d009      	beq.n	800abc0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f000 8377 	beq.w	800b2a4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	4798      	blx	r3
      }
      return;
 800abbe:	e371      	b.n	800b2a4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800abc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f000 8123 	beq.w	800ae10 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800abca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800abce:	4b8d      	ldr	r3, [pc, #564]	@ (800ae04 <HAL_UART_IRQHandler+0x2b8>)
 800abd0:	4013      	ands	r3, r2
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d106      	bne.n	800abe4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800abd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800abda:	4b8b      	ldr	r3, [pc, #556]	@ (800ae08 <HAL_UART_IRQHandler+0x2bc>)
 800abdc:	4013      	ands	r3, r2
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f000 8116 	beq.w	800ae10 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800abe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abe8:	f003 0301 	and.w	r3, r3, #1
 800abec:	2b00      	cmp	r3, #0
 800abee:	d011      	beq.n	800ac14 <HAL_UART_IRQHandler+0xc8>
 800abf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d00b      	beq.n	800ac14 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2201      	movs	r2, #1
 800ac02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac0a:	f043 0201 	orr.w	r2, r3, #1
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac18:	f003 0302 	and.w	r3, r3, #2
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d011      	beq.n	800ac44 <HAL_UART_IRQHandler+0xf8>
 800ac20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac24:	f003 0301 	and.w	r3, r3, #1
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d00b      	beq.n	800ac44 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2202      	movs	r2, #2
 800ac32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac3a:	f043 0204 	orr.w	r2, r3, #4
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac48:	f003 0304 	and.w	r3, r3, #4
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d011      	beq.n	800ac74 <HAL_UART_IRQHandler+0x128>
 800ac50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac54:	f003 0301 	and.w	r3, r3, #1
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d00b      	beq.n	800ac74 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2204      	movs	r2, #4
 800ac62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac6a:	f043 0202 	orr.w	r2, r3, #2
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ac74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac78:	f003 0308 	and.w	r3, r3, #8
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d017      	beq.n	800acb0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ac80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac84:	f003 0320 	and.w	r3, r3, #32
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d105      	bne.n	800ac98 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ac8c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ac90:	4b5c      	ldr	r3, [pc, #368]	@ (800ae04 <HAL_UART_IRQHandler+0x2b8>)
 800ac92:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d00b      	beq.n	800acb0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2208      	movs	r2, #8
 800ac9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aca6:	f043 0208 	orr.w	r2, r3, #8
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800acb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d012      	beq.n	800ace2 <HAL_UART_IRQHandler+0x196>
 800acbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acc0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00c      	beq.n	800ace2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800acd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acd8:	f043 0220 	orr.w	r2, r3, #32
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ace8:	2b00      	cmp	r3, #0
 800acea:	f000 82dd 	beq.w	800b2a8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800acee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acf2:	f003 0320 	and.w	r3, r3, #32
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d013      	beq.n	800ad22 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800acfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acfe:	f003 0320 	and.w	r3, r3, #32
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d105      	bne.n	800ad12 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d007      	beq.n	800ad22 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d003      	beq.n	800ad22 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	689b      	ldr	r3, [r3, #8]
 800ad32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad36:	2b40      	cmp	r3, #64	@ 0x40
 800ad38:	d005      	beq.n	800ad46 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ad3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ad3e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d054      	beq.n	800adf0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f001 fb14 	bl	800c374 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	689b      	ldr	r3, [r3, #8]
 800ad52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad56:	2b40      	cmp	r3, #64	@ 0x40
 800ad58:	d146      	bne.n	800ade8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	3308      	adds	r3, #8
 800ad60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ad68:	e853 3f00 	ldrex	r3, [r3]
 800ad6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ad70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ad74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	3308      	adds	r3, #8
 800ad82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ad86:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ad8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ad92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ad96:	e841 2300 	strex	r3, r2, [r1]
 800ad9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ad9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1d9      	bne.n	800ad5a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adac:	2b00      	cmp	r3, #0
 800adae:	d017      	beq.n	800ade0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adb6:	4a15      	ldr	r2, [pc, #84]	@ (800ae0c <HAL_UART_IRQHandler+0x2c0>)
 800adb8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7f9 fb19 	bl	80043f8 <HAL_DMA_Abort_IT>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d019      	beq.n	800ae00 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800add2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800adda:	4610      	mov	r0, r2
 800addc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adde:	e00f      	b.n	800ae00 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fa6d 	bl	800b2c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ade6:	e00b      	b.n	800ae00 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 fa69 	bl	800b2c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adee:	e007      	b.n	800ae00 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 fa65 	bl	800b2c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800adfe:	e253      	b.n	800b2a8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae00:	bf00      	nop
    return;
 800ae02:	e251      	b.n	800b2a8 <HAL_UART_IRQHandler+0x75c>
 800ae04:	10000001 	.word	0x10000001
 800ae08:	04000120 	.word	0x04000120
 800ae0c:	0800c441 	.word	0x0800c441

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	f040 81e7 	bne.w	800b1e8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ae1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae1e:	f003 0310 	and.w	r3, r3, #16
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	f000 81e0 	beq.w	800b1e8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ae28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae2c:	f003 0310 	and.w	r3, r3, #16
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f000 81d9 	beq.w	800b1e8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2210      	movs	r2, #16
 800ae3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae48:	2b40      	cmp	r3, #64	@ 0x40
 800ae4a:	f040 8151 	bne.w	800b0f0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4a96      	ldr	r2, [pc, #600]	@ (800b0b0 <HAL_UART_IRQHandler+0x564>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d068      	beq.n	800af2e <HAL_UART_IRQHandler+0x3e2>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a93      	ldr	r2, [pc, #588]	@ (800b0b4 <HAL_UART_IRQHandler+0x568>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d061      	beq.n	800af2e <HAL_UART_IRQHandler+0x3e2>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a91      	ldr	r2, [pc, #580]	@ (800b0b8 <HAL_UART_IRQHandler+0x56c>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d05a      	beq.n	800af2e <HAL_UART_IRQHandler+0x3e2>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a8e      	ldr	r2, [pc, #568]	@ (800b0bc <HAL_UART_IRQHandler+0x570>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d053      	beq.n	800af2e <HAL_UART_IRQHandler+0x3e2>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4a8c      	ldr	r2, [pc, #560]	@ (800b0c0 <HAL_UART_IRQHandler+0x574>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d04c      	beq.n	800af2e <HAL_UART_IRQHandler+0x3e2>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a89      	ldr	r2, [pc, #548]	@ (800b0c4 <HAL_UART_IRQHandler+0x578>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d045      	beq.n	800af2e <HAL_UART_IRQHandler+0x3e2>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a87      	ldr	r2, [pc, #540]	@ (800b0c8 <HAL_UART_IRQHandler+0x57c>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d03e      	beq.n	800af2e <HAL_UART_IRQHandler+0x3e2>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a84      	ldr	r2, [pc, #528]	@ (800b0cc <HAL_UART_IRQHandler+0x580>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d037      	beq.n	800af2e <HAL_UART_IRQHandler+0x3e2>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a82      	ldr	r2, [pc, #520]	@ (800b0d0 <HAL_UART_IRQHandler+0x584>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d030      	beq.n	800af2e <HAL_UART_IRQHandler+0x3e2>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4a7f      	ldr	r2, [pc, #508]	@ (800b0d4 <HAL_UART_IRQHandler+0x588>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d029      	beq.n	800af2e <HAL_UART_IRQHandler+0x3e2>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a7d      	ldr	r2, [pc, #500]	@ (800b0d8 <HAL_UART_IRQHandler+0x58c>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d022      	beq.n	800af2e <HAL_UART_IRQHandler+0x3e2>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a7a      	ldr	r2, [pc, #488]	@ (800b0dc <HAL_UART_IRQHandler+0x590>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d01b      	beq.n	800af2e <HAL_UART_IRQHandler+0x3e2>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a78      	ldr	r2, [pc, #480]	@ (800b0e0 <HAL_UART_IRQHandler+0x594>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d014      	beq.n	800af2e <HAL_UART_IRQHandler+0x3e2>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a75      	ldr	r2, [pc, #468]	@ (800b0e4 <HAL_UART_IRQHandler+0x598>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d00d      	beq.n	800af2e <HAL_UART_IRQHandler+0x3e2>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a73      	ldr	r2, [pc, #460]	@ (800b0e8 <HAL_UART_IRQHandler+0x59c>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d006      	beq.n	800af2e <HAL_UART_IRQHandler+0x3e2>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a70      	ldr	r2, [pc, #448]	@ (800b0ec <HAL_UART_IRQHandler+0x5a0>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d106      	bne.n	800af3c <HAL_UART_IRQHandler+0x3f0>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	b29b      	uxth	r3, r3
 800af3a:	e005      	b.n	800af48 <HAL_UART_IRQHandler+0x3fc>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	b29b      	uxth	r3, r3
 800af48:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800af4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800af50:	2b00      	cmp	r3, #0
 800af52:	f000 81ab 	beq.w	800b2ac <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800af60:	429a      	cmp	r2, r3
 800af62:	f080 81a3 	bcs.w	800b2ac <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800af6c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af76:	69db      	ldr	r3, [r3, #28]
 800af78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af7c:	f000 8087 	beq.w	800b08e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800af8c:	e853 3f00 	ldrex	r3, [r3]
 800af90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800af94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800af98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	461a      	mov	r2, r3
 800afa6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800afaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800afae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800afb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800afba:	e841 2300 	strex	r3, r2, [r1]
 800afbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800afc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1da      	bne.n	800af80 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	3308      	adds	r3, #8
 800afd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800afd4:	e853 3f00 	ldrex	r3, [r3]
 800afd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800afda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800afdc:	f023 0301 	bic.w	r3, r3, #1
 800afe0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	3308      	adds	r3, #8
 800afea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800afee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800aff2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800aff6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800affa:	e841 2300 	strex	r3, r2, [r1]
 800affe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b000:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b002:	2b00      	cmp	r3, #0
 800b004:	d1e1      	bne.n	800afca <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	3308      	adds	r3, #8
 800b00c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b00e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b010:	e853 3f00 	ldrex	r3, [r3]
 800b014:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b016:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b018:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b01c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	3308      	adds	r3, #8
 800b026:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b02a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b02c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b030:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b032:	e841 2300 	strex	r3, r2, [r1]
 800b036:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b038:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1e3      	bne.n	800b006 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2220      	movs	r2, #32
 800b042:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b054:	e853 3f00 	ldrex	r3, [r3]
 800b058:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b05a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b05c:	f023 0310 	bic.w	r3, r3, #16
 800b060:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	461a      	mov	r2, r3
 800b06a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b06e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b070:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b072:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b074:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b076:	e841 2300 	strex	r3, r2, [r1]
 800b07a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b07c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d1e4      	bne.n	800b04c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b088:	4618      	mov	r0, r3
 800b08a:	f7f8 fe97 	bl	8003dbc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2202      	movs	r2, #2
 800b092:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	1ad3      	subs	r3, r2, r3
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 f913 	bl	800b2d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b0ae:	e0fd      	b.n	800b2ac <HAL_UART_IRQHandler+0x760>
 800b0b0:	40020010 	.word	0x40020010
 800b0b4:	40020028 	.word	0x40020028
 800b0b8:	40020040 	.word	0x40020040
 800b0bc:	40020058 	.word	0x40020058
 800b0c0:	40020070 	.word	0x40020070
 800b0c4:	40020088 	.word	0x40020088
 800b0c8:	400200a0 	.word	0x400200a0
 800b0cc:	400200b8 	.word	0x400200b8
 800b0d0:	40020410 	.word	0x40020410
 800b0d4:	40020428 	.word	0x40020428
 800b0d8:	40020440 	.word	0x40020440
 800b0dc:	40020458 	.word	0x40020458
 800b0e0:	40020470 	.word	0x40020470
 800b0e4:	40020488 	.word	0x40020488
 800b0e8:	400204a0 	.word	0x400204a0
 800b0ec:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	1ad3      	subs	r3, r2, r3
 800b100:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f000 80cf 	beq.w	800b2b0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b112:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b116:	2b00      	cmp	r3, #0
 800b118:	f000 80ca 	beq.w	800b2b0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b124:	e853 3f00 	ldrex	r3, [r3]
 800b128:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b12a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b12c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b130:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	461a      	mov	r2, r3
 800b13a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b13e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b140:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b142:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b144:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b146:	e841 2300 	strex	r3, r2, [r1]
 800b14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b14c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d1e4      	bne.n	800b11c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	3308      	adds	r3, #8
 800b158:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b15c:	e853 3f00 	ldrex	r3, [r3]
 800b160:	623b      	str	r3, [r7, #32]
   return(result);
 800b162:	6a3a      	ldr	r2, [r7, #32]
 800b164:	4b55      	ldr	r3, [pc, #340]	@ (800b2bc <HAL_UART_IRQHandler+0x770>)
 800b166:	4013      	ands	r3, r2
 800b168:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	3308      	adds	r3, #8
 800b172:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b176:	633a      	str	r2, [r7, #48]	@ 0x30
 800b178:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b17a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b17c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b17e:	e841 2300 	strex	r3, r2, [r1]
 800b182:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b186:	2b00      	cmp	r3, #0
 800b188:	d1e3      	bne.n	800b152 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2220      	movs	r2, #32
 800b18e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2200      	movs	r2, #0
 800b19c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	e853 3f00 	ldrex	r3, [r3]
 800b1aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f023 0310 	bic.w	r3, r3, #16
 800b1b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b1c0:	61fb      	str	r3, [r7, #28]
 800b1c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c4:	69b9      	ldr	r1, [r7, #24]
 800b1c6:	69fa      	ldr	r2, [r7, #28]
 800b1c8:	e841 2300 	strex	r3, r2, [r1]
 800b1cc:	617b      	str	r3, [r7, #20]
   return(result);
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d1e4      	bne.n	800b19e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2202      	movs	r2, #2
 800b1d8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b1da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b1de:	4619      	mov	r1, r3
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 f877 	bl	800b2d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b1e6:	e063      	b.n	800b2b0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b1e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d00e      	beq.n	800b212 <HAL_UART_IRQHandler+0x6c6>
 800b1f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b1f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d008      	beq.n	800b212 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b208:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f001 fe76 	bl	800cefc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b210:	e051      	b.n	800b2b6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d014      	beq.n	800b248 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b21e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b226:	2b00      	cmp	r3, #0
 800b228:	d105      	bne.n	800b236 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b22a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b22e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b232:	2b00      	cmp	r3, #0
 800b234:	d008      	beq.n	800b248 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d03a      	beq.n	800b2b4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	4798      	blx	r3
    }
    return;
 800b246:	e035      	b.n	800b2b4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b24c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b250:	2b00      	cmp	r3, #0
 800b252:	d009      	beq.n	800b268 <HAL_UART_IRQHandler+0x71c>
 800b254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d003      	beq.n	800b268 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f001 f903 	bl	800c46c <UART_EndTransmit_IT>
    return;
 800b266:	e026      	b.n	800b2b6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b26c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b270:	2b00      	cmp	r3, #0
 800b272:	d009      	beq.n	800b288 <HAL_UART_IRQHandler+0x73c>
 800b274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b278:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d003      	beq.n	800b288 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f001 fe4f 	bl	800cf24 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b286:	e016      	b.n	800b2b6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b28c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b290:	2b00      	cmp	r3, #0
 800b292:	d010      	beq.n	800b2b6 <HAL_UART_IRQHandler+0x76a>
 800b294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	da0c      	bge.n	800b2b6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f001 fe37 	bl	800cf10 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b2a2:	e008      	b.n	800b2b6 <HAL_UART_IRQHandler+0x76a>
      return;
 800b2a4:	bf00      	nop
 800b2a6:	e006      	b.n	800b2b6 <HAL_UART_IRQHandler+0x76a>
    return;
 800b2a8:	bf00      	nop
 800b2aa:	e004      	b.n	800b2b6 <HAL_UART_IRQHandler+0x76a>
      return;
 800b2ac:	bf00      	nop
 800b2ae:	e002      	b.n	800b2b6 <HAL_UART_IRQHandler+0x76a>
      return;
 800b2b0:	bf00      	nop
 800b2b2:	e000      	b.n	800b2b6 <HAL_UART_IRQHandler+0x76a>
    return;
 800b2b4:	bf00      	nop
  }
}
 800b2b6:	37e8      	adds	r7, #232	@ 0xe8
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	effffffe 	.word	0xeffffffe

0800b2c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b2c8:	bf00      	nop
 800b2ca:	370c      	adds	r7, #12
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	460b      	mov	r3, r1
 800b2de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b2e0:	bf00      	nop
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2f0:	b092      	sub	sp, #72	@ 0x48
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	689a      	ldr	r2, [r3, #8]
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	691b      	ldr	r3, [r3, #16]
 800b304:	431a      	orrs	r2, r3
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	695b      	ldr	r3, [r3, #20]
 800b30a:	431a      	orrs	r2, r3
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	69db      	ldr	r3, [r3, #28]
 800b310:	4313      	orrs	r3, r2
 800b312:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	4bbe      	ldr	r3, [pc, #760]	@ (800b614 <UART_SetConfig+0x328>)
 800b31c:	4013      	ands	r3, r2
 800b31e:	697a      	ldr	r2, [r7, #20]
 800b320:	6812      	ldr	r2, [r2, #0]
 800b322:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b324:	430b      	orrs	r3, r1
 800b326:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	68da      	ldr	r2, [r3, #12]
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	430a      	orrs	r2, r1
 800b33c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	699b      	ldr	r3, [r3, #24]
 800b342:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4ab3      	ldr	r2, [pc, #716]	@ (800b618 <UART_SetConfig+0x32c>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d004      	beq.n	800b358 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	6a1b      	ldr	r3, [r3, #32]
 800b352:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b354:	4313      	orrs	r3, r2
 800b356:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	689a      	ldr	r2, [r3, #8]
 800b35e:	4baf      	ldr	r3, [pc, #700]	@ (800b61c <UART_SetConfig+0x330>)
 800b360:	4013      	ands	r3, r2
 800b362:	697a      	ldr	r2, [r7, #20]
 800b364:	6812      	ldr	r2, [r2, #0]
 800b366:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b368:	430b      	orrs	r3, r1
 800b36a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b372:	f023 010f 	bic.w	r1, r3, #15
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	430a      	orrs	r2, r1
 800b380:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4aa6      	ldr	r2, [pc, #664]	@ (800b620 <UART_SetConfig+0x334>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d177      	bne.n	800b47c <UART_SetConfig+0x190>
 800b38c:	4ba5      	ldr	r3, [pc, #660]	@ (800b624 <UART_SetConfig+0x338>)
 800b38e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b390:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b394:	2b28      	cmp	r3, #40	@ 0x28
 800b396:	d86d      	bhi.n	800b474 <UART_SetConfig+0x188>
 800b398:	a201      	add	r2, pc, #4	@ (adr r2, 800b3a0 <UART_SetConfig+0xb4>)
 800b39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b39e:	bf00      	nop
 800b3a0:	0800b445 	.word	0x0800b445
 800b3a4:	0800b475 	.word	0x0800b475
 800b3a8:	0800b475 	.word	0x0800b475
 800b3ac:	0800b475 	.word	0x0800b475
 800b3b0:	0800b475 	.word	0x0800b475
 800b3b4:	0800b475 	.word	0x0800b475
 800b3b8:	0800b475 	.word	0x0800b475
 800b3bc:	0800b475 	.word	0x0800b475
 800b3c0:	0800b44d 	.word	0x0800b44d
 800b3c4:	0800b475 	.word	0x0800b475
 800b3c8:	0800b475 	.word	0x0800b475
 800b3cc:	0800b475 	.word	0x0800b475
 800b3d0:	0800b475 	.word	0x0800b475
 800b3d4:	0800b475 	.word	0x0800b475
 800b3d8:	0800b475 	.word	0x0800b475
 800b3dc:	0800b475 	.word	0x0800b475
 800b3e0:	0800b455 	.word	0x0800b455
 800b3e4:	0800b475 	.word	0x0800b475
 800b3e8:	0800b475 	.word	0x0800b475
 800b3ec:	0800b475 	.word	0x0800b475
 800b3f0:	0800b475 	.word	0x0800b475
 800b3f4:	0800b475 	.word	0x0800b475
 800b3f8:	0800b475 	.word	0x0800b475
 800b3fc:	0800b475 	.word	0x0800b475
 800b400:	0800b45d 	.word	0x0800b45d
 800b404:	0800b475 	.word	0x0800b475
 800b408:	0800b475 	.word	0x0800b475
 800b40c:	0800b475 	.word	0x0800b475
 800b410:	0800b475 	.word	0x0800b475
 800b414:	0800b475 	.word	0x0800b475
 800b418:	0800b475 	.word	0x0800b475
 800b41c:	0800b475 	.word	0x0800b475
 800b420:	0800b465 	.word	0x0800b465
 800b424:	0800b475 	.word	0x0800b475
 800b428:	0800b475 	.word	0x0800b475
 800b42c:	0800b475 	.word	0x0800b475
 800b430:	0800b475 	.word	0x0800b475
 800b434:	0800b475 	.word	0x0800b475
 800b438:	0800b475 	.word	0x0800b475
 800b43c:	0800b475 	.word	0x0800b475
 800b440:	0800b46d 	.word	0x0800b46d
 800b444:	2301      	movs	r3, #1
 800b446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b44a:	e222      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b44c:	2304      	movs	r3, #4
 800b44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b452:	e21e      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b454:	2308      	movs	r3, #8
 800b456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b45a:	e21a      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b45c:	2310      	movs	r3, #16
 800b45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b462:	e216      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b464:	2320      	movs	r3, #32
 800b466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b46a:	e212      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b46c:	2340      	movs	r3, #64	@ 0x40
 800b46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b472:	e20e      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b474:	2380      	movs	r3, #128	@ 0x80
 800b476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b47a:	e20a      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4a69      	ldr	r2, [pc, #420]	@ (800b628 <UART_SetConfig+0x33c>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d130      	bne.n	800b4e8 <UART_SetConfig+0x1fc>
 800b486:	4b67      	ldr	r3, [pc, #412]	@ (800b624 <UART_SetConfig+0x338>)
 800b488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b48a:	f003 0307 	and.w	r3, r3, #7
 800b48e:	2b05      	cmp	r3, #5
 800b490:	d826      	bhi.n	800b4e0 <UART_SetConfig+0x1f4>
 800b492:	a201      	add	r2, pc, #4	@ (adr r2, 800b498 <UART_SetConfig+0x1ac>)
 800b494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b498:	0800b4b1 	.word	0x0800b4b1
 800b49c:	0800b4b9 	.word	0x0800b4b9
 800b4a0:	0800b4c1 	.word	0x0800b4c1
 800b4a4:	0800b4c9 	.word	0x0800b4c9
 800b4a8:	0800b4d1 	.word	0x0800b4d1
 800b4ac:	0800b4d9 	.word	0x0800b4d9
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4b6:	e1ec      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b4b8:	2304      	movs	r3, #4
 800b4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4be:	e1e8      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b4c0:	2308      	movs	r3, #8
 800b4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4c6:	e1e4      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b4c8:	2310      	movs	r3, #16
 800b4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4ce:	e1e0      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b4d0:	2320      	movs	r3, #32
 800b4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4d6:	e1dc      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b4d8:	2340      	movs	r3, #64	@ 0x40
 800b4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4de:	e1d8      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b4e0:	2380      	movs	r3, #128	@ 0x80
 800b4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4e6:	e1d4      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a4f      	ldr	r2, [pc, #316]	@ (800b62c <UART_SetConfig+0x340>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d130      	bne.n	800b554 <UART_SetConfig+0x268>
 800b4f2:	4b4c      	ldr	r3, [pc, #304]	@ (800b624 <UART_SetConfig+0x338>)
 800b4f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4f6:	f003 0307 	and.w	r3, r3, #7
 800b4fa:	2b05      	cmp	r3, #5
 800b4fc:	d826      	bhi.n	800b54c <UART_SetConfig+0x260>
 800b4fe:	a201      	add	r2, pc, #4	@ (adr r2, 800b504 <UART_SetConfig+0x218>)
 800b500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b504:	0800b51d 	.word	0x0800b51d
 800b508:	0800b525 	.word	0x0800b525
 800b50c:	0800b52d 	.word	0x0800b52d
 800b510:	0800b535 	.word	0x0800b535
 800b514:	0800b53d 	.word	0x0800b53d
 800b518:	0800b545 	.word	0x0800b545
 800b51c:	2300      	movs	r3, #0
 800b51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b522:	e1b6      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b524:	2304      	movs	r3, #4
 800b526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b52a:	e1b2      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b52c:	2308      	movs	r3, #8
 800b52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b532:	e1ae      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b534:	2310      	movs	r3, #16
 800b536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b53a:	e1aa      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b53c:	2320      	movs	r3, #32
 800b53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b542:	e1a6      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b544:	2340      	movs	r3, #64	@ 0x40
 800b546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b54a:	e1a2      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b54c:	2380      	movs	r3, #128	@ 0x80
 800b54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b552:	e19e      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a35      	ldr	r2, [pc, #212]	@ (800b630 <UART_SetConfig+0x344>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d130      	bne.n	800b5c0 <UART_SetConfig+0x2d4>
 800b55e:	4b31      	ldr	r3, [pc, #196]	@ (800b624 <UART_SetConfig+0x338>)
 800b560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b562:	f003 0307 	and.w	r3, r3, #7
 800b566:	2b05      	cmp	r3, #5
 800b568:	d826      	bhi.n	800b5b8 <UART_SetConfig+0x2cc>
 800b56a:	a201      	add	r2, pc, #4	@ (adr r2, 800b570 <UART_SetConfig+0x284>)
 800b56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b570:	0800b589 	.word	0x0800b589
 800b574:	0800b591 	.word	0x0800b591
 800b578:	0800b599 	.word	0x0800b599
 800b57c:	0800b5a1 	.word	0x0800b5a1
 800b580:	0800b5a9 	.word	0x0800b5a9
 800b584:	0800b5b1 	.word	0x0800b5b1
 800b588:	2300      	movs	r3, #0
 800b58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b58e:	e180      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b590:	2304      	movs	r3, #4
 800b592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b596:	e17c      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b598:	2308      	movs	r3, #8
 800b59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b59e:	e178      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b5a0:	2310      	movs	r3, #16
 800b5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5a6:	e174      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b5a8:	2320      	movs	r3, #32
 800b5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ae:	e170      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b5b0:	2340      	movs	r3, #64	@ 0x40
 800b5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5b6:	e16c      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b5b8:	2380      	movs	r3, #128	@ 0x80
 800b5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5be:	e168      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4a1b      	ldr	r2, [pc, #108]	@ (800b634 <UART_SetConfig+0x348>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d142      	bne.n	800b650 <UART_SetConfig+0x364>
 800b5ca:	4b16      	ldr	r3, [pc, #88]	@ (800b624 <UART_SetConfig+0x338>)
 800b5cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5ce:	f003 0307 	and.w	r3, r3, #7
 800b5d2:	2b05      	cmp	r3, #5
 800b5d4:	d838      	bhi.n	800b648 <UART_SetConfig+0x35c>
 800b5d6:	a201      	add	r2, pc, #4	@ (adr r2, 800b5dc <UART_SetConfig+0x2f0>)
 800b5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5dc:	0800b5f5 	.word	0x0800b5f5
 800b5e0:	0800b5fd 	.word	0x0800b5fd
 800b5e4:	0800b605 	.word	0x0800b605
 800b5e8:	0800b60d 	.word	0x0800b60d
 800b5ec:	0800b639 	.word	0x0800b639
 800b5f0:	0800b641 	.word	0x0800b641
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5fa:	e14a      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b5fc:	2304      	movs	r3, #4
 800b5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b602:	e146      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b604:	2308      	movs	r3, #8
 800b606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b60a:	e142      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b60c:	2310      	movs	r3, #16
 800b60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b612:	e13e      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b614:	cfff69f3 	.word	0xcfff69f3
 800b618:	58000c00 	.word	0x58000c00
 800b61c:	11fff4ff 	.word	0x11fff4ff
 800b620:	40011000 	.word	0x40011000
 800b624:	58024400 	.word	0x58024400
 800b628:	40004400 	.word	0x40004400
 800b62c:	40004800 	.word	0x40004800
 800b630:	40004c00 	.word	0x40004c00
 800b634:	40005000 	.word	0x40005000
 800b638:	2320      	movs	r3, #32
 800b63a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b63e:	e128      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b640:	2340      	movs	r3, #64	@ 0x40
 800b642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b646:	e124      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b648:	2380      	movs	r3, #128	@ 0x80
 800b64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b64e:	e120      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4acb      	ldr	r2, [pc, #812]	@ (800b984 <UART_SetConfig+0x698>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d176      	bne.n	800b748 <UART_SetConfig+0x45c>
 800b65a:	4bcb      	ldr	r3, [pc, #812]	@ (800b988 <UART_SetConfig+0x69c>)
 800b65c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b65e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b662:	2b28      	cmp	r3, #40	@ 0x28
 800b664:	d86c      	bhi.n	800b740 <UART_SetConfig+0x454>
 800b666:	a201      	add	r2, pc, #4	@ (adr r2, 800b66c <UART_SetConfig+0x380>)
 800b668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b66c:	0800b711 	.word	0x0800b711
 800b670:	0800b741 	.word	0x0800b741
 800b674:	0800b741 	.word	0x0800b741
 800b678:	0800b741 	.word	0x0800b741
 800b67c:	0800b741 	.word	0x0800b741
 800b680:	0800b741 	.word	0x0800b741
 800b684:	0800b741 	.word	0x0800b741
 800b688:	0800b741 	.word	0x0800b741
 800b68c:	0800b719 	.word	0x0800b719
 800b690:	0800b741 	.word	0x0800b741
 800b694:	0800b741 	.word	0x0800b741
 800b698:	0800b741 	.word	0x0800b741
 800b69c:	0800b741 	.word	0x0800b741
 800b6a0:	0800b741 	.word	0x0800b741
 800b6a4:	0800b741 	.word	0x0800b741
 800b6a8:	0800b741 	.word	0x0800b741
 800b6ac:	0800b721 	.word	0x0800b721
 800b6b0:	0800b741 	.word	0x0800b741
 800b6b4:	0800b741 	.word	0x0800b741
 800b6b8:	0800b741 	.word	0x0800b741
 800b6bc:	0800b741 	.word	0x0800b741
 800b6c0:	0800b741 	.word	0x0800b741
 800b6c4:	0800b741 	.word	0x0800b741
 800b6c8:	0800b741 	.word	0x0800b741
 800b6cc:	0800b729 	.word	0x0800b729
 800b6d0:	0800b741 	.word	0x0800b741
 800b6d4:	0800b741 	.word	0x0800b741
 800b6d8:	0800b741 	.word	0x0800b741
 800b6dc:	0800b741 	.word	0x0800b741
 800b6e0:	0800b741 	.word	0x0800b741
 800b6e4:	0800b741 	.word	0x0800b741
 800b6e8:	0800b741 	.word	0x0800b741
 800b6ec:	0800b731 	.word	0x0800b731
 800b6f0:	0800b741 	.word	0x0800b741
 800b6f4:	0800b741 	.word	0x0800b741
 800b6f8:	0800b741 	.word	0x0800b741
 800b6fc:	0800b741 	.word	0x0800b741
 800b700:	0800b741 	.word	0x0800b741
 800b704:	0800b741 	.word	0x0800b741
 800b708:	0800b741 	.word	0x0800b741
 800b70c:	0800b739 	.word	0x0800b739
 800b710:	2301      	movs	r3, #1
 800b712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b716:	e0bc      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b718:	2304      	movs	r3, #4
 800b71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b71e:	e0b8      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b720:	2308      	movs	r3, #8
 800b722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b726:	e0b4      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b728:	2310      	movs	r3, #16
 800b72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b72e:	e0b0      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b730:	2320      	movs	r3, #32
 800b732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b736:	e0ac      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b738:	2340      	movs	r3, #64	@ 0x40
 800b73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b73e:	e0a8      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b740:	2380      	movs	r3, #128	@ 0x80
 800b742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b746:	e0a4      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a8f      	ldr	r2, [pc, #572]	@ (800b98c <UART_SetConfig+0x6a0>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d130      	bne.n	800b7b4 <UART_SetConfig+0x4c8>
 800b752:	4b8d      	ldr	r3, [pc, #564]	@ (800b988 <UART_SetConfig+0x69c>)
 800b754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b756:	f003 0307 	and.w	r3, r3, #7
 800b75a:	2b05      	cmp	r3, #5
 800b75c:	d826      	bhi.n	800b7ac <UART_SetConfig+0x4c0>
 800b75e:	a201      	add	r2, pc, #4	@ (adr r2, 800b764 <UART_SetConfig+0x478>)
 800b760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b764:	0800b77d 	.word	0x0800b77d
 800b768:	0800b785 	.word	0x0800b785
 800b76c:	0800b78d 	.word	0x0800b78d
 800b770:	0800b795 	.word	0x0800b795
 800b774:	0800b79d 	.word	0x0800b79d
 800b778:	0800b7a5 	.word	0x0800b7a5
 800b77c:	2300      	movs	r3, #0
 800b77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b782:	e086      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b784:	2304      	movs	r3, #4
 800b786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b78a:	e082      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b78c:	2308      	movs	r3, #8
 800b78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b792:	e07e      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b794:	2310      	movs	r3, #16
 800b796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b79a:	e07a      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b79c:	2320      	movs	r3, #32
 800b79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7a2:	e076      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b7a4:	2340      	movs	r3, #64	@ 0x40
 800b7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7aa:	e072      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b7ac:	2380      	movs	r3, #128	@ 0x80
 800b7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7b2:	e06e      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4a75      	ldr	r2, [pc, #468]	@ (800b990 <UART_SetConfig+0x6a4>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d130      	bne.n	800b820 <UART_SetConfig+0x534>
 800b7be:	4b72      	ldr	r3, [pc, #456]	@ (800b988 <UART_SetConfig+0x69c>)
 800b7c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7c2:	f003 0307 	and.w	r3, r3, #7
 800b7c6:	2b05      	cmp	r3, #5
 800b7c8:	d826      	bhi.n	800b818 <UART_SetConfig+0x52c>
 800b7ca:	a201      	add	r2, pc, #4	@ (adr r2, 800b7d0 <UART_SetConfig+0x4e4>)
 800b7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d0:	0800b7e9 	.word	0x0800b7e9
 800b7d4:	0800b7f1 	.word	0x0800b7f1
 800b7d8:	0800b7f9 	.word	0x0800b7f9
 800b7dc:	0800b801 	.word	0x0800b801
 800b7e0:	0800b809 	.word	0x0800b809
 800b7e4:	0800b811 	.word	0x0800b811
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ee:	e050      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b7f0:	2304      	movs	r3, #4
 800b7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7f6:	e04c      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b7f8:	2308      	movs	r3, #8
 800b7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7fe:	e048      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b800:	2310      	movs	r3, #16
 800b802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b806:	e044      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b808:	2320      	movs	r3, #32
 800b80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b80e:	e040      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b810:	2340      	movs	r3, #64	@ 0x40
 800b812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b816:	e03c      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b818:	2380      	movs	r3, #128	@ 0x80
 800b81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b81e:	e038      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a5b      	ldr	r2, [pc, #364]	@ (800b994 <UART_SetConfig+0x6a8>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d130      	bne.n	800b88c <UART_SetConfig+0x5a0>
 800b82a:	4b57      	ldr	r3, [pc, #348]	@ (800b988 <UART_SetConfig+0x69c>)
 800b82c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b82e:	f003 0307 	and.w	r3, r3, #7
 800b832:	2b05      	cmp	r3, #5
 800b834:	d826      	bhi.n	800b884 <UART_SetConfig+0x598>
 800b836:	a201      	add	r2, pc, #4	@ (adr r2, 800b83c <UART_SetConfig+0x550>)
 800b838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b83c:	0800b855 	.word	0x0800b855
 800b840:	0800b85d 	.word	0x0800b85d
 800b844:	0800b865 	.word	0x0800b865
 800b848:	0800b86d 	.word	0x0800b86d
 800b84c:	0800b875 	.word	0x0800b875
 800b850:	0800b87d 	.word	0x0800b87d
 800b854:	2302      	movs	r3, #2
 800b856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b85a:	e01a      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b85c:	2304      	movs	r3, #4
 800b85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b862:	e016      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b864:	2308      	movs	r3, #8
 800b866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b86a:	e012      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b86c:	2310      	movs	r3, #16
 800b86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b872:	e00e      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b874:	2320      	movs	r3, #32
 800b876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b87a:	e00a      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b87c:	2340      	movs	r3, #64	@ 0x40
 800b87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b882:	e006      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b884:	2380      	movs	r3, #128	@ 0x80
 800b886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b88a:	e002      	b.n	800b892 <UART_SetConfig+0x5a6>
 800b88c:	2380      	movs	r3, #128	@ 0x80
 800b88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a3f      	ldr	r2, [pc, #252]	@ (800b994 <UART_SetConfig+0x6a8>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	f040 80f8 	bne.w	800ba8e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b89e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b8a2:	2b20      	cmp	r3, #32
 800b8a4:	dc46      	bgt.n	800b934 <UART_SetConfig+0x648>
 800b8a6:	2b02      	cmp	r3, #2
 800b8a8:	f2c0 8082 	blt.w	800b9b0 <UART_SetConfig+0x6c4>
 800b8ac:	3b02      	subs	r3, #2
 800b8ae:	2b1e      	cmp	r3, #30
 800b8b0:	d87e      	bhi.n	800b9b0 <UART_SetConfig+0x6c4>
 800b8b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b8b8 <UART_SetConfig+0x5cc>)
 800b8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b8:	0800b93b 	.word	0x0800b93b
 800b8bc:	0800b9b1 	.word	0x0800b9b1
 800b8c0:	0800b943 	.word	0x0800b943
 800b8c4:	0800b9b1 	.word	0x0800b9b1
 800b8c8:	0800b9b1 	.word	0x0800b9b1
 800b8cc:	0800b9b1 	.word	0x0800b9b1
 800b8d0:	0800b953 	.word	0x0800b953
 800b8d4:	0800b9b1 	.word	0x0800b9b1
 800b8d8:	0800b9b1 	.word	0x0800b9b1
 800b8dc:	0800b9b1 	.word	0x0800b9b1
 800b8e0:	0800b9b1 	.word	0x0800b9b1
 800b8e4:	0800b9b1 	.word	0x0800b9b1
 800b8e8:	0800b9b1 	.word	0x0800b9b1
 800b8ec:	0800b9b1 	.word	0x0800b9b1
 800b8f0:	0800b963 	.word	0x0800b963
 800b8f4:	0800b9b1 	.word	0x0800b9b1
 800b8f8:	0800b9b1 	.word	0x0800b9b1
 800b8fc:	0800b9b1 	.word	0x0800b9b1
 800b900:	0800b9b1 	.word	0x0800b9b1
 800b904:	0800b9b1 	.word	0x0800b9b1
 800b908:	0800b9b1 	.word	0x0800b9b1
 800b90c:	0800b9b1 	.word	0x0800b9b1
 800b910:	0800b9b1 	.word	0x0800b9b1
 800b914:	0800b9b1 	.word	0x0800b9b1
 800b918:	0800b9b1 	.word	0x0800b9b1
 800b91c:	0800b9b1 	.word	0x0800b9b1
 800b920:	0800b9b1 	.word	0x0800b9b1
 800b924:	0800b9b1 	.word	0x0800b9b1
 800b928:	0800b9b1 	.word	0x0800b9b1
 800b92c:	0800b9b1 	.word	0x0800b9b1
 800b930:	0800b9a3 	.word	0x0800b9a3
 800b934:	2b40      	cmp	r3, #64	@ 0x40
 800b936:	d037      	beq.n	800b9a8 <UART_SetConfig+0x6bc>
 800b938:	e03a      	b.n	800b9b0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b93a:	f7fd f8d5 	bl	8008ae8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b93e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b940:	e03c      	b.n	800b9bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b942:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b946:	4618      	mov	r0, r3
 800b948:	f7fd f8e4 	bl	8008b14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b94e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b950:	e034      	b.n	800b9bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b952:	f107 0318 	add.w	r3, r7, #24
 800b956:	4618      	mov	r0, r3
 800b958:	f7fd fa30 	bl	8008dbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b960:	e02c      	b.n	800b9bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b962:	4b09      	ldr	r3, [pc, #36]	@ (800b988 <UART_SetConfig+0x69c>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f003 0320 	and.w	r3, r3, #32
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d016      	beq.n	800b99c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b96e:	4b06      	ldr	r3, [pc, #24]	@ (800b988 <UART_SetConfig+0x69c>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	08db      	lsrs	r3, r3, #3
 800b974:	f003 0303 	and.w	r3, r3, #3
 800b978:	4a07      	ldr	r2, [pc, #28]	@ (800b998 <UART_SetConfig+0x6ac>)
 800b97a:	fa22 f303 	lsr.w	r3, r2, r3
 800b97e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b980:	e01c      	b.n	800b9bc <UART_SetConfig+0x6d0>
 800b982:	bf00      	nop
 800b984:	40011400 	.word	0x40011400
 800b988:	58024400 	.word	0x58024400
 800b98c:	40007800 	.word	0x40007800
 800b990:	40007c00 	.word	0x40007c00
 800b994:	58000c00 	.word	0x58000c00
 800b998:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b99c:	4b9d      	ldr	r3, [pc, #628]	@ (800bc14 <UART_SetConfig+0x928>)
 800b99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9a0:	e00c      	b.n	800b9bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b9a2:	4b9d      	ldr	r3, [pc, #628]	@ (800bc18 <UART_SetConfig+0x92c>)
 800b9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9a6:	e009      	b.n	800b9bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b9a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b9ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9ae:	e005      	b.n	800b9bc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b9ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b9bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	f000 81de 	beq.w	800bd80 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9c8:	4a94      	ldr	r2, [pc, #592]	@ (800bc1c <UART_SetConfig+0x930>)
 800b9ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9d6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	685a      	ldr	r2, [r3, #4]
 800b9dc:	4613      	mov	r3, r2
 800b9de:	005b      	lsls	r3, r3, #1
 800b9e0:	4413      	add	r3, r2
 800b9e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d305      	bcc.n	800b9f4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b9ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d903      	bls.n	800b9fc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b9fa:	e1c1      	b.n	800bd80 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9fe:	2200      	movs	r2, #0
 800ba00:	60bb      	str	r3, [r7, #8]
 800ba02:	60fa      	str	r2, [r7, #12]
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba08:	4a84      	ldr	r2, [pc, #528]	@ (800bc1c <UART_SetConfig+0x930>)
 800ba0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	2200      	movs	r2, #0
 800ba12:	603b      	str	r3, [r7, #0]
 800ba14:	607a      	str	r2, [r7, #4]
 800ba16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ba1e:	f7f4 fcb7 	bl	8000390 <__aeabi_uldivmod>
 800ba22:	4602      	mov	r2, r0
 800ba24:	460b      	mov	r3, r1
 800ba26:	4610      	mov	r0, r2
 800ba28:	4619      	mov	r1, r3
 800ba2a:	f04f 0200 	mov.w	r2, #0
 800ba2e:	f04f 0300 	mov.w	r3, #0
 800ba32:	020b      	lsls	r3, r1, #8
 800ba34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ba38:	0202      	lsls	r2, r0, #8
 800ba3a:	6979      	ldr	r1, [r7, #20]
 800ba3c:	6849      	ldr	r1, [r1, #4]
 800ba3e:	0849      	lsrs	r1, r1, #1
 800ba40:	2000      	movs	r0, #0
 800ba42:	460c      	mov	r4, r1
 800ba44:	4605      	mov	r5, r0
 800ba46:	eb12 0804 	adds.w	r8, r2, r4
 800ba4a:	eb43 0905 	adc.w	r9, r3, r5
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	469a      	mov	sl, r3
 800ba56:	4693      	mov	fp, r2
 800ba58:	4652      	mov	r2, sl
 800ba5a:	465b      	mov	r3, fp
 800ba5c:	4640      	mov	r0, r8
 800ba5e:	4649      	mov	r1, r9
 800ba60:	f7f4 fc96 	bl	8000390 <__aeabi_uldivmod>
 800ba64:	4602      	mov	r2, r0
 800ba66:	460b      	mov	r3, r1
 800ba68:	4613      	mov	r3, r2
 800ba6a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ba6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba72:	d308      	bcc.n	800ba86 <UART_SetConfig+0x79a>
 800ba74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba7a:	d204      	bcs.n	800ba86 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba82:	60da      	str	r2, [r3, #12]
 800ba84:	e17c      	b.n	800bd80 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ba86:	2301      	movs	r3, #1
 800ba88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ba8c:	e178      	b.n	800bd80 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	69db      	ldr	r3, [r3, #28]
 800ba92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba96:	f040 80c5 	bne.w	800bc24 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ba9a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ba9e:	2b20      	cmp	r3, #32
 800baa0:	dc48      	bgt.n	800bb34 <UART_SetConfig+0x848>
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	db7b      	blt.n	800bb9e <UART_SetConfig+0x8b2>
 800baa6:	2b20      	cmp	r3, #32
 800baa8:	d879      	bhi.n	800bb9e <UART_SetConfig+0x8b2>
 800baaa:	a201      	add	r2, pc, #4	@ (adr r2, 800bab0 <UART_SetConfig+0x7c4>)
 800baac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab0:	0800bb3b 	.word	0x0800bb3b
 800bab4:	0800bb43 	.word	0x0800bb43
 800bab8:	0800bb9f 	.word	0x0800bb9f
 800babc:	0800bb9f 	.word	0x0800bb9f
 800bac0:	0800bb4b 	.word	0x0800bb4b
 800bac4:	0800bb9f 	.word	0x0800bb9f
 800bac8:	0800bb9f 	.word	0x0800bb9f
 800bacc:	0800bb9f 	.word	0x0800bb9f
 800bad0:	0800bb5b 	.word	0x0800bb5b
 800bad4:	0800bb9f 	.word	0x0800bb9f
 800bad8:	0800bb9f 	.word	0x0800bb9f
 800badc:	0800bb9f 	.word	0x0800bb9f
 800bae0:	0800bb9f 	.word	0x0800bb9f
 800bae4:	0800bb9f 	.word	0x0800bb9f
 800bae8:	0800bb9f 	.word	0x0800bb9f
 800baec:	0800bb9f 	.word	0x0800bb9f
 800baf0:	0800bb6b 	.word	0x0800bb6b
 800baf4:	0800bb9f 	.word	0x0800bb9f
 800baf8:	0800bb9f 	.word	0x0800bb9f
 800bafc:	0800bb9f 	.word	0x0800bb9f
 800bb00:	0800bb9f 	.word	0x0800bb9f
 800bb04:	0800bb9f 	.word	0x0800bb9f
 800bb08:	0800bb9f 	.word	0x0800bb9f
 800bb0c:	0800bb9f 	.word	0x0800bb9f
 800bb10:	0800bb9f 	.word	0x0800bb9f
 800bb14:	0800bb9f 	.word	0x0800bb9f
 800bb18:	0800bb9f 	.word	0x0800bb9f
 800bb1c:	0800bb9f 	.word	0x0800bb9f
 800bb20:	0800bb9f 	.word	0x0800bb9f
 800bb24:	0800bb9f 	.word	0x0800bb9f
 800bb28:	0800bb9f 	.word	0x0800bb9f
 800bb2c:	0800bb9f 	.word	0x0800bb9f
 800bb30:	0800bb91 	.word	0x0800bb91
 800bb34:	2b40      	cmp	r3, #64	@ 0x40
 800bb36:	d02e      	beq.n	800bb96 <UART_SetConfig+0x8aa>
 800bb38:	e031      	b.n	800bb9e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb3a:	f7fb fd9f 	bl	800767c <HAL_RCC_GetPCLK1Freq>
 800bb3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bb40:	e033      	b.n	800bbaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb42:	f7fb fdb1 	bl	80076a8 <HAL_RCC_GetPCLK2Freq>
 800bb46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bb48:	e02f      	b.n	800bbaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7fc ffe0 	bl	8008b14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bb54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb58:	e027      	b.n	800bbaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb5a:	f107 0318 	add.w	r3, r7, #24
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7fd f92c 	bl	8008dbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb68:	e01f      	b.n	800bbaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb6a:	4b2d      	ldr	r3, [pc, #180]	@ (800bc20 <UART_SetConfig+0x934>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f003 0320 	and.w	r3, r3, #32
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d009      	beq.n	800bb8a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bb76:	4b2a      	ldr	r3, [pc, #168]	@ (800bc20 <UART_SetConfig+0x934>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	08db      	lsrs	r3, r3, #3
 800bb7c:	f003 0303 	and.w	r3, r3, #3
 800bb80:	4a24      	ldr	r2, [pc, #144]	@ (800bc14 <UART_SetConfig+0x928>)
 800bb82:	fa22 f303 	lsr.w	r3, r2, r3
 800bb86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bb88:	e00f      	b.n	800bbaa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bb8a:	4b22      	ldr	r3, [pc, #136]	@ (800bc14 <UART_SetConfig+0x928>)
 800bb8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb8e:	e00c      	b.n	800bbaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bb90:	4b21      	ldr	r3, [pc, #132]	@ (800bc18 <UART_SetConfig+0x92c>)
 800bb92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb94:	e009      	b.n	800bbaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb9c:	e005      	b.n	800bbaa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bba2:	2301      	movs	r3, #1
 800bba4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bba8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bbaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	f000 80e7 	beq.w	800bd80 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbb6:	4a19      	ldr	r2, [pc, #100]	@ (800bc1c <UART_SetConfig+0x930>)
 800bbb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbc0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbc4:	005a      	lsls	r2, r3, #1
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	085b      	lsrs	r3, r3, #1
 800bbcc:	441a      	add	r2, r3
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbd6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bbd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbda:	2b0f      	cmp	r3, #15
 800bbdc:	d916      	bls.n	800bc0c <UART_SetConfig+0x920>
 800bbde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbe4:	d212      	bcs.n	800bc0c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bbe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	f023 030f 	bic.w	r3, r3, #15
 800bbee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bbf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf2:	085b      	lsrs	r3, r3, #1
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	f003 0307 	and.w	r3, r3, #7
 800bbfa:	b29a      	uxth	r2, r3
 800bbfc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bc08:	60da      	str	r2, [r3, #12]
 800bc0a:	e0b9      	b.n	800bd80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bc12:	e0b5      	b.n	800bd80 <UART_SetConfig+0xa94>
 800bc14:	03d09000 	.word	0x03d09000
 800bc18:	003d0900 	.word	0x003d0900
 800bc1c:	080104e8 	.word	0x080104e8
 800bc20:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bc24:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bc28:	2b20      	cmp	r3, #32
 800bc2a:	dc49      	bgt.n	800bcc0 <UART_SetConfig+0x9d4>
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	db7c      	blt.n	800bd2a <UART_SetConfig+0xa3e>
 800bc30:	2b20      	cmp	r3, #32
 800bc32:	d87a      	bhi.n	800bd2a <UART_SetConfig+0xa3e>
 800bc34:	a201      	add	r2, pc, #4	@ (adr r2, 800bc3c <UART_SetConfig+0x950>)
 800bc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc3a:	bf00      	nop
 800bc3c:	0800bcc7 	.word	0x0800bcc7
 800bc40:	0800bccf 	.word	0x0800bccf
 800bc44:	0800bd2b 	.word	0x0800bd2b
 800bc48:	0800bd2b 	.word	0x0800bd2b
 800bc4c:	0800bcd7 	.word	0x0800bcd7
 800bc50:	0800bd2b 	.word	0x0800bd2b
 800bc54:	0800bd2b 	.word	0x0800bd2b
 800bc58:	0800bd2b 	.word	0x0800bd2b
 800bc5c:	0800bce7 	.word	0x0800bce7
 800bc60:	0800bd2b 	.word	0x0800bd2b
 800bc64:	0800bd2b 	.word	0x0800bd2b
 800bc68:	0800bd2b 	.word	0x0800bd2b
 800bc6c:	0800bd2b 	.word	0x0800bd2b
 800bc70:	0800bd2b 	.word	0x0800bd2b
 800bc74:	0800bd2b 	.word	0x0800bd2b
 800bc78:	0800bd2b 	.word	0x0800bd2b
 800bc7c:	0800bcf7 	.word	0x0800bcf7
 800bc80:	0800bd2b 	.word	0x0800bd2b
 800bc84:	0800bd2b 	.word	0x0800bd2b
 800bc88:	0800bd2b 	.word	0x0800bd2b
 800bc8c:	0800bd2b 	.word	0x0800bd2b
 800bc90:	0800bd2b 	.word	0x0800bd2b
 800bc94:	0800bd2b 	.word	0x0800bd2b
 800bc98:	0800bd2b 	.word	0x0800bd2b
 800bc9c:	0800bd2b 	.word	0x0800bd2b
 800bca0:	0800bd2b 	.word	0x0800bd2b
 800bca4:	0800bd2b 	.word	0x0800bd2b
 800bca8:	0800bd2b 	.word	0x0800bd2b
 800bcac:	0800bd2b 	.word	0x0800bd2b
 800bcb0:	0800bd2b 	.word	0x0800bd2b
 800bcb4:	0800bd2b 	.word	0x0800bd2b
 800bcb8:	0800bd2b 	.word	0x0800bd2b
 800bcbc:	0800bd1d 	.word	0x0800bd1d
 800bcc0:	2b40      	cmp	r3, #64	@ 0x40
 800bcc2:	d02e      	beq.n	800bd22 <UART_SetConfig+0xa36>
 800bcc4:	e031      	b.n	800bd2a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bcc6:	f7fb fcd9 	bl	800767c <HAL_RCC_GetPCLK1Freq>
 800bcca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bccc:	e033      	b.n	800bd36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bcce:	f7fb fceb 	bl	80076a8 <HAL_RCC_GetPCLK2Freq>
 800bcd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bcd4:	e02f      	b.n	800bd36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7fc ff1a 	bl	8008b14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bce4:	e027      	b.n	800bd36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bce6:	f107 0318 	add.w	r3, r7, #24
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fd f866 	bl	8008dbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bcf0:	69fb      	ldr	r3, [r7, #28]
 800bcf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcf4:	e01f      	b.n	800bd36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcf6:	4b2d      	ldr	r3, [pc, #180]	@ (800bdac <UART_SetConfig+0xac0>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f003 0320 	and.w	r3, r3, #32
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d009      	beq.n	800bd16 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bd02:	4b2a      	ldr	r3, [pc, #168]	@ (800bdac <UART_SetConfig+0xac0>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	08db      	lsrs	r3, r3, #3
 800bd08:	f003 0303 	and.w	r3, r3, #3
 800bd0c:	4a28      	ldr	r2, [pc, #160]	@ (800bdb0 <UART_SetConfig+0xac4>)
 800bd0e:	fa22 f303 	lsr.w	r3, r2, r3
 800bd12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bd14:	e00f      	b.n	800bd36 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bd16:	4b26      	ldr	r3, [pc, #152]	@ (800bdb0 <UART_SetConfig+0xac4>)
 800bd18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd1a:	e00c      	b.n	800bd36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bd1c:	4b25      	ldr	r3, [pc, #148]	@ (800bdb4 <UART_SetConfig+0xac8>)
 800bd1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd20:	e009      	b.n	800bd36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd28:	e005      	b.n	800bd36 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bd34:	bf00      	nop
    }

    if (pclk != 0U)
 800bd36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d021      	beq.n	800bd80 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd40:	4a1d      	ldr	r2, [pc, #116]	@ (800bdb8 <UART_SetConfig+0xacc>)
 800bd42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd46:	461a      	mov	r2, r3
 800bd48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd4a:	fbb3 f2f2 	udiv	r2, r3, r2
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	085b      	lsrs	r3, r3, #1
 800bd54:	441a      	add	r2, r3
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd62:	2b0f      	cmp	r3, #15
 800bd64:	d909      	bls.n	800bd7a <UART_SetConfig+0xa8e>
 800bd66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd6c:	d205      	bcs.n	800bd7a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bd6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd70:	b29a      	uxth	r2, r3
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	60da      	str	r2, [r3, #12]
 800bd78:	e002      	b.n	800bd80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	2201      	movs	r2, #1
 800bd84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	2200      	movs	r2, #0
 800bd94:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bd9c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3748      	adds	r7, #72	@ 0x48
 800bda4:	46bd      	mov	sp, r7
 800bda6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bdaa:	bf00      	nop
 800bdac:	58024400 	.word	0x58024400
 800bdb0:	03d09000 	.word	0x03d09000
 800bdb4:	003d0900 	.word	0x003d0900
 800bdb8:	080104e8 	.word	0x080104e8

0800bdbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdc8:	f003 0308 	and.w	r3, r3, #8
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d00a      	beq.n	800bde6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	430a      	orrs	r2, r1
 800bde4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdea:	f003 0301 	and.w	r3, r3, #1
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d00a      	beq.n	800be08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	430a      	orrs	r2, r1
 800be06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be0c:	f003 0302 	and.w	r3, r3, #2
 800be10:	2b00      	cmp	r3, #0
 800be12:	d00a      	beq.n	800be2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	430a      	orrs	r2, r1
 800be28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be2e:	f003 0304 	and.w	r3, r3, #4
 800be32:	2b00      	cmp	r3, #0
 800be34:	d00a      	beq.n	800be4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	430a      	orrs	r2, r1
 800be4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be50:	f003 0310 	and.w	r3, r3, #16
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00a      	beq.n	800be6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	689b      	ldr	r3, [r3, #8]
 800be5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	430a      	orrs	r2, r1
 800be6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be72:	f003 0320 	and.w	r3, r3, #32
 800be76:	2b00      	cmp	r3, #0
 800be78:	d00a      	beq.n	800be90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	430a      	orrs	r2, r1
 800be8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d01a      	beq.n	800bed2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	430a      	orrs	r2, r1
 800beb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800beb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800beba:	d10a      	bne.n	800bed2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	430a      	orrs	r2, r1
 800bed0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d00a      	beq.n	800bef4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	430a      	orrs	r2, r1
 800bef2:	605a      	str	r2, [r3, #4]
  }
}
 800bef4:	bf00      	nop
 800bef6:	370c      	adds	r7, #12
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b098      	sub	sp, #96	@ 0x60
 800bf04:	af02      	add	r7, sp, #8
 800bf06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf10:	f7f7 fdb4 	bl	8003a7c <HAL_GetTick>
 800bf14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f003 0308 	and.w	r3, r3, #8
 800bf20:	2b08      	cmp	r3, #8
 800bf22:	d12f      	bne.n	800bf84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bf28:	9300      	str	r3, [sp, #0]
 800bf2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 f88e 	bl	800c054 <UART_WaitOnFlagUntilTimeout>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d022      	beq.n	800bf84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf46:	e853 3f00 	ldrex	r3, [r3]
 800bf4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bf4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf52:	653b      	str	r3, [r7, #80]	@ 0x50
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	461a      	mov	r2, r3
 800bf5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf5e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bf62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf64:	e841 2300 	strex	r3, r2, [r1]
 800bf68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bf6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d1e6      	bne.n	800bf3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2220      	movs	r2, #32
 800bf74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf80:	2303      	movs	r3, #3
 800bf82:	e063      	b.n	800c04c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f003 0304 	and.w	r3, r3, #4
 800bf8e:	2b04      	cmp	r3, #4
 800bf90:	d149      	bne.n	800c026 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf92:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 f857 	bl	800c054 <UART_WaitOnFlagUntilTimeout>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d03c      	beq.n	800c026 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfb4:	e853 3f00 	ldrex	r3, [r3]
 800bfb8:	623b      	str	r3, [r7, #32]
   return(result);
 800bfba:	6a3b      	ldr	r3, [r7, #32]
 800bfbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bfc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfca:	633b      	str	r3, [r7, #48]	@ 0x30
 800bfcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bfd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfd2:	e841 2300 	strex	r3, r2, [r1]
 800bfd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bfd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d1e6      	bne.n	800bfac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	3308      	adds	r3, #8
 800bfe4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	e853 3f00 	ldrex	r3, [r3]
 800bfec:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f023 0301 	bic.w	r3, r3, #1
 800bff4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	3308      	adds	r3, #8
 800bffc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bffe:	61fa      	str	r2, [r7, #28]
 800c000:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c002:	69b9      	ldr	r1, [r7, #24]
 800c004:	69fa      	ldr	r2, [r7, #28]
 800c006:	e841 2300 	strex	r3, r2, [r1]
 800c00a:	617b      	str	r3, [r7, #20]
   return(result);
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d1e5      	bne.n	800bfde <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2220      	movs	r2, #32
 800c016:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2200      	movs	r2, #0
 800c01e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c022:	2303      	movs	r3, #3
 800c024:	e012      	b.n	800c04c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2220      	movs	r2, #32
 800c02a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2220      	movs	r2, #32
 800c032:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2200      	movs	r2, #0
 800c03a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c04a:	2300      	movs	r3, #0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3758      	adds	r7, #88	@ 0x58
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	603b      	str	r3, [r7, #0]
 800c060:	4613      	mov	r3, r2
 800c062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c064:	e04f      	b.n	800c106 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c066:	69bb      	ldr	r3, [r7, #24]
 800c068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c06c:	d04b      	beq.n	800c106 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c06e:	f7f7 fd05 	bl	8003a7c <HAL_GetTick>
 800c072:	4602      	mov	r2, r0
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	1ad3      	subs	r3, r2, r3
 800c078:	69ba      	ldr	r2, [r7, #24]
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d302      	bcc.n	800c084 <UART_WaitOnFlagUntilTimeout+0x30>
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d101      	bne.n	800c088 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c084:	2303      	movs	r3, #3
 800c086:	e04e      	b.n	800c126 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f003 0304 	and.w	r3, r3, #4
 800c092:	2b00      	cmp	r3, #0
 800c094:	d037      	beq.n	800c106 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	2b80      	cmp	r3, #128	@ 0x80
 800c09a:	d034      	beq.n	800c106 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	2b40      	cmp	r3, #64	@ 0x40
 800c0a0:	d031      	beq.n	800c106 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	69db      	ldr	r3, [r3, #28]
 800c0a8:	f003 0308 	and.w	r3, r3, #8
 800c0ac:	2b08      	cmp	r3, #8
 800c0ae:	d110      	bne.n	800c0d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	2208      	movs	r2, #8
 800c0b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c0b8:	68f8      	ldr	r0, [r7, #12]
 800c0ba:	f000 f95b 	bl	800c374 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2208      	movs	r2, #8
 800c0c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e029      	b.n	800c126 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	69db      	ldr	r3, [r3, #28]
 800c0d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c0dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c0e0:	d111      	bne.n	800c106 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c0ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c0ec:	68f8      	ldr	r0, [r7, #12]
 800c0ee:	f000 f941 	bl	800c374 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2220      	movs	r2, #32
 800c0f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c102:	2303      	movs	r3, #3
 800c104:	e00f      	b.n	800c126 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	69da      	ldr	r2, [r3, #28]
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	4013      	ands	r3, r2
 800c110:	68ba      	ldr	r2, [r7, #8]
 800c112:	429a      	cmp	r2, r3
 800c114:	bf0c      	ite	eq
 800c116:	2301      	moveq	r3, #1
 800c118:	2300      	movne	r3, #0
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	461a      	mov	r2, r3
 800c11e:	79fb      	ldrb	r3, [r7, #7]
 800c120:	429a      	cmp	r2, r3
 800c122:	d0a0      	beq.n	800c066 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c124:	2300      	movs	r3, #0
}
 800c126:	4618      	mov	r0, r3
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
	...

0800c130 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c130:	b480      	push	{r7}
 800c132:	b0a3      	sub	sp, #140	@ 0x8c
 800c134:	af00      	add	r7, sp, #0
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	4613      	mov	r3, r2
 800c13c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	68ba      	ldr	r2, [r7, #8]
 800c142:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	88fa      	ldrh	r2, [r7, #6]
 800c148:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	88fa      	ldrh	r2, [r7, #6]
 800c150:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2200      	movs	r2, #0
 800c158:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	689b      	ldr	r3, [r3, #8]
 800c15e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c162:	d10e      	bne.n	800c182 <UART_Start_Receive_IT+0x52>
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	691b      	ldr	r3, [r3, #16]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d105      	bne.n	800c178 <UART_Start_Receive_IT+0x48>
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c172:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c176:	e02d      	b.n	800c1d4 <UART_Start_Receive_IT+0xa4>
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	22ff      	movs	r2, #255	@ 0xff
 800c17c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c180:	e028      	b.n	800c1d4 <UART_Start_Receive_IT+0xa4>
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d10d      	bne.n	800c1a6 <UART_Start_Receive_IT+0x76>
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	691b      	ldr	r3, [r3, #16]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d104      	bne.n	800c19c <UART_Start_Receive_IT+0x6c>
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	22ff      	movs	r2, #255	@ 0xff
 800c196:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c19a:	e01b      	b.n	800c1d4 <UART_Start_Receive_IT+0xa4>
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	227f      	movs	r2, #127	@ 0x7f
 800c1a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c1a4:	e016      	b.n	800c1d4 <UART_Start_Receive_IT+0xa4>
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	689b      	ldr	r3, [r3, #8]
 800c1aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c1ae:	d10d      	bne.n	800c1cc <UART_Start_Receive_IT+0x9c>
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	691b      	ldr	r3, [r3, #16]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d104      	bne.n	800c1c2 <UART_Start_Receive_IT+0x92>
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	227f      	movs	r2, #127	@ 0x7f
 800c1bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c1c0:	e008      	b.n	800c1d4 <UART_Start_Receive_IT+0xa4>
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	223f      	movs	r2, #63	@ 0x3f
 800c1c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c1ca:	e003      	b.n	800c1d4 <UART_Start_Receive_IT+0xa4>
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2222      	movs	r2, #34	@ 0x22
 800c1e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	3308      	adds	r3, #8
 800c1ea:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c1ee:	e853 3f00 	ldrex	r3, [r3]
 800c1f2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c1f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c1f6:	f043 0301 	orr.w	r3, r3, #1
 800c1fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	3308      	adds	r3, #8
 800c204:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c208:	673a      	str	r2, [r7, #112]	@ 0x70
 800c20a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c20c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c20e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c210:	e841 2300 	strex	r3, r2, [r1]
 800c214:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800c216:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d1e3      	bne.n	800c1e4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c220:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c224:	d14f      	bne.n	800c2c6 <UART_Start_Receive_IT+0x196>
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c22c:	88fa      	ldrh	r2, [r7, #6]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d349      	bcc.n	800c2c6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	689b      	ldr	r3, [r3, #8]
 800c236:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c23a:	d107      	bne.n	800c24c <UART_Start_Receive_IT+0x11c>
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	691b      	ldr	r3, [r3, #16]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d103      	bne.n	800c24c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	4a47      	ldr	r2, [pc, #284]	@ (800c364 <UART_Start_Receive_IT+0x234>)
 800c248:	675a      	str	r2, [r3, #116]	@ 0x74
 800c24a:	e002      	b.n	800c252 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	4a46      	ldr	r2, [pc, #280]	@ (800c368 <UART_Start_Receive_IT+0x238>)
 800c250:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	691b      	ldr	r3, [r3, #16]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d01a      	beq.n	800c290 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c260:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c262:	e853 3f00 	ldrex	r3, [r3]
 800c266:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c268:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c26a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c26e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	461a      	mov	r2, r3
 800c278:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c27c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c27e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c280:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c282:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c284:	e841 2300 	strex	r3, r2, [r1]
 800c288:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800c28a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d1e4      	bne.n	800c25a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	3308      	adds	r3, #8
 800c296:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c29a:	e853 3f00 	ldrex	r3, [r3]
 800c29e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c2a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	3308      	adds	r3, #8
 800c2ae:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c2b0:	64ba      	str	r2, [r7, #72]	@ 0x48
 800c2b2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c2b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c2b8:	e841 2300 	strex	r3, r2, [r1]
 800c2bc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c2be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d1e5      	bne.n	800c290 <UART_Start_Receive_IT+0x160>
 800c2c4:	e046      	b.n	800c354 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	689b      	ldr	r3, [r3, #8]
 800c2ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2ce:	d107      	bne.n	800c2e0 <UART_Start_Receive_IT+0x1b0>
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	691b      	ldr	r3, [r3, #16]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d103      	bne.n	800c2e0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	4a24      	ldr	r2, [pc, #144]	@ (800c36c <UART_Start_Receive_IT+0x23c>)
 800c2dc:	675a      	str	r2, [r3, #116]	@ 0x74
 800c2de:	e002      	b.n	800c2e6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	4a23      	ldr	r2, [pc, #140]	@ (800c370 <UART_Start_Receive_IT+0x240>)
 800c2e4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	691b      	ldr	r3, [r3, #16]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d019      	beq.n	800c322 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f6:	e853 3f00 	ldrex	r3, [r3]
 800c2fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2fe:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800c302:	677b      	str	r3, [r7, #116]	@ 0x74
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	461a      	mov	r2, r3
 800c30a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c30c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c30e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c310:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c312:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c314:	e841 2300 	strex	r3, r2, [r1]
 800c318:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c31a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d1e6      	bne.n	800c2ee <UART_Start_Receive_IT+0x1be>
 800c320:	e018      	b.n	800c354 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	e853 3f00 	ldrex	r3, [r3]
 800c32e:	613b      	str	r3, [r7, #16]
   return(result);
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	f043 0320 	orr.w	r3, r3, #32
 800c336:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	461a      	mov	r2, r3
 800c33e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c340:	623b      	str	r3, [r7, #32]
 800c342:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c344:	69f9      	ldr	r1, [r7, #28]
 800c346:	6a3a      	ldr	r2, [r7, #32]
 800c348:	e841 2300 	strex	r3, r2, [r1]
 800c34c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d1e6      	bne.n	800c322 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800c354:	2300      	movs	r3, #0
}
 800c356:	4618      	mov	r0, r3
 800c358:	378c      	adds	r7, #140	@ 0x8c
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr
 800c362:	bf00      	nop
 800c364:	0800cb95 	.word	0x0800cb95
 800c368:	0800c835 	.word	0x0800c835
 800c36c:	0800c67d 	.word	0x0800c67d
 800c370:	0800c4c5 	.word	0x0800c4c5

0800c374 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c374:	b480      	push	{r7}
 800c376:	b095      	sub	sp, #84	@ 0x54
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c384:	e853 3f00 	ldrex	r3, [r3]
 800c388:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c38c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c390:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	461a      	mov	r2, r3
 800c398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c39a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c39c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c39e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c3a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c3a2:	e841 2300 	strex	r3, r2, [r1]
 800c3a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d1e6      	bne.n	800c37c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	3308      	adds	r3, #8
 800c3b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3b6:	6a3b      	ldr	r3, [r7, #32]
 800c3b8:	e853 3f00 	ldrex	r3, [r3]
 800c3bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800c3be:	69fa      	ldr	r2, [r7, #28]
 800c3c0:	4b1e      	ldr	r3, [pc, #120]	@ (800c43c <UART_EndRxTransfer+0xc8>)
 800c3c2:	4013      	ands	r3, r2
 800c3c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	3308      	adds	r3, #8
 800c3cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c3ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c3d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c3d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3d6:	e841 2300 	strex	r3, r2, [r1]
 800c3da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d1e5      	bne.n	800c3ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	d118      	bne.n	800c41c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	e853 3f00 	ldrex	r3, [r3]
 800c3f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	f023 0310 	bic.w	r3, r3, #16
 800c3fe:	647b      	str	r3, [r7, #68]	@ 0x44
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	461a      	mov	r2, r3
 800c406:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c408:	61bb      	str	r3, [r7, #24]
 800c40a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c40c:	6979      	ldr	r1, [r7, #20]
 800c40e:	69ba      	ldr	r2, [r7, #24]
 800c410:	e841 2300 	strex	r3, r2, [r1]
 800c414:	613b      	str	r3, [r7, #16]
   return(result);
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d1e6      	bne.n	800c3ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2220      	movs	r2, #32
 800c420:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2200      	movs	r2, #0
 800c428:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2200      	movs	r2, #0
 800c42e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c430:	bf00      	nop
 800c432:	3754      	adds	r7, #84	@ 0x54
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr
 800c43c:	effffffe 	.word	0xeffffffe

0800c440 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c44c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2200      	movs	r2, #0
 800c452:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2200      	movs	r2, #0
 800c45a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c45e:	68f8      	ldr	r0, [r7, #12]
 800c460:	f7fe ff2e 	bl	800b2c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c464:	bf00      	nop
 800c466:	3710      	adds	r7, #16
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b088      	sub	sp, #32
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	e853 3f00 	ldrex	r3, [r3]
 800c480:	60bb      	str	r3, [r7, #8]
   return(result);
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c488:	61fb      	str	r3, [r7, #28]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	461a      	mov	r2, r3
 800c490:	69fb      	ldr	r3, [r7, #28]
 800c492:	61bb      	str	r3, [r7, #24]
 800c494:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c496:	6979      	ldr	r1, [r7, #20]
 800c498:	69ba      	ldr	r2, [r7, #24]
 800c49a:	e841 2300 	strex	r3, r2, [r1]
 800c49e:	613b      	str	r3, [r7, #16]
   return(result);
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d1e6      	bne.n	800c474 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2220      	movs	r2, #32
 800c4aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f7f5 fced 	bl	8001e94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4ba:	bf00      	nop
 800c4bc:	3720      	adds	r7, #32
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
	...

0800c4c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b09c      	sub	sp, #112	@ 0x70
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c4d2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c4dc:	2b22      	cmp	r3, #34	@ 0x22
 800c4de:	f040 80be 	bne.w	800c65e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c4ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c4f0:	b2d9      	uxtb	r1, r3
 800c4f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c4f6:	b2da      	uxtb	r2, r3
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4fc:	400a      	ands	r2, r1
 800c4fe:	b2d2      	uxtb	r2, r2
 800c500:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c506:	1c5a      	adds	r2, r3, #1
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c512:	b29b      	uxth	r3, r3
 800c514:	3b01      	subs	r3, #1
 800c516:	b29a      	uxth	r2, r3
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c524:	b29b      	uxth	r3, r3
 800c526:	2b00      	cmp	r3, #0
 800c528:	f040 80a1 	bne.w	800c66e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c534:	e853 3f00 	ldrex	r3, [r3]
 800c538:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c53a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c53c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c540:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	461a      	mov	r2, r3
 800c548:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c54a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c54c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c54e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c550:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c552:	e841 2300 	strex	r3, r2, [r1]
 800c556:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c558:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d1e6      	bne.n	800c52c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	3308      	adds	r3, #8
 800c564:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c568:	e853 3f00 	ldrex	r3, [r3]
 800c56c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c56e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c570:	f023 0301 	bic.w	r3, r3, #1
 800c574:	667b      	str	r3, [r7, #100]	@ 0x64
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	3308      	adds	r3, #8
 800c57c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c57e:	647a      	str	r2, [r7, #68]	@ 0x44
 800c580:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c582:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c584:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c586:	e841 2300 	strex	r3, r2, [r1]
 800c58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c58c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d1e5      	bne.n	800c55e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2220      	movs	r2, #32
 800c596:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2200      	movs	r2, #0
 800c59e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a33      	ldr	r2, [pc, #204]	@ (800c678 <UART_RxISR_8BIT+0x1b4>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d01f      	beq.n	800c5f0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d018      	beq.n	800c5f0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c6:	e853 3f00 	ldrex	r3, [r3]
 800c5ca:	623b      	str	r3, [r7, #32]
   return(result);
 800c5cc:	6a3b      	ldr	r3, [r7, #32]
 800c5ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c5d2:	663b      	str	r3, [r7, #96]	@ 0x60
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	461a      	mov	r2, r3
 800c5da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c5dc:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c5e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5e4:	e841 2300 	strex	r3, r2, [r1]
 800c5e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c5ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d1e6      	bne.n	800c5be <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d12e      	bne.n	800c656 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	e853 3f00 	ldrex	r3, [r3]
 800c60a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f023 0310 	bic.w	r3, r3, #16
 800c612:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	461a      	mov	r2, r3
 800c61a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c61c:	61fb      	str	r3, [r7, #28]
 800c61e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c620:	69b9      	ldr	r1, [r7, #24]
 800c622:	69fa      	ldr	r2, [r7, #28]
 800c624:	e841 2300 	strex	r3, r2, [r1]
 800c628:	617b      	str	r3, [r7, #20]
   return(result);
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d1e6      	bne.n	800c5fe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	69db      	ldr	r3, [r3, #28]
 800c636:	f003 0310 	and.w	r3, r3, #16
 800c63a:	2b10      	cmp	r3, #16
 800c63c:	d103      	bne.n	800c646 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	2210      	movs	r2, #16
 800c644:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c64c:	4619      	mov	r1, r3
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f7fe fe40 	bl	800b2d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c654:	e00b      	b.n	800c66e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f7f5 fc0c 	bl	8001e74 <HAL_UART_RxCpltCallback>
}
 800c65c:	e007      	b.n	800c66e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	699a      	ldr	r2, [r3, #24]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f042 0208 	orr.w	r2, r2, #8
 800c66c:	619a      	str	r2, [r3, #24]
}
 800c66e:	bf00      	nop
 800c670:	3770      	adds	r7, #112	@ 0x70
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	58000c00 	.word	0x58000c00

0800c67c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b09c      	sub	sp, #112	@ 0x70
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c68a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c694:	2b22      	cmp	r3, #34	@ 0x22
 800c696:	f040 80be 	bne.w	800c816 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c6aa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800c6ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c6b2:	4013      	ands	r3, r2
 800c6b4:	b29a      	uxth	r2, r3
 800c6b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c6b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6be:	1c9a      	adds	r2, r3, #2
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c6ca:	b29b      	uxth	r3, r3
 800c6cc:	3b01      	subs	r3, #1
 800c6ce:	b29a      	uxth	r2, r3
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c6dc:	b29b      	uxth	r3, r3
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	f040 80a1 	bne.w	800c826 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6ec:	e853 3f00 	ldrex	r3, [r3]
 800c6f0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c6f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c6f8:	667b      	str	r3, [r7, #100]	@ 0x64
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	461a      	mov	r2, r3
 800c700:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c702:	657b      	str	r3, [r7, #84]	@ 0x54
 800c704:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c706:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c708:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c70a:	e841 2300 	strex	r3, r2, [r1]
 800c70e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c712:	2b00      	cmp	r3, #0
 800c714:	d1e6      	bne.n	800c6e4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	3308      	adds	r3, #8
 800c71c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c71e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c720:	e853 3f00 	ldrex	r3, [r3]
 800c724:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c728:	f023 0301 	bic.w	r3, r3, #1
 800c72c:	663b      	str	r3, [r7, #96]	@ 0x60
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	3308      	adds	r3, #8
 800c734:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c736:	643a      	str	r2, [r7, #64]	@ 0x40
 800c738:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c73a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c73c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c73e:	e841 2300 	strex	r3, r2, [r1]
 800c742:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c746:	2b00      	cmp	r3, #0
 800c748:	d1e5      	bne.n	800c716 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2220      	movs	r2, #32
 800c74e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2200      	movs	r2, #0
 800c756:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2200      	movs	r2, #0
 800c75c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a33      	ldr	r2, [pc, #204]	@ (800c830 <UART_RxISR_16BIT+0x1b4>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d01f      	beq.n	800c7a8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c772:	2b00      	cmp	r3, #0
 800c774:	d018      	beq.n	800c7a8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c77c:	6a3b      	ldr	r3, [r7, #32]
 800c77e:	e853 3f00 	ldrex	r3, [r3]
 800c782:	61fb      	str	r3, [r7, #28]
   return(result);
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c78a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	461a      	mov	r2, r3
 800c792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c796:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c798:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c79a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c79c:	e841 2300 	strex	r3, r2, [r1]
 800c7a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d1e6      	bne.n	800c776 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d12e      	bne.n	800c80e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	e853 3f00 	ldrex	r3, [r3]
 800c7c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	f023 0310 	bic.w	r3, r3, #16
 800c7ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c7d4:	61bb      	str	r3, [r7, #24]
 800c7d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7d8:	6979      	ldr	r1, [r7, #20]
 800c7da:	69ba      	ldr	r2, [r7, #24]
 800c7dc:	e841 2300 	strex	r3, r2, [r1]
 800c7e0:	613b      	str	r3, [r7, #16]
   return(result);
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d1e6      	bne.n	800c7b6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	69db      	ldr	r3, [r3, #28]
 800c7ee:	f003 0310 	and.w	r3, r3, #16
 800c7f2:	2b10      	cmp	r3, #16
 800c7f4:	d103      	bne.n	800c7fe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	2210      	movs	r2, #16
 800c7fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c804:	4619      	mov	r1, r3
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f7fe fd64 	bl	800b2d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c80c:	e00b      	b.n	800c826 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f7f5 fb30 	bl	8001e74 <HAL_UART_RxCpltCallback>
}
 800c814:	e007      	b.n	800c826 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	699a      	ldr	r2, [r3, #24]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f042 0208 	orr.w	r2, r2, #8
 800c824:	619a      	str	r2, [r3, #24]
}
 800c826:	bf00      	nop
 800c828:	3770      	adds	r7, #112	@ 0x70
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
 800c82e:	bf00      	nop
 800c830:	58000c00 	.word	0x58000c00

0800c834 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b0ac      	sub	sp, #176	@ 0xb0
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c842:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	69db      	ldr	r3, [r3, #28]
 800c84c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c86a:	2b22      	cmp	r3, #34	@ 0x22
 800c86c:	f040 8180 	bne.w	800cb70 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c876:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c87a:	e123      	b.n	800cac4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c882:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c886:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800c88a:	b2d9      	uxtb	r1, r3
 800c88c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800c890:	b2da      	uxtb	r2, r3
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c896:	400a      	ands	r2, r1
 800c898:	b2d2      	uxtb	r2, r2
 800c89a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8a0:	1c5a      	adds	r2, r3, #1
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c8ac:	b29b      	uxth	r3, r3
 800c8ae:	3b01      	subs	r3, #1
 800c8b0:	b29a      	uxth	r2, r3
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	69db      	ldr	r3, [r3, #28]
 800c8be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c8c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c8c6:	f003 0307 	and.w	r3, r3, #7
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d053      	beq.n	800c976 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c8ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c8d2:	f003 0301 	and.w	r3, r3, #1
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d011      	beq.n	800c8fe <UART_RxISR_8BIT_FIFOEN+0xca>
 800c8da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c8de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d00b      	beq.n	800c8fe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8f4:	f043 0201 	orr.w	r2, r3, #1
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c8fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c902:	f003 0302 	and.w	r3, r3, #2
 800c906:	2b00      	cmp	r3, #0
 800c908:	d011      	beq.n	800c92e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c90a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c90e:	f003 0301 	and.w	r3, r3, #1
 800c912:	2b00      	cmp	r3, #0
 800c914:	d00b      	beq.n	800c92e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	2202      	movs	r2, #2
 800c91c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c924:	f043 0204 	orr.w	r2, r3, #4
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c92e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c932:	f003 0304 	and.w	r3, r3, #4
 800c936:	2b00      	cmp	r3, #0
 800c938:	d011      	beq.n	800c95e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c93a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c93e:	f003 0301 	and.w	r3, r3, #1
 800c942:	2b00      	cmp	r3, #0
 800c944:	d00b      	beq.n	800c95e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	2204      	movs	r2, #4
 800c94c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c954:	f043 0202 	orr.w	r2, r3, #2
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c964:	2b00      	cmp	r3, #0
 800c966:	d006      	beq.n	800c976 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f7fe fca9 	bl	800b2c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2200      	movs	r2, #0
 800c972:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	2b00      	cmp	r3, #0
 800c980:	f040 80a0 	bne.w	800cac4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c98a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c98c:	e853 3f00 	ldrex	r3, [r3]
 800c990:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800c992:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c994:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c998:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c9a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c9a8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9aa:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800c9ac:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c9ae:	e841 2300 	strex	r3, r2, [r1]
 800c9b2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800c9b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d1e4      	bne.n	800c984 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	3308      	adds	r3, #8
 800c9c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c9c4:	e853 3f00 	ldrex	r3, [r3]
 800c9c8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c9ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c9cc:	4b6e      	ldr	r3, [pc, #440]	@ (800cb88 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800c9ce:	4013      	ands	r3, r2
 800c9d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	3308      	adds	r3, #8
 800c9da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c9de:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c9e0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c9e4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c9e6:	e841 2300 	strex	r3, r2, [r1]
 800c9ea:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c9ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d1e3      	bne.n	800c9ba <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2220      	movs	r2, #32
 800c9f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2200      	movs	r2, #0
 800ca04:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a60      	ldr	r2, [pc, #384]	@ (800cb8c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d021      	beq.n	800ca54 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d01a      	beq.n	800ca54 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca26:	e853 3f00 	ldrex	r3, [r3]
 800ca2a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ca2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ca32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	461a      	mov	r2, r3
 800ca3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ca40:	657b      	str	r3, [r7, #84]	@ 0x54
 800ca42:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca44:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ca46:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ca48:	e841 2300 	strex	r3, r2, [r1]
 800ca4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ca4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d1e4      	bne.n	800ca1e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d130      	bne.n	800cabe <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca6a:	e853 3f00 	ldrex	r3, [r3]
 800ca6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ca70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca72:	f023 0310 	bic.w	r3, r3, #16
 800ca76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	461a      	mov	r2, r3
 800ca80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ca84:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca86:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ca8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ca8c:	e841 2300 	strex	r3, r2, [r1]
 800ca90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ca92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d1e4      	bne.n	800ca62 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	69db      	ldr	r3, [r3, #28]
 800ca9e:	f003 0310 	and.w	r3, r3, #16
 800caa2:	2b10      	cmp	r3, #16
 800caa4:	d103      	bne.n	800caae <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2210      	movs	r2, #16
 800caac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cab4:	4619      	mov	r1, r3
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f7fe fc0c 	bl	800b2d4 <HAL_UARTEx_RxEventCallback>
 800cabc:	e002      	b.n	800cac4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f7f5 f9d8 	bl	8001e74 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cac4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d006      	beq.n	800cada <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800cacc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cad0:	f003 0320 	and.w	r3, r3, #32
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f47f aed1 	bne.w	800c87c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cae0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cae4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d049      	beq.n	800cb80 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800caf2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d242      	bcs.n	800cb80 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	3308      	adds	r3, #8
 800cb00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb02:	6a3b      	ldr	r3, [r7, #32]
 800cb04:	e853 3f00 	ldrex	r3, [r3]
 800cb08:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb0a:	69fb      	ldr	r3, [r7, #28]
 800cb0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cb10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	3308      	adds	r3, #8
 800cb1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800cb1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cb20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb26:	e841 2300 	strex	r3, r2, [r1]
 800cb2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d1e3      	bne.n	800cafa <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	4a16      	ldr	r2, [pc, #88]	@ (800cb90 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800cb36:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	e853 3f00 	ldrex	r3, [r3]
 800cb44:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	f043 0320 	orr.w	r3, r3, #32
 800cb4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	461a      	mov	r2, r3
 800cb56:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cb5a:	61bb      	str	r3, [r7, #24]
 800cb5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb5e:	6979      	ldr	r1, [r7, #20]
 800cb60:	69ba      	ldr	r2, [r7, #24]
 800cb62:	e841 2300 	strex	r3, r2, [r1]
 800cb66:	613b      	str	r3, [r7, #16]
   return(result);
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d1e4      	bne.n	800cb38 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cb6e:	e007      	b.n	800cb80 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	699a      	ldr	r2, [r3, #24]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f042 0208 	orr.w	r2, r2, #8
 800cb7e:	619a      	str	r2, [r3, #24]
}
 800cb80:	bf00      	nop
 800cb82:	37b0      	adds	r7, #176	@ 0xb0
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}
 800cb88:	effffffe 	.word	0xeffffffe
 800cb8c:	58000c00 	.word	0x58000c00
 800cb90:	0800c4c5 	.word	0x0800c4c5

0800cb94 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b0ae      	sub	sp, #184	@ 0xb8
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cba2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	69db      	ldr	r3, [r3, #28]
 800cbac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	689b      	ldr	r3, [r3, #8]
 800cbc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cbca:	2b22      	cmp	r3, #34	@ 0x22
 800cbcc:	f040 8184 	bne.w	800ced8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cbd6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cbda:	e127      	b.n	800ce2c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbe2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cbea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800cbee:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800cbf2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800cbf6:	4013      	ands	r3, r2
 800cbf8:	b29a      	uxth	r2, r3
 800cbfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cbfe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc04:	1c9a      	adds	r2, r3, #2
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	3b01      	subs	r3, #1
 800cc14:	b29a      	uxth	r2, r3
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	69db      	ldr	r3, [r3, #28]
 800cc22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cc26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cc2a:	f003 0307 	and.w	r3, r3, #7
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d053      	beq.n	800ccda <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cc32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cc36:	f003 0301 	and.w	r3, r3, #1
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d011      	beq.n	800cc62 <UART_RxISR_16BIT_FIFOEN+0xce>
 800cc3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d00b      	beq.n	800cc62 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc58:	f043 0201 	orr.w	r2, r3, #1
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cc66:	f003 0302 	and.w	r3, r3, #2
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d011      	beq.n	800cc92 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800cc6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cc72:	f003 0301 	and.w	r3, r3, #1
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d00b      	beq.n	800cc92 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2202      	movs	r2, #2
 800cc80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc88:	f043 0204 	orr.w	r2, r3, #4
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cc96:	f003 0304 	and.w	r3, r3, #4
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d011      	beq.n	800ccc2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800cc9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cca2:	f003 0301 	and.w	r3, r3, #1
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d00b      	beq.n	800ccc2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	2204      	movs	r2, #4
 800ccb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccb8:	f043 0202 	orr.w	r2, r3, #2
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d006      	beq.n	800ccda <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f7fe faf7 	bl	800b2c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	f040 80a2 	bne.w	800ce2c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ccf0:	e853 3f00 	ldrex	r3, [r3]
 800ccf4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ccf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ccf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ccfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	461a      	mov	r2, r3
 800cd06:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cd0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cd0e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cd12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cd16:	e841 2300 	strex	r3, r2, [r1]
 800cd1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cd1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d1e2      	bne.n	800cce8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	3308      	adds	r3, #8
 800cd28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cd2c:	e853 3f00 	ldrex	r3, [r3]
 800cd30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cd32:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cd34:	4b6e      	ldr	r3, [pc, #440]	@ (800cef0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800cd36:	4013      	ands	r3, r2
 800cd38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	3308      	adds	r3, #8
 800cd42:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800cd46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cd48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cd4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cd4e:	e841 2300 	strex	r3, r2, [r1]
 800cd52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cd54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d1e3      	bne.n	800cd22 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2220      	movs	r2, #32
 800cd5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2200      	movs	r2, #0
 800cd66:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	4a60      	ldr	r2, [pc, #384]	@ (800cef4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d021      	beq.n	800cdbc <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d01a      	beq.n	800cdbc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd8e:	e853 3f00 	ldrex	r3, [r3]
 800cd92:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cd94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cd9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	461a      	mov	r2, r3
 800cda4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cda8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cdaa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cdae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cdb0:	e841 2300 	strex	r3, r2, [r1]
 800cdb4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cdb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d1e4      	bne.n	800cd86 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	d130      	bne.n	800ce26 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdd2:	e853 3f00 	ldrex	r3, [r3]
 800cdd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cdd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdda:	f023 0310 	bic.w	r3, r3, #16
 800cdde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	461a      	mov	r2, r3
 800cde8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cdec:	647b      	str	r3, [r7, #68]	@ 0x44
 800cdee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cdf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cdf4:	e841 2300 	strex	r3, r2, [r1]
 800cdf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cdfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d1e4      	bne.n	800cdca <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	69db      	ldr	r3, [r3, #28]
 800ce06:	f003 0310 	and.w	r3, r3, #16
 800ce0a:	2b10      	cmp	r3, #16
 800ce0c:	d103      	bne.n	800ce16 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	2210      	movs	r2, #16
 800ce14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f7fe fa58 	bl	800b2d4 <HAL_UARTEx_RxEventCallback>
 800ce24:	e002      	b.n	800ce2c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f7f5 f824 	bl	8001e74 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ce2c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d006      	beq.n	800ce42 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800ce34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ce38:	f003 0320 	and.w	r3, r3, #32
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	f47f aecd 	bne.w	800cbdc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ce48:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ce4c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d049      	beq.n	800cee8 <UART_RxISR_16BIT_FIFOEN+0x354>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ce5a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d242      	bcs.n	800cee8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	3308      	adds	r3, #8
 800ce68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce6c:	e853 3f00 	ldrex	r3, [r3]
 800ce70:	623b      	str	r3, [r7, #32]
   return(result);
 800ce72:	6a3b      	ldr	r3, [r7, #32]
 800ce74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ce78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	3308      	adds	r3, #8
 800ce82:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ce86:	633a      	str	r2, [r7, #48]	@ 0x30
 800ce88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce8e:	e841 2300 	strex	r3, r2, [r1]
 800ce92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ce94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d1e3      	bne.n	800ce62 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	4a16      	ldr	r2, [pc, #88]	@ (800cef8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800ce9e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	e853 3f00 	ldrex	r3, [r3]
 800ceac:	60fb      	str	r3, [r7, #12]
   return(result);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	f043 0320 	orr.w	r3, r3, #32
 800ceb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	461a      	mov	r2, r3
 800cebe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cec2:	61fb      	str	r3, [r7, #28]
 800cec4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cec6:	69b9      	ldr	r1, [r7, #24]
 800cec8:	69fa      	ldr	r2, [r7, #28]
 800ceca:	e841 2300 	strex	r3, r2, [r1]
 800cece:	617b      	str	r3, [r7, #20]
   return(result);
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d1e4      	bne.n	800cea0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ced6:	e007      	b.n	800cee8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	699a      	ldr	r2, [r3, #24]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f042 0208 	orr.w	r2, r2, #8
 800cee6:	619a      	str	r2, [r3, #24]
}
 800cee8:	bf00      	nop
 800ceea:	37b8      	adds	r7, #184	@ 0xb8
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	effffffe 	.word	0xeffffffe
 800cef4:	58000c00 	.word	0x58000c00
 800cef8:	0800c67d 	.word	0x0800c67d

0800cefc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cf04:	bf00      	nop
 800cf06:	370c      	adds	r7, #12
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr

0800cf10 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b083      	sub	sp, #12
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cf18:	bf00      	nop
 800cf1a:	370c      	adds	r7, #12
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr

0800cf24 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b083      	sub	sp, #12
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cf2c:	bf00      	nop
 800cf2e:	370c      	adds	r7, #12
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr

0800cf38 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b085      	sub	sp, #20
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d101      	bne.n	800cf4e <HAL_UARTEx_DisableFifoMode+0x16>
 800cf4a:	2302      	movs	r3, #2
 800cf4c:	e027      	b.n	800cf9e <HAL_UARTEx_DisableFifoMode+0x66>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2201      	movs	r2, #1
 800cf52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2224      	movs	r2, #36	@ 0x24
 800cf5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f022 0201 	bic.w	r2, r2, #1
 800cf74:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cf7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2200      	movs	r2, #0
 800cf82:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	68fa      	ldr	r2, [r7, #12]
 800cf8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2220      	movs	r2, #32
 800cf90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf9c:	2300      	movs	r3, #0
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3714      	adds	r7, #20
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa8:	4770      	bx	lr

0800cfaa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cfaa:	b580      	push	{r7, lr}
 800cfac:	b084      	sub	sp, #16
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	6078      	str	r0, [r7, #4]
 800cfb2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cfba:	2b01      	cmp	r3, #1
 800cfbc:	d101      	bne.n	800cfc2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cfbe:	2302      	movs	r3, #2
 800cfc0:	e02d      	b.n	800d01e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2224      	movs	r2, #36	@ 0x24
 800cfce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	681a      	ldr	r2, [r3, #0]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f022 0201 	bic.w	r2, r2, #1
 800cfe8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	689b      	ldr	r3, [r3, #8]
 800cff0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	683a      	ldr	r2, [r7, #0]
 800cffa:	430a      	orrs	r2, r1
 800cffc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f000 f850 	bl	800d0a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	68fa      	ldr	r2, [r7, #12]
 800d00a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2220      	movs	r2, #32
 800d010:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d01c:	2300      	movs	r3, #0
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3710      	adds	r7, #16
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}

0800d026 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d026:	b580      	push	{r7, lr}
 800d028:	b084      	sub	sp, #16
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
 800d02e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d036:	2b01      	cmp	r3, #1
 800d038:	d101      	bne.n	800d03e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d03a:	2302      	movs	r3, #2
 800d03c:	e02d      	b.n	800d09a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2201      	movs	r2, #1
 800d042:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2224      	movs	r2, #36	@ 0x24
 800d04a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f022 0201 	bic.w	r2, r2, #1
 800d064:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	689b      	ldr	r3, [r3, #8]
 800d06c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	683a      	ldr	r2, [r7, #0]
 800d076:	430a      	orrs	r2, r1
 800d078:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f000 f812 	bl	800d0a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	68fa      	ldr	r2, [r7, #12]
 800d086:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2220      	movs	r2, #32
 800d08c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2200      	movs	r2, #0
 800d094:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d098:	2300      	movs	r3, #0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3710      	adds	r7, #16
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
	...

0800d0a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b085      	sub	sp, #20
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d108      	bne.n	800d0c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2201      	movs	r2, #1
 800d0c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d0c4:	e031      	b.n	800d12a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d0c6:	2310      	movs	r3, #16
 800d0c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d0ca:	2310      	movs	r3, #16
 800d0cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	689b      	ldr	r3, [r3, #8]
 800d0d4:	0e5b      	lsrs	r3, r3, #25
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	f003 0307 	and.w	r3, r3, #7
 800d0dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	689b      	ldr	r3, [r3, #8]
 800d0e4:	0f5b      	lsrs	r3, r3, #29
 800d0e6:	b2db      	uxtb	r3, r3
 800d0e8:	f003 0307 	and.w	r3, r3, #7
 800d0ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d0ee:	7bbb      	ldrb	r3, [r7, #14]
 800d0f0:	7b3a      	ldrb	r2, [r7, #12]
 800d0f2:	4911      	ldr	r1, [pc, #68]	@ (800d138 <UARTEx_SetNbDataToProcess+0x94>)
 800d0f4:	5c8a      	ldrb	r2, [r1, r2]
 800d0f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d0fa:	7b3a      	ldrb	r2, [r7, #12]
 800d0fc:	490f      	ldr	r1, [pc, #60]	@ (800d13c <UARTEx_SetNbDataToProcess+0x98>)
 800d0fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d100:	fb93 f3f2 	sdiv	r3, r3, r2
 800d104:	b29a      	uxth	r2, r3
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d10c:	7bfb      	ldrb	r3, [r7, #15]
 800d10e:	7b7a      	ldrb	r2, [r7, #13]
 800d110:	4909      	ldr	r1, [pc, #36]	@ (800d138 <UARTEx_SetNbDataToProcess+0x94>)
 800d112:	5c8a      	ldrb	r2, [r1, r2]
 800d114:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d118:	7b7a      	ldrb	r2, [r7, #13]
 800d11a:	4908      	ldr	r1, [pc, #32]	@ (800d13c <UARTEx_SetNbDataToProcess+0x98>)
 800d11c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d11e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d122:	b29a      	uxth	r2, r3
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d12a:	bf00      	nop
 800d12c:	3714      	adds	r7, #20
 800d12e:	46bd      	mov	sp, r7
 800d130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d134:	4770      	bx	lr
 800d136:	bf00      	nop
 800d138:	08010500 	.word	0x08010500
 800d13c:	08010508 	.word	0x08010508

0800d140 <__cvt>:
 800d140:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d142:	ed2d 8b02 	vpush	{d8}
 800d146:	eeb0 8b40 	vmov.f64	d8, d0
 800d14a:	b085      	sub	sp, #20
 800d14c:	4617      	mov	r7, r2
 800d14e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800d150:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d152:	ee18 2a90 	vmov	r2, s17
 800d156:	f025 0520 	bic.w	r5, r5, #32
 800d15a:	2a00      	cmp	r2, #0
 800d15c:	bfb6      	itet	lt
 800d15e:	222d      	movlt	r2, #45	@ 0x2d
 800d160:	2200      	movge	r2, #0
 800d162:	eeb1 8b40 	vneglt.f64	d8, d0
 800d166:	2d46      	cmp	r5, #70	@ 0x46
 800d168:	460c      	mov	r4, r1
 800d16a:	701a      	strb	r2, [r3, #0]
 800d16c:	d004      	beq.n	800d178 <__cvt+0x38>
 800d16e:	2d45      	cmp	r5, #69	@ 0x45
 800d170:	d100      	bne.n	800d174 <__cvt+0x34>
 800d172:	3401      	adds	r4, #1
 800d174:	2102      	movs	r1, #2
 800d176:	e000      	b.n	800d17a <__cvt+0x3a>
 800d178:	2103      	movs	r1, #3
 800d17a:	ab03      	add	r3, sp, #12
 800d17c:	9301      	str	r3, [sp, #4]
 800d17e:	ab02      	add	r3, sp, #8
 800d180:	9300      	str	r3, [sp, #0]
 800d182:	4622      	mov	r2, r4
 800d184:	4633      	mov	r3, r6
 800d186:	eeb0 0b48 	vmov.f64	d0, d8
 800d18a:	f000 fe21 	bl	800ddd0 <_dtoa_r>
 800d18e:	2d47      	cmp	r5, #71	@ 0x47
 800d190:	d114      	bne.n	800d1bc <__cvt+0x7c>
 800d192:	07fb      	lsls	r3, r7, #31
 800d194:	d50a      	bpl.n	800d1ac <__cvt+0x6c>
 800d196:	1902      	adds	r2, r0, r4
 800d198:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d19c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1a0:	bf08      	it	eq
 800d1a2:	9203      	streq	r2, [sp, #12]
 800d1a4:	2130      	movs	r1, #48	@ 0x30
 800d1a6:	9b03      	ldr	r3, [sp, #12]
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d319      	bcc.n	800d1e0 <__cvt+0xa0>
 800d1ac:	9b03      	ldr	r3, [sp, #12]
 800d1ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1b0:	1a1b      	subs	r3, r3, r0
 800d1b2:	6013      	str	r3, [r2, #0]
 800d1b4:	b005      	add	sp, #20
 800d1b6:	ecbd 8b02 	vpop	{d8}
 800d1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1bc:	2d46      	cmp	r5, #70	@ 0x46
 800d1be:	eb00 0204 	add.w	r2, r0, r4
 800d1c2:	d1e9      	bne.n	800d198 <__cvt+0x58>
 800d1c4:	7803      	ldrb	r3, [r0, #0]
 800d1c6:	2b30      	cmp	r3, #48	@ 0x30
 800d1c8:	d107      	bne.n	800d1da <__cvt+0x9a>
 800d1ca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1d2:	bf1c      	itt	ne
 800d1d4:	f1c4 0401 	rsbne	r4, r4, #1
 800d1d8:	6034      	strne	r4, [r6, #0]
 800d1da:	6833      	ldr	r3, [r6, #0]
 800d1dc:	441a      	add	r2, r3
 800d1de:	e7db      	b.n	800d198 <__cvt+0x58>
 800d1e0:	1c5c      	adds	r4, r3, #1
 800d1e2:	9403      	str	r4, [sp, #12]
 800d1e4:	7019      	strb	r1, [r3, #0]
 800d1e6:	e7de      	b.n	800d1a6 <__cvt+0x66>

0800d1e8 <__exponent>:
 800d1e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1ea:	2900      	cmp	r1, #0
 800d1ec:	bfba      	itte	lt
 800d1ee:	4249      	neglt	r1, r1
 800d1f0:	232d      	movlt	r3, #45	@ 0x2d
 800d1f2:	232b      	movge	r3, #43	@ 0x2b
 800d1f4:	2909      	cmp	r1, #9
 800d1f6:	7002      	strb	r2, [r0, #0]
 800d1f8:	7043      	strb	r3, [r0, #1]
 800d1fa:	dd29      	ble.n	800d250 <__exponent+0x68>
 800d1fc:	f10d 0307 	add.w	r3, sp, #7
 800d200:	461d      	mov	r5, r3
 800d202:	270a      	movs	r7, #10
 800d204:	461a      	mov	r2, r3
 800d206:	fbb1 f6f7 	udiv	r6, r1, r7
 800d20a:	fb07 1416 	mls	r4, r7, r6, r1
 800d20e:	3430      	adds	r4, #48	@ 0x30
 800d210:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d214:	460c      	mov	r4, r1
 800d216:	2c63      	cmp	r4, #99	@ 0x63
 800d218:	f103 33ff 	add.w	r3, r3, #4294967295
 800d21c:	4631      	mov	r1, r6
 800d21e:	dcf1      	bgt.n	800d204 <__exponent+0x1c>
 800d220:	3130      	adds	r1, #48	@ 0x30
 800d222:	1e94      	subs	r4, r2, #2
 800d224:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d228:	1c41      	adds	r1, r0, #1
 800d22a:	4623      	mov	r3, r4
 800d22c:	42ab      	cmp	r3, r5
 800d22e:	d30a      	bcc.n	800d246 <__exponent+0x5e>
 800d230:	f10d 0309 	add.w	r3, sp, #9
 800d234:	1a9b      	subs	r3, r3, r2
 800d236:	42ac      	cmp	r4, r5
 800d238:	bf88      	it	hi
 800d23a:	2300      	movhi	r3, #0
 800d23c:	3302      	adds	r3, #2
 800d23e:	4403      	add	r3, r0
 800d240:	1a18      	subs	r0, r3, r0
 800d242:	b003      	add	sp, #12
 800d244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d246:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d24a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d24e:	e7ed      	b.n	800d22c <__exponent+0x44>
 800d250:	2330      	movs	r3, #48	@ 0x30
 800d252:	3130      	adds	r1, #48	@ 0x30
 800d254:	7083      	strb	r3, [r0, #2]
 800d256:	70c1      	strb	r1, [r0, #3]
 800d258:	1d03      	adds	r3, r0, #4
 800d25a:	e7f1      	b.n	800d240 <__exponent+0x58>
 800d25c:	0000      	movs	r0, r0
	...

0800d260 <_printf_float>:
 800d260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d264:	b08d      	sub	sp, #52	@ 0x34
 800d266:	460c      	mov	r4, r1
 800d268:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d26c:	4616      	mov	r6, r2
 800d26e:	461f      	mov	r7, r3
 800d270:	4605      	mov	r5, r0
 800d272:	f000 fcab 	bl	800dbcc <_localeconv_r>
 800d276:	f8d0 b000 	ldr.w	fp, [r0]
 800d27a:	4658      	mov	r0, fp
 800d27c:	f7f3 f880 	bl	8000380 <strlen>
 800d280:	2300      	movs	r3, #0
 800d282:	930a      	str	r3, [sp, #40]	@ 0x28
 800d284:	f8d8 3000 	ldr.w	r3, [r8]
 800d288:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d28c:	6822      	ldr	r2, [r4, #0]
 800d28e:	9005      	str	r0, [sp, #20]
 800d290:	3307      	adds	r3, #7
 800d292:	f023 0307 	bic.w	r3, r3, #7
 800d296:	f103 0108 	add.w	r1, r3, #8
 800d29a:	f8c8 1000 	str.w	r1, [r8]
 800d29e:	ed93 0b00 	vldr	d0, [r3]
 800d2a2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800d500 <_printf_float+0x2a0>
 800d2a6:	eeb0 7bc0 	vabs.f64	d7, d0
 800d2aa:	eeb4 7b46 	vcmp.f64	d7, d6
 800d2ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2b2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800d2b6:	dd24      	ble.n	800d302 <_printf_float+0xa2>
 800d2b8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d2bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2c0:	d502      	bpl.n	800d2c8 <_printf_float+0x68>
 800d2c2:	232d      	movs	r3, #45	@ 0x2d
 800d2c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2c8:	498f      	ldr	r1, [pc, #572]	@ (800d508 <_printf_float+0x2a8>)
 800d2ca:	4b90      	ldr	r3, [pc, #576]	@ (800d50c <_printf_float+0x2ac>)
 800d2cc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800d2d0:	bf94      	ite	ls
 800d2d2:	4688      	movls	r8, r1
 800d2d4:	4698      	movhi	r8, r3
 800d2d6:	f022 0204 	bic.w	r2, r2, #4
 800d2da:	2303      	movs	r3, #3
 800d2dc:	6123      	str	r3, [r4, #16]
 800d2de:	6022      	str	r2, [r4, #0]
 800d2e0:	f04f 0a00 	mov.w	sl, #0
 800d2e4:	9700      	str	r7, [sp, #0]
 800d2e6:	4633      	mov	r3, r6
 800d2e8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d2ea:	4621      	mov	r1, r4
 800d2ec:	4628      	mov	r0, r5
 800d2ee:	f000 f9d1 	bl	800d694 <_printf_common>
 800d2f2:	3001      	adds	r0, #1
 800d2f4:	f040 8089 	bne.w	800d40a <_printf_float+0x1aa>
 800d2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2fc:	b00d      	add	sp, #52	@ 0x34
 800d2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d302:	eeb4 0b40 	vcmp.f64	d0, d0
 800d306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d30a:	d709      	bvc.n	800d320 <_printf_float+0xc0>
 800d30c:	ee10 3a90 	vmov	r3, s1
 800d310:	2b00      	cmp	r3, #0
 800d312:	bfbc      	itt	lt
 800d314:	232d      	movlt	r3, #45	@ 0x2d
 800d316:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d31a:	497d      	ldr	r1, [pc, #500]	@ (800d510 <_printf_float+0x2b0>)
 800d31c:	4b7d      	ldr	r3, [pc, #500]	@ (800d514 <_printf_float+0x2b4>)
 800d31e:	e7d5      	b.n	800d2cc <_printf_float+0x6c>
 800d320:	6863      	ldr	r3, [r4, #4]
 800d322:	1c59      	adds	r1, r3, #1
 800d324:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800d328:	d139      	bne.n	800d39e <_printf_float+0x13e>
 800d32a:	2306      	movs	r3, #6
 800d32c:	6063      	str	r3, [r4, #4]
 800d32e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d332:	2300      	movs	r3, #0
 800d334:	6022      	str	r2, [r4, #0]
 800d336:	9303      	str	r3, [sp, #12]
 800d338:	ab0a      	add	r3, sp, #40	@ 0x28
 800d33a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d33e:	ab09      	add	r3, sp, #36	@ 0x24
 800d340:	9300      	str	r3, [sp, #0]
 800d342:	6861      	ldr	r1, [r4, #4]
 800d344:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d348:	4628      	mov	r0, r5
 800d34a:	f7ff fef9 	bl	800d140 <__cvt>
 800d34e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d352:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d354:	4680      	mov	r8, r0
 800d356:	d129      	bne.n	800d3ac <_printf_float+0x14c>
 800d358:	1cc8      	adds	r0, r1, #3
 800d35a:	db02      	blt.n	800d362 <_printf_float+0x102>
 800d35c:	6863      	ldr	r3, [r4, #4]
 800d35e:	4299      	cmp	r1, r3
 800d360:	dd41      	ble.n	800d3e6 <_printf_float+0x186>
 800d362:	f1a9 0902 	sub.w	r9, r9, #2
 800d366:	fa5f f989 	uxtb.w	r9, r9
 800d36a:	3901      	subs	r1, #1
 800d36c:	464a      	mov	r2, r9
 800d36e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d372:	9109      	str	r1, [sp, #36]	@ 0x24
 800d374:	f7ff ff38 	bl	800d1e8 <__exponent>
 800d378:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d37a:	1813      	adds	r3, r2, r0
 800d37c:	2a01      	cmp	r2, #1
 800d37e:	4682      	mov	sl, r0
 800d380:	6123      	str	r3, [r4, #16]
 800d382:	dc02      	bgt.n	800d38a <_printf_float+0x12a>
 800d384:	6822      	ldr	r2, [r4, #0]
 800d386:	07d2      	lsls	r2, r2, #31
 800d388:	d501      	bpl.n	800d38e <_printf_float+0x12e>
 800d38a:	3301      	adds	r3, #1
 800d38c:	6123      	str	r3, [r4, #16]
 800d38e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d392:	2b00      	cmp	r3, #0
 800d394:	d0a6      	beq.n	800d2e4 <_printf_float+0x84>
 800d396:	232d      	movs	r3, #45	@ 0x2d
 800d398:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d39c:	e7a2      	b.n	800d2e4 <_printf_float+0x84>
 800d39e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d3a2:	d1c4      	bne.n	800d32e <_printf_float+0xce>
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d1c2      	bne.n	800d32e <_printf_float+0xce>
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	e7bf      	b.n	800d32c <_printf_float+0xcc>
 800d3ac:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800d3b0:	d9db      	bls.n	800d36a <_printf_float+0x10a>
 800d3b2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800d3b6:	d118      	bne.n	800d3ea <_printf_float+0x18a>
 800d3b8:	2900      	cmp	r1, #0
 800d3ba:	6863      	ldr	r3, [r4, #4]
 800d3bc:	dd0b      	ble.n	800d3d6 <_printf_float+0x176>
 800d3be:	6121      	str	r1, [r4, #16]
 800d3c0:	b913      	cbnz	r3, 800d3c8 <_printf_float+0x168>
 800d3c2:	6822      	ldr	r2, [r4, #0]
 800d3c4:	07d0      	lsls	r0, r2, #31
 800d3c6:	d502      	bpl.n	800d3ce <_printf_float+0x16e>
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	440b      	add	r3, r1
 800d3cc:	6123      	str	r3, [r4, #16]
 800d3ce:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d3d0:	f04f 0a00 	mov.w	sl, #0
 800d3d4:	e7db      	b.n	800d38e <_printf_float+0x12e>
 800d3d6:	b913      	cbnz	r3, 800d3de <_printf_float+0x17e>
 800d3d8:	6822      	ldr	r2, [r4, #0]
 800d3da:	07d2      	lsls	r2, r2, #31
 800d3dc:	d501      	bpl.n	800d3e2 <_printf_float+0x182>
 800d3de:	3302      	adds	r3, #2
 800d3e0:	e7f4      	b.n	800d3cc <_printf_float+0x16c>
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	e7f2      	b.n	800d3cc <_printf_float+0x16c>
 800d3e6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800d3ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3ec:	4299      	cmp	r1, r3
 800d3ee:	db05      	blt.n	800d3fc <_printf_float+0x19c>
 800d3f0:	6823      	ldr	r3, [r4, #0]
 800d3f2:	6121      	str	r1, [r4, #16]
 800d3f4:	07d8      	lsls	r0, r3, #31
 800d3f6:	d5ea      	bpl.n	800d3ce <_printf_float+0x16e>
 800d3f8:	1c4b      	adds	r3, r1, #1
 800d3fa:	e7e7      	b.n	800d3cc <_printf_float+0x16c>
 800d3fc:	2900      	cmp	r1, #0
 800d3fe:	bfd4      	ite	le
 800d400:	f1c1 0202 	rsble	r2, r1, #2
 800d404:	2201      	movgt	r2, #1
 800d406:	4413      	add	r3, r2
 800d408:	e7e0      	b.n	800d3cc <_printf_float+0x16c>
 800d40a:	6823      	ldr	r3, [r4, #0]
 800d40c:	055a      	lsls	r2, r3, #21
 800d40e:	d407      	bmi.n	800d420 <_printf_float+0x1c0>
 800d410:	6923      	ldr	r3, [r4, #16]
 800d412:	4642      	mov	r2, r8
 800d414:	4631      	mov	r1, r6
 800d416:	4628      	mov	r0, r5
 800d418:	47b8      	blx	r7
 800d41a:	3001      	adds	r0, #1
 800d41c:	d12a      	bne.n	800d474 <_printf_float+0x214>
 800d41e:	e76b      	b.n	800d2f8 <_printf_float+0x98>
 800d420:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800d424:	f240 80e0 	bls.w	800d5e8 <_printf_float+0x388>
 800d428:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800d42c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d434:	d133      	bne.n	800d49e <_printf_float+0x23e>
 800d436:	4a38      	ldr	r2, [pc, #224]	@ (800d518 <_printf_float+0x2b8>)
 800d438:	2301      	movs	r3, #1
 800d43a:	4631      	mov	r1, r6
 800d43c:	4628      	mov	r0, r5
 800d43e:	47b8      	blx	r7
 800d440:	3001      	adds	r0, #1
 800d442:	f43f af59 	beq.w	800d2f8 <_printf_float+0x98>
 800d446:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d44a:	4543      	cmp	r3, r8
 800d44c:	db02      	blt.n	800d454 <_printf_float+0x1f4>
 800d44e:	6823      	ldr	r3, [r4, #0]
 800d450:	07d8      	lsls	r0, r3, #31
 800d452:	d50f      	bpl.n	800d474 <_printf_float+0x214>
 800d454:	9b05      	ldr	r3, [sp, #20]
 800d456:	465a      	mov	r2, fp
 800d458:	4631      	mov	r1, r6
 800d45a:	4628      	mov	r0, r5
 800d45c:	47b8      	blx	r7
 800d45e:	3001      	adds	r0, #1
 800d460:	f43f af4a 	beq.w	800d2f8 <_printf_float+0x98>
 800d464:	f04f 0900 	mov.w	r9, #0
 800d468:	f108 38ff 	add.w	r8, r8, #4294967295
 800d46c:	f104 0a1a 	add.w	sl, r4, #26
 800d470:	45c8      	cmp	r8, r9
 800d472:	dc09      	bgt.n	800d488 <_printf_float+0x228>
 800d474:	6823      	ldr	r3, [r4, #0]
 800d476:	079b      	lsls	r3, r3, #30
 800d478:	f100 8107 	bmi.w	800d68a <_printf_float+0x42a>
 800d47c:	68e0      	ldr	r0, [r4, #12]
 800d47e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d480:	4298      	cmp	r0, r3
 800d482:	bfb8      	it	lt
 800d484:	4618      	movlt	r0, r3
 800d486:	e739      	b.n	800d2fc <_printf_float+0x9c>
 800d488:	2301      	movs	r3, #1
 800d48a:	4652      	mov	r2, sl
 800d48c:	4631      	mov	r1, r6
 800d48e:	4628      	mov	r0, r5
 800d490:	47b8      	blx	r7
 800d492:	3001      	adds	r0, #1
 800d494:	f43f af30 	beq.w	800d2f8 <_printf_float+0x98>
 800d498:	f109 0901 	add.w	r9, r9, #1
 800d49c:	e7e8      	b.n	800d470 <_printf_float+0x210>
 800d49e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	dc3b      	bgt.n	800d51c <_printf_float+0x2bc>
 800d4a4:	4a1c      	ldr	r2, [pc, #112]	@ (800d518 <_printf_float+0x2b8>)
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	4631      	mov	r1, r6
 800d4aa:	4628      	mov	r0, r5
 800d4ac:	47b8      	blx	r7
 800d4ae:	3001      	adds	r0, #1
 800d4b0:	f43f af22 	beq.w	800d2f8 <_printf_float+0x98>
 800d4b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d4b8:	ea59 0303 	orrs.w	r3, r9, r3
 800d4bc:	d102      	bne.n	800d4c4 <_printf_float+0x264>
 800d4be:	6823      	ldr	r3, [r4, #0]
 800d4c0:	07d9      	lsls	r1, r3, #31
 800d4c2:	d5d7      	bpl.n	800d474 <_printf_float+0x214>
 800d4c4:	9b05      	ldr	r3, [sp, #20]
 800d4c6:	465a      	mov	r2, fp
 800d4c8:	4631      	mov	r1, r6
 800d4ca:	4628      	mov	r0, r5
 800d4cc:	47b8      	blx	r7
 800d4ce:	3001      	adds	r0, #1
 800d4d0:	f43f af12 	beq.w	800d2f8 <_printf_float+0x98>
 800d4d4:	f04f 0a00 	mov.w	sl, #0
 800d4d8:	f104 0b1a 	add.w	fp, r4, #26
 800d4dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4de:	425b      	negs	r3, r3
 800d4e0:	4553      	cmp	r3, sl
 800d4e2:	dc01      	bgt.n	800d4e8 <_printf_float+0x288>
 800d4e4:	464b      	mov	r3, r9
 800d4e6:	e794      	b.n	800d412 <_printf_float+0x1b2>
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	465a      	mov	r2, fp
 800d4ec:	4631      	mov	r1, r6
 800d4ee:	4628      	mov	r0, r5
 800d4f0:	47b8      	blx	r7
 800d4f2:	3001      	adds	r0, #1
 800d4f4:	f43f af00 	beq.w	800d2f8 <_printf_float+0x98>
 800d4f8:	f10a 0a01 	add.w	sl, sl, #1
 800d4fc:	e7ee      	b.n	800d4dc <_printf_float+0x27c>
 800d4fe:	bf00      	nop
 800d500:	ffffffff 	.word	0xffffffff
 800d504:	7fefffff 	.word	0x7fefffff
 800d508:	08010510 	.word	0x08010510
 800d50c:	08010514 	.word	0x08010514
 800d510:	08010518 	.word	0x08010518
 800d514:	0801051c 	.word	0x0801051c
 800d518:	08010520 	.word	0x08010520
 800d51c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d51e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d522:	4553      	cmp	r3, sl
 800d524:	bfa8      	it	ge
 800d526:	4653      	movge	r3, sl
 800d528:	2b00      	cmp	r3, #0
 800d52a:	4699      	mov	r9, r3
 800d52c:	dc37      	bgt.n	800d59e <_printf_float+0x33e>
 800d52e:	2300      	movs	r3, #0
 800d530:	9307      	str	r3, [sp, #28]
 800d532:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d536:	f104 021a 	add.w	r2, r4, #26
 800d53a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d53c:	9907      	ldr	r1, [sp, #28]
 800d53e:	9306      	str	r3, [sp, #24]
 800d540:	eba3 0309 	sub.w	r3, r3, r9
 800d544:	428b      	cmp	r3, r1
 800d546:	dc31      	bgt.n	800d5ac <_printf_float+0x34c>
 800d548:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d54a:	459a      	cmp	sl, r3
 800d54c:	dc3b      	bgt.n	800d5c6 <_printf_float+0x366>
 800d54e:	6823      	ldr	r3, [r4, #0]
 800d550:	07da      	lsls	r2, r3, #31
 800d552:	d438      	bmi.n	800d5c6 <_printf_float+0x366>
 800d554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d556:	ebaa 0903 	sub.w	r9, sl, r3
 800d55a:	9b06      	ldr	r3, [sp, #24]
 800d55c:	ebaa 0303 	sub.w	r3, sl, r3
 800d560:	4599      	cmp	r9, r3
 800d562:	bfa8      	it	ge
 800d564:	4699      	movge	r9, r3
 800d566:	f1b9 0f00 	cmp.w	r9, #0
 800d56a:	dc34      	bgt.n	800d5d6 <_printf_float+0x376>
 800d56c:	f04f 0800 	mov.w	r8, #0
 800d570:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d574:	f104 0b1a 	add.w	fp, r4, #26
 800d578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d57a:	ebaa 0303 	sub.w	r3, sl, r3
 800d57e:	eba3 0309 	sub.w	r3, r3, r9
 800d582:	4543      	cmp	r3, r8
 800d584:	f77f af76 	ble.w	800d474 <_printf_float+0x214>
 800d588:	2301      	movs	r3, #1
 800d58a:	465a      	mov	r2, fp
 800d58c:	4631      	mov	r1, r6
 800d58e:	4628      	mov	r0, r5
 800d590:	47b8      	blx	r7
 800d592:	3001      	adds	r0, #1
 800d594:	f43f aeb0 	beq.w	800d2f8 <_printf_float+0x98>
 800d598:	f108 0801 	add.w	r8, r8, #1
 800d59c:	e7ec      	b.n	800d578 <_printf_float+0x318>
 800d59e:	4642      	mov	r2, r8
 800d5a0:	4631      	mov	r1, r6
 800d5a2:	4628      	mov	r0, r5
 800d5a4:	47b8      	blx	r7
 800d5a6:	3001      	adds	r0, #1
 800d5a8:	d1c1      	bne.n	800d52e <_printf_float+0x2ce>
 800d5aa:	e6a5      	b.n	800d2f8 <_printf_float+0x98>
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	4631      	mov	r1, r6
 800d5b0:	4628      	mov	r0, r5
 800d5b2:	9206      	str	r2, [sp, #24]
 800d5b4:	47b8      	blx	r7
 800d5b6:	3001      	adds	r0, #1
 800d5b8:	f43f ae9e 	beq.w	800d2f8 <_printf_float+0x98>
 800d5bc:	9b07      	ldr	r3, [sp, #28]
 800d5be:	9a06      	ldr	r2, [sp, #24]
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	9307      	str	r3, [sp, #28]
 800d5c4:	e7b9      	b.n	800d53a <_printf_float+0x2da>
 800d5c6:	9b05      	ldr	r3, [sp, #20]
 800d5c8:	465a      	mov	r2, fp
 800d5ca:	4631      	mov	r1, r6
 800d5cc:	4628      	mov	r0, r5
 800d5ce:	47b8      	blx	r7
 800d5d0:	3001      	adds	r0, #1
 800d5d2:	d1bf      	bne.n	800d554 <_printf_float+0x2f4>
 800d5d4:	e690      	b.n	800d2f8 <_printf_float+0x98>
 800d5d6:	9a06      	ldr	r2, [sp, #24]
 800d5d8:	464b      	mov	r3, r9
 800d5da:	4442      	add	r2, r8
 800d5dc:	4631      	mov	r1, r6
 800d5de:	4628      	mov	r0, r5
 800d5e0:	47b8      	blx	r7
 800d5e2:	3001      	adds	r0, #1
 800d5e4:	d1c2      	bne.n	800d56c <_printf_float+0x30c>
 800d5e6:	e687      	b.n	800d2f8 <_printf_float+0x98>
 800d5e8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800d5ec:	f1b9 0f01 	cmp.w	r9, #1
 800d5f0:	dc01      	bgt.n	800d5f6 <_printf_float+0x396>
 800d5f2:	07db      	lsls	r3, r3, #31
 800d5f4:	d536      	bpl.n	800d664 <_printf_float+0x404>
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	4642      	mov	r2, r8
 800d5fa:	4631      	mov	r1, r6
 800d5fc:	4628      	mov	r0, r5
 800d5fe:	47b8      	blx	r7
 800d600:	3001      	adds	r0, #1
 800d602:	f43f ae79 	beq.w	800d2f8 <_printf_float+0x98>
 800d606:	9b05      	ldr	r3, [sp, #20]
 800d608:	465a      	mov	r2, fp
 800d60a:	4631      	mov	r1, r6
 800d60c:	4628      	mov	r0, r5
 800d60e:	47b8      	blx	r7
 800d610:	3001      	adds	r0, #1
 800d612:	f43f ae71 	beq.w	800d2f8 <_printf_float+0x98>
 800d616:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800d61a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d622:	f109 39ff 	add.w	r9, r9, #4294967295
 800d626:	d018      	beq.n	800d65a <_printf_float+0x3fa>
 800d628:	464b      	mov	r3, r9
 800d62a:	f108 0201 	add.w	r2, r8, #1
 800d62e:	4631      	mov	r1, r6
 800d630:	4628      	mov	r0, r5
 800d632:	47b8      	blx	r7
 800d634:	3001      	adds	r0, #1
 800d636:	d10c      	bne.n	800d652 <_printf_float+0x3f2>
 800d638:	e65e      	b.n	800d2f8 <_printf_float+0x98>
 800d63a:	2301      	movs	r3, #1
 800d63c:	465a      	mov	r2, fp
 800d63e:	4631      	mov	r1, r6
 800d640:	4628      	mov	r0, r5
 800d642:	47b8      	blx	r7
 800d644:	3001      	adds	r0, #1
 800d646:	f43f ae57 	beq.w	800d2f8 <_printf_float+0x98>
 800d64a:	f108 0801 	add.w	r8, r8, #1
 800d64e:	45c8      	cmp	r8, r9
 800d650:	dbf3      	blt.n	800d63a <_printf_float+0x3da>
 800d652:	4653      	mov	r3, sl
 800d654:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d658:	e6dc      	b.n	800d414 <_printf_float+0x1b4>
 800d65a:	f04f 0800 	mov.w	r8, #0
 800d65e:	f104 0b1a 	add.w	fp, r4, #26
 800d662:	e7f4      	b.n	800d64e <_printf_float+0x3ee>
 800d664:	2301      	movs	r3, #1
 800d666:	4642      	mov	r2, r8
 800d668:	e7e1      	b.n	800d62e <_printf_float+0x3ce>
 800d66a:	2301      	movs	r3, #1
 800d66c:	464a      	mov	r2, r9
 800d66e:	4631      	mov	r1, r6
 800d670:	4628      	mov	r0, r5
 800d672:	47b8      	blx	r7
 800d674:	3001      	adds	r0, #1
 800d676:	f43f ae3f 	beq.w	800d2f8 <_printf_float+0x98>
 800d67a:	f108 0801 	add.w	r8, r8, #1
 800d67e:	68e3      	ldr	r3, [r4, #12]
 800d680:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d682:	1a5b      	subs	r3, r3, r1
 800d684:	4543      	cmp	r3, r8
 800d686:	dcf0      	bgt.n	800d66a <_printf_float+0x40a>
 800d688:	e6f8      	b.n	800d47c <_printf_float+0x21c>
 800d68a:	f04f 0800 	mov.w	r8, #0
 800d68e:	f104 0919 	add.w	r9, r4, #25
 800d692:	e7f4      	b.n	800d67e <_printf_float+0x41e>

0800d694 <_printf_common>:
 800d694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d698:	4616      	mov	r6, r2
 800d69a:	4698      	mov	r8, r3
 800d69c:	688a      	ldr	r2, [r1, #8]
 800d69e:	690b      	ldr	r3, [r1, #16]
 800d6a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	bfb8      	it	lt
 800d6a8:	4613      	movlt	r3, r2
 800d6aa:	6033      	str	r3, [r6, #0]
 800d6ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d6b0:	4607      	mov	r7, r0
 800d6b2:	460c      	mov	r4, r1
 800d6b4:	b10a      	cbz	r2, 800d6ba <_printf_common+0x26>
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	6033      	str	r3, [r6, #0]
 800d6ba:	6823      	ldr	r3, [r4, #0]
 800d6bc:	0699      	lsls	r1, r3, #26
 800d6be:	bf42      	ittt	mi
 800d6c0:	6833      	ldrmi	r3, [r6, #0]
 800d6c2:	3302      	addmi	r3, #2
 800d6c4:	6033      	strmi	r3, [r6, #0]
 800d6c6:	6825      	ldr	r5, [r4, #0]
 800d6c8:	f015 0506 	ands.w	r5, r5, #6
 800d6cc:	d106      	bne.n	800d6dc <_printf_common+0x48>
 800d6ce:	f104 0a19 	add.w	sl, r4, #25
 800d6d2:	68e3      	ldr	r3, [r4, #12]
 800d6d4:	6832      	ldr	r2, [r6, #0]
 800d6d6:	1a9b      	subs	r3, r3, r2
 800d6d8:	42ab      	cmp	r3, r5
 800d6da:	dc26      	bgt.n	800d72a <_printf_common+0x96>
 800d6dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d6e0:	6822      	ldr	r2, [r4, #0]
 800d6e2:	3b00      	subs	r3, #0
 800d6e4:	bf18      	it	ne
 800d6e6:	2301      	movne	r3, #1
 800d6e8:	0692      	lsls	r2, r2, #26
 800d6ea:	d42b      	bmi.n	800d744 <_printf_common+0xb0>
 800d6ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d6f0:	4641      	mov	r1, r8
 800d6f2:	4638      	mov	r0, r7
 800d6f4:	47c8      	blx	r9
 800d6f6:	3001      	adds	r0, #1
 800d6f8:	d01e      	beq.n	800d738 <_printf_common+0xa4>
 800d6fa:	6823      	ldr	r3, [r4, #0]
 800d6fc:	6922      	ldr	r2, [r4, #16]
 800d6fe:	f003 0306 	and.w	r3, r3, #6
 800d702:	2b04      	cmp	r3, #4
 800d704:	bf02      	ittt	eq
 800d706:	68e5      	ldreq	r5, [r4, #12]
 800d708:	6833      	ldreq	r3, [r6, #0]
 800d70a:	1aed      	subeq	r5, r5, r3
 800d70c:	68a3      	ldr	r3, [r4, #8]
 800d70e:	bf0c      	ite	eq
 800d710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d714:	2500      	movne	r5, #0
 800d716:	4293      	cmp	r3, r2
 800d718:	bfc4      	itt	gt
 800d71a:	1a9b      	subgt	r3, r3, r2
 800d71c:	18ed      	addgt	r5, r5, r3
 800d71e:	2600      	movs	r6, #0
 800d720:	341a      	adds	r4, #26
 800d722:	42b5      	cmp	r5, r6
 800d724:	d11a      	bne.n	800d75c <_printf_common+0xc8>
 800d726:	2000      	movs	r0, #0
 800d728:	e008      	b.n	800d73c <_printf_common+0xa8>
 800d72a:	2301      	movs	r3, #1
 800d72c:	4652      	mov	r2, sl
 800d72e:	4641      	mov	r1, r8
 800d730:	4638      	mov	r0, r7
 800d732:	47c8      	blx	r9
 800d734:	3001      	adds	r0, #1
 800d736:	d103      	bne.n	800d740 <_printf_common+0xac>
 800d738:	f04f 30ff 	mov.w	r0, #4294967295
 800d73c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d740:	3501      	adds	r5, #1
 800d742:	e7c6      	b.n	800d6d2 <_printf_common+0x3e>
 800d744:	18e1      	adds	r1, r4, r3
 800d746:	1c5a      	adds	r2, r3, #1
 800d748:	2030      	movs	r0, #48	@ 0x30
 800d74a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d74e:	4422      	add	r2, r4
 800d750:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d754:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d758:	3302      	adds	r3, #2
 800d75a:	e7c7      	b.n	800d6ec <_printf_common+0x58>
 800d75c:	2301      	movs	r3, #1
 800d75e:	4622      	mov	r2, r4
 800d760:	4641      	mov	r1, r8
 800d762:	4638      	mov	r0, r7
 800d764:	47c8      	blx	r9
 800d766:	3001      	adds	r0, #1
 800d768:	d0e6      	beq.n	800d738 <_printf_common+0xa4>
 800d76a:	3601      	adds	r6, #1
 800d76c:	e7d9      	b.n	800d722 <_printf_common+0x8e>
	...

0800d770 <_printf_i>:
 800d770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d774:	7e0f      	ldrb	r7, [r1, #24]
 800d776:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d778:	2f78      	cmp	r7, #120	@ 0x78
 800d77a:	4691      	mov	r9, r2
 800d77c:	4680      	mov	r8, r0
 800d77e:	460c      	mov	r4, r1
 800d780:	469a      	mov	sl, r3
 800d782:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d786:	d807      	bhi.n	800d798 <_printf_i+0x28>
 800d788:	2f62      	cmp	r7, #98	@ 0x62
 800d78a:	d80a      	bhi.n	800d7a2 <_printf_i+0x32>
 800d78c:	2f00      	cmp	r7, #0
 800d78e:	f000 80d2 	beq.w	800d936 <_printf_i+0x1c6>
 800d792:	2f58      	cmp	r7, #88	@ 0x58
 800d794:	f000 80b9 	beq.w	800d90a <_printf_i+0x19a>
 800d798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d79c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d7a0:	e03a      	b.n	800d818 <_printf_i+0xa8>
 800d7a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d7a6:	2b15      	cmp	r3, #21
 800d7a8:	d8f6      	bhi.n	800d798 <_printf_i+0x28>
 800d7aa:	a101      	add	r1, pc, #4	@ (adr r1, 800d7b0 <_printf_i+0x40>)
 800d7ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d7b0:	0800d809 	.word	0x0800d809
 800d7b4:	0800d81d 	.word	0x0800d81d
 800d7b8:	0800d799 	.word	0x0800d799
 800d7bc:	0800d799 	.word	0x0800d799
 800d7c0:	0800d799 	.word	0x0800d799
 800d7c4:	0800d799 	.word	0x0800d799
 800d7c8:	0800d81d 	.word	0x0800d81d
 800d7cc:	0800d799 	.word	0x0800d799
 800d7d0:	0800d799 	.word	0x0800d799
 800d7d4:	0800d799 	.word	0x0800d799
 800d7d8:	0800d799 	.word	0x0800d799
 800d7dc:	0800d91d 	.word	0x0800d91d
 800d7e0:	0800d847 	.word	0x0800d847
 800d7e4:	0800d8d7 	.word	0x0800d8d7
 800d7e8:	0800d799 	.word	0x0800d799
 800d7ec:	0800d799 	.word	0x0800d799
 800d7f0:	0800d93f 	.word	0x0800d93f
 800d7f4:	0800d799 	.word	0x0800d799
 800d7f8:	0800d847 	.word	0x0800d847
 800d7fc:	0800d799 	.word	0x0800d799
 800d800:	0800d799 	.word	0x0800d799
 800d804:	0800d8df 	.word	0x0800d8df
 800d808:	6833      	ldr	r3, [r6, #0]
 800d80a:	1d1a      	adds	r2, r3, #4
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	6032      	str	r2, [r6, #0]
 800d810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d814:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d818:	2301      	movs	r3, #1
 800d81a:	e09d      	b.n	800d958 <_printf_i+0x1e8>
 800d81c:	6833      	ldr	r3, [r6, #0]
 800d81e:	6820      	ldr	r0, [r4, #0]
 800d820:	1d19      	adds	r1, r3, #4
 800d822:	6031      	str	r1, [r6, #0]
 800d824:	0606      	lsls	r6, r0, #24
 800d826:	d501      	bpl.n	800d82c <_printf_i+0xbc>
 800d828:	681d      	ldr	r5, [r3, #0]
 800d82a:	e003      	b.n	800d834 <_printf_i+0xc4>
 800d82c:	0645      	lsls	r5, r0, #25
 800d82e:	d5fb      	bpl.n	800d828 <_printf_i+0xb8>
 800d830:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d834:	2d00      	cmp	r5, #0
 800d836:	da03      	bge.n	800d840 <_printf_i+0xd0>
 800d838:	232d      	movs	r3, #45	@ 0x2d
 800d83a:	426d      	negs	r5, r5
 800d83c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d840:	4859      	ldr	r0, [pc, #356]	@ (800d9a8 <_printf_i+0x238>)
 800d842:	230a      	movs	r3, #10
 800d844:	e011      	b.n	800d86a <_printf_i+0xfa>
 800d846:	6821      	ldr	r1, [r4, #0]
 800d848:	6833      	ldr	r3, [r6, #0]
 800d84a:	0608      	lsls	r0, r1, #24
 800d84c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d850:	d402      	bmi.n	800d858 <_printf_i+0xe8>
 800d852:	0649      	lsls	r1, r1, #25
 800d854:	bf48      	it	mi
 800d856:	b2ad      	uxthmi	r5, r5
 800d858:	2f6f      	cmp	r7, #111	@ 0x6f
 800d85a:	4853      	ldr	r0, [pc, #332]	@ (800d9a8 <_printf_i+0x238>)
 800d85c:	6033      	str	r3, [r6, #0]
 800d85e:	bf14      	ite	ne
 800d860:	230a      	movne	r3, #10
 800d862:	2308      	moveq	r3, #8
 800d864:	2100      	movs	r1, #0
 800d866:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d86a:	6866      	ldr	r6, [r4, #4]
 800d86c:	60a6      	str	r6, [r4, #8]
 800d86e:	2e00      	cmp	r6, #0
 800d870:	bfa2      	ittt	ge
 800d872:	6821      	ldrge	r1, [r4, #0]
 800d874:	f021 0104 	bicge.w	r1, r1, #4
 800d878:	6021      	strge	r1, [r4, #0]
 800d87a:	b90d      	cbnz	r5, 800d880 <_printf_i+0x110>
 800d87c:	2e00      	cmp	r6, #0
 800d87e:	d04b      	beq.n	800d918 <_printf_i+0x1a8>
 800d880:	4616      	mov	r6, r2
 800d882:	fbb5 f1f3 	udiv	r1, r5, r3
 800d886:	fb03 5711 	mls	r7, r3, r1, r5
 800d88a:	5dc7      	ldrb	r7, [r0, r7]
 800d88c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d890:	462f      	mov	r7, r5
 800d892:	42bb      	cmp	r3, r7
 800d894:	460d      	mov	r5, r1
 800d896:	d9f4      	bls.n	800d882 <_printf_i+0x112>
 800d898:	2b08      	cmp	r3, #8
 800d89a:	d10b      	bne.n	800d8b4 <_printf_i+0x144>
 800d89c:	6823      	ldr	r3, [r4, #0]
 800d89e:	07df      	lsls	r7, r3, #31
 800d8a0:	d508      	bpl.n	800d8b4 <_printf_i+0x144>
 800d8a2:	6923      	ldr	r3, [r4, #16]
 800d8a4:	6861      	ldr	r1, [r4, #4]
 800d8a6:	4299      	cmp	r1, r3
 800d8a8:	bfde      	ittt	le
 800d8aa:	2330      	movle	r3, #48	@ 0x30
 800d8ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d8b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d8b4:	1b92      	subs	r2, r2, r6
 800d8b6:	6122      	str	r2, [r4, #16]
 800d8b8:	f8cd a000 	str.w	sl, [sp]
 800d8bc:	464b      	mov	r3, r9
 800d8be:	aa03      	add	r2, sp, #12
 800d8c0:	4621      	mov	r1, r4
 800d8c2:	4640      	mov	r0, r8
 800d8c4:	f7ff fee6 	bl	800d694 <_printf_common>
 800d8c8:	3001      	adds	r0, #1
 800d8ca:	d14a      	bne.n	800d962 <_printf_i+0x1f2>
 800d8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d8d0:	b004      	add	sp, #16
 800d8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8d6:	6823      	ldr	r3, [r4, #0]
 800d8d8:	f043 0320 	orr.w	r3, r3, #32
 800d8dc:	6023      	str	r3, [r4, #0]
 800d8de:	4833      	ldr	r0, [pc, #204]	@ (800d9ac <_printf_i+0x23c>)
 800d8e0:	2778      	movs	r7, #120	@ 0x78
 800d8e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d8e6:	6823      	ldr	r3, [r4, #0]
 800d8e8:	6831      	ldr	r1, [r6, #0]
 800d8ea:	061f      	lsls	r7, r3, #24
 800d8ec:	f851 5b04 	ldr.w	r5, [r1], #4
 800d8f0:	d402      	bmi.n	800d8f8 <_printf_i+0x188>
 800d8f2:	065f      	lsls	r7, r3, #25
 800d8f4:	bf48      	it	mi
 800d8f6:	b2ad      	uxthmi	r5, r5
 800d8f8:	6031      	str	r1, [r6, #0]
 800d8fa:	07d9      	lsls	r1, r3, #31
 800d8fc:	bf44      	itt	mi
 800d8fe:	f043 0320 	orrmi.w	r3, r3, #32
 800d902:	6023      	strmi	r3, [r4, #0]
 800d904:	b11d      	cbz	r5, 800d90e <_printf_i+0x19e>
 800d906:	2310      	movs	r3, #16
 800d908:	e7ac      	b.n	800d864 <_printf_i+0xf4>
 800d90a:	4827      	ldr	r0, [pc, #156]	@ (800d9a8 <_printf_i+0x238>)
 800d90c:	e7e9      	b.n	800d8e2 <_printf_i+0x172>
 800d90e:	6823      	ldr	r3, [r4, #0]
 800d910:	f023 0320 	bic.w	r3, r3, #32
 800d914:	6023      	str	r3, [r4, #0]
 800d916:	e7f6      	b.n	800d906 <_printf_i+0x196>
 800d918:	4616      	mov	r6, r2
 800d91a:	e7bd      	b.n	800d898 <_printf_i+0x128>
 800d91c:	6833      	ldr	r3, [r6, #0]
 800d91e:	6825      	ldr	r5, [r4, #0]
 800d920:	6961      	ldr	r1, [r4, #20]
 800d922:	1d18      	adds	r0, r3, #4
 800d924:	6030      	str	r0, [r6, #0]
 800d926:	062e      	lsls	r6, r5, #24
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	d501      	bpl.n	800d930 <_printf_i+0x1c0>
 800d92c:	6019      	str	r1, [r3, #0]
 800d92e:	e002      	b.n	800d936 <_printf_i+0x1c6>
 800d930:	0668      	lsls	r0, r5, #25
 800d932:	d5fb      	bpl.n	800d92c <_printf_i+0x1bc>
 800d934:	8019      	strh	r1, [r3, #0]
 800d936:	2300      	movs	r3, #0
 800d938:	6123      	str	r3, [r4, #16]
 800d93a:	4616      	mov	r6, r2
 800d93c:	e7bc      	b.n	800d8b8 <_printf_i+0x148>
 800d93e:	6833      	ldr	r3, [r6, #0]
 800d940:	1d1a      	adds	r2, r3, #4
 800d942:	6032      	str	r2, [r6, #0]
 800d944:	681e      	ldr	r6, [r3, #0]
 800d946:	6862      	ldr	r2, [r4, #4]
 800d948:	2100      	movs	r1, #0
 800d94a:	4630      	mov	r0, r6
 800d94c:	f7f2 fcc8 	bl	80002e0 <memchr>
 800d950:	b108      	cbz	r0, 800d956 <_printf_i+0x1e6>
 800d952:	1b80      	subs	r0, r0, r6
 800d954:	6060      	str	r0, [r4, #4]
 800d956:	6863      	ldr	r3, [r4, #4]
 800d958:	6123      	str	r3, [r4, #16]
 800d95a:	2300      	movs	r3, #0
 800d95c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d960:	e7aa      	b.n	800d8b8 <_printf_i+0x148>
 800d962:	6923      	ldr	r3, [r4, #16]
 800d964:	4632      	mov	r2, r6
 800d966:	4649      	mov	r1, r9
 800d968:	4640      	mov	r0, r8
 800d96a:	47d0      	blx	sl
 800d96c:	3001      	adds	r0, #1
 800d96e:	d0ad      	beq.n	800d8cc <_printf_i+0x15c>
 800d970:	6823      	ldr	r3, [r4, #0]
 800d972:	079b      	lsls	r3, r3, #30
 800d974:	d413      	bmi.n	800d99e <_printf_i+0x22e>
 800d976:	68e0      	ldr	r0, [r4, #12]
 800d978:	9b03      	ldr	r3, [sp, #12]
 800d97a:	4298      	cmp	r0, r3
 800d97c:	bfb8      	it	lt
 800d97e:	4618      	movlt	r0, r3
 800d980:	e7a6      	b.n	800d8d0 <_printf_i+0x160>
 800d982:	2301      	movs	r3, #1
 800d984:	4632      	mov	r2, r6
 800d986:	4649      	mov	r1, r9
 800d988:	4640      	mov	r0, r8
 800d98a:	47d0      	blx	sl
 800d98c:	3001      	adds	r0, #1
 800d98e:	d09d      	beq.n	800d8cc <_printf_i+0x15c>
 800d990:	3501      	adds	r5, #1
 800d992:	68e3      	ldr	r3, [r4, #12]
 800d994:	9903      	ldr	r1, [sp, #12]
 800d996:	1a5b      	subs	r3, r3, r1
 800d998:	42ab      	cmp	r3, r5
 800d99a:	dcf2      	bgt.n	800d982 <_printf_i+0x212>
 800d99c:	e7eb      	b.n	800d976 <_printf_i+0x206>
 800d99e:	2500      	movs	r5, #0
 800d9a0:	f104 0619 	add.w	r6, r4, #25
 800d9a4:	e7f5      	b.n	800d992 <_printf_i+0x222>
 800d9a6:	bf00      	nop
 800d9a8:	08010522 	.word	0x08010522
 800d9ac:	08010533 	.word	0x08010533

0800d9b0 <std>:
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	b510      	push	{r4, lr}
 800d9b4:	4604      	mov	r4, r0
 800d9b6:	e9c0 3300 	strd	r3, r3, [r0]
 800d9ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d9be:	6083      	str	r3, [r0, #8]
 800d9c0:	8181      	strh	r1, [r0, #12]
 800d9c2:	6643      	str	r3, [r0, #100]	@ 0x64
 800d9c4:	81c2      	strh	r2, [r0, #14]
 800d9c6:	6183      	str	r3, [r0, #24]
 800d9c8:	4619      	mov	r1, r3
 800d9ca:	2208      	movs	r2, #8
 800d9cc:	305c      	adds	r0, #92	@ 0x5c
 800d9ce:	f000 f8f4 	bl	800dbba <memset>
 800d9d2:	4b0d      	ldr	r3, [pc, #52]	@ (800da08 <std+0x58>)
 800d9d4:	6263      	str	r3, [r4, #36]	@ 0x24
 800d9d6:	4b0d      	ldr	r3, [pc, #52]	@ (800da0c <std+0x5c>)
 800d9d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d9da:	4b0d      	ldr	r3, [pc, #52]	@ (800da10 <std+0x60>)
 800d9dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d9de:	4b0d      	ldr	r3, [pc, #52]	@ (800da14 <std+0x64>)
 800d9e0:	6323      	str	r3, [r4, #48]	@ 0x30
 800d9e2:	4b0d      	ldr	r3, [pc, #52]	@ (800da18 <std+0x68>)
 800d9e4:	6224      	str	r4, [r4, #32]
 800d9e6:	429c      	cmp	r4, r3
 800d9e8:	d006      	beq.n	800d9f8 <std+0x48>
 800d9ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d9ee:	4294      	cmp	r4, r2
 800d9f0:	d002      	beq.n	800d9f8 <std+0x48>
 800d9f2:	33d0      	adds	r3, #208	@ 0xd0
 800d9f4:	429c      	cmp	r4, r3
 800d9f6:	d105      	bne.n	800da04 <std+0x54>
 800d9f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d9fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da00:	f000 b958 	b.w	800dcb4 <__retarget_lock_init_recursive>
 800da04:	bd10      	pop	{r4, pc}
 800da06:	bf00      	nop
 800da08:	0800db35 	.word	0x0800db35
 800da0c:	0800db57 	.word	0x0800db57
 800da10:	0800db8f 	.word	0x0800db8f
 800da14:	0800dbb3 	.word	0x0800dbb3
 800da18:	24003e5c 	.word	0x24003e5c

0800da1c <stdio_exit_handler>:
 800da1c:	4a02      	ldr	r2, [pc, #8]	@ (800da28 <stdio_exit_handler+0xc>)
 800da1e:	4903      	ldr	r1, [pc, #12]	@ (800da2c <stdio_exit_handler+0x10>)
 800da20:	4803      	ldr	r0, [pc, #12]	@ (800da30 <stdio_exit_handler+0x14>)
 800da22:	f000 b869 	b.w	800daf8 <_fwalk_sglue>
 800da26:	bf00      	nop
 800da28:	24000020 	.word	0x24000020
 800da2c:	0800f289 	.word	0x0800f289
 800da30:	24000030 	.word	0x24000030

0800da34 <cleanup_stdio>:
 800da34:	6841      	ldr	r1, [r0, #4]
 800da36:	4b0c      	ldr	r3, [pc, #48]	@ (800da68 <cleanup_stdio+0x34>)
 800da38:	4299      	cmp	r1, r3
 800da3a:	b510      	push	{r4, lr}
 800da3c:	4604      	mov	r4, r0
 800da3e:	d001      	beq.n	800da44 <cleanup_stdio+0x10>
 800da40:	f001 fc22 	bl	800f288 <_fflush_r>
 800da44:	68a1      	ldr	r1, [r4, #8]
 800da46:	4b09      	ldr	r3, [pc, #36]	@ (800da6c <cleanup_stdio+0x38>)
 800da48:	4299      	cmp	r1, r3
 800da4a:	d002      	beq.n	800da52 <cleanup_stdio+0x1e>
 800da4c:	4620      	mov	r0, r4
 800da4e:	f001 fc1b 	bl	800f288 <_fflush_r>
 800da52:	68e1      	ldr	r1, [r4, #12]
 800da54:	4b06      	ldr	r3, [pc, #24]	@ (800da70 <cleanup_stdio+0x3c>)
 800da56:	4299      	cmp	r1, r3
 800da58:	d004      	beq.n	800da64 <cleanup_stdio+0x30>
 800da5a:	4620      	mov	r0, r4
 800da5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da60:	f001 bc12 	b.w	800f288 <_fflush_r>
 800da64:	bd10      	pop	{r4, pc}
 800da66:	bf00      	nop
 800da68:	24003e5c 	.word	0x24003e5c
 800da6c:	24003ec4 	.word	0x24003ec4
 800da70:	24003f2c 	.word	0x24003f2c

0800da74 <global_stdio_init.part.0>:
 800da74:	b510      	push	{r4, lr}
 800da76:	4b0b      	ldr	r3, [pc, #44]	@ (800daa4 <global_stdio_init.part.0+0x30>)
 800da78:	4c0b      	ldr	r4, [pc, #44]	@ (800daa8 <global_stdio_init.part.0+0x34>)
 800da7a:	4a0c      	ldr	r2, [pc, #48]	@ (800daac <global_stdio_init.part.0+0x38>)
 800da7c:	601a      	str	r2, [r3, #0]
 800da7e:	4620      	mov	r0, r4
 800da80:	2200      	movs	r2, #0
 800da82:	2104      	movs	r1, #4
 800da84:	f7ff ff94 	bl	800d9b0 <std>
 800da88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800da8c:	2201      	movs	r2, #1
 800da8e:	2109      	movs	r1, #9
 800da90:	f7ff ff8e 	bl	800d9b0 <std>
 800da94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800da98:	2202      	movs	r2, #2
 800da9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da9e:	2112      	movs	r1, #18
 800daa0:	f7ff bf86 	b.w	800d9b0 <std>
 800daa4:	24003f94 	.word	0x24003f94
 800daa8:	24003e5c 	.word	0x24003e5c
 800daac:	0800da1d 	.word	0x0800da1d

0800dab0 <__sfp_lock_acquire>:
 800dab0:	4801      	ldr	r0, [pc, #4]	@ (800dab8 <__sfp_lock_acquire+0x8>)
 800dab2:	f000 b900 	b.w	800dcb6 <__retarget_lock_acquire_recursive>
 800dab6:	bf00      	nop
 800dab8:	24003f9d 	.word	0x24003f9d

0800dabc <__sfp_lock_release>:
 800dabc:	4801      	ldr	r0, [pc, #4]	@ (800dac4 <__sfp_lock_release+0x8>)
 800dabe:	f000 b8fb 	b.w	800dcb8 <__retarget_lock_release_recursive>
 800dac2:	bf00      	nop
 800dac4:	24003f9d 	.word	0x24003f9d

0800dac8 <__sinit>:
 800dac8:	b510      	push	{r4, lr}
 800daca:	4604      	mov	r4, r0
 800dacc:	f7ff fff0 	bl	800dab0 <__sfp_lock_acquire>
 800dad0:	6a23      	ldr	r3, [r4, #32]
 800dad2:	b11b      	cbz	r3, 800dadc <__sinit+0x14>
 800dad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dad8:	f7ff bff0 	b.w	800dabc <__sfp_lock_release>
 800dadc:	4b04      	ldr	r3, [pc, #16]	@ (800daf0 <__sinit+0x28>)
 800dade:	6223      	str	r3, [r4, #32]
 800dae0:	4b04      	ldr	r3, [pc, #16]	@ (800daf4 <__sinit+0x2c>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d1f5      	bne.n	800dad4 <__sinit+0xc>
 800dae8:	f7ff ffc4 	bl	800da74 <global_stdio_init.part.0>
 800daec:	e7f2      	b.n	800dad4 <__sinit+0xc>
 800daee:	bf00      	nop
 800daf0:	0800da35 	.word	0x0800da35
 800daf4:	24003f94 	.word	0x24003f94

0800daf8 <_fwalk_sglue>:
 800daf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dafc:	4607      	mov	r7, r0
 800dafe:	4688      	mov	r8, r1
 800db00:	4614      	mov	r4, r2
 800db02:	2600      	movs	r6, #0
 800db04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db08:	f1b9 0901 	subs.w	r9, r9, #1
 800db0c:	d505      	bpl.n	800db1a <_fwalk_sglue+0x22>
 800db0e:	6824      	ldr	r4, [r4, #0]
 800db10:	2c00      	cmp	r4, #0
 800db12:	d1f7      	bne.n	800db04 <_fwalk_sglue+0xc>
 800db14:	4630      	mov	r0, r6
 800db16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db1a:	89ab      	ldrh	r3, [r5, #12]
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d907      	bls.n	800db30 <_fwalk_sglue+0x38>
 800db20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db24:	3301      	adds	r3, #1
 800db26:	d003      	beq.n	800db30 <_fwalk_sglue+0x38>
 800db28:	4629      	mov	r1, r5
 800db2a:	4638      	mov	r0, r7
 800db2c:	47c0      	blx	r8
 800db2e:	4306      	orrs	r6, r0
 800db30:	3568      	adds	r5, #104	@ 0x68
 800db32:	e7e9      	b.n	800db08 <_fwalk_sglue+0x10>

0800db34 <__sread>:
 800db34:	b510      	push	{r4, lr}
 800db36:	460c      	mov	r4, r1
 800db38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db3c:	f000 f86c 	bl	800dc18 <_read_r>
 800db40:	2800      	cmp	r0, #0
 800db42:	bfab      	itete	ge
 800db44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800db46:	89a3      	ldrhlt	r3, [r4, #12]
 800db48:	181b      	addge	r3, r3, r0
 800db4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800db4e:	bfac      	ite	ge
 800db50:	6563      	strge	r3, [r4, #84]	@ 0x54
 800db52:	81a3      	strhlt	r3, [r4, #12]
 800db54:	bd10      	pop	{r4, pc}

0800db56 <__swrite>:
 800db56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db5a:	461f      	mov	r7, r3
 800db5c:	898b      	ldrh	r3, [r1, #12]
 800db5e:	05db      	lsls	r3, r3, #23
 800db60:	4605      	mov	r5, r0
 800db62:	460c      	mov	r4, r1
 800db64:	4616      	mov	r6, r2
 800db66:	d505      	bpl.n	800db74 <__swrite+0x1e>
 800db68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db6c:	2302      	movs	r3, #2
 800db6e:	2200      	movs	r2, #0
 800db70:	f000 f840 	bl	800dbf4 <_lseek_r>
 800db74:	89a3      	ldrh	r3, [r4, #12]
 800db76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800db7e:	81a3      	strh	r3, [r4, #12]
 800db80:	4632      	mov	r2, r6
 800db82:	463b      	mov	r3, r7
 800db84:	4628      	mov	r0, r5
 800db86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db8a:	f000 b857 	b.w	800dc3c <_write_r>

0800db8e <__sseek>:
 800db8e:	b510      	push	{r4, lr}
 800db90:	460c      	mov	r4, r1
 800db92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db96:	f000 f82d 	bl	800dbf4 <_lseek_r>
 800db9a:	1c43      	adds	r3, r0, #1
 800db9c:	89a3      	ldrh	r3, [r4, #12]
 800db9e:	bf15      	itete	ne
 800dba0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dba2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dba6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dbaa:	81a3      	strheq	r3, [r4, #12]
 800dbac:	bf18      	it	ne
 800dbae:	81a3      	strhne	r3, [r4, #12]
 800dbb0:	bd10      	pop	{r4, pc}

0800dbb2 <__sclose>:
 800dbb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbb6:	f000 b80d 	b.w	800dbd4 <_close_r>

0800dbba <memset>:
 800dbba:	4402      	add	r2, r0
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	d100      	bne.n	800dbc4 <memset+0xa>
 800dbc2:	4770      	bx	lr
 800dbc4:	f803 1b01 	strb.w	r1, [r3], #1
 800dbc8:	e7f9      	b.n	800dbbe <memset+0x4>
	...

0800dbcc <_localeconv_r>:
 800dbcc:	4800      	ldr	r0, [pc, #0]	@ (800dbd0 <_localeconv_r+0x4>)
 800dbce:	4770      	bx	lr
 800dbd0:	2400016c 	.word	0x2400016c

0800dbd4 <_close_r>:
 800dbd4:	b538      	push	{r3, r4, r5, lr}
 800dbd6:	4d06      	ldr	r5, [pc, #24]	@ (800dbf0 <_close_r+0x1c>)
 800dbd8:	2300      	movs	r3, #0
 800dbda:	4604      	mov	r4, r0
 800dbdc:	4608      	mov	r0, r1
 800dbde:	602b      	str	r3, [r5, #0]
 800dbe0:	f7f5 fdaa 	bl	8003738 <_close>
 800dbe4:	1c43      	adds	r3, r0, #1
 800dbe6:	d102      	bne.n	800dbee <_close_r+0x1a>
 800dbe8:	682b      	ldr	r3, [r5, #0]
 800dbea:	b103      	cbz	r3, 800dbee <_close_r+0x1a>
 800dbec:	6023      	str	r3, [r4, #0]
 800dbee:	bd38      	pop	{r3, r4, r5, pc}
 800dbf0:	24003f98 	.word	0x24003f98

0800dbf4 <_lseek_r>:
 800dbf4:	b538      	push	{r3, r4, r5, lr}
 800dbf6:	4d07      	ldr	r5, [pc, #28]	@ (800dc14 <_lseek_r+0x20>)
 800dbf8:	4604      	mov	r4, r0
 800dbfa:	4608      	mov	r0, r1
 800dbfc:	4611      	mov	r1, r2
 800dbfe:	2200      	movs	r2, #0
 800dc00:	602a      	str	r2, [r5, #0]
 800dc02:	461a      	mov	r2, r3
 800dc04:	f7f5 fdbf 	bl	8003786 <_lseek>
 800dc08:	1c43      	adds	r3, r0, #1
 800dc0a:	d102      	bne.n	800dc12 <_lseek_r+0x1e>
 800dc0c:	682b      	ldr	r3, [r5, #0]
 800dc0e:	b103      	cbz	r3, 800dc12 <_lseek_r+0x1e>
 800dc10:	6023      	str	r3, [r4, #0]
 800dc12:	bd38      	pop	{r3, r4, r5, pc}
 800dc14:	24003f98 	.word	0x24003f98

0800dc18 <_read_r>:
 800dc18:	b538      	push	{r3, r4, r5, lr}
 800dc1a:	4d07      	ldr	r5, [pc, #28]	@ (800dc38 <_read_r+0x20>)
 800dc1c:	4604      	mov	r4, r0
 800dc1e:	4608      	mov	r0, r1
 800dc20:	4611      	mov	r1, r2
 800dc22:	2200      	movs	r2, #0
 800dc24:	602a      	str	r2, [r5, #0]
 800dc26:	461a      	mov	r2, r3
 800dc28:	f7f5 fd4d 	bl	80036c6 <_read>
 800dc2c:	1c43      	adds	r3, r0, #1
 800dc2e:	d102      	bne.n	800dc36 <_read_r+0x1e>
 800dc30:	682b      	ldr	r3, [r5, #0]
 800dc32:	b103      	cbz	r3, 800dc36 <_read_r+0x1e>
 800dc34:	6023      	str	r3, [r4, #0]
 800dc36:	bd38      	pop	{r3, r4, r5, pc}
 800dc38:	24003f98 	.word	0x24003f98

0800dc3c <_write_r>:
 800dc3c:	b538      	push	{r3, r4, r5, lr}
 800dc3e:	4d07      	ldr	r5, [pc, #28]	@ (800dc5c <_write_r+0x20>)
 800dc40:	4604      	mov	r4, r0
 800dc42:	4608      	mov	r0, r1
 800dc44:	4611      	mov	r1, r2
 800dc46:	2200      	movs	r2, #0
 800dc48:	602a      	str	r2, [r5, #0]
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	f7f5 fd58 	bl	8003700 <_write>
 800dc50:	1c43      	adds	r3, r0, #1
 800dc52:	d102      	bne.n	800dc5a <_write_r+0x1e>
 800dc54:	682b      	ldr	r3, [r5, #0]
 800dc56:	b103      	cbz	r3, 800dc5a <_write_r+0x1e>
 800dc58:	6023      	str	r3, [r4, #0]
 800dc5a:	bd38      	pop	{r3, r4, r5, pc}
 800dc5c:	24003f98 	.word	0x24003f98

0800dc60 <__errno>:
 800dc60:	4b01      	ldr	r3, [pc, #4]	@ (800dc68 <__errno+0x8>)
 800dc62:	6818      	ldr	r0, [r3, #0]
 800dc64:	4770      	bx	lr
 800dc66:	bf00      	nop
 800dc68:	2400002c 	.word	0x2400002c

0800dc6c <__libc_init_array>:
 800dc6c:	b570      	push	{r4, r5, r6, lr}
 800dc6e:	4d0d      	ldr	r5, [pc, #52]	@ (800dca4 <__libc_init_array+0x38>)
 800dc70:	4c0d      	ldr	r4, [pc, #52]	@ (800dca8 <__libc_init_array+0x3c>)
 800dc72:	1b64      	subs	r4, r4, r5
 800dc74:	10a4      	asrs	r4, r4, #2
 800dc76:	2600      	movs	r6, #0
 800dc78:	42a6      	cmp	r6, r4
 800dc7a:	d109      	bne.n	800dc90 <__libc_init_array+0x24>
 800dc7c:	4d0b      	ldr	r5, [pc, #44]	@ (800dcac <__libc_init_array+0x40>)
 800dc7e:	4c0c      	ldr	r4, [pc, #48]	@ (800dcb0 <__libc_init_array+0x44>)
 800dc80:	f002 fc1e 	bl	80104c0 <_init>
 800dc84:	1b64      	subs	r4, r4, r5
 800dc86:	10a4      	asrs	r4, r4, #2
 800dc88:	2600      	movs	r6, #0
 800dc8a:	42a6      	cmp	r6, r4
 800dc8c:	d105      	bne.n	800dc9a <__libc_init_array+0x2e>
 800dc8e:	bd70      	pop	{r4, r5, r6, pc}
 800dc90:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc94:	4798      	blx	r3
 800dc96:	3601      	adds	r6, #1
 800dc98:	e7ee      	b.n	800dc78 <__libc_init_array+0xc>
 800dc9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc9e:	4798      	blx	r3
 800dca0:	3601      	adds	r6, #1
 800dca2:	e7f2      	b.n	800dc8a <__libc_init_array+0x1e>
 800dca4:	08010a60 	.word	0x08010a60
 800dca8:	08010a60 	.word	0x08010a60
 800dcac:	08010a60 	.word	0x08010a60
 800dcb0:	08010a64 	.word	0x08010a64

0800dcb4 <__retarget_lock_init_recursive>:
 800dcb4:	4770      	bx	lr

0800dcb6 <__retarget_lock_acquire_recursive>:
 800dcb6:	4770      	bx	lr

0800dcb8 <__retarget_lock_release_recursive>:
 800dcb8:	4770      	bx	lr

0800dcba <quorem>:
 800dcba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcbe:	6903      	ldr	r3, [r0, #16]
 800dcc0:	690c      	ldr	r4, [r1, #16]
 800dcc2:	42a3      	cmp	r3, r4
 800dcc4:	4607      	mov	r7, r0
 800dcc6:	db7e      	blt.n	800ddc6 <quorem+0x10c>
 800dcc8:	3c01      	subs	r4, #1
 800dcca:	f101 0814 	add.w	r8, r1, #20
 800dcce:	00a3      	lsls	r3, r4, #2
 800dcd0:	f100 0514 	add.w	r5, r0, #20
 800dcd4:	9300      	str	r3, [sp, #0]
 800dcd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dcda:	9301      	str	r3, [sp, #4]
 800dcdc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dce0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dce4:	3301      	adds	r3, #1
 800dce6:	429a      	cmp	r2, r3
 800dce8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dcec:	fbb2 f6f3 	udiv	r6, r2, r3
 800dcf0:	d32e      	bcc.n	800dd50 <quorem+0x96>
 800dcf2:	f04f 0a00 	mov.w	sl, #0
 800dcf6:	46c4      	mov	ip, r8
 800dcf8:	46ae      	mov	lr, r5
 800dcfa:	46d3      	mov	fp, sl
 800dcfc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dd00:	b298      	uxth	r0, r3
 800dd02:	fb06 a000 	mla	r0, r6, r0, sl
 800dd06:	0c02      	lsrs	r2, r0, #16
 800dd08:	0c1b      	lsrs	r3, r3, #16
 800dd0a:	fb06 2303 	mla	r3, r6, r3, r2
 800dd0e:	f8de 2000 	ldr.w	r2, [lr]
 800dd12:	b280      	uxth	r0, r0
 800dd14:	b292      	uxth	r2, r2
 800dd16:	1a12      	subs	r2, r2, r0
 800dd18:	445a      	add	r2, fp
 800dd1a:	f8de 0000 	ldr.w	r0, [lr]
 800dd1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dd28:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dd2c:	b292      	uxth	r2, r2
 800dd2e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dd32:	45e1      	cmp	r9, ip
 800dd34:	f84e 2b04 	str.w	r2, [lr], #4
 800dd38:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dd3c:	d2de      	bcs.n	800dcfc <quorem+0x42>
 800dd3e:	9b00      	ldr	r3, [sp, #0]
 800dd40:	58eb      	ldr	r3, [r5, r3]
 800dd42:	b92b      	cbnz	r3, 800dd50 <quorem+0x96>
 800dd44:	9b01      	ldr	r3, [sp, #4]
 800dd46:	3b04      	subs	r3, #4
 800dd48:	429d      	cmp	r5, r3
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	d32f      	bcc.n	800ddae <quorem+0xf4>
 800dd4e:	613c      	str	r4, [r7, #16]
 800dd50:	4638      	mov	r0, r7
 800dd52:	f001 f90d 	bl	800ef70 <__mcmp>
 800dd56:	2800      	cmp	r0, #0
 800dd58:	db25      	blt.n	800dda6 <quorem+0xec>
 800dd5a:	4629      	mov	r1, r5
 800dd5c:	2000      	movs	r0, #0
 800dd5e:	f858 2b04 	ldr.w	r2, [r8], #4
 800dd62:	f8d1 c000 	ldr.w	ip, [r1]
 800dd66:	fa1f fe82 	uxth.w	lr, r2
 800dd6a:	fa1f f38c 	uxth.w	r3, ip
 800dd6e:	eba3 030e 	sub.w	r3, r3, lr
 800dd72:	4403      	add	r3, r0
 800dd74:	0c12      	lsrs	r2, r2, #16
 800dd76:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dd7a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dd7e:	b29b      	uxth	r3, r3
 800dd80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd84:	45c1      	cmp	r9, r8
 800dd86:	f841 3b04 	str.w	r3, [r1], #4
 800dd8a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dd8e:	d2e6      	bcs.n	800dd5e <quorem+0xa4>
 800dd90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd98:	b922      	cbnz	r2, 800dda4 <quorem+0xea>
 800dd9a:	3b04      	subs	r3, #4
 800dd9c:	429d      	cmp	r5, r3
 800dd9e:	461a      	mov	r2, r3
 800dda0:	d30b      	bcc.n	800ddba <quorem+0x100>
 800dda2:	613c      	str	r4, [r7, #16]
 800dda4:	3601      	adds	r6, #1
 800dda6:	4630      	mov	r0, r6
 800dda8:	b003      	add	sp, #12
 800ddaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddae:	6812      	ldr	r2, [r2, #0]
 800ddb0:	3b04      	subs	r3, #4
 800ddb2:	2a00      	cmp	r2, #0
 800ddb4:	d1cb      	bne.n	800dd4e <quorem+0x94>
 800ddb6:	3c01      	subs	r4, #1
 800ddb8:	e7c6      	b.n	800dd48 <quorem+0x8e>
 800ddba:	6812      	ldr	r2, [r2, #0]
 800ddbc:	3b04      	subs	r3, #4
 800ddbe:	2a00      	cmp	r2, #0
 800ddc0:	d1ef      	bne.n	800dda2 <quorem+0xe8>
 800ddc2:	3c01      	subs	r4, #1
 800ddc4:	e7ea      	b.n	800dd9c <quorem+0xe2>
 800ddc6:	2000      	movs	r0, #0
 800ddc8:	e7ee      	b.n	800dda8 <quorem+0xee>
 800ddca:	0000      	movs	r0, r0
 800ddcc:	0000      	movs	r0, r0
	...

0800ddd0 <_dtoa_r>:
 800ddd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd4:	ed2d 8b02 	vpush	{d8}
 800ddd8:	69c7      	ldr	r7, [r0, #28]
 800ddda:	b091      	sub	sp, #68	@ 0x44
 800dddc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dde0:	ec55 4b10 	vmov	r4, r5, d0
 800dde4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800dde6:	9107      	str	r1, [sp, #28]
 800dde8:	4681      	mov	r9, r0
 800ddea:	9209      	str	r2, [sp, #36]	@ 0x24
 800ddec:	930d      	str	r3, [sp, #52]	@ 0x34
 800ddee:	b97f      	cbnz	r7, 800de10 <_dtoa_r+0x40>
 800ddf0:	2010      	movs	r0, #16
 800ddf2:	f000 fd8d 	bl	800e910 <malloc>
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	f8c9 001c 	str.w	r0, [r9, #28]
 800ddfc:	b920      	cbnz	r0, 800de08 <_dtoa_r+0x38>
 800ddfe:	4ba0      	ldr	r3, [pc, #640]	@ (800e080 <_dtoa_r+0x2b0>)
 800de00:	21ef      	movs	r1, #239	@ 0xef
 800de02:	48a0      	ldr	r0, [pc, #640]	@ (800e084 <_dtoa_r+0x2b4>)
 800de04:	f001 fa86 	bl	800f314 <__assert_func>
 800de08:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800de0c:	6007      	str	r7, [r0, #0]
 800de0e:	60c7      	str	r7, [r0, #12]
 800de10:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800de14:	6819      	ldr	r1, [r3, #0]
 800de16:	b159      	cbz	r1, 800de30 <_dtoa_r+0x60>
 800de18:	685a      	ldr	r2, [r3, #4]
 800de1a:	604a      	str	r2, [r1, #4]
 800de1c:	2301      	movs	r3, #1
 800de1e:	4093      	lsls	r3, r2
 800de20:	608b      	str	r3, [r1, #8]
 800de22:	4648      	mov	r0, r9
 800de24:	f000 fe6a 	bl	800eafc <_Bfree>
 800de28:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800de2c:	2200      	movs	r2, #0
 800de2e:	601a      	str	r2, [r3, #0]
 800de30:	1e2b      	subs	r3, r5, #0
 800de32:	bfbb      	ittet	lt
 800de34:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800de38:	9303      	strlt	r3, [sp, #12]
 800de3a:	2300      	movge	r3, #0
 800de3c:	2201      	movlt	r2, #1
 800de3e:	bfac      	ite	ge
 800de40:	6033      	strge	r3, [r6, #0]
 800de42:	6032      	strlt	r2, [r6, #0]
 800de44:	4b90      	ldr	r3, [pc, #576]	@ (800e088 <_dtoa_r+0x2b8>)
 800de46:	9e03      	ldr	r6, [sp, #12]
 800de48:	43b3      	bics	r3, r6
 800de4a:	d110      	bne.n	800de6e <_dtoa_r+0x9e>
 800de4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800de4e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800de52:	6013      	str	r3, [r2, #0]
 800de54:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800de58:	4323      	orrs	r3, r4
 800de5a:	f000 84de 	beq.w	800e81a <_dtoa_r+0xa4a>
 800de5e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800de60:	4f8a      	ldr	r7, [pc, #552]	@ (800e08c <_dtoa_r+0x2bc>)
 800de62:	2b00      	cmp	r3, #0
 800de64:	f000 84e0 	beq.w	800e828 <_dtoa_r+0xa58>
 800de68:	1cfb      	adds	r3, r7, #3
 800de6a:	f000 bcdb 	b.w	800e824 <_dtoa_r+0xa54>
 800de6e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800de72:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800de76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de7a:	d10a      	bne.n	800de92 <_dtoa_r+0xc2>
 800de7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800de7e:	2301      	movs	r3, #1
 800de80:	6013      	str	r3, [r2, #0]
 800de82:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800de84:	b113      	cbz	r3, 800de8c <_dtoa_r+0xbc>
 800de86:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800de88:	4b81      	ldr	r3, [pc, #516]	@ (800e090 <_dtoa_r+0x2c0>)
 800de8a:	6013      	str	r3, [r2, #0]
 800de8c:	4f81      	ldr	r7, [pc, #516]	@ (800e094 <_dtoa_r+0x2c4>)
 800de8e:	f000 bccb 	b.w	800e828 <_dtoa_r+0xa58>
 800de92:	aa0e      	add	r2, sp, #56	@ 0x38
 800de94:	a90f      	add	r1, sp, #60	@ 0x3c
 800de96:	4648      	mov	r0, r9
 800de98:	eeb0 0b48 	vmov.f64	d0, d8
 800de9c:	f001 f918 	bl	800f0d0 <__d2b>
 800dea0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800dea4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dea6:	9001      	str	r0, [sp, #4]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d045      	beq.n	800df38 <_dtoa_r+0x168>
 800deac:	eeb0 7b48 	vmov.f64	d7, d8
 800deb0:	ee18 1a90 	vmov	r1, s17
 800deb4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800deb8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800debc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800dec0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800dec4:	2500      	movs	r5, #0
 800dec6:	ee07 1a90 	vmov	s15, r1
 800deca:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800dece:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800e068 <_dtoa_r+0x298>
 800ded2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ded6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800e070 <_dtoa_r+0x2a0>
 800deda:	eea7 6b05 	vfma.f64	d6, d7, d5
 800dede:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800e078 <_dtoa_r+0x2a8>
 800dee2:	ee07 3a90 	vmov	s15, r3
 800dee6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800deea:	eeb0 7b46 	vmov.f64	d7, d6
 800deee:	eea4 7b05 	vfma.f64	d7, d4, d5
 800def2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800def6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800defa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800defe:	ee16 8a90 	vmov	r8, s13
 800df02:	d508      	bpl.n	800df16 <_dtoa_r+0x146>
 800df04:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800df08:	eeb4 6b47 	vcmp.f64	d6, d7
 800df0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df10:	bf18      	it	ne
 800df12:	f108 38ff 	addne.w	r8, r8, #4294967295
 800df16:	f1b8 0f16 	cmp.w	r8, #22
 800df1a:	d82b      	bhi.n	800df74 <_dtoa_r+0x1a4>
 800df1c:	495e      	ldr	r1, [pc, #376]	@ (800e098 <_dtoa_r+0x2c8>)
 800df1e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800df22:	ed91 7b00 	vldr	d7, [r1]
 800df26:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800df2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df2e:	d501      	bpl.n	800df34 <_dtoa_r+0x164>
 800df30:	f108 38ff 	add.w	r8, r8, #4294967295
 800df34:	2100      	movs	r1, #0
 800df36:	e01e      	b.n	800df76 <_dtoa_r+0x1a6>
 800df38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df3a:	4413      	add	r3, r2
 800df3c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800df40:	2920      	cmp	r1, #32
 800df42:	bfc1      	itttt	gt
 800df44:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800df48:	408e      	lslgt	r6, r1
 800df4a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800df4e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800df52:	bfd6      	itet	le
 800df54:	f1c1 0120 	rsble	r1, r1, #32
 800df58:	4331      	orrgt	r1, r6
 800df5a:	fa04 f101 	lslle.w	r1, r4, r1
 800df5e:	ee07 1a90 	vmov	s15, r1
 800df62:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800df66:	3b01      	subs	r3, #1
 800df68:	ee17 1a90 	vmov	r1, s15
 800df6c:	2501      	movs	r5, #1
 800df6e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800df72:	e7a8      	b.n	800dec6 <_dtoa_r+0xf6>
 800df74:	2101      	movs	r1, #1
 800df76:	1ad2      	subs	r2, r2, r3
 800df78:	1e53      	subs	r3, r2, #1
 800df7a:	9306      	str	r3, [sp, #24]
 800df7c:	bf45      	ittet	mi
 800df7e:	f1c2 0301 	rsbmi	r3, r2, #1
 800df82:	9305      	strmi	r3, [sp, #20]
 800df84:	2300      	movpl	r3, #0
 800df86:	2300      	movmi	r3, #0
 800df88:	bf4c      	ite	mi
 800df8a:	9306      	strmi	r3, [sp, #24]
 800df8c:	9305      	strpl	r3, [sp, #20]
 800df8e:	f1b8 0f00 	cmp.w	r8, #0
 800df92:	910c      	str	r1, [sp, #48]	@ 0x30
 800df94:	db18      	blt.n	800dfc8 <_dtoa_r+0x1f8>
 800df96:	9b06      	ldr	r3, [sp, #24]
 800df98:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800df9c:	4443      	add	r3, r8
 800df9e:	9306      	str	r3, [sp, #24]
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	9a07      	ldr	r2, [sp, #28]
 800dfa4:	2a09      	cmp	r2, #9
 800dfa6:	d849      	bhi.n	800e03c <_dtoa_r+0x26c>
 800dfa8:	2a05      	cmp	r2, #5
 800dfaa:	bfc4      	itt	gt
 800dfac:	3a04      	subgt	r2, #4
 800dfae:	9207      	strgt	r2, [sp, #28]
 800dfb0:	9a07      	ldr	r2, [sp, #28]
 800dfb2:	f1a2 0202 	sub.w	r2, r2, #2
 800dfb6:	bfcc      	ite	gt
 800dfb8:	2400      	movgt	r4, #0
 800dfba:	2401      	movle	r4, #1
 800dfbc:	2a03      	cmp	r2, #3
 800dfbe:	d848      	bhi.n	800e052 <_dtoa_r+0x282>
 800dfc0:	e8df f002 	tbb	[pc, r2]
 800dfc4:	3a2c2e0b 	.word	0x3a2c2e0b
 800dfc8:	9b05      	ldr	r3, [sp, #20]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	eba3 0308 	sub.w	r3, r3, r8
 800dfd0:	9305      	str	r3, [sp, #20]
 800dfd2:	920a      	str	r2, [sp, #40]	@ 0x28
 800dfd4:	f1c8 0300 	rsb	r3, r8, #0
 800dfd8:	e7e3      	b.n	800dfa2 <_dtoa_r+0x1d2>
 800dfda:	2200      	movs	r2, #0
 800dfdc:	9208      	str	r2, [sp, #32]
 800dfde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dfe0:	2a00      	cmp	r2, #0
 800dfe2:	dc39      	bgt.n	800e058 <_dtoa_r+0x288>
 800dfe4:	f04f 0b01 	mov.w	fp, #1
 800dfe8:	46da      	mov	sl, fp
 800dfea:	465a      	mov	r2, fp
 800dfec:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800dff0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800dff4:	2100      	movs	r1, #0
 800dff6:	2004      	movs	r0, #4
 800dff8:	f100 0614 	add.w	r6, r0, #20
 800dffc:	4296      	cmp	r6, r2
 800dffe:	d930      	bls.n	800e062 <_dtoa_r+0x292>
 800e000:	6079      	str	r1, [r7, #4]
 800e002:	4648      	mov	r0, r9
 800e004:	9304      	str	r3, [sp, #16]
 800e006:	f000 fd39 	bl	800ea7c <_Balloc>
 800e00a:	9b04      	ldr	r3, [sp, #16]
 800e00c:	4607      	mov	r7, r0
 800e00e:	2800      	cmp	r0, #0
 800e010:	d146      	bne.n	800e0a0 <_dtoa_r+0x2d0>
 800e012:	4b22      	ldr	r3, [pc, #136]	@ (800e09c <_dtoa_r+0x2cc>)
 800e014:	4602      	mov	r2, r0
 800e016:	f240 11af 	movw	r1, #431	@ 0x1af
 800e01a:	e6f2      	b.n	800de02 <_dtoa_r+0x32>
 800e01c:	2201      	movs	r2, #1
 800e01e:	e7dd      	b.n	800dfdc <_dtoa_r+0x20c>
 800e020:	2200      	movs	r2, #0
 800e022:	9208      	str	r2, [sp, #32]
 800e024:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e026:	eb08 0b02 	add.w	fp, r8, r2
 800e02a:	f10b 0a01 	add.w	sl, fp, #1
 800e02e:	4652      	mov	r2, sl
 800e030:	2a01      	cmp	r2, #1
 800e032:	bfb8      	it	lt
 800e034:	2201      	movlt	r2, #1
 800e036:	e7db      	b.n	800dff0 <_dtoa_r+0x220>
 800e038:	2201      	movs	r2, #1
 800e03a:	e7f2      	b.n	800e022 <_dtoa_r+0x252>
 800e03c:	2401      	movs	r4, #1
 800e03e:	2200      	movs	r2, #0
 800e040:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800e044:	f04f 3bff 	mov.w	fp, #4294967295
 800e048:	2100      	movs	r1, #0
 800e04a:	46da      	mov	sl, fp
 800e04c:	2212      	movs	r2, #18
 800e04e:	9109      	str	r1, [sp, #36]	@ 0x24
 800e050:	e7ce      	b.n	800dff0 <_dtoa_r+0x220>
 800e052:	2201      	movs	r2, #1
 800e054:	9208      	str	r2, [sp, #32]
 800e056:	e7f5      	b.n	800e044 <_dtoa_r+0x274>
 800e058:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800e05c:	46da      	mov	sl, fp
 800e05e:	465a      	mov	r2, fp
 800e060:	e7c6      	b.n	800dff0 <_dtoa_r+0x220>
 800e062:	3101      	adds	r1, #1
 800e064:	0040      	lsls	r0, r0, #1
 800e066:	e7c7      	b.n	800dff8 <_dtoa_r+0x228>
 800e068:	636f4361 	.word	0x636f4361
 800e06c:	3fd287a7 	.word	0x3fd287a7
 800e070:	8b60c8b3 	.word	0x8b60c8b3
 800e074:	3fc68a28 	.word	0x3fc68a28
 800e078:	509f79fb 	.word	0x509f79fb
 800e07c:	3fd34413 	.word	0x3fd34413
 800e080:	08010551 	.word	0x08010551
 800e084:	08010568 	.word	0x08010568
 800e088:	7ff00000 	.word	0x7ff00000
 800e08c:	0801054d 	.word	0x0801054d
 800e090:	08010521 	.word	0x08010521
 800e094:	08010520 	.word	0x08010520
 800e098:	08010660 	.word	0x08010660
 800e09c:	080105c0 	.word	0x080105c0
 800e0a0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800e0a4:	f1ba 0f0e 	cmp.w	sl, #14
 800e0a8:	6010      	str	r0, [r2, #0]
 800e0aa:	d86f      	bhi.n	800e18c <_dtoa_r+0x3bc>
 800e0ac:	2c00      	cmp	r4, #0
 800e0ae:	d06d      	beq.n	800e18c <_dtoa_r+0x3bc>
 800e0b0:	f1b8 0f00 	cmp.w	r8, #0
 800e0b4:	f340 80c2 	ble.w	800e23c <_dtoa_r+0x46c>
 800e0b8:	4aca      	ldr	r2, [pc, #808]	@ (800e3e4 <_dtoa_r+0x614>)
 800e0ba:	f008 010f 	and.w	r1, r8, #15
 800e0be:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e0c2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800e0c6:	ed92 7b00 	vldr	d7, [r2]
 800e0ca:	ea4f 1128 	mov.w	r1, r8, asr #4
 800e0ce:	f000 80a9 	beq.w	800e224 <_dtoa_r+0x454>
 800e0d2:	4ac5      	ldr	r2, [pc, #788]	@ (800e3e8 <_dtoa_r+0x618>)
 800e0d4:	ed92 6b08 	vldr	d6, [r2, #32]
 800e0d8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800e0dc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e0e0:	f001 010f 	and.w	r1, r1, #15
 800e0e4:	2203      	movs	r2, #3
 800e0e6:	48c0      	ldr	r0, [pc, #768]	@ (800e3e8 <_dtoa_r+0x618>)
 800e0e8:	2900      	cmp	r1, #0
 800e0ea:	f040 809d 	bne.w	800e228 <_dtoa_r+0x458>
 800e0ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e0f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e0f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e0fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e0fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e100:	2900      	cmp	r1, #0
 800e102:	f000 80c1 	beq.w	800e288 <_dtoa_r+0x4b8>
 800e106:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800e10a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e112:	f140 80b9 	bpl.w	800e288 <_dtoa_r+0x4b8>
 800e116:	f1ba 0f00 	cmp.w	sl, #0
 800e11a:	f000 80b5 	beq.w	800e288 <_dtoa_r+0x4b8>
 800e11e:	f1bb 0f00 	cmp.w	fp, #0
 800e122:	dd31      	ble.n	800e188 <_dtoa_r+0x3b8>
 800e124:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800e128:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e12c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e130:	f108 31ff 	add.w	r1, r8, #4294967295
 800e134:	9104      	str	r1, [sp, #16]
 800e136:	3201      	adds	r2, #1
 800e138:	465c      	mov	r4, fp
 800e13a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e13e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800e142:	ee07 2a90 	vmov	s15, r2
 800e146:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e14a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e14e:	ee15 2a90 	vmov	r2, s11
 800e152:	ec51 0b15 	vmov	r0, r1, d5
 800e156:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800e15a:	2c00      	cmp	r4, #0
 800e15c:	f040 8098 	bne.w	800e290 <_dtoa_r+0x4c0>
 800e160:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800e164:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e168:	ec41 0b17 	vmov	d7, r0, r1
 800e16c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e174:	f300 8261 	bgt.w	800e63a <_dtoa_r+0x86a>
 800e178:	eeb1 7b47 	vneg.f64	d7, d7
 800e17c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e184:	f100 80f5 	bmi.w	800e372 <_dtoa_r+0x5a2>
 800e188:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e18c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e18e:	2a00      	cmp	r2, #0
 800e190:	f2c0 812c 	blt.w	800e3ec <_dtoa_r+0x61c>
 800e194:	f1b8 0f0e 	cmp.w	r8, #14
 800e198:	f300 8128 	bgt.w	800e3ec <_dtoa_r+0x61c>
 800e19c:	4b91      	ldr	r3, [pc, #580]	@ (800e3e4 <_dtoa_r+0x614>)
 800e19e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e1a2:	ed93 6b00 	vldr	d6, [r3]
 800e1a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	da03      	bge.n	800e1b4 <_dtoa_r+0x3e4>
 800e1ac:	f1ba 0f00 	cmp.w	sl, #0
 800e1b0:	f340 80d2 	ble.w	800e358 <_dtoa_r+0x588>
 800e1b4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800e1b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e1bc:	463e      	mov	r6, r7
 800e1be:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e1c2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e1c6:	ee15 3a10 	vmov	r3, s10
 800e1ca:	3330      	adds	r3, #48	@ 0x30
 800e1cc:	f806 3b01 	strb.w	r3, [r6], #1
 800e1d0:	1bf3      	subs	r3, r6, r7
 800e1d2:	459a      	cmp	sl, r3
 800e1d4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e1d8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e1dc:	f040 80f8 	bne.w	800e3d0 <_dtoa_r+0x600>
 800e1e0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e1e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1ec:	f300 80dd 	bgt.w	800e3aa <_dtoa_r+0x5da>
 800e1f0:	eeb4 7b46 	vcmp.f64	d7, d6
 800e1f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1f8:	d104      	bne.n	800e204 <_dtoa_r+0x434>
 800e1fa:	ee15 3a10 	vmov	r3, s10
 800e1fe:	07db      	lsls	r3, r3, #31
 800e200:	f100 80d3 	bmi.w	800e3aa <_dtoa_r+0x5da>
 800e204:	9901      	ldr	r1, [sp, #4]
 800e206:	4648      	mov	r0, r9
 800e208:	f000 fc78 	bl	800eafc <_Bfree>
 800e20c:	2300      	movs	r3, #0
 800e20e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e210:	7033      	strb	r3, [r6, #0]
 800e212:	f108 0301 	add.w	r3, r8, #1
 800e216:	6013      	str	r3, [r2, #0]
 800e218:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	f000 8304 	beq.w	800e828 <_dtoa_r+0xa58>
 800e220:	601e      	str	r6, [r3, #0]
 800e222:	e301      	b.n	800e828 <_dtoa_r+0xa58>
 800e224:	2202      	movs	r2, #2
 800e226:	e75e      	b.n	800e0e6 <_dtoa_r+0x316>
 800e228:	07cc      	lsls	r4, r1, #31
 800e22a:	d504      	bpl.n	800e236 <_dtoa_r+0x466>
 800e22c:	ed90 6b00 	vldr	d6, [r0]
 800e230:	3201      	adds	r2, #1
 800e232:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e236:	1049      	asrs	r1, r1, #1
 800e238:	3008      	adds	r0, #8
 800e23a:	e755      	b.n	800e0e8 <_dtoa_r+0x318>
 800e23c:	d022      	beq.n	800e284 <_dtoa_r+0x4b4>
 800e23e:	f1c8 0100 	rsb	r1, r8, #0
 800e242:	4a68      	ldr	r2, [pc, #416]	@ (800e3e4 <_dtoa_r+0x614>)
 800e244:	f001 000f 	and.w	r0, r1, #15
 800e248:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e24c:	ed92 7b00 	vldr	d7, [r2]
 800e250:	ee28 7b07 	vmul.f64	d7, d8, d7
 800e254:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e258:	4863      	ldr	r0, [pc, #396]	@ (800e3e8 <_dtoa_r+0x618>)
 800e25a:	1109      	asrs	r1, r1, #4
 800e25c:	2400      	movs	r4, #0
 800e25e:	2202      	movs	r2, #2
 800e260:	b929      	cbnz	r1, 800e26e <_dtoa_r+0x49e>
 800e262:	2c00      	cmp	r4, #0
 800e264:	f43f af49 	beq.w	800e0fa <_dtoa_r+0x32a>
 800e268:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e26c:	e745      	b.n	800e0fa <_dtoa_r+0x32a>
 800e26e:	07ce      	lsls	r6, r1, #31
 800e270:	d505      	bpl.n	800e27e <_dtoa_r+0x4ae>
 800e272:	ed90 6b00 	vldr	d6, [r0]
 800e276:	3201      	adds	r2, #1
 800e278:	2401      	movs	r4, #1
 800e27a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e27e:	1049      	asrs	r1, r1, #1
 800e280:	3008      	adds	r0, #8
 800e282:	e7ed      	b.n	800e260 <_dtoa_r+0x490>
 800e284:	2202      	movs	r2, #2
 800e286:	e738      	b.n	800e0fa <_dtoa_r+0x32a>
 800e288:	f8cd 8010 	str.w	r8, [sp, #16]
 800e28c:	4654      	mov	r4, sl
 800e28e:	e754      	b.n	800e13a <_dtoa_r+0x36a>
 800e290:	4a54      	ldr	r2, [pc, #336]	@ (800e3e4 <_dtoa_r+0x614>)
 800e292:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800e296:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e29a:	9a08      	ldr	r2, [sp, #32]
 800e29c:	ec41 0b17 	vmov	d7, r0, r1
 800e2a0:	443c      	add	r4, r7
 800e2a2:	b34a      	cbz	r2, 800e2f8 <_dtoa_r+0x528>
 800e2a4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800e2a8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800e2ac:	463e      	mov	r6, r7
 800e2ae:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e2b2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800e2b6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e2ba:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e2be:	ee14 2a90 	vmov	r2, s9
 800e2c2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e2c6:	3230      	adds	r2, #48	@ 0x30
 800e2c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e2cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e2d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2d4:	f806 2b01 	strb.w	r2, [r6], #1
 800e2d8:	d438      	bmi.n	800e34c <_dtoa_r+0x57c>
 800e2da:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e2de:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2e6:	d462      	bmi.n	800e3ae <_dtoa_r+0x5de>
 800e2e8:	42a6      	cmp	r6, r4
 800e2ea:	f43f af4d 	beq.w	800e188 <_dtoa_r+0x3b8>
 800e2ee:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e2f2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e2f6:	e7e0      	b.n	800e2ba <_dtoa_r+0x4ea>
 800e2f8:	4621      	mov	r1, r4
 800e2fa:	463e      	mov	r6, r7
 800e2fc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e300:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800e304:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e308:	ee14 2a90 	vmov	r2, s9
 800e30c:	3230      	adds	r2, #48	@ 0x30
 800e30e:	f806 2b01 	strb.w	r2, [r6], #1
 800e312:	42a6      	cmp	r6, r4
 800e314:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e318:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e31c:	d119      	bne.n	800e352 <_dtoa_r+0x582>
 800e31e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800e322:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e326:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e32e:	dc3e      	bgt.n	800e3ae <_dtoa_r+0x5de>
 800e330:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e334:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800e338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e33c:	f57f af24 	bpl.w	800e188 <_dtoa_r+0x3b8>
 800e340:	460e      	mov	r6, r1
 800e342:	3901      	subs	r1, #1
 800e344:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e348:	2b30      	cmp	r3, #48	@ 0x30
 800e34a:	d0f9      	beq.n	800e340 <_dtoa_r+0x570>
 800e34c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e350:	e758      	b.n	800e204 <_dtoa_r+0x434>
 800e352:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e356:	e7d5      	b.n	800e304 <_dtoa_r+0x534>
 800e358:	d10b      	bne.n	800e372 <_dtoa_r+0x5a2>
 800e35a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800e35e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e362:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e366:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e36e:	f2c0 8161 	blt.w	800e634 <_dtoa_r+0x864>
 800e372:	2400      	movs	r4, #0
 800e374:	4625      	mov	r5, r4
 800e376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e378:	43db      	mvns	r3, r3
 800e37a:	9304      	str	r3, [sp, #16]
 800e37c:	463e      	mov	r6, r7
 800e37e:	f04f 0800 	mov.w	r8, #0
 800e382:	4621      	mov	r1, r4
 800e384:	4648      	mov	r0, r9
 800e386:	f000 fbb9 	bl	800eafc <_Bfree>
 800e38a:	2d00      	cmp	r5, #0
 800e38c:	d0de      	beq.n	800e34c <_dtoa_r+0x57c>
 800e38e:	f1b8 0f00 	cmp.w	r8, #0
 800e392:	d005      	beq.n	800e3a0 <_dtoa_r+0x5d0>
 800e394:	45a8      	cmp	r8, r5
 800e396:	d003      	beq.n	800e3a0 <_dtoa_r+0x5d0>
 800e398:	4641      	mov	r1, r8
 800e39a:	4648      	mov	r0, r9
 800e39c:	f000 fbae 	bl	800eafc <_Bfree>
 800e3a0:	4629      	mov	r1, r5
 800e3a2:	4648      	mov	r0, r9
 800e3a4:	f000 fbaa 	bl	800eafc <_Bfree>
 800e3a8:	e7d0      	b.n	800e34c <_dtoa_r+0x57c>
 800e3aa:	f8cd 8010 	str.w	r8, [sp, #16]
 800e3ae:	4633      	mov	r3, r6
 800e3b0:	461e      	mov	r6, r3
 800e3b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e3b6:	2a39      	cmp	r2, #57	@ 0x39
 800e3b8:	d106      	bne.n	800e3c8 <_dtoa_r+0x5f8>
 800e3ba:	429f      	cmp	r7, r3
 800e3bc:	d1f8      	bne.n	800e3b0 <_dtoa_r+0x5e0>
 800e3be:	9a04      	ldr	r2, [sp, #16]
 800e3c0:	3201      	adds	r2, #1
 800e3c2:	9204      	str	r2, [sp, #16]
 800e3c4:	2230      	movs	r2, #48	@ 0x30
 800e3c6:	703a      	strb	r2, [r7, #0]
 800e3c8:	781a      	ldrb	r2, [r3, #0]
 800e3ca:	3201      	adds	r2, #1
 800e3cc:	701a      	strb	r2, [r3, #0]
 800e3ce:	e7bd      	b.n	800e34c <_dtoa_r+0x57c>
 800e3d0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e3d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e3d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3dc:	f47f aeef 	bne.w	800e1be <_dtoa_r+0x3ee>
 800e3e0:	e710      	b.n	800e204 <_dtoa_r+0x434>
 800e3e2:	bf00      	nop
 800e3e4:	08010660 	.word	0x08010660
 800e3e8:	08010638 	.word	0x08010638
 800e3ec:	9908      	ldr	r1, [sp, #32]
 800e3ee:	2900      	cmp	r1, #0
 800e3f0:	f000 80e3 	beq.w	800e5ba <_dtoa_r+0x7ea>
 800e3f4:	9907      	ldr	r1, [sp, #28]
 800e3f6:	2901      	cmp	r1, #1
 800e3f8:	f300 80c8 	bgt.w	800e58c <_dtoa_r+0x7bc>
 800e3fc:	2d00      	cmp	r5, #0
 800e3fe:	f000 80c1 	beq.w	800e584 <_dtoa_r+0x7b4>
 800e402:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e406:	9e05      	ldr	r6, [sp, #20]
 800e408:	461c      	mov	r4, r3
 800e40a:	9304      	str	r3, [sp, #16]
 800e40c:	9b05      	ldr	r3, [sp, #20]
 800e40e:	4413      	add	r3, r2
 800e410:	9305      	str	r3, [sp, #20]
 800e412:	9b06      	ldr	r3, [sp, #24]
 800e414:	2101      	movs	r1, #1
 800e416:	4413      	add	r3, r2
 800e418:	4648      	mov	r0, r9
 800e41a:	9306      	str	r3, [sp, #24]
 800e41c:	f000 fc22 	bl	800ec64 <__i2b>
 800e420:	9b04      	ldr	r3, [sp, #16]
 800e422:	4605      	mov	r5, r0
 800e424:	b166      	cbz	r6, 800e440 <_dtoa_r+0x670>
 800e426:	9a06      	ldr	r2, [sp, #24]
 800e428:	2a00      	cmp	r2, #0
 800e42a:	dd09      	ble.n	800e440 <_dtoa_r+0x670>
 800e42c:	42b2      	cmp	r2, r6
 800e42e:	9905      	ldr	r1, [sp, #20]
 800e430:	bfa8      	it	ge
 800e432:	4632      	movge	r2, r6
 800e434:	1a89      	subs	r1, r1, r2
 800e436:	9105      	str	r1, [sp, #20]
 800e438:	9906      	ldr	r1, [sp, #24]
 800e43a:	1ab6      	subs	r6, r6, r2
 800e43c:	1a8a      	subs	r2, r1, r2
 800e43e:	9206      	str	r2, [sp, #24]
 800e440:	b1fb      	cbz	r3, 800e482 <_dtoa_r+0x6b2>
 800e442:	9a08      	ldr	r2, [sp, #32]
 800e444:	2a00      	cmp	r2, #0
 800e446:	f000 80bc 	beq.w	800e5c2 <_dtoa_r+0x7f2>
 800e44a:	b19c      	cbz	r4, 800e474 <_dtoa_r+0x6a4>
 800e44c:	4629      	mov	r1, r5
 800e44e:	4622      	mov	r2, r4
 800e450:	4648      	mov	r0, r9
 800e452:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e454:	f000 fcc6 	bl	800ede4 <__pow5mult>
 800e458:	9a01      	ldr	r2, [sp, #4]
 800e45a:	4601      	mov	r1, r0
 800e45c:	4605      	mov	r5, r0
 800e45e:	4648      	mov	r0, r9
 800e460:	f000 fc16 	bl	800ec90 <__multiply>
 800e464:	9901      	ldr	r1, [sp, #4]
 800e466:	9004      	str	r0, [sp, #16]
 800e468:	4648      	mov	r0, r9
 800e46a:	f000 fb47 	bl	800eafc <_Bfree>
 800e46e:	9a04      	ldr	r2, [sp, #16]
 800e470:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e472:	9201      	str	r2, [sp, #4]
 800e474:	1b1a      	subs	r2, r3, r4
 800e476:	d004      	beq.n	800e482 <_dtoa_r+0x6b2>
 800e478:	9901      	ldr	r1, [sp, #4]
 800e47a:	4648      	mov	r0, r9
 800e47c:	f000 fcb2 	bl	800ede4 <__pow5mult>
 800e480:	9001      	str	r0, [sp, #4]
 800e482:	2101      	movs	r1, #1
 800e484:	4648      	mov	r0, r9
 800e486:	f000 fbed 	bl	800ec64 <__i2b>
 800e48a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e48c:	4604      	mov	r4, r0
 800e48e:	2b00      	cmp	r3, #0
 800e490:	f000 81d0 	beq.w	800e834 <_dtoa_r+0xa64>
 800e494:	461a      	mov	r2, r3
 800e496:	4601      	mov	r1, r0
 800e498:	4648      	mov	r0, r9
 800e49a:	f000 fca3 	bl	800ede4 <__pow5mult>
 800e49e:	9b07      	ldr	r3, [sp, #28]
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	4604      	mov	r4, r0
 800e4a4:	f300 8095 	bgt.w	800e5d2 <_dtoa_r+0x802>
 800e4a8:	9b02      	ldr	r3, [sp, #8]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	f040 808b 	bne.w	800e5c6 <_dtoa_r+0x7f6>
 800e4b0:	9b03      	ldr	r3, [sp, #12]
 800e4b2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e4b6:	2a00      	cmp	r2, #0
 800e4b8:	f040 8087 	bne.w	800e5ca <_dtoa_r+0x7fa>
 800e4bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800e4c0:	0d12      	lsrs	r2, r2, #20
 800e4c2:	0512      	lsls	r2, r2, #20
 800e4c4:	2a00      	cmp	r2, #0
 800e4c6:	f000 8082 	beq.w	800e5ce <_dtoa_r+0x7fe>
 800e4ca:	9b05      	ldr	r3, [sp, #20]
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	9305      	str	r3, [sp, #20]
 800e4d0:	9b06      	ldr	r3, [sp, #24]
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	9306      	str	r3, [sp, #24]
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e4da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	f000 81af 	beq.w	800e840 <_dtoa_r+0xa70>
 800e4e2:	6922      	ldr	r2, [r4, #16]
 800e4e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e4e8:	6910      	ldr	r0, [r2, #16]
 800e4ea:	f000 fb6f 	bl	800ebcc <__hi0bits>
 800e4ee:	f1c0 0020 	rsb	r0, r0, #32
 800e4f2:	9b06      	ldr	r3, [sp, #24]
 800e4f4:	4418      	add	r0, r3
 800e4f6:	f010 001f 	ands.w	r0, r0, #31
 800e4fa:	d076      	beq.n	800e5ea <_dtoa_r+0x81a>
 800e4fc:	f1c0 0220 	rsb	r2, r0, #32
 800e500:	2a04      	cmp	r2, #4
 800e502:	dd69      	ble.n	800e5d8 <_dtoa_r+0x808>
 800e504:	9b05      	ldr	r3, [sp, #20]
 800e506:	f1c0 001c 	rsb	r0, r0, #28
 800e50a:	4403      	add	r3, r0
 800e50c:	9305      	str	r3, [sp, #20]
 800e50e:	9b06      	ldr	r3, [sp, #24]
 800e510:	4406      	add	r6, r0
 800e512:	4403      	add	r3, r0
 800e514:	9306      	str	r3, [sp, #24]
 800e516:	9b05      	ldr	r3, [sp, #20]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	dd05      	ble.n	800e528 <_dtoa_r+0x758>
 800e51c:	9901      	ldr	r1, [sp, #4]
 800e51e:	461a      	mov	r2, r3
 800e520:	4648      	mov	r0, r9
 800e522:	f000 fcb9 	bl	800ee98 <__lshift>
 800e526:	9001      	str	r0, [sp, #4]
 800e528:	9b06      	ldr	r3, [sp, #24]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	dd05      	ble.n	800e53a <_dtoa_r+0x76a>
 800e52e:	4621      	mov	r1, r4
 800e530:	461a      	mov	r2, r3
 800e532:	4648      	mov	r0, r9
 800e534:	f000 fcb0 	bl	800ee98 <__lshift>
 800e538:	4604      	mov	r4, r0
 800e53a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d056      	beq.n	800e5ee <_dtoa_r+0x81e>
 800e540:	9801      	ldr	r0, [sp, #4]
 800e542:	4621      	mov	r1, r4
 800e544:	f000 fd14 	bl	800ef70 <__mcmp>
 800e548:	2800      	cmp	r0, #0
 800e54a:	da50      	bge.n	800e5ee <_dtoa_r+0x81e>
 800e54c:	f108 33ff 	add.w	r3, r8, #4294967295
 800e550:	9304      	str	r3, [sp, #16]
 800e552:	9901      	ldr	r1, [sp, #4]
 800e554:	2300      	movs	r3, #0
 800e556:	220a      	movs	r2, #10
 800e558:	4648      	mov	r0, r9
 800e55a:	f000 faf1 	bl	800eb40 <__multadd>
 800e55e:	9b08      	ldr	r3, [sp, #32]
 800e560:	9001      	str	r0, [sp, #4]
 800e562:	2b00      	cmp	r3, #0
 800e564:	f000 816e 	beq.w	800e844 <_dtoa_r+0xa74>
 800e568:	4629      	mov	r1, r5
 800e56a:	2300      	movs	r3, #0
 800e56c:	220a      	movs	r2, #10
 800e56e:	4648      	mov	r0, r9
 800e570:	f000 fae6 	bl	800eb40 <__multadd>
 800e574:	f1bb 0f00 	cmp.w	fp, #0
 800e578:	4605      	mov	r5, r0
 800e57a:	dc64      	bgt.n	800e646 <_dtoa_r+0x876>
 800e57c:	9b07      	ldr	r3, [sp, #28]
 800e57e:	2b02      	cmp	r3, #2
 800e580:	dc3e      	bgt.n	800e600 <_dtoa_r+0x830>
 800e582:	e060      	b.n	800e646 <_dtoa_r+0x876>
 800e584:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e586:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e58a:	e73c      	b.n	800e406 <_dtoa_r+0x636>
 800e58c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800e590:	42a3      	cmp	r3, r4
 800e592:	bfbf      	itttt	lt
 800e594:	1ae2      	sublt	r2, r4, r3
 800e596:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e598:	189b      	addlt	r3, r3, r2
 800e59a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800e59c:	bfae      	itee	ge
 800e59e:	1b1c      	subge	r4, r3, r4
 800e5a0:	4623      	movlt	r3, r4
 800e5a2:	2400      	movlt	r4, #0
 800e5a4:	f1ba 0f00 	cmp.w	sl, #0
 800e5a8:	bfb5      	itete	lt
 800e5aa:	9a05      	ldrlt	r2, [sp, #20]
 800e5ac:	9e05      	ldrge	r6, [sp, #20]
 800e5ae:	eba2 060a 	sublt.w	r6, r2, sl
 800e5b2:	4652      	movge	r2, sl
 800e5b4:	bfb8      	it	lt
 800e5b6:	2200      	movlt	r2, #0
 800e5b8:	e727      	b.n	800e40a <_dtoa_r+0x63a>
 800e5ba:	9e05      	ldr	r6, [sp, #20]
 800e5bc:	9d08      	ldr	r5, [sp, #32]
 800e5be:	461c      	mov	r4, r3
 800e5c0:	e730      	b.n	800e424 <_dtoa_r+0x654>
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	e758      	b.n	800e478 <_dtoa_r+0x6a8>
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	e786      	b.n	800e4d8 <_dtoa_r+0x708>
 800e5ca:	9b02      	ldr	r3, [sp, #8]
 800e5cc:	e784      	b.n	800e4d8 <_dtoa_r+0x708>
 800e5ce:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e5d0:	e783      	b.n	800e4da <_dtoa_r+0x70a>
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e5d6:	e784      	b.n	800e4e2 <_dtoa_r+0x712>
 800e5d8:	d09d      	beq.n	800e516 <_dtoa_r+0x746>
 800e5da:	9b05      	ldr	r3, [sp, #20]
 800e5dc:	321c      	adds	r2, #28
 800e5de:	4413      	add	r3, r2
 800e5e0:	9305      	str	r3, [sp, #20]
 800e5e2:	9b06      	ldr	r3, [sp, #24]
 800e5e4:	4416      	add	r6, r2
 800e5e6:	4413      	add	r3, r2
 800e5e8:	e794      	b.n	800e514 <_dtoa_r+0x744>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	e7f5      	b.n	800e5da <_dtoa_r+0x80a>
 800e5ee:	f1ba 0f00 	cmp.w	sl, #0
 800e5f2:	f8cd 8010 	str.w	r8, [sp, #16]
 800e5f6:	46d3      	mov	fp, sl
 800e5f8:	dc21      	bgt.n	800e63e <_dtoa_r+0x86e>
 800e5fa:	9b07      	ldr	r3, [sp, #28]
 800e5fc:	2b02      	cmp	r3, #2
 800e5fe:	dd1e      	ble.n	800e63e <_dtoa_r+0x86e>
 800e600:	f1bb 0f00 	cmp.w	fp, #0
 800e604:	f47f aeb7 	bne.w	800e376 <_dtoa_r+0x5a6>
 800e608:	4621      	mov	r1, r4
 800e60a:	465b      	mov	r3, fp
 800e60c:	2205      	movs	r2, #5
 800e60e:	4648      	mov	r0, r9
 800e610:	f000 fa96 	bl	800eb40 <__multadd>
 800e614:	4601      	mov	r1, r0
 800e616:	4604      	mov	r4, r0
 800e618:	9801      	ldr	r0, [sp, #4]
 800e61a:	f000 fca9 	bl	800ef70 <__mcmp>
 800e61e:	2800      	cmp	r0, #0
 800e620:	f77f aea9 	ble.w	800e376 <_dtoa_r+0x5a6>
 800e624:	463e      	mov	r6, r7
 800e626:	2331      	movs	r3, #49	@ 0x31
 800e628:	f806 3b01 	strb.w	r3, [r6], #1
 800e62c:	9b04      	ldr	r3, [sp, #16]
 800e62e:	3301      	adds	r3, #1
 800e630:	9304      	str	r3, [sp, #16]
 800e632:	e6a4      	b.n	800e37e <_dtoa_r+0x5ae>
 800e634:	f8cd 8010 	str.w	r8, [sp, #16]
 800e638:	4654      	mov	r4, sl
 800e63a:	4625      	mov	r5, r4
 800e63c:	e7f2      	b.n	800e624 <_dtoa_r+0x854>
 800e63e:	9b08      	ldr	r3, [sp, #32]
 800e640:	2b00      	cmp	r3, #0
 800e642:	f000 8103 	beq.w	800e84c <_dtoa_r+0xa7c>
 800e646:	2e00      	cmp	r6, #0
 800e648:	dd05      	ble.n	800e656 <_dtoa_r+0x886>
 800e64a:	4629      	mov	r1, r5
 800e64c:	4632      	mov	r2, r6
 800e64e:	4648      	mov	r0, r9
 800e650:	f000 fc22 	bl	800ee98 <__lshift>
 800e654:	4605      	mov	r5, r0
 800e656:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d058      	beq.n	800e70e <_dtoa_r+0x93e>
 800e65c:	6869      	ldr	r1, [r5, #4]
 800e65e:	4648      	mov	r0, r9
 800e660:	f000 fa0c 	bl	800ea7c <_Balloc>
 800e664:	4606      	mov	r6, r0
 800e666:	b928      	cbnz	r0, 800e674 <_dtoa_r+0x8a4>
 800e668:	4b82      	ldr	r3, [pc, #520]	@ (800e874 <_dtoa_r+0xaa4>)
 800e66a:	4602      	mov	r2, r0
 800e66c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e670:	f7ff bbc7 	b.w	800de02 <_dtoa_r+0x32>
 800e674:	692a      	ldr	r2, [r5, #16]
 800e676:	3202      	adds	r2, #2
 800e678:	0092      	lsls	r2, r2, #2
 800e67a:	f105 010c 	add.w	r1, r5, #12
 800e67e:	300c      	adds	r0, #12
 800e680:	f000 fe3a 	bl	800f2f8 <memcpy>
 800e684:	2201      	movs	r2, #1
 800e686:	4631      	mov	r1, r6
 800e688:	4648      	mov	r0, r9
 800e68a:	f000 fc05 	bl	800ee98 <__lshift>
 800e68e:	1c7b      	adds	r3, r7, #1
 800e690:	9305      	str	r3, [sp, #20]
 800e692:	eb07 030b 	add.w	r3, r7, fp
 800e696:	9309      	str	r3, [sp, #36]	@ 0x24
 800e698:	9b02      	ldr	r3, [sp, #8]
 800e69a:	f003 0301 	and.w	r3, r3, #1
 800e69e:	46a8      	mov	r8, r5
 800e6a0:	9308      	str	r3, [sp, #32]
 800e6a2:	4605      	mov	r5, r0
 800e6a4:	9b05      	ldr	r3, [sp, #20]
 800e6a6:	9801      	ldr	r0, [sp, #4]
 800e6a8:	4621      	mov	r1, r4
 800e6aa:	f103 3bff 	add.w	fp, r3, #4294967295
 800e6ae:	f7ff fb04 	bl	800dcba <quorem>
 800e6b2:	4641      	mov	r1, r8
 800e6b4:	9002      	str	r0, [sp, #8]
 800e6b6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800e6ba:	9801      	ldr	r0, [sp, #4]
 800e6bc:	f000 fc58 	bl	800ef70 <__mcmp>
 800e6c0:	462a      	mov	r2, r5
 800e6c2:	9006      	str	r0, [sp, #24]
 800e6c4:	4621      	mov	r1, r4
 800e6c6:	4648      	mov	r0, r9
 800e6c8:	f000 fc6e 	bl	800efa8 <__mdiff>
 800e6cc:	68c2      	ldr	r2, [r0, #12]
 800e6ce:	4606      	mov	r6, r0
 800e6d0:	b9fa      	cbnz	r2, 800e712 <_dtoa_r+0x942>
 800e6d2:	4601      	mov	r1, r0
 800e6d4:	9801      	ldr	r0, [sp, #4]
 800e6d6:	f000 fc4b 	bl	800ef70 <__mcmp>
 800e6da:	4602      	mov	r2, r0
 800e6dc:	4631      	mov	r1, r6
 800e6de:	4648      	mov	r0, r9
 800e6e0:	920a      	str	r2, [sp, #40]	@ 0x28
 800e6e2:	f000 fa0b 	bl	800eafc <_Bfree>
 800e6e6:	9b07      	ldr	r3, [sp, #28]
 800e6e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e6ea:	9e05      	ldr	r6, [sp, #20]
 800e6ec:	ea43 0102 	orr.w	r1, r3, r2
 800e6f0:	9b08      	ldr	r3, [sp, #32]
 800e6f2:	4319      	orrs	r1, r3
 800e6f4:	d10f      	bne.n	800e716 <_dtoa_r+0x946>
 800e6f6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800e6fa:	d028      	beq.n	800e74e <_dtoa_r+0x97e>
 800e6fc:	9b06      	ldr	r3, [sp, #24]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	dd02      	ble.n	800e708 <_dtoa_r+0x938>
 800e702:	9b02      	ldr	r3, [sp, #8]
 800e704:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800e708:	f88b a000 	strb.w	sl, [fp]
 800e70c:	e639      	b.n	800e382 <_dtoa_r+0x5b2>
 800e70e:	4628      	mov	r0, r5
 800e710:	e7bd      	b.n	800e68e <_dtoa_r+0x8be>
 800e712:	2201      	movs	r2, #1
 800e714:	e7e2      	b.n	800e6dc <_dtoa_r+0x90c>
 800e716:	9b06      	ldr	r3, [sp, #24]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	db04      	blt.n	800e726 <_dtoa_r+0x956>
 800e71c:	9907      	ldr	r1, [sp, #28]
 800e71e:	430b      	orrs	r3, r1
 800e720:	9908      	ldr	r1, [sp, #32]
 800e722:	430b      	orrs	r3, r1
 800e724:	d120      	bne.n	800e768 <_dtoa_r+0x998>
 800e726:	2a00      	cmp	r2, #0
 800e728:	ddee      	ble.n	800e708 <_dtoa_r+0x938>
 800e72a:	9901      	ldr	r1, [sp, #4]
 800e72c:	2201      	movs	r2, #1
 800e72e:	4648      	mov	r0, r9
 800e730:	f000 fbb2 	bl	800ee98 <__lshift>
 800e734:	4621      	mov	r1, r4
 800e736:	9001      	str	r0, [sp, #4]
 800e738:	f000 fc1a 	bl	800ef70 <__mcmp>
 800e73c:	2800      	cmp	r0, #0
 800e73e:	dc03      	bgt.n	800e748 <_dtoa_r+0x978>
 800e740:	d1e2      	bne.n	800e708 <_dtoa_r+0x938>
 800e742:	f01a 0f01 	tst.w	sl, #1
 800e746:	d0df      	beq.n	800e708 <_dtoa_r+0x938>
 800e748:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800e74c:	d1d9      	bne.n	800e702 <_dtoa_r+0x932>
 800e74e:	2339      	movs	r3, #57	@ 0x39
 800e750:	f88b 3000 	strb.w	r3, [fp]
 800e754:	4633      	mov	r3, r6
 800e756:	461e      	mov	r6, r3
 800e758:	3b01      	subs	r3, #1
 800e75a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e75e:	2a39      	cmp	r2, #57	@ 0x39
 800e760:	d053      	beq.n	800e80a <_dtoa_r+0xa3a>
 800e762:	3201      	adds	r2, #1
 800e764:	701a      	strb	r2, [r3, #0]
 800e766:	e60c      	b.n	800e382 <_dtoa_r+0x5b2>
 800e768:	2a00      	cmp	r2, #0
 800e76a:	dd07      	ble.n	800e77c <_dtoa_r+0x9ac>
 800e76c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800e770:	d0ed      	beq.n	800e74e <_dtoa_r+0x97e>
 800e772:	f10a 0301 	add.w	r3, sl, #1
 800e776:	f88b 3000 	strb.w	r3, [fp]
 800e77a:	e602      	b.n	800e382 <_dtoa_r+0x5b2>
 800e77c:	9b05      	ldr	r3, [sp, #20]
 800e77e:	9a05      	ldr	r2, [sp, #20]
 800e780:	f803 ac01 	strb.w	sl, [r3, #-1]
 800e784:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e786:	4293      	cmp	r3, r2
 800e788:	d029      	beq.n	800e7de <_dtoa_r+0xa0e>
 800e78a:	9901      	ldr	r1, [sp, #4]
 800e78c:	2300      	movs	r3, #0
 800e78e:	220a      	movs	r2, #10
 800e790:	4648      	mov	r0, r9
 800e792:	f000 f9d5 	bl	800eb40 <__multadd>
 800e796:	45a8      	cmp	r8, r5
 800e798:	9001      	str	r0, [sp, #4]
 800e79a:	f04f 0300 	mov.w	r3, #0
 800e79e:	f04f 020a 	mov.w	r2, #10
 800e7a2:	4641      	mov	r1, r8
 800e7a4:	4648      	mov	r0, r9
 800e7a6:	d107      	bne.n	800e7b8 <_dtoa_r+0x9e8>
 800e7a8:	f000 f9ca 	bl	800eb40 <__multadd>
 800e7ac:	4680      	mov	r8, r0
 800e7ae:	4605      	mov	r5, r0
 800e7b0:	9b05      	ldr	r3, [sp, #20]
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	9305      	str	r3, [sp, #20]
 800e7b6:	e775      	b.n	800e6a4 <_dtoa_r+0x8d4>
 800e7b8:	f000 f9c2 	bl	800eb40 <__multadd>
 800e7bc:	4629      	mov	r1, r5
 800e7be:	4680      	mov	r8, r0
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	220a      	movs	r2, #10
 800e7c4:	4648      	mov	r0, r9
 800e7c6:	f000 f9bb 	bl	800eb40 <__multadd>
 800e7ca:	4605      	mov	r5, r0
 800e7cc:	e7f0      	b.n	800e7b0 <_dtoa_r+0x9e0>
 800e7ce:	f1bb 0f00 	cmp.w	fp, #0
 800e7d2:	bfcc      	ite	gt
 800e7d4:	465e      	movgt	r6, fp
 800e7d6:	2601      	movle	r6, #1
 800e7d8:	443e      	add	r6, r7
 800e7da:	f04f 0800 	mov.w	r8, #0
 800e7de:	9901      	ldr	r1, [sp, #4]
 800e7e0:	2201      	movs	r2, #1
 800e7e2:	4648      	mov	r0, r9
 800e7e4:	f000 fb58 	bl	800ee98 <__lshift>
 800e7e8:	4621      	mov	r1, r4
 800e7ea:	9001      	str	r0, [sp, #4]
 800e7ec:	f000 fbc0 	bl	800ef70 <__mcmp>
 800e7f0:	2800      	cmp	r0, #0
 800e7f2:	dcaf      	bgt.n	800e754 <_dtoa_r+0x984>
 800e7f4:	d102      	bne.n	800e7fc <_dtoa_r+0xa2c>
 800e7f6:	f01a 0f01 	tst.w	sl, #1
 800e7fa:	d1ab      	bne.n	800e754 <_dtoa_r+0x984>
 800e7fc:	4633      	mov	r3, r6
 800e7fe:	461e      	mov	r6, r3
 800e800:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e804:	2a30      	cmp	r2, #48	@ 0x30
 800e806:	d0fa      	beq.n	800e7fe <_dtoa_r+0xa2e>
 800e808:	e5bb      	b.n	800e382 <_dtoa_r+0x5b2>
 800e80a:	429f      	cmp	r7, r3
 800e80c:	d1a3      	bne.n	800e756 <_dtoa_r+0x986>
 800e80e:	9b04      	ldr	r3, [sp, #16]
 800e810:	3301      	adds	r3, #1
 800e812:	9304      	str	r3, [sp, #16]
 800e814:	2331      	movs	r3, #49	@ 0x31
 800e816:	703b      	strb	r3, [r7, #0]
 800e818:	e5b3      	b.n	800e382 <_dtoa_r+0x5b2>
 800e81a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e81c:	4f16      	ldr	r7, [pc, #88]	@ (800e878 <_dtoa_r+0xaa8>)
 800e81e:	b11b      	cbz	r3, 800e828 <_dtoa_r+0xa58>
 800e820:	f107 0308 	add.w	r3, r7, #8
 800e824:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800e826:	6013      	str	r3, [r2, #0]
 800e828:	4638      	mov	r0, r7
 800e82a:	b011      	add	sp, #68	@ 0x44
 800e82c:	ecbd 8b02 	vpop	{d8}
 800e830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e834:	9b07      	ldr	r3, [sp, #28]
 800e836:	2b01      	cmp	r3, #1
 800e838:	f77f ae36 	ble.w	800e4a8 <_dtoa_r+0x6d8>
 800e83c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e83e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e840:	2001      	movs	r0, #1
 800e842:	e656      	b.n	800e4f2 <_dtoa_r+0x722>
 800e844:	f1bb 0f00 	cmp.w	fp, #0
 800e848:	f77f aed7 	ble.w	800e5fa <_dtoa_r+0x82a>
 800e84c:	463e      	mov	r6, r7
 800e84e:	9801      	ldr	r0, [sp, #4]
 800e850:	4621      	mov	r1, r4
 800e852:	f7ff fa32 	bl	800dcba <quorem>
 800e856:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800e85a:	f806 ab01 	strb.w	sl, [r6], #1
 800e85e:	1bf2      	subs	r2, r6, r7
 800e860:	4593      	cmp	fp, r2
 800e862:	ddb4      	ble.n	800e7ce <_dtoa_r+0x9fe>
 800e864:	9901      	ldr	r1, [sp, #4]
 800e866:	2300      	movs	r3, #0
 800e868:	220a      	movs	r2, #10
 800e86a:	4648      	mov	r0, r9
 800e86c:	f000 f968 	bl	800eb40 <__multadd>
 800e870:	9001      	str	r0, [sp, #4]
 800e872:	e7ec      	b.n	800e84e <_dtoa_r+0xa7e>
 800e874:	080105c0 	.word	0x080105c0
 800e878:	08010544 	.word	0x08010544

0800e87c <_free_r>:
 800e87c:	b538      	push	{r3, r4, r5, lr}
 800e87e:	4605      	mov	r5, r0
 800e880:	2900      	cmp	r1, #0
 800e882:	d041      	beq.n	800e908 <_free_r+0x8c>
 800e884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e888:	1f0c      	subs	r4, r1, #4
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	bfb8      	it	lt
 800e88e:	18e4      	addlt	r4, r4, r3
 800e890:	f000 f8e8 	bl	800ea64 <__malloc_lock>
 800e894:	4a1d      	ldr	r2, [pc, #116]	@ (800e90c <_free_r+0x90>)
 800e896:	6813      	ldr	r3, [r2, #0]
 800e898:	b933      	cbnz	r3, 800e8a8 <_free_r+0x2c>
 800e89a:	6063      	str	r3, [r4, #4]
 800e89c:	6014      	str	r4, [r2, #0]
 800e89e:	4628      	mov	r0, r5
 800e8a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8a4:	f000 b8e4 	b.w	800ea70 <__malloc_unlock>
 800e8a8:	42a3      	cmp	r3, r4
 800e8aa:	d908      	bls.n	800e8be <_free_r+0x42>
 800e8ac:	6820      	ldr	r0, [r4, #0]
 800e8ae:	1821      	adds	r1, r4, r0
 800e8b0:	428b      	cmp	r3, r1
 800e8b2:	bf01      	itttt	eq
 800e8b4:	6819      	ldreq	r1, [r3, #0]
 800e8b6:	685b      	ldreq	r3, [r3, #4]
 800e8b8:	1809      	addeq	r1, r1, r0
 800e8ba:	6021      	streq	r1, [r4, #0]
 800e8bc:	e7ed      	b.n	800e89a <_free_r+0x1e>
 800e8be:	461a      	mov	r2, r3
 800e8c0:	685b      	ldr	r3, [r3, #4]
 800e8c2:	b10b      	cbz	r3, 800e8c8 <_free_r+0x4c>
 800e8c4:	42a3      	cmp	r3, r4
 800e8c6:	d9fa      	bls.n	800e8be <_free_r+0x42>
 800e8c8:	6811      	ldr	r1, [r2, #0]
 800e8ca:	1850      	adds	r0, r2, r1
 800e8cc:	42a0      	cmp	r0, r4
 800e8ce:	d10b      	bne.n	800e8e8 <_free_r+0x6c>
 800e8d0:	6820      	ldr	r0, [r4, #0]
 800e8d2:	4401      	add	r1, r0
 800e8d4:	1850      	adds	r0, r2, r1
 800e8d6:	4283      	cmp	r3, r0
 800e8d8:	6011      	str	r1, [r2, #0]
 800e8da:	d1e0      	bne.n	800e89e <_free_r+0x22>
 800e8dc:	6818      	ldr	r0, [r3, #0]
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	6053      	str	r3, [r2, #4]
 800e8e2:	4408      	add	r0, r1
 800e8e4:	6010      	str	r0, [r2, #0]
 800e8e6:	e7da      	b.n	800e89e <_free_r+0x22>
 800e8e8:	d902      	bls.n	800e8f0 <_free_r+0x74>
 800e8ea:	230c      	movs	r3, #12
 800e8ec:	602b      	str	r3, [r5, #0]
 800e8ee:	e7d6      	b.n	800e89e <_free_r+0x22>
 800e8f0:	6820      	ldr	r0, [r4, #0]
 800e8f2:	1821      	adds	r1, r4, r0
 800e8f4:	428b      	cmp	r3, r1
 800e8f6:	bf04      	itt	eq
 800e8f8:	6819      	ldreq	r1, [r3, #0]
 800e8fa:	685b      	ldreq	r3, [r3, #4]
 800e8fc:	6063      	str	r3, [r4, #4]
 800e8fe:	bf04      	itt	eq
 800e900:	1809      	addeq	r1, r1, r0
 800e902:	6021      	streq	r1, [r4, #0]
 800e904:	6054      	str	r4, [r2, #4]
 800e906:	e7ca      	b.n	800e89e <_free_r+0x22>
 800e908:	bd38      	pop	{r3, r4, r5, pc}
 800e90a:	bf00      	nop
 800e90c:	24003fa4 	.word	0x24003fa4

0800e910 <malloc>:
 800e910:	4b02      	ldr	r3, [pc, #8]	@ (800e91c <malloc+0xc>)
 800e912:	4601      	mov	r1, r0
 800e914:	6818      	ldr	r0, [r3, #0]
 800e916:	f000 b825 	b.w	800e964 <_malloc_r>
 800e91a:	bf00      	nop
 800e91c:	2400002c 	.word	0x2400002c

0800e920 <sbrk_aligned>:
 800e920:	b570      	push	{r4, r5, r6, lr}
 800e922:	4e0f      	ldr	r6, [pc, #60]	@ (800e960 <sbrk_aligned+0x40>)
 800e924:	460c      	mov	r4, r1
 800e926:	6831      	ldr	r1, [r6, #0]
 800e928:	4605      	mov	r5, r0
 800e92a:	b911      	cbnz	r1, 800e932 <sbrk_aligned+0x12>
 800e92c:	f000 fcd4 	bl	800f2d8 <_sbrk_r>
 800e930:	6030      	str	r0, [r6, #0]
 800e932:	4621      	mov	r1, r4
 800e934:	4628      	mov	r0, r5
 800e936:	f000 fccf 	bl	800f2d8 <_sbrk_r>
 800e93a:	1c43      	adds	r3, r0, #1
 800e93c:	d103      	bne.n	800e946 <sbrk_aligned+0x26>
 800e93e:	f04f 34ff 	mov.w	r4, #4294967295
 800e942:	4620      	mov	r0, r4
 800e944:	bd70      	pop	{r4, r5, r6, pc}
 800e946:	1cc4      	adds	r4, r0, #3
 800e948:	f024 0403 	bic.w	r4, r4, #3
 800e94c:	42a0      	cmp	r0, r4
 800e94e:	d0f8      	beq.n	800e942 <sbrk_aligned+0x22>
 800e950:	1a21      	subs	r1, r4, r0
 800e952:	4628      	mov	r0, r5
 800e954:	f000 fcc0 	bl	800f2d8 <_sbrk_r>
 800e958:	3001      	adds	r0, #1
 800e95a:	d1f2      	bne.n	800e942 <sbrk_aligned+0x22>
 800e95c:	e7ef      	b.n	800e93e <sbrk_aligned+0x1e>
 800e95e:	bf00      	nop
 800e960:	24003fa0 	.word	0x24003fa0

0800e964 <_malloc_r>:
 800e964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e968:	1ccd      	adds	r5, r1, #3
 800e96a:	f025 0503 	bic.w	r5, r5, #3
 800e96e:	3508      	adds	r5, #8
 800e970:	2d0c      	cmp	r5, #12
 800e972:	bf38      	it	cc
 800e974:	250c      	movcc	r5, #12
 800e976:	2d00      	cmp	r5, #0
 800e978:	4606      	mov	r6, r0
 800e97a:	db01      	blt.n	800e980 <_malloc_r+0x1c>
 800e97c:	42a9      	cmp	r1, r5
 800e97e:	d904      	bls.n	800e98a <_malloc_r+0x26>
 800e980:	230c      	movs	r3, #12
 800e982:	6033      	str	r3, [r6, #0]
 800e984:	2000      	movs	r0, #0
 800e986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e98a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ea60 <_malloc_r+0xfc>
 800e98e:	f000 f869 	bl	800ea64 <__malloc_lock>
 800e992:	f8d8 3000 	ldr.w	r3, [r8]
 800e996:	461c      	mov	r4, r3
 800e998:	bb44      	cbnz	r4, 800e9ec <_malloc_r+0x88>
 800e99a:	4629      	mov	r1, r5
 800e99c:	4630      	mov	r0, r6
 800e99e:	f7ff ffbf 	bl	800e920 <sbrk_aligned>
 800e9a2:	1c43      	adds	r3, r0, #1
 800e9a4:	4604      	mov	r4, r0
 800e9a6:	d158      	bne.n	800ea5a <_malloc_r+0xf6>
 800e9a8:	f8d8 4000 	ldr.w	r4, [r8]
 800e9ac:	4627      	mov	r7, r4
 800e9ae:	2f00      	cmp	r7, #0
 800e9b0:	d143      	bne.n	800ea3a <_malloc_r+0xd6>
 800e9b2:	2c00      	cmp	r4, #0
 800e9b4:	d04b      	beq.n	800ea4e <_malloc_r+0xea>
 800e9b6:	6823      	ldr	r3, [r4, #0]
 800e9b8:	4639      	mov	r1, r7
 800e9ba:	4630      	mov	r0, r6
 800e9bc:	eb04 0903 	add.w	r9, r4, r3
 800e9c0:	f000 fc8a 	bl	800f2d8 <_sbrk_r>
 800e9c4:	4581      	cmp	r9, r0
 800e9c6:	d142      	bne.n	800ea4e <_malloc_r+0xea>
 800e9c8:	6821      	ldr	r1, [r4, #0]
 800e9ca:	1a6d      	subs	r5, r5, r1
 800e9cc:	4629      	mov	r1, r5
 800e9ce:	4630      	mov	r0, r6
 800e9d0:	f7ff ffa6 	bl	800e920 <sbrk_aligned>
 800e9d4:	3001      	adds	r0, #1
 800e9d6:	d03a      	beq.n	800ea4e <_malloc_r+0xea>
 800e9d8:	6823      	ldr	r3, [r4, #0]
 800e9da:	442b      	add	r3, r5
 800e9dc:	6023      	str	r3, [r4, #0]
 800e9de:	f8d8 3000 	ldr.w	r3, [r8]
 800e9e2:	685a      	ldr	r2, [r3, #4]
 800e9e4:	bb62      	cbnz	r2, 800ea40 <_malloc_r+0xdc>
 800e9e6:	f8c8 7000 	str.w	r7, [r8]
 800e9ea:	e00f      	b.n	800ea0c <_malloc_r+0xa8>
 800e9ec:	6822      	ldr	r2, [r4, #0]
 800e9ee:	1b52      	subs	r2, r2, r5
 800e9f0:	d420      	bmi.n	800ea34 <_malloc_r+0xd0>
 800e9f2:	2a0b      	cmp	r2, #11
 800e9f4:	d917      	bls.n	800ea26 <_malloc_r+0xc2>
 800e9f6:	1961      	adds	r1, r4, r5
 800e9f8:	42a3      	cmp	r3, r4
 800e9fa:	6025      	str	r5, [r4, #0]
 800e9fc:	bf18      	it	ne
 800e9fe:	6059      	strne	r1, [r3, #4]
 800ea00:	6863      	ldr	r3, [r4, #4]
 800ea02:	bf08      	it	eq
 800ea04:	f8c8 1000 	streq.w	r1, [r8]
 800ea08:	5162      	str	r2, [r4, r5]
 800ea0a:	604b      	str	r3, [r1, #4]
 800ea0c:	4630      	mov	r0, r6
 800ea0e:	f000 f82f 	bl	800ea70 <__malloc_unlock>
 800ea12:	f104 000b 	add.w	r0, r4, #11
 800ea16:	1d23      	adds	r3, r4, #4
 800ea18:	f020 0007 	bic.w	r0, r0, #7
 800ea1c:	1ac2      	subs	r2, r0, r3
 800ea1e:	bf1c      	itt	ne
 800ea20:	1a1b      	subne	r3, r3, r0
 800ea22:	50a3      	strne	r3, [r4, r2]
 800ea24:	e7af      	b.n	800e986 <_malloc_r+0x22>
 800ea26:	6862      	ldr	r2, [r4, #4]
 800ea28:	42a3      	cmp	r3, r4
 800ea2a:	bf0c      	ite	eq
 800ea2c:	f8c8 2000 	streq.w	r2, [r8]
 800ea30:	605a      	strne	r2, [r3, #4]
 800ea32:	e7eb      	b.n	800ea0c <_malloc_r+0xa8>
 800ea34:	4623      	mov	r3, r4
 800ea36:	6864      	ldr	r4, [r4, #4]
 800ea38:	e7ae      	b.n	800e998 <_malloc_r+0x34>
 800ea3a:	463c      	mov	r4, r7
 800ea3c:	687f      	ldr	r7, [r7, #4]
 800ea3e:	e7b6      	b.n	800e9ae <_malloc_r+0x4a>
 800ea40:	461a      	mov	r2, r3
 800ea42:	685b      	ldr	r3, [r3, #4]
 800ea44:	42a3      	cmp	r3, r4
 800ea46:	d1fb      	bne.n	800ea40 <_malloc_r+0xdc>
 800ea48:	2300      	movs	r3, #0
 800ea4a:	6053      	str	r3, [r2, #4]
 800ea4c:	e7de      	b.n	800ea0c <_malloc_r+0xa8>
 800ea4e:	230c      	movs	r3, #12
 800ea50:	6033      	str	r3, [r6, #0]
 800ea52:	4630      	mov	r0, r6
 800ea54:	f000 f80c 	bl	800ea70 <__malloc_unlock>
 800ea58:	e794      	b.n	800e984 <_malloc_r+0x20>
 800ea5a:	6005      	str	r5, [r0, #0]
 800ea5c:	e7d6      	b.n	800ea0c <_malloc_r+0xa8>
 800ea5e:	bf00      	nop
 800ea60:	24003fa4 	.word	0x24003fa4

0800ea64 <__malloc_lock>:
 800ea64:	4801      	ldr	r0, [pc, #4]	@ (800ea6c <__malloc_lock+0x8>)
 800ea66:	f7ff b926 	b.w	800dcb6 <__retarget_lock_acquire_recursive>
 800ea6a:	bf00      	nop
 800ea6c:	24003f9c 	.word	0x24003f9c

0800ea70 <__malloc_unlock>:
 800ea70:	4801      	ldr	r0, [pc, #4]	@ (800ea78 <__malloc_unlock+0x8>)
 800ea72:	f7ff b921 	b.w	800dcb8 <__retarget_lock_release_recursive>
 800ea76:	bf00      	nop
 800ea78:	24003f9c 	.word	0x24003f9c

0800ea7c <_Balloc>:
 800ea7c:	b570      	push	{r4, r5, r6, lr}
 800ea7e:	69c6      	ldr	r6, [r0, #28]
 800ea80:	4604      	mov	r4, r0
 800ea82:	460d      	mov	r5, r1
 800ea84:	b976      	cbnz	r6, 800eaa4 <_Balloc+0x28>
 800ea86:	2010      	movs	r0, #16
 800ea88:	f7ff ff42 	bl	800e910 <malloc>
 800ea8c:	4602      	mov	r2, r0
 800ea8e:	61e0      	str	r0, [r4, #28]
 800ea90:	b920      	cbnz	r0, 800ea9c <_Balloc+0x20>
 800ea92:	4b18      	ldr	r3, [pc, #96]	@ (800eaf4 <_Balloc+0x78>)
 800ea94:	4818      	ldr	r0, [pc, #96]	@ (800eaf8 <_Balloc+0x7c>)
 800ea96:	216b      	movs	r1, #107	@ 0x6b
 800ea98:	f000 fc3c 	bl	800f314 <__assert_func>
 800ea9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eaa0:	6006      	str	r6, [r0, #0]
 800eaa2:	60c6      	str	r6, [r0, #12]
 800eaa4:	69e6      	ldr	r6, [r4, #28]
 800eaa6:	68f3      	ldr	r3, [r6, #12]
 800eaa8:	b183      	cbz	r3, 800eacc <_Balloc+0x50>
 800eaaa:	69e3      	ldr	r3, [r4, #28]
 800eaac:	68db      	ldr	r3, [r3, #12]
 800eaae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eab2:	b9b8      	cbnz	r0, 800eae4 <_Balloc+0x68>
 800eab4:	2101      	movs	r1, #1
 800eab6:	fa01 f605 	lsl.w	r6, r1, r5
 800eaba:	1d72      	adds	r2, r6, #5
 800eabc:	0092      	lsls	r2, r2, #2
 800eabe:	4620      	mov	r0, r4
 800eac0:	f000 fc46 	bl	800f350 <_calloc_r>
 800eac4:	b160      	cbz	r0, 800eae0 <_Balloc+0x64>
 800eac6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eaca:	e00e      	b.n	800eaea <_Balloc+0x6e>
 800eacc:	2221      	movs	r2, #33	@ 0x21
 800eace:	2104      	movs	r1, #4
 800ead0:	4620      	mov	r0, r4
 800ead2:	f000 fc3d 	bl	800f350 <_calloc_r>
 800ead6:	69e3      	ldr	r3, [r4, #28]
 800ead8:	60f0      	str	r0, [r6, #12]
 800eada:	68db      	ldr	r3, [r3, #12]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d1e4      	bne.n	800eaaa <_Balloc+0x2e>
 800eae0:	2000      	movs	r0, #0
 800eae2:	bd70      	pop	{r4, r5, r6, pc}
 800eae4:	6802      	ldr	r2, [r0, #0]
 800eae6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eaea:	2300      	movs	r3, #0
 800eaec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eaf0:	e7f7      	b.n	800eae2 <_Balloc+0x66>
 800eaf2:	bf00      	nop
 800eaf4:	08010551 	.word	0x08010551
 800eaf8:	080105d1 	.word	0x080105d1

0800eafc <_Bfree>:
 800eafc:	b570      	push	{r4, r5, r6, lr}
 800eafe:	69c6      	ldr	r6, [r0, #28]
 800eb00:	4605      	mov	r5, r0
 800eb02:	460c      	mov	r4, r1
 800eb04:	b976      	cbnz	r6, 800eb24 <_Bfree+0x28>
 800eb06:	2010      	movs	r0, #16
 800eb08:	f7ff ff02 	bl	800e910 <malloc>
 800eb0c:	4602      	mov	r2, r0
 800eb0e:	61e8      	str	r0, [r5, #28]
 800eb10:	b920      	cbnz	r0, 800eb1c <_Bfree+0x20>
 800eb12:	4b09      	ldr	r3, [pc, #36]	@ (800eb38 <_Bfree+0x3c>)
 800eb14:	4809      	ldr	r0, [pc, #36]	@ (800eb3c <_Bfree+0x40>)
 800eb16:	218f      	movs	r1, #143	@ 0x8f
 800eb18:	f000 fbfc 	bl	800f314 <__assert_func>
 800eb1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb20:	6006      	str	r6, [r0, #0]
 800eb22:	60c6      	str	r6, [r0, #12]
 800eb24:	b13c      	cbz	r4, 800eb36 <_Bfree+0x3a>
 800eb26:	69eb      	ldr	r3, [r5, #28]
 800eb28:	6862      	ldr	r2, [r4, #4]
 800eb2a:	68db      	ldr	r3, [r3, #12]
 800eb2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb30:	6021      	str	r1, [r4, #0]
 800eb32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eb36:	bd70      	pop	{r4, r5, r6, pc}
 800eb38:	08010551 	.word	0x08010551
 800eb3c:	080105d1 	.word	0x080105d1

0800eb40 <__multadd>:
 800eb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb44:	690d      	ldr	r5, [r1, #16]
 800eb46:	4607      	mov	r7, r0
 800eb48:	460c      	mov	r4, r1
 800eb4a:	461e      	mov	r6, r3
 800eb4c:	f101 0c14 	add.w	ip, r1, #20
 800eb50:	2000      	movs	r0, #0
 800eb52:	f8dc 3000 	ldr.w	r3, [ip]
 800eb56:	b299      	uxth	r1, r3
 800eb58:	fb02 6101 	mla	r1, r2, r1, r6
 800eb5c:	0c1e      	lsrs	r6, r3, #16
 800eb5e:	0c0b      	lsrs	r3, r1, #16
 800eb60:	fb02 3306 	mla	r3, r2, r6, r3
 800eb64:	b289      	uxth	r1, r1
 800eb66:	3001      	adds	r0, #1
 800eb68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eb6c:	4285      	cmp	r5, r0
 800eb6e:	f84c 1b04 	str.w	r1, [ip], #4
 800eb72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eb76:	dcec      	bgt.n	800eb52 <__multadd+0x12>
 800eb78:	b30e      	cbz	r6, 800ebbe <__multadd+0x7e>
 800eb7a:	68a3      	ldr	r3, [r4, #8]
 800eb7c:	42ab      	cmp	r3, r5
 800eb7e:	dc19      	bgt.n	800ebb4 <__multadd+0x74>
 800eb80:	6861      	ldr	r1, [r4, #4]
 800eb82:	4638      	mov	r0, r7
 800eb84:	3101      	adds	r1, #1
 800eb86:	f7ff ff79 	bl	800ea7c <_Balloc>
 800eb8a:	4680      	mov	r8, r0
 800eb8c:	b928      	cbnz	r0, 800eb9a <__multadd+0x5a>
 800eb8e:	4602      	mov	r2, r0
 800eb90:	4b0c      	ldr	r3, [pc, #48]	@ (800ebc4 <__multadd+0x84>)
 800eb92:	480d      	ldr	r0, [pc, #52]	@ (800ebc8 <__multadd+0x88>)
 800eb94:	21ba      	movs	r1, #186	@ 0xba
 800eb96:	f000 fbbd 	bl	800f314 <__assert_func>
 800eb9a:	6922      	ldr	r2, [r4, #16]
 800eb9c:	3202      	adds	r2, #2
 800eb9e:	f104 010c 	add.w	r1, r4, #12
 800eba2:	0092      	lsls	r2, r2, #2
 800eba4:	300c      	adds	r0, #12
 800eba6:	f000 fba7 	bl	800f2f8 <memcpy>
 800ebaa:	4621      	mov	r1, r4
 800ebac:	4638      	mov	r0, r7
 800ebae:	f7ff ffa5 	bl	800eafc <_Bfree>
 800ebb2:	4644      	mov	r4, r8
 800ebb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ebb8:	3501      	adds	r5, #1
 800ebba:	615e      	str	r6, [r3, #20]
 800ebbc:	6125      	str	r5, [r4, #16]
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebc4:	080105c0 	.word	0x080105c0
 800ebc8:	080105d1 	.word	0x080105d1

0800ebcc <__hi0bits>:
 800ebcc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	bf36      	itet	cc
 800ebd4:	0403      	lslcc	r3, r0, #16
 800ebd6:	2000      	movcs	r0, #0
 800ebd8:	2010      	movcc	r0, #16
 800ebda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ebde:	bf3c      	itt	cc
 800ebe0:	021b      	lslcc	r3, r3, #8
 800ebe2:	3008      	addcc	r0, #8
 800ebe4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ebe8:	bf3c      	itt	cc
 800ebea:	011b      	lslcc	r3, r3, #4
 800ebec:	3004      	addcc	r0, #4
 800ebee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ebf2:	bf3c      	itt	cc
 800ebf4:	009b      	lslcc	r3, r3, #2
 800ebf6:	3002      	addcc	r0, #2
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	db05      	blt.n	800ec08 <__hi0bits+0x3c>
 800ebfc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ec00:	f100 0001 	add.w	r0, r0, #1
 800ec04:	bf08      	it	eq
 800ec06:	2020      	moveq	r0, #32
 800ec08:	4770      	bx	lr

0800ec0a <__lo0bits>:
 800ec0a:	6803      	ldr	r3, [r0, #0]
 800ec0c:	4602      	mov	r2, r0
 800ec0e:	f013 0007 	ands.w	r0, r3, #7
 800ec12:	d00b      	beq.n	800ec2c <__lo0bits+0x22>
 800ec14:	07d9      	lsls	r1, r3, #31
 800ec16:	d421      	bmi.n	800ec5c <__lo0bits+0x52>
 800ec18:	0798      	lsls	r0, r3, #30
 800ec1a:	bf49      	itett	mi
 800ec1c:	085b      	lsrmi	r3, r3, #1
 800ec1e:	089b      	lsrpl	r3, r3, #2
 800ec20:	2001      	movmi	r0, #1
 800ec22:	6013      	strmi	r3, [r2, #0]
 800ec24:	bf5c      	itt	pl
 800ec26:	6013      	strpl	r3, [r2, #0]
 800ec28:	2002      	movpl	r0, #2
 800ec2a:	4770      	bx	lr
 800ec2c:	b299      	uxth	r1, r3
 800ec2e:	b909      	cbnz	r1, 800ec34 <__lo0bits+0x2a>
 800ec30:	0c1b      	lsrs	r3, r3, #16
 800ec32:	2010      	movs	r0, #16
 800ec34:	b2d9      	uxtb	r1, r3
 800ec36:	b909      	cbnz	r1, 800ec3c <__lo0bits+0x32>
 800ec38:	3008      	adds	r0, #8
 800ec3a:	0a1b      	lsrs	r3, r3, #8
 800ec3c:	0719      	lsls	r1, r3, #28
 800ec3e:	bf04      	itt	eq
 800ec40:	091b      	lsreq	r3, r3, #4
 800ec42:	3004      	addeq	r0, #4
 800ec44:	0799      	lsls	r1, r3, #30
 800ec46:	bf04      	itt	eq
 800ec48:	089b      	lsreq	r3, r3, #2
 800ec4a:	3002      	addeq	r0, #2
 800ec4c:	07d9      	lsls	r1, r3, #31
 800ec4e:	d403      	bmi.n	800ec58 <__lo0bits+0x4e>
 800ec50:	085b      	lsrs	r3, r3, #1
 800ec52:	f100 0001 	add.w	r0, r0, #1
 800ec56:	d003      	beq.n	800ec60 <__lo0bits+0x56>
 800ec58:	6013      	str	r3, [r2, #0]
 800ec5a:	4770      	bx	lr
 800ec5c:	2000      	movs	r0, #0
 800ec5e:	4770      	bx	lr
 800ec60:	2020      	movs	r0, #32
 800ec62:	4770      	bx	lr

0800ec64 <__i2b>:
 800ec64:	b510      	push	{r4, lr}
 800ec66:	460c      	mov	r4, r1
 800ec68:	2101      	movs	r1, #1
 800ec6a:	f7ff ff07 	bl	800ea7c <_Balloc>
 800ec6e:	4602      	mov	r2, r0
 800ec70:	b928      	cbnz	r0, 800ec7e <__i2b+0x1a>
 800ec72:	4b05      	ldr	r3, [pc, #20]	@ (800ec88 <__i2b+0x24>)
 800ec74:	4805      	ldr	r0, [pc, #20]	@ (800ec8c <__i2b+0x28>)
 800ec76:	f240 1145 	movw	r1, #325	@ 0x145
 800ec7a:	f000 fb4b 	bl	800f314 <__assert_func>
 800ec7e:	2301      	movs	r3, #1
 800ec80:	6144      	str	r4, [r0, #20]
 800ec82:	6103      	str	r3, [r0, #16]
 800ec84:	bd10      	pop	{r4, pc}
 800ec86:	bf00      	nop
 800ec88:	080105c0 	.word	0x080105c0
 800ec8c:	080105d1 	.word	0x080105d1

0800ec90 <__multiply>:
 800ec90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec94:	4614      	mov	r4, r2
 800ec96:	690a      	ldr	r2, [r1, #16]
 800ec98:	6923      	ldr	r3, [r4, #16]
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	bfa8      	it	ge
 800ec9e:	4623      	movge	r3, r4
 800eca0:	460f      	mov	r7, r1
 800eca2:	bfa4      	itt	ge
 800eca4:	460c      	movge	r4, r1
 800eca6:	461f      	movge	r7, r3
 800eca8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ecac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ecb0:	68a3      	ldr	r3, [r4, #8]
 800ecb2:	6861      	ldr	r1, [r4, #4]
 800ecb4:	eb0a 0609 	add.w	r6, sl, r9
 800ecb8:	42b3      	cmp	r3, r6
 800ecba:	b085      	sub	sp, #20
 800ecbc:	bfb8      	it	lt
 800ecbe:	3101      	addlt	r1, #1
 800ecc0:	f7ff fedc 	bl	800ea7c <_Balloc>
 800ecc4:	b930      	cbnz	r0, 800ecd4 <__multiply+0x44>
 800ecc6:	4602      	mov	r2, r0
 800ecc8:	4b44      	ldr	r3, [pc, #272]	@ (800eddc <__multiply+0x14c>)
 800ecca:	4845      	ldr	r0, [pc, #276]	@ (800ede0 <__multiply+0x150>)
 800eccc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ecd0:	f000 fb20 	bl	800f314 <__assert_func>
 800ecd4:	f100 0514 	add.w	r5, r0, #20
 800ecd8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ecdc:	462b      	mov	r3, r5
 800ecde:	2200      	movs	r2, #0
 800ece0:	4543      	cmp	r3, r8
 800ece2:	d321      	bcc.n	800ed28 <__multiply+0x98>
 800ece4:	f107 0114 	add.w	r1, r7, #20
 800ece8:	f104 0214 	add.w	r2, r4, #20
 800ecec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ecf0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ecf4:	9302      	str	r3, [sp, #8]
 800ecf6:	1b13      	subs	r3, r2, r4
 800ecf8:	3b15      	subs	r3, #21
 800ecfa:	f023 0303 	bic.w	r3, r3, #3
 800ecfe:	3304      	adds	r3, #4
 800ed00:	f104 0715 	add.w	r7, r4, #21
 800ed04:	42ba      	cmp	r2, r7
 800ed06:	bf38      	it	cc
 800ed08:	2304      	movcc	r3, #4
 800ed0a:	9301      	str	r3, [sp, #4]
 800ed0c:	9b02      	ldr	r3, [sp, #8]
 800ed0e:	9103      	str	r1, [sp, #12]
 800ed10:	428b      	cmp	r3, r1
 800ed12:	d80c      	bhi.n	800ed2e <__multiply+0x9e>
 800ed14:	2e00      	cmp	r6, #0
 800ed16:	dd03      	ble.n	800ed20 <__multiply+0x90>
 800ed18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d05b      	beq.n	800edd8 <__multiply+0x148>
 800ed20:	6106      	str	r6, [r0, #16]
 800ed22:	b005      	add	sp, #20
 800ed24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed28:	f843 2b04 	str.w	r2, [r3], #4
 800ed2c:	e7d8      	b.n	800ece0 <__multiply+0x50>
 800ed2e:	f8b1 a000 	ldrh.w	sl, [r1]
 800ed32:	f1ba 0f00 	cmp.w	sl, #0
 800ed36:	d024      	beq.n	800ed82 <__multiply+0xf2>
 800ed38:	f104 0e14 	add.w	lr, r4, #20
 800ed3c:	46a9      	mov	r9, r5
 800ed3e:	f04f 0c00 	mov.w	ip, #0
 800ed42:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ed46:	f8d9 3000 	ldr.w	r3, [r9]
 800ed4a:	fa1f fb87 	uxth.w	fp, r7
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	fb0a 330b 	mla	r3, sl, fp, r3
 800ed54:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ed58:	f8d9 7000 	ldr.w	r7, [r9]
 800ed5c:	4463      	add	r3, ip
 800ed5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ed62:	fb0a c70b 	mla	r7, sl, fp, ip
 800ed66:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ed6a:	b29b      	uxth	r3, r3
 800ed6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ed70:	4572      	cmp	r2, lr
 800ed72:	f849 3b04 	str.w	r3, [r9], #4
 800ed76:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ed7a:	d8e2      	bhi.n	800ed42 <__multiply+0xb2>
 800ed7c:	9b01      	ldr	r3, [sp, #4]
 800ed7e:	f845 c003 	str.w	ip, [r5, r3]
 800ed82:	9b03      	ldr	r3, [sp, #12]
 800ed84:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ed88:	3104      	adds	r1, #4
 800ed8a:	f1b9 0f00 	cmp.w	r9, #0
 800ed8e:	d021      	beq.n	800edd4 <__multiply+0x144>
 800ed90:	682b      	ldr	r3, [r5, #0]
 800ed92:	f104 0c14 	add.w	ip, r4, #20
 800ed96:	46ae      	mov	lr, r5
 800ed98:	f04f 0a00 	mov.w	sl, #0
 800ed9c:	f8bc b000 	ldrh.w	fp, [ip]
 800eda0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800eda4:	fb09 770b 	mla	r7, r9, fp, r7
 800eda8:	4457      	add	r7, sl
 800edaa:	b29b      	uxth	r3, r3
 800edac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800edb0:	f84e 3b04 	str.w	r3, [lr], #4
 800edb4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800edb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800edbc:	f8be 3000 	ldrh.w	r3, [lr]
 800edc0:	fb09 330a 	mla	r3, r9, sl, r3
 800edc4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800edc8:	4562      	cmp	r2, ip
 800edca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800edce:	d8e5      	bhi.n	800ed9c <__multiply+0x10c>
 800edd0:	9f01      	ldr	r7, [sp, #4]
 800edd2:	51eb      	str	r3, [r5, r7]
 800edd4:	3504      	adds	r5, #4
 800edd6:	e799      	b.n	800ed0c <__multiply+0x7c>
 800edd8:	3e01      	subs	r6, #1
 800edda:	e79b      	b.n	800ed14 <__multiply+0x84>
 800eddc:	080105c0 	.word	0x080105c0
 800ede0:	080105d1 	.word	0x080105d1

0800ede4 <__pow5mult>:
 800ede4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ede8:	4615      	mov	r5, r2
 800edea:	f012 0203 	ands.w	r2, r2, #3
 800edee:	4607      	mov	r7, r0
 800edf0:	460e      	mov	r6, r1
 800edf2:	d007      	beq.n	800ee04 <__pow5mult+0x20>
 800edf4:	4c25      	ldr	r4, [pc, #148]	@ (800ee8c <__pow5mult+0xa8>)
 800edf6:	3a01      	subs	r2, #1
 800edf8:	2300      	movs	r3, #0
 800edfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800edfe:	f7ff fe9f 	bl	800eb40 <__multadd>
 800ee02:	4606      	mov	r6, r0
 800ee04:	10ad      	asrs	r5, r5, #2
 800ee06:	d03d      	beq.n	800ee84 <__pow5mult+0xa0>
 800ee08:	69fc      	ldr	r4, [r7, #28]
 800ee0a:	b97c      	cbnz	r4, 800ee2c <__pow5mult+0x48>
 800ee0c:	2010      	movs	r0, #16
 800ee0e:	f7ff fd7f 	bl	800e910 <malloc>
 800ee12:	4602      	mov	r2, r0
 800ee14:	61f8      	str	r0, [r7, #28]
 800ee16:	b928      	cbnz	r0, 800ee24 <__pow5mult+0x40>
 800ee18:	4b1d      	ldr	r3, [pc, #116]	@ (800ee90 <__pow5mult+0xac>)
 800ee1a:	481e      	ldr	r0, [pc, #120]	@ (800ee94 <__pow5mult+0xb0>)
 800ee1c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ee20:	f000 fa78 	bl	800f314 <__assert_func>
 800ee24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ee28:	6004      	str	r4, [r0, #0]
 800ee2a:	60c4      	str	r4, [r0, #12]
 800ee2c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ee30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee34:	b94c      	cbnz	r4, 800ee4a <__pow5mult+0x66>
 800ee36:	f240 2171 	movw	r1, #625	@ 0x271
 800ee3a:	4638      	mov	r0, r7
 800ee3c:	f7ff ff12 	bl	800ec64 <__i2b>
 800ee40:	2300      	movs	r3, #0
 800ee42:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee46:	4604      	mov	r4, r0
 800ee48:	6003      	str	r3, [r0, #0]
 800ee4a:	f04f 0900 	mov.w	r9, #0
 800ee4e:	07eb      	lsls	r3, r5, #31
 800ee50:	d50a      	bpl.n	800ee68 <__pow5mult+0x84>
 800ee52:	4631      	mov	r1, r6
 800ee54:	4622      	mov	r2, r4
 800ee56:	4638      	mov	r0, r7
 800ee58:	f7ff ff1a 	bl	800ec90 <__multiply>
 800ee5c:	4631      	mov	r1, r6
 800ee5e:	4680      	mov	r8, r0
 800ee60:	4638      	mov	r0, r7
 800ee62:	f7ff fe4b 	bl	800eafc <_Bfree>
 800ee66:	4646      	mov	r6, r8
 800ee68:	106d      	asrs	r5, r5, #1
 800ee6a:	d00b      	beq.n	800ee84 <__pow5mult+0xa0>
 800ee6c:	6820      	ldr	r0, [r4, #0]
 800ee6e:	b938      	cbnz	r0, 800ee80 <__pow5mult+0x9c>
 800ee70:	4622      	mov	r2, r4
 800ee72:	4621      	mov	r1, r4
 800ee74:	4638      	mov	r0, r7
 800ee76:	f7ff ff0b 	bl	800ec90 <__multiply>
 800ee7a:	6020      	str	r0, [r4, #0]
 800ee7c:	f8c0 9000 	str.w	r9, [r0]
 800ee80:	4604      	mov	r4, r0
 800ee82:	e7e4      	b.n	800ee4e <__pow5mult+0x6a>
 800ee84:	4630      	mov	r0, r6
 800ee86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee8a:	bf00      	nop
 800ee8c:	0801062c 	.word	0x0801062c
 800ee90:	08010551 	.word	0x08010551
 800ee94:	080105d1 	.word	0x080105d1

0800ee98 <__lshift>:
 800ee98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee9c:	460c      	mov	r4, r1
 800ee9e:	6849      	ldr	r1, [r1, #4]
 800eea0:	6923      	ldr	r3, [r4, #16]
 800eea2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eea6:	68a3      	ldr	r3, [r4, #8]
 800eea8:	4607      	mov	r7, r0
 800eeaa:	4691      	mov	r9, r2
 800eeac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eeb0:	f108 0601 	add.w	r6, r8, #1
 800eeb4:	42b3      	cmp	r3, r6
 800eeb6:	db0b      	blt.n	800eed0 <__lshift+0x38>
 800eeb8:	4638      	mov	r0, r7
 800eeba:	f7ff fddf 	bl	800ea7c <_Balloc>
 800eebe:	4605      	mov	r5, r0
 800eec0:	b948      	cbnz	r0, 800eed6 <__lshift+0x3e>
 800eec2:	4602      	mov	r2, r0
 800eec4:	4b28      	ldr	r3, [pc, #160]	@ (800ef68 <__lshift+0xd0>)
 800eec6:	4829      	ldr	r0, [pc, #164]	@ (800ef6c <__lshift+0xd4>)
 800eec8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800eecc:	f000 fa22 	bl	800f314 <__assert_func>
 800eed0:	3101      	adds	r1, #1
 800eed2:	005b      	lsls	r3, r3, #1
 800eed4:	e7ee      	b.n	800eeb4 <__lshift+0x1c>
 800eed6:	2300      	movs	r3, #0
 800eed8:	f100 0114 	add.w	r1, r0, #20
 800eedc:	f100 0210 	add.w	r2, r0, #16
 800eee0:	4618      	mov	r0, r3
 800eee2:	4553      	cmp	r3, sl
 800eee4:	db33      	blt.n	800ef4e <__lshift+0xb6>
 800eee6:	6920      	ldr	r0, [r4, #16]
 800eee8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eeec:	f104 0314 	add.w	r3, r4, #20
 800eef0:	f019 091f 	ands.w	r9, r9, #31
 800eef4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eef8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eefc:	d02b      	beq.n	800ef56 <__lshift+0xbe>
 800eefe:	f1c9 0e20 	rsb	lr, r9, #32
 800ef02:	468a      	mov	sl, r1
 800ef04:	2200      	movs	r2, #0
 800ef06:	6818      	ldr	r0, [r3, #0]
 800ef08:	fa00 f009 	lsl.w	r0, r0, r9
 800ef0c:	4310      	orrs	r0, r2
 800ef0e:	f84a 0b04 	str.w	r0, [sl], #4
 800ef12:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef16:	459c      	cmp	ip, r3
 800ef18:	fa22 f20e 	lsr.w	r2, r2, lr
 800ef1c:	d8f3      	bhi.n	800ef06 <__lshift+0x6e>
 800ef1e:	ebac 0304 	sub.w	r3, ip, r4
 800ef22:	3b15      	subs	r3, #21
 800ef24:	f023 0303 	bic.w	r3, r3, #3
 800ef28:	3304      	adds	r3, #4
 800ef2a:	f104 0015 	add.w	r0, r4, #21
 800ef2e:	4584      	cmp	ip, r0
 800ef30:	bf38      	it	cc
 800ef32:	2304      	movcc	r3, #4
 800ef34:	50ca      	str	r2, [r1, r3]
 800ef36:	b10a      	cbz	r2, 800ef3c <__lshift+0xa4>
 800ef38:	f108 0602 	add.w	r6, r8, #2
 800ef3c:	3e01      	subs	r6, #1
 800ef3e:	4638      	mov	r0, r7
 800ef40:	612e      	str	r6, [r5, #16]
 800ef42:	4621      	mov	r1, r4
 800ef44:	f7ff fdda 	bl	800eafc <_Bfree>
 800ef48:	4628      	mov	r0, r5
 800ef4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef4e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ef52:	3301      	adds	r3, #1
 800ef54:	e7c5      	b.n	800eee2 <__lshift+0x4a>
 800ef56:	3904      	subs	r1, #4
 800ef58:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef5c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef60:	459c      	cmp	ip, r3
 800ef62:	d8f9      	bhi.n	800ef58 <__lshift+0xc0>
 800ef64:	e7ea      	b.n	800ef3c <__lshift+0xa4>
 800ef66:	bf00      	nop
 800ef68:	080105c0 	.word	0x080105c0
 800ef6c:	080105d1 	.word	0x080105d1

0800ef70 <__mcmp>:
 800ef70:	690a      	ldr	r2, [r1, #16]
 800ef72:	4603      	mov	r3, r0
 800ef74:	6900      	ldr	r0, [r0, #16]
 800ef76:	1a80      	subs	r0, r0, r2
 800ef78:	b530      	push	{r4, r5, lr}
 800ef7a:	d10e      	bne.n	800ef9a <__mcmp+0x2a>
 800ef7c:	3314      	adds	r3, #20
 800ef7e:	3114      	adds	r1, #20
 800ef80:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ef84:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ef88:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ef8c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ef90:	4295      	cmp	r5, r2
 800ef92:	d003      	beq.n	800ef9c <__mcmp+0x2c>
 800ef94:	d205      	bcs.n	800efa2 <__mcmp+0x32>
 800ef96:	f04f 30ff 	mov.w	r0, #4294967295
 800ef9a:	bd30      	pop	{r4, r5, pc}
 800ef9c:	42a3      	cmp	r3, r4
 800ef9e:	d3f3      	bcc.n	800ef88 <__mcmp+0x18>
 800efa0:	e7fb      	b.n	800ef9a <__mcmp+0x2a>
 800efa2:	2001      	movs	r0, #1
 800efa4:	e7f9      	b.n	800ef9a <__mcmp+0x2a>
	...

0800efa8 <__mdiff>:
 800efa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efac:	4689      	mov	r9, r1
 800efae:	4606      	mov	r6, r0
 800efb0:	4611      	mov	r1, r2
 800efb2:	4648      	mov	r0, r9
 800efb4:	4614      	mov	r4, r2
 800efb6:	f7ff ffdb 	bl	800ef70 <__mcmp>
 800efba:	1e05      	subs	r5, r0, #0
 800efbc:	d112      	bne.n	800efe4 <__mdiff+0x3c>
 800efbe:	4629      	mov	r1, r5
 800efc0:	4630      	mov	r0, r6
 800efc2:	f7ff fd5b 	bl	800ea7c <_Balloc>
 800efc6:	4602      	mov	r2, r0
 800efc8:	b928      	cbnz	r0, 800efd6 <__mdiff+0x2e>
 800efca:	4b3f      	ldr	r3, [pc, #252]	@ (800f0c8 <__mdiff+0x120>)
 800efcc:	f240 2137 	movw	r1, #567	@ 0x237
 800efd0:	483e      	ldr	r0, [pc, #248]	@ (800f0cc <__mdiff+0x124>)
 800efd2:	f000 f99f 	bl	800f314 <__assert_func>
 800efd6:	2301      	movs	r3, #1
 800efd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800efdc:	4610      	mov	r0, r2
 800efde:	b003      	add	sp, #12
 800efe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efe4:	bfbc      	itt	lt
 800efe6:	464b      	movlt	r3, r9
 800efe8:	46a1      	movlt	r9, r4
 800efea:	4630      	mov	r0, r6
 800efec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800eff0:	bfba      	itte	lt
 800eff2:	461c      	movlt	r4, r3
 800eff4:	2501      	movlt	r5, #1
 800eff6:	2500      	movge	r5, #0
 800eff8:	f7ff fd40 	bl	800ea7c <_Balloc>
 800effc:	4602      	mov	r2, r0
 800effe:	b918      	cbnz	r0, 800f008 <__mdiff+0x60>
 800f000:	4b31      	ldr	r3, [pc, #196]	@ (800f0c8 <__mdiff+0x120>)
 800f002:	f240 2145 	movw	r1, #581	@ 0x245
 800f006:	e7e3      	b.n	800efd0 <__mdiff+0x28>
 800f008:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f00c:	6926      	ldr	r6, [r4, #16]
 800f00e:	60c5      	str	r5, [r0, #12]
 800f010:	f109 0310 	add.w	r3, r9, #16
 800f014:	f109 0514 	add.w	r5, r9, #20
 800f018:	f104 0e14 	add.w	lr, r4, #20
 800f01c:	f100 0b14 	add.w	fp, r0, #20
 800f020:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f024:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f028:	9301      	str	r3, [sp, #4]
 800f02a:	46d9      	mov	r9, fp
 800f02c:	f04f 0c00 	mov.w	ip, #0
 800f030:	9b01      	ldr	r3, [sp, #4]
 800f032:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f036:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f03a:	9301      	str	r3, [sp, #4]
 800f03c:	fa1f f38a 	uxth.w	r3, sl
 800f040:	4619      	mov	r1, r3
 800f042:	b283      	uxth	r3, r0
 800f044:	1acb      	subs	r3, r1, r3
 800f046:	0c00      	lsrs	r0, r0, #16
 800f048:	4463      	add	r3, ip
 800f04a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f04e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f052:	b29b      	uxth	r3, r3
 800f054:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f058:	4576      	cmp	r6, lr
 800f05a:	f849 3b04 	str.w	r3, [r9], #4
 800f05e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f062:	d8e5      	bhi.n	800f030 <__mdiff+0x88>
 800f064:	1b33      	subs	r3, r6, r4
 800f066:	3b15      	subs	r3, #21
 800f068:	f023 0303 	bic.w	r3, r3, #3
 800f06c:	3415      	adds	r4, #21
 800f06e:	3304      	adds	r3, #4
 800f070:	42a6      	cmp	r6, r4
 800f072:	bf38      	it	cc
 800f074:	2304      	movcc	r3, #4
 800f076:	441d      	add	r5, r3
 800f078:	445b      	add	r3, fp
 800f07a:	461e      	mov	r6, r3
 800f07c:	462c      	mov	r4, r5
 800f07e:	4544      	cmp	r4, r8
 800f080:	d30e      	bcc.n	800f0a0 <__mdiff+0xf8>
 800f082:	f108 0103 	add.w	r1, r8, #3
 800f086:	1b49      	subs	r1, r1, r5
 800f088:	f021 0103 	bic.w	r1, r1, #3
 800f08c:	3d03      	subs	r5, #3
 800f08e:	45a8      	cmp	r8, r5
 800f090:	bf38      	it	cc
 800f092:	2100      	movcc	r1, #0
 800f094:	440b      	add	r3, r1
 800f096:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f09a:	b191      	cbz	r1, 800f0c2 <__mdiff+0x11a>
 800f09c:	6117      	str	r7, [r2, #16]
 800f09e:	e79d      	b.n	800efdc <__mdiff+0x34>
 800f0a0:	f854 1b04 	ldr.w	r1, [r4], #4
 800f0a4:	46e6      	mov	lr, ip
 800f0a6:	0c08      	lsrs	r0, r1, #16
 800f0a8:	fa1c fc81 	uxtah	ip, ip, r1
 800f0ac:	4471      	add	r1, lr
 800f0ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f0b2:	b289      	uxth	r1, r1
 800f0b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f0b8:	f846 1b04 	str.w	r1, [r6], #4
 800f0bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f0c0:	e7dd      	b.n	800f07e <__mdiff+0xd6>
 800f0c2:	3f01      	subs	r7, #1
 800f0c4:	e7e7      	b.n	800f096 <__mdiff+0xee>
 800f0c6:	bf00      	nop
 800f0c8:	080105c0 	.word	0x080105c0
 800f0cc:	080105d1 	.word	0x080105d1

0800f0d0 <__d2b>:
 800f0d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f0d4:	460f      	mov	r7, r1
 800f0d6:	2101      	movs	r1, #1
 800f0d8:	ec59 8b10 	vmov	r8, r9, d0
 800f0dc:	4616      	mov	r6, r2
 800f0de:	f7ff fccd 	bl	800ea7c <_Balloc>
 800f0e2:	4604      	mov	r4, r0
 800f0e4:	b930      	cbnz	r0, 800f0f4 <__d2b+0x24>
 800f0e6:	4602      	mov	r2, r0
 800f0e8:	4b23      	ldr	r3, [pc, #140]	@ (800f178 <__d2b+0xa8>)
 800f0ea:	4824      	ldr	r0, [pc, #144]	@ (800f17c <__d2b+0xac>)
 800f0ec:	f240 310f 	movw	r1, #783	@ 0x30f
 800f0f0:	f000 f910 	bl	800f314 <__assert_func>
 800f0f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f0f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f0fc:	b10d      	cbz	r5, 800f102 <__d2b+0x32>
 800f0fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f102:	9301      	str	r3, [sp, #4]
 800f104:	f1b8 0300 	subs.w	r3, r8, #0
 800f108:	d023      	beq.n	800f152 <__d2b+0x82>
 800f10a:	4668      	mov	r0, sp
 800f10c:	9300      	str	r3, [sp, #0]
 800f10e:	f7ff fd7c 	bl	800ec0a <__lo0bits>
 800f112:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f116:	b1d0      	cbz	r0, 800f14e <__d2b+0x7e>
 800f118:	f1c0 0320 	rsb	r3, r0, #32
 800f11c:	fa02 f303 	lsl.w	r3, r2, r3
 800f120:	430b      	orrs	r3, r1
 800f122:	40c2      	lsrs	r2, r0
 800f124:	6163      	str	r3, [r4, #20]
 800f126:	9201      	str	r2, [sp, #4]
 800f128:	9b01      	ldr	r3, [sp, #4]
 800f12a:	61a3      	str	r3, [r4, #24]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	bf0c      	ite	eq
 800f130:	2201      	moveq	r2, #1
 800f132:	2202      	movne	r2, #2
 800f134:	6122      	str	r2, [r4, #16]
 800f136:	b1a5      	cbz	r5, 800f162 <__d2b+0x92>
 800f138:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f13c:	4405      	add	r5, r0
 800f13e:	603d      	str	r5, [r7, #0]
 800f140:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f144:	6030      	str	r0, [r6, #0]
 800f146:	4620      	mov	r0, r4
 800f148:	b003      	add	sp, #12
 800f14a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f14e:	6161      	str	r1, [r4, #20]
 800f150:	e7ea      	b.n	800f128 <__d2b+0x58>
 800f152:	a801      	add	r0, sp, #4
 800f154:	f7ff fd59 	bl	800ec0a <__lo0bits>
 800f158:	9b01      	ldr	r3, [sp, #4]
 800f15a:	6163      	str	r3, [r4, #20]
 800f15c:	3020      	adds	r0, #32
 800f15e:	2201      	movs	r2, #1
 800f160:	e7e8      	b.n	800f134 <__d2b+0x64>
 800f162:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f166:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f16a:	6038      	str	r0, [r7, #0]
 800f16c:	6918      	ldr	r0, [r3, #16]
 800f16e:	f7ff fd2d 	bl	800ebcc <__hi0bits>
 800f172:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f176:	e7e5      	b.n	800f144 <__d2b+0x74>
 800f178:	080105c0 	.word	0x080105c0
 800f17c:	080105d1 	.word	0x080105d1

0800f180 <__sflush_r>:
 800f180:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f188:	0716      	lsls	r6, r2, #28
 800f18a:	4605      	mov	r5, r0
 800f18c:	460c      	mov	r4, r1
 800f18e:	d454      	bmi.n	800f23a <__sflush_r+0xba>
 800f190:	684b      	ldr	r3, [r1, #4]
 800f192:	2b00      	cmp	r3, #0
 800f194:	dc02      	bgt.n	800f19c <__sflush_r+0x1c>
 800f196:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f198:	2b00      	cmp	r3, #0
 800f19a:	dd48      	ble.n	800f22e <__sflush_r+0xae>
 800f19c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f19e:	2e00      	cmp	r6, #0
 800f1a0:	d045      	beq.n	800f22e <__sflush_r+0xae>
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f1a8:	682f      	ldr	r7, [r5, #0]
 800f1aa:	6a21      	ldr	r1, [r4, #32]
 800f1ac:	602b      	str	r3, [r5, #0]
 800f1ae:	d030      	beq.n	800f212 <__sflush_r+0x92>
 800f1b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f1b2:	89a3      	ldrh	r3, [r4, #12]
 800f1b4:	0759      	lsls	r1, r3, #29
 800f1b6:	d505      	bpl.n	800f1c4 <__sflush_r+0x44>
 800f1b8:	6863      	ldr	r3, [r4, #4]
 800f1ba:	1ad2      	subs	r2, r2, r3
 800f1bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f1be:	b10b      	cbz	r3, 800f1c4 <__sflush_r+0x44>
 800f1c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f1c2:	1ad2      	subs	r2, r2, r3
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f1c8:	6a21      	ldr	r1, [r4, #32]
 800f1ca:	4628      	mov	r0, r5
 800f1cc:	47b0      	blx	r6
 800f1ce:	1c43      	adds	r3, r0, #1
 800f1d0:	89a3      	ldrh	r3, [r4, #12]
 800f1d2:	d106      	bne.n	800f1e2 <__sflush_r+0x62>
 800f1d4:	6829      	ldr	r1, [r5, #0]
 800f1d6:	291d      	cmp	r1, #29
 800f1d8:	d82b      	bhi.n	800f232 <__sflush_r+0xb2>
 800f1da:	4a2a      	ldr	r2, [pc, #168]	@ (800f284 <__sflush_r+0x104>)
 800f1dc:	410a      	asrs	r2, r1
 800f1de:	07d6      	lsls	r6, r2, #31
 800f1e0:	d427      	bmi.n	800f232 <__sflush_r+0xb2>
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	6062      	str	r2, [r4, #4]
 800f1e6:	04d9      	lsls	r1, r3, #19
 800f1e8:	6922      	ldr	r2, [r4, #16]
 800f1ea:	6022      	str	r2, [r4, #0]
 800f1ec:	d504      	bpl.n	800f1f8 <__sflush_r+0x78>
 800f1ee:	1c42      	adds	r2, r0, #1
 800f1f0:	d101      	bne.n	800f1f6 <__sflush_r+0x76>
 800f1f2:	682b      	ldr	r3, [r5, #0]
 800f1f4:	b903      	cbnz	r3, 800f1f8 <__sflush_r+0x78>
 800f1f6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f1f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f1fa:	602f      	str	r7, [r5, #0]
 800f1fc:	b1b9      	cbz	r1, 800f22e <__sflush_r+0xae>
 800f1fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f202:	4299      	cmp	r1, r3
 800f204:	d002      	beq.n	800f20c <__sflush_r+0x8c>
 800f206:	4628      	mov	r0, r5
 800f208:	f7ff fb38 	bl	800e87c <_free_r>
 800f20c:	2300      	movs	r3, #0
 800f20e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f210:	e00d      	b.n	800f22e <__sflush_r+0xae>
 800f212:	2301      	movs	r3, #1
 800f214:	4628      	mov	r0, r5
 800f216:	47b0      	blx	r6
 800f218:	4602      	mov	r2, r0
 800f21a:	1c50      	adds	r0, r2, #1
 800f21c:	d1c9      	bne.n	800f1b2 <__sflush_r+0x32>
 800f21e:	682b      	ldr	r3, [r5, #0]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d0c6      	beq.n	800f1b2 <__sflush_r+0x32>
 800f224:	2b1d      	cmp	r3, #29
 800f226:	d001      	beq.n	800f22c <__sflush_r+0xac>
 800f228:	2b16      	cmp	r3, #22
 800f22a:	d11e      	bne.n	800f26a <__sflush_r+0xea>
 800f22c:	602f      	str	r7, [r5, #0]
 800f22e:	2000      	movs	r0, #0
 800f230:	e022      	b.n	800f278 <__sflush_r+0xf8>
 800f232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f236:	b21b      	sxth	r3, r3
 800f238:	e01b      	b.n	800f272 <__sflush_r+0xf2>
 800f23a:	690f      	ldr	r7, [r1, #16]
 800f23c:	2f00      	cmp	r7, #0
 800f23e:	d0f6      	beq.n	800f22e <__sflush_r+0xae>
 800f240:	0793      	lsls	r3, r2, #30
 800f242:	680e      	ldr	r6, [r1, #0]
 800f244:	bf08      	it	eq
 800f246:	694b      	ldreq	r3, [r1, #20]
 800f248:	600f      	str	r7, [r1, #0]
 800f24a:	bf18      	it	ne
 800f24c:	2300      	movne	r3, #0
 800f24e:	eba6 0807 	sub.w	r8, r6, r7
 800f252:	608b      	str	r3, [r1, #8]
 800f254:	f1b8 0f00 	cmp.w	r8, #0
 800f258:	dde9      	ble.n	800f22e <__sflush_r+0xae>
 800f25a:	6a21      	ldr	r1, [r4, #32]
 800f25c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f25e:	4643      	mov	r3, r8
 800f260:	463a      	mov	r2, r7
 800f262:	4628      	mov	r0, r5
 800f264:	47b0      	blx	r6
 800f266:	2800      	cmp	r0, #0
 800f268:	dc08      	bgt.n	800f27c <__sflush_r+0xfc>
 800f26a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f26e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f272:	81a3      	strh	r3, [r4, #12]
 800f274:	f04f 30ff 	mov.w	r0, #4294967295
 800f278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f27c:	4407      	add	r7, r0
 800f27e:	eba8 0800 	sub.w	r8, r8, r0
 800f282:	e7e7      	b.n	800f254 <__sflush_r+0xd4>
 800f284:	dfbffffe 	.word	0xdfbffffe

0800f288 <_fflush_r>:
 800f288:	b538      	push	{r3, r4, r5, lr}
 800f28a:	690b      	ldr	r3, [r1, #16]
 800f28c:	4605      	mov	r5, r0
 800f28e:	460c      	mov	r4, r1
 800f290:	b913      	cbnz	r3, 800f298 <_fflush_r+0x10>
 800f292:	2500      	movs	r5, #0
 800f294:	4628      	mov	r0, r5
 800f296:	bd38      	pop	{r3, r4, r5, pc}
 800f298:	b118      	cbz	r0, 800f2a2 <_fflush_r+0x1a>
 800f29a:	6a03      	ldr	r3, [r0, #32]
 800f29c:	b90b      	cbnz	r3, 800f2a2 <_fflush_r+0x1a>
 800f29e:	f7fe fc13 	bl	800dac8 <__sinit>
 800f2a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d0f3      	beq.n	800f292 <_fflush_r+0xa>
 800f2aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f2ac:	07d0      	lsls	r0, r2, #31
 800f2ae:	d404      	bmi.n	800f2ba <_fflush_r+0x32>
 800f2b0:	0599      	lsls	r1, r3, #22
 800f2b2:	d402      	bmi.n	800f2ba <_fflush_r+0x32>
 800f2b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f2b6:	f7fe fcfe 	bl	800dcb6 <__retarget_lock_acquire_recursive>
 800f2ba:	4628      	mov	r0, r5
 800f2bc:	4621      	mov	r1, r4
 800f2be:	f7ff ff5f 	bl	800f180 <__sflush_r>
 800f2c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f2c4:	07da      	lsls	r2, r3, #31
 800f2c6:	4605      	mov	r5, r0
 800f2c8:	d4e4      	bmi.n	800f294 <_fflush_r+0xc>
 800f2ca:	89a3      	ldrh	r3, [r4, #12]
 800f2cc:	059b      	lsls	r3, r3, #22
 800f2ce:	d4e1      	bmi.n	800f294 <_fflush_r+0xc>
 800f2d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f2d2:	f7fe fcf1 	bl	800dcb8 <__retarget_lock_release_recursive>
 800f2d6:	e7dd      	b.n	800f294 <_fflush_r+0xc>

0800f2d8 <_sbrk_r>:
 800f2d8:	b538      	push	{r3, r4, r5, lr}
 800f2da:	4d06      	ldr	r5, [pc, #24]	@ (800f2f4 <_sbrk_r+0x1c>)
 800f2dc:	2300      	movs	r3, #0
 800f2de:	4604      	mov	r4, r0
 800f2e0:	4608      	mov	r0, r1
 800f2e2:	602b      	str	r3, [r5, #0]
 800f2e4:	f7f4 fa5c 	bl	80037a0 <_sbrk>
 800f2e8:	1c43      	adds	r3, r0, #1
 800f2ea:	d102      	bne.n	800f2f2 <_sbrk_r+0x1a>
 800f2ec:	682b      	ldr	r3, [r5, #0]
 800f2ee:	b103      	cbz	r3, 800f2f2 <_sbrk_r+0x1a>
 800f2f0:	6023      	str	r3, [r4, #0]
 800f2f2:	bd38      	pop	{r3, r4, r5, pc}
 800f2f4:	24003f98 	.word	0x24003f98

0800f2f8 <memcpy>:
 800f2f8:	440a      	add	r2, r1
 800f2fa:	4291      	cmp	r1, r2
 800f2fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800f300:	d100      	bne.n	800f304 <memcpy+0xc>
 800f302:	4770      	bx	lr
 800f304:	b510      	push	{r4, lr}
 800f306:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f30a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f30e:	4291      	cmp	r1, r2
 800f310:	d1f9      	bne.n	800f306 <memcpy+0xe>
 800f312:	bd10      	pop	{r4, pc}

0800f314 <__assert_func>:
 800f314:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f316:	4614      	mov	r4, r2
 800f318:	461a      	mov	r2, r3
 800f31a:	4b09      	ldr	r3, [pc, #36]	@ (800f340 <__assert_func+0x2c>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	4605      	mov	r5, r0
 800f320:	68d8      	ldr	r0, [r3, #12]
 800f322:	b954      	cbnz	r4, 800f33a <__assert_func+0x26>
 800f324:	4b07      	ldr	r3, [pc, #28]	@ (800f344 <__assert_func+0x30>)
 800f326:	461c      	mov	r4, r3
 800f328:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f32c:	9100      	str	r1, [sp, #0]
 800f32e:	462b      	mov	r3, r5
 800f330:	4905      	ldr	r1, [pc, #20]	@ (800f348 <__assert_func+0x34>)
 800f332:	f000 f841 	bl	800f3b8 <fiprintf>
 800f336:	f000 f851 	bl	800f3dc <abort>
 800f33a:	4b04      	ldr	r3, [pc, #16]	@ (800f34c <__assert_func+0x38>)
 800f33c:	e7f4      	b.n	800f328 <__assert_func+0x14>
 800f33e:	bf00      	nop
 800f340:	2400002c 	.word	0x2400002c
 800f344:	0801076d 	.word	0x0801076d
 800f348:	0801073f 	.word	0x0801073f
 800f34c:	08010732 	.word	0x08010732

0800f350 <_calloc_r>:
 800f350:	b570      	push	{r4, r5, r6, lr}
 800f352:	fba1 5402 	umull	r5, r4, r1, r2
 800f356:	b93c      	cbnz	r4, 800f368 <_calloc_r+0x18>
 800f358:	4629      	mov	r1, r5
 800f35a:	f7ff fb03 	bl	800e964 <_malloc_r>
 800f35e:	4606      	mov	r6, r0
 800f360:	b928      	cbnz	r0, 800f36e <_calloc_r+0x1e>
 800f362:	2600      	movs	r6, #0
 800f364:	4630      	mov	r0, r6
 800f366:	bd70      	pop	{r4, r5, r6, pc}
 800f368:	220c      	movs	r2, #12
 800f36a:	6002      	str	r2, [r0, #0]
 800f36c:	e7f9      	b.n	800f362 <_calloc_r+0x12>
 800f36e:	462a      	mov	r2, r5
 800f370:	4621      	mov	r1, r4
 800f372:	f7fe fc22 	bl	800dbba <memset>
 800f376:	e7f5      	b.n	800f364 <_calloc_r+0x14>

0800f378 <__ascii_mbtowc>:
 800f378:	b082      	sub	sp, #8
 800f37a:	b901      	cbnz	r1, 800f37e <__ascii_mbtowc+0x6>
 800f37c:	a901      	add	r1, sp, #4
 800f37e:	b142      	cbz	r2, 800f392 <__ascii_mbtowc+0x1a>
 800f380:	b14b      	cbz	r3, 800f396 <__ascii_mbtowc+0x1e>
 800f382:	7813      	ldrb	r3, [r2, #0]
 800f384:	600b      	str	r3, [r1, #0]
 800f386:	7812      	ldrb	r2, [r2, #0]
 800f388:	1e10      	subs	r0, r2, #0
 800f38a:	bf18      	it	ne
 800f38c:	2001      	movne	r0, #1
 800f38e:	b002      	add	sp, #8
 800f390:	4770      	bx	lr
 800f392:	4610      	mov	r0, r2
 800f394:	e7fb      	b.n	800f38e <__ascii_mbtowc+0x16>
 800f396:	f06f 0001 	mvn.w	r0, #1
 800f39a:	e7f8      	b.n	800f38e <__ascii_mbtowc+0x16>

0800f39c <__ascii_wctomb>:
 800f39c:	4603      	mov	r3, r0
 800f39e:	4608      	mov	r0, r1
 800f3a0:	b141      	cbz	r1, 800f3b4 <__ascii_wctomb+0x18>
 800f3a2:	2aff      	cmp	r2, #255	@ 0xff
 800f3a4:	d904      	bls.n	800f3b0 <__ascii_wctomb+0x14>
 800f3a6:	228a      	movs	r2, #138	@ 0x8a
 800f3a8:	601a      	str	r2, [r3, #0]
 800f3aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ae:	4770      	bx	lr
 800f3b0:	700a      	strb	r2, [r1, #0]
 800f3b2:	2001      	movs	r0, #1
 800f3b4:	4770      	bx	lr
	...

0800f3b8 <fiprintf>:
 800f3b8:	b40e      	push	{r1, r2, r3}
 800f3ba:	b503      	push	{r0, r1, lr}
 800f3bc:	4601      	mov	r1, r0
 800f3be:	ab03      	add	r3, sp, #12
 800f3c0:	4805      	ldr	r0, [pc, #20]	@ (800f3d8 <fiprintf+0x20>)
 800f3c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3c6:	6800      	ldr	r0, [r0, #0]
 800f3c8:	9301      	str	r3, [sp, #4]
 800f3ca:	f000 f837 	bl	800f43c <_vfiprintf_r>
 800f3ce:	b002      	add	sp, #8
 800f3d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3d4:	b003      	add	sp, #12
 800f3d6:	4770      	bx	lr
 800f3d8:	2400002c 	.word	0x2400002c

0800f3dc <abort>:
 800f3dc:	b508      	push	{r3, lr}
 800f3de:	2006      	movs	r0, #6
 800f3e0:	f000 fa00 	bl	800f7e4 <raise>
 800f3e4:	2001      	movs	r0, #1
 800f3e6:	f7f4 f963 	bl	80036b0 <_exit>

0800f3ea <__sfputc_r>:
 800f3ea:	6893      	ldr	r3, [r2, #8]
 800f3ec:	3b01      	subs	r3, #1
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	b410      	push	{r4}
 800f3f2:	6093      	str	r3, [r2, #8]
 800f3f4:	da08      	bge.n	800f408 <__sfputc_r+0x1e>
 800f3f6:	6994      	ldr	r4, [r2, #24]
 800f3f8:	42a3      	cmp	r3, r4
 800f3fa:	db01      	blt.n	800f400 <__sfputc_r+0x16>
 800f3fc:	290a      	cmp	r1, #10
 800f3fe:	d103      	bne.n	800f408 <__sfputc_r+0x1e>
 800f400:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f404:	f000 b932 	b.w	800f66c <__swbuf_r>
 800f408:	6813      	ldr	r3, [r2, #0]
 800f40a:	1c58      	adds	r0, r3, #1
 800f40c:	6010      	str	r0, [r2, #0]
 800f40e:	7019      	strb	r1, [r3, #0]
 800f410:	4608      	mov	r0, r1
 800f412:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f416:	4770      	bx	lr

0800f418 <__sfputs_r>:
 800f418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f41a:	4606      	mov	r6, r0
 800f41c:	460f      	mov	r7, r1
 800f41e:	4614      	mov	r4, r2
 800f420:	18d5      	adds	r5, r2, r3
 800f422:	42ac      	cmp	r4, r5
 800f424:	d101      	bne.n	800f42a <__sfputs_r+0x12>
 800f426:	2000      	movs	r0, #0
 800f428:	e007      	b.n	800f43a <__sfputs_r+0x22>
 800f42a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f42e:	463a      	mov	r2, r7
 800f430:	4630      	mov	r0, r6
 800f432:	f7ff ffda 	bl	800f3ea <__sfputc_r>
 800f436:	1c43      	adds	r3, r0, #1
 800f438:	d1f3      	bne.n	800f422 <__sfputs_r+0xa>
 800f43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f43c <_vfiprintf_r>:
 800f43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f440:	460d      	mov	r5, r1
 800f442:	b09d      	sub	sp, #116	@ 0x74
 800f444:	4614      	mov	r4, r2
 800f446:	4698      	mov	r8, r3
 800f448:	4606      	mov	r6, r0
 800f44a:	b118      	cbz	r0, 800f454 <_vfiprintf_r+0x18>
 800f44c:	6a03      	ldr	r3, [r0, #32]
 800f44e:	b90b      	cbnz	r3, 800f454 <_vfiprintf_r+0x18>
 800f450:	f7fe fb3a 	bl	800dac8 <__sinit>
 800f454:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f456:	07d9      	lsls	r1, r3, #31
 800f458:	d405      	bmi.n	800f466 <_vfiprintf_r+0x2a>
 800f45a:	89ab      	ldrh	r3, [r5, #12]
 800f45c:	059a      	lsls	r2, r3, #22
 800f45e:	d402      	bmi.n	800f466 <_vfiprintf_r+0x2a>
 800f460:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f462:	f7fe fc28 	bl	800dcb6 <__retarget_lock_acquire_recursive>
 800f466:	89ab      	ldrh	r3, [r5, #12]
 800f468:	071b      	lsls	r3, r3, #28
 800f46a:	d501      	bpl.n	800f470 <_vfiprintf_r+0x34>
 800f46c:	692b      	ldr	r3, [r5, #16]
 800f46e:	b99b      	cbnz	r3, 800f498 <_vfiprintf_r+0x5c>
 800f470:	4629      	mov	r1, r5
 800f472:	4630      	mov	r0, r6
 800f474:	f000 f938 	bl	800f6e8 <__swsetup_r>
 800f478:	b170      	cbz	r0, 800f498 <_vfiprintf_r+0x5c>
 800f47a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f47c:	07dc      	lsls	r4, r3, #31
 800f47e:	d504      	bpl.n	800f48a <_vfiprintf_r+0x4e>
 800f480:	f04f 30ff 	mov.w	r0, #4294967295
 800f484:	b01d      	add	sp, #116	@ 0x74
 800f486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f48a:	89ab      	ldrh	r3, [r5, #12]
 800f48c:	0598      	lsls	r0, r3, #22
 800f48e:	d4f7      	bmi.n	800f480 <_vfiprintf_r+0x44>
 800f490:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f492:	f7fe fc11 	bl	800dcb8 <__retarget_lock_release_recursive>
 800f496:	e7f3      	b.n	800f480 <_vfiprintf_r+0x44>
 800f498:	2300      	movs	r3, #0
 800f49a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f49c:	2320      	movs	r3, #32
 800f49e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f4a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4a6:	2330      	movs	r3, #48	@ 0x30
 800f4a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f658 <_vfiprintf_r+0x21c>
 800f4ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f4b0:	f04f 0901 	mov.w	r9, #1
 800f4b4:	4623      	mov	r3, r4
 800f4b6:	469a      	mov	sl, r3
 800f4b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4bc:	b10a      	cbz	r2, 800f4c2 <_vfiprintf_r+0x86>
 800f4be:	2a25      	cmp	r2, #37	@ 0x25
 800f4c0:	d1f9      	bne.n	800f4b6 <_vfiprintf_r+0x7a>
 800f4c2:	ebba 0b04 	subs.w	fp, sl, r4
 800f4c6:	d00b      	beq.n	800f4e0 <_vfiprintf_r+0xa4>
 800f4c8:	465b      	mov	r3, fp
 800f4ca:	4622      	mov	r2, r4
 800f4cc:	4629      	mov	r1, r5
 800f4ce:	4630      	mov	r0, r6
 800f4d0:	f7ff ffa2 	bl	800f418 <__sfputs_r>
 800f4d4:	3001      	adds	r0, #1
 800f4d6:	f000 80a7 	beq.w	800f628 <_vfiprintf_r+0x1ec>
 800f4da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4dc:	445a      	add	r2, fp
 800f4de:	9209      	str	r2, [sp, #36]	@ 0x24
 800f4e0:	f89a 3000 	ldrb.w	r3, [sl]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	f000 809f 	beq.w	800f628 <_vfiprintf_r+0x1ec>
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	f04f 32ff 	mov.w	r2, #4294967295
 800f4f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4f4:	f10a 0a01 	add.w	sl, sl, #1
 800f4f8:	9304      	str	r3, [sp, #16]
 800f4fa:	9307      	str	r3, [sp, #28]
 800f4fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f500:	931a      	str	r3, [sp, #104]	@ 0x68
 800f502:	4654      	mov	r4, sl
 800f504:	2205      	movs	r2, #5
 800f506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f50a:	4853      	ldr	r0, [pc, #332]	@ (800f658 <_vfiprintf_r+0x21c>)
 800f50c:	f7f0 fee8 	bl	80002e0 <memchr>
 800f510:	9a04      	ldr	r2, [sp, #16]
 800f512:	b9d8      	cbnz	r0, 800f54c <_vfiprintf_r+0x110>
 800f514:	06d1      	lsls	r1, r2, #27
 800f516:	bf44      	itt	mi
 800f518:	2320      	movmi	r3, #32
 800f51a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f51e:	0713      	lsls	r3, r2, #28
 800f520:	bf44      	itt	mi
 800f522:	232b      	movmi	r3, #43	@ 0x2b
 800f524:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f528:	f89a 3000 	ldrb.w	r3, [sl]
 800f52c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f52e:	d015      	beq.n	800f55c <_vfiprintf_r+0x120>
 800f530:	9a07      	ldr	r2, [sp, #28]
 800f532:	4654      	mov	r4, sl
 800f534:	2000      	movs	r0, #0
 800f536:	f04f 0c0a 	mov.w	ip, #10
 800f53a:	4621      	mov	r1, r4
 800f53c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f540:	3b30      	subs	r3, #48	@ 0x30
 800f542:	2b09      	cmp	r3, #9
 800f544:	d94b      	bls.n	800f5de <_vfiprintf_r+0x1a2>
 800f546:	b1b0      	cbz	r0, 800f576 <_vfiprintf_r+0x13a>
 800f548:	9207      	str	r2, [sp, #28]
 800f54a:	e014      	b.n	800f576 <_vfiprintf_r+0x13a>
 800f54c:	eba0 0308 	sub.w	r3, r0, r8
 800f550:	fa09 f303 	lsl.w	r3, r9, r3
 800f554:	4313      	orrs	r3, r2
 800f556:	9304      	str	r3, [sp, #16]
 800f558:	46a2      	mov	sl, r4
 800f55a:	e7d2      	b.n	800f502 <_vfiprintf_r+0xc6>
 800f55c:	9b03      	ldr	r3, [sp, #12]
 800f55e:	1d19      	adds	r1, r3, #4
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	9103      	str	r1, [sp, #12]
 800f564:	2b00      	cmp	r3, #0
 800f566:	bfbb      	ittet	lt
 800f568:	425b      	neglt	r3, r3
 800f56a:	f042 0202 	orrlt.w	r2, r2, #2
 800f56e:	9307      	strge	r3, [sp, #28]
 800f570:	9307      	strlt	r3, [sp, #28]
 800f572:	bfb8      	it	lt
 800f574:	9204      	strlt	r2, [sp, #16]
 800f576:	7823      	ldrb	r3, [r4, #0]
 800f578:	2b2e      	cmp	r3, #46	@ 0x2e
 800f57a:	d10a      	bne.n	800f592 <_vfiprintf_r+0x156>
 800f57c:	7863      	ldrb	r3, [r4, #1]
 800f57e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f580:	d132      	bne.n	800f5e8 <_vfiprintf_r+0x1ac>
 800f582:	9b03      	ldr	r3, [sp, #12]
 800f584:	1d1a      	adds	r2, r3, #4
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	9203      	str	r2, [sp, #12]
 800f58a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f58e:	3402      	adds	r4, #2
 800f590:	9305      	str	r3, [sp, #20]
 800f592:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f668 <_vfiprintf_r+0x22c>
 800f596:	7821      	ldrb	r1, [r4, #0]
 800f598:	2203      	movs	r2, #3
 800f59a:	4650      	mov	r0, sl
 800f59c:	f7f0 fea0 	bl	80002e0 <memchr>
 800f5a0:	b138      	cbz	r0, 800f5b2 <_vfiprintf_r+0x176>
 800f5a2:	9b04      	ldr	r3, [sp, #16]
 800f5a4:	eba0 000a 	sub.w	r0, r0, sl
 800f5a8:	2240      	movs	r2, #64	@ 0x40
 800f5aa:	4082      	lsls	r2, r0
 800f5ac:	4313      	orrs	r3, r2
 800f5ae:	3401      	adds	r4, #1
 800f5b0:	9304      	str	r3, [sp, #16]
 800f5b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5b6:	4829      	ldr	r0, [pc, #164]	@ (800f65c <_vfiprintf_r+0x220>)
 800f5b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f5bc:	2206      	movs	r2, #6
 800f5be:	f7f0 fe8f 	bl	80002e0 <memchr>
 800f5c2:	2800      	cmp	r0, #0
 800f5c4:	d03f      	beq.n	800f646 <_vfiprintf_r+0x20a>
 800f5c6:	4b26      	ldr	r3, [pc, #152]	@ (800f660 <_vfiprintf_r+0x224>)
 800f5c8:	bb1b      	cbnz	r3, 800f612 <_vfiprintf_r+0x1d6>
 800f5ca:	9b03      	ldr	r3, [sp, #12]
 800f5cc:	3307      	adds	r3, #7
 800f5ce:	f023 0307 	bic.w	r3, r3, #7
 800f5d2:	3308      	adds	r3, #8
 800f5d4:	9303      	str	r3, [sp, #12]
 800f5d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5d8:	443b      	add	r3, r7
 800f5da:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5dc:	e76a      	b.n	800f4b4 <_vfiprintf_r+0x78>
 800f5de:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5e2:	460c      	mov	r4, r1
 800f5e4:	2001      	movs	r0, #1
 800f5e6:	e7a8      	b.n	800f53a <_vfiprintf_r+0xfe>
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	3401      	adds	r4, #1
 800f5ec:	9305      	str	r3, [sp, #20]
 800f5ee:	4619      	mov	r1, r3
 800f5f0:	f04f 0c0a 	mov.w	ip, #10
 800f5f4:	4620      	mov	r0, r4
 800f5f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5fa:	3a30      	subs	r2, #48	@ 0x30
 800f5fc:	2a09      	cmp	r2, #9
 800f5fe:	d903      	bls.n	800f608 <_vfiprintf_r+0x1cc>
 800f600:	2b00      	cmp	r3, #0
 800f602:	d0c6      	beq.n	800f592 <_vfiprintf_r+0x156>
 800f604:	9105      	str	r1, [sp, #20]
 800f606:	e7c4      	b.n	800f592 <_vfiprintf_r+0x156>
 800f608:	fb0c 2101 	mla	r1, ip, r1, r2
 800f60c:	4604      	mov	r4, r0
 800f60e:	2301      	movs	r3, #1
 800f610:	e7f0      	b.n	800f5f4 <_vfiprintf_r+0x1b8>
 800f612:	ab03      	add	r3, sp, #12
 800f614:	9300      	str	r3, [sp, #0]
 800f616:	462a      	mov	r2, r5
 800f618:	4b12      	ldr	r3, [pc, #72]	@ (800f664 <_vfiprintf_r+0x228>)
 800f61a:	a904      	add	r1, sp, #16
 800f61c:	4630      	mov	r0, r6
 800f61e:	f7fd fe1f 	bl	800d260 <_printf_float>
 800f622:	4607      	mov	r7, r0
 800f624:	1c78      	adds	r0, r7, #1
 800f626:	d1d6      	bne.n	800f5d6 <_vfiprintf_r+0x19a>
 800f628:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f62a:	07d9      	lsls	r1, r3, #31
 800f62c:	d405      	bmi.n	800f63a <_vfiprintf_r+0x1fe>
 800f62e:	89ab      	ldrh	r3, [r5, #12]
 800f630:	059a      	lsls	r2, r3, #22
 800f632:	d402      	bmi.n	800f63a <_vfiprintf_r+0x1fe>
 800f634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f636:	f7fe fb3f 	bl	800dcb8 <__retarget_lock_release_recursive>
 800f63a:	89ab      	ldrh	r3, [r5, #12]
 800f63c:	065b      	lsls	r3, r3, #25
 800f63e:	f53f af1f 	bmi.w	800f480 <_vfiprintf_r+0x44>
 800f642:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f644:	e71e      	b.n	800f484 <_vfiprintf_r+0x48>
 800f646:	ab03      	add	r3, sp, #12
 800f648:	9300      	str	r3, [sp, #0]
 800f64a:	462a      	mov	r2, r5
 800f64c:	4b05      	ldr	r3, [pc, #20]	@ (800f664 <_vfiprintf_r+0x228>)
 800f64e:	a904      	add	r1, sp, #16
 800f650:	4630      	mov	r0, r6
 800f652:	f7fe f88d 	bl	800d770 <_printf_i>
 800f656:	e7e4      	b.n	800f622 <_vfiprintf_r+0x1e6>
 800f658:	0801086f 	.word	0x0801086f
 800f65c:	08010879 	.word	0x08010879
 800f660:	0800d261 	.word	0x0800d261
 800f664:	0800f419 	.word	0x0800f419
 800f668:	08010875 	.word	0x08010875

0800f66c <__swbuf_r>:
 800f66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f66e:	460e      	mov	r6, r1
 800f670:	4614      	mov	r4, r2
 800f672:	4605      	mov	r5, r0
 800f674:	b118      	cbz	r0, 800f67e <__swbuf_r+0x12>
 800f676:	6a03      	ldr	r3, [r0, #32]
 800f678:	b90b      	cbnz	r3, 800f67e <__swbuf_r+0x12>
 800f67a:	f7fe fa25 	bl	800dac8 <__sinit>
 800f67e:	69a3      	ldr	r3, [r4, #24]
 800f680:	60a3      	str	r3, [r4, #8]
 800f682:	89a3      	ldrh	r3, [r4, #12]
 800f684:	071a      	lsls	r2, r3, #28
 800f686:	d501      	bpl.n	800f68c <__swbuf_r+0x20>
 800f688:	6923      	ldr	r3, [r4, #16]
 800f68a:	b943      	cbnz	r3, 800f69e <__swbuf_r+0x32>
 800f68c:	4621      	mov	r1, r4
 800f68e:	4628      	mov	r0, r5
 800f690:	f000 f82a 	bl	800f6e8 <__swsetup_r>
 800f694:	b118      	cbz	r0, 800f69e <__swbuf_r+0x32>
 800f696:	f04f 37ff 	mov.w	r7, #4294967295
 800f69a:	4638      	mov	r0, r7
 800f69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f69e:	6823      	ldr	r3, [r4, #0]
 800f6a0:	6922      	ldr	r2, [r4, #16]
 800f6a2:	1a98      	subs	r0, r3, r2
 800f6a4:	6963      	ldr	r3, [r4, #20]
 800f6a6:	b2f6      	uxtb	r6, r6
 800f6a8:	4283      	cmp	r3, r0
 800f6aa:	4637      	mov	r7, r6
 800f6ac:	dc05      	bgt.n	800f6ba <__swbuf_r+0x4e>
 800f6ae:	4621      	mov	r1, r4
 800f6b0:	4628      	mov	r0, r5
 800f6b2:	f7ff fde9 	bl	800f288 <_fflush_r>
 800f6b6:	2800      	cmp	r0, #0
 800f6b8:	d1ed      	bne.n	800f696 <__swbuf_r+0x2a>
 800f6ba:	68a3      	ldr	r3, [r4, #8]
 800f6bc:	3b01      	subs	r3, #1
 800f6be:	60a3      	str	r3, [r4, #8]
 800f6c0:	6823      	ldr	r3, [r4, #0]
 800f6c2:	1c5a      	adds	r2, r3, #1
 800f6c4:	6022      	str	r2, [r4, #0]
 800f6c6:	701e      	strb	r6, [r3, #0]
 800f6c8:	6962      	ldr	r2, [r4, #20]
 800f6ca:	1c43      	adds	r3, r0, #1
 800f6cc:	429a      	cmp	r2, r3
 800f6ce:	d004      	beq.n	800f6da <__swbuf_r+0x6e>
 800f6d0:	89a3      	ldrh	r3, [r4, #12]
 800f6d2:	07db      	lsls	r3, r3, #31
 800f6d4:	d5e1      	bpl.n	800f69a <__swbuf_r+0x2e>
 800f6d6:	2e0a      	cmp	r6, #10
 800f6d8:	d1df      	bne.n	800f69a <__swbuf_r+0x2e>
 800f6da:	4621      	mov	r1, r4
 800f6dc:	4628      	mov	r0, r5
 800f6de:	f7ff fdd3 	bl	800f288 <_fflush_r>
 800f6e2:	2800      	cmp	r0, #0
 800f6e4:	d0d9      	beq.n	800f69a <__swbuf_r+0x2e>
 800f6e6:	e7d6      	b.n	800f696 <__swbuf_r+0x2a>

0800f6e8 <__swsetup_r>:
 800f6e8:	b538      	push	{r3, r4, r5, lr}
 800f6ea:	4b29      	ldr	r3, [pc, #164]	@ (800f790 <__swsetup_r+0xa8>)
 800f6ec:	4605      	mov	r5, r0
 800f6ee:	6818      	ldr	r0, [r3, #0]
 800f6f0:	460c      	mov	r4, r1
 800f6f2:	b118      	cbz	r0, 800f6fc <__swsetup_r+0x14>
 800f6f4:	6a03      	ldr	r3, [r0, #32]
 800f6f6:	b90b      	cbnz	r3, 800f6fc <__swsetup_r+0x14>
 800f6f8:	f7fe f9e6 	bl	800dac8 <__sinit>
 800f6fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f700:	0719      	lsls	r1, r3, #28
 800f702:	d422      	bmi.n	800f74a <__swsetup_r+0x62>
 800f704:	06da      	lsls	r2, r3, #27
 800f706:	d407      	bmi.n	800f718 <__swsetup_r+0x30>
 800f708:	2209      	movs	r2, #9
 800f70a:	602a      	str	r2, [r5, #0]
 800f70c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f710:	81a3      	strh	r3, [r4, #12]
 800f712:	f04f 30ff 	mov.w	r0, #4294967295
 800f716:	e033      	b.n	800f780 <__swsetup_r+0x98>
 800f718:	0758      	lsls	r0, r3, #29
 800f71a:	d512      	bpl.n	800f742 <__swsetup_r+0x5a>
 800f71c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f71e:	b141      	cbz	r1, 800f732 <__swsetup_r+0x4a>
 800f720:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f724:	4299      	cmp	r1, r3
 800f726:	d002      	beq.n	800f72e <__swsetup_r+0x46>
 800f728:	4628      	mov	r0, r5
 800f72a:	f7ff f8a7 	bl	800e87c <_free_r>
 800f72e:	2300      	movs	r3, #0
 800f730:	6363      	str	r3, [r4, #52]	@ 0x34
 800f732:	89a3      	ldrh	r3, [r4, #12]
 800f734:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f738:	81a3      	strh	r3, [r4, #12]
 800f73a:	2300      	movs	r3, #0
 800f73c:	6063      	str	r3, [r4, #4]
 800f73e:	6923      	ldr	r3, [r4, #16]
 800f740:	6023      	str	r3, [r4, #0]
 800f742:	89a3      	ldrh	r3, [r4, #12]
 800f744:	f043 0308 	orr.w	r3, r3, #8
 800f748:	81a3      	strh	r3, [r4, #12]
 800f74a:	6923      	ldr	r3, [r4, #16]
 800f74c:	b94b      	cbnz	r3, 800f762 <__swsetup_r+0x7a>
 800f74e:	89a3      	ldrh	r3, [r4, #12]
 800f750:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f754:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f758:	d003      	beq.n	800f762 <__swsetup_r+0x7a>
 800f75a:	4621      	mov	r1, r4
 800f75c:	4628      	mov	r0, r5
 800f75e:	f000 f883 	bl	800f868 <__smakebuf_r>
 800f762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f766:	f013 0201 	ands.w	r2, r3, #1
 800f76a:	d00a      	beq.n	800f782 <__swsetup_r+0x9a>
 800f76c:	2200      	movs	r2, #0
 800f76e:	60a2      	str	r2, [r4, #8]
 800f770:	6962      	ldr	r2, [r4, #20]
 800f772:	4252      	negs	r2, r2
 800f774:	61a2      	str	r2, [r4, #24]
 800f776:	6922      	ldr	r2, [r4, #16]
 800f778:	b942      	cbnz	r2, 800f78c <__swsetup_r+0xa4>
 800f77a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f77e:	d1c5      	bne.n	800f70c <__swsetup_r+0x24>
 800f780:	bd38      	pop	{r3, r4, r5, pc}
 800f782:	0799      	lsls	r1, r3, #30
 800f784:	bf58      	it	pl
 800f786:	6962      	ldrpl	r2, [r4, #20]
 800f788:	60a2      	str	r2, [r4, #8]
 800f78a:	e7f4      	b.n	800f776 <__swsetup_r+0x8e>
 800f78c:	2000      	movs	r0, #0
 800f78e:	e7f7      	b.n	800f780 <__swsetup_r+0x98>
 800f790:	2400002c 	.word	0x2400002c

0800f794 <_raise_r>:
 800f794:	291f      	cmp	r1, #31
 800f796:	b538      	push	{r3, r4, r5, lr}
 800f798:	4605      	mov	r5, r0
 800f79a:	460c      	mov	r4, r1
 800f79c:	d904      	bls.n	800f7a8 <_raise_r+0x14>
 800f79e:	2316      	movs	r3, #22
 800f7a0:	6003      	str	r3, [r0, #0]
 800f7a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f7a6:	bd38      	pop	{r3, r4, r5, pc}
 800f7a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f7aa:	b112      	cbz	r2, 800f7b2 <_raise_r+0x1e>
 800f7ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f7b0:	b94b      	cbnz	r3, 800f7c6 <_raise_r+0x32>
 800f7b2:	4628      	mov	r0, r5
 800f7b4:	f000 f830 	bl	800f818 <_getpid_r>
 800f7b8:	4622      	mov	r2, r4
 800f7ba:	4601      	mov	r1, r0
 800f7bc:	4628      	mov	r0, r5
 800f7be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7c2:	f000 b817 	b.w	800f7f4 <_kill_r>
 800f7c6:	2b01      	cmp	r3, #1
 800f7c8:	d00a      	beq.n	800f7e0 <_raise_r+0x4c>
 800f7ca:	1c59      	adds	r1, r3, #1
 800f7cc:	d103      	bne.n	800f7d6 <_raise_r+0x42>
 800f7ce:	2316      	movs	r3, #22
 800f7d0:	6003      	str	r3, [r0, #0]
 800f7d2:	2001      	movs	r0, #1
 800f7d4:	e7e7      	b.n	800f7a6 <_raise_r+0x12>
 800f7d6:	2100      	movs	r1, #0
 800f7d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f7dc:	4620      	mov	r0, r4
 800f7de:	4798      	blx	r3
 800f7e0:	2000      	movs	r0, #0
 800f7e2:	e7e0      	b.n	800f7a6 <_raise_r+0x12>

0800f7e4 <raise>:
 800f7e4:	4b02      	ldr	r3, [pc, #8]	@ (800f7f0 <raise+0xc>)
 800f7e6:	4601      	mov	r1, r0
 800f7e8:	6818      	ldr	r0, [r3, #0]
 800f7ea:	f7ff bfd3 	b.w	800f794 <_raise_r>
 800f7ee:	bf00      	nop
 800f7f0:	2400002c 	.word	0x2400002c

0800f7f4 <_kill_r>:
 800f7f4:	b538      	push	{r3, r4, r5, lr}
 800f7f6:	4d07      	ldr	r5, [pc, #28]	@ (800f814 <_kill_r+0x20>)
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	4604      	mov	r4, r0
 800f7fc:	4608      	mov	r0, r1
 800f7fe:	4611      	mov	r1, r2
 800f800:	602b      	str	r3, [r5, #0]
 800f802:	f7f3 ff45 	bl	8003690 <_kill>
 800f806:	1c43      	adds	r3, r0, #1
 800f808:	d102      	bne.n	800f810 <_kill_r+0x1c>
 800f80a:	682b      	ldr	r3, [r5, #0]
 800f80c:	b103      	cbz	r3, 800f810 <_kill_r+0x1c>
 800f80e:	6023      	str	r3, [r4, #0]
 800f810:	bd38      	pop	{r3, r4, r5, pc}
 800f812:	bf00      	nop
 800f814:	24003f98 	.word	0x24003f98

0800f818 <_getpid_r>:
 800f818:	f7f3 bf32 	b.w	8003680 <_getpid>

0800f81c <__swhatbuf_r>:
 800f81c:	b570      	push	{r4, r5, r6, lr}
 800f81e:	460c      	mov	r4, r1
 800f820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f824:	2900      	cmp	r1, #0
 800f826:	b096      	sub	sp, #88	@ 0x58
 800f828:	4615      	mov	r5, r2
 800f82a:	461e      	mov	r6, r3
 800f82c:	da0d      	bge.n	800f84a <__swhatbuf_r+0x2e>
 800f82e:	89a3      	ldrh	r3, [r4, #12]
 800f830:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f834:	f04f 0100 	mov.w	r1, #0
 800f838:	bf14      	ite	ne
 800f83a:	2340      	movne	r3, #64	@ 0x40
 800f83c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f840:	2000      	movs	r0, #0
 800f842:	6031      	str	r1, [r6, #0]
 800f844:	602b      	str	r3, [r5, #0]
 800f846:	b016      	add	sp, #88	@ 0x58
 800f848:	bd70      	pop	{r4, r5, r6, pc}
 800f84a:	466a      	mov	r2, sp
 800f84c:	f000 f848 	bl	800f8e0 <_fstat_r>
 800f850:	2800      	cmp	r0, #0
 800f852:	dbec      	blt.n	800f82e <__swhatbuf_r+0x12>
 800f854:	9901      	ldr	r1, [sp, #4]
 800f856:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f85a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f85e:	4259      	negs	r1, r3
 800f860:	4159      	adcs	r1, r3
 800f862:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f866:	e7eb      	b.n	800f840 <__swhatbuf_r+0x24>

0800f868 <__smakebuf_r>:
 800f868:	898b      	ldrh	r3, [r1, #12]
 800f86a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f86c:	079d      	lsls	r5, r3, #30
 800f86e:	4606      	mov	r6, r0
 800f870:	460c      	mov	r4, r1
 800f872:	d507      	bpl.n	800f884 <__smakebuf_r+0x1c>
 800f874:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f878:	6023      	str	r3, [r4, #0]
 800f87a:	6123      	str	r3, [r4, #16]
 800f87c:	2301      	movs	r3, #1
 800f87e:	6163      	str	r3, [r4, #20]
 800f880:	b003      	add	sp, #12
 800f882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f884:	ab01      	add	r3, sp, #4
 800f886:	466a      	mov	r2, sp
 800f888:	f7ff ffc8 	bl	800f81c <__swhatbuf_r>
 800f88c:	9f00      	ldr	r7, [sp, #0]
 800f88e:	4605      	mov	r5, r0
 800f890:	4639      	mov	r1, r7
 800f892:	4630      	mov	r0, r6
 800f894:	f7ff f866 	bl	800e964 <_malloc_r>
 800f898:	b948      	cbnz	r0, 800f8ae <__smakebuf_r+0x46>
 800f89a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f89e:	059a      	lsls	r2, r3, #22
 800f8a0:	d4ee      	bmi.n	800f880 <__smakebuf_r+0x18>
 800f8a2:	f023 0303 	bic.w	r3, r3, #3
 800f8a6:	f043 0302 	orr.w	r3, r3, #2
 800f8aa:	81a3      	strh	r3, [r4, #12]
 800f8ac:	e7e2      	b.n	800f874 <__smakebuf_r+0xc>
 800f8ae:	89a3      	ldrh	r3, [r4, #12]
 800f8b0:	6020      	str	r0, [r4, #0]
 800f8b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8b6:	81a3      	strh	r3, [r4, #12]
 800f8b8:	9b01      	ldr	r3, [sp, #4]
 800f8ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f8be:	b15b      	cbz	r3, 800f8d8 <__smakebuf_r+0x70>
 800f8c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8c4:	4630      	mov	r0, r6
 800f8c6:	f000 f81d 	bl	800f904 <_isatty_r>
 800f8ca:	b128      	cbz	r0, 800f8d8 <__smakebuf_r+0x70>
 800f8cc:	89a3      	ldrh	r3, [r4, #12]
 800f8ce:	f023 0303 	bic.w	r3, r3, #3
 800f8d2:	f043 0301 	orr.w	r3, r3, #1
 800f8d6:	81a3      	strh	r3, [r4, #12]
 800f8d8:	89a3      	ldrh	r3, [r4, #12]
 800f8da:	431d      	orrs	r5, r3
 800f8dc:	81a5      	strh	r5, [r4, #12]
 800f8de:	e7cf      	b.n	800f880 <__smakebuf_r+0x18>

0800f8e0 <_fstat_r>:
 800f8e0:	b538      	push	{r3, r4, r5, lr}
 800f8e2:	4d07      	ldr	r5, [pc, #28]	@ (800f900 <_fstat_r+0x20>)
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	4604      	mov	r4, r0
 800f8e8:	4608      	mov	r0, r1
 800f8ea:	4611      	mov	r1, r2
 800f8ec:	602b      	str	r3, [r5, #0]
 800f8ee:	f7f3 ff2f 	bl	8003750 <_fstat>
 800f8f2:	1c43      	adds	r3, r0, #1
 800f8f4:	d102      	bne.n	800f8fc <_fstat_r+0x1c>
 800f8f6:	682b      	ldr	r3, [r5, #0]
 800f8f8:	b103      	cbz	r3, 800f8fc <_fstat_r+0x1c>
 800f8fa:	6023      	str	r3, [r4, #0]
 800f8fc:	bd38      	pop	{r3, r4, r5, pc}
 800f8fe:	bf00      	nop
 800f900:	24003f98 	.word	0x24003f98

0800f904 <_isatty_r>:
 800f904:	b538      	push	{r3, r4, r5, lr}
 800f906:	4d06      	ldr	r5, [pc, #24]	@ (800f920 <_isatty_r+0x1c>)
 800f908:	2300      	movs	r3, #0
 800f90a:	4604      	mov	r4, r0
 800f90c:	4608      	mov	r0, r1
 800f90e:	602b      	str	r3, [r5, #0]
 800f910:	f7f3 ff2e 	bl	8003770 <_isatty>
 800f914:	1c43      	adds	r3, r0, #1
 800f916:	d102      	bne.n	800f91e <_isatty_r+0x1a>
 800f918:	682b      	ldr	r3, [r5, #0]
 800f91a:	b103      	cbz	r3, 800f91e <_isatty_r+0x1a>
 800f91c:	6023      	str	r3, [r4, #0]
 800f91e:	bd38      	pop	{r3, r4, r5, pc}
 800f920:	24003f98 	.word	0x24003f98
 800f924:	00000000 	.word	0x00000000

0800f928 <sin>:
 800f928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f92a:	eeb0 7b40 	vmov.f64	d7, d0
 800f92e:	ee17 3a90 	vmov	r3, s15
 800f932:	4a21      	ldr	r2, [pc, #132]	@ (800f9b8 <sin+0x90>)
 800f934:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f938:	4293      	cmp	r3, r2
 800f93a:	d807      	bhi.n	800f94c <sin+0x24>
 800f93c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800f9b0 <sin+0x88>
 800f940:	2000      	movs	r0, #0
 800f942:	b005      	add	sp, #20
 800f944:	f85d eb04 	ldr.w	lr, [sp], #4
 800f948:	f000 b8a2 	b.w	800fa90 <__kernel_sin>
 800f94c:	4a1b      	ldr	r2, [pc, #108]	@ (800f9bc <sin+0x94>)
 800f94e:	4293      	cmp	r3, r2
 800f950:	d904      	bls.n	800f95c <sin+0x34>
 800f952:	ee30 0b40 	vsub.f64	d0, d0, d0
 800f956:	b005      	add	sp, #20
 800f958:	f85d fb04 	ldr.w	pc, [sp], #4
 800f95c:	4668      	mov	r0, sp
 800f95e:	f000 f8ef 	bl	800fb40 <__ieee754_rem_pio2>
 800f962:	f000 0003 	and.w	r0, r0, #3
 800f966:	2801      	cmp	r0, #1
 800f968:	d00a      	beq.n	800f980 <sin+0x58>
 800f96a:	2802      	cmp	r0, #2
 800f96c:	d00f      	beq.n	800f98e <sin+0x66>
 800f96e:	b9c0      	cbnz	r0, 800f9a2 <sin+0x7a>
 800f970:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f974:	ed9d 0b00 	vldr	d0, [sp]
 800f978:	2001      	movs	r0, #1
 800f97a:	f000 f889 	bl	800fa90 <__kernel_sin>
 800f97e:	e7ea      	b.n	800f956 <sin+0x2e>
 800f980:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f984:	ed9d 0b00 	vldr	d0, [sp]
 800f988:	f000 f81a 	bl	800f9c0 <__kernel_cos>
 800f98c:	e7e3      	b.n	800f956 <sin+0x2e>
 800f98e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f992:	ed9d 0b00 	vldr	d0, [sp]
 800f996:	2001      	movs	r0, #1
 800f998:	f000 f87a 	bl	800fa90 <__kernel_sin>
 800f99c:	eeb1 0b40 	vneg.f64	d0, d0
 800f9a0:	e7d9      	b.n	800f956 <sin+0x2e>
 800f9a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f9a6:	ed9d 0b00 	vldr	d0, [sp]
 800f9aa:	f000 f809 	bl	800f9c0 <__kernel_cos>
 800f9ae:	e7f5      	b.n	800f99c <sin+0x74>
	...
 800f9b8:	3fe921fb 	.word	0x3fe921fb
 800f9bc:	7fefffff 	.word	0x7fefffff

0800f9c0 <__kernel_cos>:
 800f9c0:	eeb0 5b40 	vmov.f64	d5, d0
 800f9c4:	ee15 1a90 	vmov	r1, s11
 800f9c8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800f9cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800f9d0:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800f9d4:	d204      	bcs.n	800f9e0 <__kernel_cos+0x20>
 800f9d6:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800f9da:	ee17 3a90 	vmov	r3, s15
 800f9de:	b343      	cbz	r3, 800fa32 <__kernel_cos+0x72>
 800f9e0:	ee25 6b05 	vmul.f64	d6, d5, d5
 800f9e4:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800f9e8:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800fa58 <__kernel_cos+0x98>
 800f9ec:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800fa60 <__kernel_cos+0xa0>
 800f9f0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f9f4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800fa68 <__kernel_cos+0xa8>
 800f9f8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f9fc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800fa70 <__kernel_cos+0xb0>
 800fa00:	eea7 4b06 	vfma.f64	d4, d7, d6
 800fa04:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800fa78 <__kernel_cos+0xb8>
 800fa08:	4b1f      	ldr	r3, [pc, #124]	@ (800fa88 <__kernel_cos+0xc8>)
 800fa0a:	eea4 7b06 	vfma.f64	d7, d4, d6
 800fa0e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800fa80 <__kernel_cos+0xc0>
 800fa12:	4299      	cmp	r1, r3
 800fa14:	eea7 4b06 	vfma.f64	d4, d7, d6
 800fa18:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800fa1c:	ee24 4b06 	vmul.f64	d4, d4, d6
 800fa20:	ee26 7b07 	vmul.f64	d7, d6, d7
 800fa24:	eea6 1b04 	vfma.f64	d1, d6, d4
 800fa28:	d804      	bhi.n	800fa34 <__kernel_cos+0x74>
 800fa2a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800fa2e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800fa32:	4770      	bx	lr
 800fa34:	4b15      	ldr	r3, [pc, #84]	@ (800fa8c <__kernel_cos+0xcc>)
 800fa36:	4299      	cmp	r1, r3
 800fa38:	d809      	bhi.n	800fa4e <__kernel_cos+0x8e>
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800fa40:	ec43 2b16 	vmov	d6, r2, r3
 800fa44:	ee30 0b46 	vsub.f64	d0, d0, d6
 800fa48:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fa4c:	e7ed      	b.n	800fa2a <__kernel_cos+0x6a>
 800fa4e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800fa52:	e7f7      	b.n	800fa44 <__kernel_cos+0x84>
 800fa54:	f3af 8000 	nop.w
 800fa58:	be8838d4 	.word	0xbe8838d4
 800fa5c:	bda8fae9 	.word	0xbda8fae9
 800fa60:	bdb4b1c4 	.word	0xbdb4b1c4
 800fa64:	3e21ee9e 	.word	0x3e21ee9e
 800fa68:	809c52ad 	.word	0x809c52ad
 800fa6c:	be927e4f 	.word	0xbe927e4f
 800fa70:	19cb1590 	.word	0x19cb1590
 800fa74:	3efa01a0 	.word	0x3efa01a0
 800fa78:	16c15177 	.word	0x16c15177
 800fa7c:	bf56c16c 	.word	0xbf56c16c
 800fa80:	5555554c 	.word	0x5555554c
 800fa84:	3fa55555 	.word	0x3fa55555
 800fa88:	3fd33332 	.word	0x3fd33332
 800fa8c:	3fe90000 	.word	0x3fe90000

0800fa90 <__kernel_sin>:
 800fa90:	ee10 3a90 	vmov	r3, s1
 800fa94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fa98:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800fa9c:	d204      	bcs.n	800faa8 <__kernel_sin+0x18>
 800fa9e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800faa2:	ee17 3a90 	vmov	r3, s15
 800faa6:	b35b      	cbz	r3, 800fb00 <__kernel_sin+0x70>
 800faa8:	ee20 6b00 	vmul.f64	d6, d0, d0
 800faac:	ee20 5b06 	vmul.f64	d5, d0, d6
 800fab0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800fb08 <__kernel_sin+0x78>
 800fab4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800fb10 <__kernel_sin+0x80>
 800fab8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800fabc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800fb18 <__kernel_sin+0x88>
 800fac0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800fac4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800fb20 <__kernel_sin+0x90>
 800fac8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800facc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800fb28 <__kernel_sin+0x98>
 800fad0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800fad4:	b930      	cbnz	r0, 800fae4 <__kernel_sin+0x54>
 800fad6:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800fb30 <__kernel_sin+0xa0>
 800fada:	eea6 4b07 	vfma.f64	d4, d6, d7
 800fade:	eea4 0b05 	vfma.f64	d0, d4, d5
 800fae2:	4770      	bx	lr
 800fae4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800fae8:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800faec:	eea1 7b04 	vfma.f64	d7, d1, d4
 800faf0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800faf4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800fb38 <__kernel_sin+0xa8>
 800faf8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800fafc:	ee30 0b41 	vsub.f64	d0, d0, d1
 800fb00:	4770      	bx	lr
 800fb02:	bf00      	nop
 800fb04:	f3af 8000 	nop.w
 800fb08:	5acfd57c 	.word	0x5acfd57c
 800fb0c:	3de5d93a 	.word	0x3de5d93a
 800fb10:	8a2b9ceb 	.word	0x8a2b9ceb
 800fb14:	be5ae5e6 	.word	0xbe5ae5e6
 800fb18:	57b1fe7d 	.word	0x57b1fe7d
 800fb1c:	3ec71de3 	.word	0x3ec71de3
 800fb20:	19c161d5 	.word	0x19c161d5
 800fb24:	bf2a01a0 	.word	0xbf2a01a0
 800fb28:	1110f8a6 	.word	0x1110f8a6
 800fb2c:	3f811111 	.word	0x3f811111
 800fb30:	55555549 	.word	0x55555549
 800fb34:	bfc55555 	.word	0xbfc55555
 800fb38:	55555549 	.word	0x55555549
 800fb3c:	3fc55555 	.word	0x3fc55555

0800fb40 <__ieee754_rem_pio2>:
 800fb40:	b570      	push	{r4, r5, r6, lr}
 800fb42:	eeb0 7b40 	vmov.f64	d7, d0
 800fb46:	ee17 5a90 	vmov	r5, s15
 800fb4a:	4b99      	ldr	r3, [pc, #612]	@ (800fdb0 <__ieee754_rem_pio2+0x270>)
 800fb4c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800fb50:	429e      	cmp	r6, r3
 800fb52:	b088      	sub	sp, #32
 800fb54:	4604      	mov	r4, r0
 800fb56:	d807      	bhi.n	800fb68 <__ieee754_rem_pio2+0x28>
 800fb58:	2200      	movs	r2, #0
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	ed84 0b00 	vstr	d0, [r4]
 800fb60:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fb64:	2000      	movs	r0, #0
 800fb66:	e01b      	b.n	800fba0 <__ieee754_rem_pio2+0x60>
 800fb68:	4b92      	ldr	r3, [pc, #584]	@ (800fdb4 <__ieee754_rem_pio2+0x274>)
 800fb6a:	429e      	cmp	r6, r3
 800fb6c:	d83b      	bhi.n	800fbe6 <__ieee754_rem_pio2+0xa6>
 800fb6e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800fb72:	2d00      	cmp	r5, #0
 800fb74:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800fd70 <__ieee754_rem_pio2+0x230>
 800fb78:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800fb7c:	dd19      	ble.n	800fbb2 <__ieee754_rem_pio2+0x72>
 800fb7e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800fb82:	429e      	cmp	r6, r3
 800fb84:	d00e      	beq.n	800fba4 <__ieee754_rem_pio2+0x64>
 800fb86:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800fd78 <__ieee754_rem_pio2+0x238>
 800fb8a:	ee37 6b45 	vsub.f64	d6, d7, d5
 800fb8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fb92:	ed84 6b00 	vstr	d6, [r4]
 800fb96:	ee37 7b45 	vsub.f64	d7, d7, d5
 800fb9a:	ed84 7b02 	vstr	d7, [r4, #8]
 800fb9e:	2001      	movs	r0, #1
 800fba0:	b008      	add	sp, #32
 800fba2:	bd70      	pop	{r4, r5, r6, pc}
 800fba4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800fd80 <__ieee754_rem_pio2+0x240>
 800fba8:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800fd88 <__ieee754_rem_pio2+0x248>
 800fbac:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fbb0:	e7eb      	b.n	800fb8a <__ieee754_rem_pio2+0x4a>
 800fbb2:	429e      	cmp	r6, r3
 800fbb4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800fbb8:	d00e      	beq.n	800fbd8 <__ieee754_rem_pio2+0x98>
 800fbba:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800fd78 <__ieee754_rem_pio2+0x238>
 800fbbe:	ee37 6b05 	vadd.f64	d6, d7, d5
 800fbc2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fbc6:	ed84 6b00 	vstr	d6, [r4]
 800fbca:	ee37 7b05 	vadd.f64	d7, d7, d5
 800fbce:	f04f 30ff 	mov.w	r0, #4294967295
 800fbd2:	ed84 7b02 	vstr	d7, [r4, #8]
 800fbd6:	e7e3      	b.n	800fba0 <__ieee754_rem_pio2+0x60>
 800fbd8:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800fd80 <__ieee754_rem_pio2+0x240>
 800fbdc:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800fd88 <__ieee754_rem_pio2+0x248>
 800fbe0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fbe4:	e7eb      	b.n	800fbbe <__ieee754_rem_pio2+0x7e>
 800fbe6:	4b74      	ldr	r3, [pc, #464]	@ (800fdb8 <__ieee754_rem_pio2+0x278>)
 800fbe8:	429e      	cmp	r6, r3
 800fbea:	d870      	bhi.n	800fcce <__ieee754_rem_pio2+0x18e>
 800fbec:	f000 f8ec 	bl	800fdc8 <fabs>
 800fbf0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800fbf4:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800fd90 <__ieee754_rem_pio2+0x250>
 800fbf8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800fbfc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800fc00:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800fc04:	ee17 0a90 	vmov	r0, s15
 800fc08:	eeb1 4b45 	vneg.f64	d4, d5
 800fc0c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800fd70 <__ieee754_rem_pio2+0x230>
 800fc10:	eea5 0b47 	vfms.f64	d0, d5, d7
 800fc14:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800fd78 <__ieee754_rem_pio2+0x238>
 800fc18:	281f      	cmp	r0, #31
 800fc1a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800fc1e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800fc22:	dc05      	bgt.n	800fc30 <__ieee754_rem_pio2+0xf0>
 800fc24:	4b65      	ldr	r3, [pc, #404]	@ (800fdbc <__ieee754_rem_pio2+0x27c>)
 800fc26:	1e42      	subs	r2, r0, #1
 800fc28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc2c:	42b3      	cmp	r3, r6
 800fc2e:	d109      	bne.n	800fc44 <__ieee754_rem_pio2+0x104>
 800fc30:	ee16 3a90 	vmov	r3, s13
 800fc34:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800fc38:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800fc3c:	2b10      	cmp	r3, #16
 800fc3e:	ea4f 5226 	mov.w	r2, r6, asr #20
 800fc42:	dc02      	bgt.n	800fc4a <__ieee754_rem_pio2+0x10a>
 800fc44:	ed84 6b00 	vstr	d6, [r4]
 800fc48:	e01a      	b.n	800fc80 <__ieee754_rem_pio2+0x140>
 800fc4a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800fd80 <__ieee754_rem_pio2+0x240>
 800fc4e:	eeb0 6b40 	vmov.f64	d6, d0
 800fc52:	eea4 6b03 	vfma.f64	d6, d4, d3
 800fc56:	ee30 7b46 	vsub.f64	d7, d0, d6
 800fc5a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800fc5e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800fd88 <__ieee754_rem_pio2+0x248>
 800fc62:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800fc66:	ee36 3b47 	vsub.f64	d3, d6, d7
 800fc6a:	ee13 3a90 	vmov	r3, s7
 800fc6e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800fc72:	1ad3      	subs	r3, r2, r3
 800fc74:	2b31      	cmp	r3, #49	@ 0x31
 800fc76:	dc17      	bgt.n	800fca8 <__ieee754_rem_pio2+0x168>
 800fc78:	eeb0 0b46 	vmov.f64	d0, d6
 800fc7c:	ed84 3b00 	vstr	d3, [r4]
 800fc80:	ed94 6b00 	vldr	d6, [r4]
 800fc84:	2d00      	cmp	r5, #0
 800fc86:	ee30 0b46 	vsub.f64	d0, d0, d6
 800fc8a:	ee30 0b47 	vsub.f64	d0, d0, d7
 800fc8e:	ed84 0b02 	vstr	d0, [r4, #8]
 800fc92:	da85      	bge.n	800fba0 <__ieee754_rem_pio2+0x60>
 800fc94:	eeb1 6b46 	vneg.f64	d6, d6
 800fc98:	eeb1 0b40 	vneg.f64	d0, d0
 800fc9c:	ed84 6b00 	vstr	d6, [r4]
 800fca0:	ed84 0b02 	vstr	d0, [r4, #8]
 800fca4:	4240      	negs	r0, r0
 800fca6:	e77b      	b.n	800fba0 <__ieee754_rem_pio2+0x60>
 800fca8:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800fd98 <__ieee754_rem_pio2+0x258>
 800fcac:	eeb0 0b46 	vmov.f64	d0, d6
 800fcb0:	eea4 0b07 	vfma.f64	d0, d4, d7
 800fcb4:	ee36 6b40 	vsub.f64	d6, d6, d0
 800fcb8:	eea4 6b07 	vfma.f64	d6, d4, d7
 800fcbc:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800fda0 <__ieee754_rem_pio2+0x260>
 800fcc0:	eeb0 7b46 	vmov.f64	d7, d6
 800fcc4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800fcc8:	ee30 6b47 	vsub.f64	d6, d0, d7
 800fccc:	e7ba      	b.n	800fc44 <__ieee754_rem_pio2+0x104>
 800fcce:	4b3c      	ldr	r3, [pc, #240]	@ (800fdc0 <__ieee754_rem_pio2+0x280>)
 800fcd0:	429e      	cmp	r6, r3
 800fcd2:	d906      	bls.n	800fce2 <__ieee754_rem_pio2+0x1a2>
 800fcd4:	ee30 7b40 	vsub.f64	d7, d0, d0
 800fcd8:	ed80 7b02 	vstr	d7, [r0, #8]
 800fcdc:	ed80 7b00 	vstr	d7, [r0]
 800fce0:	e740      	b.n	800fb64 <__ieee754_rem_pio2+0x24>
 800fce2:	ee10 3a10 	vmov	r3, s0
 800fce6:	1532      	asrs	r2, r6, #20
 800fce8:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800fcec:	4618      	mov	r0, r3
 800fcee:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800fcf2:	ec41 0b17 	vmov	d7, r0, r1
 800fcf6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800fcfa:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800fda8 <__ieee754_rem_pio2+0x268>
 800fcfe:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800fd02:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fd06:	ed8d 6b02 	vstr	d6, [sp, #8]
 800fd0a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fd0e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800fd12:	a808      	add	r0, sp, #32
 800fd14:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800fd18:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fd1c:	ed8d 6b04 	vstr	d6, [sp, #16]
 800fd20:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fd24:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fd28:	2103      	movs	r1, #3
 800fd2a:	ed30 7b02 	vldmdb	r0!, {d7}
 800fd2e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fd32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd36:	460b      	mov	r3, r1
 800fd38:	f101 31ff 	add.w	r1, r1, #4294967295
 800fd3c:	d0f5      	beq.n	800fd2a <__ieee754_rem_pio2+0x1ea>
 800fd3e:	4921      	ldr	r1, [pc, #132]	@ (800fdc4 <__ieee754_rem_pio2+0x284>)
 800fd40:	9101      	str	r1, [sp, #4]
 800fd42:	2102      	movs	r1, #2
 800fd44:	9100      	str	r1, [sp, #0]
 800fd46:	a802      	add	r0, sp, #8
 800fd48:	4621      	mov	r1, r4
 800fd4a:	f000 f845 	bl	800fdd8 <__kernel_rem_pio2>
 800fd4e:	2d00      	cmp	r5, #0
 800fd50:	f6bf af26 	bge.w	800fba0 <__ieee754_rem_pio2+0x60>
 800fd54:	ed94 7b00 	vldr	d7, [r4]
 800fd58:	eeb1 7b47 	vneg.f64	d7, d7
 800fd5c:	ed84 7b00 	vstr	d7, [r4]
 800fd60:	ed94 7b02 	vldr	d7, [r4, #8]
 800fd64:	eeb1 7b47 	vneg.f64	d7, d7
 800fd68:	ed84 7b02 	vstr	d7, [r4, #8]
 800fd6c:	e79a      	b.n	800fca4 <__ieee754_rem_pio2+0x164>
 800fd6e:	bf00      	nop
 800fd70:	54400000 	.word	0x54400000
 800fd74:	3ff921fb 	.word	0x3ff921fb
 800fd78:	1a626331 	.word	0x1a626331
 800fd7c:	3dd0b461 	.word	0x3dd0b461
 800fd80:	1a600000 	.word	0x1a600000
 800fd84:	3dd0b461 	.word	0x3dd0b461
 800fd88:	2e037073 	.word	0x2e037073
 800fd8c:	3ba3198a 	.word	0x3ba3198a
 800fd90:	6dc9c883 	.word	0x6dc9c883
 800fd94:	3fe45f30 	.word	0x3fe45f30
 800fd98:	2e000000 	.word	0x2e000000
 800fd9c:	3ba3198a 	.word	0x3ba3198a
 800fda0:	252049c1 	.word	0x252049c1
 800fda4:	397b839a 	.word	0x397b839a
 800fda8:	00000000 	.word	0x00000000
 800fdac:	41700000 	.word	0x41700000
 800fdb0:	3fe921fb 	.word	0x3fe921fb
 800fdb4:	4002d97b 	.word	0x4002d97b
 800fdb8:	413921fb 	.word	0x413921fb
 800fdbc:	08010880 	.word	0x08010880
 800fdc0:	7fefffff 	.word	0x7fefffff
 800fdc4:	08010900 	.word	0x08010900

0800fdc8 <fabs>:
 800fdc8:	ec51 0b10 	vmov	r0, r1, d0
 800fdcc:	4602      	mov	r2, r0
 800fdce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fdd2:	ec43 2b10 	vmov	d0, r2, r3
 800fdd6:	4770      	bx	lr

0800fdd8 <__kernel_rem_pio2>:
 800fdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fddc:	ed2d 8b06 	vpush	{d8-d10}
 800fde0:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800fde4:	469b      	mov	fp, r3
 800fde6:	9001      	str	r0, [sp, #4]
 800fde8:	4bbb      	ldr	r3, [pc, #748]	@ (80100d8 <__kernel_rem_pio2+0x300>)
 800fdea:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800fdec:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800fdf0:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800fdf4:	f112 0f14 	cmn.w	r2, #20
 800fdf8:	bfa8      	it	ge
 800fdfa:	1ed3      	subge	r3, r2, #3
 800fdfc:	f10b 3aff 	add.w	sl, fp, #4294967295
 800fe00:	bfb8      	it	lt
 800fe02:	2300      	movlt	r3, #0
 800fe04:	f06f 0517 	mvn.w	r5, #23
 800fe08:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 80100c0 <__kernel_rem_pio2+0x2e8>
 800fe0c:	bfa4      	itt	ge
 800fe0e:	2018      	movge	r0, #24
 800fe10:	fb93 f3f0 	sdivge	r3, r3, r0
 800fe14:	fb03 5505 	mla	r5, r3, r5, r5
 800fe18:	eba3 040a 	sub.w	r4, r3, sl
 800fe1c:	4415      	add	r5, r2
 800fe1e:	460f      	mov	r7, r1
 800fe20:	eb09 060a 	add.w	r6, r9, sl
 800fe24:	a81a      	add	r0, sp, #104	@ 0x68
 800fe26:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	42b2      	cmp	r2, r6
 800fe2e:	dd0e      	ble.n	800fe4e <__kernel_rem_pio2+0x76>
 800fe30:	aa1a      	add	r2, sp, #104	@ 0x68
 800fe32:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800fe36:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800fe3a:	2600      	movs	r6, #0
 800fe3c:	454e      	cmp	r6, r9
 800fe3e:	dc25      	bgt.n	800fe8c <__kernel_rem_pio2+0xb4>
 800fe40:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 80100c0 <__kernel_rem_pio2+0x2e8>
 800fe44:	f8dd c004 	ldr.w	ip, [sp, #4]
 800fe48:	4614      	mov	r4, r2
 800fe4a:	2000      	movs	r0, #0
 800fe4c:	e015      	b.n	800fe7a <__kernel_rem_pio2+0xa2>
 800fe4e:	42d4      	cmn	r4, r2
 800fe50:	d409      	bmi.n	800fe66 <__kernel_rem_pio2+0x8e>
 800fe52:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800fe56:	ee07 1a90 	vmov	s15, r1
 800fe5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800fe5e:	eca0 7b02 	vstmia	r0!, {d7}
 800fe62:	3201      	adds	r2, #1
 800fe64:	e7e2      	b.n	800fe2c <__kernel_rem_pio2+0x54>
 800fe66:	eeb0 7b46 	vmov.f64	d7, d6
 800fe6a:	e7f8      	b.n	800fe5e <__kernel_rem_pio2+0x86>
 800fe6c:	ecbc 5b02 	vldmia	ip!, {d5}
 800fe70:	ed94 6b00 	vldr	d6, [r4]
 800fe74:	3001      	adds	r0, #1
 800fe76:	eea5 7b06 	vfma.f64	d7, d5, d6
 800fe7a:	4550      	cmp	r0, sl
 800fe7c:	f1a4 0408 	sub.w	r4, r4, #8
 800fe80:	ddf4      	ble.n	800fe6c <__kernel_rem_pio2+0x94>
 800fe82:	ecae 7b02 	vstmia	lr!, {d7}
 800fe86:	3601      	adds	r6, #1
 800fe88:	3208      	adds	r2, #8
 800fe8a:	e7d7      	b.n	800fe3c <__kernel_rem_pio2+0x64>
 800fe8c:	aa06      	add	r2, sp, #24
 800fe8e:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 80100c8 <__kernel_rem_pio2+0x2f0>
 800fe92:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 80100d0 <__kernel_rem_pio2+0x2f8>
 800fe96:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800fe9a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800fe9e:	9203      	str	r2, [sp, #12]
 800fea0:	9302      	str	r3, [sp, #8]
 800fea2:	464c      	mov	r4, r9
 800fea4:	00e3      	lsls	r3, r4, #3
 800fea6:	9304      	str	r3, [sp, #16]
 800fea8:	ab92      	add	r3, sp, #584	@ 0x248
 800feaa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800feae:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800feb2:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800feb4:	ab06      	add	r3, sp, #24
 800feb6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800feba:	461e      	mov	r6, r3
 800febc:	4620      	mov	r0, r4
 800febe:	2800      	cmp	r0, #0
 800fec0:	f1a2 0208 	sub.w	r2, r2, #8
 800fec4:	dc4a      	bgt.n	800ff5c <__kernel_rem_pio2+0x184>
 800fec6:	4628      	mov	r0, r5
 800fec8:	9305      	str	r3, [sp, #20]
 800feca:	f000 fa01 	bl	80102d0 <scalbn>
 800fece:	eeb0 8b40 	vmov.f64	d8, d0
 800fed2:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800fed6:	ee28 0b00 	vmul.f64	d0, d8, d0
 800feda:	f000 fa79 	bl	80103d0 <floor>
 800fede:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800fee2:	eea0 8b47 	vfms.f64	d8, d0, d7
 800fee6:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800feea:	2d00      	cmp	r5, #0
 800feec:	ee17 8a90 	vmov	r8, s15
 800fef0:	9b05      	ldr	r3, [sp, #20]
 800fef2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800fef6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800fefa:	dd41      	ble.n	800ff80 <__kernel_rem_pio2+0x1a8>
 800fefc:	1e60      	subs	r0, r4, #1
 800fefe:	aa06      	add	r2, sp, #24
 800ff00:	f1c5 0c18 	rsb	ip, r5, #24
 800ff04:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800ff08:	fa46 f20c 	asr.w	r2, r6, ip
 800ff0c:	4490      	add	r8, r2
 800ff0e:	fa02 f20c 	lsl.w	r2, r2, ip
 800ff12:	1ab6      	subs	r6, r6, r2
 800ff14:	aa06      	add	r2, sp, #24
 800ff16:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800ff1a:	f1c5 0217 	rsb	r2, r5, #23
 800ff1e:	4116      	asrs	r6, r2
 800ff20:	2e00      	cmp	r6, #0
 800ff22:	dd3c      	ble.n	800ff9e <__kernel_rem_pio2+0x1c6>
 800ff24:	f04f 0c00 	mov.w	ip, #0
 800ff28:	f108 0801 	add.w	r8, r8, #1
 800ff2c:	4660      	mov	r0, ip
 800ff2e:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800ff32:	4564      	cmp	r4, ip
 800ff34:	dc66      	bgt.n	8010004 <__kernel_rem_pio2+0x22c>
 800ff36:	2d00      	cmp	r5, #0
 800ff38:	dd03      	ble.n	800ff42 <__kernel_rem_pio2+0x16a>
 800ff3a:	2d01      	cmp	r5, #1
 800ff3c:	d072      	beq.n	8010024 <__kernel_rem_pio2+0x24c>
 800ff3e:	2d02      	cmp	r5, #2
 800ff40:	d07a      	beq.n	8010038 <__kernel_rem_pio2+0x260>
 800ff42:	2e02      	cmp	r6, #2
 800ff44:	d12b      	bne.n	800ff9e <__kernel_rem_pio2+0x1c6>
 800ff46:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ff4a:	ee30 8b48 	vsub.f64	d8, d0, d8
 800ff4e:	b330      	cbz	r0, 800ff9e <__kernel_rem_pio2+0x1c6>
 800ff50:	4628      	mov	r0, r5
 800ff52:	f000 f9bd 	bl	80102d0 <scalbn>
 800ff56:	ee38 8b40 	vsub.f64	d8, d8, d0
 800ff5a:	e020      	b.n	800ff9e <__kernel_rem_pio2+0x1c6>
 800ff5c:	ee20 7b09 	vmul.f64	d7, d0, d9
 800ff60:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ff64:	3801      	subs	r0, #1
 800ff66:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800ff6a:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800ff6e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ff72:	eca6 0a01 	vstmia	r6!, {s0}
 800ff76:	ed92 0b00 	vldr	d0, [r2]
 800ff7a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800ff7e:	e79e      	b.n	800febe <__kernel_rem_pio2+0xe6>
 800ff80:	d105      	bne.n	800ff8e <__kernel_rem_pio2+0x1b6>
 800ff82:	1e62      	subs	r2, r4, #1
 800ff84:	a906      	add	r1, sp, #24
 800ff86:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800ff8a:	15f6      	asrs	r6, r6, #23
 800ff8c:	e7c8      	b.n	800ff20 <__kernel_rem_pio2+0x148>
 800ff8e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800ff92:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ff96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff9a:	da31      	bge.n	8010000 <__kernel_rem_pio2+0x228>
 800ff9c:	2600      	movs	r6, #0
 800ff9e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ffa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffa6:	f040 809b 	bne.w	80100e0 <__kernel_rem_pio2+0x308>
 800ffaa:	1e62      	subs	r2, r4, #1
 800ffac:	2000      	movs	r0, #0
 800ffae:	454a      	cmp	r2, r9
 800ffb0:	da49      	bge.n	8010046 <__kernel_rem_pio2+0x26e>
 800ffb2:	2800      	cmp	r0, #0
 800ffb4:	d062      	beq.n	801007c <__kernel_rem_pio2+0x2a4>
 800ffb6:	3c01      	subs	r4, #1
 800ffb8:	ab06      	add	r3, sp, #24
 800ffba:	3d18      	subs	r5, #24
 800ffbc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d0f8      	beq.n	800ffb6 <__kernel_rem_pio2+0x1de>
 800ffc4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ffc8:	4628      	mov	r0, r5
 800ffca:	f000 f981 	bl	80102d0 <scalbn>
 800ffce:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 80100c8 <__kernel_rem_pio2+0x2f0>
 800ffd2:	1c62      	adds	r2, r4, #1
 800ffd4:	a96a      	add	r1, sp, #424	@ 0x1a8
 800ffd6:	00d3      	lsls	r3, r2, #3
 800ffd8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ffdc:	4622      	mov	r2, r4
 800ffde:	2a00      	cmp	r2, #0
 800ffe0:	f280 80a8 	bge.w	8010134 <__kernel_rem_pio2+0x35c>
 800ffe4:	4622      	mov	r2, r4
 800ffe6:	2a00      	cmp	r2, #0
 800ffe8:	f2c0 80c6 	blt.w	8010178 <__kernel_rem_pio2+0x3a0>
 800ffec:	a96a      	add	r1, sp, #424	@ 0x1a8
 800ffee:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800fff2:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 80100c0 <__kernel_rem_pio2+0x2e8>
 800fff6:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 80100dc <__kernel_rem_pio2+0x304>
 800fffa:	2000      	movs	r0, #0
 800fffc:	1aa1      	subs	r1, r4, r2
 800fffe:	e0b0      	b.n	8010162 <__kernel_rem_pio2+0x38a>
 8010000:	2602      	movs	r6, #2
 8010002:	e78f      	b.n	800ff24 <__kernel_rem_pio2+0x14c>
 8010004:	f853 2b04 	ldr.w	r2, [r3], #4
 8010008:	b948      	cbnz	r0, 801001e <__kernel_rem_pio2+0x246>
 801000a:	b122      	cbz	r2, 8010016 <__kernel_rem_pio2+0x23e>
 801000c:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8010010:	f843 2c04 	str.w	r2, [r3, #-4]
 8010014:	2201      	movs	r2, #1
 8010016:	f10c 0c01 	add.w	ip, ip, #1
 801001a:	4610      	mov	r0, r2
 801001c:	e789      	b.n	800ff32 <__kernel_rem_pio2+0x15a>
 801001e:	ebae 0202 	sub.w	r2, lr, r2
 8010022:	e7f5      	b.n	8010010 <__kernel_rem_pio2+0x238>
 8010024:	1e62      	subs	r2, r4, #1
 8010026:	ab06      	add	r3, sp, #24
 8010028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801002c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010030:	a906      	add	r1, sp, #24
 8010032:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010036:	e784      	b.n	800ff42 <__kernel_rem_pio2+0x16a>
 8010038:	1e62      	subs	r2, r4, #1
 801003a:	ab06      	add	r3, sp, #24
 801003c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010040:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010044:	e7f4      	b.n	8010030 <__kernel_rem_pio2+0x258>
 8010046:	ab06      	add	r3, sp, #24
 8010048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801004c:	3a01      	subs	r2, #1
 801004e:	4318      	orrs	r0, r3
 8010050:	e7ad      	b.n	800ffae <__kernel_rem_pio2+0x1d6>
 8010052:	3301      	adds	r3, #1
 8010054:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8010058:	2800      	cmp	r0, #0
 801005a:	d0fa      	beq.n	8010052 <__kernel_rem_pio2+0x27a>
 801005c:	9a04      	ldr	r2, [sp, #16]
 801005e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 8010062:	446a      	add	r2, sp
 8010064:	eb04 000b 	add.w	r0, r4, fp
 8010068:	a91a      	add	r1, sp, #104	@ 0x68
 801006a:	1c66      	adds	r6, r4, #1
 801006c:	3a98      	subs	r2, #152	@ 0x98
 801006e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8010072:	4423      	add	r3, r4
 8010074:	42b3      	cmp	r3, r6
 8010076:	da04      	bge.n	8010082 <__kernel_rem_pio2+0x2aa>
 8010078:	461c      	mov	r4, r3
 801007a:	e713      	b.n	800fea4 <__kernel_rem_pio2+0xcc>
 801007c:	9a03      	ldr	r2, [sp, #12]
 801007e:	2301      	movs	r3, #1
 8010080:	e7e8      	b.n	8010054 <__kernel_rem_pio2+0x27c>
 8010082:	9902      	ldr	r1, [sp, #8]
 8010084:	f8dd c004 	ldr.w	ip, [sp, #4]
 8010088:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 801008c:	9104      	str	r1, [sp, #16]
 801008e:	ee07 1a90 	vmov	s15, r1
 8010092:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010096:	2400      	movs	r4, #0
 8010098:	eca0 7b02 	vstmia	r0!, {d7}
 801009c:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80100c0 <__kernel_rem_pio2+0x2e8>
 80100a0:	4686      	mov	lr, r0
 80100a2:	4554      	cmp	r4, sl
 80100a4:	dd03      	ble.n	80100ae <__kernel_rem_pio2+0x2d6>
 80100a6:	eca2 7b02 	vstmia	r2!, {d7}
 80100aa:	3601      	adds	r6, #1
 80100ac:	e7e2      	b.n	8010074 <__kernel_rem_pio2+0x29c>
 80100ae:	ecbc 5b02 	vldmia	ip!, {d5}
 80100b2:	ed3e 6b02 	vldmdb	lr!, {d6}
 80100b6:	3401      	adds	r4, #1
 80100b8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80100bc:	e7f1      	b.n	80100a2 <__kernel_rem_pio2+0x2ca>
 80100be:	bf00      	nop
	...
 80100cc:	3e700000 	.word	0x3e700000
 80100d0:	00000000 	.word	0x00000000
 80100d4:	41700000 	.word	0x41700000
 80100d8:	08010a48 	.word	0x08010a48
 80100dc:	08010a08 	.word	0x08010a08
 80100e0:	4268      	negs	r0, r5
 80100e2:	eeb0 0b48 	vmov.f64	d0, d8
 80100e6:	f000 f8f3 	bl	80102d0 <scalbn>
 80100ea:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 80102b8 <__kernel_rem_pio2+0x4e0>
 80100ee:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80100f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100f6:	db17      	blt.n	8010128 <__kernel_rem_pio2+0x350>
 80100f8:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 80102c0 <__kernel_rem_pio2+0x4e8>
 80100fc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010100:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010104:	aa06      	add	r2, sp, #24
 8010106:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801010a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801010e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010112:	3518      	adds	r5, #24
 8010114:	ee10 3a10 	vmov	r3, s0
 8010118:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801011c:	ee17 3a10 	vmov	r3, s14
 8010120:	3401      	adds	r4, #1
 8010122:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010126:	e74d      	b.n	800ffc4 <__kernel_rem_pio2+0x1ec>
 8010128:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801012c:	aa06      	add	r2, sp, #24
 801012e:	ee10 3a10 	vmov	r3, s0
 8010132:	e7f6      	b.n	8010122 <__kernel_rem_pio2+0x34a>
 8010134:	a806      	add	r0, sp, #24
 8010136:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801013a:	9001      	str	r0, [sp, #4]
 801013c:	ee07 0a90 	vmov	s15, r0
 8010140:	3a01      	subs	r2, #1
 8010142:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010146:	ee27 7b00 	vmul.f64	d7, d7, d0
 801014a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801014e:	ed21 7b02 	vstmdb	r1!, {d7}
 8010152:	e744      	b.n	800ffde <__kernel_rem_pio2+0x206>
 8010154:	ecbc 5b02 	vldmia	ip!, {d5}
 8010158:	ecb5 6b02 	vldmia	r5!, {d6}
 801015c:	3001      	adds	r0, #1
 801015e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010162:	4548      	cmp	r0, r9
 8010164:	dc01      	bgt.n	801016a <__kernel_rem_pio2+0x392>
 8010166:	4281      	cmp	r1, r0
 8010168:	daf4      	bge.n	8010154 <__kernel_rem_pio2+0x37c>
 801016a:	a842      	add	r0, sp, #264	@ 0x108
 801016c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010170:	ed81 7b00 	vstr	d7, [r1]
 8010174:	3a01      	subs	r2, #1
 8010176:	e736      	b.n	800ffe6 <__kernel_rem_pio2+0x20e>
 8010178:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801017a:	2a02      	cmp	r2, #2
 801017c:	dc0a      	bgt.n	8010194 <__kernel_rem_pio2+0x3bc>
 801017e:	2a00      	cmp	r2, #0
 8010180:	dc2d      	bgt.n	80101de <__kernel_rem_pio2+0x406>
 8010182:	d046      	beq.n	8010212 <__kernel_rem_pio2+0x43a>
 8010184:	f008 0007 	and.w	r0, r8, #7
 8010188:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 801018c:	ecbd 8b06 	vpop	{d8-d10}
 8010190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010194:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8010196:	2a03      	cmp	r2, #3
 8010198:	d1f4      	bne.n	8010184 <__kernel_rem_pio2+0x3ac>
 801019a:	a942      	add	r1, sp, #264	@ 0x108
 801019c:	f1a3 0208 	sub.w	r2, r3, #8
 80101a0:	440a      	add	r2, r1
 80101a2:	4611      	mov	r1, r2
 80101a4:	4620      	mov	r0, r4
 80101a6:	2800      	cmp	r0, #0
 80101a8:	f1a1 0108 	sub.w	r1, r1, #8
 80101ac:	dc52      	bgt.n	8010254 <__kernel_rem_pio2+0x47c>
 80101ae:	4621      	mov	r1, r4
 80101b0:	2901      	cmp	r1, #1
 80101b2:	f1a2 0208 	sub.w	r2, r2, #8
 80101b6:	dc5d      	bgt.n	8010274 <__kernel_rem_pio2+0x49c>
 80101b8:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 80102c8 <__kernel_rem_pio2+0x4f0>
 80101bc:	aa42      	add	r2, sp, #264	@ 0x108
 80101be:	4413      	add	r3, r2
 80101c0:	2c01      	cmp	r4, #1
 80101c2:	dc67      	bgt.n	8010294 <__kernel_rem_pio2+0x4bc>
 80101c4:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 80101c8:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 80101cc:	2e00      	cmp	r6, #0
 80101ce:	d167      	bne.n	80102a0 <__kernel_rem_pio2+0x4c8>
 80101d0:	ed87 5b00 	vstr	d5, [r7]
 80101d4:	ed87 6b02 	vstr	d6, [r7, #8]
 80101d8:	ed87 7b04 	vstr	d7, [r7, #16]
 80101dc:	e7d2      	b.n	8010184 <__kernel_rem_pio2+0x3ac>
 80101de:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 80102c8 <__kernel_rem_pio2+0x4f0>
 80101e2:	aa42      	add	r2, sp, #264	@ 0x108
 80101e4:	4413      	add	r3, r2
 80101e6:	4622      	mov	r2, r4
 80101e8:	2a00      	cmp	r2, #0
 80101ea:	da24      	bge.n	8010236 <__kernel_rem_pio2+0x45e>
 80101ec:	b34e      	cbz	r6, 8010242 <__kernel_rem_pio2+0x46a>
 80101ee:	eeb1 7b46 	vneg.f64	d7, d6
 80101f2:	ed87 7b00 	vstr	d7, [r7]
 80101f6:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 80101fa:	aa44      	add	r2, sp, #272	@ 0x110
 80101fc:	2301      	movs	r3, #1
 80101fe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010202:	429c      	cmp	r4, r3
 8010204:	da20      	bge.n	8010248 <__kernel_rem_pio2+0x470>
 8010206:	b10e      	cbz	r6, 801020c <__kernel_rem_pio2+0x434>
 8010208:	eeb1 7b47 	vneg.f64	d7, d7
 801020c:	ed87 7b02 	vstr	d7, [r7, #8]
 8010210:	e7b8      	b.n	8010184 <__kernel_rem_pio2+0x3ac>
 8010212:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 80102c8 <__kernel_rem_pio2+0x4f0>
 8010216:	aa42      	add	r2, sp, #264	@ 0x108
 8010218:	4413      	add	r3, r2
 801021a:	2c00      	cmp	r4, #0
 801021c:	da05      	bge.n	801022a <__kernel_rem_pio2+0x452>
 801021e:	b10e      	cbz	r6, 8010224 <__kernel_rem_pio2+0x44c>
 8010220:	eeb1 7b47 	vneg.f64	d7, d7
 8010224:	ed87 7b00 	vstr	d7, [r7]
 8010228:	e7ac      	b.n	8010184 <__kernel_rem_pio2+0x3ac>
 801022a:	ed33 6b02 	vldmdb	r3!, {d6}
 801022e:	3c01      	subs	r4, #1
 8010230:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010234:	e7f1      	b.n	801021a <__kernel_rem_pio2+0x442>
 8010236:	ed33 7b02 	vldmdb	r3!, {d7}
 801023a:	3a01      	subs	r2, #1
 801023c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010240:	e7d2      	b.n	80101e8 <__kernel_rem_pio2+0x410>
 8010242:	eeb0 7b46 	vmov.f64	d7, d6
 8010246:	e7d4      	b.n	80101f2 <__kernel_rem_pio2+0x41a>
 8010248:	ecb2 6b02 	vldmia	r2!, {d6}
 801024c:	3301      	adds	r3, #1
 801024e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010252:	e7d6      	b.n	8010202 <__kernel_rem_pio2+0x42a>
 8010254:	ed91 7b00 	vldr	d7, [r1]
 8010258:	ed91 5b02 	vldr	d5, [r1, #8]
 801025c:	3801      	subs	r0, #1
 801025e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010262:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010266:	ed81 6b00 	vstr	d6, [r1]
 801026a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801026e:	ed81 7b02 	vstr	d7, [r1, #8]
 8010272:	e798      	b.n	80101a6 <__kernel_rem_pio2+0x3ce>
 8010274:	ed92 7b00 	vldr	d7, [r2]
 8010278:	ed92 5b02 	vldr	d5, [r2, #8]
 801027c:	3901      	subs	r1, #1
 801027e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010282:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010286:	ed82 6b00 	vstr	d6, [r2]
 801028a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801028e:	ed82 7b02 	vstr	d7, [r2, #8]
 8010292:	e78d      	b.n	80101b0 <__kernel_rem_pio2+0x3d8>
 8010294:	ed33 6b02 	vldmdb	r3!, {d6}
 8010298:	3c01      	subs	r4, #1
 801029a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801029e:	e78f      	b.n	80101c0 <__kernel_rem_pio2+0x3e8>
 80102a0:	eeb1 5b45 	vneg.f64	d5, d5
 80102a4:	eeb1 6b46 	vneg.f64	d6, d6
 80102a8:	ed87 5b00 	vstr	d5, [r7]
 80102ac:	eeb1 7b47 	vneg.f64	d7, d7
 80102b0:	ed87 6b02 	vstr	d6, [r7, #8]
 80102b4:	e790      	b.n	80101d8 <__kernel_rem_pio2+0x400>
 80102b6:	bf00      	nop
 80102b8:	00000000 	.word	0x00000000
 80102bc:	41700000 	.word	0x41700000
 80102c0:	00000000 	.word	0x00000000
 80102c4:	3e700000 	.word	0x3e700000
	...

080102d0 <scalbn>:
 80102d0:	ee10 1a90 	vmov	r1, s1
 80102d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80102d8:	b98b      	cbnz	r3, 80102fe <scalbn+0x2e>
 80102da:	ee10 3a10 	vmov	r3, s0
 80102de:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80102e2:	4319      	orrs	r1, r3
 80102e4:	d00a      	beq.n	80102fc <scalbn+0x2c>
 80102e6:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8010398 <scalbn+0xc8>
 80102ea:	4b37      	ldr	r3, [pc, #220]	@ (80103c8 <scalbn+0xf8>)
 80102ec:	ee20 0b07 	vmul.f64	d0, d0, d7
 80102f0:	4298      	cmp	r0, r3
 80102f2:	da0b      	bge.n	801030c <scalbn+0x3c>
 80102f4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80103a0 <scalbn+0xd0>
 80102f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80102fc:	4770      	bx	lr
 80102fe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010302:	4293      	cmp	r3, r2
 8010304:	d107      	bne.n	8010316 <scalbn+0x46>
 8010306:	ee30 0b00 	vadd.f64	d0, d0, d0
 801030a:	4770      	bx	lr
 801030c:	ee10 1a90 	vmov	r1, s1
 8010310:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010314:	3b36      	subs	r3, #54	@ 0x36
 8010316:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801031a:	4290      	cmp	r0, r2
 801031c:	dd0d      	ble.n	801033a <scalbn+0x6a>
 801031e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80103a8 <scalbn+0xd8>
 8010322:	ee10 3a90 	vmov	r3, s1
 8010326:	eeb0 6b47 	vmov.f64	d6, d7
 801032a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 80103b0 <scalbn+0xe0>
 801032e:	2b00      	cmp	r3, #0
 8010330:	fe27 7b05 	vselge.f64	d7, d7, d5
 8010334:	ee27 0b06 	vmul.f64	d0, d7, d6
 8010338:	4770      	bx	lr
 801033a:	4418      	add	r0, r3
 801033c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8010340:	4298      	cmp	r0, r3
 8010342:	dcec      	bgt.n	801031e <scalbn+0x4e>
 8010344:	2800      	cmp	r0, #0
 8010346:	dd0a      	ble.n	801035e <scalbn+0x8e>
 8010348:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801034c:	ec53 2b10 	vmov	r2, r3, d0
 8010350:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8010354:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8010358:	ec43 2b10 	vmov	d0, r2, r3
 801035c:	4770      	bx	lr
 801035e:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 8010362:	da09      	bge.n	8010378 <scalbn+0xa8>
 8010364:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 80103a0 <scalbn+0xd0>
 8010368:	ee10 3a90 	vmov	r3, s1
 801036c:	eeb0 6b47 	vmov.f64	d6, d7
 8010370:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 80103b8 <scalbn+0xe8>
 8010374:	2b00      	cmp	r3, #0
 8010376:	e7db      	b.n	8010330 <scalbn+0x60>
 8010378:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801037c:	ec53 2b10 	vmov	r2, r3, d0
 8010380:	3036      	adds	r0, #54	@ 0x36
 8010382:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8010386:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801038a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80103c0 <scalbn+0xf0>
 801038e:	ec43 2b10 	vmov	d0, r2, r3
 8010392:	e7b1      	b.n	80102f8 <scalbn+0x28>
 8010394:	f3af 8000 	nop.w
 8010398:	00000000 	.word	0x00000000
 801039c:	43500000 	.word	0x43500000
 80103a0:	c2f8f359 	.word	0xc2f8f359
 80103a4:	01a56e1f 	.word	0x01a56e1f
 80103a8:	8800759c 	.word	0x8800759c
 80103ac:	7e37e43c 	.word	0x7e37e43c
 80103b0:	8800759c 	.word	0x8800759c
 80103b4:	fe37e43c 	.word	0xfe37e43c
 80103b8:	c2f8f359 	.word	0xc2f8f359
 80103bc:	81a56e1f 	.word	0x81a56e1f
 80103c0:	00000000 	.word	0x00000000
 80103c4:	3c900000 	.word	0x3c900000
 80103c8:	ffff3cb0 	.word	0xffff3cb0
 80103cc:	00000000 	.word	0x00000000

080103d0 <floor>:
 80103d0:	ee10 3a90 	vmov	r3, s1
 80103d4:	f3c3 500a 	ubfx	r0, r3, #20, #11
 80103d8:	ee10 2a10 	vmov	r2, s0
 80103dc:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 80103e0:	2913      	cmp	r1, #19
 80103e2:	b530      	push	{r4, r5, lr}
 80103e4:	4615      	mov	r5, r2
 80103e6:	dc33      	bgt.n	8010450 <floor+0x80>
 80103e8:	2900      	cmp	r1, #0
 80103ea:	da18      	bge.n	801041e <floor+0x4e>
 80103ec:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 80104b0 <floor+0xe0>
 80103f0:	ee30 0b07 	vadd.f64	d0, d0, d7
 80103f4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80103f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103fc:	dd0a      	ble.n	8010414 <floor+0x44>
 80103fe:	2b00      	cmp	r3, #0
 8010400:	da50      	bge.n	80104a4 <floor+0xd4>
 8010402:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010406:	4313      	orrs	r3, r2
 8010408:	2200      	movs	r2, #0
 801040a:	4293      	cmp	r3, r2
 801040c:	4b2a      	ldr	r3, [pc, #168]	@ (80104b8 <floor+0xe8>)
 801040e:	bf08      	it	eq
 8010410:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8010414:	4619      	mov	r1, r3
 8010416:	4610      	mov	r0, r2
 8010418:	ec41 0b10 	vmov	d0, r0, r1
 801041c:	e01f      	b.n	801045e <floor+0x8e>
 801041e:	4827      	ldr	r0, [pc, #156]	@ (80104bc <floor+0xec>)
 8010420:	4108      	asrs	r0, r1
 8010422:	ea03 0400 	and.w	r4, r3, r0
 8010426:	4314      	orrs	r4, r2
 8010428:	d019      	beq.n	801045e <floor+0x8e>
 801042a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80104b0 <floor+0xe0>
 801042e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010432:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801043a:	ddeb      	ble.n	8010414 <floor+0x44>
 801043c:	2b00      	cmp	r3, #0
 801043e:	bfbe      	ittt	lt
 8010440:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8010444:	410a      	asrlt	r2, r1
 8010446:	189b      	addlt	r3, r3, r2
 8010448:	ea23 0300 	bic.w	r3, r3, r0
 801044c:	2200      	movs	r2, #0
 801044e:	e7e1      	b.n	8010414 <floor+0x44>
 8010450:	2933      	cmp	r1, #51	@ 0x33
 8010452:	dd05      	ble.n	8010460 <floor+0x90>
 8010454:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8010458:	d101      	bne.n	801045e <floor+0x8e>
 801045a:	ee30 0b00 	vadd.f64	d0, d0, d0
 801045e:	bd30      	pop	{r4, r5, pc}
 8010460:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8010464:	f04f 30ff 	mov.w	r0, #4294967295
 8010468:	40e0      	lsrs	r0, r4
 801046a:	4210      	tst	r0, r2
 801046c:	d0f7      	beq.n	801045e <floor+0x8e>
 801046e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80104b0 <floor+0xe0>
 8010472:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010476:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801047a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801047e:	ddc9      	ble.n	8010414 <floor+0x44>
 8010480:	2b00      	cmp	r3, #0
 8010482:	da02      	bge.n	801048a <floor+0xba>
 8010484:	2914      	cmp	r1, #20
 8010486:	d103      	bne.n	8010490 <floor+0xc0>
 8010488:	3301      	adds	r3, #1
 801048a:	ea22 0200 	bic.w	r2, r2, r0
 801048e:	e7c1      	b.n	8010414 <floor+0x44>
 8010490:	2401      	movs	r4, #1
 8010492:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8010496:	fa04 f101 	lsl.w	r1, r4, r1
 801049a:	440a      	add	r2, r1
 801049c:	42aa      	cmp	r2, r5
 801049e:	bf38      	it	cc
 80104a0:	191b      	addcc	r3, r3, r4
 80104a2:	e7f2      	b.n	801048a <floor+0xba>
 80104a4:	2200      	movs	r2, #0
 80104a6:	4613      	mov	r3, r2
 80104a8:	e7b4      	b.n	8010414 <floor+0x44>
 80104aa:	bf00      	nop
 80104ac:	f3af 8000 	nop.w
 80104b0:	8800759c 	.word	0x8800759c
 80104b4:	7e37e43c 	.word	0x7e37e43c
 80104b8:	bff00000 	.word	0xbff00000
 80104bc:	000fffff 	.word	0x000fffff

080104c0 <_init>:
 80104c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104c2:	bf00      	nop
 80104c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104c6:	bc08      	pop	{r3}
 80104c8:	469e      	mov	lr, r3
 80104ca:	4770      	bx	lr

080104cc <_fini>:
 80104cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ce:	bf00      	nop
 80104d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104d2:	bc08      	pop	{r3}
 80104d4:	469e      	mov	lr, r3
 80104d6:	4770      	bx	lr
