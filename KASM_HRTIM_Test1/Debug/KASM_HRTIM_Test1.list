
KASM_HRTIM_Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eef0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  0800f190  0800f190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f750  0800f750  00010750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f758  0800f758  00010758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f75c  0800f75c  0001075c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  0800f760  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000025ac  240001e0  0800f93c  000111e0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2400278c  0800f93c  0001178c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000111dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001cd12  00000000  00000000  0001120a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002d9b  00000000  00000000  0002df1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001760  00000000  00000000  00030cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001273  00000000  00000000  00032418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a43c  00000000  00000000  0003368b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001dceb  00000000  00000000  0006dac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d768  00000000  00000000  0008b7b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00208f1a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007700  00000000  00000000  00208f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004e  00000000  00000000  00210660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f178 	.word	0x0800f178

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800f178 	.word	0x0800f178

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <read_TIM1>:
//char message[64] = {'\0'};

//Counter for UART Output in Time-Scale
	static long int period_ticks = 0;
	char buffer[64];
	float read_TIM1(){
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
		float time = 0;
 8000686:	f04f 0300 	mov.w	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
		time = period_ticks * PERIOD_SCALE + TIM1->CNT * TICK_SCALE;
 800068c:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <read_TIM1+0x2c>)
 800068e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000690:	f04f 0300 	mov.w	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
		return time;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	ee07 3a90 	vmov	s15, r3
	}
 800069c:	eeb0 0a67 	vmov.f32	s0, s15
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40010000 	.word	0x40010000

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006b4:	f001 fcf2 	bl	800209c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f002 fbfc 	bl	8002eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f992 	bl	80009e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f001 f99c 	bl	80019fc <MX_GPIO_Init>
  MX_TIM1_Init();
 80006c4:	f000 fc3e 	bl	8000f44 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006c8:	f000 fd0c 	bl	80010e4 <MX_TIM2_Init>
  MX_TIM4_Init();
 80006cc:	f000 fd64 	bl	8001198 <MX_TIM4_Init>
  MX_TIM5_Init();
 80006d0:	f000 fdfa 	bl	80012c8 <MX_TIM5_Init>
  MX_TIM8_Init();
 80006d4:	f000 fe7a 	bl	80013cc <MX_TIM8_Init>
  MX_TIM12_Init();
 80006d8:	f000 ff06 	bl	80014e8 <MX_TIM12_Init>
  MX_TIM13_Init();
 80006dc:	f000 ff7c 	bl	80015d8 <MX_TIM13_Init>
  MX_TIM14_Init();
 80006e0:	f000 ffc8 	bl	8001674 <MX_TIM14_Init>
  MX_TIM15_Init();
 80006e4:	f001 f814 	bl	8001710 <MX_TIM15_Init>
  MX_TIM16_Init();
 80006e8:	f001 f8c2 	bl	8001870 <MX_TIM16_Init>
  MX_HRTIM_Init();
 80006ec:	f000 fa28 	bl	8000b40 <MX_HRTIM_Init>
  MX_LPTIM1_Init();
 80006f0:	f000 fbfc 	bl	8000eec <MX_LPTIM1_Init>
  MX_UART4_Init();
 80006f4:	f001 f936 	bl	8001964 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */


  //Timer 1
  HAL_TIM_Base_Start(&htim1);
 80006f8:	48a1      	ldr	r0, [pc, #644]	@ (8000980 <main+0x2d0>)
 80006fa:	f008 f911 	bl	8008920 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 80006fe:	48a0      	ldr	r0, [pc, #640]	@ (8000980 <main+0x2d0>)
 8000700:	f008 f97e 	bl	8008a00 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);    //Starts the PWM on each of the desired channels
 8000704:	2100      	movs	r1, #0
 8000706:	489e      	ldr	r0, [pc, #632]	@ (8000980 <main+0x2d0>)
 8000708:	f008 fa4a 	bl	8008ba0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800070c:	2104      	movs	r1, #4
 800070e:	489c      	ldr	r0, [pc, #624]	@ (8000980 <main+0x2d0>)
 8000710:	f008 fa46 	bl	8008ba0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000714:	2108      	movs	r1, #8
 8000716:	489a      	ldr	r0, [pc, #616]	@ (8000980 <main+0x2d0>)
 8000718:	f008 fa42 	bl	8008ba0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800071c:	210c      	movs	r1, #12
 800071e:	4898      	ldr	r0, [pc, #608]	@ (8000980 <main+0x2d0>)
 8000720:	f008 fa3e 	bl	8008ba0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, GPIO_PIN_SET);   //Sets the pin to 1
 8000724:	2201      	movs	r2, #1
 8000726:	2101      	movs	r1, #1
 8000728:	4896      	ldr	r0, [pc, #600]	@ (8000984 <main+0x2d4>)
 800072a:	f003 fcfd 	bl	8004128 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, GPIO_PIN_SET);
 800072e:	2201      	movs	r2, #1
 8000730:	2102      	movs	r1, #2
 8000732:	4894      	ldr	r0, [pc, #592]	@ (8000984 <main+0x2d4>)
 8000734:	f003 fcf8 	bl	8004128 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2104      	movs	r1, #4
 800073c:	4891      	ldr	r0, [pc, #580]	@ (8000984 <main+0x2d4>)
 800073e:	f003 fcf3 	bl	8004128 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	2108      	movs	r1, #8
 8000746:	488f      	ldr	r0, [pc, #572]	@ (8000984 <main+0x2d4>)
 8000748:	f003 fcee 	bl	8004128 <HAL_GPIO_WritePin>
			sprintf(message, "Tim1 Init: %d \n\r", read_TIM1());
			HAL_UART_Transmit(&huart4, (uint8_t*)message, sizeof(message), 100);
			//End UART Transmit
   */

  	  	  	printf(buffer, "Tim1: %.2f \n\r", read_TIM1());
 800074c:	f7ff ff98 	bl	8000680 <read_TIM1>
 8000750:	eef0 7a40 	vmov.f32	s15, s0
 8000754:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000758:	ec53 2b17 	vmov	r2, r3, d7
 800075c:	498a      	ldr	r1, [pc, #552]	@ (8000988 <main+0x2d8>)
 800075e:	488b      	ldr	r0, [pc, #556]	@ (800098c <main+0x2dc>)
 8000760:	f00b fe6c 	bl	800c43c <iprintf>
  			HAL_UART_Transmit(&huart4, (uint8_t*)buffer, sizeof(buffer), HAL_MAX_DELAY);
 8000764:	f04f 33ff 	mov.w	r3, #4294967295
 8000768:	2240      	movs	r2, #64	@ 0x40
 800076a:	4988      	ldr	r1, [pc, #544]	@ (800098c <main+0x2dc>)
 800076c:	4888      	ldr	r0, [pc, #544]	@ (8000990 <main+0x2e0>)
 800076e:	f009 fc1b 	bl	8009fa8 <HAL_UART_Transmit>
  //End Timer 1



  //Timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 8000772:	4888      	ldr	r0, [pc, #544]	@ (8000994 <main+0x2e4>)
 8000774:	f008 f944 	bl	8008a00 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000778:	2100      	movs	r1, #0
 800077a:	4886      	ldr	r0, [pc, #536]	@ (8000994 <main+0x2e4>)
 800077c:	f008 fa10 	bl	8008ba0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM2_CH1_PH_GPIO_Port, TIM2_CH1_PH_Pin, GPIO_PIN_SET);
 8000780:	2201      	movs	r2, #1
 8000782:	2110      	movs	r1, #16
 8000784:	487f      	ldr	r0, [pc, #508]	@ (8000984 <main+0x2d4>)
 8000786:	f003 fccf 	bl	8004128 <HAL_GPIO_WritePin>
  			sprintf(message, "Tim2 Init: %d \n\r", read_TIM1());
  			HAL_UART_Transmit(&huart4, (uint8_t*)message, sizeof(message), 100);
  			//End UART Transmit
  */

  	  	  	sprintf(buffer, "Tim2: %.2f \n\r", read_TIM1());
 800078a:	f7ff ff79 	bl	8000680 <read_TIM1>
 800078e:	eef0 7a40 	vmov.f32	s15, s0
 8000792:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000796:	ec53 2b17 	vmov	r2, r3, d7
 800079a:	497f      	ldr	r1, [pc, #508]	@ (8000998 <main+0x2e8>)
 800079c:	487b      	ldr	r0, [pc, #492]	@ (800098c <main+0x2dc>)
 800079e:	f00b fe5f 	bl	800c460 <siprintf>
    		HAL_UART_Transmit(&huart4, (uint8_t*)buffer, sizeof(buffer), HAL_MAX_DELAY);
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	2240      	movs	r2, #64	@ 0x40
 80007a8:	4978      	ldr	r1, [pc, #480]	@ (800098c <main+0x2dc>)
 80007aa:	4879      	ldr	r0, [pc, #484]	@ (8000990 <main+0x2e0>)
 80007ac:	f009 fbfc 	bl	8009fa8 <HAL_UART_Transmit>
  //End Timer 2



  //Timer 4
  HAL_TIM_Base_Start_IT(&htim4);
 80007b0:	487a      	ldr	r0, [pc, #488]	@ (800099c <main+0x2ec>)
 80007b2:	f008 f925 	bl	8008a00 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80007b6:	2100      	movs	r1, #0
 80007b8:	4878      	ldr	r0, [pc, #480]	@ (800099c <main+0x2ec>)
 80007ba:	f008 f9f1 	bl	8008ba0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80007be:	2104      	movs	r1, #4
 80007c0:	4876      	ldr	r0, [pc, #472]	@ (800099c <main+0x2ec>)
 80007c2:	f008 f9ed 	bl	8008ba0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80007c6:	2108      	movs	r1, #8
 80007c8:	4874      	ldr	r0, [pc, #464]	@ (800099c <main+0x2ec>)
 80007ca:	f008 f9e9 	bl	8008ba0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80007ce:	210c      	movs	r1, #12
 80007d0:	4872      	ldr	r0, [pc, #456]	@ (800099c <main+0x2ec>)
 80007d2:	f008 f9e5 	bl	8008ba0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM4_CH1_PH_GPIO_Port, TIM4_CH1_PH_Pin, GPIO_PIN_SET);
 80007d6:	2201      	movs	r2, #1
 80007d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007dc:	4870      	ldr	r0, [pc, #448]	@ (80009a0 <main+0x2f0>)
 80007de:	f003 fca3 	bl	8004128 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH2_PH_GPIO_Port, TIM4_CH2_PH_Pin, GPIO_PIN_SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007e8:	486d      	ldr	r0, [pc, #436]	@ (80009a0 <main+0x2f0>)
 80007ea:	f003 fc9d 	bl	8004128 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH3_PH_GPIO_Port, TIM4_CH3_PH_Pin, GPIO_PIN_SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007f4:	486b      	ldr	r0, [pc, #428]	@ (80009a4 <main+0x2f4>)
 80007f6:	f003 fc97 	bl	8004128 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH4_PH_GPIO_Port, TIM4_CH4_PH_Pin, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000800:	4868      	ldr	r0, [pc, #416]	@ (80009a4 <main+0x2f4>)
 8000802:	f003 fc91 	bl	8004128 <HAL_GPIO_WritePin>
    		  sprintf(message, "Tim4 Init: %d \n\r", read_TIM1());
    		  HAL_UART_Transmit(&huart4, (uint8_t*)message, sizeof(message), 100);
    		  //End UART Transmit
    		   */

  	  	  	sprintf(buffer, "Tim4: %.2f \n\r", read_TIM1());
 8000806:	f7ff ff3b 	bl	8000680 <read_TIM1>
 800080a:	eef0 7a40 	vmov.f32	s15, s0
 800080e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000812:	ec53 2b17 	vmov	r2, r3, d7
 8000816:	4964      	ldr	r1, [pc, #400]	@ (80009a8 <main+0x2f8>)
 8000818:	485c      	ldr	r0, [pc, #368]	@ (800098c <main+0x2dc>)
 800081a:	f00b fe21 	bl	800c460 <siprintf>
      		HAL_UART_Transmit(&huart4, (uint8_t*)buffer, sizeof(buffer), HAL_MAX_DELAY);
 800081e:	f04f 33ff 	mov.w	r3, #4294967295
 8000822:	2240      	movs	r2, #64	@ 0x40
 8000824:	4959      	ldr	r1, [pc, #356]	@ (800098c <main+0x2dc>)
 8000826:	485a      	ldr	r0, [pc, #360]	@ (8000990 <main+0x2e0>)
 8000828:	f009 fbbe 	bl	8009fa8 <HAL_UART_Transmit>
  //End Timer 4



  //Timer 5
  HAL_TIM_Base_Start_IT(&htim5);
 800082c:	485f      	ldr	r0, [pc, #380]	@ (80009ac <main+0x2fc>)
 800082e:	f008 f8e7 	bl	8008a00 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000832:	2104      	movs	r1, #4
 8000834:	485d      	ldr	r0, [pc, #372]	@ (80009ac <main+0x2fc>)
 8000836:	f008 f9b3 	bl	8008ba0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800083a:	2108      	movs	r1, #8
 800083c:	485b      	ldr	r0, [pc, #364]	@ (80009ac <main+0x2fc>)
 800083e:	f008 f9af 	bl	8008ba0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM5_CH2_PH_GPIO_Port, TIM5_CH2_PH_Pin, GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000848:	4856      	ldr	r0, [pc, #344]	@ (80009a4 <main+0x2f4>)
 800084a:	f003 fc6d 	bl	8004128 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM5_CH3_PH_GPIO_Port, TIM5_CH3_PH_Pin, GPIO_PIN_SET);
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000854:	4853      	ldr	r0, [pc, #332]	@ (80009a4 <main+0x2f4>)
 8000856:	f003 fc67 	bl	8004128 <HAL_GPIO_WritePin>
      		  sprintf(message, "Tim5 Init: %d \n\r", read_TIM1());
      		  HAL_UART_Transmit(&huart4, (uint8_t*)message, sizeof(message), 100);
      		  //End UART Transmit

      		   */
  	  	  	  sprintf(buffer, "Tim5: %.2f \n\r", read_TIM1());
 800085a:	f7ff ff11 	bl	8000680 <read_TIM1>
 800085e:	eef0 7a40 	vmov.f32	s15, s0
 8000862:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000866:	ec53 2b17 	vmov	r2, r3, d7
 800086a:	4951      	ldr	r1, [pc, #324]	@ (80009b0 <main+0x300>)
 800086c:	4847      	ldr	r0, [pc, #284]	@ (800098c <main+0x2dc>)
 800086e:	f00b fdf7 	bl	800c460 <siprintf>
        	  HAL_UART_Transmit(&huart4, (uint8_t*)buffer, sizeof(buffer), HAL_MAX_DELAY);
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	2240      	movs	r2, #64	@ 0x40
 8000878:	4944      	ldr	r1, [pc, #272]	@ (800098c <main+0x2dc>)
 800087a:	4845      	ldr	r0, [pc, #276]	@ (8000990 <main+0x2e0>)
 800087c:	f009 fb94 	bl	8009fa8 <HAL_UART_Transmit>
  //End Timer 5


  //Timer 8
  HAL_TIM_Base_Start_IT(&htim8);
 8000880:	484c      	ldr	r0, [pc, #304]	@ (80009b4 <main+0x304>)
 8000882:	f008 f8bd 	bl	8008a00 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000886:	210c      	movs	r1, #12
 8000888:	484a      	ldr	r0, [pc, #296]	@ (80009b4 <main+0x304>)
 800088a:	f008 f989 	bl	8008ba0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM8_CH4_PH_GPIO_Port, TIM8_CH4_PH_Pin, GPIO_PIN_SET);
 800088e:	2201      	movs	r2, #1
 8000890:	2180      	movs	r1, #128	@ 0x80
 8000892:	483c      	ldr	r0, [pc, #240]	@ (8000984 <main+0x2d4>)
 8000894:	f003 fc48 	bl	8004128 <HAL_GPIO_WritePin>
        	   */
  //End Timer 8


  //Timer 12
  HAL_TIM_Base_Start_IT(&htim12);
 8000898:	4847      	ldr	r0, [pc, #284]	@ (80009b8 <main+0x308>)
 800089a:	f008 f8b1 	bl	8008a00 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 800089e:	2104      	movs	r1, #4
 80008a0:	4845      	ldr	r0, [pc, #276]	@ (80009b8 <main+0x308>)
 80008a2:	f008 f97d 	bl	8008ba0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM12_CH2_PH_GPIO_Port, TIM12_CH2_PH_Pin, GPIO_PIN_SET);
 80008a6:	2201      	movs	r2, #1
 80008a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008ac:	4835      	ldr	r0, [pc, #212]	@ (8000984 <main+0x2d4>)
 80008ae:	f003 fc3b 	bl	8004128 <HAL_GPIO_WritePin>
         	   */
  //End Timer 12


  //Timer 13
  HAL_TIM_Base_Start_IT(&htim13);
 80008b2:	4842      	ldr	r0, [pc, #264]	@ (80009bc <main+0x30c>)
 80008b4:	f008 f8a4 	bl	8008a00 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80008b8:	2100      	movs	r1, #0
 80008ba:	4840      	ldr	r0, [pc, #256]	@ (80009bc <main+0x30c>)
 80008bc:	f008 f970 	bl	8008ba0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM13_CH1_PH_GPIO_Port, TIM13_CH1_PH_Pin, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008c6:	482f      	ldr	r0, [pc, #188]	@ (8000984 <main+0x2d4>)
 80008c8:	f003 fc2e 	bl	8004128 <HAL_GPIO_WritePin>
           	   */
  //End Timer 13


  //Timer 14
  HAL_TIM_Base_Start_IT(&htim14);
 80008cc:	483c      	ldr	r0, [pc, #240]	@ (80009c0 <main+0x310>)
 80008ce:	f008 f897 	bl	8008a00 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80008d2:	2100      	movs	r1, #0
 80008d4:	483a      	ldr	r0, [pc, #232]	@ (80009c0 <main+0x310>)
 80008d6:	f008 f963 	bl	8008ba0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM14_CH1_PH_GPIO_Port, TIM14_CH1_PH_Pin, GPIO_PIN_SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008e0:	4828      	ldr	r0, [pc, #160]	@ (8000984 <main+0x2d4>)
 80008e2:	f003 fc21 	bl	8004128 <HAL_GPIO_WritePin>
           	   */
  //End Timer 14


  //Timer 15
  HAL_TIM_Base_Start_IT(&htim15);
 80008e6:	4837      	ldr	r0, [pc, #220]	@ (80009c4 <main+0x314>)
 80008e8:	f008 f88a 	bl	8008a00 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80008ec:	2100      	movs	r1, #0
 80008ee:	4835      	ldr	r0, [pc, #212]	@ (80009c4 <main+0x314>)
 80008f0:	f008 f956 	bl	8008ba0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80008f4:	2104      	movs	r1, #4
 80008f6:	4833      	ldr	r0, [pc, #204]	@ (80009c4 <main+0x314>)
 80008f8:	f008 f952 	bl	8008ba0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM15_CH1_PH_GPIO_Port, TIM15_CH1_PH_Pin, GPIO_PIN_SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000902:	4820      	ldr	r0, [pc, #128]	@ (8000984 <main+0x2d4>)
 8000904:	f003 fc10 	bl	8004128 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM15_CH2_PH_GPIO_Port, TIM15_CH2_PH_Pin, GPIO_PIN_SET);
 8000908:	2201      	movs	r2, #1
 800090a:	2101      	movs	r1, #1
 800090c:	482e      	ldr	r0, [pc, #184]	@ (80009c8 <main+0x318>)
 800090e:	f003 fc0b 	bl	8004128 <HAL_GPIO_WritePin>
           	   */
  //End Timer 15


  //Timer 16
  HAL_TIM_Base_Start_IT(&htim16);
 8000912:	482e      	ldr	r0, [pc, #184]	@ (80009cc <main+0x31c>)
 8000914:	f008 f874 	bl	8008a00 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000918:	2100      	movs	r1, #0
 800091a:	482c      	ldr	r0, [pc, #176]	@ (80009cc <main+0x31c>)
 800091c:	f008 f940 	bl	8008ba0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM16_CH1_PH_GPIO_Port, TIM16_CH1_PH_Pin, GPIO_PIN_SET);
 8000920:	2201      	movs	r2, #1
 8000922:	2102      	movs	r1, #2
 8000924:	4828      	ldr	r0, [pc, #160]	@ (80009c8 <main+0x318>)
 8000926:	f003 fbff 	bl	8004128 <HAL_GPIO_WritePin>
  //HRTIM CODE GOES HERE ********

  	  //HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);

     // Enable output
     HRTIM1->sCommonRegs.OENR = HRTIM_OENR_TA1OEN + HRTIM_OENR_TA2OEN +
 800092a:	4b29      	ldr	r3, [pc, #164]	@ (80009d0 <main+0x320>)
 800092c:	22ff      	movs	r2, #255	@ 0xff
 800092e:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
     	 	HRTIM_OENR_TB1OEN + HRTIM_OENR_TB2OEN + HRTIM_OENR_TC1OEN + HRTIM_OENR_TC2OEN + HRTIM_OENR_TD1OEN + HRTIM_OENR_TD2OEN;
     //Start Timer
     HRTIM1->sMasterRegs.MCR = HRTIM_MCR_TACEN + HRTIM_MCR_TBCEN + HRTIM_MCR_TCCEN + HRTIM_MCR_TDCEN;
 8000932:	4b27      	ldr	r3, [pc, #156]	@ (80009d0 <main+0x320>)
 8000934:	f44f 12f0 	mov.w	r2, #1966080	@ 0x1e0000
 8000938:	601a      	str	r2, [r3, #0]
              */
  //END HRTIM CODE


  //Low-Power Timer
     HAL_LPTIM_Counter_Start_IT(&hlptim1, LPTIM_ARR_ARR);
 800093a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800093e:	4825      	ldr	r0, [pc, #148]	@ (80009d4 <main+0x324>)
 8000940:	f004 fdf1 	bl	8005526 <HAL_LPTIM_Counter_Start_IT>
     HAL_LPTIM_PWM_Start(&hlptim1, LPTIM_ARR_ARR, LPTIM_CMP_CMP);
 8000944:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000948:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800094c:	4821      	ldr	r0, [pc, #132]	@ (80009d4 <main+0x324>)
 800094e:	f004 fd9d 	bl	800548c <HAL_LPTIM_PWM_Start>
     HAL_GPIO_WritePin(LPTIM1_OUT_PH_GPIO_Port, LPTIM1_OUT_PH_Pin, GPIO_PIN_SET);
 8000952:	2201      	movs	r2, #1
 8000954:	2104      	movs	r1, #4
 8000956:	481c      	ldr	r0, [pc, #112]	@ (80009c8 <main+0x318>)
 8000958:	f003 fbe6 	bl	8004128 <HAL_GPIO_WritePin>
       	LPTIM1->ARR = (12000-1);
 800095c:	4b1e      	ldr	r3, [pc, #120]	@ (80009d8 <main+0x328>)
 800095e:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8000962:	619a      	str	r2, [r3, #24]
       	    //End UART Transmit
       	     *
       	     */
  //End Low Power Timer

   gen_sine();
 8000964:	f001 fb64 	bl	8002030 <gen_sine>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ctrl_tmr_expired == TRUE) control_update(ref);
 8000968:	4b1c      	ldr	r3, [pc, #112]	@ (80009dc <main+0x32c>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d1fb      	bne.n	8000968 <main+0x2b8>
 8000970:	4b1b      	ldr	r3, [pc, #108]	@ (80009e0 <main+0x330>)
 8000972:	ed93 7b00 	vldr	d7, [r3]
 8000976:	eeb0 0b47 	vmov.f64	d0, d7
 800097a:	f001 f965 	bl	8001c48 <control_update>
 800097e:	e7f3      	b.n	8000968 <main+0x2b8>
 8000980:	24000310 	.word	0x24000310
 8000984:	58021000 	.word	0x58021000
 8000988:	0800f190 	.word	0x0800f190
 800098c:	240025ec 	.word	0x240025ec
 8000990:	24000608 	.word	0x24000608
 8000994:	2400035c 	.word	0x2400035c
 8000998:	0800f1a0 	.word	0x0800f1a0
 800099c:	240003a8 	.word	0x240003a8
 80009a0:	58020400 	.word	0x58020400
 80009a4:	58020800 	.word	0x58020800
 80009a8:	0800f1b0 	.word	0x0800f1b0
 80009ac:	240003f4 	.word	0x240003f4
 80009b0:	0800f1c0 	.word	0x0800f1c0
 80009b4:	24000440 	.word	0x24000440
 80009b8:	2400048c 	.word	0x2400048c
 80009bc:	240004d8 	.word	0x240004d8
 80009c0:	24000524 	.word	0x24000524
 80009c4:	24000570 	.word	0x24000570
 80009c8:	58020c00 	.word	0x58020c00
 80009cc:	240005bc 	.word	0x240005bc
 80009d0:	40017400 	.word	0x40017400
 80009d4:	240002d8 	.word	0x240002d8
 80009d8:	40002400 	.word	0x40002400
 80009dc:	2400069c 	.word	0x2400069c
 80009e0:	240006a0 	.word	0x240006a0

080009e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b09e      	sub	sp, #120	@ 0x78
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ee:	224c      	movs	r2, #76	@ 0x4c
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f00b fd97 	bl	800c526 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2220      	movs	r2, #32
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f00b fd90 	bl	800c526 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a06:	2002      	movs	r0, #2
 8000a08:	f005 f8e6 	bl	8005bd8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	4b48      	ldr	r3, [pc, #288]	@ (8000b34 <SystemClock_Config+0x150>)
 8000a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a14:	4a47      	ldr	r2, [pc, #284]	@ (8000b34 <SystemClock_Config+0x150>)
 8000a16:	f023 0301 	bic.w	r3, r3, #1
 8000a1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a1c:	4b45      	ldr	r3, [pc, #276]	@ (8000b34 <SystemClock_Config+0x150>)
 8000a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	4b44      	ldr	r3, [pc, #272]	@ (8000b38 <SystemClock_Config+0x154>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	4a43      	ldr	r2, [pc, #268]	@ (8000b38 <SystemClock_Config+0x154>)
 8000a2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a30:	6193      	str	r3, [r2, #24]
 8000a32:	4b41      	ldr	r3, [pc, #260]	@ (8000b38 <SystemClock_Config+0x154>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a3e:	bf00      	nop
 8000a40:	4b3d      	ldr	r3, [pc, #244]	@ (8000b38 <SystemClock_Config+0x154>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a4c:	d1f8      	bne.n	8000a40 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b3b      	ldr	r3, [pc, #236]	@ (8000b3c <SystemClock_Config+0x158>)
 8000a50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a54:	4a39      	ldr	r2, [pc, #228]	@ (8000b3c <SystemClock_Config+0x158>)
 8000a56:	f043 0302 	orr.w	r3, r3, #2
 8000a5a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a5e:	4b37      	ldr	r3, [pc, #220]	@ (8000b3c <SystemClock_Config+0x158>)
 8000a60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	4b31      	ldr	r3, [pc, #196]	@ (8000b38 <SystemClock_Config+0x154>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a30      	ldr	r2, [pc, #192]	@ (8000b38 <SystemClock_Config+0x154>)
 8000a76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b38 <SystemClock_Config+0x154>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b2b      	ldr	r3, [pc, #172]	@ (8000b34 <SystemClock_Config+0x150>)
 8000a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a8a:	4a2a      	ldr	r2, [pc, #168]	@ (8000b34 <SystemClock_Config+0x150>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a92:	4b28      	ldr	r3, [pc, #160]	@ (8000b34 <SystemClock_Config+0x150>)
 8000a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a9e:	bf00      	nop
 8000aa0:	4b25      	ldr	r3, [pc, #148]	@ (8000b38 <SystemClock_Config+0x154>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000aa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000aac:	d1f8      	bne.n	8000aa0 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000abc:	2302      	movs	r3, #2
 8000abe:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000ac4:	2350      	movs	r3, #80	@ 0x50
 8000ac6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ad4:	230c      	movs	r3, #12
 8000ad6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f005 f8b1 	bl	8005c4c <HAL_RCC_OscConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000af0:	f001 fb00 	bl	80020f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af4:	233f      	movs	r3, #63	@ 0x3f
 8000af6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af8:	2303      	movs	r3, #3
 8000afa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b00:	2308      	movs	r3, #8
 8000b02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b04:	2340      	movs	r3, #64	@ 0x40
 8000b06:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b08:	2340      	movs	r3, #64	@ 0x40
 8000b0a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b12:	2340      	movs	r3, #64	@ 0x40
 8000b14:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f005 fcef 	bl	8006500 <HAL_RCC_ClockConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000b28:	f001 fae4 	bl	80020f4 <Error_Handler>
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	3778      	adds	r7, #120	@ 0x78
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	58000400 	.word	0x58000400
 8000b38:	58024800 	.word	0x58024800
 8000b3c:	58024400 	.word	0x58024400

08000b40 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b0aa      	sub	sp, #168	@ 0xa8
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_EventCfgTypeDef pEventCfg = {0};
 8000b46:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000b56:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000b64:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b68:	2254      	movs	r2, #84	@ 0x54
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f00b fcda 	bl	800c526 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8000b72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	2220      	movs	r2, #32
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00b fcce 	bl	800c526 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */


  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8000b8a:	4bc4      	ldr	r3, [pc, #784]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000b8c:	4ac4      	ldr	r2, [pc, #784]	@ (8000ea0 <MX_HRTIM_Init+0x360>)
 8000b8e:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000b90:	4bc2      	ldr	r3, [pc, #776]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000b96:	4bc1      	ldr	r3, [pc, #772]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8000b9c:	48bf      	ldr	r0, [pc, #764]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000b9e:	f003 fadd 	bl	800415c <HAL_HRTIM_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_HRTIM_Init+0x6c>
  {
    Error_Handler();
 8000ba8:	f001 faa4 	bl	80020f4 <Error_Handler>
  }
  if (HAL_HRTIM_EventPrescalerConfig(&hhrtim, HRTIM_EVENTPRESCALER_DIV1) != HAL_OK)
 8000bac:	2100      	movs	r1, #0
 8000bae:	48bb      	ldr	r0, [pc, #748]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000bb0:	f003 fbfb 	bl	80043aa <HAL_HRTIM_EventPrescalerConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_HRTIM_Init+0x7e>
  {
    Error_Handler();
 8000bba:	f001 fa9b 	bl	80020f4 <Error_Handler>
  }
  pEventCfg.Source = HRTIM_EVENTSRC_3;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  pEventCfg.Polarity = HRTIM_EVENTPOLARITY_HIGH;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pEventCfg.Sensitivity = HRTIM_EVENTSENSITIVITY_RISINGEDGE;
 8000bca:	2308      	movs	r3, #8
 8000bcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  pEventCfg.FastMode = HRTIM_EVENTFASTMODE_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_HRTIM_EventConfig(&hhrtim, HRTIM_EVENT_1, &pEventCfg) != HAL_OK)
 8000bd6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000bda:	461a      	mov	r2, r3
 8000bdc:	2101      	movs	r1, #1
 8000bde:	48af      	ldr	r0, [pc, #700]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000be0:	f003 fbb4 	bl	800434c <HAL_HRTIM_EventConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_HRTIM_Init+0xae>
  {
    Error_Handler();
 8000bea:	f001 fa83 	bl	80020f4 <Error_Handler>
  }
  pTimeBaseCfg.Period = 24000-1;
 8000bee:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 8000bf2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000bfc:	2305      	movs	r3, #5
 8000bfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000c02:	2308      	movs	r3, #8
 8000c04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000c08:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	2100      	movs	r1, #0
 8000c10:	48a2      	ldr	r0, [pc, #648]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000c12:	f003 fb73 	bl	80042fc <HAL_HRTIM_TimeBaseConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_HRTIM_Init+0xe0>
  {
    Error_Handler();
 8000c1c:	f001 fa6a 	bl	80020f4 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.DMASrcAddress = 0x0000;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.DMADstAddress = 0x0000;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.DMASize = 0x1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000c34:	2300      	movs	r3, #0
 8000c36:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8000c44:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c48:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000c52:	2300      	movs	r3, #0
 8000c54:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8000c56:	2300      	movs	r3, #0
 8000c58:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8000c62:	2300      	movs	r3, #0
 8000c64:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8000c66:	2300      	movs	r3, #0
 8000c68:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_EEV_1;
 8000c6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c72:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 8000c74:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000c78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8000c7c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c80:	461a      	mov	r2, r3
 8000c82:	2100      	movs	r1, #0
 8000c84:	4885      	ldr	r0, [pc, #532]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000c86:	f003 fbc9 	bl	800441c <HAL_HRTIM_WaveformTimerConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_HRTIM_Init+0x154>
  {
    Error_Handler();
 8000c90:	f001 fa30 	bl	80020f4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8000c94:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c98:	461a      	mov	r2, r3
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	487f      	ldr	r0, [pc, #508]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000c9e:	f003 fbbd 	bl	800441c <HAL_HRTIM_WaveformTimerConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_HRTIM_Init+0x16c>
  {
    Error_Handler();
 8000ca8:	f001 fa24 	bl	80020f4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8000cac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	2102      	movs	r1, #2
 8000cb4:	4879      	ldr	r0, [pc, #484]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000cb6:	f003 fbb1 	bl	800441c <HAL_HRTIM_WaveformTimerConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_HRTIM_Init+0x184>
  {
    Error_Handler();
 8000cc0:	f001 fa18 	bl	80020f4 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 8000cc8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ccc:	461a      	mov	r2, r3
 8000cce:	2103      	movs	r1, #3
 8000cd0:	4872      	ldr	r0, [pc, #456]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000cd2:	f003 fba3 	bl	800441c <HAL_HRTIM_WaveformTimerConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_HRTIM_Init+0x1a0>
  {
    Error_Handler();
 8000cdc:	f001 fa0a 	bl	80020f4 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x00005A00/2;
 8000ce0:	f44f 5334 	mov.w	r3, #11520	@ 0x2d00
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cea:	2201      	movs	r2, #1
 8000cec:	2100      	movs	r1, #0
 8000cee:	486b      	ldr	r0, [pc, #428]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000cf0:	f003 fc06 	bl	8004500 <HAL_HRTIM_WaveformCompareConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_HRTIM_Init+0x1be>
  {
    Error_Handler();
 8000cfa:	f001 f9fb 	bl	80020f4 <Error_Handler>
  }
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62bb      	str	r3, [r7, #40]	@ 0x28
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000d06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4863      	ldr	r0, [pc, #396]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000d10:	f003 fbf6 	bl	8004500 <HAL_HRTIM_WaveformCompareConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_HRTIM_Init+0x1de>
  {
    Error_Handler();
 8000d1a:	f001 f9eb 	bl	80020f4 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000d1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d22:	2202      	movs	r2, #2
 8000d24:	2101      	movs	r1, #1
 8000d26:	485d      	ldr	r0, [pc, #372]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000d28:	f003 fbea 	bl	8004500 <HAL_HRTIM_WaveformCompareConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_HRTIM_Init+0x1f6>
  {
    Error_Handler();
 8000d32:	f001 f9df 	bl	80020f4 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000d36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	2102      	movs	r1, #2
 8000d3e:	4857      	ldr	r0, [pc, #348]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000d40:	f003 fbde 	bl	8004500 <HAL_HRTIM_WaveformCompareConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_HRTIM_Init+0x20e>
  {
    Error_Handler();
 8000d4a:	f001 f9d3 	bl	80020f4 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d52:	2202      	movs	r2, #2
 8000d54:	2103      	movs	r1, #3
 8000d56:	4851      	ldr	r0, [pc, #324]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000d58:	f003 fbd2 	bl	8004500 <HAL_HRTIM_WaveformCompareConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_HRTIM_Init+0x226>
  {
    Error_Handler();
 8000d62:	f001 f9c7 	bl	80020f4 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_EEV_1|HRTIM_OUTPUTSET_TIMPER;
 8000d6a:	4b4e      	ldr	r3, [pc, #312]	@ (8000ea4 <MX_HRTIM_Init+0x364>)
 8000d6c:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8000d6e:	2308      	movs	r3, #8
 8000d70:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4843      	ldr	r0, [pc, #268]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000d8e:	f003 fd25 	bl	80047dc <HAL_HRTIM_WaveformOutputConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_HRTIM_Init+0x25c>
  {
    Error_Handler();
 8000d98:	f001 f9ac 	bl	80020f4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2204      	movs	r2, #4
 8000da0:	2101      	movs	r1, #1
 8000da2:	483e      	ldr	r0, [pc, #248]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000da4:	f003 fd1a 	bl	80047dc <HAL_HRTIM_WaveformOutputConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_HRTIM_Init+0x272>
  {
    Error_Handler();
 8000dae:	f001 f9a1 	bl	80020f4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2210      	movs	r2, #16
 8000db6:	2102      	movs	r1, #2
 8000db8:	4838      	ldr	r0, [pc, #224]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000dba:	f003 fd0f 	bl	80047dc <HAL_HRTIM_WaveformOutputConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_HRTIM_Init+0x288>
  {
    Error_Handler();
 8000dc4:	f001 f996 	bl	80020f4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2240      	movs	r2, #64	@ 0x40
 8000dcc:	2103      	movs	r1, #3
 8000dce:	4833      	ldr	r0, [pc, #204]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000dd0:	f003 fd04 	bl	80047dc <HAL_HRTIM_WaveformOutputConfig>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_HRTIM_Init+0x29e>
  {
    Error_Handler();
 8000dda:	f001 f98b 	bl	80020f4 <Error_Handler>
  }
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8000dde:	2310      	movs	r3, #16
 8000de0:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2202      	movs	r2, #2
 8000de6:	2100      	movs	r1, #0
 8000de8:	482c      	ldr	r0, [pc, #176]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000dea:	f003 fcf7 	bl	80047dc <HAL_HRTIM_WaveformOutputConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_HRTIM_Init+0x2b8>
  {
    Error_Handler();
 8000df4:	f001 f97e 	bl	80020f4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	2208      	movs	r2, #8
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	4827      	ldr	r0, [pc, #156]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000e00:	f003 fcec 	bl	80047dc <HAL_HRTIM_WaveformOutputConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_HRTIM_Init+0x2ce>
  {
    Error_Handler();
 8000e0a:	f001 f973 	bl	80020f4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2220      	movs	r2, #32
 8000e12:	2102      	movs	r1, #2
 8000e14:	4821      	ldr	r0, [pc, #132]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000e16:	f003 fce1 	bl	80047dc <HAL_HRTIM_WaveformOutputConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_HRTIM_Init+0x2e4>
  {
    Error_Handler();
 8000e20:	f001 f968 	bl	80020f4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2280      	movs	r2, #128	@ 0x80
 8000e28:	2103      	movs	r1, #3
 8000e2a:	481c      	ldr	r0, [pc, #112]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000e2c:	f003 fcd6 	bl	80047dc <HAL_HRTIM_WaveformOutputConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_HRTIM_Init+0x2fa>
  {
    Error_Handler();
 8000e36:	f001 f95d 	bl	80020f4 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8000e3a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e3e:	461a      	mov	r2, r3
 8000e40:	2101      	movs	r1, #1
 8000e42:	4816      	ldr	r0, [pc, #88]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000e44:	f003 fa5a 	bl	80042fc <HAL_HRTIM_TimeBaseConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_HRTIM_Init+0x312>
  {
    Error_Handler();
 8000e4e:	f001 f951 	bl	80020f4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000e52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e56:	2201      	movs	r2, #1
 8000e58:	2101      	movs	r1, #1
 8000e5a:	4810      	ldr	r0, [pc, #64]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000e5c:	f003 fb50 	bl	8004500 <HAL_HRTIM_WaveformCompareConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_HRTIM_Init+0x32a>
  {
    Error_Handler();
 8000e66:	f001 f945 	bl	80020f4 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8000e6a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e6e:	461a      	mov	r2, r3
 8000e70:	2102      	movs	r1, #2
 8000e72:	480a      	ldr	r0, [pc, #40]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000e74:	f003 fa42 	bl	80042fc <HAL_HRTIM_TimeBaseConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_HRTIM_Init+0x342>
  {
    Error_Handler();
 8000e7e:	f001 f939 	bl	80020f4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000e82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e86:	2201      	movs	r2, #1
 8000e88:	2102      	movs	r1, #2
 8000e8a:	4804      	ldr	r0, [pc, #16]	@ (8000e9c <MX_HRTIM_Init+0x35c>)
 8000e8c:	f003 fb38 	bl	8004500 <HAL_HRTIM_WaveformCompareConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d008      	beq.n	8000ea8 <MX_HRTIM_Init+0x368>
  {
    Error_Handler();
 8000e96:	f001 f92d 	bl	80020f4 <Error_Handler>
 8000e9a:	e005      	b.n	8000ea8 <MX_HRTIM_Init+0x368>
 8000e9c:	240001fc 	.word	0x240001fc
 8000ea0:	40017400 	.word	0x40017400
 8000ea4:	00200004 	.word	0x00200004
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000ea8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000eac:	461a      	mov	r2, r3
 8000eae:	2103      	movs	r1, #3
 8000eb0:	480d      	ldr	r0, [pc, #52]	@ (8000ee8 <MX_HRTIM_Init+0x3a8>)
 8000eb2:	f003 fa23 	bl	80042fc <HAL_HRTIM_TimeBaseConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_HRTIM_Init+0x380>
  {
    Error_Handler();
 8000ebc:	f001 f91a 	bl	80020f4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000ec0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2103      	movs	r1, #3
 8000ec8:	4807      	ldr	r0, [pc, #28]	@ (8000ee8 <MX_HRTIM_Init+0x3a8>)
 8000eca:	f003 fb19 	bl	8004500 <HAL_HRTIM_WaveformCompareConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_HRTIM_Init+0x398>
  {
    Error_Handler();
 8000ed4:	f001 f90e 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8000ed8:	4803      	ldr	r0, [pc, #12]	@ (8000ee8 <MX_HRTIM_Init+0x3a8>)
 8000eda:	f001 f965 	bl	80021a8 <HAL_HRTIM_MspPostInit>

}
 8000ede:	bf00      	nop
 8000ee0:	37a8      	adds	r7, #168	@ 0xa8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	240001fc 	.word	0x240001fc

08000eec <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <MX_LPTIM1_Init+0x50>)
 8000ef2:	4a13      	ldr	r2, [pc, #76]	@ (8000f40 <MX_LPTIM1_Init+0x54>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <MX_LPTIM1_Init+0x50>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <MX_LPTIM1_Init+0x50>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <MX_LPTIM1_Init+0x50>)
 8000f04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f08:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <MX_LPTIM1_Init+0x50>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000f10:	4b0a      	ldr	r3, [pc, #40]	@ (8000f3c <MX_LPTIM1_Init+0x50>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000f16:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <MX_LPTIM1_Init+0x50>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000f1c:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <MX_LPTIM1_Init+0x50>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000f22:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <MX_LPTIM1_Init+0x50>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000f28:	4804      	ldr	r0, [pc, #16]	@ (8000f3c <MX_LPTIM1_Init+0x50>)
 8000f2a:	f004 f9ff 	bl	800532c <HAL_LPTIM_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8000f34:	f001 f8de 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	240002d8 	.word	0x240002d8
 8000f40:	40002400 	.word	0x40002400

08000f44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b09a      	sub	sp, #104	@ 0x68
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f58:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f64:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
 8000f74:	615a      	str	r2, [r3, #20]
 8000f76:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	222c      	movs	r2, #44	@ 0x2c
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f00b fad1 	bl	800c526 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f84:	4b55      	ldr	r3, [pc, #340]	@ (80010dc <MX_TIM1_Init+0x198>)
 8000f86:	4a56      	ldr	r2, [pc, #344]	@ (80010e0 <MX_TIM1_Init+0x19c>)
 8000f88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f8a:	4b54      	ldr	r3, [pc, #336]	@ (80010dc <MX_TIM1_Init+0x198>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f90:	4b52      	ldr	r3, [pc, #328]	@ (80010dc <MX_TIM1_Init+0x198>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000-1;
 8000f96:	4b51      	ldr	r3, [pc, #324]	@ (80010dc <MX_TIM1_Init+0x198>)
 8000f98:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000f9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f9e:	4b4f      	ldr	r3, [pc, #316]	@ (80010dc <MX_TIM1_Init+0x198>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fa4:	4b4d      	ldr	r3, [pc, #308]	@ (80010dc <MX_TIM1_Init+0x198>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000faa:	4b4c      	ldr	r3, [pc, #304]	@ (80010dc <MX_TIM1_Init+0x198>)
 8000fac:	2280      	movs	r2, #128	@ 0x80
 8000fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fb0:	484a      	ldr	r0, [pc, #296]	@ (80010dc <MX_TIM1_Init+0x198>)
 8000fb2:	f007 fc5d 	bl	8008870 <HAL_TIM_Base_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000fbc:	f001 f89a 	bl	80020f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fc4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fc6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4843      	ldr	r0, [pc, #268]	@ (80010dc <MX_TIM1_Init+0x198>)
 8000fce:	f008 f911 	bl	80091f4 <HAL_TIM_ConfigClockSource>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000fd8:	f001 f88c 	bl	80020f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fdc:	483f      	ldr	r0, [pc, #252]	@ (80010dc <MX_TIM1_Init+0x198>)
 8000fde:	f007 fd87 	bl	8008af0 <HAL_TIM_PWM_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000fe8:	f001 f884 	bl	80020f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fec:	2320      	movs	r3, #32
 8000fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ff8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4837      	ldr	r0, [pc, #220]	@ (80010dc <MX_TIM1_Init+0x198>)
 8001000:	f008 fe58 	bl	8009cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800100a:	f001 f873 	bl	80020f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800100e:	2360      	movs	r3, #96	@ 0x60
 8001010:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001016:	2300      	movs	r3, #0
 8001018:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800101a:	2300      	movs	r3, #0
 800101c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800102a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800102e:	2200      	movs	r2, #0
 8001030:	4619      	mov	r1, r3
 8001032:	482a      	ldr	r0, [pc, #168]	@ (80010dc <MX_TIM1_Init+0x198>)
 8001034:	f007 ffca 	bl	8008fcc <HAL_TIM_PWM_ConfigChannel>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800103e:	f001 f859 	bl	80020f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001042:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001046:	2204      	movs	r2, #4
 8001048:	4619      	mov	r1, r3
 800104a:	4824      	ldr	r0, [pc, #144]	@ (80010dc <MX_TIM1_Init+0x198>)
 800104c:	f007 ffbe 	bl	8008fcc <HAL_TIM_PWM_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001056:	f001 f84d 	bl	80020f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800105a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800105e:	2208      	movs	r2, #8
 8001060:	4619      	mov	r1, r3
 8001062:	481e      	ldr	r0, [pc, #120]	@ (80010dc <MX_TIM1_Init+0x198>)
 8001064:	f007 ffb2 	bl	8008fcc <HAL_TIM_PWM_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800106e:	f001 f841 	bl	80020f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001072:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001076:	220c      	movs	r2, #12
 8001078:	4619      	mov	r1, r3
 800107a:	4818      	ldr	r0, [pc, #96]	@ (80010dc <MX_TIM1_Init+0x198>)
 800107c:	f007 ffa6 	bl	8008fcc <HAL_TIM_PWM_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001086:	f001 f835 	bl	80020f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800109e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	4619      	mov	r1, r3
 80010be:	4807      	ldr	r0, [pc, #28]	@ (80010dc <MX_TIM1_Init+0x198>)
 80010c0:	f008 fe86 	bl	8009dd0 <HAL_TIMEx_ConfigBreakDeadTime>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 80010ca:	f001 f813 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010ce:	4803      	ldr	r0, [pc, #12]	@ (80010dc <MX_TIM1_Init+0x198>)
 80010d0:	f001 fa92 	bl	80025f8 <HAL_TIM_MspPostInit>

}
 80010d4:	bf00      	nop
 80010d6:	3768      	adds	r7, #104	@ 0x68
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	24000310 	.word	0x24000310
 80010e0:	40010000 	.word	0x40010000

080010e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	@ 0x28
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f6:	463b      	mov	r3, r7
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
 8001104:	615a      	str	r2, [r3, #20]
 8001106:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001108:	4b22      	ldr	r3, [pc, #136]	@ (8001194 <MX_TIM2_Init+0xb0>)
 800110a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800110e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001110:	4b20      	ldr	r3, [pc, #128]	@ (8001194 <MX_TIM2_Init+0xb0>)
 8001112:	2200      	movs	r2, #0
 8001114:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001116:	4b1f      	ldr	r3, [pc, #124]	@ (8001194 <MX_TIM2_Init+0xb0>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000-1;
 800111c:	4b1d      	ldr	r3, [pc, #116]	@ (8001194 <MX_TIM2_Init+0xb0>)
 800111e:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001122:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001124:	4b1b      	ldr	r3, [pc, #108]	@ (8001194 <MX_TIM2_Init+0xb0>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800112a:	4b1a      	ldr	r3, [pc, #104]	@ (8001194 <MX_TIM2_Init+0xb0>)
 800112c:	2280      	movs	r2, #128	@ 0x80
 800112e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001130:	4818      	ldr	r0, [pc, #96]	@ (8001194 <MX_TIM2_Init+0xb0>)
 8001132:	f007 fcdd 	bl	8008af0 <HAL_TIM_PWM_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800113c:	f000 ffda 	bl	80020f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	4811      	ldr	r0, [pc, #68]	@ (8001194 <MX_TIM2_Init+0xb0>)
 8001150:	f008 fdb0 	bl	8009cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800115a:	f000 ffcb 	bl	80020f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800115e:	2360      	movs	r3, #96	@ 0x60
 8001160:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800116e:	463b      	mov	r3, r7
 8001170:	2200      	movs	r2, #0
 8001172:	4619      	mov	r1, r3
 8001174:	4807      	ldr	r0, [pc, #28]	@ (8001194 <MX_TIM2_Init+0xb0>)
 8001176:	f007 ff29 	bl	8008fcc <HAL_TIM_PWM_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001180:	f000 ffb8 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001184:	4803      	ldr	r0, [pc, #12]	@ (8001194 <MX_TIM2_Init+0xb0>)
 8001186:	f001 fa37 	bl	80025f8 <HAL_TIM_MspPostInit>

}
 800118a:	bf00      	nop
 800118c:	3728      	adds	r7, #40	@ 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	2400035c 	.word	0x2400035c

08001198 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08e      	sub	sp, #56	@ 0x38
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]
 80011c6:	615a      	str	r2, [r3, #20]
 80011c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011ca:	4b3d      	ldr	r3, [pc, #244]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011cc:	4a3d      	ldr	r2, [pc, #244]	@ (80012c4 <MX_TIM4_Init+0x12c>)
 80011ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011d0:	4b3b      	ldr	r3, [pc, #236]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d6:	4b3a      	ldr	r3, [pc, #232]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 24000-1;
 80011dc:	4b38      	ldr	r3, [pc, #224]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011de:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80011e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e4:	4b36      	ldr	r3, [pc, #216]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ea:	4b35      	ldr	r3, [pc, #212]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011ec:	2280      	movs	r2, #128	@ 0x80
 80011ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011f0:	4833      	ldr	r0, [pc, #204]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011f2:	f007 fb3d 	bl	8008870 <HAL_TIM_Base_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80011fc:	f000 ff7a 	bl	80020f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001200:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001204:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001206:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800120a:	4619      	mov	r1, r3
 800120c:	482c      	ldr	r0, [pc, #176]	@ (80012c0 <MX_TIM4_Init+0x128>)
 800120e:	f007 fff1 	bl	80091f4 <HAL_TIM_ConfigClockSource>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001218:	f000 ff6c 	bl	80020f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800121c:	4828      	ldr	r0, [pc, #160]	@ (80012c0 <MX_TIM4_Init+0x128>)
 800121e:	f007 fc67 	bl	8008af0 <HAL_TIM_PWM_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001228:	f000 ff64 	bl	80020f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	4619      	mov	r1, r3
 800123a:	4821      	ldr	r0, [pc, #132]	@ (80012c0 <MX_TIM4_Init+0x128>)
 800123c:	f008 fd3a 	bl	8009cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001246:	f000 ff55 	bl	80020f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124a:	2360      	movs	r3, #96	@ 0x60
 800124c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	2200      	movs	r2, #0
 800125e:	4619      	mov	r1, r3
 8001260:	4817      	ldr	r0, [pc, #92]	@ (80012c0 <MX_TIM4_Init+0x128>)
 8001262:	f007 feb3 	bl	8008fcc <HAL_TIM_PWM_ConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800126c:	f000 ff42 	bl	80020f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	2204      	movs	r2, #4
 8001274:	4619      	mov	r1, r3
 8001276:	4812      	ldr	r0, [pc, #72]	@ (80012c0 <MX_TIM4_Init+0x128>)
 8001278:	f007 fea8 	bl	8008fcc <HAL_TIM_PWM_ConfigChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001282:	f000 ff37 	bl	80020f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001286:	463b      	mov	r3, r7
 8001288:	2208      	movs	r2, #8
 800128a:	4619      	mov	r1, r3
 800128c:	480c      	ldr	r0, [pc, #48]	@ (80012c0 <MX_TIM4_Init+0x128>)
 800128e:	f007 fe9d 	bl	8008fcc <HAL_TIM_PWM_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001298:	f000 ff2c 	bl	80020f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	220c      	movs	r2, #12
 80012a0:	4619      	mov	r1, r3
 80012a2:	4807      	ldr	r0, [pc, #28]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80012a4:	f007 fe92 	bl	8008fcc <HAL_TIM_PWM_ConfigChannel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 80012ae:	f000 ff21 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80012b2:	4803      	ldr	r0, [pc, #12]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80012b4:	f001 f9a0 	bl	80025f8 <HAL_TIM_MspPostInit>

}
 80012b8:	bf00      	nop
 80012ba:	3738      	adds	r7, #56	@ 0x38
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	240003a8 	.word	0x240003a8
 80012c4:	40000800 	.word	0x40000800

080012c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08e      	sub	sp, #56	@ 0x38
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e8:	463b      	mov	r3, r7
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
 80012f6:	615a      	str	r2, [r3, #20]
 80012f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012fa:	4b32      	ldr	r3, [pc, #200]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 80012fc:	4a32      	ldr	r2, [pc, #200]	@ (80013c8 <MX_TIM5_Init+0x100>)
 80012fe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001300:	4b30      	ldr	r3, [pc, #192]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001302:	2200      	movs	r2, #0
 8001304:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001306:	4b2f      	ldr	r3, [pc, #188]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 24000-1;
 800130c:	4b2d      	ldr	r3, [pc, #180]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800130e:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001312:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001314:	4b2b      	ldr	r3, [pc, #172]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800131a:	4b2a      	ldr	r3, [pc, #168]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800131c:	2280      	movs	r2, #128	@ 0x80
 800131e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001320:	4828      	ldr	r0, [pc, #160]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001322:	f007 faa5 	bl	8008870 <HAL_TIM_Base_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800132c:	f000 fee2 	bl	80020f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001330:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001334:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001336:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800133a:	4619      	mov	r1, r3
 800133c:	4821      	ldr	r0, [pc, #132]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800133e:	f007 ff59 	bl	80091f4 <HAL_TIM_ConfigClockSource>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001348:	f000 fed4 	bl	80020f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800134c:	481d      	ldr	r0, [pc, #116]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800134e:	f007 fbcf 	bl	8008af0 <HAL_TIM_PWM_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001358:	f000 fecc 	bl	80020f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	4816      	ldr	r0, [pc, #88]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800136c:	f008 fca2 	bl	8009cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001376:	f000 febd 	bl	80020f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137a:	2360      	movs	r3, #96	@ 0x60
 800137c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800138a:	463b      	mov	r3, r7
 800138c:	2204      	movs	r2, #4
 800138e:	4619      	mov	r1, r3
 8001390:	480c      	ldr	r0, [pc, #48]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001392:	f007 fe1b 	bl	8008fcc <HAL_TIM_PWM_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800139c:	f000 feaa 	bl	80020f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013a0:	463b      	mov	r3, r7
 80013a2:	2208      	movs	r2, #8
 80013a4:	4619      	mov	r1, r3
 80013a6:	4807      	ldr	r0, [pc, #28]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 80013a8:	f007 fe10 	bl	8008fcc <HAL_TIM_PWM_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 80013b2:	f000 fe9f 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80013b6:	4803      	ldr	r0, [pc, #12]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 80013b8:	f001 f91e 	bl	80025f8 <HAL_TIM_MspPostInit>

}
 80013bc:	bf00      	nop
 80013be:	3738      	adds	r7, #56	@ 0x38
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	240003f4 	.word	0x240003f4
 80013c8:	40000c00 	.word	0x40000c00

080013cc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b096      	sub	sp, #88	@ 0x58
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]
 80013ee:	615a      	str	r2, [r3, #20]
 80013f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	222c      	movs	r2, #44	@ 0x2c
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f00b f894 	bl	800c526 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80013fe:	4b38      	ldr	r3, [pc, #224]	@ (80014e0 <MX_TIM8_Init+0x114>)
 8001400:	4a38      	ldr	r2, [pc, #224]	@ (80014e4 <MX_TIM8_Init+0x118>)
 8001402:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001404:	4b36      	ldr	r3, [pc, #216]	@ (80014e0 <MX_TIM8_Init+0x114>)
 8001406:	2200      	movs	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140a:	4b35      	ldr	r3, [pc, #212]	@ (80014e0 <MX_TIM8_Init+0x114>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 24000-1;
 8001410:	4b33      	ldr	r3, [pc, #204]	@ (80014e0 <MX_TIM8_Init+0x114>)
 8001412:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001416:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001418:	4b31      	ldr	r3, [pc, #196]	@ (80014e0 <MX_TIM8_Init+0x114>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800141e:	4b30      	ldr	r3, [pc, #192]	@ (80014e0 <MX_TIM8_Init+0x114>)
 8001420:	2200      	movs	r2, #0
 8001422:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001424:	4b2e      	ldr	r3, [pc, #184]	@ (80014e0 <MX_TIM8_Init+0x114>)
 8001426:	2280      	movs	r2, #128	@ 0x80
 8001428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800142a:	482d      	ldr	r0, [pc, #180]	@ (80014e0 <MX_TIM8_Init+0x114>)
 800142c:	f007 fb60 	bl	8008af0 <HAL_TIM_PWM_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001436:	f000 fe5d 	bl	80020f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001446:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800144a:	4619      	mov	r1, r3
 800144c:	4824      	ldr	r0, [pc, #144]	@ (80014e0 <MX_TIM8_Init+0x114>)
 800144e:	f008 fc31 	bl	8009cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001458:	f000 fe4c 	bl	80020f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145c:	2360      	movs	r3, #96	@ 0x60
 800145e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001464:	2300      	movs	r3, #0
 8001466:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001470:	2300      	movs	r3, #0
 8001472:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001474:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001478:	220c      	movs	r2, #12
 800147a:	4619      	mov	r1, r3
 800147c:	4818      	ldr	r0, [pc, #96]	@ (80014e0 <MX_TIM8_Init+0x114>)
 800147e:	f007 fda5 	bl	8008fcc <HAL_TIM_PWM_ConfigChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001488:	f000 fe34 	bl	80020f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	4619      	mov	r1, r3
 80014c0:	4807      	ldr	r0, [pc, #28]	@ (80014e0 <MX_TIM8_Init+0x114>)
 80014c2:	f008 fc85 	bl	8009dd0 <HAL_TIMEx_ConfigBreakDeadTime>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM8_Init+0x104>
  {
    Error_Handler();
 80014cc:	f000 fe12 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80014d0:	4803      	ldr	r0, [pc, #12]	@ (80014e0 <MX_TIM8_Init+0x114>)
 80014d2:	f001 f891 	bl	80025f8 <HAL_TIM_MspPostInit>

}
 80014d6:	bf00      	nop
 80014d8:	3758      	adds	r7, #88	@ 0x58
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	24000440 	.word	0x24000440
 80014e4:	40010400 	.word	0x40010400

080014e8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08e      	sub	sp, #56	@ 0x38
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001508:	463b      	mov	r3, r7
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	615a      	str	r2, [r3, #20]
 8001518:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800151a:	4b2d      	ldr	r3, [pc, #180]	@ (80015d0 <MX_TIM12_Init+0xe8>)
 800151c:	4a2d      	ldr	r2, [pc, #180]	@ (80015d4 <MX_TIM12_Init+0xec>)
 800151e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001520:	4b2b      	ldr	r3, [pc, #172]	@ (80015d0 <MX_TIM12_Init+0xe8>)
 8001522:	2200      	movs	r2, #0
 8001524:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001526:	4b2a      	ldr	r3, [pc, #168]	@ (80015d0 <MX_TIM12_Init+0xe8>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 24000-1;
 800152c:	4b28      	ldr	r3, [pc, #160]	@ (80015d0 <MX_TIM12_Init+0xe8>)
 800152e:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001532:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001534:	4b26      	ldr	r3, [pc, #152]	@ (80015d0 <MX_TIM12_Init+0xe8>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800153a:	4b25      	ldr	r3, [pc, #148]	@ (80015d0 <MX_TIM12_Init+0xe8>)
 800153c:	2280      	movs	r2, #128	@ 0x80
 800153e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001540:	4823      	ldr	r0, [pc, #140]	@ (80015d0 <MX_TIM12_Init+0xe8>)
 8001542:	f007 f995 	bl	8008870 <HAL_TIM_Base_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM12_Init+0x68>
  {
    Error_Handler();
 800154c:	f000 fdd2 	bl	80020f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001550:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001554:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001556:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800155a:	4619      	mov	r1, r3
 800155c:	481c      	ldr	r0, [pc, #112]	@ (80015d0 <MX_TIM12_Init+0xe8>)
 800155e:	f007 fe49 	bl	80091f4 <HAL_TIM_ConfigClockSource>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM12_Init+0x84>
  {
    Error_Handler();
 8001568:	f000 fdc4 	bl	80020f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800156c:	4818      	ldr	r0, [pc, #96]	@ (80015d0 <MX_TIM12_Init+0xe8>)
 800156e:	f007 fabf 	bl	8008af0 <HAL_TIM_PWM_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM12_Init+0x94>
  {
    Error_Handler();
 8001578:	f000 fdbc 	bl	80020f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	4811      	ldr	r0, [pc, #68]	@ (80015d0 <MX_TIM12_Init+0xe8>)
 800158c:	f008 fb92 	bl	8009cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 8001596:	f000 fdad 	bl	80020f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800159a:	2360      	movs	r3, #96	@ 0x60
 800159c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015aa:	463b      	mov	r3, r7
 80015ac:	2204      	movs	r2, #4
 80015ae:	4619      	mov	r1, r3
 80015b0:	4807      	ldr	r0, [pc, #28]	@ (80015d0 <MX_TIM12_Init+0xe8>)
 80015b2:	f007 fd0b 	bl	8008fcc <HAL_TIM_PWM_ConfigChannel>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM12_Init+0xd8>
  {
    Error_Handler();
 80015bc:	f000 fd9a 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80015c0:	4803      	ldr	r0, [pc, #12]	@ (80015d0 <MX_TIM12_Init+0xe8>)
 80015c2:	f001 f819 	bl	80025f8 <HAL_TIM_MspPostInit>

}
 80015c6:	bf00      	nop
 80015c8:	3738      	adds	r7, #56	@ 0x38
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2400048c 	.word	0x2400048c
 80015d4:	40001800 	.word	0x40001800

080015d8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
 80015ec:	615a      	str	r2, [r3, #20]
 80015ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80015f0:	4b1e      	ldr	r3, [pc, #120]	@ (800166c <MX_TIM13_Init+0x94>)
 80015f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001670 <MX_TIM13_Init+0x98>)
 80015f4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80015f6:	4b1d      	ldr	r3, [pc, #116]	@ (800166c <MX_TIM13_Init+0x94>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <MX_TIM13_Init+0x94>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 24000-1;
 8001602:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <MX_TIM13_Init+0x94>)
 8001604:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001608:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160a:	4b18      	ldr	r3, [pc, #96]	@ (800166c <MX_TIM13_Init+0x94>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001610:	4b16      	ldr	r3, [pc, #88]	@ (800166c <MX_TIM13_Init+0x94>)
 8001612:	2280      	movs	r2, #128	@ 0x80
 8001614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001616:	4815      	ldr	r0, [pc, #84]	@ (800166c <MX_TIM13_Init+0x94>)
 8001618:	f007 f92a 	bl	8008870 <HAL_TIM_Base_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001622:	f000 fd67 	bl	80020f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001626:	4811      	ldr	r0, [pc, #68]	@ (800166c <MX_TIM13_Init+0x94>)
 8001628:	f007 fa62 	bl	8008af0 <HAL_TIM_PWM_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001632:	f000 fd5f 	bl	80020f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001636:	2360      	movs	r3, #96	@ 0x60
 8001638:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2200      	movs	r2, #0
 800164a:	4619      	mov	r1, r3
 800164c:	4807      	ldr	r0, [pc, #28]	@ (800166c <MX_TIM13_Init+0x94>)
 800164e:	f007 fcbd 	bl	8008fcc <HAL_TIM_PWM_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001658:	f000 fd4c 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800165c:	4803      	ldr	r0, [pc, #12]	@ (800166c <MX_TIM13_Init+0x94>)
 800165e:	f000 ffcb 	bl	80025f8 <HAL_TIM_MspPostInit>

}
 8001662:	bf00      	nop
 8001664:	3720      	adds	r7, #32
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	240004d8 	.word	0x240004d8
 8001670:	40001c00 	.word	0x40001c00

08001674 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
 8001688:	615a      	str	r2, [r3, #20]
 800168a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800168c:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <MX_TIM14_Init+0x94>)
 800168e:	4a1f      	ldr	r2, [pc, #124]	@ (800170c <MX_TIM14_Init+0x98>)
 8001690:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001692:	4b1d      	ldr	r3, [pc, #116]	@ (8001708 <MX_TIM14_Init+0x94>)
 8001694:	2200      	movs	r2, #0
 8001696:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001698:	4b1b      	ldr	r3, [pc, #108]	@ (8001708 <MX_TIM14_Init+0x94>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 24000-1;
 800169e:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <MX_TIM14_Init+0x94>)
 80016a0:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80016a4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a6:	4b18      	ldr	r3, [pc, #96]	@ (8001708 <MX_TIM14_Init+0x94>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016ac:	4b16      	ldr	r3, [pc, #88]	@ (8001708 <MX_TIM14_Init+0x94>)
 80016ae:	2280      	movs	r2, #128	@ 0x80
 80016b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80016b2:	4815      	ldr	r0, [pc, #84]	@ (8001708 <MX_TIM14_Init+0x94>)
 80016b4:	f007 f8dc 	bl	8008870 <HAL_TIM_Base_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80016be:	f000 fd19 	bl	80020f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80016c2:	4811      	ldr	r0, [pc, #68]	@ (8001708 <MX_TIM14_Init+0x94>)
 80016c4:	f007 fa14 	bl	8008af0 <HAL_TIM_PWM_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80016ce:	f000 fd11 	bl	80020f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d2:	2360      	movs	r3, #96	@ 0x60
 80016d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	2200      	movs	r2, #0
 80016e6:	4619      	mov	r1, r3
 80016e8:	4807      	ldr	r0, [pc, #28]	@ (8001708 <MX_TIM14_Init+0x94>)
 80016ea:	f007 fc6f 	bl	8008fcc <HAL_TIM_PWM_ConfigChannel>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80016f4:	f000 fcfe 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80016f8:	4803      	ldr	r0, [pc, #12]	@ (8001708 <MX_TIM14_Init+0x94>)
 80016fa:	f000 ff7d 	bl	80025f8 <HAL_TIM_MspPostInit>

}
 80016fe:	bf00      	nop
 8001700:	3720      	adds	r7, #32
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	24000524 	.word	0x24000524
 800170c:	40002000 	.word	0x40002000

08001710 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b09a      	sub	sp, #104	@ 0x68
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001716:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001724:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001730:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
 8001740:	615a      	str	r2, [r3, #20]
 8001742:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	222c      	movs	r2, #44	@ 0x2c
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f00a feeb 	bl	800c526 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001750:	4b45      	ldr	r3, [pc, #276]	@ (8001868 <MX_TIM15_Init+0x158>)
 8001752:	4a46      	ldr	r2, [pc, #280]	@ (800186c <MX_TIM15_Init+0x15c>)
 8001754:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001756:	4b44      	ldr	r3, [pc, #272]	@ (8001868 <MX_TIM15_Init+0x158>)
 8001758:	2200      	movs	r2, #0
 800175a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175c:	4b42      	ldr	r3, [pc, #264]	@ (8001868 <MX_TIM15_Init+0x158>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 24000-1;
 8001762:	4b41      	ldr	r3, [pc, #260]	@ (8001868 <MX_TIM15_Init+0x158>)
 8001764:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001768:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176a:	4b3f      	ldr	r3, [pc, #252]	@ (8001868 <MX_TIM15_Init+0x158>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001770:	4b3d      	ldr	r3, [pc, #244]	@ (8001868 <MX_TIM15_Init+0x158>)
 8001772:	2200      	movs	r2, #0
 8001774:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001776:	4b3c      	ldr	r3, [pc, #240]	@ (8001868 <MX_TIM15_Init+0x158>)
 8001778:	2280      	movs	r2, #128	@ 0x80
 800177a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800177c:	483a      	ldr	r0, [pc, #232]	@ (8001868 <MX_TIM15_Init+0x158>)
 800177e:	f007 f877 	bl	8008870 <HAL_TIM_Base_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001788:	f000 fcb4 	bl	80020f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800178c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001790:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001792:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001796:	4619      	mov	r1, r3
 8001798:	4833      	ldr	r0, [pc, #204]	@ (8001868 <MX_TIM15_Init+0x158>)
 800179a:	f007 fd2b 	bl	80091f4 <HAL_TIM_ConfigClockSource>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80017a4:	f000 fca6 	bl	80020f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80017a8:	482f      	ldr	r0, [pc, #188]	@ (8001868 <MX_TIM15_Init+0x158>)
 80017aa:	f007 f9a1 	bl	8008af0 <HAL_TIM_PWM_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80017b4:	f000 fc9e 	bl	80020f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b8:	2300      	movs	r3, #0
 80017ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80017c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80017c4:	4619      	mov	r1, r3
 80017c6:	4828      	ldr	r0, [pc, #160]	@ (8001868 <MX_TIM15_Init+0x158>)
 80017c8:	f008 fa74 	bl	8009cb4 <HAL_TIMEx_MasterConfigSynchronization>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80017d2:	f000 fc8f 	bl	80020f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d6:	2360      	movs	r3, #96	@ 0x60
 80017d8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017de:	2300      	movs	r3, #0
 80017e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017e2:	2300      	movs	r3, #0
 80017e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017ee:	2300      	movs	r3, #0
 80017f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017f6:	2200      	movs	r2, #0
 80017f8:	4619      	mov	r1, r3
 80017fa:	481b      	ldr	r0, [pc, #108]	@ (8001868 <MX_TIM15_Init+0x158>)
 80017fc:	f007 fbe6 	bl	8008fcc <HAL_TIM_PWM_ConfigChannel>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8001806:	f000 fc75 	bl	80020f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800180a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800180e:	2204      	movs	r2, #4
 8001810:	4619      	mov	r1, r3
 8001812:	4815      	ldr	r0, [pc, #84]	@ (8001868 <MX_TIM15_Init+0x158>)
 8001814:	f007 fbda 	bl	8008fcc <HAL_TIM_PWM_ConfigChannel>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM15_Init+0x112>
  {
    Error_Handler();
 800181e:	f000 fc69 	bl	80020f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001836:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800183a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	4619      	mov	r1, r3
 8001848:	4807      	ldr	r0, [pc, #28]	@ (8001868 <MX_TIM15_Init+0x158>)
 800184a:	f008 fac1 	bl	8009dd0 <HAL_TIMEx_ConfigBreakDeadTime>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM15_Init+0x148>
  {
    Error_Handler();
 8001854:	f000 fc4e 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001858:	4803      	ldr	r0, [pc, #12]	@ (8001868 <MX_TIM15_Init+0x158>)
 800185a:	f000 fecd 	bl	80025f8 <HAL_TIM_MspPostInit>

}
 800185e:	bf00      	nop
 8001860:	3768      	adds	r7, #104	@ 0x68
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	24000570 	.word	0x24000570
 800186c:	40014000 	.word	0x40014000

08001870 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b092      	sub	sp, #72	@ 0x48
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001876:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]
 8001886:	615a      	str	r2, [r3, #20]
 8001888:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800188a:	463b      	mov	r3, r7
 800188c:	222c      	movs	r2, #44	@ 0x2c
 800188e:	2100      	movs	r1, #0
 8001890:	4618      	mov	r0, r3
 8001892:	f00a fe48 	bl	800c526 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001896:	4b31      	ldr	r3, [pc, #196]	@ (800195c <MX_TIM16_Init+0xec>)
 8001898:	4a31      	ldr	r2, [pc, #196]	@ (8001960 <MX_TIM16_Init+0xf0>)
 800189a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800189c:	4b2f      	ldr	r3, [pc, #188]	@ (800195c <MX_TIM16_Init+0xec>)
 800189e:	2200      	movs	r2, #0
 80018a0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a2:	4b2e      	ldr	r3, [pc, #184]	@ (800195c <MX_TIM16_Init+0xec>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 24000-1;
 80018a8:	4b2c      	ldr	r3, [pc, #176]	@ (800195c <MX_TIM16_Init+0xec>)
 80018aa:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80018ae:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b0:	4b2a      	ldr	r3, [pc, #168]	@ (800195c <MX_TIM16_Init+0xec>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018b6:	4b29      	ldr	r3, [pc, #164]	@ (800195c <MX_TIM16_Init+0xec>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018bc:	4b27      	ldr	r3, [pc, #156]	@ (800195c <MX_TIM16_Init+0xec>)
 80018be:	2280      	movs	r2, #128	@ 0x80
 80018c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018c2:	4826      	ldr	r0, [pc, #152]	@ (800195c <MX_TIM16_Init+0xec>)
 80018c4:	f006 ffd4 	bl	8008870 <HAL_TIM_Base_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80018ce:	f000 fc11 	bl	80020f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80018d2:	4822      	ldr	r0, [pc, #136]	@ (800195c <MX_TIM16_Init+0xec>)
 80018d4:	f007 f90c 	bl	8008af0 <HAL_TIM_PWM_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80018de:	f000 fc09 	bl	80020f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e2:	2360      	movs	r3, #96	@ 0x60
 80018e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ea:	2300      	movs	r3, #0
 80018ec:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018ee:	2300      	movs	r3, #0
 80018f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001902:	2200      	movs	r2, #0
 8001904:	4619      	mov	r1, r3
 8001906:	4815      	ldr	r0, [pc, #84]	@ (800195c <MX_TIM16_Init+0xec>)
 8001908:	f007 fb60 	bl	8008fcc <HAL_TIM_PWM_ConfigChannel>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001912:	f000 fbef 	bl	80020f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800192a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800192e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001938:	463b      	mov	r3, r7
 800193a:	4619      	mov	r1, r3
 800193c:	4807      	ldr	r0, [pc, #28]	@ (800195c <MX_TIM16_Init+0xec>)
 800193e:	f008 fa47 	bl	8009dd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001948:	f000 fbd4 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800194c:	4803      	ldr	r0, [pc, #12]	@ (800195c <MX_TIM16_Init+0xec>)
 800194e:	f000 fe53 	bl	80025f8 <HAL_TIM_MspPostInit>

}
 8001952:	bf00      	nop
 8001954:	3748      	adds	r7, #72	@ 0x48
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	240005bc 	.word	0x240005bc
 8001960:	40014400 	.word	0x40014400

08001964 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001968:	4b22      	ldr	r3, [pc, #136]	@ (80019f4 <MX_UART4_Init+0x90>)
 800196a:	4a23      	ldr	r2, [pc, #140]	@ (80019f8 <MX_UART4_Init+0x94>)
 800196c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800196e:	4b21      	ldr	r3, [pc, #132]	@ (80019f4 <MX_UART4_Init+0x90>)
 8001970:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001974:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001976:	4b1f      	ldr	r3, [pc, #124]	@ (80019f4 <MX_UART4_Init+0x90>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800197c:	4b1d      	ldr	r3, [pc, #116]	@ (80019f4 <MX_UART4_Init+0x90>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001982:	4b1c      	ldr	r3, [pc, #112]	@ (80019f4 <MX_UART4_Init+0x90>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001988:	4b1a      	ldr	r3, [pc, #104]	@ (80019f4 <MX_UART4_Init+0x90>)
 800198a:	220c      	movs	r2, #12
 800198c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198e:	4b19      	ldr	r3, [pc, #100]	@ (80019f4 <MX_UART4_Init+0x90>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001994:	4b17      	ldr	r3, [pc, #92]	@ (80019f4 <MX_UART4_Init+0x90>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800199a:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <MX_UART4_Init+0x90>)
 800199c:	2200      	movs	r2, #0
 800199e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019a0:	4b14      	ldr	r3, [pc, #80]	@ (80019f4 <MX_UART4_Init+0x90>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a6:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <MX_UART4_Init+0x90>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019ac:	4811      	ldr	r0, [pc, #68]	@ (80019f4 <MX_UART4_Init+0x90>)
 80019ae:	f008 faab 	bl	8009f08 <HAL_UART_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80019b8:	f000 fb9c 	bl	80020f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019bc:	2100      	movs	r1, #0
 80019be:	480d      	ldr	r0, [pc, #52]	@ (80019f4 <MX_UART4_Init+0x90>)
 80019c0:	f009 ff7a 	bl	800b8b8 <HAL_UARTEx_SetTxFifoThreshold>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80019ca:	f000 fb93 	bl	80020f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ce:	2100      	movs	r1, #0
 80019d0:	4808      	ldr	r0, [pc, #32]	@ (80019f4 <MX_UART4_Init+0x90>)
 80019d2:	f009 ffaf 	bl	800b934 <HAL_UARTEx_SetRxFifoThreshold>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80019dc:	f000 fb8a 	bl	80020f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80019e0:	4804      	ldr	r0, [pc, #16]	@ (80019f4 <MX_UART4_Init+0x90>)
 80019e2:	f009 ff30 	bl	800b846 <HAL_UARTEx_DisableFifoMode>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80019ec:	f000 fb82 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	24000608 	.word	0x24000608
 80019f8:	40004c00 	.word	0x40004c00

080019fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	@ 0x30
 8001a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a02:	f107 031c 	add.w	r3, r7, #28
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
 8001a10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a12:	4b59      	ldr	r3, [pc, #356]	@ (8001b78 <MX_GPIO_Init+0x17c>)
 8001a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a18:	4a57      	ldr	r2, [pc, #348]	@ (8001b78 <MX_GPIO_Init+0x17c>)
 8001a1a:	f043 0310 	orr.w	r3, r3, #16
 8001a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a22:	4b55      	ldr	r3, [pc, #340]	@ (8001b78 <MX_GPIO_Init+0x17c>)
 8001a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a28:	f003 0310 	and.w	r3, r3, #16
 8001a2c:	61bb      	str	r3, [r7, #24]
 8001a2e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a30:	4b51      	ldr	r3, [pc, #324]	@ (8001b78 <MX_GPIO_Init+0x17c>)
 8001a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a36:	4a50      	ldr	r2, [pc, #320]	@ (8001b78 <MX_GPIO_Init+0x17c>)
 8001a38:	f043 0304 	orr.w	r3, r3, #4
 8001a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a40:	4b4d      	ldr	r3, [pc, #308]	@ (8001b78 <MX_GPIO_Init+0x17c>)
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a4e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b78 <MX_GPIO_Init+0x17c>)
 8001a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a54:	4a48      	ldr	r2, [pc, #288]	@ (8001b78 <MX_GPIO_Init+0x17c>)
 8001a56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a5e:	4b46      	ldr	r3, [pc, #280]	@ (8001b78 <MX_GPIO_Init+0x17c>)
 8001a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6c:	4b42      	ldr	r3, [pc, #264]	@ (8001b78 <MX_GPIO_Init+0x17c>)
 8001a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a72:	4a41      	ldr	r2, [pc, #260]	@ (8001b78 <MX_GPIO_Init+0x17c>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a7c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b78 <MX_GPIO_Init+0x17c>)
 8001a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b78 <MX_GPIO_Init+0x17c>)
 8001a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a90:	4a39      	ldr	r2, [pc, #228]	@ (8001b78 <MX_GPIO_Init+0x17c>)
 8001a92:	f043 0302 	orr.w	r3, r3, #2
 8001a96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a9a:	4b37      	ldr	r3, [pc, #220]	@ (8001b78 <MX_GPIO_Init+0x17c>)
 8001a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa8:	4b33      	ldr	r3, [pc, #204]	@ (8001b78 <MX_GPIO_Init+0x17c>)
 8001aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aae:	4a32      	ldr	r2, [pc, #200]	@ (8001b78 <MX_GPIO_Init+0x17c>)
 8001ab0:	f043 0308 	orr.w	r3, r3, #8
 8001ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ab8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b78 <MX_GPIO_Init+0x17c>)
 8001aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f249 519f 	movw	r1, #38303	@ 0x959f
 8001acc:	482b      	ldr	r0, [pc, #172]	@ (8001b7c <MX_GPIO_Init+0x180>)
 8001ace:	f002 fb2b 	bl	8004128 <HAL_GPIO_WritePin>
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001ad8:	4829      	ldr	r0, [pc, #164]	@ (8001b80 <MX_GPIO_Init+0x184>)
 8001ada:	f002 fb25 	bl	8004128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin|SPI2_NSS_Pin|QUADSPI_BK1_NCS_Pin, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
 8001ae4:	4827      	ldr	r0, [pc, #156]	@ (8001b84 <MX_GPIO_Init+0x188>)
 8001ae6:	f002 fb1f 	bl	8004128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 8001aea:	2200      	movs	r2, #0
 8001aec:	f640 71f7 	movw	r1, #4087	@ 0xff7
 8001af0:	4825      	ldr	r0, [pc, #148]	@ (8001b88 <MX_GPIO_Init+0x18c>)
 8001af2:	f002 fb19 	bl	8004128 <HAL_GPIO_WritePin>
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : TIM1_CH3_PH_Pin TIM1_CH4_PH_Pin TIM2_CH1_PH_Pin TIM8_CH4_PH_Pin
                           TIM12_CH2_PH_Pin TIM13_CH1_PH_Pin TIM14_CH1_PH_Pin TIM15_CH1_PH_Pin
                           TIM1_CH1_PH_Pin TIM1_CH2_PH_Pin */
  GPIO_InitStruct.Pin = TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 8001af6:	f249 539f 	movw	r3, #38303	@ 0x959f
 8001afa:	61fb      	str	r3, [r7, #28]
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afc:	2301      	movs	r3, #1
 8001afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b08:	f107 031c 	add.w	r3, r7, #28
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	481b      	ldr	r0, [pc, #108]	@ (8001b7c <MX_GPIO_Init+0x180>)
 8001b10:	f002 f95a 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH4_PH_Pin TIM5_CH2_PH_Pin TIM5_CH3_PH_Pin TIM4_CH3_PH_Pin */
  GPIO_InitStruct.Pin = TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin;
 8001b14:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4814      	ldr	r0, [pc, #80]	@ (8001b80 <MX_GPIO_Init+0x184>)
 8001b2e:	f002 f94b 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH1_PH_Pin TIM4_CH2_PH_Pin SPI2_NSS_Pin QUADSPI_BK1_NCS_Pin */
  GPIO_InitStruct.Pin = TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin|SPI2_NSS_Pin|QUADSPI_BK1_NCS_Pin;
 8001b32:	f44f 6345 	mov.w	r3, #3152	@ 0xc50
 8001b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	480e      	ldr	r0, [pc, #56]	@ (8001b84 <MX_GPIO_Init+0x188>)
 8001b4c:	f002 f93c 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HRTIM_CHC1_PH_Pin HRTIM_CHC2_PH_Pin HRTIM_CHD1_PH_Pin HRTIM_CHD2_PH_Pin
                           TIM15_CH2_PH_Pin TIM16_CH1_PH_Pin LPTIM1_OUT_PH_Pin HRTIM_CHA1_PH_Pin
                           HRTIM_CHA2_PH_Pin HRTIM_CHB1_PH_Pin HRTIM_CHB2_PH_Pin */
  GPIO_InitStruct.Pin = HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 8001b50:	f640 73f7 	movw	r3, #4087	@ 0xff7
 8001b54:	61fb      	str	r3, [r7, #28]
                          |TIM15_CH2_PH_Pin|TIM16_CH1_PH_Pin|LPTIM1_OUT_PH_Pin|HRTIM_CHA1_PH_Pin
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b62:	f107 031c 	add.w	r3, r7, #28
 8001b66:	4619      	mov	r1, r3
 8001b68:	4807      	ldr	r0, [pc, #28]	@ (8001b88 <MX_GPIO_Init+0x18c>)
 8001b6a:	f002 f92d 	bl	8003dc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b6e:	bf00      	nop
 8001b70:	3730      	adds	r7, #48	@ 0x30
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	58024400 	.word	0x58024400
 8001b7c:	58021000 	.word	0x58021000
 8001b80:	58020800 	.word	0x58020800
 8001b84:	58020400 	.word	0x58020400
 8001b88:	58020c00 	.word	0x58020c00
 8001b8c:	00000000 	.word	0x00000000

08001b90 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	static int i = 0;  // index for actuator update
	static int t = 0; // variable to track time
	const int period = 10; // number of timer rollovers between updates
 8001b98:	230a      	movs	r3, #10
 8001b9a:	617b      	str	r3, [r7, #20]
	const double step = 0.3;// max step size in volts
 8001b9c:	a327      	add	r3, pc, #156	@ (adr r3, 8001c3c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	//Used to account for period in time clicks for UART Output
		//sys_timer+= 24000;

	//Used to account for period in time-scale for UART Output
		period_ticks ++;
 8001ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	3301      	adds	r3, #1
 8001bac:	4a1c      	ldr	r2, [pc, #112]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001bae:	6013      	str	r3, [r2, #0]

    if (htim==&htim1){
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c24 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d12d      	bne.n	8001c14 <HAL_TIM_PeriodElapsedCallback+0x84>
    	t+=1;
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c28 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	4a1a      	ldr	r2, [pc, #104]	@ (8001c28 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001bc0:	6013      	str	r3, [r2, #0]
    	if(t%period == 0)
 8001bc2:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	fb93 f2f2 	sdiv	r2, r3, r2
 8001bcc:	6979      	ldr	r1, [r7, #20]
 8001bce:	fb01 f202 	mul.w	r2, r1, r2
 8001bd2:	1a9b      	subs	r3, r3, r2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d11d      	bne.n	8001c14 <HAL_TIM_PeriodElapsedCallback+0x84>
    	{
    		if(i>=SIN_PERIOD) i = 0;
 8001bd8:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001be0:	db02      	blt.n	8001be8 <HAL_TIM_PeriodElapsedCallback+0x58>
 8001be2:	4b12      	ldr	r3, [pc, #72]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
    		//update the output
    		ref = sine_vals[i]*step;
 8001be8:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a10      	ldr	r2, [pc, #64]	@ (8001c30 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	ed93 6b00 	vldr	d6, [r3]
 8001bf6:	ed97 7b02 	vldr	d7, [r7, #8]
 8001bfa:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001c34 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001c00:	ed83 7b00 	vstr	d7, [r3]
			// inform main that the actuators need an update
    		i+=1;
 8001c04:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	4a08      	ldr	r2, [pc, #32]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001c0c:	6013      	str	r3, [r2, #0]
			ctrl_tmr_expired = TRUE;
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
    	}
	}

}
 8001c14:	bf00      	nop
 8001c16:	371c      	adds	r7, #28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	240025e8 	.word	0x240025e8
 8001c24:	24000310 	.word	0x24000310
 8001c28:	2400262c 	.word	0x2400262c
 8001c2c:	24002630 	.word	0x24002630
 8001c30:	240006a8 	.word	0x240006a8
 8001c34:	240006a0 	.word	0x240006a0
 8001c38:	2400069c 	.word	0x2400069c
 8001c3c:	33333333 	.word	0x33333333
 8001c40:	3fd33333 	.word	0x3fd33333
 8001c44:	00000000 	.word	0x00000000

08001c48 <control_update>:

static void control_update(double ref)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	ed87 0b00 	vstr	d0, [r7]
	// sign bit of the command fed to phase input on the h-bridge
	static int phase=GPIO_PIN_SET;
	//int new_phase = {0};
	static uint16_t dutycycle=0;
	uint16_t new_dc;
	double absref = 0;
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// indicate interrupt operation
//	HAL_GPIO_TogglePin(UPDATE_GPIO_Port, UPDATE_Pin);

	// set the sign of the move (phase)
	if(ref < 0){
 8001c5e:	ed97 7b00 	vldr	d7, [r7]
 8001c62:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6a:	d505      	bpl.n	8001c78 <control_update+0x30>
		phase = GPIO_PIN_RESET; // reverse direction
 8001c6c:	4b01      	ldr	r3, [pc, #4]	@ (8001c74 <control_update+0x2c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	e004      	b.n	8001c7e <control_update+0x36>
 8001c74:	24000000 	.word	0x24000000
	} else {
		phase = GPIO_PIN_SET; //forward direction
 8001c78:	4ba3      	ldr	r3, [pc, #652]	@ (8001f08 <control_update+0x2c0>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]
	}
	// update the phase if it has changed
//	if(new_phase != phase){

		//Timer 1
		HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, phase);  //Starts the phase generation on each of the pins (Channels)
 8001c7e:	4ba2      	ldr	r3, [pc, #648]	@ (8001f08 <control_update+0x2c0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	2101      	movs	r1, #1
 8001c88:	48a0      	ldr	r0, [pc, #640]	@ (8001f0c <control_update+0x2c4>)
 8001c8a:	f002 fa4d 	bl	8004128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, phase);
 8001c8e:	4b9e      	ldr	r3, [pc, #632]	@ (8001f08 <control_update+0x2c0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	2102      	movs	r1, #2
 8001c98:	489c      	ldr	r0, [pc, #624]	@ (8001f0c <control_update+0x2c4>)
 8001c9a:	f002 fa45 	bl	8004128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, phase);
 8001c9e:	4b9a      	ldr	r3, [pc, #616]	@ (8001f08 <control_update+0x2c0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2104      	movs	r1, #4
 8001ca8:	4898      	ldr	r0, [pc, #608]	@ (8001f0c <control_update+0x2c4>)
 8001caa:	f002 fa3d 	bl	8004128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, phase);
 8001cae:	4b96      	ldr	r3, [pc, #600]	@ (8001f08 <control_update+0x2c0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	2108      	movs	r1, #8
 8001cb8:	4894      	ldr	r0, [pc, #592]	@ (8001f0c <control_update+0x2c4>)
 8001cba:	f002 fa35 	bl	8004128 <HAL_GPIO_WritePin>
		//End Timer 1


		//Timer 2
		HAL_GPIO_WritePin(TIM2_CH1_PH_GPIO_Port, TIM2_CH1_PH_Pin, phase);
 8001cbe:	4b92      	ldr	r3, [pc, #584]	@ (8001f08 <control_update+0x2c0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	2110      	movs	r1, #16
 8001cc8:	4890      	ldr	r0, [pc, #576]	@ (8001f0c <control_update+0x2c4>)
 8001cca:	f002 fa2d 	bl	8004128 <HAL_GPIO_WritePin>
		//End Timer 2

		//Timer 4
		HAL_GPIO_WritePin(TIM4_CH1_PH_GPIO_Port, TIM4_CH1_PH_Pin, phase);
 8001cce:	4b8e      	ldr	r3, [pc, #568]	@ (8001f08 <control_update+0x2c0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cda:	488d      	ldr	r0, [pc, #564]	@ (8001f10 <control_update+0x2c8>)
 8001cdc:	f002 fa24 	bl	8004128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM4_CH2_PH_GPIO_Port, TIM4_CH2_PH_Pin, phase);
 8001ce0:	4b89      	ldr	r3, [pc, #548]	@ (8001f08 <control_update+0x2c0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cec:	4888      	ldr	r0, [pc, #544]	@ (8001f10 <control_update+0x2c8>)
 8001cee:	f002 fa1b 	bl	8004128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM4_CH3_PH_GPIO_Port, TIM4_CH3_PH_Pin, phase);
 8001cf2:	4b85      	ldr	r3, [pc, #532]	@ (8001f08 <control_update+0x2c0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cfe:	4885      	ldr	r0, [pc, #532]	@ (8001f14 <control_update+0x2cc>)
 8001d00:	f002 fa12 	bl	8004128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM4_CH4_PH_GPIO_Port, TIM4_CH4_PH_Pin, phase);
 8001d04:	4b80      	ldr	r3, [pc, #512]	@ (8001f08 <control_update+0x2c0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d10:	4880      	ldr	r0, [pc, #512]	@ (8001f14 <control_update+0x2cc>)
 8001d12:	f002 fa09 	bl	8004128 <HAL_GPIO_WritePin>
		//End Timer 4


		//Timer 5
		HAL_GPIO_WritePin(TIM5_CH2_PH_GPIO_Port, TIM5_CH2_PH_Pin, phase);
 8001d16:	4b7c      	ldr	r3, [pc, #496]	@ (8001f08 <control_update+0x2c0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d22:	487c      	ldr	r0, [pc, #496]	@ (8001f14 <control_update+0x2cc>)
 8001d24:	f002 fa00 	bl	8004128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM5_CH3_PH_GPIO_Port, TIM5_CH3_PH_Pin, phase);
 8001d28:	4b77      	ldr	r3, [pc, #476]	@ (8001f08 <control_update+0x2c0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d34:	4877      	ldr	r0, [pc, #476]	@ (8001f14 <control_update+0x2cc>)
 8001d36:	f002 f9f7 	bl	8004128 <HAL_GPIO_WritePin>
		//End Timer 5


		//Timer 8
		HAL_GPIO_WritePin(TIM8_CH4_PH_GPIO_Port, TIM8_CH4_PH_Pin, phase);
 8001d3a:	4b73      	ldr	r3, [pc, #460]	@ (8001f08 <control_update+0x2c0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	2180      	movs	r1, #128	@ 0x80
 8001d44:	4871      	ldr	r0, [pc, #452]	@ (8001f0c <control_update+0x2c4>)
 8001d46:	f002 f9ef 	bl	8004128 <HAL_GPIO_WritePin>
		//End Timer 8


		//Timer 12
		HAL_GPIO_WritePin(TIM12_CH2_PH_GPIO_Port, TIM12_CH2_PH_Pin, phase);
 8001d4a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f08 <control_update+0x2c0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d56:	486d      	ldr	r0, [pc, #436]	@ (8001f0c <control_update+0x2c4>)
 8001d58:	f002 f9e6 	bl	8004128 <HAL_GPIO_WritePin>
		//End Timer 12


		//Timer 13
		HAL_GPIO_WritePin(TIM13_CH1_PH_GPIO_Port, TIM13_CH1_PH_Pin, phase);
 8001d5c:	4b6a      	ldr	r3, [pc, #424]	@ (8001f08 <control_update+0x2c0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d68:	4868      	ldr	r0, [pc, #416]	@ (8001f0c <control_update+0x2c4>)
 8001d6a:	f002 f9dd 	bl	8004128 <HAL_GPIO_WritePin>
		//End Timer 13


		//Timer 14
		HAL_GPIO_WritePin(TIM14_CH1_PH_GPIO_Port, TIM14_CH1_PH_Pin, phase);
 8001d6e:	4b66      	ldr	r3, [pc, #408]	@ (8001f08 <control_update+0x2c0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	461a      	mov	r2, r3
 8001d76:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d7a:	4864      	ldr	r0, [pc, #400]	@ (8001f0c <control_update+0x2c4>)
 8001d7c:	f002 f9d4 	bl	8004128 <HAL_GPIO_WritePin>
		//End Timer 14


		//Timer 15
		HAL_GPIO_WritePin(TIM15_CH1_PH_GPIO_Port, TIM15_CH1_PH_Pin, phase);
 8001d80:	4b61      	ldr	r3, [pc, #388]	@ (8001f08 <control_update+0x2c0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d8c:	485f      	ldr	r0, [pc, #380]	@ (8001f0c <control_update+0x2c4>)
 8001d8e:	f002 f9cb 	bl	8004128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM15_CH2_PH_GPIO_Port, TIM15_CH2_PH_Pin, phase);
 8001d92:	4b5d      	ldr	r3, [pc, #372]	@ (8001f08 <control_update+0x2c0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	461a      	mov	r2, r3
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	485e      	ldr	r0, [pc, #376]	@ (8001f18 <control_update+0x2d0>)
 8001d9e:	f002 f9c3 	bl	8004128 <HAL_GPIO_WritePin>
		//End Timer 15


		//Timer 16
		HAL_GPIO_WritePin(TIM16_CH1_PH_GPIO_Port, TIM16_CH1_PH_Pin, phase);
 8001da2:	4b59      	ldr	r3, [pc, #356]	@ (8001f08 <control_update+0x2c0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	461a      	mov	r2, r3
 8001daa:	2102      	movs	r1, #2
 8001dac:	485a      	ldr	r0, [pc, #360]	@ (8001f18 <control_update+0x2d0>)
 8001dae:	f002 f9bb 	bl	8004128 <HAL_GPIO_WritePin>
		//End Timer 16


		//HRTIM CODE HERE **************
		//High Resolution Timer CHA
		HAL_GPIO_WritePin(HRTIM_CHA1_PH_GPIO_Port, HRTIM_CHA1_PH_Pin, phase);
 8001db2:	4b55      	ldr	r3, [pc, #340]	@ (8001f08 <control_update+0x2c0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	2110      	movs	r1, #16
 8001dbc:	4856      	ldr	r0, [pc, #344]	@ (8001f18 <control_update+0x2d0>)
 8001dbe:	f002 f9b3 	bl	8004128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHA2_PH_GPIO_Port, HRTIM_CHA2_PH_Pin, phase);
 8001dc2:	4b51      	ldr	r3, [pc, #324]	@ (8001f08 <control_update+0x2c0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	2120      	movs	r1, #32
 8001dcc:	4852      	ldr	r0, [pc, #328]	@ (8001f18 <control_update+0x2d0>)
 8001dce:	f002 f9ab 	bl	8004128 <HAL_GPIO_WritePin>
		//End High HRTIM CHA

		//High Resolution Timer CHB
		HAL_GPIO_WritePin(HRTIM_CHB1_PH_GPIO_Port, HRTIM_CHB1_PH_Pin, phase);
 8001dd2:	4b4d      	ldr	r3, [pc, #308]	@ (8001f08 <control_update+0x2c0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2140      	movs	r1, #64	@ 0x40
 8001ddc:	484e      	ldr	r0, [pc, #312]	@ (8001f18 <control_update+0x2d0>)
 8001dde:	f002 f9a3 	bl	8004128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHB2_PH_GPIO_Port, HRTIM_CHB2_PH_Pin, phase);
 8001de2:	4b49      	ldr	r3, [pc, #292]	@ (8001f08 <control_update+0x2c0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	461a      	mov	r2, r3
 8001dea:	2180      	movs	r1, #128	@ 0x80
 8001dec:	484a      	ldr	r0, [pc, #296]	@ (8001f18 <control_update+0x2d0>)
 8001dee:	f002 f99b 	bl	8004128 <HAL_GPIO_WritePin>
		//End High HRTIM CHB

		//High Resolution Timer CHC
		HAL_GPIO_WritePin(HRTIM_CHC1_PH_GPIO_Port, HRTIM_CHC1_PH_Pin, phase);
 8001df2:	4b45      	ldr	r3, [pc, #276]	@ (8001f08 <control_update+0x2c0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	461a      	mov	r2, r3
 8001dfa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dfe:	4846      	ldr	r0, [pc, #280]	@ (8001f18 <control_update+0x2d0>)
 8001e00:	f002 f992 	bl	8004128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHC2_PH_GPIO_Port, HRTIM_CHC2_PH_Pin, phase);
 8001e04:	4b40      	ldr	r3, [pc, #256]	@ (8001f08 <control_update+0x2c0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e10:	4841      	ldr	r0, [pc, #260]	@ (8001f18 <control_update+0x2d0>)
 8001e12:	f002 f989 	bl	8004128 <HAL_GPIO_WritePin>
		//End High HRTIM CHC

		//High Resolution Timer CHD
		HAL_GPIO_WritePin(HRTIM_CHD1_PH_GPIO_Port, HRTIM_CHD1_PH_Pin, phase);
 8001e16:	4b3c      	ldr	r3, [pc, #240]	@ (8001f08 <control_update+0x2c0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e22:	483d      	ldr	r0, [pc, #244]	@ (8001f18 <control_update+0x2d0>)
 8001e24:	f002 f980 	bl	8004128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHD2_PH_GPIO_Port, HRTIM_CHD2_PH_Pin, phase);
 8001e28:	4b37      	ldr	r3, [pc, #220]	@ (8001f08 <control_update+0x2c0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e34:	4838      	ldr	r0, [pc, #224]	@ (8001f18 <control_update+0x2d0>)
 8001e36:	f002 f977 	bl	8004128 <HAL_GPIO_WritePin>
		//End High HRTIM CHD
		//END HRTIM CODE


		//Low Power Timer
		HAL_GPIO_WritePin(LPTIM1_OUT_PH_GPIO_Port, LPTIM1_OUT_PH_Pin, phase);
 8001e3a:	4b33      	ldr	r3, [pc, #204]	@ (8001f08 <control_update+0x2c0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	2104      	movs	r1, #4
 8001e44:	4834      	ldr	r0, [pc, #208]	@ (8001f18 <control_update+0x2d0>)
 8001e46:	f002 f96f 	bl	8004128 <HAL_GPIO_WritePin>


//	}

	// calculate the dutycycle
	absref = fabs(ref); // duty cycle must be positive
 8001e4a:	ed97 7b00 	vldr	d7, [r7]
 8001e4e:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e52:	ed87 7b04 	vstr	d7, [r7, #16]
	new_dc = calc_dutycycle(absref,VSS);
 8001e56:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8001f00 <control_update+0x2b8>
 8001e5a:	eeb0 1b47 	vmov.f64	d1, d7
 8001e5e:	ed97 0b04 	vldr	d0, [r7, #16]
 8001e62:	f000 f8b9 	bl	8001fd8 <calc_dutycycle>
 8001e66:	4603      	mov	r3, r0
 8001e68:	81fb      	strh	r3, [r7, #14]
	// if new dutycycle is different than the old dutycycle
	if(new_dc != dutycycle){
 8001e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8001f1c <control_update+0x2d4>)
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	89fa      	ldrh	r2, [r7, #14]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	f000 809b 	beq.w	8001fac <control_update+0x364>
		// then save new dutycycle
		dutycycle = new_dc;
 8001e76:	4a29      	ldr	r2, [pc, #164]	@ (8001f1c <control_update+0x2d4>)
 8001e78:	89fb      	ldrh	r3, [r7, #14]
 8001e7a:	8013      	strh	r3, [r2, #0]
		//set the new timer dutycycle register
		//Timer 1
		TIM1->CCR1 = dutycycle;   //Calls the duty cycle on the timers at the desired channel
 8001e7c:	4b27      	ldr	r3, [pc, #156]	@ (8001f1c <control_update+0x2d4>)
 8001e7e:	881a      	ldrh	r2, [r3, #0]
 8001e80:	4b27      	ldr	r3, [pc, #156]	@ (8001f20 <control_update+0x2d8>)
 8001e82:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = dutycycle;
 8001e84:	4b25      	ldr	r3, [pc, #148]	@ (8001f1c <control_update+0x2d4>)
 8001e86:	881a      	ldrh	r2, [r3, #0]
 8001e88:	4b25      	ldr	r3, [pc, #148]	@ (8001f20 <control_update+0x2d8>)
 8001e8a:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = dutycycle;
 8001e8c:	4b23      	ldr	r3, [pc, #140]	@ (8001f1c <control_update+0x2d4>)
 8001e8e:	881a      	ldrh	r2, [r3, #0]
 8001e90:	4b23      	ldr	r3, [pc, #140]	@ (8001f20 <control_update+0x2d8>)
 8001e92:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = dutycycle;
 8001e94:	4b21      	ldr	r3, [pc, #132]	@ (8001f1c <control_update+0x2d4>)
 8001e96:	881a      	ldrh	r2, [r3, #0]
 8001e98:	4b21      	ldr	r3, [pc, #132]	@ (8001f20 <control_update+0x2d8>)
 8001e9a:	641a      	str	r2, [r3, #64]	@ 0x40
		//End Timer 1


		//Timer 2
		TIM2->CCR1 = dutycycle;
 8001e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f1c <control_update+0x2d4>)
 8001e9e:	881a      	ldrh	r2, [r3, #0]
 8001ea0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ea4:	635a      	str	r2, [r3, #52]	@ 0x34
		//End Timer 2

		//Timer 4
		TIM4->CCR1 = dutycycle;
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f1c <control_update+0x2d4>)
 8001ea8:	881a      	ldrh	r2, [r3, #0]
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8001f24 <control_update+0x2dc>)
 8001eac:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM4->CCR2 = dutycycle;
 8001eae:	4b1b      	ldr	r3, [pc, #108]	@ (8001f1c <control_update+0x2d4>)
 8001eb0:	881a      	ldrh	r2, [r3, #0]
 8001eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f24 <control_update+0x2dc>)
 8001eb4:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM4->CCR3 = dutycycle;
 8001eb6:	4b19      	ldr	r3, [pc, #100]	@ (8001f1c <control_update+0x2d4>)
 8001eb8:	881a      	ldrh	r2, [r3, #0]
 8001eba:	4b1a      	ldr	r3, [pc, #104]	@ (8001f24 <control_update+0x2dc>)
 8001ebc:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM4->CCR4 = dutycycle;
 8001ebe:	4b17      	ldr	r3, [pc, #92]	@ (8001f1c <control_update+0x2d4>)
 8001ec0:	881a      	ldrh	r2, [r3, #0]
 8001ec2:	4b18      	ldr	r3, [pc, #96]	@ (8001f24 <control_update+0x2dc>)
 8001ec4:	641a      	str	r2, [r3, #64]	@ 0x40
		//End Timer 4


		//Timer 5
		TIM5->CCR2 = dutycycle;
 8001ec6:	4b15      	ldr	r3, [pc, #84]	@ (8001f1c <control_update+0x2d4>)
 8001ec8:	881a      	ldrh	r2, [r3, #0]
 8001eca:	4b17      	ldr	r3, [pc, #92]	@ (8001f28 <control_update+0x2e0>)
 8001ecc:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM5->CCR3 = dutycycle;
 8001ece:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <control_update+0x2d4>)
 8001ed0:	881a      	ldrh	r2, [r3, #0]
 8001ed2:	4b15      	ldr	r3, [pc, #84]	@ (8001f28 <control_update+0x2e0>)
 8001ed4:	63da      	str	r2, [r3, #60]	@ 0x3c
		//End Timer 5


		//Timer 8
		TIM8->CCR4 = dutycycle;
 8001ed6:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <control_update+0x2d4>)
 8001ed8:	881a      	ldrh	r2, [r3, #0]
 8001eda:	4b14      	ldr	r3, [pc, #80]	@ (8001f2c <control_update+0x2e4>)
 8001edc:	641a      	str	r2, [r3, #64]	@ 0x40
		//End Timer 8


		//Timer 12
		TIM12->CCR2 = dutycycle;
 8001ede:	4b0f      	ldr	r3, [pc, #60]	@ (8001f1c <control_update+0x2d4>)
 8001ee0:	881a      	ldrh	r2, [r3, #0]
 8001ee2:	4b13      	ldr	r3, [pc, #76]	@ (8001f30 <control_update+0x2e8>)
 8001ee4:	639a      	str	r2, [r3, #56]	@ 0x38
		//End Timer 12


		//Timer 13
		TIM13->CCR1 = dutycycle;
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f1c <control_update+0x2d4>)
 8001ee8:	881a      	ldrh	r2, [r3, #0]
 8001eea:	4b12      	ldr	r3, [pc, #72]	@ (8001f34 <control_update+0x2ec>)
 8001eec:	635a      	str	r2, [r3, #52]	@ 0x34
		//End Timer 13


		//Timer 14
		TIM14->CCR1 = dutycycle;
 8001eee:	4b0b      	ldr	r3, [pc, #44]	@ (8001f1c <control_update+0x2d4>)
 8001ef0:	881a      	ldrh	r2, [r3, #0]
 8001ef2:	4b11      	ldr	r3, [pc, #68]	@ (8001f38 <control_update+0x2f0>)
 8001ef4:	635a      	str	r2, [r3, #52]	@ 0x34
		//End Timer 14


		//Timer 15
		TIM15->CCR1 = dutycycle;
 8001ef6:	4b09      	ldr	r3, [pc, #36]	@ (8001f1c <control_update+0x2d4>)
 8001ef8:	881a      	ldrh	r2, [r3, #0]
 8001efa:	e01f      	b.n	8001f3c <control_update+0x2f4>
 8001efc:	f3af 8000 	nop.w
 8001f00:	cccccccd 	.word	0xcccccccd
 8001f04:	3ffccccc 	.word	0x3ffccccc
 8001f08:	24000000 	.word	0x24000000
 8001f0c:	58021000 	.word	0x58021000
 8001f10:	58020400 	.word	0x58020400
 8001f14:	58020800 	.word	0x58020800
 8001f18:	58020c00 	.word	0x58020c00
 8001f1c:	24002634 	.word	0x24002634
 8001f20:	40010000 	.word	0x40010000
 8001f24:	40000800 	.word	0x40000800
 8001f28:	40000c00 	.word	0x40000c00
 8001f2c:	40010400 	.word	0x40010400
 8001f30:	40001800 	.word	0x40001800
 8001f34:	40001c00 	.word	0x40001c00
 8001f38:	40002000 	.word	0x40002000
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fbc <control_update+0x374>)
 8001f3e:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM15->CCR2 = dutycycle;
 8001f40:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc0 <control_update+0x378>)
 8001f42:	881a      	ldrh	r2, [r3, #0]
 8001f44:	4b1d      	ldr	r3, [pc, #116]	@ (8001fbc <control_update+0x374>)
 8001f46:	639a      	str	r2, [r3, #56]	@ 0x38
		//End Timer 15


		//Timer 16
		TIM16->CCR1 = dutycycle;
 8001f48:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc0 <control_update+0x378>)
 8001f4a:	881a      	ldrh	r2, [r3, #0]
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc4 <control_update+0x37c>)
 8001f4e:	635a      	str	r2, [r3, #52]	@ 0x34
		//End Timer 16


		//HRTIM CODE GOES HERE ********
		//HRTIM CHA
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP1xR = dutycycle;
 8001f50:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc0 <control_update+0x378>)
 8001f52:	881a      	ldrh	r2, [r3, #0]
 8001f54:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc8 <control_update+0x380>)
 8001f56:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP2xR = dutycycle;
 8001f5a:	4b19      	ldr	r3, [pc, #100]	@ (8001fc0 <control_update+0x378>)
 8001f5c:	881a      	ldrh	r2, [r3, #0]
 8001f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc8 <control_update+0x380>)
 8001f60:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		//End HRTIM CHA

		//HRTIM CHB
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP1xR = dutycycle;
 8001f64:	4b16      	ldr	r3, [pc, #88]	@ (8001fc0 <control_update+0x378>)
 8001f66:	881a      	ldrh	r2, [r3, #0]
 8001f68:	4b17      	ldr	r3, [pc, #92]	@ (8001fc8 <control_update+0x380>)
 8001f6a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP2xR = dutycycle;
 8001f6e:	4b14      	ldr	r3, [pc, #80]	@ (8001fc0 <control_update+0x378>)
 8001f70:	881a      	ldrh	r2, [r3, #0]
 8001f72:	4b15      	ldr	r3, [pc, #84]	@ (8001fc8 <control_update+0x380>)
 8001f74:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
		//End HRTIM CHB

		//HRTIM CHC
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP1xR = dutycycle;
 8001f78:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <control_update+0x378>)
 8001f7a:	881a      	ldrh	r2, [r3, #0]
 8001f7c:	4b12      	ldr	r3, [pc, #72]	@ (8001fc8 <control_update+0x380>)
 8001f7e:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP2xR = dutycycle;
 8001f82:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc0 <control_update+0x378>)
 8001f84:	881a      	ldrh	r2, [r3, #0]
 8001f86:	4b10      	ldr	r3, [pc, #64]	@ (8001fc8 <control_update+0x380>)
 8001f88:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
		//End HRTIM CHC

		//HRTIM CHD
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = dutycycle;
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc0 <control_update+0x378>)
 8001f8e:	881a      	ldrh	r2, [r3, #0]
 8001f90:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc8 <control_update+0x380>)
 8001f92:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP2xR = dutycycle;
 8001f96:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc0 <control_update+0x378>)
 8001f98:	881a      	ldrh	r2, [r3, #0]
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc8 <control_update+0x380>)
 8001f9c:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
		//End HRTIM CHD
		//END HRTIM CODE HERE


		//LPTIM1
		LPTIM1->CMP = dutycycle/2;
 8001fa0:	4b07      	ldr	r3, [pc, #28]	@ (8001fc0 <control_update+0x378>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	085b      	lsrs	r3, r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	4b08      	ldr	r3, [pc, #32]	@ (8001fcc <control_update+0x384>)
 8001faa:	615a      	str	r2, [r3, #20]


	}

	// reset timer flag
	ctrl_tmr_expired = FALSE;
 8001fac:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <control_update+0x388>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
}
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40014000 	.word	0x40014000
 8001fc0:	24002634 	.word	0x24002634
 8001fc4:	40014400 	.word	0x40014400
 8001fc8:	40017400 	.word	0x40017400
 8001fcc:	40002400 	.word	0x40002400
 8001fd0:	2400069c 	.word	0x2400069c
 8001fd4:	00000000 	.word	0x00000000

08001fd8 <calc_dutycycle>:

static uint16_t calc_dutycycle(double cmd, double vss)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	ed87 0b02 	vstr	d0, [r7, #8]
 8001fe2:	ed87 1b00 	vstr	d1, [r7]
	//	@ param cmd command voltage
	//	@ param vss supply voltage
	//	@ return dutycycle

	// duty cycle variable
	uint16_t dc={0};
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	82fb      	strh	r3, [r7, #22]

	dc = (uint16_t)(cmd/vss * (double)PERIOD);
 8001fea:	ed97 5b02 	vldr	d5, [r7, #8]
 8001fee:	ed97 6b00 	vldr	d6, [r7]
 8001ff2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ff6:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8002028 <calc_dutycycle+0x50>
 8001ffa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ffe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002002:	ee17 3a90 	vmov	r3, s15
 8002006:	82fb      	strh	r3, [r7, #22]
	// keep the dutycycle within the period of the PWM signal
	if(dc>PERIOD) dc = PERIOD;
 8002008:	8afb      	ldrh	r3, [r7, #22]
 800200a:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800200e:	4293      	cmp	r3, r2
 8002010:	d902      	bls.n	8002018 <calc_dutycycle+0x40>
 8002012:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 8002016:	82fb      	strh	r3, [r7, #22]

	return dc;
 8002018:	8afb      	ldrh	r3, [r7, #22]
}
 800201a:	4618      	mov	r0, r3
 800201c:	371c      	adds	r7, #28
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	00000000 	.word	0x00000000
 800202c:	40d76fc0 	.word	0x40d76fc0

08002030 <gen_sine>:

static void gen_sine(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
	int i = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
	double scale = TWO_PI/SIN_PERIOD;
 800203a:	a316      	add	r3, pc, #88	@ (adr r3, 8002094 <gen_sine+0x64>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	e9c7 2300 	strd	r2, r3, [r7]
	for(i=0; i<SIN_PERIOD; i++ )
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	e017      	b.n	800207a <gen_sine+0x4a>
	{
		sine_vals[i] = sin(i*scale);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	ee07 3a90 	vmov	s15, r3
 8002050:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002054:	ed97 7b00 	vldr	d7, [r7]
 8002058:	ee26 7b07 	vmul.f64	d7, d6, d7
 800205c:	eeb0 0b47 	vmov.f64	d0, d7
 8002060:	f00c fabe 	bl	800e5e0 <sin>
 8002064:	eeb0 7b40 	vmov.f64	d7, d0
 8002068:	4a09      	ldr	r2, [pc, #36]	@ (8002090 <gen_sine+0x60>)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4413      	add	r3, r2
 8002070:	ed83 7b00 	vstr	d7, [r3]
	for(i=0; i<SIN_PERIOD; i++ )
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	3301      	adds	r3, #1
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002080:	dbe3      	blt.n	800204a <gen_sine+0x1a>
	}
}
 8002082:	bf00      	nop
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	f3af 8000 	nop.w
 8002090:	240006a8 	.word	0x240006a8
 8002094:	b68b71c3 	.word	0xb68b71c3
 8002098:	3f79bc65 	.word	0x3f79bc65

0800209c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80020a2:	463b      	mov	r3, r7
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80020ae:	f001 f8af 	bl	8003210 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80020b2:	2301      	movs	r3, #1
 80020b4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80020be:	231f      	movs	r3, #31
 80020c0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80020c2:	2387      	movs	r3, #135	@ 0x87
 80020c4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80020ca:	2300      	movs	r3, #0
 80020cc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80020ce:	2301      	movs	r3, #1
 80020d0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80020d2:	2301      	movs	r3, #1
 80020d4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80020de:	463b      	mov	r3, r7
 80020e0:	4618      	mov	r0, r3
 80020e2:	f001 f8cd 	bl	8003280 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80020e6:	2004      	movs	r0, #4
 80020e8:	f001 f8aa 	bl	8003240 <HAL_MPU_Enable>

}
 80020ec:	bf00      	nop
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020f8:	b672      	cpsid	i
}
 80020fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020fc:	bf00      	nop
 80020fe:	e7fd      	b.n	80020fc <Error_Handler+0x8>

08002100 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002106:	4b0a      	ldr	r3, [pc, #40]	@ (8002130 <HAL_MspInit+0x30>)
 8002108:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800210c:	4a08      	ldr	r2, [pc, #32]	@ (8002130 <HAL_MspInit+0x30>)
 800210e:	f043 0302 	orr.w	r3, r3, #2
 8002112:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002116:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <HAL_MspInit+0x30>)
 8002118:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	58024400 	.word	0x58024400

08002134 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b0b4      	sub	sp, #208	@ 0xd0
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800213c:	f107 0310 	add.w	r3, r7, #16
 8002140:	22c0      	movs	r2, #192	@ 0xc0
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f00a f9ee 	bl	800c526 <memset>
  if(hhrtim->Instance==HRTIM1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a14      	ldr	r2, [pc, #80]	@ (80021a0 <HAL_HRTIM_MspInit+0x6c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d121      	bne.n	8002198 <HAL_HRTIM_MspInit+0x64>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8002154:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8002160:	2300      	movs	r3, #0
 8002162:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002166:	f107 0310 	add.w	r3, r7, #16
 800216a:	4618      	mov	r0, r3
 800216c:	f004 fd54 	bl	8006c18 <HAL_RCCEx_PeriphCLKConfig>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8002176:	f7ff ffbd 	bl	80020f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800217a:	4b0a      	ldr	r3, [pc, #40]	@ (80021a4 <HAL_HRTIM_MspInit+0x70>)
 800217c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002180:	4a08      	ldr	r2, [pc, #32]	@ (80021a4 <HAL_HRTIM_MspInit+0x70>)
 8002182:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002186:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800218a:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <HAL_HRTIM_MspInit+0x70>)
 800218c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002190:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8002198:	bf00      	nop
 800219a:	37d0      	adds	r7, #208	@ 0xd0
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40017400 	.word	0x40017400
 80021a4:	58024400 	.word	0x58024400

080021a8 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	@ 0x28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a23      	ldr	r2, [pc, #140]	@ (8002254 <HAL_HRTIM_MspPostInit+0xac>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d13f      	bne.n	800224a <HAL_HRTIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ca:	4b23      	ldr	r3, [pc, #140]	@ (8002258 <HAL_HRTIM_MspPostInit+0xb0>)
 80021cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021d0:	4a21      	ldr	r2, [pc, #132]	@ (8002258 <HAL_HRTIM_MspPostInit+0xb0>)
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021da:	4b1f      	ldr	r3, [pc, #124]	@ (8002258 <HAL_HRTIM_MspPostInit+0xb0>)
 80021dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002258 <HAL_HRTIM_MspPostInit+0xb0>)
 80021ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002258 <HAL_HRTIM_MspPostInit+0xb0>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021f8:	4b17      	ldr	r3, [pc, #92]	@ (8002258 <HAL_HRTIM_MspPostInit+0xb0>)
 80021fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> HRTIM_CHC1
    PA10     ------> HRTIM_CHC2
    PA11     ------> HRTIM_CHD1
    PA12     ------> HRTIM_CHD2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002206:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800220a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002214:	2303      	movs	r3, #3
 8002216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8002218:	2301      	movs	r3, #1
 800221a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	4619      	mov	r1, r3
 8002222:	480e      	ldr	r0, [pc, #56]	@ (800225c <HAL_HRTIM_MspPostInit+0xb4>)
 8002224:	f001 fdd0 	bl	8003dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002228:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800222c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002236:	2303      	movs	r3, #3
 8002238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 800223a:	2302      	movs	r3, #2
 800223c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223e:	f107 0314 	add.w	r3, r7, #20
 8002242:	4619      	mov	r1, r3
 8002244:	4806      	ldr	r0, [pc, #24]	@ (8002260 <HAL_HRTIM_MspPostInit+0xb8>)
 8002246:	f001 fdbf 	bl	8003dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 800224a:	bf00      	nop
 800224c:	3728      	adds	r7, #40	@ 0x28
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40017400 	.word	0x40017400
 8002258:	58024400 	.word	0x58024400
 800225c:	58020800 	.word	0x58020800
 8002260:	58020000 	.word	0x58020000

08002264 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b0ba      	sub	sp, #232	@ 0xe8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800227c:	f107 0310 	add.w	r3, r7, #16
 8002280:	22c0      	movs	r2, #192	@ 0xc0
 8002282:	2100      	movs	r1, #0
 8002284:	4618      	mov	r0, r3
 8002286:	f00a f94e 	bl	800c526 <memset>
  if(hlptim->Instance==LPTIM1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a2b      	ldr	r2, [pc, #172]	@ (800233c <HAL_LPTIM_MspInit+0xd8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d14e      	bne.n	8002332 <HAL_LPTIM_MspInit+0xce>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002294:	f04f 0220 	mov.w	r2, #32
 8002298:	f04f 0300 	mov.w	r3, #0
 800229c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022a6:	f107 0310 	add.w	r3, r7, #16
 80022aa:	4618      	mov	r0, r3
 80022ac:	f004 fcb4 	bl	8006c18 <HAL_RCCEx_PeriphCLKConfig>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_LPTIM_MspInit+0x56>
    {
      Error_Handler();
 80022b6:	f7ff ff1d 	bl	80020f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80022ba:	4b21      	ldr	r3, [pc, #132]	@ (8002340 <HAL_LPTIM_MspInit+0xdc>)
 80022bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002340 <HAL_LPTIM_MspInit+0xdc>)
 80022c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022c6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002340 <HAL_LPTIM_MspInit+0xdc>)
 80022cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022d8:	4b19      	ldr	r3, [pc, #100]	@ (8002340 <HAL_LPTIM_MspInit+0xdc>)
 80022da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022de:	4a18      	ldr	r2, [pc, #96]	@ (8002340 <HAL_LPTIM_MspInit+0xdc>)
 80022e0:	f043 0308 	orr.w	r3, r3, #8
 80022e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022e8:	4b15      	ldr	r3, [pc, #84]	@ (8002340 <HAL_LPTIM_MspInit+0xdc>)
 80022ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration
    PD13     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80022f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8002310:	2301      	movs	r3, #1
 8002312:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002316:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800231a:	4619      	mov	r1, r3
 800231c:	4809      	ldr	r0, [pc, #36]	@ (8002344 <HAL_LPTIM_MspInit+0xe0>)
 800231e:	f001 fd53 	bl	8003dc8 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2100      	movs	r1, #0
 8002326:	205d      	movs	r0, #93	@ 0x5d
 8002328:	f000 ff3d 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800232c:	205d      	movs	r0, #93	@ 0x5d
 800232e:	f000 ff54 	bl	80031da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8002332:	bf00      	nop
 8002334:	37e8      	adds	r7, #232	@ 0xe8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40002400 	.word	0x40002400
 8002340:	58024400 	.word	0x58024400
 8002344:	58020c00 	.word	0x58020c00

08002348 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	@ 0x28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a74      	ldr	r2, [pc, #464]	@ (8002528 <HAL_TIM_Base_MspInit+0x1e0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d117      	bne.n	800238a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800235a:	4b74      	ldr	r3, [pc, #464]	@ (800252c <HAL_TIM_Base_MspInit+0x1e4>)
 800235c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002360:	4a72      	ldr	r2, [pc, #456]	@ (800252c <HAL_TIM_Base_MspInit+0x1e4>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800236a:	4b70      	ldr	r3, [pc, #448]	@ (800252c <HAL_TIM_Base_MspInit+0x1e4>)
 800236c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	627b      	str	r3, [r7, #36]	@ 0x24
 8002376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002378:	2200      	movs	r2, #0
 800237a:	2100      	movs	r1, #0
 800237c:	2019      	movs	r0, #25
 800237e:	f000 ff12 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002382:	2019      	movs	r0, #25
 8002384:	f000 ff29 	bl	80031da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002388:	e0c9      	b.n	800251e <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM4)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a68      	ldr	r2, [pc, #416]	@ (8002530 <HAL_TIM_Base_MspInit+0x1e8>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d117      	bne.n	80023c4 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002394:	4b65      	ldr	r3, [pc, #404]	@ (800252c <HAL_TIM_Base_MspInit+0x1e4>)
 8002396:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800239a:	4a64      	ldr	r2, [pc, #400]	@ (800252c <HAL_TIM_Base_MspInit+0x1e4>)
 800239c:	f043 0304 	orr.w	r3, r3, #4
 80023a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023a4:	4b61      	ldr	r3, [pc, #388]	@ (800252c <HAL_TIM_Base_MspInit+0x1e4>)
 80023a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	623b      	str	r3, [r7, #32]
 80023b0:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80023b2:	2200      	movs	r2, #0
 80023b4:	2100      	movs	r1, #0
 80023b6:	201e      	movs	r0, #30
 80023b8:	f000 fef5 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80023bc:	201e      	movs	r0, #30
 80023be:	f000 ff0c 	bl	80031da <HAL_NVIC_EnableIRQ>
}
 80023c2:	e0ac      	b.n	800251e <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM5)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a5a      	ldr	r2, [pc, #360]	@ (8002534 <HAL_TIM_Base_MspInit+0x1ec>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d117      	bne.n	80023fe <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023ce:	4b57      	ldr	r3, [pc, #348]	@ (800252c <HAL_TIM_Base_MspInit+0x1e4>)
 80023d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023d4:	4a55      	ldr	r2, [pc, #340]	@ (800252c <HAL_TIM_Base_MspInit+0x1e4>)
 80023d6:	f043 0308 	orr.w	r3, r3, #8
 80023da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023de:	4b53      	ldr	r3, [pc, #332]	@ (800252c <HAL_TIM_Base_MspInit+0x1e4>)
 80023e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	61fb      	str	r3, [r7, #28]
 80023ea:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80023ec:	2200      	movs	r2, #0
 80023ee:	2100      	movs	r1, #0
 80023f0:	2032      	movs	r0, #50	@ 0x32
 80023f2:	f000 fed8 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80023f6:	2032      	movs	r0, #50	@ 0x32
 80023f8:	f000 feef 	bl	80031da <HAL_NVIC_EnableIRQ>
}
 80023fc:	e08f      	b.n	800251e <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM12)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a4d      	ldr	r2, [pc, #308]	@ (8002538 <HAL_TIM_Base_MspInit+0x1f0>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d117      	bne.n	8002438 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002408:	4b48      	ldr	r3, [pc, #288]	@ (800252c <HAL_TIM_Base_MspInit+0x1e4>)
 800240a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800240e:	4a47      	ldr	r2, [pc, #284]	@ (800252c <HAL_TIM_Base_MspInit+0x1e4>)
 8002410:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002414:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002418:	4b44      	ldr	r3, [pc, #272]	@ (800252c <HAL_TIM_Base_MspInit+0x1e4>)
 800241a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800241e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002422:	61bb      	str	r3, [r7, #24]
 8002424:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	2100      	movs	r1, #0
 800242a:	202b      	movs	r0, #43	@ 0x2b
 800242c:	f000 febb 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002430:	202b      	movs	r0, #43	@ 0x2b
 8002432:	f000 fed2 	bl	80031da <HAL_NVIC_EnableIRQ>
}
 8002436:	e072      	b.n	800251e <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM13)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a3f      	ldr	r2, [pc, #252]	@ (800253c <HAL_TIM_Base_MspInit+0x1f4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d117      	bne.n	8002472 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002442:	4b3a      	ldr	r3, [pc, #232]	@ (800252c <HAL_TIM_Base_MspInit+0x1e4>)
 8002444:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002448:	4a38      	ldr	r2, [pc, #224]	@ (800252c <HAL_TIM_Base_MspInit+0x1e4>)
 800244a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800244e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002452:	4b36      	ldr	r3, [pc, #216]	@ (800252c <HAL_TIM_Base_MspInit+0x1e4>)
 8002454:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002460:	2200      	movs	r2, #0
 8002462:	2100      	movs	r1, #0
 8002464:	202c      	movs	r0, #44	@ 0x2c
 8002466:	f000 fe9e 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800246a:	202c      	movs	r0, #44	@ 0x2c
 800246c:	f000 feb5 	bl	80031da <HAL_NVIC_EnableIRQ>
}
 8002470:	e055      	b.n	800251e <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM14)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a32      	ldr	r2, [pc, #200]	@ (8002540 <HAL_TIM_Base_MspInit+0x1f8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d117      	bne.n	80024ac <HAL_TIM_Base_MspInit+0x164>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800247c:	4b2b      	ldr	r3, [pc, #172]	@ (800252c <HAL_TIM_Base_MspInit+0x1e4>)
 800247e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002482:	4a2a      	ldr	r2, [pc, #168]	@ (800252c <HAL_TIM_Base_MspInit+0x1e4>)
 8002484:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002488:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800248c:	4b27      	ldr	r3, [pc, #156]	@ (800252c <HAL_TIM_Base_MspInit+0x1e4>)
 800248e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800249a:	2200      	movs	r2, #0
 800249c:	2100      	movs	r1, #0
 800249e:	202d      	movs	r0, #45	@ 0x2d
 80024a0:	f000 fe81 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80024a4:	202d      	movs	r0, #45	@ 0x2d
 80024a6:	f000 fe98 	bl	80031da <HAL_NVIC_EnableIRQ>
}
 80024aa:	e038      	b.n	800251e <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM15)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a24      	ldr	r2, [pc, #144]	@ (8002544 <HAL_TIM_Base_MspInit+0x1fc>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d117      	bne.n	80024e6 <HAL_TIM_Base_MspInit+0x19e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80024b6:	4b1d      	ldr	r3, [pc, #116]	@ (800252c <HAL_TIM_Base_MspInit+0x1e4>)
 80024b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024bc:	4a1b      	ldr	r2, [pc, #108]	@ (800252c <HAL_TIM_Base_MspInit+0x1e4>)
 80024be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024c6:	4b19      	ldr	r3, [pc, #100]	@ (800252c <HAL_TIM_Base_MspInit+0x1e4>)
 80024c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80024d4:	2200      	movs	r2, #0
 80024d6:	2100      	movs	r1, #0
 80024d8:	2074      	movs	r0, #116	@ 0x74
 80024da:	f000 fe64 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80024de:	2074      	movs	r0, #116	@ 0x74
 80024e0:	f000 fe7b 	bl	80031da <HAL_NVIC_EnableIRQ>
}
 80024e4:	e01b      	b.n	800251e <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM16)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a17      	ldr	r2, [pc, #92]	@ (8002548 <HAL_TIM_Base_MspInit+0x200>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d116      	bne.n	800251e <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80024f0:	4b0e      	ldr	r3, [pc, #56]	@ (800252c <HAL_TIM_Base_MspInit+0x1e4>)
 80024f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024f6:	4a0d      	ldr	r2, [pc, #52]	@ (800252c <HAL_TIM_Base_MspInit+0x1e4>)
 80024f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002500:	4b0a      	ldr	r3, [pc, #40]	@ (800252c <HAL_TIM_Base_MspInit+0x1e4>)
 8002502:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800250e:	2200      	movs	r2, #0
 8002510:	2100      	movs	r1, #0
 8002512:	2075      	movs	r0, #117	@ 0x75
 8002514:	f000 fe47 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002518:	2075      	movs	r0, #117	@ 0x75
 800251a:	f000 fe5e 	bl	80031da <HAL_NVIC_EnableIRQ>
}
 800251e:	bf00      	nop
 8002520:	3728      	adds	r7, #40	@ 0x28
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40010000 	.word	0x40010000
 800252c:	58024400 	.word	0x58024400
 8002530:	40000800 	.word	0x40000800
 8002534:	40000c00 	.word	0x40000c00
 8002538:	40001800 	.word	0x40001800
 800253c:	40001c00 	.word	0x40001c00
 8002540:	40002000 	.word	0x40002000
 8002544:	40014000 	.word	0x40014000
 8002548:	40014400 	.word	0x40014400

0800254c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800255c:	d117      	bne.n	800258e <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800255e:	4b24      	ldr	r3, [pc, #144]	@ (80025f0 <HAL_TIM_PWM_MspInit+0xa4>)
 8002560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002564:	4a22      	ldr	r2, [pc, #136]	@ (80025f0 <HAL_TIM_PWM_MspInit+0xa4>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800256e:	4b20      	ldr	r3, [pc, #128]	@ (80025f0 <HAL_TIM_PWM_MspInit+0xa4>)
 8002570:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800257c:	2200      	movs	r2, #0
 800257e:	2100      	movs	r1, #0
 8002580:	201c      	movs	r0, #28
 8002582:	f000 fe10 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002586:	201c      	movs	r0, #28
 8002588:	f000 fe27 	bl	80031da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800258c:	e02b      	b.n	80025e6 <HAL_TIM_PWM_MspInit+0x9a>
  else if(htim_pwm->Instance==TIM8)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a18      	ldr	r2, [pc, #96]	@ (80025f4 <HAL_TIM_PWM_MspInit+0xa8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d126      	bne.n	80025e6 <HAL_TIM_PWM_MspInit+0x9a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002598:	4b15      	ldr	r3, [pc, #84]	@ (80025f0 <HAL_TIM_PWM_MspInit+0xa4>)
 800259a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800259e:	4a14      	ldr	r2, [pc, #80]	@ (80025f0 <HAL_TIM_PWM_MspInit+0xa4>)
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025a8:	4b11      	ldr	r3, [pc, #68]	@ (80025f0 <HAL_TIM_PWM_MspInit+0xa4>)
 80025aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2100      	movs	r1, #0
 80025ba:	202b      	movs	r0, #43	@ 0x2b
 80025bc:	f000 fdf3 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80025c0:	202b      	movs	r0, #43	@ 0x2b
 80025c2:	f000 fe0a 	bl	80031da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80025c6:	2200      	movs	r2, #0
 80025c8:	2100      	movs	r1, #0
 80025ca:	202c      	movs	r0, #44	@ 0x2c
 80025cc:	f000 fdeb 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80025d0:	202c      	movs	r0, #44	@ 0x2c
 80025d2:	f000 fe02 	bl	80031da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80025d6:	2200      	movs	r2, #0
 80025d8:	2100      	movs	r1, #0
 80025da:	202d      	movs	r0, #45	@ 0x2d
 80025dc:	f000 fde3 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80025e0:	202d      	movs	r0, #45	@ 0x2d
 80025e2:	f000 fdfa 	bl	80031da <HAL_NVIC_EnableIRQ>
}
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	58024400 	.word	0x58024400
 80025f4:	40010400 	.word	0x40010400

080025f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b092      	sub	sp, #72	@ 0x48
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4aa4      	ldr	r2, [pc, #656]	@ (80028a8 <HAL_TIM_MspPostInit+0x2b0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d120      	bne.n	800265c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800261a:	4ba4      	ldr	r3, [pc, #656]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 800261c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002620:	4aa2      	ldr	r2, [pc, #648]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 8002622:	f043 0310 	orr.w	r3, r3, #16
 8002626:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800262a:	4ba0      	ldr	r3, [pc, #640]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 800262c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002630:	f003 0310 	and.w	r3, r3, #16
 8002634:	633b      	str	r3, [r7, #48]	@ 0x30
 8002636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002638:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 800263c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263e:	2302      	movs	r3, #2
 8002640:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	2300      	movs	r3, #0
 8002644:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002646:	2300      	movs	r3, #0
 8002648:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800264a:	2301      	movs	r3, #1
 800264c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800264e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002652:	4619      	mov	r1, r3
 8002654:	4896      	ldr	r0, [pc, #600]	@ (80028b0 <HAL_TIM_MspPostInit+0x2b8>)
 8002656:	f001 fbb7 	bl	8003dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800265a:	e189      	b.n	8002970 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002664:	d11f      	bne.n	80026a6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002666:	4b91      	ldr	r3, [pc, #580]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 8002668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800266c:	4a8f      	ldr	r2, [pc, #572]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002676:	4b8d      	ldr	r3, [pc, #564]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 8002678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002684:	2301      	movs	r3, #1
 8002686:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002688:	2302      	movs	r3, #2
 800268a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002690:	2300      	movs	r3, #0
 8002692:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002694:	2301      	movs	r3, #1
 8002696:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002698:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800269c:	4619      	mov	r1, r3
 800269e:	4885      	ldr	r0, [pc, #532]	@ (80028b4 <HAL_TIM_MspPostInit+0x2bc>)
 80026a0:	f001 fb92 	bl	8003dc8 <HAL_GPIO_Init>
}
 80026a4:	e164      	b.n	8002970 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM4)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a83      	ldr	r2, [pc, #524]	@ (80028b8 <HAL_TIM_MspPostInit+0x2c0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d13f      	bne.n	8002730 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026b0:	4b7e      	ldr	r3, [pc, #504]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 80026b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026b6:	4a7d      	ldr	r2, [pc, #500]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 80026b8:	f043 0308 	orr.w	r3, r3, #8
 80026bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026c0:	4b7a      	ldr	r3, [pc, #488]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 80026c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ce:	4b77      	ldr	r3, [pc, #476]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 80026d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026d4:	4a75      	ldr	r2, [pc, #468]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 80026d6:	f043 0302 	orr.w	r3, r3, #2
 80026da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026de:	4b73      	ldr	r3, [pc, #460]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 80026e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80026ec:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80026f0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f2:	2302      	movs	r3, #2
 80026f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fa:	2300      	movs	r3, #0
 80026fc:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026fe:	2302      	movs	r3, #2
 8002700:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002702:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002706:	4619      	mov	r1, r3
 8002708:	486c      	ldr	r0, [pc, #432]	@ (80028bc <HAL_TIM_MspPostInit+0x2c4>)
 800270a:	f001 fb5d 	bl	8003dc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800270e:	2380      	movs	r3, #128	@ 0x80
 8002710:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002712:	2302      	movs	r3, #2
 8002714:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271a:	2300      	movs	r3, #0
 800271c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800271e:	2302      	movs	r3, #2
 8002720:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002722:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002726:	4619      	mov	r1, r3
 8002728:	4865      	ldr	r0, [pc, #404]	@ (80028c0 <HAL_TIM_MspPostInit+0x2c8>)
 800272a:	f001 fb4d 	bl	8003dc8 <HAL_GPIO_Init>
}
 800272e:	e11f      	b.n	8002970 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM5)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a63      	ldr	r2, [pc, #396]	@ (80028c4 <HAL_TIM_MspPostInit+0x2cc>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d11f      	bne.n	800277a <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273a:	4b5c      	ldr	r3, [pc, #368]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 800273c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002740:	4a5a      	ldr	r2, [pc, #360]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800274a:	4b58      	ldr	r3, [pc, #352]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 800274c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	623b      	str	r3, [r7, #32]
 8002756:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002758:	2306      	movs	r3, #6
 800275a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275c:	2302      	movs	r3, #2
 800275e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002764:	2300      	movs	r3, #0
 8002766:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002768:	2302      	movs	r3, #2
 800276a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002770:	4619      	mov	r1, r3
 8002772:	4850      	ldr	r0, [pc, #320]	@ (80028b4 <HAL_TIM_MspPostInit+0x2bc>)
 8002774:	f001 fb28 	bl	8003dc8 <HAL_GPIO_Init>
}
 8002778:	e0fa      	b.n	8002970 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM8)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a52      	ldr	r2, [pc, #328]	@ (80028c8 <HAL_TIM_MspPostInit+0x2d0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d120      	bne.n	80027c6 <HAL_TIM_MspPostInit+0x1ce>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002784:	4b49      	ldr	r3, [pc, #292]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 8002786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800278a:	4a48      	ldr	r2, [pc, #288]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 800278c:	f043 0304 	orr.w	r3, r3, #4
 8002790:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002794:	4b45      	ldr	r3, [pc, #276]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 8002796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	61fb      	str	r3, [r7, #28]
 80027a0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027a6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a8:	2302      	movs	r3, #2
 80027aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b0:	2300      	movs	r3, #0
 80027b2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80027b4:	2303      	movs	r3, #3
 80027b6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80027bc:	4619      	mov	r1, r3
 80027be:	4843      	ldr	r0, [pc, #268]	@ (80028cc <HAL_TIM_MspPostInit+0x2d4>)
 80027c0:	f001 fb02 	bl	8003dc8 <HAL_GPIO_Init>
}
 80027c4:	e0d4      	b.n	8002970 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM12)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a41      	ldr	r2, [pc, #260]	@ (80028d0 <HAL_TIM_MspPostInit+0x2d8>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d120      	bne.n	8002812 <HAL_TIM_MspPostInit+0x21a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d0:	4b36      	ldr	r3, [pc, #216]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 80027d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027d6:	4a35      	ldr	r2, [pc, #212]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 80027d8:	f043 0302 	orr.w	r3, r3, #2
 80027dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027e0:	4b32      	ldr	r3, [pc, #200]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 80027e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80027ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027f2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f4:	2302      	movs	r3, #2
 80027f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fc:	2300      	movs	r3, #0
 80027fe:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002800:	2302      	movs	r3, #2
 8002802:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002804:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002808:	4619      	mov	r1, r3
 800280a:	482d      	ldr	r0, [pc, #180]	@ (80028c0 <HAL_TIM_MspPostInit+0x2c8>)
 800280c:	f001 fadc 	bl	8003dc8 <HAL_GPIO_Init>
}
 8002810:	e0ae      	b.n	8002970 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM13)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a2f      	ldr	r2, [pc, #188]	@ (80028d4 <HAL_TIM_MspPostInit+0x2dc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d11f      	bne.n	800285c <HAL_TIM_MspPostInit+0x264>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281c:	4b23      	ldr	r3, [pc, #140]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 800281e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002822:	4a22      	ldr	r2, [pc, #136]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800282c:	4b1f      	ldr	r3, [pc, #124]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 800282e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800283a:	2340      	movs	r3, #64	@ 0x40
 800283c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283e:	2302      	movs	r3, #2
 8002840:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002846:	2300      	movs	r3, #0
 8002848:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800284a:	2309      	movs	r3, #9
 800284c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002852:	4619      	mov	r1, r3
 8002854:	4817      	ldr	r0, [pc, #92]	@ (80028b4 <HAL_TIM_MspPostInit+0x2bc>)
 8002856:	f001 fab7 	bl	8003dc8 <HAL_GPIO_Init>
}
 800285a:	e089      	b.n	8002970 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM14)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a1d      	ldr	r2, [pc, #116]	@ (80028d8 <HAL_TIM_MspPostInit+0x2e0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d13a      	bne.n	80028dc <HAL_TIM_MspPostInit+0x2e4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002866:	4b11      	ldr	r3, [pc, #68]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 8002868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800286c:	4a0f      	ldr	r2, [pc, #60]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002876:	4b0d      	ldr	r3, [pc, #52]	@ (80028ac <HAL_TIM_MspPostInit+0x2b4>)
 8002878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002884:	2380      	movs	r3, #128	@ 0x80
 8002886:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002888:	2302      	movs	r3, #2
 800288a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	2300      	movs	r3, #0
 8002892:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002894:	2309      	movs	r3, #9
 8002896:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002898:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800289c:	4619      	mov	r1, r3
 800289e:	4805      	ldr	r0, [pc, #20]	@ (80028b4 <HAL_TIM_MspPostInit+0x2bc>)
 80028a0:	f001 fa92 	bl	8003dc8 <HAL_GPIO_Init>
}
 80028a4:	e064      	b.n	8002970 <HAL_TIM_MspPostInit+0x378>
 80028a6:	bf00      	nop
 80028a8:	40010000 	.word	0x40010000
 80028ac:	58024400 	.word	0x58024400
 80028b0:	58021000 	.word	0x58021000
 80028b4:	58020000 	.word	0x58020000
 80028b8:	40000800 	.word	0x40000800
 80028bc:	58020c00 	.word	0x58020c00
 80028c0:	58020400 	.word	0x58020400
 80028c4:	40000c00 	.word	0x40000c00
 80028c8:	40010400 	.word	0x40010400
 80028cc:	58020800 	.word	0x58020800
 80028d0:	40001800 	.word	0x40001800
 80028d4:	40001c00 	.word	0x40001c00
 80028d8:	40002000 	.word	0x40002000
  else if(htim->Instance==TIM15)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a25      	ldr	r2, [pc, #148]	@ (8002978 <HAL_TIM_MspPostInit+0x380>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d11f      	bne.n	8002926 <HAL_TIM_MspPostInit+0x32e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028e6:	4b25      	ldr	r3, [pc, #148]	@ (800297c <HAL_TIM_MspPostInit+0x384>)
 80028e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028ec:	4a23      	ldr	r2, [pc, #140]	@ (800297c <HAL_TIM_MspPostInit+0x384>)
 80028ee:	f043 0310 	orr.w	r3, r3, #16
 80028f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028f6:	4b21      	ldr	r3, [pc, #132]	@ (800297c <HAL_TIM_MspPostInit+0x384>)
 80028f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028fc:	f003 0310 	and.w	r3, r3, #16
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002904:	2360      	movs	r3, #96	@ 0x60
 8002906:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	2302      	movs	r3, #2
 800290a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002910:	2300      	movs	r3, #0
 8002912:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002914:	2304      	movs	r3, #4
 8002916:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002918:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800291c:	4619      	mov	r1, r3
 800291e:	4818      	ldr	r0, [pc, #96]	@ (8002980 <HAL_TIM_MspPostInit+0x388>)
 8002920:	f001 fa52 	bl	8003dc8 <HAL_GPIO_Init>
}
 8002924:	e024      	b.n	8002970 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM16)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a16      	ldr	r2, [pc, #88]	@ (8002984 <HAL_TIM_MspPostInit+0x38c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d11f      	bne.n	8002970 <HAL_TIM_MspPostInit+0x378>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002930:	4b12      	ldr	r3, [pc, #72]	@ (800297c <HAL_TIM_MspPostInit+0x384>)
 8002932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002936:	4a11      	ldr	r2, [pc, #68]	@ (800297c <HAL_TIM_MspPostInit+0x384>)
 8002938:	f043 0302 	orr.w	r3, r3, #2
 800293c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002940:	4b0e      	ldr	r3, [pc, #56]	@ (800297c <HAL_TIM_MspPostInit+0x384>)
 8002942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800294e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002952:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002954:	2302      	movs	r3, #2
 8002956:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002958:	2300      	movs	r3, #0
 800295a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295c:	2300      	movs	r3, #0
 800295e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002960:	2301      	movs	r3, #1
 8002962:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002964:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002968:	4619      	mov	r1, r3
 800296a:	4807      	ldr	r0, [pc, #28]	@ (8002988 <HAL_TIM_MspPostInit+0x390>)
 800296c:	f001 fa2c 	bl	8003dc8 <HAL_GPIO_Init>
}
 8002970:	bf00      	nop
 8002972:	3748      	adds	r7, #72	@ 0x48
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40014000 	.word	0x40014000
 800297c:	58024400 	.word	0x58024400
 8002980:	58021000 	.word	0x58021000
 8002984:	40014400 	.word	0x40014400
 8002988:	58020400 	.word	0x58020400

0800298c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b0ba      	sub	sp, #232	@ 0xe8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002994:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	60da      	str	r2, [r3, #12]
 80029a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029a4:	f107 0310 	add.w	r3, r7, #16
 80029a8:	22c0      	movs	r2, #192	@ 0xc0
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f009 fdba 	bl	800c526 <memset>
  if(huart->Instance==UART4)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a2b      	ldr	r2, [pc, #172]	@ (8002a64 <HAL_UART_MspInit+0xd8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d14e      	bne.n	8002a5a <HAL_UART_MspInit+0xce>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80029bc:	f04f 0202 	mov.w	r2, #2
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80029c8:	2300      	movs	r3, #0
 80029ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029ce:	f107 0310 	add.w	r3, r7, #16
 80029d2:	4618      	mov	r0, r3
 80029d4:	f004 f920 	bl	8006c18 <HAL_RCCEx_PeriphCLKConfig>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80029de:	f7ff fb89 	bl	80020f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80029e2:	4b21      	ldr	r3, [pc, #132]	@ (8002a68 <HAL_UART_MspInit+0xdc>)
 80029e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002a68 <HAL_UART_MspInit+0xdc>)
 80029ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80029ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80029f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a68 <HAL_UART_MspInit+0xdc>)
 80029f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a00:	4b19      	ldr	r3, [pc, #100]	@ (8002a68 <HAL_UART_MspInit+0xdc>)
 8002a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a06:	4a18      	ldr	r2, [pc, #96]	@ (8002a68 <HAL_UART_MspInit+0xdc>)
 8002a08:	f043 0304 	orr.w	r3, r3, #4
 8002a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a10:	4b15      	ldr	r3, [pc, #84]	@ (8002a68 <HAL_UART_MspInit+0xdc>)
 8002a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a1e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002a22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a26:	2302      	movs	r3, #2
 8002a28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002a38:	2308      	movs	r3, #8
 8002a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a3e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002a42:	4619      	mov	r1, r3
 8002a44:	4809      	ldr	r0, [pc, #36]	@ (8002a6c <HAL_UART_MspInit+0xe0>)
 8002a46:	f001 f9bf 	bl	8003dc8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	2034      	movs	r0, #52	@ 0x34
 8002a50:	f000 fba9 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002a54:	2034      	movs	r0, #52	@ 0x34
 8002a56:	f000 fbc0 	bl	80031da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002a5a:	bf00      	nop
 8002a5c:	37e8      	adds	r7, #232	@ 0xe8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40004c00 	.word	0x40004c00
 8002a68:	58024400 	.word	0x58024400
 8002a6c:	58020800 	.word	0x58020800

08002a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a74:	bf00      	nop
 8002a76:	e7fd      	b.n	8002a74 <NMI_Handler+0x4>

08002a78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a7c:	bf00      	nop
 8002a7e:	e7fd      	b.n	8002a7c <HardFault_Handler+0x4>

08002a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a84:	bf00      	nop
 8002a86:	e7fd      	b.n	8002a84 <MemManage_Handler+0x4>

08002a88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a8c:	bf00      	nop
 8002a8e:	e7fd      	b.n	8002a8c <BusFault_Handler+0x4>

08002a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a94:	bf00      	nop
 8002a96:	e7fd      	b.n	8002a94 <UsageFault_Handler+0x4>

08002a98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ac6:	f000 fa67 	bl	8002f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ad4:	4802      	ldr	r0, [pc, #8]	@ (8002ae0 <TIM1_UP_IRQHandler+0x10>)
 8002ad6:	f006 f971 	bl	8008dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	24000310 	.word	0x24000310

08002ae4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ae8:	4802      	ldr	r0, [pc, #8]	@ (8002af4 <TIM2_IRQHandler+0x10>)
 8002aea:	f006 f967 	bl	8008dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	2400035c 	.word	0x2400035c

08002af8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002afc:	4802      	ldr	r0, [pc, #8]	@ (8002b08 <TIM4_IRQHandler+0x10>)
 8002afe:	f006 f95d 	bl	8008dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	240003a8 	.word	0x240003a8

08002b0c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002b10:	4803      	ldr	r0, [pc, #12]	@ (8002b20 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8002b12:	f006 f953 	bl	8008dbc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8002b16:	4803      	ldr	r0, [pc, #12]	@ (8002b24 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8002b18:	f006 f950 	bl	8008dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002b1c:	bf00      	nop
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	24000440 	.word	0x24000440
 8002b24:	2400048c 	.word	0x2400048c

08002b28 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002b2c:	4803      	ldr	r0, [pc, #12]	@ (8002b3c <TIM8_UP_TIM13_IRQHandler+0x14>)
 8002b2e:	f006 f945 	bl	8008dbc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8002b32:	4803      	ldr	r0, [pc, #12]	@ (8002b40 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8002b34:	f006 f942 	bl	8008dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002b38:	bf00      	nop
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	24000440 	.word	0x24000440
 8002b40:	240004d8 	.word	0x240004d8

08002b44 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002b48:	4803      	ldr	r0, [pc, #12]	@ (8002b58 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8002b4a:	f006 f937 	bl	8008dbc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8002b4e:	4803      	ldr	r0, [pc, #12]	@ (8002b5c <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8002b50:	f006 f934 	bl	8008dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002b54:	bf00      	nop
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	24000440 	.word	0x24000440
 8002b5c:	24000524 	.word	0x24000524

08002b60 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002b64:	4802      	ldr	r0, [pc, #8]	@ (8002b70 <TIM5_IRQHandler+0x10>)
 8002b66:	f006 f929 	bl	8008dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	240003f4 	.word	0x240003f4

08002b74 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002b78:	4802      	ldr	r0, [pc, #8]	@ (8002b84 <UART4_IRQHandler+0x10>)
 8002b7a:	f007 faa3 	bl	800a0c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	24000608 	.word	0x24000608

08002b88 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002b8c:	4802      	ldr	r0, [pc, #8]	@ (8002b98 <LPTIM1_IRQHandler+0x10>)
 8002b8e:	f002 fd31 	bl	80055f4 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	240002d8 	.word	0x240002d8

08002b9c <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002ba0:	4802      	ldr	r0, [pc, #8]	@ (8002bac <TIM15_IRQHandler+0x10>)
 8002ba2:	f006 f90b 	bl	8008dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	24000570 	.word	0x24000570

08002bb0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002bb4:	4802      	ldr	r0, [pc, #8]	@ (8002bc0 <TIM16_IRQHandler+0x10>)
 8002bb6:	f006 f901 	bl	8008dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	240005bc 	.word	0x240005bc

08002bc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return 1;
 8002bc8:	2301      	movs	r3, #1
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <_kill>:

int _kill(int pid, int sig)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bde:	f009 fcf5 	bl	800c5cc <__errno>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2216      	movs	r2, #22
 8002be6:	601a      	str	r2, [r3, #0]
  return -1;
 8002be8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <_exit>:

void _exit (int status)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff ffe7 	bl	8002bd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c06:	bf00      	nop
 8002c08:	e7fd      	b.n	8002c06 <_exit+0x12>

08002c0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b086      	sub	sp, #24
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	e00a      	b.n	8002c32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c1c:	f3af 8000 	nop.w
 8002c20:	4601      	mov	r1, r0
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	60ba      	str	r2, [r7, #8]
 8002c28:	b2ca      	uxtb	r2, r1
 8002c2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	dbf0      	blt.n	8002c1c <_read+0x12>
  }

  return len;
 8002c3a:	687b      	ldr	r3, [r7, #4]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	e009      	b.n	8002c6a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	60ba      	str	r2, [r7, #8]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	3301      	adds	r3, #1
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	dbf1      	blt.n	8002c56 <_write+0x12>
  }
  return len;
 8002c72:	687b      	ldr	r3, [r7, #4]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <_close>:

int _close(int file)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ca4:	605a      	str	r2, [r3, #4]
  return 0;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <_isatty>:

int _isatty(int file)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cbc:	2301      	movs	r3, #1
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b085      	sub	sp, #20
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cec:	4a14      	ldr	r2, [pc, #80]	@ (8002d40 <_sbrk+0x5c>)
 8002cee:	4b15      	ldr	r3, [pc, #84]	@ (8002d44 <_sbrk+0x60>)
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cf8:	4b13      	ldr	r3, [pc, #76]	@ (8002d48 <_sbrk+0x64>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d102      	bne.n	8002d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d00:	4b11      	ldr	r3, [pc, #68]	@ (8002d48 <_sbrk+0x64>)
 8002d02:	4a12      	ldr	r2, [pc, #72]	@ (8002d4c <_sbrk+0x68>)
 8002d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d06:	4b10      	ldr	r3, [pc, #64]	@ (8002d48 <_sbrk+0x64>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d207      	bcs.n	8002d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d14:	f009 fc5a 	bl	800c5cc <__errno>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	220c      	movs	r2, #12
 8002d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d22:	e009      	b.n	8002d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d24:	4b08      	ldr	r3, [pc, #32]	@ (8002d48 <_sbrk+0x64>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d2a:	4b07      	ldr	r3, [pc, #28]	@ (8002d48 <_sbrk+0x64>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4413      	add	r3, r2
 8002d32:	4a05      	ldr	r2, [pc, #20]	@ (8002d48 <_sbrk+0x64>)
 8002d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d36:	68fb      	ldr	r3, [r7, #12]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	24080000 	.word	0x24080000
 8002d44:	00000400 	.word	0x00000400
 8002d48:	24002638 	.word	0x24002638
 8002d4c:	24002790 	.word	0x24002790

08002d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d54:	4b37      	ldr	r3, [pc, #220]	@ (8002e34 <SystemInit+0xe4>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d5a:	4a36      	ldr	r2, [pc, #216]	@ (8002e34 <SystemInit+0xe4>)
 8002d5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d64:	4b34      	ldr	r3, [pc, #208]	@ (8002e38 <SystemInit+0xe8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	2b06      	cmp	r3, #6
 8002d6e:	d807      	bhi.n	8002d80 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d70:	4b31      	ldr	r3, [pc, #196]	@ (8002e38 <SystemInit+0xe8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f023 030f 	bic.w	r3, r3, #15
 8002d78:	4a2f      	ldr	r2, [pc, #188]	@ (8002e38 <SystemInit+0xe8>)
 8002d7a:	f043 0307 	orr.w	r3, r3, #7
 8002d7e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002d80:	4b2e      	ldr	r3, [pc, #184]	@ (8002e3c <SystemInit+0xec>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a2d      	ldr	r2, [pc, #180]	@ (8002e3c <SystemInit+0xec>)
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8002e3c <SystemInit+0xec>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002d92:	4b2a      	ldr	r3, [pc, #168]	@ (8002e3c <SystemInit+0xec>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	4929      	ldr	r1, [pc, #164]	@ (8002e3c <SystemInit+0xec>)
 8002d98:	4b29      	ldr	r3, [pc, #164]	@ (8002e40 <SystemInit+0xf0>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d9e:	4b26      	ldr	r3, [pc, #152]	@ (8002e38 <SystemInit+0xe8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d007      	beq.n	8002dba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002daa:	4b23      	ldr	r3, [pc, #140]	@ (8002e38 <SystemInit+0xe8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 030f 	bic.w	r3, r3, #15
 8002db2:	4a21      	ldr	r2, [pc, #132]	@ (8002e38 <SystemInit+0xe8>)
 8002db4:	f043 0307 	orr.w	r3, r3, #7
 8002db8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002dba:	4b20      	ldr	r3, [pc, #128]	@ (8002e3c <SystemInit+0xec>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002dc0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e3c <SystemInit+0xec>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e3c <SystemInit+0xec>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e3c <SystemInit+0xec>)
 8002dce:	4a1d      	ldr	r2, [pc, #116]	@ (8002e44 <SystemInit+0xf4>)
 8002dd0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e3c <SystemInit+0xec>)
 8002dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8002e48 <SystemInit+0xf8>)
 8002dd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002dd8:	4b18      	ldr	r3, [pc, #96]	@ (8002e3c <SystemInit+0xec>)
 8002dda:	4a1c      	ldr	r2, [pc, #112]	@ (8002e4c <SystemInit+0xfc>)
 8002ddc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002dde:	4b17      	ldr	r3, [pc, #92]	@ (8002e3c <SystemInit+0xec>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002de4:	4b15      	ldr	r3, [pc, #84]	@ (8002e3c <SystemInit+0xec>)
 8002de6:	4a19      	ldr	r2, [pc, #100]	@ (8002e4c <SystemInit+0xfc>)
 8002de8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002dea:	4b14      	ldr	r3, [pc, #80]	@ (8002e3c <SystemInit+0xec>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002df0:	4b12      	ldr	r3, [pc, #72]	@ (8002e3c <SystemInit+0xec>)
 8002df2:	4a16      	ldr	r2, [pc, #88]	@ (8002e4c <SystemInit+0xfc>)
 8002df4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002df6:	4b11      	ldr	r3, [pc, #68]	@ (8002e3c <SystemInit+0xec>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8002e3c <SystemInit+0xec>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a0e      	ldr	r2, [pc, #56]	@ (8002e3c <SystemInit+0xec>)
 8002e02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e08:	4b0c      	ldr	r3, [pc, #48]	@ (8002e3c <SystemInit+0xec>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002e0e:	4b10      	ldr	r3, [pc, #64]	@ (8002e50 <SystemInit+0x100>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	4b10      	ldr	r3, [pc, #64]	@ (8002e54 <SystemInit+0x104>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e1a:	d202      	bcs.n	8002e22 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e58 <SystemInit+0x108>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e22:	4b0e      	ldr	r3, [pc, #56]	@ (8002e5c <SystemInit+0x10c>)
 8002e24:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002e28:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002e2a:	bf00      	nop
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	e000ed00 	.word	0xe000ed00
 8002e38:	52002000 	.word	0x52002000
 8002e3c:	58024400 	.word	0x58024400
 8002e40:	eaf6ed7f 	.word	0xeaf6ed7f
 8002e44:	02020200 	.word	0x02020200
 8002e48:	01ff0000 	.word	0x01ff0000
 8002e4c:	01010280 	.word	0x01010280
 8002e50:	5c001000 	.word	0x5c001000
 8002e54:	ffff0000 	.word	0xffff0000
 8002e58:	51008108 	.word	0x51008108
 8002e5c:	52004000 	.word	0x52004000

08002e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002e60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e64:	f7ff ff74 	bl	8002d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e68:	480c      	ldr	r0, [pc, #48]	@ (8002e9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e6a:	490d      	ldr	r1, [pc, #52]	@ (8002ea0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e70:	e002      	b.n	8002e78 <LoopCopyDataInit>

08002e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e76:	3304      	adds	r3, #4

08002e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e7c:	d3f9      	bcc.n	8002e72 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e80:	4c0a      	ldr	r4, [pc, #40]	@ (8002eac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e84:	e001      	b.n	8002e8a <LoopFillZerobss>

08002e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e88:	3204      	adds	r2, #4

08002e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e8c:	d3fb      	bcc.n	8002e86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e8e:	f009 fba3 	bl	800c5d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e92:	f7fd fc0d 	bl	80006b0 <main>
  bx  lr
 8002e96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e98:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002e9c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002ea0:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8002ea4:	0800f760 	.word	0x0800f760
  ldr r2, =_sbss
 8002ea8:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8002eac:	2400278c 	.word	0x2400278c

08002eb0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eb0:	e7fe      	b.n	8002eb0 <ADC3_IRQHandler>
	...

08002eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eba:	2003      	movs	r0, #3
 8002ebc:	f000 f968 	bl	8003190 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ec0:	f003 fcd4 	bl	800686c <HAL_RCC_GetSysClockFreq>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b15      	ldr	r3, [pc, #84]	@ (8002f1c <HAL_Init+0x68>)
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	0a1b      	lsrs	r3, r3, #8
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	4913      	ldr	r1, [pc, #76]	@ (8002f20 <HAL_Init+0x6c>)
 8002ed2:	5ccb      	ldrb	r3, [r1, r3]
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8002edc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ede:	4b0f      	ldr	r3, [pc, #60]	@ (8002f1c <HAL_Init+0x68>)
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	4a0e      	ldr	r2, [pc, #56]	@ (8002f20 <HAL_Init+0x6c>)
 8002ee8:	5cd3      	ldrb	r3, [r2, r3]
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef4:	4a0b      	ldr	r2, [pc, #44]	@ (8002f24 <HAL_Init+0x70>)
 8002ef6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ef8:	4a0b      	ldr	r2, [pc, #44]	@ (8002f28 <HAL_Init+0x74>)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002efe:	200f      	movs	r0, #15
 8002f00:	f000 f814 	bl	8002f2c <HAL_InitTick>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e002      	b.n	8002f14 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f0e:	f7ff f8f7 	bl	8002100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	58024400 	.word	0x58024400
 8002f20:	0800f1d0 	.word	0x0800f1d0
 8002f24:	24000008 	.word	0x24000008
 8002f28:	24000004 	.word	0x24000004

08002f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f34:	4b15      	ldr	r3, [pc, #84]	@ (8002f8c <HAL_InitTick+0x60>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e021      	b.n	8002f84 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002f40:	4b13      	ldr	r3, [pc, #76]	@ (8002f90 <HAL_InitTick+0x64>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b11      	ldr	r3, [pc, #68]	@ (8002f8c <HAL_InitTick+0x60>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 f94d 	bl	80031f6 <HAL_SYSTICK_Config>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e00e      	b.n	8002f84 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b0f      	cmp	r3, #15
 8002f6a:	d80a      	bhi.n	8002f82 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	f000 f917 	bl	80031a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f78:	4a06      	ldr	r2, [pc, #24]	@ (8002f94 <HAL_InitTick+0x68>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e000      	b.n	8002f84 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	24000010 	.word	0x24000010
 8002f90:	24000004 	.word	0x24000004
 8002f94:	2400000c 	.word	0x2400000c

08002f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	@ (8002fb8 <HAL_IncTick+0x20>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <HAL_IncTick+0x24>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4a04      	ldr	r2, [pc, #16]	@ (8002fbc <HAL_IncTick+0x24>)
 8002faa:	6013      	str	r3, [r2, #0]
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	24000010 	.word	0x24000010
 8002fbc:	2400263c 	.word	0x2400263c

08002fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc4:	4b03      	ldr	r3, [pc, #12]	@ (8002fd4 <HAL_GetTick+0x14>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	2400263c 	.word	0x2400263c

08002fd8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002fdc:	4b03      	ldr	r3, [pc, #12]	@ (8002fec <HAL_GetREVID+0x14>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	0c1b      	lsrs	r3, r3, #16
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	5c001000 	.word	0x5c001000

08002ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003000:	4b0b      	ldr	r3, [pc, #44]	@ (8003030 <__NVIC_SetPriorityGrouping+0x40>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800300c:	4013      	ands	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003018:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 800301a:	4313      	orrs	r3, r2
 800301c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800301e:	4a04      	ldr	r2, [pc, #16]	@ (8003030 <__NVIC_SetPriorityGrouping+0x40>)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	60d3      	str	r3, [r2, #12]
}
 8003024:	bf00      	nop
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	e000ed00 	.word	0xe000ed00
 8003034:	05fa0000 	.word	0x05fa0000

08003038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800303c:	4b04      	ldr	r3, [pc, #16]	@ (8003050 <__NVIC_GetPriorityGrouping+0x18>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	f003 0307 	and.w	r3, r3, #7
}
 8003046:	4618      	mov	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800305e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003062:	2b00      	cmp	r3, #0
 8003064:	db0b      	blt.n	800307e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	f003 021f 	and.w	r2, r3, #31
 800306c:	4907      	ldr	r1, [pc, #28]	@ (800308c <__NVIC_EnableIRQ+0x38>)
 800306e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2001      	movs	r0, #1
 8003076:	fa00 f202 	lsl.w	r2, r0, r2
 800307a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	e000e100 	.word	0xe000e100

08003090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800309c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	db0a      	blt.n	80030ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	490c      	ldr	r1, [pc, #48]	@ (80030dc <__NVIC_SetPriority+0x4c>)
 80030aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030ae:	0112      	lsls	r2, r2, #4
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	440b      	add	r3, r1
 80030b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b8:	e00a      	b.n	80030d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	4908      	ldr	r1, [pc, #32]	@ (80030e0 <__NVIC_SetPriority+0x50>)
 80030c0:	88fb      	ldrh	r3, [r7, #6]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	3b04      	subs	r3, #4
 80030c8:	0112      	lsls	r2, r2, #4
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	440b      	add	r3, r1
 80030ce:	761a      	strb	r2, [r3, #24]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000e100 	.word	0xe000e100
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	@ 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f1c3 0307 	rsb	r3, r3, #7
 80030fe:	2b04      	cmp	r3, #4
 8003100:	bf28      	it	cs
 8003102:	2304      	movcs	r3, #4
 8003104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3304      	adds	r3, #4
 800310a:	2b06      	cmp	r3, #6
 800310c:	d902      	bls.n	8003114 <NVIC_EncodePriority+0x30>
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3b03      	subs	r3, #3
 8003112:	e000      	b.n	8003116 <NVIC_EncodePriority+0x32>
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	f04f 32ff 	mov.w	r2, #4294967295
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43da      	mvns	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	401a      	ands	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800312c:	f04f 31ff 	mov.w	r1, #4294967295
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	43d9      	mvns	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	4313      	orrs	r3, r2
         );
}
 800313e:	4618      	mov	r0, r3
 8003140:	3724      	adds	r7, #36	@ 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800315c:	d301      	bcc.n	8003162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800315e:	2301      	movs	r3, #1
 8003160:	e00f      	b.n	8003182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003162:	4a0a      	ldr	r2, [pc, #40]	@ (800318c <SysTick_Config+0x40>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3b01      	subs	r3, #1
 8003168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800316a:	210f      	movs	r1, #15
 800316c:	f04f 30ff 	mov.w	r0, #4294967295
 8003170:	f7ff ff8e 	bl	8003090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003174:	4b05      	ldr	r3, [pc, #20]	@ (800318c <SysTick_Config+0x40>)
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317a:	4b04      	ldr	r3, [pc, #16]	@ (800318c <SysTick_Config+0x40>)
 800317c:	2207      	movs	r2, #7
 800317e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	e000e010 	.word	0xe000e010

08003190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ff29 	bl	8002ff0 <__NVIC_SetPriorityGrouping>
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b086      	sub	sp, #24
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031b4:	f7ff ff40 	bl	8003038 <__NVIC_GetPriorityGrouping>
 80031b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68b9      	ldr	r1, [r7, #8]
 80031be:	6978      	ldr	r0, [r7, #20]
 80031c0:	f7ff ff90 	bl	80030e4 <NVIC_EncodePriority>
 80031c4:	4602      	mov	r2, r0
 80031c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031ca:	4611      	mov	r1, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff ff5f 	bl	8003090 <__NVIC_SetPriority>
}
 80031d2:	bf00      	nop
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	4603      	mov	r3, r0
 80031e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff ff33 	bl	8003054 <__NVIC_EnableIRQ>
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff ffa4 	bl	800314c <SysTick_Config>
 8003204:	4603      	mov	r3, r0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003214:	f3bf 8f5f 	dmb	sy
}
 8003218:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800321a:	4b07      	ldr	r3, [pc, #28]	@ (8003238 <HAL_MPU_Disable+0x28>)
 800321c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321e:	4a06      	ldr	r2, [pc, #24]	@ (8003238 <HAL_MPU_Disable+0x28>)
 8003220:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003224:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003226:	4b05      	ldr	r3, [pc, #20]	@ (800323c <HAL_MPU_Disable+0x2c>)
 8003228:	2200      	movs	r2, #0
 800322a:	605a      	str	r2, [r3, #4]
}
 800322c:	bf00      	nop
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	e000ed00 	.word	0xe000ed00
 800323c:	e000ed90 	.word	0xe000ed90

08003240 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003248:	4a0b      	ldr	r2, [pc, #44]	@ (8003278 <HAL_MPU_Enable+0x38>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003252:	4b0a      	ldr	r3, [pc, #40]	@ (800327c <HAL_MPU_Enable+0x3c>)
 8003254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003256:	4a09      	ldr	r2, [pc, #36]	@ (800327c <HAL_MPU_Enable+0x3c>)
 8003258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800325c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800325e:	f3bf 8f4f 	dsb	sy
}
 8003262:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003264:	f3bf 8f6f 	isb	sy
}
 8003268:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	e000ed90 	.word	0xe000ed90
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	785a      	ldrb	r2, [r3, #1]
 800328c:	4b1b      	ldr	r3, [pc, #108]	@ (80032fc <HAL_MPU_ConfigRegion+0x7c>)
 800328e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003290:	4b1a      	ldr	r3, [pc, #104]	@ (80032fc <HAL_MPU_ConfigRegion+0x7c>)
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	4a19      	ldr	r2, [pc, #100]	@ (80032fc <HAL_MPU_ConfigRegion+0x7c>)
 8003296:	f023 0301 	bic.w	r3, r3, #1
 800329a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800329c:	4a17      	ldr	r2, [pc, #92]	@ (80032fc <HAL_MPU_ConfigRegion+0x7c>)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	7b1b      	ldrb	r3, [r3, #12]
 80032a8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7adb      	ldrb	r3, [r3, #11]
 80032ae:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	7a9b      	ldrb	r3, [r3, #10]
 80032b6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80032b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	7b5b      	ldrb	r3, [r3, #13]
 80032be:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80032c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	7b9b      	ldrb	r3, [r3, #14]
 80032c6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80032c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	7bdb      	ldrb	r3, [r3, #15]
 80032ce:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80032d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	7a5b      	ldrb	r3, [r3, #9]
 80032d6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80032d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	7a1b      	ldrb	r3, [r3, #8]
 80032de:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80032e0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	7812      	ldrb	r2, [r2, #0]
 80032e6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032e8:	4a04      	ldr	r2, [pc, #16]	@ (80032fc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80032ea:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032ec:	6113      	str	r3, [r2, #16]
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	e000ed90 	.word	0xe000ed90

08003300 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003308:	f7ff fe5a 	bl	8002fc0 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e2dc      	b.n	80038d2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d008      	beq.n	8003336 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2280      	movs	r2, #128	@ 0x80
 8003328:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e2cd      	b.n	80038d2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a76      	ldr	r2, [pc, #472]	@ (8003514 <HAL_DMA_Abort+0x214>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d04a      	beq.n	80033d6 <HAL_DMA_Abort+0xd6>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a74      	ldr	r2, [pc, #464]	@ (8003518 <HAL_DMA_Abort+0x218>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d045      	beq.n	80033d6 <HAL_DMA_Abort+0xd6>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a73      	ldr	r2, [pc, #460]	@ (800351c <HAL_DMA_Abort+0x21c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d040      	beq.n	80033d6 <HAL_DMA_Abort+0xd6>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a71      	ldr	r2, [pc, #452]	@ (8003520 <HAL_DMA_Abort+0x220>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d03b      	beq.n	80033d6 <HAL_DMA_Abort+0xd6>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a70      	ldr	r2, [pc, #448]	@ (8003524 <HAL_DMA_Abort+0x224>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d036      	beq.n	80033d6 <HAL_DMA_Abort+0xd6>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a6e      	ldr	r2, [pc, #440]	@ (8003528 <HAL_DMA_Abort+0x228>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d031      	beq.n	80033d6 <HAL_DMA_Abort+0xd6>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a6d      	ldr	r2, [pc, #436]	@ (800352c <HAL_DMA_Abort+0x22c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d02c      	beq.n	80033d6 <HAL_DMA_Abort+0xd6>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a6b      	ldr	r2, [pc, #428]	@ (8003530 <HAL_DMA_Abort+0x230>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d027      	beq.n	80033d6 <HAL_DMA_Abort+0xd6>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a6a      	ldr	r2, [pc, #424]	@ (8003534 <HAL_DMA_Abort+0x234>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d022      	beq.n	80033d6 <HAL_DMA_Abort+0xd6>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a68      	ldr	r2, [pc, #416]	@ (8003538 <HAL_DMA_Abort+0x238>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d01d      	beq.n	80033d6 <HAL_DMA_Abort+0xd6>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a67      	ldr	r2, [pc, #412]	@ (800353c <HAL_DMA_Abort+0x23c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d018      	beq.n	80033d6 <HAL_DMA_Abort+0xd6>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a65      	ldr	r2, [pc, #404]	@ (8003540 <HAL_DMA_Abort+0x240>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d013      	beq.n	80033d6 <HAL_DMA_Abort+0xd6>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a64      	ldr	r2, [pc, #400]	@ (8003544 <HAL_DMA_Abort+0x244>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00e      	beq.n	80033d6 <HAL_DMA_Abort+0xd6>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a62      	ldr	r2, [pc, #392]	@ (8003548 <HAL_DMA_Abort+0x248>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d009      	beq.n	80033d6 <HAL_DMA_Abort+0xd6>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a61      	ldr	r2, [pc, #388]	@ (800354c <HAL_DMA_Abort+0x24c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d004      	beq.n	80033d6 <HAL_DMA_Abort+0xd6>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a5f      	ldr	r2, [pc, #380]	@ (8003550 <HAL_DMA_Abort+0x250>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d101      	bne.n	80033da <HAL_DMA_Abort+0xda>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <HAL_DMA_Abort+0xdc>
 80033da:	2300      	movs	r3, #0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d013      	beq.n	8003408 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 021e 	bic.w	r2, r2, #30
 80033ee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033fe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	e00a      	b.n	800341e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 020e 	bic.w	r2, r2, #14
 8003416:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a3c      	ldr	r2, [pc, #240]	@ (8003514 <HAL_DMA_Abort+0x214>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d072      	beq.n	800350e <HAL_DMA_Abort+0x20e>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a3a      	ldr	r2, [pc, #232]	@ (8003518 <HAL_DMA_Abort+0x218>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d06d      	beq.n	800350e <HAL_DMA_Abort+0x20e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a39      	ldr	r2, [pc, #228]	@ (800351c <HAL_DMA_Abort+0x21c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d068      	beq.n	800350e <HAL_DMA_Abort+0x20e>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a37      	ldr	r2, [pc, #220]	@ (8003520 <HAL_DMA_Abort+0x220>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d063      	beq.n	800350e <HAL_DMA_Abort+0x20e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a36      	ldr	r2, [pc, #216]	@ (8003524 <HAL_DMA_Abort+0x224>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d05e      	beq.n	800350e <HAL_DMA_Abort+0x20e>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a34      	ldr	r2, [pc, #208]	@ (8003528 <HAL_DMA_Abort+0x228>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d059      	beq.n	800350e <HAL_DMA_Abort+0x20e>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a33      	ldr	r2, [pc, #204]	@ (800352c <HAL_DMA_Abort+0x22c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d054      	beq.n	800350e <HAL_DMA_Abort+0x20e>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a31      	ldr	r2, [pc, #196]	@ (8003530 <HAL_DMA_Abort+0x230>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d04f      	beq.n	800350e <HAL_DMA_Abort+0x20e>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a30      	ldr	r2, [pc, #192]	@ (8003534 <HAL_DMA_Abort+0x234>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d04a      	beq.n	800350e <HAL_DMA_Abort+0x20e>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a2e      	ldr	r2, [pc, #184]	@ (8003538 <HAL_DMA_Abort+0x238>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d045      	beq.n	800350e <HAL_DMA_Abort+0x20e>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a2d      	ldr	r2, [pc, #180]	@ (800353c <HAL_DMA_Abort+0x23c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d040      	beq.n	800350e <HAL_DMA_Abort+0x20e>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a2b      	ldr	r2, [pc, #172]	@ (8003540 <HAL_DMA_Abort+0x240>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d03b      	beq.n	800350e <HAL_DMA_Abort+0x20e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a2a      	ldr	r2, [pc, #168]	@ (8003544 <HAL_DMA_Abort+0x244>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d036      	beq.n	800350e <HAL_DMA_Abort+0x20e>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a28      	ldr	r2, [pc, #160]	@ (8003548 <HAL_DMA_Abort+0x248>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d031      	beq.n	800350e <HAL_DMA_Abort+0x20e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a27      	ldr	r2, [pc, #156]	@ (800354c <HAL_DMA_Abort+0x24c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d02c      	beq.n	800350e <HAL_DMA_Abort+0x20e>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a25      	ldr	r2, [pc, #148]	@ (8003550 <HAL_DMA_Abort+0x250>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d027      	beq.n	800350e <HAL_DMA_Abort+0x20e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a24      	ldr	r2, [pc, #144]	@ (8003554 <HAL_DMA_Abort+0x254>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d022      	beq.n	800350e <HAL_DMA_Abort+0x20e>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a22      	ldr	r2, [pc, #136]	@ (8003558 <HAL_DMA_Abort+0x258>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d01d      	beq.n	800350e <HAL_DMA_Abort+0x20e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a21      	ldr	r2, [pc, #132]	@ (800355c <HAL_DMA_Abort+0x25c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d018      	beq.n	800350e <HAL_DMA_Abort+0x20e>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003560 <HAL_DMA_Abort+0x260>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d013      	beq.n	800350e <HAL_DMA_Abort+0x20e>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003564 <HAL_DMA_Abort+0x264>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00e      	beq.n	800350e <HAL_DMA_Abort+0x20e>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003568 <HAL_DMA_Abort+0x268>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d009      	beq.n	800350e <HAL_DMA_Abort+0x20e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a1b      	ldr	r2, [pc, #108]	@ (800356c <HAL_DMA_Abort+0x26c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d004      	beq.n	800350e <HAL_DMA_Abort+0x20e>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a19      	ldr	r2, [pc, #100]	@ (8003570 <HAL_DMA_Abort+0x270>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d132      	bne.n	8003574 <HAL_DMA_Abort+0x274>
 800350e:	2301      	movs	r3, #1
 8003510:	e031      	b.n	8003576 <HAL_DMA_Abort+0x276>
 8003512:	bf00      	nop
 8003514:	40020010 	.word	0x40020010
 8003518:	40020028 	.word	0x40020028
 800351c:	40020040 	.word	0x40020040
 8003520:	40020058 	.word	0x40020058
 8003524:	40020070 	.word	0x40020070
 8003528:	40020088 	.word	0x40020088
 800352c:	400200a0 	.word	0x400200a0
 8003530:	400200b8 	.word	0x400200b8
 8003534:	40020410 	.word	0x40020410
 8003538:	40020428 	.word	0x40020428
 800353c:	40020440 	.word	0x40020440
 8003540:	40020458 	.word	0x40020458
 8003544:	40020470 	.word	0x40020470
 8003548:	40020488 	.word	0x40020488
 800354c:	400204a0 	.word	0x400204a0
 8003550:	400204b8 	.word	0x400204b8
 8003554:	58025408 	.word	0x58025408
 8003558:	5802541c 	.word	0x5802541c
 800355c:	58025430 	.word	0x58025430
 8003560:	58025444 	.word	0x58025444
 8003564:	58025458 	.word	0x58025458
 8003568:	5802546c 	.word	0x5802546c
 800356c:	58025480 	.word	0x58025480
 8003570:	58025494 	.word	0x58025494
 8003574:	2300      	movs	r3, #0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d007      	beq.n	800358a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003584:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003588:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a6d      	ldr	r2, [pc, #436]	@ (8003744 <HAL_DMA_Abort+0x444>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d04a      	beq.n	800362a <HAL_DMA_Abort+0x32a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a6b      	ldr	r2, [pc, #428]	@ (8003748 <HAL_DMA_Abort+0x448>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d045      	beq.n	800362a <HAL_DMA_Abort+0x32a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a6a      	ldr	r2, [pc, #424]	@ (800374c <HAL_DMA_Abort+0x44c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d040      	beq.n	800362a <HAL_DMA_Abort+0x32a>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a68      	ldr	r2, [pc, #416]	@ (8003750 <HAL_DMA_Abort+0x450>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d03b      	beq.n	800362a <HAL_DMA_Abort+0x32a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a67      	ldr	r2, [pc, #412]	@ (8003754 <HAL_DMA_Abort+0x454>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d036      	beq.n	800362a <HAL_DMA_Abort+0x32a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a65      	ldr	r2, [pc, #404]	@ (8003758 <HAL_DMA_Abort+0x458>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d031      	beq.n	800362a <HAL_DMA_Abort+0x32a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a64      	ldr	r2, [pc, #400]	@ (800375c <HAL_DMA_Abort+0x45c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d02c      	beq.n	800362a <HAL_DMA_Abort+0x32a>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a62      	ldr	r2, [pc, #392]	@ (8003760 <HAL_DMA_Abort+0x460>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d027      	beq.n	800362a <HAL_DMA_Abort+0x32a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a61      	ldr	r2, [pc, #388]	@ (8003764 <HAL_DMA_Abort+0x464>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d022      	beq.n	800362a <HAL_DMA_Abort+0x32a>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a5f      	ldr	r2, [pc, #380]	@ (8003768 <HAL_DMA_Abort+0x468>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d01d      	beq.n	800362a <HAL_DMA_Abort+0x32a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a5e      	ldr	r2, [pc, #376]	@ (800376c <HAL_DMA_Abort+0x46c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d018      	beq.n	800362a <HAL_DMA_Abort+0x32a>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a5c      	ldr	r2, [pc, #368]	@ (8003770 <HAL_DMA_Abort+0x470>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d013      	beq.n	800362a <HAL_DMA_Abort+0x32a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a5b      	ldr	r2, [pc, #364]	@ (8003774 <HAL_DMA_Abort+0x474>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d00e      	beq.n	800362a <HAL_DMA_Abort+0x32a>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a59      	ldr	r2, [pc, #356]	@ (8003778 <HAL_DMA_Abort+0x478>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d009      	beq.n	800362a <HAL_DMA_Abort+0x32a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a58      	ldr	r2, [pc, #352]	@ (800377c <HAL_DMA_Abort+0x47c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d004      	beq.n	800362a <HAL_DMA_Abort+0x32a>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a56      	ldr	r2, [pc, #344]	@ (8003780 <HAL_DMA_Abort+0x480>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d108      	bne.n	800363c <HAL_DMA_Abort+0x33c>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0201 	bic.w	r2, r2, #1
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	e007      	b.n	800364c <HAL_DMA_Abort+0x34c>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0201 	bic.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800364c:	e013      	b.n	8003676 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800364e:	f7ff fcb7 	bl	8002fc0 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b05      	cmp	r3, #5
 800365a:	d90c      	bls.n	8003676 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2220      	movs	r2, #32
 8003660:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2203      	movs	r2, #3
 8003666:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e12d      	b.n	80038d2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1e5      	bne.n	800364e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a2f      	ldr	r2, [pc, #188]	@ (8003744 <HAL_DMA_Abort+0x444>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d04a      	beq.n	8003722 <HAL_DMA_Abort+0x422>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a2d      	ldr	r2, [pc, #180]	@ (8003748 <HAL_DMA_Abort+0x448>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d045      	beq.n	8003722 <HAL_DMA_Abort+0x422>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a2c      	ldr	r2, [pc, #176]	@ (800374c <HAL_DMA_Abort+0x44c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d040      	beq.n	8003722 <HAL_DMA_Abort+0x422>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003750 <HAL_DMA_Abort+0x450>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d03b      	beq.n	8003722 <HAL_DMA_Abort+0x422>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a29      	ldr	r2, [pc, #164]	@ (8003754 <HAL_DMA_Abort+0x454>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d036      	beq.n	8003722 <HAL_DMA_Abort+0x422>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a27      	ldr	r2, [pc, #156]	@ (8003758 <HAL_DMA_Abort+0x458>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d031      	beq.n	8003722 <HAL_DMA_Abort+0x422>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a26      	ldr	r2, [pc, #152]	@ (800375c <HAL_DMA_Abort+0x45c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d02c      	beq.n	8003722 <HAL_DMA_Abort+0x422>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a24      	ldr	r2, [pc, #144]	@ (8003760 <HAL_DMA_Abort+0x460>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d027      	beq.n	8003722 <HAL_DMA_Abort+0x422>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a23      	ldr	r2, [pc, #140]	@ (8003764 <HAL_DMA_Abort+0x464>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d022      	beq.n	8003722 <HAL_DMA_Abort+0x422>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a21      	ldr	r2, [pc, #132]	@ (8003768 <HAL_DMA_Abort+0x468>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d01d      	beq.n	8003722 <HAL_DMA_Abort+0x422>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a20      	ldr	r2, [pc, #128]	@ (800376c <HAL_DMA_Abort+0x46c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d018      	beq.n	8003722 <HAL_DMA_Abort+0x422>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003770 <HAL_DMA_Abort+0x470>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d013      	beq.n	8003722 <HAL_DMA_Abort+0x422>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003774 <HAL_DMA_Abort+0x474>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00e      	beq.n	8003722 <HAL_DMA_Abort+0x422>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1b      	ldr	r2, [pc, #108]	@ (8003778 <HAL_DMA_Abort+0x478>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d009      	beq.n	8003722 <HAL_DMA_Abort+0x422>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1a      	ldr	r2, [pc, #104]	@ (800377c <HAL_DMA_Abort+0x47c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d004      	beq.n	8003722 <HAL_DMA_Abort+0x422>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a18      	ldr	r2, [pc, #96]	@ (8003780 <HAL_DMA_Abort+0x480>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d101      	bne.n	8003726 <HAL_DMA_Abort+0x426>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <HAL_DMA_Abort+0x428>
 8003726:	2300      	movs	r3, #0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d02b      	beq.n	8003784 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003730:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	223f      	movs	r2, #63	@ 0x3f
 800373c:	409a      	lsls	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	609a      	str	r2, [r3, #8]
 8003742:	e02a      	b.n	800379a <HAL_DMA_Abort+0x49a>
 8003744:	40020010 	.word	0x40020010
 8003748:	40020028 	.word	0x40020028
 800374c:	40020040 	.word	0x40020040
 8003750:	40020058 	.word	0x40020058
 8003754:	40020070 	.word	0x40020070
 8003758:	40020088 	.word	0x40020088
 800375c:	400200a0 	.word	0x400200a0
 8003760:	400200b8 	.word	0x400200b8
 8003764:	40020410 	.word	0x40020410
 8003768:	40020428 	.word	0x40020428
 800376c:	40020440 	.word	0x40020440
 8003770:	40020458 	.word	0x40020458
 8003774:	40020470 	.word	0x40020470
 8003778:	40020488 	.word	0x40020488
 800377c:	400204a0 	.word	0x400204a0
 8003780:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003788:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378e:	f003 031f 	and.w	r3, r3, #31
 8003792:	2201      	movs	r2, #1
 8003794:	409a      	lsls	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a4f      	ldr	r2, [pc, #316]	@ (80038dc <HAL_DMA_Abort+0x5dc>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d072      	beq.n	800388a <HAL_DMA_Abort+0x58a>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a4d      	ldr	r2, [pc, #308]	@ (80038e0 <HAL_DMA_Abort+0x5e0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d06d      	beq.n	800388a <HAL_DMA_Abort+0x58a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a4c      	ldr	r2, [pc, #304]	@ (80038e4 <HAL_DMA_Abort+0x5e4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d068      	beq.n	800388a <HAL_DMA_Abort+0x58a>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a4a      	ldr	r2, [pc, #296]	@ (80038e8 <HAL_DMA_Abort+0x5e8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d063      	beq.n	800388a <HAL_DMA_Abort+0x58a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a49      	ldr	r2, [pc, #292]	@ (80038ec <HAL_DMA_Abort+0x5ec>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d05e      	beq.n	800388a <HAL_DMA_Abort+0x58a>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a47      	ldr	r2, [pc, #284]	@ (80038f0 <HAL_DMA_Abort+0x5f0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d059      	beq.n	800388a <HAL_DMA_Abort+0x58a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a46      	ldr	r2, [pc, #280]	@ (80038f4 <HAL_DMA_Abort+0x5f4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d054      	beq.n	800388a <HAL_DMA_Abort+0x58a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a44      	ldr	r2, [pc, #272]	@ (80038f8 <HAL_DMA_Abort+0x5f8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d04f      	beq.n	800388a <HAL_DMA_Abort+0x58a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a43      	ldr	r2, [pc, #268]	@ (80038fc <HAL_DMA_Abort+0x5fc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d04a      	beq.n	800388a <HAL_DMA_Abort+0x58a>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a41      	ldr	r2, [pc, #260]	@ (8003900 <HAL_DMA_Abort+0x600>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d045      	beq.n	800388a <HAL_DMA_Abort+0x58a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a40      	ldr	r2, [pc, #256]	@ (8003904 <HAL_DMA_Abort+0x604>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d040      	beq.n	800388a <HAL_DMA_Abort+0x58a>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a3e      	ldr	r2, [pc, #248]	@ (8003908 <HAL_DMA_Abort+0x608>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d03b      	beq.n	800388a <HAL_DMA_Abort+0x58a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a3d      	ldr	r2, [pc, #244]	@ (800390c <HAL_DMA_Abort+0x60c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d036      	beq.n	800388a <HAL_DMA_Abort+0x58a>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a3b      	ldr	r2, [pc, #236]	@ (8003910 <HAL_DMA_Abort+0x610>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d031      	beq.n	800388a <HAL_DMA_Abort+0x58a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a3a      	ldr	r2, [pc, #232]	@ (8003914 <HAL_DMA_Abort+0x614>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d02c      	beq.n	800388a <HAL_DMA_Abort+0x58a>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a38      	ldr	r2, [pc, #224]	@ (8003918 <HAL_DMA_Abort+0x618>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d027      	beq.n	800388a <HAL_DMA_Abort+0x58a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a37      	ldr	r2, [pc, #220]	@ (800391c <HAL_DMA_Abort+0x61c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d022      	beq.n	800388a <HAL_DMA_Abort+0x58a>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a35      	ldr	r2, [pc, #212]	@ (8003920 <HAL_DMA_Abort+0x620>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d01d      	beq.n	800388a <HAL_DMA_Abort+0x58a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a34      	ldr	r2, [pc, #208]	@ (8003924 <HAL_DMA_Abort+0x624>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d018      	beq.n	800388a <HAL_DMA_Abort+0x58a>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a32      	ldr	r2, [pc, #200]	@ (8003928 <HAL_DMA_Abort+0x628>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d013      	beq.n	800388a <HAL_DMA_Abort+0x58a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a31      	ldr	r2, [pc, #196]	@ (800392c <HAL_DMA_Abort+0x62c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00e      	beq.n	800388a <HAL_DMA_Abort+0x58a>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a2f      	ldr	r2, [pc, #188]	@ (8003930 <HAL_DMA_Abort+0x630>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d009      	beq.n	800388a <HAL_DMA_Abort+0x58a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a2e      	ldr	r2, [pc, #184]	@ (8003934 <HAL_DMA_Abort+0x634>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d004      	beq.n	800388a <HAL_DMA_Abort+0x58a>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a2c      	ldr	r2, [pc, #176]	@ (8003938 <HAL_DMA_Abort+0x638>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d101      	bne.n	800388e <HAL_DMA_Abort+0x58e>
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <HAL_DMA_Abort+0x590>
 800388e:	2300      	movs	r3, #0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d015      	beq.n	80038c0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800389c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00c      	beq.n	80038c0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038b4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80038be:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40020010 	.word	0x40020010
 80038e0:	40020028 	.word	0x40020028
 80038e4:	40020040 	.word	0x40020040
 80038e8:	40020058 	.word	0x40020058
 80038ec:	40020070 	.word	0x40020070
 80038f0:	40020088 	.word	0x40020088
 80038f4:	400200a0 	.word	0x400200a0
 80038f8:	400200b8 	.word	0x400200b8
 80038fc:	40020410 	.word	0x40020410
 8003900:	40020428 	.word	0x40020428
 8003904:	40020440 	.word	0x40020440
 8003908:	40020458 	.word	0x40020458
 800390c:	40020470 	.word	0x40020470
 8003910:	40020488 	.word	0x40020488
 8003914:	400204a0 	.word	0x400204a0
 8003918:	400204b8 	.word	0x400204b8
 800391c:	58025408 	.word	0x58025408
 8003920:	5802541c 	.word	0x5802541c
 8003924:	58025430 	.word	0x58025430
 8003928:	58025444 	.word	0x58025444
 800392c:	58025458 	.word	0x58025458
 8003930:	5802546c 	.word	0x5802546c
 8003934:	58025480 	.word	0x58025480
 8003938:	58025494 	.word	0x58025494

0800393c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e237      	b.n	8003dbe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d004      	beq.n	8003964 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2280      	movs	r2, #128	@ 0x80
 800395e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e22c      	b.n	8003dbe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a5c      	ldr	r2, [pc, #368]	@ (8003adc <HAL_DMA_Abort_IT+0x1a0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d04a      	beq.n	8003a04 <HAL_DMA_Abort_IT+0xc8>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a5b      	ldr	r2, [pc, #364]	@ (8003ae0 <HAL_DMA_Abort_IT+0x1a4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d045      	beq.n	8003a04 <HAL_DMA_Abort_IT+0xc8>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a59      	ldr	r2, [pc, #356]	@ (8003ae4 <HAL_DMA_Abort_IT+0x1a8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d040      	beq.n	8003a04 <HAL_DMA_Abort_IT+0xc8>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a58      	ldr	r2, [pc, #352]	@ (8003ae8 <HAL_DMA_Abort_IT+0x1ac>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d03b      	beq.n	8003a04 <HAL_DMA_Abort_IT+0xc8>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a56      	ldr	r2, [pc, #344]	@ (8003aec <HAL_DMA_Abort_IT+0x1b0>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d036      	beq.n	8003a04 <HAL_DMA_Abort_IT+0xc8>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a55      	ldr	r2, [pc, #340]	@ (8003af0 <HAL_DMA_Abort_IT+0x1b4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d031      	beq.n	8003a04 <HAL_DMA_Abort_IT+0xc8>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a53      	ldr	r2, [pc, #332]	@ (8003af4 <HAL_DMA_Abort_IT+0x1b8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d02c      	beq.n	8003a04 <HAL_DMA_Abort_IT+0xc8>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a52      	ldr	r2, [pc, #328]	@ (8003af8 <HAL_DMA_Abort_IT+0x1bc>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d027      	beq.n	8003a04 <HAL_DMA_Abort_IT+0xc8>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a50      	ldr	r2, [pc, #320]	@ (8003afc <HAL_DMA_Abort_IT+0x1c0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d022      	beq.n	8003a04 <HAL_DMA_Abort_IT+0xc8>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a4f      	ldr	r2, [pc, #316]	@ (8003b00 <HAL_DMA_Abort_IT+0x1c4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d01d      	beq.n	8003a04 <HAL_DMA_Abort_IT+0xc8>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a4d      	ldr	r2, [pc, #308]	@ (8003b04 <HAL_DMA_Abort_IT+0x1c8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d018      	beq.n	8003a04 <HAL_DMA_Abort_IT+0xc8>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a4c      	ldr	r2, [pc, #304]	@ (8003b08 <HAL_DMA_Abort_IT+0x1cc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d013      	beq.n	8003a04 <HAL_DMA_Abort_IT+0xc8>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a4a      	ldr	r2, [pc, #296]	@ (8003b0c <HAL_DMA_Abort_IT+0x1d0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00e      	beq.n	8003a04 <HAL_DMA_Abort_IT+0xc8>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a49      	ldr	r2, [pc, #292]	@ (8003b10 <HAL_DMA_Abort_IT+0x1d4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d009      	beq.n	8003a04 <HAL_DMA_Abort_IT+0xc8>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a47      	ldr	r2, [pc, #284]	@ (8003b14 <HAL_DMA_Abort_IT+0x1d8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d004      	beq.n	8003a04 <HAL_DMA_Abort_IT+0xc8>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a46      	ldr	r2, [pc, #280]	@ (8003b18 <HAL_DMA_Abort_IT+0x1dc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d101      	bne.n	8003a08 <HAL_DMA_Abort_IT+0xcc>
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <HAL_DMA_Abort_IT+0xce>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 8086 	beq.w	8003b1c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2204      	movs	r2, #4
 8003a14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a2f      	ldr	r2, [pc, #188]	@ (8003adc <HAL_DMA_Abort_IT+0x1a0>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d04a      	beq.n	8003ab8 <HAL_DMA_Abort_IT+0x17c>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a2e      	ldr	r2, [pc, #184]	@ (8003ae0 <HAL_DMA_Abort_IT+0x1a4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d045      	beq.n	8003ab8 <HAL_DMA_Abort_IT+0x17c>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a2c      	ldr	r2, [pc, #176]	@ (8003ae4 <HAL_DMA_Abort_IT+0x1a8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d040      	beq.n	8003ab8 <HAL_DMA_Abort_IT+0x17c>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ae8 <HAL_DMA_Abort_IT+0x1ac>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d03b      	beq.n	8003ab8 <HAL_DMA_Abort_IT+0x17c>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a29      	ldr	r2, [pc, #164]	@ (8003aec <HAL_DMA_Abort_IT+0x1b0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d036      	beq.n	8003ab8 <HAL_DMA_Abort_IT+0x17c>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a28      	ldr	r2, [pc, #160]	@ (8003af0 <HAL_DMA_Abort_IT+0x1b4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d031      	beq.n	8003ab8 <HAL_DMA_Abort_IT+0x17c>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a26      	ldr	r2, [pc, #152]	@ (8003af4 <HAL_DMA_Abort_IT+0x1b8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d02c      	beq.n	8003ab8 <HAL_DMA_Abort_IT+0x17c>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a25      	ldr	r2, [pc, #148]	@ (8003af8 <HAL_DMA_Abort_IT+0x1bc>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d027      	beq.n	8003ab8 <HAL_DMA_Abort_IT+0x17c>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a23      	ldr	r2, [pc, #140]	@ (8003afc <HAL_DMA_Abort_IT+0x1c0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d022      	beq.n	8003ab8 <HAL_DMA_Abort_IT+0x17c>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a22      	ldr	r2, [pc, #136]	@ (8003b00 <HAL_DMA_Abort_IT+0x1c4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d01d      	beq.n	8003ab8 <HAL_DMA_Abort_IT+0x17c>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a20      	ldr	r2, [pc, #128]	@ (8003b04 <HAL_DMA_Abort_IT+0x1c8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d018      	beq.n	8003ab8 <HAL_DMA_Abort_IT+0x17c>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003b08 <HAL_DMA_Abort_IT+0x1cc>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d013      	beq.n	8003ab8 <HAL_DMA_Abort_IT+0x17c>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a1d      	ldr	r2, [pc, #116]	@ (8003b0c <HAL_DMA_Abort_IT+0x1d0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00e      	beq.n	8003ab8 <HAL_DMA_Abort_IT+0x17c>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003b10 <HAL_DMA_Abort_IT+0x1d4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d009      	beq.n	8003ab8 <HAL_DMA_Abort_IT+0x17c>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a1a      	ldr	r2, [pc, #104]	@ (8003b14 <HAL_DMA_Abort_IT+0x1d8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d004      	beq.n	8003ab8 <HAL_DMA_Abort_IT+0x17c>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a19      	ldr	r2, [pc, #100]	@ (8003b18 <HAL_DMA_Abort_IT+0x1dc>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d108      	bne.n	8003aca <HAL_DMA_Abort_IT+0x18e>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	e178      	b.n	8003dbc <HAL_DMA_Abort_IT+0x480>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0201 	bic.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	e16f      	b.n	8003dbc <HAL_DMA_Abort_IT+0x480>
 8003adc:	40020010 	.word	0x40020010
 8003ae0:	40020028 	.word	0x40020028
 8003ae4:	40020040 	.word	0x40020040
 8003ae8:	40020058 	.word	0x40020058
 8003aec:	40020070 	.word	0x40020070
 8003af0:	40020088 	.word	0x40020088
 8003af4:	400200a0 	.word	0x400200a0
 8003af8:	400200b8 	.word	0x400200b8
 8003afc:	40020410 	.word	0x40020410
 8003b00:	40020428 	.word	0x40020428
 8003b04:	40020440 	.word	0x40020440
 8003b08:	40020458 	.word	0x40020458
 8003b0c:	40020470 	.word	0x40020470
 8003b10:	40020488 	.word	0x40020488
 8003b14:	400204a0 	.word	0x400204a0
 8003b18:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 020e 	bic.w	r2, r2, #14
 8003b2a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a6c      	ldr	r2, [pc, #432]	@ (8003ce4 <HAL_DMA_Abort_IT+0x3a8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d04a      	beq.n	8003bcc <HAL_DMA_Abort_IT+0x290>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a6b      	ldr	r2, [pc, #428]	@ (8003ce8 <HAL_DMA_Abort_IT+0x3ac>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d045      	beq.n	8003bcc <HAL_DMA_Abort_IT+0x290>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a69      	ldr	r2, [pc, #420]	@ (8003cec <HAL_DMA_Abort_IT+0x3b0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d040      	beq.n	8003bcc <HAL_DMA_Abort_IT+0x290>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a68      	ldr	r2, [pc, #416]	@ (8003cf0 <HAL_DMA_Abort_IT+0x3b4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d03b      	beq.n	8003bcc <HAL_DMA_Abort_IT+0x290>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a66      	ldr	r2, [pc, #408]	@ (8003cf4 <HAL_DMA_Abort_IT+0x3b8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d036      	beq.n	8003bcc <HAL_DMA_Abort_IT+0x290>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a65      	ldr	r2, [pc, #404]	@ (8003cf8 <HAL_DMA_Abort_IT+0x3bc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d031      	beq.n	8003bcc <HAL_DMA_Abort_IT+0x290>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a63      	ldr	r2, [pc, #396]	@ (8003cfc <HAL_DMA_Abort_IT+0x3c0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d02c      	beq.n	8003bcc <HAL_DMA_Abort_IT+0x290>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a62      	ldr	r2, [pc, #392]	@ (8003d00 <HAL_DMA_Abort_IT+0x3c4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d027      	beq.n	8003bcc <HAL_DMA_Abort_IT+0x290>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a60      	ldr	r2, [pc, #384]	@ (8003d04 <HAL_DMA_Abort_IT+0x3c8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d022      	beq.n	8003bcc <HAL_DMA_Abort_IT+0x290>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a5f      	ldr	r2, [pc, #380]	@ (8003d08 <HAL_DMA_Abort_IT+0x3cc>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d01d      	beq.n	8003bcc <HAL_DMA_Abort_IT+0x290>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a5d      	ldr	r2, [pc, #372]	@ (8003d0c <HAL_DMA_Abort_IT+0x3d0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d018      	beq.n	8003bcc <HAL_DMA_Abort_IT+0x290>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a5c      	ldr	r2, [pc, #368]	@ (8003d10 <HAL_DMA_Abort_IT+0x3d4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d013      	beq.n	8003bcc <HAL_DMA_Abort_IT+0x290>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a5a      	ldr	r2, [pc, #360]	@ (8003d14 <HAL_DMA_Abort_IT+0x3d8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00e      	beq.n	8003bcc <HAL_DMA_Abort_IT+0x290>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a59      	ldr	r2, [pc, #356]	@ (8003d18 <HAL_DMA_Abort_IT+0x3dc>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d009      	beq.n	8003bcc <HAL_DMA_Abort_IT+0x290>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a57      	ldr	r2, [pc, #348]	@ (8003d1c <HAL_DMA_Abort_IT+0x3e0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d004      	beq.n	8003bcc <HAL_DMA_Abort_IT+0x290>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a56      	ldr	r2, [pc, #344]	@ (8003d20 <HAL_DMA_Abort_IT+0x3e4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d108      	bne.n	8003bde <HAL_DMA_Abort_IT+0x2a2>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0201 	bic.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	e007      	b.n	8003bee <HAL_DMA_Abort_IT+0x2b2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0201 	bic.w	r2, r2, #1
 8003bec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a3c      	ldr	r2, [pc, #240]	@ (8003ce4 <HAL_DMA_Abort_IT+0x3a8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d072      	beq.n	8003cde <HAL_DMA_Abort_IT+0x3a2>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a3a      	ldr	r2, [pc, #232]	@ (8003ce8 <HAL_DMA_Abort_IT+0x3ac>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d06d      	beq.n	8003cde <HAL_DMA_Abort_IT+0x3a2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a39      	ldr	r2, [pc, #228]	@ (8003cec <HAL_DMA_Abort_IT+0x3b0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d068      	beq.n	8003cde <HAL_DMA_Abort_IT+0x3a2>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a37      	ldr	r2, [pc, #220]	@ (8003cf0 <HAL_DMA_Abort_IT+0x3b4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d063      	beq.n	8003cde <HAL_DMA_Abort_IT+0x3a2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a36      	ldr	r2, [pc, #216]	@ (8003cf4 <HAL_DMA_Abort_IT+0x3b8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d05e      	beq.n	8003cde <HAL_DMA_Abort_IT+0x3a2>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a34      	ldr	r2, [pc, #208]	@ (8003cf8 <HAL_DMA_Abort_IT+0x3bc>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d059      	beq.n	8003cde <HAL_DMA_Abort_IT+0x3a2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a33      	ldr	r2, [pc, #204]	@ (8003cfc <HAL_DMA_Abort_IT+0x3c0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d054      	beq.n	8003cde <HAL_DMA_Abort_IT+0x3a2>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a31      	ldr	r2, [pc, #196]	@ (8003d00 <HAL_DMA_Abort_IT+0x3c4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d04f      	beq.n	8003cde <HAL_DMA_Abort_IT+0x3a2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a30      	ldr	r2, [pc, #192]	@ (8003d04 <HAL_DMA_Abort_IT+0x3c8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d04a      	beq.n	8003cde <HAL_DMA_Abort_IT+0x3a2>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a2e      	ldr	r2, [pc, #184]	@ (8003d08 <HAL_DMA_Abort_IT+0x3cc>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d045      	beq.n	8003cde <HAL_DMA_Abort_IT+0x3a2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a2d      	ldr	r2, [pc, #180]	@ (8003d0c <HAL_DMA_Abort_IT+0x3d0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d040      	beq.n	8003cde <HAL_DMA_Abort_IT+0x3a2>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a2b      	ldr	r2, [pc, #172]	@ (8003d10 <HAL_DMA_Abort_IT+0x3d4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d03b      	beq.n	8003cde <HAL_DMA_Abort_IT+0x3a2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a2a      	ldr	r2, [pc, #168]	@ (8003d14 <HAL_DMA_Abort_IT+0x3d8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d036      	beq.n	8003cde <HAL_DMA_Abort_IT+0x3a2>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a28      	ldr	r2, [pc, #160]	@ (8003d18 <HAL_DMA_Abort_IT+0x3dc>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d031      	beq.n	8003cde <HAL_DMA_Abort_IT+0x3a2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a27      	ldr	r2, [pc, #156]	@ (8003d1c <HAL_DMA_Abort_IT+0x3e0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d02c      	beq.n	8003cde <HAL_DMA_Abort_IT+0x3a2>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a25      	ldr	r2, [pc, #148]	@ (8003d20 <HAL_DMA_Abort_IT+0x3e4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d027      	beq.n	8003cde <HAL_DMA_Abort_IT+0x3a2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a24      	ldr	r2, [pc, #144]	@ (8003d24 <HAL_DMA_Abort_IT+0x3e8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d022      	beq.n	8003cde <HAL_DMA_Abort_IT+0x3a2>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a22      	ldr	r2, [pc, #136]	@ (8003d28 <HAL_DMA_Abort_IT+0x3ec>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d01d      	beq.n	8003cde <HAL_DMA_Abort_IT+0x3a2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a21      	ldr	r2, [pc, #132]	@ (8003d2c <HAL_DMA_Abort_IT+0x3f0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d018      	beq.n	8003cde <HAL_DMA_Abort_IT+0x3a2>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1f      	ldr	r2, [pc, #124]	@ (8003d30 <HAL_DMA_Abort_IT+0x3f4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <HAL_DMA_Abort_IT+0x3a2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a1e      	ldr	r2, [pc, #120]	@ (8003d34 <HAL_DMA_Abort_IT+0x3f8>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d00e      	beq.n	8003cde <HAL_DMA_Abort_IT+0x3a2>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8003d38 <HAL_DMA_Abort_IT+0x3fc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d009      	beq.n	8003cde <HAL_DMA_Abort_IT+0x3a2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a1b      	ldr	r2, [pc, #108]	@ (8003d3c <HAL_DMA_Abort_IT+0x400>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d004      	beq.n	8003cde <HAL_DMA_Abort_IT+0x3a2>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a19      	ldr	r2, [pc, #100]	@ (8003d40 <HAL_DMA_Abort_IT+0x404>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d132      	bne.n	8003d44 <HAL_DMA_Abort_IT+0x408>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e031      	b.n	8003d46 <HAL_DMA_Abort_IT+0x40a>
 8003ce2:	bf00      	nop
 8003ce4:	40020010 	.word	0x40020010
 8003ce8:	40020028 	.word	0x40020028
 8003cec:	40020040 	.word	0x40020040
 8003cf0:	40020058 	.word	0x40020058
 8003cf4:	40020070 	.word	0x40020070
 8003cf8:	40020088 	.word	0x40020088
 8003cfc:	400200a0 	.word	0x400200a0
 8003d00:	400200b8 	.word	0x400200b8
 8003d04:	40020410 	.word	0x40020410
 8003d08:	40020428 	.word	0x40020428
 8003d0c:	40020440 	.word	0x40020440
 8003d10:	40020458 	.word	0x40020458
 8003d14:	40020470 	.word	0x40020470
 8003d18:	40020488 	.word	0x40020488
 8003d1c:	400204a0 	.word	0x400204a0
 8003d20:	400204b8 	.word	0x400204b8
 8003d24:	58025408 	.word	0x58025408
 8003d28:	5802541c 	.word	0x5802541c
 8003d2c:	58025430 	.word	0x58025430
 8003d30:	58025444 	.word	0x58025444
 8003d34:	58025458 	.word	0x58025458
 8003d38:	5802546c 	.word	0x5802546c
 8003d3c:	58025480 	.word	0x58025480
 8003d40:	58025494 	.word	0x58025494
 8003d44:	2300      	movs	r3, #0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d028      	beq.n	8003d9c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d58:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	2201      	movs	r2, #1
 8003d6a:	409a      	lsls	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003d78:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00c      	beq.n	8003d9c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d90:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003d9a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop

08003dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b089      	sub	sp, #36	@ 0x24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003dd6:	4b89      	ldr	r3, [pc, #548]	@ (8003ffc <HAL_GPIO_Init+0x234>)
 8003dd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003dda:	e194      	b.n	8004106 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	2101      	movs	r1, #1
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	fa01 f303 	lsl.w	r3, r1, r3
 8003de8:	4013      	ands	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 8186 	beq.w	8004100 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f003 0303 	and.w	r3, r3, #3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d005      	beq.n	8003e0c <HAL_GPIO_Init+0x44>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 0303 	and.w	r3, r3, #3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d130      	bne.n	8003e6e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	2203      	movs	r2, #3
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	4013      	ands	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e42:	2201      	movs	r2, #1
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	091b      	lsrs	r3, r3, #4
 8003e58:	f003 0201 	and.w	r2, r3, #1
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d017      	beq.n	8003eaa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	2203      	movs	r2, #3
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	689a      	ldr	r2, [r3, #8]
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d123      	bne.n	8003efe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	08da      	lsrs	r2, r3, #3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3208      	adds	r2, #8
 8003ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	220f      	movs	r2, #15
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	691a      	ldr	r2, [r3, #16]
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	08da      	lsrs	r2, r3, #3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3208      	adds	r2, #8
 8003ef8:	69b9      	ldr	r1, [r7, #24]
 8003efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	2203      	movs	r2, #3
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4013      	ands	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f003 0203 	and.w	r2, r3, #3
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 80e0 	beq.w	8004100 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f40:	4b2f      	ldr	r3, [pc, #188]	@ (8004000 <HAL_GPIO_Init+0x238>)
 8003f42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f46:	4a2e      	ldr	r2, [pc, #184]	@ (8004000 <HAL_GPIO_Init+0x238>)
 8003f48:	f043 0302 	orr.w	r3, r3, #2
 8003f4c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003f50:	4b2b      	ldr	r3, [pc, #172]	@ (8004000 <HAL_GPIO_Init+0x238>)
 8003f52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f5e:	4a29      	ldr	r2, [pc, #164]	@ (8004004 <HAL_GPIO_Init+0x23c>)
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	089b      	lsrs	r3, r3, #2
 8003f64:	3302      	adds	r3, #2
 8003f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	220f      	movs	r2, #15
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a20      	ldr	r2, [pc, #128]	@ (8004008 <HAL_GPIO_Init+0x240>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d052      	beq.n	8004030 <HAL_GPIO_Init+0x268>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800400c <HAL_GPIO_Init+0x244>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d031      	beq.n	8003ff6 <HAL_GPIO_Init+0x22e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a1e      	ldr	r2, [pc, #120]	@ (8004010 <HAL_GPIO_Init+0x248>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d02b      	beq.n	8003ff2 <HAL_GPIO_Init+0x22a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8004014 <HAL_GPIO_Init+0x24c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d025      	beq.n	8003fee <HAL_GPIO_Init+0x226>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8004018 <HAL_GPIO_Init+0x250>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d01f      	beq.n	8003fea <HAL_GPIO_Init+0x222>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a1b      	ldr	r2, [pc, #108]	@ (800401c <HAL_GPIO_Init+0x254>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d019      	beq.n	8003fe6 <HAL_GPIO_Init+0x21e>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a1a      	ldr	r2, [pc, #104]	@ (8004020 <HAL_GPIO_Init+0x258>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d013      	beq.n	8003fe2 <HAL_GPIO_Init+0x21a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a19      	ldr	r2, [pc, #100]	@ (8004024 <HAL_GPIO_Init+0x25c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00d      	beq.n	8003fde <HAL_GPIO_Init+0x216>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a18      	ldr	r2, [pc, #96]	@ (8004028 <HAL_GPIO_Init+0x260>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d007      	beq.n	8003fda <HAL_GPIO_Init+0x212>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a17      	ldr	r2, [pc, #92]	@ (800402c <HAL_GPIO_Init+0x264>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d101      	bne.n	8003fd6 <HAL_GPIO_Init+0x20e>
 8003fd2:	2309      	movs	r3, #9
 8003fd4:	e02d      	b.n	8004032 <HAL_GPIO_Init+0x26a>
 8003fd6:	230a      	movs	r3, #10
 8003fd8:	e02b      	b.n	8004032 <HAL_GPIO_Init+0x26a>
 8003fda:	2308      	movs	r3, #8
 8003fdc:	e029      	b.n	8004032 <HAL_GPIO_Init+0x26a>
 8003fde:	2307      	movs	r3, #7
 8003fe0:	e027      	b.n	8004032 <HAL_GPIO_Init+0x26a>
 8003fe2:	2306      	movs	r3, #6
 8003fe4:	e025      	b.n	8004032 <HAL_GPIO_Init+0x26a>
 8003fe6:	2305      	movs	r3, #5
 8003fe8:	e023      	b.n	8004032 <HAL_GPIO_Init+0x26a>
 8003fea:	2304      	movs	r3, #4
 8003fec:	e021      	b.n	8004032 <HAL_GPIO_Init+0x26a>
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e01f      	b.n	8004032 <HAL_GPIO_Init+0x26a>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	e01d      	b.n	8004032 <HAL_GPIO_Init+0x26a>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e01b      	b.n	8004032 <HAL_GPIO_Init+0x26a>
 8003ffa:	bf00      	nop
 8003ffc:	58000080 	.word	0x58000080
 8004000:	58024400 	.word	0x58024400
 8004004:	58000400 	.word	0x58000400
 8004008:	58020000 	.word	0x58020000
 800400c:	58020400 	.word	0x58020400
 8004010:	58020800 	.word	0x58020800
 8004014:	58020c00 	.word	0x58020c00
 8004018:	58021000 	.word	0x58021000
 800401c:	58021400 	.word	0x58021400
 8004020:	58021800 	.word	0x58021800
 8004024:	58021c00 	.word	0x58021c00
 8004028:	58022000 	.word	0x58022000
 800402c:	58022400 	.word	0x58022400
 8004030:	2300      	movs	r3, #0
 8004032:	69fa      	ldr	r2, [r7, #28]
 8004034:	f002 0203 	and.w	r2, r2, #3
 8004038:	0092      	lsls	r2, r2, #2
 800403a:	4093      	lsls	r3, r2
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4313      	orrs	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004042:	4938      	ldr	r1, [pc, #224]	@ (8004124 <HAL_GPIO_Init+0x35c>)
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	089b      	lsrs	r3, r3, #2
 8004048:	3302      	adds	r3, #2
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004050:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	43db      	mvns	r3, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4013      	ands	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004076:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800407e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	43db      	mvns	r3, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4013      	ands	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80040a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	43db      	mvns	r3, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4013      	ands	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	43db      	mvns	r3, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4013      	ands	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	3301      	adds	r3, #1
 8004104:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	fa22 f303 	lsr.w	r3, r2, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	f47f ae63 	bne.w	8003ddc <HAL_GPIO_Init+0x14>
  }
}
 8004116:	bf00      	nop
 8004118:	bf00      	nop
 800411a:	3724      	adds	r7, #36	@ 0x24
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	58000400 	.word	0x58000400

08004128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	807b      	strh	r3, [r7, #2]
 8004134:	4613      	mov	r3, r2
 8004136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004138:	787b      	ldrb	r3, [r7, #1]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800413e:	887a      	ldrh	r2, [r7, #2]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004144:	e003      	b.n	800414e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004146:	887b      	ldrh	r3, [r7, #2]
 8004148:	041a      	lsls	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	619a      	str	r2, [r3, #24]
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
	...

0800415c <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e0bd      	b.n	80042ea <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2202      	movs	r2, #2
 8004172:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d031      	beq.n	8004216 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a4f      	ldr	r2, [pc, #316]	@ (80042f4 <HAL_HRTIM_Init+0x198>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d10e      	bne.n	80041da <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80041bc:	4b4e      	ldr	r3, [pc, #312]	@ (80042f8 <HAL_HRTIM_Init+0x19c>)
 80041be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041c2:	4a4d      	ldr	r2, [pc, #308]	@ (80042f8 <HAL_HRTIM_Init+0x19c>)
 80041c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80041c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80041cc:	4b4a      	ldr	r3, [pc, #296]	@ (80042f8 <HAL_HRTIM_Init+0x19c>)
 80041ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80041e8:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80041fe:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7fd ff8c 	bl	8002134 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d012      	beq.n	800424e <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004236:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800425e:	2300      	movs	r3, #0
 8004260:	75fb      	strb	r3, [r7, #23]
 8004262:	e03e      	b.n	80042e2 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8004264:	7dfa      	ldrb	r2, [r7, #23]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	1a9b      	subs	r3, r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	3318      	adds	r3, #24
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8004278:	7dfa      	ldrb	r2, [r7, #23]
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	1a9b      	subs	r3, r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	331c      	adds	r3, #28
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800428c:	7dfa      	ldrb	r2, [r7, #23]
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	3320      	adds	r3, #32
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80042a0:	7dfa      	ldrb	r2, [r7, #23]
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	1a9b      	subs	r3, r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	3324      	adds	r3, #36	@ 0x24
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80042b4:	7dfa      	ldrb	r2, [r7, #23]
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	1a9b      	subs	r3, r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	3328      	adds	r3, #40	@ 0x28
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80042c8:	7dfa      	ldrb	r2, [r7, #23]
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	4613      	mov	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	3330      	adds	r3, #48	@ 0x30
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80042dc:	7dfb      	ldrb	r3, [r7, #23]
 80042de:	3301      	adds	r3, #1
 80042e0:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 80042e2:	7dfb      	ldrb	r3, [r7, #23]
 80042e4:	2b05      	cmp	r3, #5
 80042e6:	d9bd      	bls.n	8004264 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40017400 	.word	0x40017400
 80042f8:	58024400 	.word	0x58024400

080042fc <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d101      	bne.n	8004318 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8004314:	2302      	movs	r3, #2
 8004316:	e015      	b.n	8004344 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b05      	cmp	r3, #5
 8004324:	d104      	bne.n	8004330 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 fa88 	bl	800483e <HRTIM_MasterBase_Config>
 800432e:	e004      	b.n	800433a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 fab1 	bl	800489c <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_HRTIM_EventConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Event,
                                        const HRTIM_EventCfgTypeDef* pEventCfg)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_EVENTPOLARITY(pEventCfg->Sensitivity, pEventCfg->Polarity));
  assert_param(IS_HRTIM_EVENTSENSITIVITY(pEventCfg->Sensitivity));
  assert_param(IS_HRTIM_EVENTFASTMODE(Event, pEventCfg->FastMode));
  assert_param(IS_HRTIM_EVENTFILTER(Event, pEventCfg->Filter));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d101      	bne.n	8004368 <HAL_HRTIM_EventConfig+0x1c>
  {
     return HAL_BUSY;
 8004364:	2302      	movs	r3, #2
 8004366:	e01c      	b.n	80043a2 <HAL_HRTIM_EventConfig+0x56>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <HAL_HRTIM_EventConfig+0x2a>
 8004372:	2302      	movs	r3, #2
 8004374:	e015      	b.n	80043a2 <HAL_HRTIM_EventConfig+0x56>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2202      	movs	r2, #2
 8004382:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the event channel */
  HRTIM_EventConfig(hhrtim, Event, pEventCfg);
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	68b9      	ldr	r1, [r7, #8]
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 fd44 	bl	8004e18 <HRTIM_EventConfig>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_HRTIM_EventPrescalerConfig>:
  * @note This function must be called before starting the timer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_EVENTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d101      	bne.n	80043c4 <HAL_HRTIM_EventPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 80043c0:	2302      	movs	r3, #2
 80043c2:	e025      	b.n	8004410 <HAL_HRTIM_EventPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d101      	bne.n	80043d2 <HAL_HRTIM_EventPrescalerConfig+0x28>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e01e      	b.n	8004410 <HAL_HRTIM_EventPrescalerConfig+0x66>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2202      	movs	r2, #2
 80043de:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 80043ea:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d101      	bne.n	8004438 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8004434:	2302      	movs	r3, #2
 8004436:	e05f      	b.n	80044f8 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8004442:	2302      	movs	r3, #2
 8004444:	e058      	b.n	80044f8 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2202      	movs	r2, #2
 8004452:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b05      	cmp	r3, #5
 800445a:	d104      	bne.n	8004466 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 fa5c 	bl	800491c <HRTIM_MasterWaveform_Config>
 8004464:	e004      	b.n	8004470 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 fabc 	bl	80049e8 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6819      	ldr	r1, [r3, #0]
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	4613      	mov	r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4403      	add	r3, r0
 8004482:	3320      	adds	r3, #32
 8004484:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6859      	ldr	r1, [r3, #4]
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	4613      	mov	r3, r2
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4403      	add	r3, r0
 8004498:	3324      	adds	r3, #36	@ 0x24
 800449a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6899      	ldr	r1, [r3, #8]
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	4613      	mov	r3, r2
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	1a9b      	subs	r3, r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4403      	add	r3, r0
 80044ae:	3328      	adds	r3, #40	@ 0x28
 80044b0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68d9      	ldr	r1, [r3, #12]
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	4613      	mov	r3, r2
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	1a9b      	subs	r3, r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4403      	add	r3, r0
 80044c4:	332c      	adds	r3, #44	@ 0x2c
 80044c6:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6919      	ldr	r1, [r3, #16]
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	4613      	mov	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	1a9b      	subs	r3, r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4403      	add	r3, r0
 80044da:	3330      	adds	r3, #48	@ 0x30
 80044dc:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80044de:	68b9      	ldr	r1, [r7, #8]
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 fec1 	bl	8005268 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d101      	bne.n	800451e <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 800451a:	2302      	movs	r3, #2
 800451c:	e157      	b.n	80047ce <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8004528:	2302      	movs	r3, #2
 800452a:	e150      	b.n	80047ce <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2b05      	cmp	r3, #5
 8004540:	d140      	bne.n	80045c4 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3b01      	subs	r3, #1
 8004546:	2b07      	cmp	r3, #7
 8004548:	d82a      	bhi.n	80045a0 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 800454a:	a201      	add	r2, pc, #4	@ (adr r2, 8004550 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 800454c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004550:	08004571 	.word	0x08004571
 8004554:	0800457d 	.word	0x0800457d
 8004558:	080045a1 	.word	0x080045a1
 800455c:	08004589 	.word	0x08004589
 8004560:	080045a1 	.word	0x080045a1
 8004564:	080045a1 	.word	0x080045a1
 8004568:	080045a1 	.word	0x080045a1
 800456c:	08004595 	.word	0x08004595
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	61da      	str	r2, [r3, #28]
        break;
 800457a:	e01a      	b.n	80045b2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	6812      	ldr	r2, [r2, #0]
 8004584:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 8004586:	e014      	b.n	80045b2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 8004592:	e00e      	b.n	80045b2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 800459e:	e008      	b.n	80045b2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2207      	movs	r2, #7
 80045a4:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

        break;
 80045b0:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b07      	cmp	r3, #7
 80045bc:	f040 80fe 	bne.w	80047bc <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e104      	b.n	80047ce <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	2b07      	cmp	r3, #7
 80045ca:	f200 80e3 	bhi.w	8004794 <HAL_HRTIM_WaveformCompareConfig+0x294>
 80045ce:	a201      	add	r2, pc, #4	@ (adr r2, 80045d4 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80045d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d4:	080045f5 	.word	0x080045f5
 80045d8:	08004609 	.word	0x08004609
 80045dc:	08004795 	.word	0x08004795
 80045e0:	080046c5 	.word	0x080046c5
 80045e4:	08004795 	.word	0x08004795
 80045e8:	08004795 	.word	0x08004795
 80045ec:	08004795 	.word	0x08004795
 80045f0:	080046d9 	.word	0x080046d9
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6819      	ldr	r1, [r3, #0]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	01db      	lsls	r3, r3, #7
 8004600:	440b      	add	r3, r1
 8004602:	339c      	adds	r3, #156	@ 0x9c
 8004604:	601a      	str	r2, [r3, #0]
        break;
 8004606:	e0d1      	b.n	80047ac <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6819      	ldr	r1, [r3, #0]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	01db      	lsls	r3, r3, #7
 8004614:	440b      	add	r3, r1
 8004616:	33a4      	adds	r3, #164	@ 0xa4
 8004618:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d03f      	beq.n	80046a2 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	3301      	adds	r3, #1
 800462a:	01db      	lsls	r3, r3, #7
 800462c:	4413      	add	r3, r2
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	6811      	ldr	r1, [r2, #0]
 8004634:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	3301      	adds	r3, #1
 800463c:	01db      	lsls	r3, r3, #7
 800463e:	440b      	add	r3, r1
 8004640:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	3301      	adds	r3, #1
 800464a:	01db      	lsls	r3, r3, #7
 800464c:	4413      	add	r3, r2
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	68f9      	ldr	r1, [r7, #12]
 8004656:	6809      	ldr	r1, [r1, #0]
 8004658:	431a      	orrs	r2, r3
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	3301      	adds	r3, #1
 800465e:	01db      	lsls	r3, r3, #7
 8004660:	440b      	add	r3, r1
 8004662:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800466c:	d109      	bne.n	8004682 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6819      	ldr	r1, [r3, #0]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	01db      	lsls	r3, r3, #7
 800467a:	440b      	add	r3, r1
 800467c:	339c      	adds	r3, #156	@ 0x9c
 800467e:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8004680:	e091      	b.n	80047a6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800468a:	f040 808c 	bne.w	80047a6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6819      	ldr	r1, [r3, #0]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	689a      	ldr	r2, [r3, #8]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	01db      	lsls	r3, r3, #7
 800469a:	440b      	add	r3, r1
 800469c:	33a8      	adds	r3, #168	@ 0xa8
 800469e:	601a      	str	r2, [r3, #0]
         break;
 80046a0:	e081      	b.n	80047a6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	3301      	adds	r3, #1
 80046aa:	01db      	lsls	r3, r3, #7
 80046ac:	4413      	add	r3, r2
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	6811      	ldr	r1, [r2, #0]
 80046b4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	3301      	adds	r3, #1
 80046bc:	01db      	lsls	r3, r3, #7
 80046be:	440b      	add	r3, r1
 80046c0:	601a      	str	r2, [r3, #0]
         break;
 80046c2:	e070      	b.n	80047a6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6819      	ldr	r1, [r3, #0]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	01db      	lsls	r3, r3, #7
 80046d0:	440b      	add	r3, r1
 80046d2:	33a8      	adds	r3, #168	@ 0xa8
 80046d4:	601a      	str	r2, [r3, #0]
        break;
 80046d6:	e069      	b.n	80047ac <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6819      	ldr	r1, [r3, #0]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	01db      	lsls	r3, r3, #7
 80046e4:	440b      	add	r3, r1
 80046e6:	33ac      	adds	r3, #172	@ 0xac
 80046e8:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d03f      	beq.n	8004772 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	3301      	adds	r3, #1
 80046fa:	01db      	lsls	r3, r3, #7
 80046fc:	4413      	add	r3, r2
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	6811      	ldr	r1, [r2, #0]
 8004704:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	3301      	adds	r3, #1
 800470c:	01db      	lsls	r3, r3, #7
 800470e:	440b      	add	r3, r1
 8004710:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	3301      	adds	r3, #1
 800471a:	01db      	lsls	r3, r3, #7
 800471c:	4413      	add	r3, r2
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	68f9      	ldr	r1, [r7, #12]
 8004728:	6809      	ldr	r1, [r1, #0]
 800472a:	431a      	orrs	r2, r3
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	3301      	adds	r3, #1
 8004730:	01db      	lsls	r3, r3, #7
 8004732:	440b      	add	r3, r1
 8004734:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800473e:	d109      	bne.n	8004754 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6819      	ldr	r1, [r3, #0]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	01db      	lsls	r3, r3, #7
 800474c:	440b      	add	r3, r1
 800474e:	339c      	adds	r3, #156	@ 0x9c
 8004750:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8004752:	e02a      	b.n	80047aa <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800475c:	d125      	bne.n	80047aa <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6819      	ldr	r1, [r3, #0]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	01db      	lsls	r3, r3, #7
 800476a:	440b      	add	r3, r1
 800476c:	33a8      	adds	r3, #168	@ 0xa8
 800476e:	601a      	str	r2, [r3, #0]
         break;
 8004770:	e01b      	b.n	80047aa <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	3301      	adds	r3, #1
 800477a:	01db      	lsls	r3, r3, #7
 800477c:	4413      	add	r3, r2
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	6811      	ldr	r1, [r2, #0]
 8004784:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	3301      	adds	r3, #1
 800478c:	01db      	lsls	r3, r3, #7
 800478e:	440b      	add	r3, r1
 8004790:	601a      	str	r2, [r3, #0]
         break;
 8004792:	e00a      	b.n	80047aa <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2207      	movs	r2, #7
 8004798:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

      break;
 80047a4:	e002      	b.n	80047ac <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80047a6:	bf00      	nop
 80047a8:	e000      	b.n	80047ac <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80047aa:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b07      	cmp	r3, #7
 80047b6:	d101      	bne.n	80047bc <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e008      	b.n	80047ce <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop

080047dc <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d101      	bne.n	80047fa <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 80047f6:	2302      	movs	r3, #2
 80047f8:	e01d      	b.n	8004836 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8004804:	2302      	movs	r3, #2
 8004806:	e016      	b.n	8004836 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	68b9      	ldr	r1, [r7, #8]
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 fa22 	bl	8004c68 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800483e:	b480      	push	{r7}
 8004840:	b085      	sub	sp, #20
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0307 	bic.w	r3, r3, #7
 8004856:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4313      	orrs	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f023 0318 	bic.w	r3, r3, #24
 8004868:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4313      	orrs	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	6812      	ldr	r2, [r2, #0]
 8004884:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	6852      	ldr	r2, [r2, #4]
 800488e:	619a      	str	r2, [r3, #24]
}
 8004890:	bf00      	nop
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	3301      	adds	r3, #1
 80048b0:	01db      	lsls	r3, r3, #7
 80048b2:	4413      	add	r3, r2
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f023 0307 	bic.w	r3, r3, #7
 80048be:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f023 0318 	bic.w	r3, r3, #24
 80048d0:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	4313      	orrs	r3, r2
 80048da:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	3301      	adds	r3, #1
 80048e4:	01db      	lsls	r3, r3, #7
 80048e6:	4413      	add	r3, r2
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6819      	ldr	r1, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	01db      	lsls	r3, r3, #7
 80048f8:	440b      	add	r3, r1
 80048fa:	3394      	adds	r3, #148	@ 0x94
 80048fc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6819      	ldr	r1, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	01db      	lsls	r3, r3, #7
 800490a:	440b      	add	r3, r1
 800490c:	3398      	adds	r3, #152	@ 0x98
 800490e:	601a      	str	r2, [r3, #0]
}
 8004910:	bf00      	nop
 8004912:	371c      	adds	r7, #28
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8004936:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0320 	bic.w	r3, r3, #32
 800493e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004950:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4313      	orrs	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004962:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004974:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	4313      	orrs	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004986:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004998:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80049ac:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049be:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 80049dc:	bf00      	nop
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b08b      	sub	sp, #44	@ 0x2c
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	3301      	adds	r3, #1
 80049fc:	01db      	lsls	r3, r3, #7
 80049fe:	4413      	add	r3, r2
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	6811      	ldr	r1, [r2, #0]
 8004a06:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	01db      	lsls	r3, r3, #7
 8004a10:	440b      	add	r3, r1
 8004a12:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	01db      	lsls	r3, r3, #7
 8004a1e:	4413      	add	r3, r2
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	01db      	lsls	r3, r3, #7
 8004a2c:	4413      	add	r3, r2
 8004a2e:	33e8      	adds	r3, #232	@ 0xe8
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	01db      	lsls	r3, r3, #7
 8004a3c:	4413      	add	r3, r2
 8004a3e:	33e4      	adds	r3, #228	@ 0xe4
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8004a4c:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a50:	f023 0320 	bic.w	r3, r3, #32
 8004a54:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8004a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a66:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8004a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a78:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a80:	4313      	orrs	r3, r2
 8004a82:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8004a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a86:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a92:	4313      	orrs	r3, r2
 8004a94:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8004a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a98:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aaa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004aae:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004aca:	d103      	bne.n	8004ad4 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8004acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ace:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ada:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004aec:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004af4:	4313      	orrs	r3, r2
 8004af6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8004af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afa:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8004afe:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b06:	4313      	orrs	r3, r2
 8004b08:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	f023 031f 	bic.w	r3, r3, #31
 8004b10:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b16:	f003 031f 	and.w	r3, r3, #31
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b26:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d108      	bne.n	8004b4c <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b40:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	6a3a      	ldr	r2, [r7, #32]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b50:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8004b54:	d004      	beq.n	8004b60 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b5a:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8004b5e:	d103      	bne.n	8004b68 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b64:	2b40      	cmp	r3, #64	@ 0x40
 8004b66:	d108      	bne.n	8004b7a <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8004b6e:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b74:	6a3a      	ldr	r2, [r7, #32]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b7e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d843      	bhi.n	8004c0e <HRTIM_TimingUnitWaveform_Config+0x226>
 8004b86:	a201      	add	r2, pc, #4	@ (adr r2, 8004b8c <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8004b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8c:	08004ba1 	.word	0x08004ba1
 8004b90:	08004bb7 	.word	0x08004bb7
 8004b94:	08004bcd 	.word	0x08004bcd
 8004b98:	08004be3 	.word	0x08004be3
 8004b9c:	08004bf9 	.word	0x08004bf9
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004ba6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	61fb      	str	r3, [r7, #28]
      break;
 8004bb4:	e02c      	b.n	8004c10 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bbc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	69fa      	ldr	r2, [r7, #28]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	61fb      	str	r3, [r7, #28]
      break;
 8004bca:	e021      	b.n	8004c10 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004bd2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd8:	00db      	lsls	r3, r3, #3
 8004bda:	69fa      	ldr	r2, [r7, #28]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	61fb      	str	r3, [r7, #28]
      break;
 8004be0:	e016      	b.n	8004c10 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004be8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	69fa      	ldr	r2, [r7, #28]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	61fb      	str	r3, [r7, #28]
      break;
 8004bf6:	e00b      	b.n	8004c10 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004bfe:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c04:	015b      	lsls	r3, r3, #5
 8004c06:	69fa      	ldr	r2, [r7, #28]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	61fb      	str	r3, [r7, #28]
      break;
 8004c0c:	e000      	b.n	8004c10 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8004c0e:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	3301      	adds	r3, #1
 8004c18:	01db      	lsls	r3, r3, #7
 8004c1a:	4413      	add	r3, r2
 8004c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c1e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	01db      	lsls	r3, r3, #7
 8004c28:	4413      	add	r3, r2
 8004c2a:	33e8      	adds	r3, #232	@ 0xe8
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	01db      	lsls	r3, r3, #7
 8004c38:	4413      	add	r3, r2
 8004c3a:	33e4      	adds	r3, #228	@ 0xe4
 8004c3c:	6a3a      	ldr	r2, [r7, #32]
 8004c3e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	01db      	lsls	r3, r3, #7
 8004c48:	4413      	add	r3, r2
 8004c4a:	33d4      	adds	r3, #212	@ 0xd4
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	69fa      	ldr	r2, [r7, #28]
 8004c56:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8004c5a:	bf00      	nop
 8004c5c:	372c      	adds	r7, #44	@ 0x2c
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop

08004c68 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b089      	sub	sp, #36	@ 0x24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	01db      	lsls	r3, r3, #7
 8004c82:	4413      	add	r3, r2
 8004c84:	33e4      	adds	r3, #228	@ 0xe4
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	01db      	lsls	r3, r3, #7
 8004c92:	4413      	add	r3, r2
 8004c94:	33b8      	adds	r3, #184	@ 0xb8
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	617b      	str	r3, [r7, #20]

  switch (Output)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ca0:	d04d      	beq.n	8004d3e <HRTIM_OutputConfig+0xd6>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ca8:	d85e      	bhi.n	8004d68 <HRTIM_OutputConfig+0x100>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cb0:	d032      	beq.n	8004d18 <HRTIM_OutputConfig+0xb0>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cb8:	d856      	bhi.n	8004d68 <HRTIM_OutputConfig+0x100>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b80      	cmp	r3, #128	@ 0x80
 8004cbe:	d03e      	beq.n	8004d3e <HRTIM_OutputConfig+0xd6>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b80      	cmp	r3, #128	@ 0x80
 8004cc4:	d850      	bhi.n	8004d68 <HRTIM_OutputConfig+0x100>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b40      	cmp	r3, #64	@ 0x40
 8004cca:	d025      	beq.n	8004d18 <HRTIM_OutputConfig+0xb0>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b40      	cmp	r3, #64	@ 0x40
 8004cd0:	d84a      	bhi.n	8004d68 <HRTIM_OutputConfig+0x100>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d01f      	beq.n	8004d18 <HRTIM_OutputConfig+0xb0>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d044      	beq.n	8004d68 <HRTIM_OutputConfig+0x100>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	d841      	bhi.n	8004d68 <HRTIM_OutputConfig+0x100>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d33e      	bcc.n	8004d68 <HRTIM_OutputConfig+0x100>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	3b02      	subs	r3, #2
 8004cee:	2201      	movs	r2, #1
 8004cf0:	409a      	lsls	r2, r3
 8004cf2:	4b48      	ldr	r3, [pc, #288]	@ (8004e14 <HRTIM_OutputConfig+0x1ac>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	bf14      	ite	ne
 8004cfa:	2301      	movne	r3, #1
 8004cfc:	2300      	moveq	r3, #0
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d11c      	bne.n	8004d3e <HRTIM_OutputConfig+0xd6>
 8004d04:	f244 0304 	movw	r3, #16388	@ 0x4004
 8004d08:	4013      	ands	r3, r2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	bf14      	ite	ne
 8004d0e:	2301      	movne	r3, #1
 8004d10:	2300      	moveq	r3, #0
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d027      	beq.n	8004d68 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6819      	ldr	r1, [r3, #0]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	01db      	lsls	r3, r3, #7
 8004d24:	440b      	add	r3, r1
 8004d26:	33bc      	adds	r3, #188	@ 0xbc
 8004d28:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6819      	ldr	r1, [r3, #0]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	01db      	lsls	r3, r3, #7
 8004d36:	440b      	add	r3, r1
 8004d38:	33c0      	adds	r3, #192	@ 0xc0
 8004d3a:	601a      	str	r2, [r3, #0]
      break;
 8004d3c:	e015      	b.n	8004d6a <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6819      	ldr	r1, [r3, #0]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	01db      	lsls	r3, r3, #7
 8004d4a:	440b      	add	r3, r1
 8004d4c:	33c4      	adds	r3, #196	@ 0xc4
 8004d4e:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6819      	ldr	r1, [r3, #0]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	01db      	lsls	r3, r3, #7
 8004d5c:	440b      	add	r3, r1
 8004d5e:	33c8      	adds	r3, #200	@ 0xc8
 8004d60:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8004d62:	2310      	movs	r3, #16
 8004d64:	61bb      	str	r3, [r7, #24]
      break;
 8004d66:	e000      	b.n	8004d6a <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8004d68:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8004d6a:	22fe      	movs	r2, #254	@ 0xfe
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8004d72:	43db      	mvns	r3, r3
 8004d74:	69fa      	ldr	r2, [r7, #28]
 8004d76:	4013      	ands	r3, r2
 8004d78:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	69fa      	ldr	r2, [r7, #28]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	69fa      	ldr	r2, [r7, #28]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	691a      	ldr	r2, [r3, #16]
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	fa02 f303 	lsl.w	r3, r2, r3
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	695a      	ldr	r2, [r3, #20]
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	69fa      	ldr	r2, [r7, #28]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	699a      	ldr	r2, [r3, #24]
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	69fa      	ldr	r2, [r7, #28]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d111      	bne.n	8004df6 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10c      	bne.n	8004df6 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d107      	bne.n	8004df6 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	69da      	ldr	r2, [r3, #28]
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	69fa      	ldr	r2, [r7, #28]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	01db      	lsls	r3, r3, #7
 8004dfe:	4413      	add	r3, r2
 8004e00:	33e4      	adds	r3, #228	@ 0xe4
 8004e02:	69fa      	ldr	r2, [r7, #28]
 8004e04:	601a      	str	r2, [r3, #0]
}
 8004e06:	bf00      	nop
 8004e08:	3724      	adds	r7, #36	@ 0x24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40000041 	.word	0x40000041

08004e18 <HRTIM_EventConfig>:
  * @retval None
  */
static void HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                              uint32_t Event,
                              const HRTIM_EventCfgTypeDef *pEventCfg)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b089      	sub	sp, #36	@ 0x24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_eecr1;
  uint32_t hrtim_eecr2;
  uint32_t hrtim_eecr3;

  /* Configure external event channel */
  hrtim_eecr1 = hhrtim->Instance->sCommonRegs.EECR1;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 8004e2c:	61fb      	str	r3, [r7, #28]
  hrtim_eecr2 = hhrtim->Instance->sCommonRegs.EECR2;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 8004e36:	61bb      	str	r3, [r7, #24]
  hrtim_eecr3 = hhrtim->Instance->sCommonRegs.EECR3;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 8004e40:	617b      	str	r3, [r7, #20]

  switch (Event)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b0a      	cmp	r3, #10
 8004e46:	f200 8208 	bhi.w	800525a <HRTIM_EventConfig+0x442>
 8004e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e50 <HRTIM_EventConfig+0x38>)
 8004e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e50:	08004e7d 	.word	0x08004e7d
 8004e54:	08004e9d 	.word	0x08004e9d
 8004e58:	08004ef3 	.word	0x08004ef3
 8004e5c:	08004f4f 	.word	0x08004f4f
 8004e60:	08004fad 	.word	0x08004fad
 8004e64:	0800500b 	.word	0x0800500b
 8004e68:	08005069 	.word	0x08005069
 8004e6c:	080050c7 	.word	0x080050c7
 8004e70:	0800512b 	.word	0x0800512b
 8004e74:	0800518f 	.word	0x0800518f
 8004e78:	080051f5 	.word	0x080051f5
  {
  case HRTIM_EVENT_NONE:
    {
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR1 = 0U;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      hhrtim->Instance->sCommonRegs.EECR2 = 0U;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = 0U;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8004e9a:	e1df      	b.n	800525c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_1:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE1SRC | HRTIM_EECR1_EE1POL | HRTIM_EECR1_EE1SNS | HRTIM_EECR1_EE1FAST);
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ea2:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Source & HRTIM_EECR1_EE1SRC);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0303 	and.w	r3, r3, #3
 8004eac:	69fa      	ldr	r2, [r7, #28]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Polarity & HRTIM_EECR1_EE1POL);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	69fa      	ldr	r2, [r7, #28]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f003 0318 	and.w	r3, r3, #24
 8004ec8:	69fa      	ldr	r2, [r7, #28]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE1FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE1FAST bit) */
      hrtim_eecr1 |= (pEventCfg->FastMode  & HRTIM_EECR1_EE1FAST);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	69fa      	ldr	r2, [r7, #28]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69fa      	ldr	r2, [r7, #28]
 8004eec:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8004ef0:	e1b4      	b.n	800525c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_2:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE2SRC | HRTIM_EECR1_EE2POL | HRTIM_EECR1_EE2SNS | HRTIM_EECR1_EE2FAST);
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 8004ef8:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 6U) & HRTIM_EECR1_EE2SRC);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	019b      	lsls	r3, r3, #6
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	69fa      	ldr	r2, [r7, #28]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR1_EE2POL);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	019b      	lsls	r3, r3, #6
 8004f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	019b      	lsls	r3, r3, #6
 8004f1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f22:	69fa      	ldr	r2, [r7, #28]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE2FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	69fa      	ldr	r2, [r7, #28]
 8004f2e:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE2FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	019b      	lsls	r3, r3, #6
 8004f38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f3c:	69fa      	ldr	r2, [r7, #28]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69fa      	ldr	r2, [r7, #28]
 8004f48:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8004f4c:	e186      	b.n	800525c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_3:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE3SRC | HRTIM_EECR1_EE3POL | HRTIM_EECR1_EE3SNS | HRTIM_EECR1_EE3FAST);
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004f54:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 12U) & HRTIM_EECR1_EE3SRC);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	031b      	lsls	r3, r3, #12
 8004f5c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004f60:	69fa      	ldr	r2, [r7, #28]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR1_EE3POL);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	031b      	lsls	r3, r3, #12
 8004f6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f70:	69fa      	ldr	r2, [r7, #28]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	031b      	lsls	r3, r3, #12
 8004f7c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8004f80:	69fa      	ldr	r2, [r7, #28]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE3FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69fa      	ldr	r2, [r7, #28]
 8004f8c:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE3FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	031b      	lsls	r3, r3, #12
 8004f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f9a:	69fa      	ldr	r2, [r7, #28]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	69fa      	ldr	r2, [r7, #28]
 8004fa6:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8004faa:	e157      	b.n	800525c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_4:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE4SRC | HRTIM_EECR1_EE4POL | HRTIM_EECR1_EE4SNS | HRTIM_EECR1_EE4FAST);
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f423 037c 	bic.w	r3, r3, #16515072	@ 0xfc0000
 8004fb2:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 18U) & HRTIM_EECR1_EE4SRC);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	049b      	lsls	r3, r3, #18
 8004fba:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004fbe:	69fa      	ldr	r2, [r7, #28]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR1_EE4POL);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	049b      	lsls	r3, r3, #18
 8004fca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fce:	69fa      	ldr	r2, [r7, #28]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	049b      	lsls	r3, r3, #18
 8004fda:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 8004fde:	69fa      	ldr	r2, [r7, #28]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE4FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	69fa      	ldr	r2, [r7, #28]
 8004fea:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE4FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	049b      	lsls	r3, r3, #18
 8004ff4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ff8:	69fa      	ldr	r2, [r7, #28]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69fa      	ldr	r2, [r7, #28]
 8005004:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8005008:	e128      	b.n	800525c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_5:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE5SRC | HRTIM_EECR1_EE5POL | HRTIM_EECR1_EE5SNS | HRTIM_EECR1_EE5FAST);
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8005010:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 24U) & HRTIM_EECR1_EE5SRC);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	061b      	lsls	r3, r3, #24
 8005018:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800501c:	69fa      	ldr	r2, [r7, #28]
 800501e:	4313      	orrs	r3, r2
 8005020:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR1_EE5POL);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	061b      	lsls	r3, r3, #24
 8005028:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800502c:	69fa      	ldr	r2, [r7, #28]
 800502e:	4313      	orrs	r3, r2
 8005030:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	061b      	lsls	r3, r3, #24
 8005038:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 800503c:	69fa      	ldr	r2, [r7, #28]
 800503e:	4313      	orrs	r3, r2
 8005040:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE5FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69fa      	ldr	r2, [r7, #28]
 8005048:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE5FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	061b      	lsls	r3, r3, #24
 8005052:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005056:	69fa      	ldr	r2, [r7, #28]
 8005058:	4313      	orrs	r3, r2
 800505a:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	69fa      	ldr	r2, [r7, #28]
 8005062:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8005066:	e0f9      	b.n	800525c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_6:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE6SRC | HRTIM_EECR2_EE6POL | HRTIM_EECR2_EE6SNS);
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	f023 031f 	bic.w	r3, r3, #31
 800506e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Source & HRTIM_EECR2_EE6SRC);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0303 	and.w	r3, r3, #3
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	4313      	orrs	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Polarity & HRTIM_EECR2_EE6POL);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	4313      	orrs	r3, r2
 800508a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f003 0318 	and.w	r3, r3, #24
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	4313      	orrs	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE6F);
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f023 030f 	bic.w	r3, r3, #15
 80050a0:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f003 030f 	and.w	r3, r3, #15
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 80050c4:	e0ca      	b.n	800525c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_7:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE7SRC | HRTIM_EECR2_EE7POL | HRTIM_EECR2_EE7SNS);
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 80050cc:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	019b      	lsls	r3, r3, #6
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	4313      	orrs	r3, r2
 80050da:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR2_EE7POL);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	019b      	lsls	r3, r3, #6
 80050e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	019b      	lsls	r3, r3, #6
 80050f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE7F);
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f423 7370 	bic.w	r3, r3, #960	@ 0x3c0
 8005102:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	019b      	lsls	r3, r3, #6
 800510a:	f403 7370 	and.w	r3, r3, #960	@ 0x3c0
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005128:	e098      	b.n	800525c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_8:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE8SRC | HRTIM_EECR2_EE8POL | HRTIM_EECR2_EE8SNS);
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	f423 33f8 	bic.w	r3, r3, #126976	@ 0x1f000
 8005130:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	031b      	lsls	r3, r3, #12
 8005138:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	4313      	orrs	r3, r2
 8005140:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR2_EE8POL);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	031b      	lsls	r3, r3, #12
 8005148:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	4313      	orrs	r3, r2
 8005150:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	031b      	lsls	r3, r3, #12
 8005158:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	4313      	orrs	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE8F);
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005168:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	031b      	lsls	r3, r3, #12
 8005170:	b29b      	uxth	r3, r3
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 800518c:	e066      	b.n	800525c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_9:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE9SRC | HRTIM_EECR2_EE9POL | HRTIM_EECR2_EE9SNS);
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	f423 03f8 	bic.w	r3, r3, #8126464	@ 0x7c0000
 8005194:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	049b      	lsls	r3, r3, #18
 800519c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR2_EE9POL);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	049b      	lsls	r3, r3, #18
 80051ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	049b      	lsls	r3, r3, #18
 80051bc:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE9F);
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 80051cc:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	049b      	lsls	r3, r3, #18
 80051d4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 80051f2:	e033      	b.n	800525c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_10:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE10SRC | HRTIM_EECR2_EE10POL | HRTIM_EECR2_EE10SNS);
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 80051fa:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	061b      	lsls	r3, r3, #24
 8005202:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	4313      	orrs	r3, r2
 800520a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	061b      	lsls	r3, r3, #24
 8005212:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	4313      	orrs	r3, r2
 800521a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	061b      	lsls	r3, r3, #24
 8005222:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	4313      	orrs	r3, r2
 800522a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE10F);
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8005232:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	061b      	lsls	r3, r3, #24
 800523a:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005258:	e000      	b.n	800525c <HRTIM_EventConfig+0x444>
    }

  default:
    break;
 800525a:	bf00      	nop
  }
}
 800525c:	bf00      	nop
 800525e:	3724      	adds	r7, #36	@ 0x24
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b05      	cmp	r3, #5
 8005276:	d851      	bhi.n	800531c <HRTIM_ForceRegistersUpdate+0xb4>
 8005278:	a201      	add	r2, pc, #4	@ (adr r2, 8005280 <HRTIM_ForceRegistersUpdate+0x18>)
 800527a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527e:	bf00      	nop
 8005280:	080052af 	.word	0x080052af
 8005284:	080052c5 	.word	0x080052c5
 8005288:	080052db 	.word	0x080052db
 800528c:	080052f1 	.word	0x080052f1
 8005290:	08005307 	.word	0x08005307
 8005294:	08005299 	.word	0x08005299
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f042 0201 	orr.w	r2, r2, #1
 80052a8:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80052ac:	e037      	b.n	800531e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0202 	orr.w	r2, r2, #2
 80052be:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80052c2:	e02c      	b.n	800531e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0204 	orr.w	r2, r2, #4
 80052d4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80052d8:	e021      	b.n	800531e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0208 	orr.w	r2, r2, #8
 80052ea:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80052ee:	e016      	b.n	800531e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f042 0210 	orr.w	r2, r2, #16
 8005300:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005304:	e00b      	b.n	800531e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0220 	orr.w	r2, r2, #32
 8005316:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800531a:	e000      	b.n	800531e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 800531c:	bf00      	nop
  }
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop

0800532c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e097      	b.n	800546e <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d106      	bne.n	800535e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7fc ff83 	bl	8002264 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2202      	movs	r2, #2
 8005362:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d004      	beq.n	8005380 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800537a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800537e:	d103      	bne.n	8005388 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 031e 	bic.w	r3, r3, #30
 8005386:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005390:	4293      	cmp	r3, r2
 8005392:	d003      	beq.n	800539c <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4b38      	ldr	r3, [pc, #224]	@ (8005478 <HAL_LPTIM_Init+0x14c>)
 8005398:	4013      	ands	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	4b37      	ldr	r3, [pc, #220]	@ (800547c <HAL_LPTIM_Init+0x150>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80053ac:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80053b2:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 80053b8:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 80053be:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d107      	bne.n	80053de <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80053d6:	4313      	orrs	r3, r2
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d004      	beq.n	80053f0 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053ee:	d107      	bne.n	8005400 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80053f8:	4313      	orrs	r3, r2
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005408:	4293      	cmp	r3, r2
 800540a:	d00a      	beq.n	8005422 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005414:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800541a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a14      	ldr	r2, [pc, #80]	@ (8005480 <HAL_LPTIM_Init+0x154>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d004      	beq.n	800543e <HAL_LPTIM_Init+0x112>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a12      	ldr	r2, [pc, #72]	@ (8005484 <HAL_LPTIM_Init+0x158>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d108      	bne.n	8005450 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	625a      	str	r2, [r3, #36]	@ 0x24
 800544e:	e009      	b.n	8005464 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a0c      	ldr	r2, [pc, #48]	@ (8005488 <HAL_LPTIM_Init+0x15c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d104      	bne.n	8005464 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005462:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	ffff1f3f 	.word	0xffff1f3f
 800547c:	ff19f1fe 	.word	0xff19f1fe
 8005480:	40002400 	.word	0x40002400
 8005484:	58002400 	.word	0x58002400
 8005488:	58002800 	.word	0x58002800

0800548c <HAL_LPTIM_PWM_Start>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Reset WAVE bit to set PWM mode */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80054ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691a      	ldr	r2, [r3, #16]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0201 	orr.w	r2, r2, #1
 80054be:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2210      	movs	r2, #16
 80054c6:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80054d0:	2110      	movs	r1, #16
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 f97e 	bl	80057d4 <LPTIM_WaitForFlag>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b03      	cmp	r3, #3
 80054dc:	d101      	bne.n	80054e2 <HAL_LPTIM_PWM_Start+0x56>
  {
    return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e01d      	b.n	800551e <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2208      	movs	r2, #8
 80054e8:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80054f2:	2108      	movs	r1, #8
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 f96d 	bl	80057d4 <LPTIM_WaitForFlag>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d101      	bne.n	8005504 <HAL_LPTIM_PWM_Start+0x78>
  {
    return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e00c      	b.n	800551e <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	691a      	ldr	r2, [r3, #16]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0204 	orr.w	r2, r2, #4
 8005512:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b082      	sub	sp, #8
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d00c      	beq.n	800555a <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005544:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005548:	d107      	bne.n	800555a <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 8005558:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	691a      	ldr	r2, [r3, #16]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f042 0201 	orr.w	r2, r2, #1
 8005568:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2210      	movs	r2, #16
 8005570:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800557a:	2110      	movs	r1, #16
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f929 	bl	80057d4 <LPTIM_WaitForFlag>
 8005582:	4603      	mov	r3, r0
 8005584:	2b03      	cmp	r3, #3
 8005586:	d101      	bne.n	800558c <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e02f      	b.n	80055ec <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f951 	bl	8005834 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f90f 	bl	80057b6 <HAL_LPTIM_GetState>
 8005598:	4603      	mov	r3, r0
 800559a:	2b03      	cmp	r3, #3
 800559c:	d101      	bne.n	80055a2 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e024      	b.n	80055ec <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f042 0210 	orr.w	r2, r2, #16
 80055b0:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f042 0202 	orr.w	r2, r2, #2
 80055c0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	691a      	ldr	r2, [r3, #16]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f042 0201 	orr.w	r2, r2, #1
 80055d0:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	691a      	ldr	r2, [r3, #16]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 0204 	orr.w	r2, r2, #4
 80055e0:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3708      	adds	r7, #8
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b01      	cmp	r3, #1
 8005608:	d10d      	bne.n	8005626 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b01      	cmp	r3, #1
 8005616:	d106      	bne.n	8005626 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2201      	movs	r2, #1
 800561e:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f882 	bl	800572a <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b02      	cmp	r3, #2
 8005632:	d10d      	bne.n	8005650 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b02      	cmp	r3, #2
 8005640:	d106      	bne.n	8005650 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2202      	movs	r2, #2
 8005648:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f877 	bl	800573e <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0304 	and.w	r3, r3, #4
 800565a:	2b04      	cmp	r3, #4
 800565c:	d10d      	bne.n	800567a <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f003 0304 	and.w	r3, r3, #4
 8005668:	2b04      	cmp	r3, #4
 800566a:	d106      	bne.n	800567a <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2204      	movs	r2, #4
 8005672:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f86c 	bl	8005752 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0308 	and.w	r3, r3, #8
 8005684:	2b08      	cmp	r3, #8
 8005686:	d10d      	bne.n	80056a4 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 0308 	and.w	r3, r3, #8
 8005692:	2b08      	cmp	r3, #8
 8005694:	d106      	bne.n	80056a4 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2208      	movs	r2, #8
 800569c:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f861 	bl	8005766 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0310 	and.w	r3, r3, #16
 80056ae:	2b10      	cmp	r3, #16
 80056b0:	d10d      	bne.n	80056ce <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f003 0310 	and.w	r3, r3, #16
 80056bc:	2b10      	cmp	r3, #16
 80056be:	d106      	bne.n	80056ce <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2210      	movs	r2, #16
 80056c6:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f856 	bl	800577a <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0320 	and.w	r3, r3, #32
 80056d8:	2b20      	cmp	r3, #32
 80056da:	d10d      	bne.n	80056f8 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	d106      	bne.n	80056f8 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2220      	movs	r2, #32
 80056f0:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f84b 	bl	800578e <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005702:	2b40      	cmp	r3, #64	@ 0x40
 8005704:	d10d      	bne.n	8005722 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005710:	2b40      	cmp	r3, #64	@ 0x40
 8005712:	d106      	bne.n	8005722 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2240      	movs	r2, #64	@ 0x40
 800571a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f840 	bl	80057a2 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8005722:	bf00      	nop
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800575a:	bf00      	nop
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005766:	b480      	push	{r7}
 8005768:	b083      	sub	sp, #12
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800576e:	bf00      	nop
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80057c4:	b2db      	uxtb	r3, r3
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
	...

080057d4 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80057e2:	4b12      	ldr	r3, [pc, #72]	@ (800582c <LPTIM_WaitForFlag+0x58>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a12      	ldr	r2, [pc, #72]	@ (8005830 <LPTIM_WaitForFlag+0x5c>)
 80057e8:	fba2 2303 	umull	r2, r3, r2, r3
 80057ec:	0b9b      	lsrs	r3, r3, #14
 80057ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80057f2:	fb02 f303 	mul.w	r3, r2, r3
 80057f6:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	4013      	ands	r3, r2
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d002      	beq.n	800581e <LPTIM_WaitForFlag+0x4a>
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1ec      	bne.n	80057f8 <LPTIM_WaitForFlag+0x24>

  return result;
 800581e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	24000004 	.word	0x24000004
 8005830:	d1b71759 	.word	0xd1b71759

08005834 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b08c      	sub	sp, #48	@ 0x30
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 800583c:	2300      	movs	r3, #0
 800583e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005840:	f3ef 8310 	mrs	r3, PRIMASK
 8005844:	60fb      	str	r3, [r7, #12]
  return(result);
 8005846:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005848:	62bb      	str	r3, [r7, #40]	@ 0x28
 800584a:	2301      	movs	r3, #1
 800584c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f383 8810 	msr	PRIMASK, r3
}
 8005854:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a81      	ldr	r2, [pc, #516]	@ (8005a60 <LPTIM_Disable+0x22c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d02d      	beq.n	80058bc <LPTIM_Disable+0x88>
 8005860:	4a7f      	ldr	r2, [pc, #508]	@ (8005a60 <LPTIM_Disable+0x22c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d830      	bhi.n	80058c8 <LPTIM_Disable+0x94>
 8005866:	4a7f      	ldr	r2, [pc, #508]	@ (8005a64 <LPTIM_Disable+0x230>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d021      	beq.n	80058b0 <LPTIM_Disable+0x7c>
 800586c:	4a7d      	ldr	r2, [pc, #500]	@ (8005a64 <LPTIM_Disable+0x230>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d82a      	bhi.n	80058c8 <LPTIM_Disable+0x94>
 8005872:	4a7d      	ldr	r2, [pc, #500]	@ (8005a68 <LPTIM_Disable+0x234>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d015      	beq.n	80058a4 <LPTIM_Disable+0x70>
 8005878:	4a7b      	ldr	r2, [pc, #492]	@ (8005a68 <LPTIM_Disable+0x234>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d824      	bhi.n	80058c8 <LPTIM_Disable+0x94>
 800587e:	4a7b      	ldr	r2, [pc, #492]	@ (8005a6c <LPTIM_Disable+0x238>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d003      	beq.n	800588c <LPTIM_Disable+0x58>
 8005884:	4a7a      	ldr	r2, [pc, #488]	@ (8005a70 <LPTIM_Disable+0x23c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d006      	beq.n	8005898 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 800588a:	e01d      	b.n	80058c8 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 800588c:	4b79      	ldr	r3, [pc, #484]	@ (8005a74 <LPTIM_Disable+0x240>)
 800588e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005890:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005894:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005896:	e018      	b.n	80058ca <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005898:	4b76      	ldr	r3, [pc, #472]	@ (8005a74 <LPTIM_Disable+0x240>)
 800589a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800589c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80058a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80058a2:	e012      	b.n	80058ca <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 80058a4:	4b73      	ldr	r3, [pc, #460]	@ (8005a74 <LPTIM_Disable+0x240>)
 80058a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80058ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80058ae:	e00c      	b.n	80058ca <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 80058b0:	4b70      	ldr	r3, [pc, #448]	@ (8005a74 <LPTIM_Disable+0x240>)
 80058b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80058b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80058ba:	e006      	b.n	80058ca <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 80058bc:	4b6d      	ldr	r3, [pc, #436]	@ (8005a74 <LPTIM_Disable+0x240>)
 80058be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058c0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80058c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80058c6:	e000      	b.n	80058ca <LPTIM_Disable+0x96>
      break;
 80058c8:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f0:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a5a      	ldr	r2, [pc, #360]	@ (8005a60 <LPTIM_Disable+0x22c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d059      	beq.n	80059b0 <LPTIM_Disable+0x17c>
 80058fc:	4a58      	ldr	r2, [pc, #352]	@ (8005a60 <LPTIM_Disable+0x22c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d867      	bhi.n	80059d2 <LPTIM_Disable+0x19e>
 8005902:	4a58      	ldr	r2, [pc, #352]	@ (8005a64 <LPTIM_Disable+0x230>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d042      	beq.n	800598e <LPTIM_Disable+0x15a>
 8005908:	4a56      	ldr	r2, [pc, #344]	@ (8005a64 <LPTIM_Disable+0x230>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d861      	bhi.n	80059d2 <LPTIM_Disable+0x19e>
 800590e:	4a56      	ldr	r2, [pc, #344]	@ (8005a68 <LPTIM_Disable+0x234>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d02b      	beq.n	800596c <LPTIM_Disable+0x138>
 8005914:	4a54      	ldr	r2, [pc, #336]	@ (8005a68 <LPTIM_Disable+0x234>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d85b      	bhi.n	80059d2 <LPTIM_Disable+0x19e>
 800591a:	4a54      	ldr	r2, [pc, #336]	@ (8005a6c <LPTIM_Disable+0x238>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d003      	beq.n	8005928 <LPTIM_Disable+0xf4>
 8005920:	4a53      	ldr	r2, [pc, #332]	@ (8005a70 <LPTIM_Disable+0x23c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d011      	beq.n	800594a <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8005926:	e054      	b.n	80059d2 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8005928:	4b52      	ldr	r3, [pc, #328]	@ (8005a74 <LPTIM_Disable+0x240>)
 800592a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800592e:	4a51      	ldr	r2, [pc, #324]	@ (8005a74 <LPTIM_Disable+0x240>)
 8005930:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005934:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8005938:	4b4e      	ldr	r3, [pc, #312]	@ (8005a74 <LPTIM_Disable+0x240>)
 800593a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800593e:	4a4d      	ldr	r2, [pc, #308]	@ (8005a74 <LPTIM_Disable+0x240>)
 8005940:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005944:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      break;
 8005948:	e044      	b.n	80059d4 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 800594a:	4b4a      	ldr	r3, [pc, #296]	@ (8005a74 <LPTIM_Disable+0x240>)
 800594c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005950:	4a48      	ldr	r2, [pc, #288]	@ (8005a74 <LPTIM_Disable+0x240>)
 8005952:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005956:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 800595a:	4b46      	ldr	r3, [pc, #280]	@ (8005a74 <LPTIM_Disable+0x240>)
 800595c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005960:	4a44      	ldr	r2, [pc, #272]	@ (8005a74 <LPTIM_Disable+0x240>)
 8005962:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005966:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 800596a:	e033      	b.n	80059d4 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 800596c:	4b41      	ldr	r3, [pc, #260]	@ (8005a74 <LPTIM_Disable+0x240>)
 800596e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005972:	4a40      	ldr	r2, [pc, #256]	@ (8005a74 <LPTIM_Disable+0x240>)
 8005974:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005978:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 800597c:	4b3d      	ldr	r3, [pc, #244]	@ (8005a74 <LPTIM_Disable+0x240>)
 800597e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005982:	4a3c      	ldr	r2, [pc, #240]	@ (8005a74 <LPTIM_Disable+0x240>)
 8005984:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005988:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 800598c:	e022      	b.n	80059d4 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 800598e:	4b39      	ldr	r3, [pc, #228]	@ (8005a74 <LPTIM_Disable+0x240>)
 8005990:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005994:	4a37      	ldr	r2, [pc, #220]	@ (8005a74 <LPTIM_Disable+0x240>)
 8005996:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800599a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 800599e:	4b35      	ldr	r3, [pc, #212]	@ (8005a74 <LPTIM_Disable+0x240>)
 80059a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059a4:	4a33      	ldr	r2, [pc, #204]	@ (8005a74 <LPTIM_Disable+0x240>)
 80059a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059aa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 80059ae:	e011      	b.n	80059d4 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 80059b0:	4b30      	ldr	r3, [pc, #192]	@ (8005a74 <LPTIM_Disable+0x240>)
 80059b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059b6:	4a2f      	ldr	r2, [pc, #188]	@ (8005a74 <LPTIM_Disable+0x240>)
 80059b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80059bc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 80059c0:	4b2c      	ldr	r3, [pc, #176]	@ (8005a74 <LPTIM_Disable+0x240>)
 80059c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059c6:	4a2b      	ldr	r2, [pc, #172]	@ (8005a74 <LPTIM_Disable+0x240>)
 80059c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059cc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 80059d0:	e000      	b.n	80059d4 <LPTIM_Disable+0x1a0>
      break;
 80059d2:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d103      	bne.n	80059e2 <LPTIM_Disable+0x1ae>
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 80d1 	beq.w	8005b84 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005a60 <LPTIM_Disable+0x22c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d031      	beq.n	8005a50 <LPTIM_Disable+0x21c>
 80059ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005a60 <LPTIM_Disable+0x22c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d842      	bhi.n	8005a78 <LPTIM_Disable+0x244>
 80059f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005a64 <LPTIM_Disable+0x230>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d024      	beq.n	8005a42 <LPTIM_Disable+0x20e>
 80059f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005a64 <LPTIM_Disable+0x230>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d83c      	bhi.n	8005a78 <LPTIM_Disable+0x244>
 80059fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005a68 <LPTIM_Disable+0x234>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d017      	beq.n	8005a34 <LPTIM_Disable+0x200>
 8005a04:	4a18      	ldr	r2, [pc, #96]	@ (8005a68 <LPTIM_Disable+0x234>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d836      	bhi.n	8005a78 <LPTIM_Disable+0x244>
 8005a0a:	4a18      	ldr	r2, [pc, #96]	@ (8005a6c <LPTIM_Disable+0x238>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d003      	beq.n	8005a18 <LPTIM_Disable+0x1e4>
 8005a10:	4a17      	ldr	r2, [pc, #92]	@ (8005a70 <LPTIM_Disable+0x23c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d007      	beq.n	8005a26 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8005a16:	e02f      	b.n	8005a78 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8005a18:	4b16      	ldr	r3, [pc, #88]	@ (8005a74 <LPTIM_Disable+0x240>)
 8005a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a1c:	4a15      	ldr	r2, [pc, #84]	@ (8005a74 <LPTIM_Disable+0x240>)
 8005a1e:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8005a22:	6553      	str	r3, [r2, #84]	@ 0x54
        break;
 8005a24:	e029      	b.n	8005a7a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8005a26:	4b13      	ldr	r3, [pc, #76]	@ (8005a74 <LPTIM_Disable+0x240>)
 8005a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a2a:	4a12      	ldr	r2, [pc, #72]	@ (8005a74 <LPTIM_Disable+0x240>)
 8005a2c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8005a30:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005a32:	e022      	b.n	8005a7a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8005a34:	4b0f      	ldr	r3, [pc, #60]	@ (8005a74 <LPTIM_Disable+0x240>)
 8005a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a38:	4a0e      	ldr	r2, [pc, #56]	@ (8005a74 <LPTIM_Disable+0x240>)
 8005a3a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005a3e:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005a40:	e01b      	b.n	8005a7a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8005a42:	4b0c      	ldr	r3, [pc, #48]	@ (8005a74 <LPTIM_Disable+0x240>)
 8005a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a46:	4a0b      	ldr	r2, [pc, #44]	@ (8005a74 <LPTIM_Disable+0x240>)
 8005a48:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005a4c:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005a4e:	e014      	b.n	8005a7a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8005a50:	4b08      	ldr	r3, [pc, #32]	@ (8005a74 <LPTIM_Disable+0x240>)
 8005a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a54:	4a07      	ldr	r2, [pc, #28]	@ (8005a74 <LPTIM_Disable+0x240>)
 8005a56:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005a5a:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005a5c:	e00d      	b.n	8005a7a <LPTIM_Disable+0x246>
 8005a5e:	bf00      	nop
 8005a60:	58003000 	.word	0x58003000
 8005a64:	58002c00 	.word	0x58002c00
 8005a68:	58002800 	.word	0x58002800
 8005a6c:	40002400 	.word	0x40002400
 8005a70:	58002400 	.word	0x58002400
 8005a74:	58024400 	.word	0x58024400
        break;
 8005a78:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d01a      	beq.n	8005ab6 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	691a      	ldr	r2, [r3, #16]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0201 	orr.w	r2, r2, #1
 8005a8e:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	69fa      	ldr	r2, [r7, #28]
 8005a96:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8005a98:	2108      	movs	r1, #8
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7ff fe9a 	bl	80057d4 <LPTIM_WaitForFlag>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d103      	bne.n	8005aae <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2203      	movs	r2, #3
 8005aaa:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2208      	movs	r2, #8
 8005ab4:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d01a      	beq.n	8005af2 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691a      	ldr	r2, [r3, #16]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005ad4:	2110      	movs	r1, #16
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7ff fe7c 	bl	80057d4 <LPTIM_WaitForFlag>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d103      	bne.n	8005aea <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2203      	movs	r2, #3
 8005ae6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2210      	movs	r2, #16
 8005af0:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a32      	ldr	r2, [pc, #200]	@ (8005bc0 <LPTIM_Disable+0x38c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d039      	beq.n	8005b70 <LPTIM_Disable+0x33c>
 8005afc:	4a30      	ldr	r2, [pc, #192]	@ (8005bc0 <LPTIM_Disable+0x38c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d83f      	bhi.n	8005b82 <LPTIM_Disable+0x34e>
 8005b02:	4a30      	ldr	r2, [pc, #192]	@ (8005bc4 <LPTIM_Disable+0x390>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d02a      	beq.n	8005b5e <LPTIM_Disable+0x32a>
 8005b08:	4a2e      	ldr	r2, [pc, #184]	@ (8005bc4 <LPTIM_Disable+0x390>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d839      	bhi.n	8005b82 <LPTIM_Disable+0x34e>
 8005b0e:	4a2e      	ldr	r2, [pc, #184]	@ (8005bc8 <LPTIM_Disable+0x394>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d01b      	beq.n	8005b4c <LPTIM_Disable+0x318>
 8005b14:	4a2c      	ldr	r2, [pc, #176]	@ (8005bc8 <LPTIM_Disable+0x394>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d833      	bhi.n	8005b82 <LPTIM_Disable+0x34e>
 8005b1a:	4a2c      	ldr	r2, [pc, #176]	@ (8005bcc <LPTIM_Disable+0x398>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d003      	beq.n	8005b28 <LPTIM_Disable+0x2f4>
 8005b20:	4a2b      	ldr	r2, [pc, #172]	@ (8005bd0 <LPTIM_Disable+0x39c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d009      	beq.n	8005b3a <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8005b26:	e02c      	b.n	8005b82 <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8005b28:	4b2a      	ldr	r3, [pc, #168]	@ (8005bd4 <LPTIM_Disable+0x3a0>)
 8005b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b2c:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8005b30:	4928      	ldr	r1, [pc, #160]	@ (8005bd4 <LPTIM_Disable+0x3a0>)
 8005b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b34:	4313      	orrs	r3, r2
 8005b36:	654b      	str	r3, [r1, #84]	@ 0x54
        break;
 8005b38:	e024      	b.n	8005b84 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8005b3a:	4b26      	ldr	r3, [pc, #152]	@ (8005bd4 <LPTIM_Disable+0x3a0>)
 8005b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b3e:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005b42:	4924      	ldr	r1, [pc, #144]	@ (8005bd4 <LPTIM_Disable+0x3a0>)
 8005b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b46:	4313      	orrs	r3, r2
 8005b48:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8005b4a:	e01b      	b.n	8005b84 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8005b4c:	4b21      	ldr	r3, [pc, #132]	@ (8005bd4 <LPTIM_Disable+0x3a0>)
 8005b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b50:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b54:	491f      	ldr	r1, [pc, #124]	@ (8005bd4 <LPTIM_Disable+0x3a0>)
 8005b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8005b5c:	e012      	b.n	8005b84 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8005b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8005bd4 <LPTIM_Disable+0x3a0>)
 8005b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b66:	491b      	ldr	r1, [pc, #108]	@ (8005bd4 <LPTIM_Disable+0x3a0>)
 8005b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8005b6e:	e009      	b.n	8005b84 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8005b70:	4b18      	ldr	r3, [pc, #96]	@ (8005bd4 <LPTIM_Disable+0x3a0>)
 8005b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b74:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b78:	4916      	ldr	r1, [pc, #88]	@ (8005bd4 <LPTIM_Disable+0x3a0>)
 8005b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8005b80:	e000      	b.n	8005b84 <LPTIM_Disable+0x350>
        break;
 8005b82:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691a      	ldr	r2, [r3, #16]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0201 	bic.w	r2, r2, #1
 8005b92:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b9a:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6a3a      	ldr	r2, [r7, #32]
 8005ba2:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	625a      	str	r2, [r3, #36]	@ 0x24
 8005bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	f383 8810 	msr	PRIMASK, r3
}
 8005bb6:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005bb8:	bf00      	nop
 8005bba:	3730      	adds	r7, #48	@ 0x30
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	58003000 	.word	0x58003000
 8005bc4:	58002c00 	.word	0x58002c00
 8005bc8:	58002800 	.word	0x58002800
 8005bcc:	40002400 	.word	0x40002400
 8005bd0:	58002400 	.word	0x58002400
 8005bd4:	58024400 	.word	0x58024400

08005bd8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005be0:	4b19      	ldr	r3, [pc, #100]	@ (8005c48 <HAL_PWREx_ConfigSupply+0x70>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b04      	cmp	r3, #4
 8005bea:	d00a      	beq.n	8005c02 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005bec:	4b16      	ldr	r3, [pc, #88]	@ (8005c48 <HAL_PWREx_ConfigSupply+0x70>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d001      	beq.n	8005bfe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e01f      	b.n	8005c3e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	e01d      	b.n	8005c3e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005c02:	4b11      	ldr	r3, [pc, #68]	@ (8005c48 <HAL_PWREx_ConfigSupply+0x70>)
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f023 0207 	bic.w	r2, r3, #7
 8005c0a:	490f      	ldr	r1, [pc, #60]	@ (8005c48 <HAL_PWREx_ConfigSupply+0x70>)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005c12:	f7fd f9d5 	bl	8002fc0 <HAL_GetTick>
 8005c16:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c18:	e009      	b.n	8005c2e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005c1a:	f7fd f9d1 	bl	8002fc0 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c28:	d901      	bls.n	8005c2e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e007      	b.n	8005c3e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c2e:	4b06      	ldr	r3, [pc, #24]	@ (8005c48 <HAL_PWREx_ConfigSupply+0x70>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c3a:	d1ee      	bne.n	8005c1a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	58024800 	.word	0x58024800

08005c4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08c      	sub	sp, #48	@ 0x30
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d102      	bne.n	8005c60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	f000 bc48 	b.w	80064f0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 8088 	beq.w	8005d7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c6e:	4b99      	ldr	r3, [pc, #612]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c78:	4b96      	ldr	r3, [pc, #600]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c80:	2b10      	cmp	r3, #16
 8005c82:	d007      	beq.n	8005c94 <HAL_RCC_OscConfig+0x48>
 8005c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c86:	2b18      	cmp	r3, #24
 8005c88:	d111      	bne.n	8005cae <HAL_RCC_OscConfig+0x62>
 8005c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c8c:	f003 0303 	and.w	r3, r3, #3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d10c      	bne.n	8005cae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c94:	4b8f      	ldr	r3, [pc, #572]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d06d      	beq.n	8005d7c <HAL_RCC_OscConfig+0x130>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d169      	bne.n	8005d7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	f000 bc21 	b.w	80064f0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cb6:	d106      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x7a>
 8005cb8:	4b86      	ldr	r3, [pc, #536]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a85      	ldr	r2, [pc, #532]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005cbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	e02e      	b.n	8005d24 <HAL_RCC_OscConfig+0xd8>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10c      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x9c>
 8005cce:	4b81      	ldr	r3, [pc, #516]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a80      	ldr	r2, [pc, #512]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005cd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	4b7e      	ldr	r3, [pc, #504]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a7d      	ldr	r2, [pc, #500]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005ce0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	e01d      	b.n	8005d24 <HAL_RCC_OscConfig+0xd8>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cf0:	d10c      	bne.n	8005d0c <HAL_RCC_OscConfig+0xc0>
 8005cf2:	4b78      	ldr	r3, [pc, #480]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a77      	ldr	r2, [pc, #476]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005cf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	4b75      	ldr	r3, [pc, #468]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a74      	ldr	r2, [pc, #464]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	e00b      	b.n	8005d24 <HAL_RCC_OscConfig+0xd8>
 8005d0c:	4b71      	ldr	r3, [pc, #452]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a70      	ldr	r2, [pc, #448]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005d12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	4b6e      	ldr	r3, [pc, #440]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a6d      	ldr	r2, [pc, #436]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005d1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d013      	beq.n	8005d54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d2c:	f7fd f948 	bl	8002fc0 <HAL_GetTick>
 8005d30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d32:	e008      	b.n	8005d46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d34:	f7fd f944 	bl	8002fc0 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b64      	cmp	r3, #100	@ 0x64
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e3d4      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d46:	4b63      	ldr	r3, [pc, #396]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d0f0      	beq.n	8005d34 <HAL_RCC_OscConfig+0xe8>
 8005d52:	e014      	b.n	8005d7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d54:	f7fd f934 	bl	8002fc0 <HAL_GetTick>
 8005d58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d5a:	e008      	b.n	8005d6e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d5c:	f7fd f930 	bl	8002fc0 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b64      	cmp	r3, #100	@ 0x64
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e3c0      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d6e:	4b59      	ldr	r3, [pc, #356]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1f0      	bne.n	8005d5c <HAL_RCC_OscConfig+0x110>
 8005d7a:	e000      	b.n	8005d7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 80ca 	beq.w	8005f20 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d8c:	4b51      	ldr	r3, [pc, #324]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d94:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d96:	4b4f      	ldr	r3, [pc, #316]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d9a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d007      	beq.n	8005db2 <HAL_RCC_OscConfig+0x166>
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	2b18      	cmp	r3, #24
 8005da6:	d156      	bne.n	8005e56 <HAL_RCC_OscConfig+0x20a>
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f003 0303 	and.w	r3, r3, #3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d151      	bne.n	8005e56 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005db2:	4b48      	ldr	r3, [pc, #288]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0304 	and.w	r3, r3, #4
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <HAL_RCC_OscConfig+0x17e>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e392      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005dca:	4b42      	ldr	r3, [pc, #264]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f023 0219 	bic.w	r2, r3, #25
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	493f      	ldr	r1, [pc, #252]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ddc:	f7fd f8f0 	bl	8002fc0 <HAL_GetTick>
 8005de0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005de2:	e008      	b.n	8005df6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005de4:	f7fd f8ec 	bl	8002fc0 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e37c      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005df6:	4b37      	ldr	r3, [pc, #220]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0f0      	beq.n	8005de4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e02:	f7fd f8e9 	bl	8002fd8 <HAL_GetREVID>
 8005e06:	4603      	mov	r3, r0
 8005e08:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d817      	bhi.n	8005e40 <HAL_RCC_OscConfig+0x1f4>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	2b40      	cmp	r3, #64	@ 0x40
 8005e16:	d108      	bne.n	8005e2a <HAL_RCC_OscConfig+0x1de>
 8005e18:	4b2e      	ldr	r3, [pc, #184]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005e20:	4a2c      	ldr	r2, [pc, #176]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e26:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e28:	e07a      	b.n	8005f20 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	031b      	lsls	r3, r3, #12
 8005e38:	4926      	ldr	r1, [pc, #152]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e3e:	e06f      	b.n	8005f20 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e40:	4b24      	ldr	r3, [pc, #144]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	061b      	lsls	r3, r3, #24
 8005e4e:	4921      	ldr	r1, [pc, #132]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e54:	e064      	b.n	8005f20 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d047      	beq.n	8005eee <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f023 0219 	bic.w	r2, r3, #25
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	491a      	ldr	r1, [pc, #104]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e70:	f7fd f8a6 	bl	8002fc0 <HAL_GetTick>
 8005e74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e78:	f7fd f8a2 	bl	8002fc0 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e332      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e8a:	4b12      	ldr	r3, [pc, #72]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0304 	and.w	r3, r3, #4
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0f0      	beq.n	8005e78 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e96:	f7fd f89f 	bl	8002fd8 <HAL_GetREVID>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d819      	bhi.n	8005ed8 <HAL_RCC_OscConfig+0x28c>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	2b40      	cmp	r3, #64	@ 0x40
 8005eaa:	d108      	bne.n	8005ebe <HAL_RCC_OscConfig+0x272>
 8005eac:	4b09      	ldr	r3, [pc, #36]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005eb4:	4a07      	ldr	r2, [pc, #28]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005eb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eba:	6053      	str	r3, [r2, #4]
 8005ebc:	e030      	b.n	8005f20 <HAL_RCC_OscConfig+0x2d4>
 8005ebe:	4b05      	ldr	r3, [pc, #20]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	031b      	lsls	r3, r3, #12
 8005ecc:	4901      	ldr	r1, [pc, #4]	@ (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	604b      	str	r3, [r1, #4]
 8005ed2:	e025      	b.n	8005f20 <HAL_RCC_OscConfig+0x2d4>
 8005ed4:	58024400 	.word	0x58024400
 8005ed8:	4b9a      	ldr	r3, [pc, #616]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	061b      	lsls	r3, r3, #24
 8005ee6:	4997      	ldr	r1, [pc, #604]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	604b      	str	r3, [r1, #4]
 8005eec:	e018      	b.n	8005f20 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eee:	4b95      	ldr	r3, [pc, #596]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a94      	ldr	r2, [pc, #592]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005ef4:	f023 0301 	bic.w	r3, r3, #1
 8005ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005efa:	f7fd f861 	bl	8002fc0 <HAL_GetTick>
 8005efe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f00:	e008      	b.n	8005f14 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f02:	f7fd f85d 	bl	8002fc0 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d901      	bls.n	8005f14 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e2ed      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f14:	4b8b      	ldr	r3, [pc, #556]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1f0      	bne.n	8005f02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0310 	and.w	r3, r3, #16
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 80a9 	beq.w	8006080 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f2e:	4b85      	ldr	r3, [pc, #532]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f36:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f38:	4b82      	ldr	r3, [pc, #520]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	2b08      	cmp	r3, #8
 8005f42:	d007      	beq.n	8005f54 <HAL_RCC_OscConfig+0x308>
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	2b18      	cmp	r3, #24
 8005f48:	d13a      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x374>
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f003 0303 	and.w	r3, r3, #3
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d135      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f54:	4b7b      	ldr	r3, [pc, #492]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d005      	beq.n	8005f6c <HAL_RCC_OscConfig+0x320>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	2b80      	cmp	r3, #128	@ 0x80
 8005f66:	d001      	beq.n	8005f6c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e2c1      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f6c:	f7fd f834 	bl	8002fd8 <HAL_GetREVID>
 8005f70:	4603      	mov	r3, r0
 8005f72:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d817      	bhi.n	8005faa <HAL_RCC_OscConfig+0x35e>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	2b20      	cmp	r3, #32
 8005f80:	d108      	bne.n	8005f94 <HAL_RCC_OscConfig+0x348>
 8005f82:	4b70      	ldr	r3, [pc, #448]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005f8a:	4a6e      	ldr	r2, [pc, #440]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005f8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f90:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f92:	e075      	b.n	8006080 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f94:	4b6b      	ldr	r3, [pc, #428]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	069b      	lsls	r3, r3, #26
 8005fa2:	4968      	ldr	r1, [pc, #416]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fa8:	e06a      	b.n	8006080 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005faa:	4b66      	ldr	r3, [pc, #408]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	061b      	lsls	r3, r3, #24
 8005fb8:	4962      	ldr	r1, [pc, #392]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fbe:	e05f      	b.n	8006080 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	69db      	ldr	r3, [r3, #28]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d042      	beq.n	800604e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005fc8:	4b5e      	ldr	r3, [pc, #376]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a5d      	ldr	r2, [pc, #372]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd4:	f7fc fff4 	bl	8002fc0 <HAL_GetTick>
 8005fd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fda:	e008      	b.n	8005fee <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005fdc:	f7fc fff0 	bl	8002fc0 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e280      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fee:	4b55      	ldr	r3, [pc, #340]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d0f0      	beq.n	8005fdc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ffa:	f7fc ffed 	bl	8002fd8 <HAL_GetREVID>
 8005ffe:	4603      	mov	r3, r0
 8006000:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006004:	4293      	cmp	r3, r2
 8006006:	d817      	bhi.n	8006038 <HAL_RCC_OscConfig+0x3ec>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	2b20      	cmp	r3, #32
 800600e:	d108      	bne.n	8006022 <HAL_RCC_OscConfig+0x3d6>
 8006010:	4b4c      	ldr	r3, [pc, #304]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006018:	4a4a      	ldr	r2, [pc, #296]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 800601a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800601e:	6053      	str	r3, [r2, #4]
 8006020:	e02e      	b.n	8006080 <HAL_RCC_OscConfig+0x434>
 8006022:	4b48      	ldr	r3, [pc, #288]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	069b      	lsls	r3, r3, #26
 8006030:	4944      	ldr	r1, [pc, #272]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8006032:	4313      	orrs	r3, r2
 8006034:	604b      	str	r3, [r1, #4]
 8006036:	e023      	b.n	8006080 <HAL_RCC_OscConfig+0x434>
 8006038:	4b42      	ldr	r3, [pc, #264]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	061b      	lsls	r3, r3, #24
 8006046:	493f      	ldr	r1, [pc, #252]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8006048:	4313      	orrs	r3, r2
 800604a:	60cb      	str	r3, [r1, #12]
 800604c:	e018      	b.n	8006080 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800604e:	4b3d      	ldr	r3, [pc, #244]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a3c      	ldr	r2, [pc, #240]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8006054:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800605a:	f7fc ffb1 	bl	8002fc0 <HAL_GetTick>
 800605e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006060:	e008      	b.n	8006074 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006062:	f7fc ffad 	bl	8002fc0 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b02      	cmp	r3, #2
 800606e:	d901      	bls.n	8006074 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e23d      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006074:	4b33      	ldr	r3, [pc, #204]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1f0      	bne.n	8006062 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0308 	and.w	r3, r3, #8
 8006088:	2b00      	cmp	r3, #0
 800608a:	d036      	beq.n	80060fa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d019      	beq.n	80060c8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006094:	4b2b      	ldr	r3, [pc, #172]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8006096:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006098:	4a2a      	ldr	r2, [pc, #168]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 800609a:	f043 0301 	orr.w	r3, r3, #1
 800609e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a0:	f7fc ff8e 	bl	8002fc0 <HAL_GetTick>
 80060a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060a6:	e008      	b.n	80060ba <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060a8:	f7fc ff8a 	bl	8002fc0 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e21a      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060ba:	4b22      	ldr	r3, [pc, #136]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 80060bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0f0      	beq.n	80060a8 <HAL_RCC_OscConfig+0x45c>
 80060c6:	e018      	b.n	80060fa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060c8:	4b1e      	ldr	r3, [pc, #120]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 80060ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 80060ce:	f023 0301 	bic.w	r3, r3, #1
 80060d2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d4:	f7fc ff74 	bl	8002fc0 <HAL_GetTick>
 80060d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060dc:	f7fc ff70 	bl	8002fc0 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e200      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060ee:	4b15      	ldr	r3, [pc, #84]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 80060f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1f0      	bne.n	80060dc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0320 	and.w	r3, r3, #32
 8006102:	2b00      	cmp	r3, #0
 8006104:	d039      	beq.n	800617a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d01c      	beq.n	8006148 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800610e:	4b0d      	ldr	r3, [pc, #52]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a0c      	ldr	r2, [pc, #48]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8006114:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006118:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800611a:	f7fc ff51 	bl	8002fc0 <HAL_GetTick>
 800611e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006120:	e008      	b.n	8006134 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006122:	f7fc ff4d 	bl	8002fc0 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	2b02      	cmp	r3, #2
 800612e:	d901      	bls.n	8006134 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e1dd      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006134:	4b03      	ldr	r3, [pc, #12]	@ (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0f0      	beq.n	8006122 <HAL_RCC_OscConfig+0x4d6>
 8006140:	e01b      	b.n	800617a <HAL_RCC_OscConfig+0x52e>
 8006142:	bf00      	nop
 8006144:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006148:	4b9b      	ldr	r3, [pc, #620]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a9a      	ldr	r2, [pc, #616]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 800614e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006152:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006154:	f7fc ff34 	bl	8002fc0 <HAL_GetTick>
 8006158:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800615a:	e008      	b.n	800616e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800615c:	f7fc ff30 	bl	8002fc0 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b02      	cmp	r3, #2
 8006168:	d901      	bls.n	800616e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e1c0      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800616e:	4b92      	ldr	r3, [pc, #584]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1f0      	bne.n	800615c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0304 	and.w	r3, r3, #4
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 8081 	beq.w	800628a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006188:	4b8c      	ldr	r3, [pc, #560]	@ (80063bc <HAL_RCC_OscConfig+0x770>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a8b      	ldr	r2, [pc, #556]	@ (80063bc <HAL_RCC_OscConfig+0x770>)
 800618e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006192:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006194:	f7fc ff14 	bl	8002fc0 <HAL_GetTick>
 8006198:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800619a:	e008      	b.n	80061ae <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800619c:	f7fc ff10 	bl	8002fc0 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b64      	cmp	r3, #100	@ 0x64
 80061a8:	d901      	bls.n	80061ae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e1a0      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061ae:	4b83      	ldr	r3, [pc, #524]	@ (80063bc <HAL_RCC_OscConfig+0x770>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0f0      	beq.n	800619c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d106      	bne.n	80061d0 <HAL_RCC_OscConfig+0x584>
 80061c2:	4b7d      	ldr	r3, [pc, #500]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80061c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061c6:	4a7c      	ldr	r2, [pc, #496]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80061c8:	f043 0301 	orr.w	r3, r3, #1
 80061cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80061ce:	e02d      	b.n	800622c <HAL_RCC_OscConfig+0x5e0>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10c      	bne.n	80061f2 <HAL_RCC_OscConfig+0x5a6>
 80061d8:	4b77      	ldr	r3, [pc, #476]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80061da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061dc:	4a76      	ldr	r2, [pc, #472]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80061de:	f023 0301 	bic.w	r3, r3, #1
 80061e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80061e4:	4b74      	ldr	r3, [pc, #464]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80061e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061e8:	4a73      	ldr	r2, [pc, #460]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80061ea:	f023 0304 	bic.w	r3, r3, #4
 80061ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80061f0:	e01c      	b.n	800622c <HAL_RCC_OscConfig+0x5e0>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	2b05      	cmp	r3, #5
 80061f8:	d10c      	bne.n	8006214 <HAL_RCC_OscConfig+0x5c8>
 80061fa:	4b6f      	ldr	r3, [pc, #444]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80061fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061fe:	4a6e      	ldr	r2, [pc, #440]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006200:	f043 0304 	orr.w	r3, r3, #4
 8006204:	6713      	str	r3, [r2, #112]	@ 0x70
 8006206:	4b6c      	ldr	r3, [pc, #432]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800620a:	4a6b      	ldr	r2, [pc, #428]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 800620c:	f043 0301 	orr.w	r3, r3, #1
 8006210:	6713      	str	r3, [r2, #112]	@ 0x70
 8006212:	e00b      	b.n	800622c <HAL_RCC_OscConfig+0x5e0>
 8006214:	4b68      	ldr	r3, [pc, #416]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006218:	4a67      	ldr	r2, [pc, #412]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 800621a:	f023 0301 	bic.w	r3, r3, #1
 800621e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006220:	4b65      	ldr	r3, [pc, #404]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006224:	4a64      	ldr	r2, [pc, #400]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006226:	f023 0304 	bic.w	r3, r3, #4
 800622a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d015      	beq.n	8006260 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006234:	f7fc fec4 	bl	8002fc0 <HAL_GetTick>
 8006238:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800623a:	e00a      	b.n	8006252 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800623c:	f7fc fec0 	bl	8002fc0 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800624a:	4293      	cmp	r3, r2
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e14e      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006252:	4b59      	ldr	r3, [pc, #356]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0ee      	beq.n	800623c <HAL_RCC_OscConfig+0x5f0>
 800625e:	e014      	b.n	800628a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006260:	f7fc feae 	bl	8002fc0 <HAL_GetTick>
 8006264:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006266:	e00a      	b.n	800627e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006268:	f7fc feaa 	bl	8002fc0 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006276:	4293      	cmp	r3, r2
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e138      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800627e:	4b4e      	ldr	r3, [pc, #312]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1ee      	bne.n	8006268 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 812d 	beq.w	80064ee <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006294:	4b48      	ldr	r3, [pc, #288]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800629c:	2b18      	cmp	r3, #24
 800629e:	f000 80bd 	beq.w	800641c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	f040 809e 	bne.w	80063e8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ac:	4b42      	ldr	r3, [pc, #264]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a41      	ldr	r2, [pc, #260]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80062b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b8:	f7fc fe82 	bl	8002fc0 <HAL_GetTick>
 80062bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062c0:	f7fc fe7e 	bl	8002fc0 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e10e      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062d2:	4b39      	ldr	r3, [pc, #228]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1f0      	bne.n	80062c0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062de:	4b36      	ldr	r3, [pc, #216]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80062e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062e2:	4b37      	ldr	r3, [pc, #220]	@ (80063c0 <HAL_RCC_OscConfig+0x774>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80062ee:	0112      	lsls	r2, r2, #4
 80062f0:	430a      	orrs	r2, r1
 80062f2:	4931      	ldr	r1, [pc, #196]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062fc:	3b01      	subs	r3, #1
 80062fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006306:	3b01      	subs	r3, #1
 8006308:	025b      	lsls	r3, r3, #9
 800630a:	b29b      	uxth	r3, r3
 800630c:	431a      	orrs	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006312:	3b01      	subs	r3, #1
 8006314:	041b      	lsls	r3, r3, #16
 8006316:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800631a:	431a      	orrs	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006320:	3b01      	subs	r3, #1
 8006322:	061b      	lsls	r3, r3, #24
 8006324:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006328:	4923      	ldr	r1, [pc, #140]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 800632a:	4313      	orrs	r3, r2
 800632c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800632e:	4b22      	ldr	r3, [pc, #136]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006332:	4a21      	ldr	r2, [pc, #132]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006334:	f023 0301 	bic.w	r3, r3, #1
 8006338:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800633a:	4b1f      	ldr	r3, [pc, #124]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 800633c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800633e:	4b21      	ldr	r3, [pc, #132]	@ (80063c4 <HAL_RCC_OscConfig+0x778>)
 8006340:	4013      	ands	r3, r2
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006346:	00d2      	lsls	r2, r2, #3
 8006348:	491b      	ldr	r1, [pc, #108]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 800634a:	4313      	orrs	r3, r2
 800634c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800634e:	4b1a      	ldr	r3, [pc, #104]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006352:	f023 020c 	bic.w	r2, r3, #12
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635a:	4917      	ldr	r1, [pc, #92]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 800635c:	4313      	orrs	r3, r2
 800635e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006360:	4b15      	ldr	r3, [pc, #84]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006364:	f023 0202 	bic.w	r2, r3, #2
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800636c:	4912      	ldr	r1, [pc, #72]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 800636e:	4313      	orrs	r3, r2
 8006370:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006372:	4b11      	ldr	r3, [pc, #68]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006376:	4a10      	ldr	r2, [pc, #64]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800637c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800637e:	4b0e      	ldr	r3, [pc, #56]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006382:	4a0d      	ldr	r2, [pc, #52]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006388:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800638a:	4b0b      	ldr	r3, [pc, #44]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 800638c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638e:	4a0a      	ldr	r2, [pc, #40]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006390:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006394:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006396:	4b08      	ldr	r3, [pc, #32]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639a:	4a07      	ldr	r2, [pc, #28]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 800639c:	f043 0301 	orr.w	r3, r3, #1
 80063a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063a2:	4b05      	ldr	r3, [pc, #20]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a04      	ldr	r2, [pc, #16]	@ (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80063a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ae:	f7fc fe07 	bl	8002fc0 <HAL_GetTick>
 80063b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063b4:	e011      	b.n	80063da <HAL_RCC_OscConfig+0x78e>
 80063b6:	bf00      	nop
 80063b8:	58024400 	.word	0x58024400
 80063bc:	58024800 	.word	0x58024800
 80063c0:	fffffc0c 	.word	0xfffffc0c
 80063c4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063c8:	f7fc fdfa 	bl	8002fc0 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e08a      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063da:	4b47      	ldr	r3, [pc, #284]	@ (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d0f0      	beq.n	80063c8 <HAL_RCC_OscConfig+0x77c>
 80063e6:	e082      	b.n	80064ee <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063e8:	4b43      	ldr	r3, [pc, #268]	@ (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a42      	ldr	r2, [pc, #264]	@ (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 80063ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f4:	f7fc fde4 	bl	8002fc0 <HAL_GetTick>
 80063f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063fa:	e008      	b.n	800640e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063fc:	f7fc fde0 	bl	8002fc0 <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	2b02      	cmp	r3, #2
 8006408:	d901      	bls.n	800640e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e070      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800640e:	4b3a      	ldr	r3, [pc, #232]	@ (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1f0      	bne.n	80063fc <HAL_RCC_OscConfig+0x7b0>
 800641a:	e068      	b.n	80064ee <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800641c:	4b36      	ldr	r3, [pc, #216]	@ (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 800641e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006420:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006422:	4b35      	ldr	r3, [pc, #212]	@ (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 8006424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006426:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642c:	2b01      	cmp	r3, #1
 800642e:	d031      	beq.n	8006494 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	f003 0203 	and.w	r2, r3, #3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800643a:	429a      	cmp	r2, r3
 800643c:	d12a      	bne.n	8006494 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	091b      	lsrs	r3, r3, #4
 8006442:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800644a:	429a      	cmp	r2, r3
 800644c:	d122      	bne.n	8006494 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006458:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800645a:	429a      	cmp	r2, r3
 800645c:	d11a      	bne.n	8006494 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	0a5b      	lsrs	r3, r3, #9
 8006462:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800646a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800646c:	429a      	cmp	r2, r3
 800646e:	d111      	bne.n	8006494 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	0c1b      	lsrs	r3, r3, #16
 8006474:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800647e:	429a      	cmp	r2, r3
 8006480:	d108      	bne.n	8006494 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	0e1b      	lsrs	r3, r3, #24
 8006486:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800648e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006490:	429a      	cmp	r2, r3
 8006492:	d001      	beq.n	8006498 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e02b      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006498:	4b17      	ldr	r3, [pc, #92]	@ (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 800649a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800649c:	08db      	lsrs	r3, r3, #3
 800649e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064a2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d01f      	beq.n	80064ee <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80064ae:	4b12      	ldr	r3, [pc, #72]	@ (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 80064b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b2:	4a11      	ldr	r2, [pc, #68]	@ (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 80064b4:	f023 0301 	bic.w	r3, r3, #1
 80064b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064ba:	f7fc fd81 	bl	8002fc0 <HAL_GetTick>
 80064be:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80064c0:	bf00      	nop
 80064c2:	f7fc fd7d 	bl	8002fc0 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d0f9      	beq.n	80064c2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80064ce:	4b0a      	ldr	r3, [pc, #40]	@ (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 80064d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064d2:	4b0a      	ldr	r3, [pc, #40]	@ (80064fc <HAL_RCC_OscConfig+0x8b0>)
 80064d4:	4013      	ands	r3, r2
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80064da:	00d2      	lsls	r2, r2, #3
 80064dc:	4906      	ldr	r1, [pc, #24]	@ (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80064e2:	4b05      	ldr	r3, [pc, #20]	@ (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 80064e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e6:	4a04      	ldr	r2, [pc, #16]	@ (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 80064e8:	f043 0301 	orr.w	r3, r3, #1
 80064ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3730      	adds	r7, #48	@ 0x30
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	58024400 	.word	0x58024400
 80064fc:	ffff0007 	.word	0xffff0007

08006500 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d101      	bne.n	8006514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e19c      	b.n	800684e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006514:	4b8a      	ldr	r3, [pc, #552]	@ (8006740 <HAL_RCC_ClockConfig+0x240>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 030f 	and.w	r3, r3, #15
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	429a      	cmp	r2, r3
 8006520:	d910      	bls.n	8006544 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006522:	4b87      	ldr	r3, [pc, #540]	@ (8006740 <HAL_RCC_ClockConfig+0x240>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f023 020f 	bic.w	r2, r3, #15
 800652a:	4985      	ldr	r1, [pc, #532]	@ (8006740 <HAL_RCC_ClockConfig+0x240>)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	4313      	orrs	r3, r2
 8006530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006532:	4b83      	ldr	r3, [pc, #524]	@ (8006740 <HAL_RCC_ClockConfig+0x240>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 030f 	and.w	r3, r3, #15
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	429a      	cmp	r2, r3
 800653e:	d001      	beq.n	8006544 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e184      	b.n	800684e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0304 	and.w	r3, r3, #4
 800654c:	2b00      	cmp	r3, #0
 800654e:	d010      	beq.n	8006572 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691a      	ldr	r2, [r3, #16]
 8006554:	4b7b      	ldr	r3, [pc, #492]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800655c:	429a      	cmp	r2, r3
 800655e:	d908      	bls.n	8006572 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006560:	4b78      	ldr	r3, [pc, #480]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	4975      	ldr	r1, [pc, #468]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 800656e:	4313      	orrs	r3, r2
 8006570:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	2b00      	cmp	r3, #0
 800657c:	d010      	beq.n	80065a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	695a      	ldr	r2, [r3, #20]
 8006582:	4b70      	ldr	r3, [pc, #448]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800658a:	429a      	cmp	r2, r3
 800658c:	d908      	bls.n	80065a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800658e:	4b6d      	ldr	r3, [pc, #436]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	496a      	ldr	r1, [pc, #424]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 800659c:	4313      	orrs	r3, r2
 800659e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0310 	and.w	r3, r3, #16
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d010      	beq.n	80065ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	699a      	ldr	r2, [r3, #24]
 80065b0:	4b64      	ldr	r3, [pc, #400]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d908      	bls.n	80065ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065bc:	4b61      	ldr	r3, [pc, #388]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	495e      	ldr	r1, [pc, #376]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d010      	beq.n	80065fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	69da      	ldr	r2, [r3, #28]
 80065de:	4b59      	ldr	r3, [pc, #356]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d908      	bls.n	80065fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80065ea:	4b56      	ldr	r3, [pc, #344]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	4953      	ldr	r1, [pc, #332]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d010      	beq.n	800662a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68da      	ldr	r2, [r3, #12]
 800660c:	4b4d      	ldr	r3, [pc, #308]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	f003 030f 	and.w	r3, r3, #15
 8006614:	429a      	cmp	r2, r3
 8006616:	d908      	bls.n	800662a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006618:	4b4a      	ldr	r3, [pc, #296]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	f023 020f 	bic.w	r2, r3, #15
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	4947      	ldr	r1, [pc, #284]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006626:	4313      	orrs	r3, r2
 8006628:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b00      	cmp	r3, #0
 8006634:	d055      	beq.n	80066e2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006636:	4b43      	ldr	r3, [pc, #268]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	4940      	ldr	r1, [pc, #256]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006644:	4313      	orrs	r3, r2
 8006646:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	2b02      	cmp	r3, #2
 800664e:	d107      	bne.n	8006660 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006650:	4b3c      	ldr	r3, [pc, #240]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d121      	bne.n	80066a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e0f6      	b.n	800684e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2b03      	cmp	r3, #3
 8006666:	d107      	bne.n	8006678 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006668:	4b36      	ldr	r3, [pc, #216]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d115      	bne.n	80066a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e0ea      	b.n	800684e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d107      	bne.n	8006690 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006680:	4b30      	ldr	r3, [pc, #192]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006688:	2b00      	cmp	r3, #0
 800668a:	d109      	bne.n	80066a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e0de      	b.n	800684e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006690:	4b2c      	ldr	r3, [pc, #176]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e0d6      	b.n	800684e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066a0:	4b28      	ldr	r3, [pc, #160]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	f023 0207 	bic.w	r2, r3, #7
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	4925      	ldr	r1, [pc, #148]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066b2:	f7fc fc85 	bl	8002fc0 <HAL_GetTick>
 80066b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066b8:	e00a      	b.n	80066d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066ba:	f7fc fc81 	bl	8002fc0 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e0be      	b.n	800684e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066d0:	4b1c      	ldr	r3, [pc, #112]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	00db      	lsls	r3, r3, #3
 80066de:	429a      	cmp	r2, r3
 80066e0:	d1eb      	bne.n	80066ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d010      	beq.n	8006710 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68da      	ldr	r2, [r3, #12]
 80066f2:	4b14      	ldr	r3, [pc, #80]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	f003 030f 	and.w	r3, r3, #15
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d208      	bcs.n	8006710 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066fe:	4b11      	ldr	r3, [pc, #68]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	f023 020f 	bic.w	r2, r3, #15
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	490e      	ldr	r1, [pc, #56]	@ (8006744 <HAL_RCC_ClockConfig+0x244>)
 800670c:	4313      	orrs	r3, r2
 800670e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006710:	4b0b      	ldr	r3, [pc, #44]	@ (8006740 <HAL_RCC_ClockConfig+0x240>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 030f 	and.w	r3, r3, #15
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d214      	bcs.n	8006748 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800671e:	4b08      	ldr	r3, [pc, #32]	@ (8006740 <HAL_RCC_ClockConfig+0x240>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f023 020f 	bic.w	r2, r3, #15
 8006726:	4906      	ldr	r1, [pc, #24]	@ (8006740 <HAL_RCC_ClockConfig+0x240>)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	4313      	orrs	r3, r2
 800672c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800672e:	4b04      	ldr	r3, [pc, #16]	@ (8006740 <HAL_RCC_ClockConfig+0x240>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 030f 	and.w	r3, r3, #15
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	429a      	cmp	r2, r3
 800673a:	d005      	beq.n	8006748 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e086      	b.n	800684e <HAL_RCC_ClockConfig+0x34e>
 8006740:	52002000 	.word	0x52002000
 8006744:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0304 	and.w	r3, r3, #4
 8006750:	2b00      	cmp	r3, #0
 8006752:	d010      	beq.n	8006776 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691a      	ldr	r2, [r3, #16]
 8006758:	4b3f      	ldr	r3, [pc, #252]	@ (8006858 <HAL_RCC_ClockConfig+0x358>)
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006760:	429a      	cmp	r2, r3
 8006762:	d208      	bcs.n	8006776 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006764:	4b3c      	ldr	r3, [pc, #240]	@ (8006858 <HAL_RCC_ClockConfig+0x358>)
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	4939      	ldr	r1, [pc, #228]	@ (8006858 <HAL_RCC_ClockConfig+0x358>)
 8006772:	4313      	orrs	r3, r2
 8006774:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0308 	and.w	r3, r3, #8
 800677e:	2b00      	cmp	r3, #0
 8006780:	d010      	beq.n	80067a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	695a      	ldr	r2, [r3, #20]
 8006786:	4b34      	ldr	r3, [pc, #208]	@ (8006858 <HAL_RCC_ClockConfig+0x358>)
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800678e:	429a      	cmp	r2, r3
 8006790:	d208      	bcs.n	80067a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006792:	4b31      	ldr	r3, [pc, #196]	@ (8006858 <HAL_RCC_ClockConfig+0x358>)
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	492e      	ldr	r1, [pc, #184]	@ (8006858 <HAL_RCC_ClockConfig+0x358>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0310 	and.w	r3, r3, #16
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d010      	beq.n	80067d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	699a      	ldr	r2, [r3, #24]
 80067b4:	4b28      	ldr	r3, [pc, #160]	@ (8006858 <HAL_RCC_ClockConfig+0x358>)
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80067bc:	429a      	cmp	r2, r3
 80067be:	d208      	bcs.n	80067d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80067c0:	4b25      	ldr	r3, [pc, #148]	@ (8006858 <HAL_RCC_ClockConfig+0x358>)
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	4922      	ldr	r1, [pc, #136]	@ (8006858 <HAL_RCC_ClockConfig+0x358>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0320 	and.w	r3, r3, #32
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d010      	beq.n	8006800 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	69da      	ldr	r2, [r3, #28]
 80067e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006858 <HAL_RCC_ClockConfig+0x358>)
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d208      	bcs.n	8006800 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80067ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006858 <HAL_RCC_ClockConfig+0x358>)
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	4917      	ldr	r1, [pc, #92]	@ (8006858 <HAL_RCC_ClockConfig+0x358>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006800:	f000 f834 	bl	800686c <HAL_RCC_GetSysClockFreq>
 8006804:	4602      	mov	r2, r0
 8006806:	4b14      	ldr	r3, [pc, #80]	@ (8006858 <HAL_RCC_ClockConfig+0x358>)
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	0a1b      	lsrs	r3, r3, #8
 800680c:	f003 030f 	and.w	r3, r3, #15
 8006810:	4912      	ldr	r1, [pc, #72]	@ (800685c <HAL_RCC_ClockConfig+0x35c>)
 8006812:	5ccb      	ldrb	r3, [r1, r3]
 8006814:	f003 031f 	and.w	r3, r3, #31
 8006818:	fa22 f303 	lsr.w	r3, r2, r3
 800681c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800681e:	4b0e      	ldr	r3, [pc, #56]	@ (8006858 <HAL_RCC_ClockConfig+0x358>)
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	4a0d      	ldr	r2, [pc, #52]	@ (800685c <HAL_RCC_ClockConfig+0x35c>)
 8006828:	5cd3      	ldrb	r3, [r2, r3]
 800682a:	f003 031f 	and.w	r3, r3, #31
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	fa22 f303 	lsr.w	r3, r2, r3
 8006834:	4a0a      	ldr	r2, [pc, #40]	@ (8006860 <HAL_RCC_ClockConfig+0x360>)
 8006836:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006838:	4a0a      	ldr	r2, [pc, #40]	@ (8006864 <HAL_RCC_ClockConfig+0x364>)
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800683e:	4b0a      	ldr	r3, [pc, #40]	@ (8006868 <HAL_RCC_ClockConfig+0x368>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4618      	mov	r0, r3
 8006844:	f7fc fb72 	bl	8002f2c <HAL_InitTick>
 8006848:	4603      	mov	r3, r0
 800684a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800684c:	7bfb      	ldrb	r3, [r7, #15]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	58024400 	.word	0x58024400
 800685c:	0800f1d0 	.word	0x0800f1d0
 8006860:	24000008 	.word	0x24000008
 8006864:	24000004 	.word	0x24000004
 8006868:	2400000c 	.word	0x2400000c

0800686c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800686c:	b480      	push	{r7}
 800686e:	b089      	sub	sp, #36	@ 0x24
 8006870:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006872:	4bb3      	ldr	r3, [pc, #716]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800687a:	2b18      	cmp	r3, #24
 800687c:	f200 8155 	bhi.w	8006b2a <HAL_RCC_GetSysClockFreq+0x2be>
 8006880:	a201      	add	r2, pc, #4	@ (adr r2, 8006888 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006886:	bf00      	nop
 8006888:	080068ed 	.word	0x080068ed
 800688c:	08006b2b 	.word	0x08006b2b
 8006890:	08006b2b 	.word	0x08006b2b
 8006894:	08006b2b 	.word	0x08006b2b
 8006898:	08006b2b 	.word	0x08006b2b
 800689c:	08006b2b 	.word	0x08006b2b
 80068a0:	08006b2b 	.word	0x08006b2b
 80068a4:	08006b2b 	.word	0x08006b2b
 80068a8:	08006913 	.word	0x08006913
 80068ac:	08006b2b 	.word	0x08006b2b
 80068b0:	08006b2b 	.word	0x08006b2b
 80068b4:	08006b2b 	.word	0x08006b2b
 80068b8:	08006b2b 	.word	0x08006b2b
 80068bc:	08006b2b 	.word	0x08006b2b
 80068c0:	08006b2b 	.word	0x08006b2b
 80068c4:	08006b2b 	.word	0x08006b2b
 80068c8:	08006919 	.word	0x08006919
 80068cc:	08006b2b 	.word	0x08006b2b
 80068d0:	08006b2b 	.word	0x08006b2b
 80068d4:	08006b2b 	.word	0x08006b2b
 80068d8:	08006b2b 	.word	0x08006b2b
 80068dc:	08006b2b 	.word	0x08006b2b
 80068e0:	08006b2b 	.word	0x08006b2b
 80068e4:	08006b2b 	.word	0x08006b2b
 80068e8:	0800691f 	.word	0x0800691f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068ec:	4b94      	ldr	r3, [pc, #592]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0320 	and.w	r3, r3, #32
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d009      	beq.n	800690c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068f8:	4b91      	ldr	r3, [pc, #580]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	08db      	lsrs	r3, r3, #3
 80068fe:	f003 0303 	and.w	r3, r3, #3
 8006902:	4a90      	ldr	r2, [pc, #576]	@ (8006b44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006904:	fa22 f303 	lsr.w	r3, r2, r3
 8006908:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800690a:	e111      	b.n	8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800690c:	4b8d      	ldr	r3, [pc, #564]	@ (8006b44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800690e:	61bb      	str	r3, [r7, #24]
      break;
 8006910:	e10e      	b.n	8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006912:	4b8d      	ldr	r3, [pc, #564]	@ (8006b48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006914:	61bb      	str	r3, [r7, #24]
      break;
 8006916:	e10b      	b.n	8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006918:	4b8c      	ldr	r3, [pc, #560]	@ (8006b4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800691a:	61bb      	str	r3, [r7, #24]
      break;
 800691c:	e108      	b.n	8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800691e:	4b88      	ldr	r3, [pc, #544]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006922:	f003 0303 	and.w	r3, r3, #3
 8006926:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006928:	4b85      	ldr	r3, [pc, #532]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800692a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800692c:	091b      	lsrs	r3, r3, #4
 800692e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006932:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006934:	4b82      	ldr	r3, [pc, #520]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800693e:	4b80      	ldr	r3, [pc, #512]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006942:	08db      	lsrs	r3, r3, #3
 8006944:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	fb02 f303 	mul.w	r3, r2, r3
 800694e:	ee07 3a90 	vmov	s15, r3
 8006952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006956:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 80e1 	beq.w	8006b24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2b02      	cmp	r3, #2
 8006966:	f000 8083 	beq.w	8006a70 <HAL_RCC_GetSysClockFreq+0x204>
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	2b02      	cmp	r3, #2
 800696e:	f200 80a1 	bhi.w	8006ab4 <HAL_RCC_GetSysClockFreq+0x248>
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <HAL_RCC_GetSysClockFreq+0x114>
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d056      	beq.n	8006a2c <HAL_RCC_GetSysClockFreq+0x1c0>
 800697e:	e099      	b.n	8006ab4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006980:	4b6f      	ldr	r3, [pc, #444]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b00      	cmp	r3, #0
 800698a:	d02d      	beq.n	80069e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800698c:	4b6c      	ldr	r3, [pc, #432]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	08db      	lsrs	r3, r3, #3
 8006992:	f003 0303 	and.w	r3, r3, #3
 8006996:	4a6b      	ldr	r2, [pc, #428]	@ (8006b44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006998:	fa22 f303 	lsr.w	r3, r2, r3
 800699c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	ee07 3a90 	vmov	s15, r3
 80069a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	ee07 3a90 	vmov	s15, r3
 80069ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069b6:	4b62      	ldr	r3, [pc, #392]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069be:	ee07 3a90 	vmov	s15, r3
 80069c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80069ca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006b50 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80069e6:	e087      	b.n	8006af8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	ee07 3a90 	vmov	s15, r3
 80069ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006b54 <HAL_RCC_GetSysClockFreq+0x2e8>
 80069f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069fa:	4b51      	ldr	r3, [pc, #324]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a02:	ee07 3a90 	vmov	s15, r3
 8006a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a0e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006b50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a2a:	e065      	b.n	8006af8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	ee07 3a90 	vmov	s15, r3
 8006a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a36:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006b58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a3e:	4b40      	ldr	r3, [pc, #256]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a46:	ee07 3a90 	vmov	s15, r3
 8006a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a52:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006b50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a6e:	e043      	b.n	8006af8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	ee07 3a90 	vmov	s15, r3
 8006a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a7a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006b5c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a82:	4b2f      	ldr	r3, [pc, #188]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a92:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a96:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006b50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006ab2:	e021      	b.n	8006af8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006abe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006b58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ace:	ee07 3a90 	vmov	s15, r3
 8006ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ada:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006b50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006af2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006af6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006af8:	4b11      	ldr	r3, [pc, #68]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006afc:	0a5b      	lsrs	r3, r3, #9
 8006afe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b02:	3301      	adds	r3, #1
 8006b04:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	ee07 3a90 	vmov	s15, r3
 8006b0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b10:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b1c:	ee17 3a90 	vmov	r3, s15
 8006b20:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006b22:	e005      	b.n	8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	61bb      	str	r3, [r7, #24]
      break;
 8006b28:	e002      	b.n	8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006b2a:	4b07      	ldr	r3, [pc, #28]	@ (8006b48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b2c:	61bb      	str	r3, [r7, #24]
      break;
 8006b2e:	bf00      	nop
  }

  return sysclockfreq;
 8006b30:	69bb      	ldr	r3, [r7, #24]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3724      	adds	r7, #36	@ 0x24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	58024400 	.word	0x58024400
 8006b44:	03d09000 	.word	0x03d09000
 8006b48:	003d0900 	.word	0x003d0900
 8006b4c:	016e3600 	.word	0x016e3600
 8006b50:	46000000 	.word	0x46000000
 8006b54:	4c742400 	.word	0x4c742400
 8006b58:	4a742400 	.word	0x4a742400
 8006b5c:	4bb71b00 	.word	0x4bb71b00

08006b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006b66:	f7ff fe81 	bl	800686c <HAL_RCC_GetSysClockFreq>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	4b10      	ldr	r3, [pc, #64]	@ (8006bb0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	0a1b      	lsrs	r3, r3, #8
 8006b72:	f003 030f 	and.w	r3, r3, #15
 8006b76:	490f      	ldr	r1, [pc, #60]	@ (8006bb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006b78:	5ccb      	ldrb	r3, [r1, r3]
 8006b7a:	f003 031f 	and.w	r3, r3, #31
 8006b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b82:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b84:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	f003 030f 	and.w	r3, r3, #15
 8006b8c:	4a09      	ldr	r2, [pc, #36]	@ (8006bb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006b8e:	5cd3      	ldrb	r3, [r2, r3]
 8006b90:	f003 031f 	and.w	r3, r3, #31
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	fa22 f303 	lsr.w	r3, r2, r3
 8006b9a:	4a07      	ldr	r2, [pc, #28]	@ (8006bb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b9e:	4a07      	ldr	r2, [pc, #28]	@ (8006bbc <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006ba4:	4b04      	ldr	r3, [pc, #16]	@ (8006bb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	58024400 	.word	0x58024400
 8006bb4:	0800f1d0 	.word	0x0800f1d0
 8006bb8:	24000008 	.word	0x24000008
 8006bbc:	24000004 	.word	0x24000004

08006bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006bc4:	f7ff ffcc 	bl	8006b60 <HAL_RCC_GetHCLKFreq>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	4b06      	ldr	r3, [pc, #24]	@ (8006be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	091b      	lsrs	r3, r3, #4
 8006bd0:	f003 0307 	and.w	r3, r3, #7
 8006bd4:	4904      	ldr	r1, [pc, #16]	@ (8006be8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bd6:	5ccb      	ldrb	r3, [r1, r3]
 8006bd8:	f003 031f 	and.w	r3, r3, #31
 8006bdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	58024400 	.word	0x58024400
 8006be8:	0800f1d0 	.word	0x0800f1d0

08006bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006bf0:	f7ff ffb6 	bl	8006b60 <HAL_RCC_GetHCLKFreq>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	4b06      	ldr	r3, [pc, #24]	@ (8006c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	0a1b      	lsrs	r3, r3, #8
 8006bfc:	f003 0307 	and.w	r3, r3, #7
 8006c00:	4904      	ldr	r1, [pc, #16]	@ (8006c14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c02:	5ccb      	ldrb	r3, [r1, r3]
 8006c04:	f003 031f 	and.w	r3, r3, #31
 8006c08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	58024400 	.word	0x58024400
 8006c14:	0800f1d0 	.word	0x0800f1d0

08006c18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c1c:	b0ca      	sub	sp, #296	@ 0x128
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c24:	2300      	movs	r3, #0
 8006c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c38:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006c3c:	2500      	movs	r5, #0
 8006c3e:	ea54 0305 	orrs.w	r3, r4, r5
 8006c42:	d049      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c4e:	d02f      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006c50:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c54:	d828      	bhi.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006c56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c5a:	d01a      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006c5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c60:	d822      	bhi.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d003      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006c66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c6a:	d007      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006c6c:	e01c      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c6e:	4bb8      	ldr	r3, [pc, #736]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c72:	4ab7      	ldr	r2, [pc, #732]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006c7a:	e01a      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c80:	3308      	adds	r3, #8
 8006c82:	2102      	movs	r1, #2
 8006c84:	4618      	mov	r0, r3
 8006c86:	f001 fc8f 	bl	80085a8 <RCCEx_PLL2_Config>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006c90:	e00f      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c96:	3328      	adds	r3, #40	@ 0x28
 8006c98:	2102      	movs	r1, #2
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f001 fd36 	bl	800870c <RCCEx_PLL3_Config>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ca6:	e004      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cae:	e000      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10a      	bne.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006cba:	4ba5      	ldr	r3, [pc, #660]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cbe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cc8:	4aa1      	ldr	r2, [pc, #644]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cca:	430b      	orrs	r3, r1
 8006ccc:	6513      	str	r3, [r2, #80]	@ 0x50
 8006cce:	e003      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006ce4:	f04f 0900 	mov.w	r9, #0
 8006ce8:	ea58 0309 	orrs.w	r3, r8, r9
 8006cec:	d047      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cf4:	2b04      	cmp	r3, #4
 8006cf6:	d82a      	bhi.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8006d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfe:	bf00      	nop
 8006d00:	08006d15 	.word	0x08006d15
 8006d04:	08006d23 	.word	0x08006d23
 8006d08:	08006d39 	.word	0x08006d39
 8006d0c:	08006d57 	.word	0x08006d57
 8006d10:	08006d57 	.word	0x08006d57
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d14:	4b8e      	ldr	r3, [pc, #568]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d18:	4a8d      	ldr	r2, [pc, #564]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d20:	e01a      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d26:	3308      	adds	r3, #8
 8006d28:	2100      	movs	r1, #0
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f001 fc3c 	bl	80085a8 <RCCEx_PLL2_Config>
 8006d30:	4603      	mov	r3, r0
 8006d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d36:	e00f      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3c:	3328      	adds	r3, #40	@ 0x28
 8006d3e:	2100      	movs	r1, #0
 8006d40:	4618      	mov	r0, r3
 8006d42:	f001 fce3 	bl	800870c <RCCEx_PLL3_Config>
 8006d46:	4603      	mov	r3, r0
 8006d48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d4c:	e004      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d54:	e000      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10a      	bne.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d60:	4b7b      	ldr	r3, [pc, #492]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d64:	f023 0107 	bic.w	r1, r3, #7
 8006d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d6e:	4a78      	ldr	r2, [pc, #480]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d70:	430b      	orrs	r3, r1
 8006d72:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d74:	e003      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d86:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006d8a:	f04f 0b00 	mov.w	fp, #0
 8006d8e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006d92:	d04c      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d9e:	d030      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006da0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006da4:	d829      	bhi.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006da6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006da8:	d02d      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006daa:	2bc0      	cmp	r3, #192	@ 0xc0
 8006dac:	d825      	bhi.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006dae:	2b80      	cmp	r3, #128	@ 0x80
 8006db0:	d018      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006db2:	2b80      	cmp	r3, #128	@ 0x80
 8006db4:	d821      	bhi.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d002      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006dba:	2b40      	cmp	r3, #64	@ 0x40
 8006dbc:	d007      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006dbe:	e01c      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dc0:	4b63      	ldr	r3, [pc, #396]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc4:	4a62      	ldr	r2, [pc, #392]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006dcc:	e01c      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd2:	3308      	adds	r3, #8
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f001 fbe6 	bl	80085a8 <RCCEx_PLL2_Config>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006de2:	e011      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de8:	3328      	adds	r3, #40	@ 0x28
 8006dea:	2100      	movs	r1, #0
 8006dec:	4618      	mov	r0, r3
 8006dee:	f001 fc8d 	bl	800870c <RCCEx_PLL3_Config>
 8006df2:	4603      	mov	r3, r0
 8006df4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006df8:	e006      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e00:	e002      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006e02:	bf00      	nop
 8006e04:	e000      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006e06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10a      	bne.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006e10:	4b4f      	ldr	r3, [pc, #316]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e14:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e1e:	4a4c      	ldr	r2, [pc, #304]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e20:	430b      	orrs	r3, r1
 8006e22:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e24:	e003      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e36:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006e3a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006e44:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006e48:	460b      	mov	r3, r1
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	d053      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006e56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e5a:	d035      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006e5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e60:	d82e      	bhi.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006e62:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006e66:	d031      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006e68:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006e6c:	d828      	bhi.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006e6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e72:	d01a      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006e74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e78:	d822      	bhi.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006e7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e82:	d007      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006e84:	e01c      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e86:	4b32      	ldr	r3, [pc, #200]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8a:	4a31      	ldr	r2, [pc, #196]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e92:	e01c      	b.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e98:	3308      	adds	r3, #8
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f001 fb83 	bl	80085a8 <RCCEx_PLL2_Config>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006ea8:	e011      	b.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eae:	3328      	adds	r3, #40	@ 0x28
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f001 fc2a 	bl	800870c <RCCEx_PLL3_Config>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ebe:	e006      	b.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ec6:	e002      	b.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006ec8:	bf00      	nop
 8006eca:	e000      	b.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006ecc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10b      	bne.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eda:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ee8:	430b      	orrs	r3, r1
 8006eea:	6593      	str	r3, [r2, #88]	@ 0x58
 8006eec:	e003      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ef2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006f02:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006f06:	2300      	movs	r3, #0
 8006f08:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006f0c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006f10:	460b      	mov	r3, r1
 8006f12:	4313      	orrs	r3, r2
 8006f14:	d056      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006f1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f22:	d038      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006f24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f28:	d831      	bhi.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006f2a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006f2e:	d034      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006f30:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006f34:	d82b      	bhi.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006f36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f3a:	d01d      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006f3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f40:	d825      	bhi.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d006      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006f46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f4a:	d00a      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006f4c:	e01f      	b.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006f4e:	bf00      	nop
 8006f50:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f54:	4ba2      	ldr	r3, [pc, #648]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f58:	4aa1      	ldr	r2, [pc, #644]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f60:	e01c      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f66:	3308      	adds	r3, #8
 8006f68:	2100      	movs	r1, #0
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f001 fb1c 	bl	80085a8 <RCCEx_PLL2_Config>
 8006f70:	4603      	mov	r3, r0
 8006f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006f76:	e011      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f7c:	3328      	adds	r3, #40	@ 0x28
 8006f7e:	2100      	movs	r1, #0
 8006f80:	4618      	mov	r0, r3
 8006f82:	f001 fbc3 	bl	800870c <RCCEx_PLL3_Config>
 8006f86:	4603      	mov	r3, r0
 8006f88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f8c:	e006      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f94:	e002      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006f96:	bf00      	nop
 8006f98:	e000      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006f9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10b      	bne.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006fa4:	4b8e      	ldr	r3, [pc, #568]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006fb4:	4a8a      	ldr	r2, [pc, #552]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fb6:	430b      	orrs	r3, r1
 8006fb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fba:	e003      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fcc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006fd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006fda:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006fde:	460b      	mov	r3, r1
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	d03a      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fea:	2b30      	cmp	r3, #48	@ 0x30
 8006fec:	d01f      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006fee:	2b30      	cmp	r3, #48	@ 0x30
 8006ff0:	d819      	bhi.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006ff2:	2b20      	cmp	r3, #32
 8006ff4:	d00c      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006ff6:	2b20      	cmp	r3, #32
 8006ff8:	d815      	bhi.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d019      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006ffe:	2b10      	cmp	r3, #16
 8007000:	d111      	bne.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007002:	4b77      	ldr	r3, [pc, #476]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007006:	4a76      	ldr	r2, [pc, #472]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007008:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800700c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800700e:	e011      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007014:	3308      	adds	r3, #8
 8007016:	2102      	movs	r1, #2
 8007018:	4618      	mov	r0, r3
 800701a:	f001 fac5 	bl	80085a8 <RCCEx_PLL2_Config>
 800701e:	4603      	mov	r3, r0
 8007020:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007024:	e006      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800702c:	e002      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800702e:	bf00      	nop
 8007030:	e000      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007034:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10a      	bne.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800703c:	4b68      	ldr	r3, [pc, #416]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800703e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007040:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800704a:	4a65      	ldr	r2, [pc, #404]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800704c:	430b      	orrs	r3, r1
 800704e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007050:	e003      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007056:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800705a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800705e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007062:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007066:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800706a:	2300      	movs	r3, #0
 800706c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007070:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007074:	460b      	mov	r3, r1
 8007076:	4313      	orrs	r3, r2
 8007078:	d051      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800707a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007080:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007084:	d035      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007086:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800708a:	d82e      	bhi.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800708c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007090:	d031      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007092:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007096:	d828      	bhi.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007098:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800709c:	d01a      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800709e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070a2:	d822      	bhi.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d003      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80070a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070ac:	d007      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80070ae:	e01c      	b.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070b0:	4b4b      	ldr	r3, [pc, #300]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b4:	4a4a      	ldr	r2, [pc, #296]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80070bc:	e01c      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c2:	3308      	adds	r3, #8
 80070c4:	2100      	movs	r1, #0
 80070c6:	4618      	mov	r0, r3
 80070c8:	f001 fa6e 	bl	80085a8 <RCCEx_PLL2_Config>
 80070cc:	4603      	mov	r3, r0
 80070ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80070d2:	e011      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d8:	3328      	adds	r3, #40	@ 0x28
 80070da:	2100      	movs	r1, #0
 80070dc:	4618      	mov	r0, r3
 80070de:	f001 fb15 	bl	800870c <RCCEx_PLL3_Config>
 80070e2:	4603      	mov	r3, r0
 80070e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80070e8:	e006      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070f0:	e002      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80070f2:	bf00      	nop
 80070f4:	e000      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80070f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10a      	bne.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007100:	4b37      	ldr	r3, [pc, #220]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007104:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800710c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800710e:	4a34      	ldr	r2, [pc, #208]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007110:	430b      	orrs	r3, r1
 8007112:	6513      	str	r3, [r2, #80]	@ 0x50
 8007114:	e003      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800711a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800711e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800712a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800712e:	2300      	movs	r3, #0
 8007130:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007134:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007138:	460b      	mov	r3, r1
 800713a:	4313      	orrs	r3, r2
 800713c:	d056      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800713e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007142:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007144:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007148:	d033      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800714a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800714e:	d82c      	bhi.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007150:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007154:	d02f      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007156:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800715a:	d826      	bhi.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800715c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007160:	d02b      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007162:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007166:	d820      	bhi.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007168:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800716c:	d012      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800716e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007172:	d81a      	bhi.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007174:	2b00      	cmp	r3, #0
 8007176:	d022      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800717c:	d115      	bne.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800717e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007182:	3308      	adds	r3, #8
 8007184:	2101      	movs	r1, #1
 8007186:	4618      	mov	r0, r3
 8007188:	f001 fa0e 	bl	80085a8 <RCCEx_PLL2_Config>
 800718c:	4603      	mov	r3, r0
 800718e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007192:	e015      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007198:	3328      	adds	r3, #40	@ 0x28
 800719a:	2101      	movs	r1, #1
 800719c:	4618      	mov	r0, r3
 800719e:	f001 fab5 	bl	800870c <RCCEx_PLL3_Config>
 80071a2:	4603      	mov	r3, r0
 80071a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80071a8:	e00a      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071b0:	e006      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80071b2:	bf00      	nop
 80071b4:	e004      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80071b6:	bf00      	nop
 80071b8:	e002      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80071ba:	bf00      	nop
 80071bc:	e000      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80071be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10d      	bne.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80071c8:	4b05      	ldr	r3, [pc, #20]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071cc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80071d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071d6:	4a02      	ldr	r2, [pc, #8]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071d8:	430b      	orrs	r3, r1
 80071da:	6513      	str	r3, [r2, #80]	@ 0x50
 80071dc:	e006      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80071de:	bf00      	nop
 80071e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80071ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80071f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071fc:	2300      	movs	r3, #0
 80071fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007202:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007206:	460b      	mov	r3, r1
 8007208:	4313      	orrs	r3, r2
 800720a:	d055      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800720c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007210:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007214:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007218:	d033      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800721a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800721e:	d82c      	bhi.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007220:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007224:	d02f      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800722a:	d826      	bhi.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800722c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007230:	d02b      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007232:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007236:	d820      	bhi.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007238:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800723c:	d012      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800723e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007242:	d81a      	bhi.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007244:	2b00      	cmp	r3, #0
 8007246:	d022      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007248:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800724c:	d115      	bne.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800724e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007252:	3308      	adds	r3, #8
 8007254:	2101      	movs	r1, #1
 8007256:	4618      	mov	r0, r3
 8007258:	f001 f9a6 	bl	80085a8 <RCCEx_PLL2_Config>
 800725c:	4603      	mov	r3, r0
 800725e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007262:	e015      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007268:	3328      	adds	r3, #40	@ 0x28
 800726a:	2101      	movs	r1, #1
 800726c:	4618      	mov	r0, r3
 800726e:	f001 fa4d 	bl	800870c <RCCEx_PLL3_Config>
 8007272:	4603      	mov	r3, r0
 8007274:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007278:	e00a      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007280:	e006      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007282:	bf00      	nop
 8007284:	e004      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007286:	bf00      	nop
 8007288:	e002      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800728a:	bf00      	nop
 800728c:	e000      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800728e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007290:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10b      	bne.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007298:	4ba3      	ldr	r3, [pc, #652]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800729a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800729c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80072a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80072a8:	4a9f      	ldr	r2, [pc, #636]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072aa:	430b      	orrs	r3, r1
 80072ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80072ae:	e003      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80072b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80072c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80072c8:	2300      	movs	r3, #0
 80072ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80072ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80072d2:	460b      	mov	r3, r1
 80072d4:	4313      	orrs	r3, r2
 80072d6:	d037      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80072d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072e2:	d00e      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80072e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072e8:	d816      	bhi.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d018      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80072ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072f2:	d111      	bne.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072f4:	4b8c      	ldr	r3, [pc, #560]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f8:	4a8b      	ldr	r2, [pc, #556]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007300:	e00f      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007306:	3308      	adds	r3, #8
 8007308:	2101      	movs	r1, #1
 800730a:	4618      	mov	r0, r3
 800730c:	f001 f94c 	bl	80085a8 <RCCEx_PLL2_Config>
 8007310:	4603      	mov	r3, r0
 8007312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007316:	e004      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800731e:	e000      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10a      	bne.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800732a:	4b7f      	ldr	r3, [pc, #508]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800732c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800732e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007338:	4a7b      	ldr	r2, [pc, #492]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800733a:	430b      	orrs	r3, r1
 800733c:	6513      	str	r3, [r2, #80]	@ 0x50
 800733e:	e003      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007344:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007350:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007354:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007358:	2300      	movs	r3, #0
 800735a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800735e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007362:	460b      	mov	r3, r1
 8007364:	4313      	orrs	r3, r2
 8007366:	d039      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800736c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800736e:	2b03      	cmp	r3, #3
 8007370:	d81c      	bhi.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007372:	a201      	add	r2, pc, #4	@ (adr r2, 8007378 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007378:	080073b5 	.word	0x080073b5
 800737c:	08007389 	.word	0x08007389
 8007380:	08007397 	.word	0x08007397
 8007384:	080073b5 	.word	0x080073b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007388:	4b67      	ldr	r3, [pc, #412]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800738a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738c:	4a66      	ldr	r2, [pc, #408]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800738e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007392:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007394:	e00f      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800739a:	3308      	adds	r3, #8
 800739c:	2102      	movs	r1, #2
 800739e:	4618      	mov	r0, r3
 80073a0:	f001 f902 	bl	80085a8 <RCCEx_PLL2_Config>
 80073a4:	4603      	mov	r3, r0
 80073a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80073aa:	e004      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073b2:	e000      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80073b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10a      	bne.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80073be:	4b5a      	ldr	r3, [pc, #360]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073c2:	f023 0103 	bic.w	r1, r3, #3
 80073c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073cc:	4a56      	ldr	r2, [pc, #344]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073ce:	430b      	orrs	r3, r1
 80073d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80073d2:	e003      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80073dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80073e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073ec:	2300      	movs	r3, #0
 80073ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80073f6:	460b      	mov	r3, r1
 80073f8:	4313      	orrs	r3, r2
 80073fa:	f000 809f 	beq.w	800753c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073fe:	4b4b      	ldr	r3, [pc, #300]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a4a      	ldr	r2, [pc, #296]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800740a:	f7fb fdd9 	bl	8002fc0 <HAL_GetTick>
 800740e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007412:	e00b      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007414:	f7fb fdd4 	bl	8002fc0 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	2b64      	cmp	r3, #100	@ 0x64
 8007422:	d903      	bls.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800742a:	e005      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800742c:	4b3f      	ldr	r3, [pc, #252]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007434:	2b00      	cmp	r3, #0
 8007436:	d0ed      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007438:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800743c:	2b00      	cmp	r3, #0
 800743e:	d179      	bne.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007440:	4b39      	ldr	r3, [pc, #228]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007442:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007448:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800744c:	4053      	eors	r3, r2
 800744e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007452:	2b00      	cmp	r3, #0
 8007454:	d015      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007456:	4b34      	ldr	r3, [pc, #208]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800745a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800745e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007462:	4b31      	ldr	r3, [pc, #196]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007466:	4a30      	ldr	r2, [pc, #192]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800746c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800746e:	4b2e      	ldr	r3, [pc, #184]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007472:	4a2d      	ldr	r2, [pc, #180]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007474:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007478:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800747a:	4a2b      	ldr	r2, [pc, #172]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800747c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007480:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007486:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800748a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800748e:	d118      	bne.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007490:	f7fb fd96 	bl	8002fc0 <HAL_GetTick>
 8007494:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007498:	e00d      	b.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800749a:	f7fb fd91 	bl	8002fc0 <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80074a4:	1ad2      	subs	r2, r2, r3
 80074a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d903      	bls.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80074b4:	e005      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074b6:	4b1c      	ldr	r3, [pc, #112]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074ba:	f003 0302 	and.w	r3, r3, #2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d0eb      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80074c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d129      	bne.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80074d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074da:	d10e      	bne.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80074dc:	4b12      	ldr	r3, [pc, #72]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80074e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80074ec:	091a      	lsrs	r2, r3, #4
 80074ee:	4b10      	ldr	r3, [pc, #64]	@ (8007530 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80074f0:	4013      	ands	r3, r2
 80074f2:	4a0d      	ldr	r2, [pc, #52]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074f4:	430b      	orrs	r3, r1
 80074f6:	6113      	str	r3, [r2, #16]
 80074f8:	e005      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80074fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	4a0a      	ldr	r2, [pc, #40]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007500:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007504:	6113      	str	r3, [r2, #16]
 8007506:	4b08      	ldr	r3, [pc, #32]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007508:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800750a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800750e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007512:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007516:	4a04      	ldr	r2, [pc, #16]	@ (8007528 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007518:	430b      	orrs	r3, r1
 800751a:	6713      	str	r3, [r2, #112]	@ 0x70
 800751c:	e00e      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800751e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007522:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007526:	e009      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007528:	58024400 	.word	0x58024400
 800752c:	58024800 	.word	0x58024800
 8007530:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007534:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007538:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800753c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007544:	f002 0301 	and.w	r3, r2, #1
 8007548:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800754c:	2300      	movs	r3, #0
 800754e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007552:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007556:	460b      	mov	r3, r1
 8007558:	4313      	orrs	r3, r2
 800755a:	f000 8089 	beq.w	8007670 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800755e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007562:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007564:	2b28      	cmp	r3, #40	@ 0x28
 8007566:	d86b      	bhi.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007568:	a201      	add	r2, pc, #4	@ (adr r2, 8007570 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800756a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756e:	bf00      	nop
 8007570:	08007649 	.word	0x08007649
 8007574:	08007641 	.word	0x08007641
 8007578:	08007641 	.word	0x08007641
 800757c:	08007641 	.word	0x08007641
 8007580:	08007641 	.word	0x08007641
 8007584:	08007641 	.word	0x08007641
 8007588:	08007641 	.word	0x08007641
 800758c:	08007641 	.word	0x08007641
 8007590:	08007615 	.word	0x08007615
 8007594:	08007641 	.word	0x08007641
 8007598:	08007641 	.word	0x08007641
 800759c:	08007641 	.word	0x08007641
 80075a0:	08007641 	.word	0x08007641
 80075a4:	08007641 	.word	0x08007641
 80075a8:	08007641 	.word	0x08007641
 80075ac:	08007641 	.word	0x08007641
 80075b0:	0800762b 	.word	0x0800762b
 80075b4:	08007641 	.word	0x08007641
 80075b8:	08007641 	.word	0x08007641
 80075bc:	08007641 	.word	0x08007641
 80075c0:	08007641 	.word	0x08007641
 80075c4:	08007641 	.word	0x08007641
 80075c8:	08007641 	.word	0x08007641
 80075cc:	08007641 	.word	0x08007641
 80075d0:	08007649 	.word	0x08007649
 80075d4:	08007641 	.word	0x08007641
 80075d8:	08007641 	.word	0x08007641
 80075dc:	08007641 	.word	0x08007641
 80075e0:	08007641 	.word	0x08007641
 80075e4:	08007641 	.word	0x08007641
 80075e8:	08007641 	.word	0x08007641
 80075ec:	08007641 	.word	0x08007641
 80075f0:	08007649 	.word	0x08007649
 80075f4:	08007641 	.word	0x08007641
 80075f8:	08007641 	.word	0x08007641
 80075fc:	08007641 	.word	0x08007641
 8007600:	08007641 	.word	0x08007641
 8007604:	08007641 	.word	0x08007641
 8007608:	08007641 	.word	0x08007641
 800760c:	08007641 	.word	0x08007641
 8007610:	08007649 	.word	0x08007649
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007618:	3308      	adds	r3, #8
 800761a:	2101      	movs	r1, #1
 800761c:	4618      	mov	r0, r3
 800761e:	f000 ffc3 	bl	80085a8 <RCCEx_PLL2_Config>
 8007622:	4603      	mov	r3, r0
 8007624:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007628:	e00f      	b.n	800764a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800762a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800762e:	3328      	adds	r3, #40	@ 0x28
 8007630:	2101      	movs	r1, #1
 8007632:	4618      	mov	r0, r3
 8007634:	f001 f86a 	bl	800870c <RCCEx_PLL3_Config>
 8007638:	4603      	mov	r3, r0
 800763a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800763e:	e004      	b.n	800764a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007646:	e000      	b.n	800764a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800764a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10a      	bne.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007652:	4bbf      	ldr	r3, [pc, #764]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007656:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800765a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800765e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007660:	4abb      	ldr	r2, [pc, #748]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007662:	430b      	orrs	r3, r1
 8007664:	6553      	str	r3, [r2, #84]	@ 0x54
 8007666:	e003      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007668:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800766c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007678:	f002 0302 	and.w	r3, r2, #2
 800767c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007680:	2300      	movs	r3, #0
 8007682:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007686:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800768a:	460b      	mov	r3, r1
 800768c:	4313      	orrs	r3, r2
 800768e:	d041      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007694:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007696:	2b05      	cmp	r3, #5
 8007698:	d824      	bhi.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800769a:	a201      	add	r2, pc, #4	@ (adr r2, 80076a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800769c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a0:	080076ed 	.word	0x080076ed
 80076a4:	080076b9 	.word	0x080076b9
 80076a8:	080076cf 	.word	0x080076cf
 80076ac:	080076ed 	.word	0x080076ed
 80076b0:	080076ed 	.word	0x080076ed
 80076b4:	080076ed 	.word	0x080076ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076bc:	3308      	adds	r3, #8
 80076be:	2101      	movs	r1, #1
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 ff71 	bl	80085a8 <RCCEx_PLL2_Config>
 80076c6:	4603      	mov	r3, r0
 80076c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80076cc:	e00f      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d2:	3328      	adds	r3, #40	@ 0x28
 80076d4:	2101      	movs	r1, #1
 80076d6:	4618      	mov	r0, r3
 80076d8:	f001 f818 	bl	800870c <RCCEx_PLL3_Config>
 80076dc:	4603      	mov	r3, r0
 80076de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80076e2:	e004      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076ea:	e000      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80076ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10a      	bne.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80076f6:	4b96      	ldr	r3, [pc, #600]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076fa:	f023 0107 	bic.w	r1, r3, #7
 80076fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007702:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007704:	4a92      	ldr	r2, [pc, #584]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007706:	430b      	orrs	r3, r1
 8007708:	6553      	str	r3, [r2, #84]	@ 0x54
 800770a:	e003      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800770c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007710:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771c:	f002 0304 	and.w	r3, r2, #4
 8007720:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007724:	2300      	movs	r3, #0
 8007726:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800772a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800772e:	460b      	mov	r3, r1
 8007730:	4313      	orrs	r3, r2
 8007732:	d044      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007738:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800773c:	2b05      	cmp	r3, #5
 800773e:	d825      	bhi.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007740:	a201      	add	r2, pc, #4	@ (adr r2, 8007748 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007746:	bf00      	nop
 8007748:	08007795 	.word	0x08007795
 800774c:	08007761 	.word	0x08007761
 8007750:	08007777 	.word	0x08007777
 8007754:	08007795 	.word	0x08007795
 8007758:	08007795 	.word	0x08007795
 800775c:	08007795 	.word	0x08007795
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007764:	3308      	adds	r3, #8
 8007766:	2101      	movs	r1, #1
 8007768:	4618      	mov	r0, r3
 800776a:	f000 ff1d 	bl	80085a8 <RCCEx_PLL2_Config>
 800776e:	4603      	mov	r3, r0
 8007770:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007774:	e00f      	b.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800777a:	3328      	adds	r3, #40	@ 0x28
 800777c:	2101      	movs	r1, #1
 800777e:	4618      	mov	r0, r3
 8007780:	f000 ffc4 	bl	800870c <RCCEx_PLL3_Config>
 8007784:	4603      	mov	r3, r0
 8007786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800778a:	e004      	b.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007792:	e000      	b.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10b      	bne.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800779e:	4b6c      	ldr	r3, [pc, #432]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077a2:	f023 0107 	bic.w	r1, r3, #7
 80077a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077ae:	4a68      	ldr	r2, [pc, #416]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077b0:	430b      	orrs	r3, r1
 80077b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80077b4:	e003      	b.n	80077be <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80077be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c6:	f002 0320 	and.w	r3, r2, #32
 80077ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80077ce:	2300      	movs	r3, #0
 80077d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80077d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80077d8:	460b      	mov	r3, r1
 80077da:	4313      	orrs	r3, r2
 80077dc:	d055      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80077de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077ea:	d033      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80077ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077f0:	d82c      	bhi.n	800784c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80077f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077f6:	d02f      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80077f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077fc:	d826      	bhi.n	800784c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80077fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007802:	d02b      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007804:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007808:	d820      	bhi.n	800784c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800780a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800780e:	d012      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007810:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007814:	d81a      	bhi.n	800784c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007816:	2b00      	cmp	r3, #0
 8007818:	d022      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800781a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800781e:	d115      	bne.n	800784c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007824:	3308      	adds	r3, #8
 8007826:	2100      	movs	r1, #0
 8007828:	4618      	mov	r0, r3
 800782a:	f000 febd 	bl	80085a8 <RCCEx_PLL2_Config>
 800782e:	4603      	mov	r3, r0
 8007830:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007834:	e015      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800783a:	3328      	adds	r3, #40	@ 0x28
 800783c:	2102      	movs	r1, #2
 800783e:	4618      	mov	r0, r3
 8007840:	f000 ff64 	bl	800870c <RCCEx_PLL3_Config>
 8007844:	4603      	mov	r3, r0
 8007846:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800784a:	e00a      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007852:	e006      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007854:	bf00      	nop
 8007856:	e004      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007858:	bf00      	nop
 800785a:	e002      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800785c:	bf00      	nop
 800785e:	e000      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10b      	bne.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800786a:	4b39      	ldr	r3, [pc, #228]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800786c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800786e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800787a:	4a35      	ldr	r2, [pc, #212]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800787c:	430b      	orrs	r3, r1
 800787e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007880:	e003      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007886:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800788a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800788e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007892:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007896:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800789a:	2300      	movs	r3, #0
 800789c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80078a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80078a4:	460b      	mov	r3, r1
 80078a6:	4313      	orrs	r3, r2
 80078a8:	d058      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80078aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078b2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80078b6:	d033      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80078b8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80078bc:	d82c      	bhi.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80078be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078c2:	d02f      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80078c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078c8:	d826      	bhi.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80078ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078ce:	d02b      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80078d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078d4:	d820      	bhi.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80078d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078da:	d012      	beq.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80078dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078e0:	d81a      	bhi.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d022      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80078e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078ea:	d115      	bne.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f0:	3308      	adds	r3, #8
 80078f2:	2100      	movs	r1, #0
 80078f4:	4618      	mov	r0, r3
 80078f6:	f000 fe57 	bl	80085a8 <RCCEx_PLL2_Config>
 80078fa:	4603      	mov	r3, r0
 80078fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007900:	e015      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007906:	3328      	adds	r3, #40	@ 0x28
 8007908:	2102      	movs	r1, #2
 800790a:	4618      	mov	r0, r3
 800790c:	f000 fefe 	bl	800870c <RCCEx_PLL3_Config>
 8007910:	4603      	mov	r3, r0
 8007912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007916:	e00a      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800791e:	e006      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007920:	bf00      	nop
 8007922:	e004      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007924:	bf00      	nop
 8007926:	e002      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007928:	bf00      	nop
 800792a:	e000      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800792c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800792e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10e      	bne.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007936:	4b06      	ldr	r3, [pc, #24]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800793a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800793e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007942:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007946:	4a02      	ldr	r2, [pc, #8]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007948:	430b      	orrs	r3, r1
 800794a:	6593      	str	r3, [r2, #88]	@ 0x58
 800794c:	e006      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800794e:	bf00      	nop
 8007950:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007954:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007958:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800795c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007964:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007968:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800796c:	2300      	movs	r3, #0
 800796e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007972:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007976:	460b      	mov	r3, r1
 8007978:	4313      	orrs	r3, r2
 800797a:	d055      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800797c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007980:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007984:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007988:	d033      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800798a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800798e:	d82c      	bhi.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007990:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007994:	d02f      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007996:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800799a:	d826      	bhi.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800799c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80079a0:	d02b      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80079a2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80079a6:	d820      	bhi.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80079a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079ac:	d012      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80079ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079b2:	d81a      	bhi.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d022      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80079b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079bc:	d115      	bne.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c2:	3308      	adds	r3, #8
 80079c4:	2100      	movs	r1, #0
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 fdee 	bl	80085a8 <RCCEx_PLL2_Config>
 80079cc:	4603      	mov	r3, r0
 80079ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80079d2:	e015      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d8:	3328      	adds	r3, #40	@ 0x28
 80079da:	2102      	movs	r1, #2
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 fe95 	bl	800870c <RCCEx_PLL3_Config>
 80079e2:	4603      	mov	r3, r0
 80079e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80079e8:	e00a      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079f0:	e006      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80079f2:	bf00      	nop
 80079f4:	e004      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80079f6:	bf00      	nop
 80079f8:	e002      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80079fa:	bf00      	nop
 80079fc:	e000      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80079fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10b      	bne.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007a08:	4ba1      	ldr	r3, [pc, #644]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a0c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a18:	4a9d      	ldr	r2, [pc, #628]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a1a:	430b      	orrs	r3, r1
 8007a1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a1e:	e003      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a30:	f002 0308 	and.w	r3, r2, #8
 8007a34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a38:	2300      	movs	r3, #0
 8007a3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a3e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007a42:	460b      	mov	r3, r1
 8007a44:	4313      	orrs	r3, r2
 8007a46:	d01e      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a54:	d10c      	bne.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a5a:	3328      	adds	r3, #40	@ 0x28
 8007a5c:	2102      	movs	r1, #2
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 fe54 	bl	800870c <RCCEx_PLL3_Config>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007a70:	4b87      	ldr	r3, [pc, #540]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a74:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a80:	4a83      	ldr	r2, [pc, #524]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a82:	430b      	orrs	r3, r1
 8007a84:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8e:	f002 0310 	and.w	r3, r2, #16
 8007a92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a96:	2300      	movs	r3, #0
 8007a98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a9c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	d01e      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ab2:	d10c      	bne.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab8:	3328      	adds	r3, #40	@ 0x28
 8007aba:	2102      	movs	r1, #2
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 fe25 	bl	800870c <RCCEx_PLL3_Config>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d002      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ace:	4b70      	ldr	r3, [pc, #448]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ad2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ade:	4a6c      	ldr	r2, [pc, #432]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ae0:	430b      	orrs	r3, r1
 8007ae2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aec:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007af0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007af4:	2300      	movs	r3, #0
 8007af6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007afa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007afe:	460b      	mov	r3, r1
 8007b00:	4313      	orrs	r3, r2
 8007b02:	d03e      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007b0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b10:	d022      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007b12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b16:	d81b      	bhi.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d003      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007b1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b20:	d00b      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007b22:	e015      	b.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b28:	3308      	adds	r3, #8
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 fd3b 	bl	80085a8 <RCCEx_PLL2_Config>
 8007b32:	4603      	mov	r3, r0
 8007b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007b38:	e00f      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3e:	3328      	adds	r3, #40	@ 0x28
 8007b40:	2102      	movs	r1, #2
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 fde2 	bl	800870c <RCCEx_PLL3_Config>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007b4e:	e004      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b56:	e000      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10b      	bne.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b62:	4b4b      	ldr	r3, [pc, #300]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b66:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007b72:	4a47      	ldr	r2, [pc, #284]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b74:	430b      	orrs	r3, r1
 8007b76:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b78:	e003      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007b8e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b90:	2300      	movs	r3, #0
 8007b92:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007b94:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007b98:	460b      	mov	r3, r1
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	d03b      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ba6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007baa:	d01f      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007bac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007bb0:	d818      	bhi.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007bb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bb6:	d003      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007bb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007bbc:	d007      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007bbe:	e011      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bc0:	4b33      	ldr	r3, [pc, #204]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc4:	4a32      	ldr	r2, [pc, #200]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007bcc:	e00f      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd2:	3328      	adds	r3, #40	@ 0x28
 8007bd4:	2101      	movs	r1, #1
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f000 fd98 	bl	800870c <RCCEx_PLL3_Config>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007be2:	e004      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bea:	e000      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10b      	bne.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007bf6:	4b26      	ldr	r3, [pc, #152]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bfa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c06:	4a22      	ldr	r2, [pc, #136]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c08:	430b      	orrs	r3, r1
 8007c0a:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c0c:	e003      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007c22:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c24:	2300      	movs	r3, #0
 8007c26:	677b      	str	r3, [r7, #116]	@ 0x74
 8007c28:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	d034      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c40:	d007      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007c42:	e011      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c44:	4b12      	ldr	r3, [pc, #72]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c48:	4a11      	ldr	r2, [pc, #68]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007c50:	e00e      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c56:	3308      	adds	r3, #8
 8007c58:	2102      	movs	r1, #2
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f000 fca4 	bl	80085a8 <RCCEx_PLL2_Config>
 8007c60:	4603      	mov	r3, r0
 8007c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007c66:	e003      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10d      	bne.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007c78:	4b05      	ldr	r3, [pc, #20]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c7c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c86:	4a02      	ldr	r2, [pc, #8]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c88:	430b      	orrs	r3, r1
 8007c8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007c8c:	e006      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007c8e:	bf00      	nop
 8007c90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007ca8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007caa:	2300      	movs	r3, #0
 8007cac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007cae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	d00c      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cbc:	3328      	adds	r3, #40	@ 0x28
 8007cbe:	2102      	movs	r1, #2
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 fd23 	bl	800870c <RCCEx_PLL3_Config>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cda:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007cde:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ce4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007ce8:	460b      	mov	r3, r1
 8007cea:	4313      	orrs	r3, r2
 8007cec:	d038      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007cfa:	d018      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007cfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d00:	d811      	bhi.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007d02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d06:	d014      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007d08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d0c:	d80b      	bhi.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d011      	beq.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007d12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d16:	d106      	bne.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d18:	4bc3      	ldr	r3, [pc, #780]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1c:	4ac2      	ldr	r2, [pc, #776]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007d24:	e008      	b.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d2c:	e004      	b.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007d2e:	bf00      	nop
 8007d30:	e002      	b.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007d32:	bf00      	nop
 8007d34:	e000      	b.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007d36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10b      	bne.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d40:	4bb9      	ldr	r3, [pc, #740]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d44:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d50:	4ab5      	ldr	r2, [pc, #724]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d52:	430b      	orrs	r3, r1
 8007d54:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d56:	e003      	b.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d68:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007d6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d6e:	2300      	movs	r3, #0
 8007d70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d72:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007d76:	460b      	mov	r3, r1
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	d009      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007d7c:	4baa      	ldr	r3, [pc, #680]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d80:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d8a:	4aa7      	ldr	r2, [pc, #668]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d8c:	430b      	orrs	r3, r1
 8007d8e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d98:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007d9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d9e:	2300      	movs	r3, #0
 8007da0:	657b      	str	r3, [r7, #84]	@ 0x54
 8007da2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007da6:	460b      	mov	r3, r1
 8007da8:	4313      	orrs	r3, r2
 8007daa:	d00a      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007dac:	4b9e      	ldr	r3, [pc, #632]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007dbc:	4a9a      	ldr	r2, [pc, #616]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dbe:	430b      	orrs	r3, r1
 8007dc0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dca:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007dce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dd4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007dd8:	460b      	mov	r3, r1
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	d009      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007dde:	4b92      	ldr	r3, [pc, #584]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007de2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dec:	4a8e      	ldr	r2, [pc, #568]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dee:	430b      	orrs	r3, r1
 8007df0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007dfe:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e00:	2300      	movs	r3, #0
 8007e02:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e04:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007e08:	460b      	mov	r3, r1
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	d00e      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e0e:	4b86      	ldr	r3, [pc, #536]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	4a85      	ldr	r2, [pc, #532]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e14:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007e18:	6113      	str	r3, [r2, #16]
 8007e1a:	4b83      	ldr	r3, [pc, #524]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e1c:	6919      	ldr	r1, [r3, #16]
 8007e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007e26:	4a80      	ldr	r2, [pc, #512]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e28:	430b      	orrs	r3, r1
 8007e2a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e34:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007e38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e3e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007e42:	460b      	mov	r3, r1
 8007e44:	4313      	orrs	r3, r2
 8007e46:	d009      	beq.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007e48:	4b77      	ldr	r3, [pc, #476]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e4c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e56:	4a74      	ldr	r2, [pc, #464]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e58:	430b      	orrs	r3, r1
 8007e5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e64:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007e68:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e6e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007e72:	460b      	mov	r3, r1
 8007e74:	4313      	orrs	r3, r2
 8007e76:	d00a      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007e78:	4b6b      	ldr	r3, [pc, #428]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e7c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e88:	4a67      	ldr	r2, [pc, #412]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e8a:	430b      	orrs	r3, r1
 8007e8c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e96:	2100      	movs	r1, #0
 8007e98:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007e9a:	f003 0301 	and.w	r3, r3, #1
 8007e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ea0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	d011      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eae:	3308      	adds	r3, #8
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 fb78 	bl	80085a8 <RCCEx_PLL2_Config>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	6239      	str	r1, [r7, #32]
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ee0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	d011      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eee:	3308      	adds	r3, #8
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 fb58 	bl	80085a8 <RCCEx_PLL2_Config>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007efe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f16:	2100      	movs	r1, #0
 8007f18:	61b9      	str	r1, [r7, #24]
 8007f1a:	f003 0304 	and.w	r3, r3, #4
 8007f1e:	61fb      	str	r3, [r7, #28]
 8007f20:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007f24:	460b      	mov	r3, r1
 8007f26:	4313      	orrs	r3, r2
 8007f28:	d011      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f2e:	3308      	adds	r3, #8
 8007f30:	2102      	movs	r1, #2
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 fb38 	bl	80085a8 <RCCEx_PLL2_Config>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d003      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f56:	2100      	movs	r1, #0
 8007f58:	6139      	str	r1, [r7, #16]
 8007f5a:	f003 0308 	and.w	r3, r3, #8
 8007f5e:	617b      	str	r3, [r7, #20]
 8007f60:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007f64:	460b      	mov	r3, r1
 8007f66:	4313      	orrs	r3, r2
 8007f68:	d011      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6e:	3328      	adds	r3, #40	@ 0x28
 8007f70:	2100      	movs	r1, #0
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 fbca 	bl	800870c <RCCEx_PLL3_Config>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d003      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f96:	2100      	movs	r1, #0
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	f003 0310 	and.w	r3, r3, #16
 8007f9e:	60fb      	str	r3, [r7, #12]
 8007fa0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	d011      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fae:	3328      	adds	r3, #40	@ 0x28
 8007fb0:	2101      	movs	r1, #1
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 fbaa 	bl	800870c <RCCEx_PLL3_Config>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d003      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	6039      	str	r1, [r7, #0]
 8007fda:	f003 0320 	and.w	r3, r3, #32
 8007fde:	607b      	str	r3, [r7, #4]
 8007fe0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	d011      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fee:	3328      	adds	r3, #40	@ 0x28
 8007ff0:	2102      	movs	r1, #2
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 fb8a 	bl	800870c <RCCEx_PLL3_Config>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800800a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800800e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	e000      	b.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
}
 800801c:	4618      	mov	r0, r3
 800801e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008022:	46bd      	mov	sp, r7
 8008024:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008028:	58024400 	.word	0x58024400

0800802c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008030:	f7fe fd96 	bl	8006b60 <HAL_RCC_GetHCLKFreq>
 8008034:	4602      	mov	r2, r0
 8008036:	4b06      	ldr	r3, [pc, #24]	@ (8008050 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	091b      	lsrs	r3, r3, #4
 800803c:	f003 0307 	and.w	r3, r3, #7
 8008040:	4904      	ldr	r1, [pc, #16]	@ (8008054 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008042:	5ccb      	ldrb	r3, [r1, r3]
 8008044:	f003 031f 	and.w	r3, r3, #31
 8008048:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800804c:	4618      	mov	r0, r3
 800804e:	bd80      	pop	{r7, pc}
 8008050:	58024400 	.word	0x58024400
 8008054:	0800f1d0 	.word	0x0800f1d0

08008058 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008058:	b480      	push	{r7}
 800805a:	b089      	sub	sp, #36	@ 0x24
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008060:	4ba1      	ldr	r3, [pc, #644]	@ (80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008064:	f003 0303 	and.w	r3, r3, #3
 8008068:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800806a:	4b9f      	ldr	r3, [pc, #636]	@ (80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800806c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800806e:	0b1b      	lsrs	r3, r3, #12
 8008070:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008074:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008076:	4b9c      	ldr	r3, [pc, #624]	@ (80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807a:	091b      	lsrs	r3, r3, #4
 800807c:	f003 0301 	and.w	r3, r3, #1
 8008080:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008082:	4b99      	ldr	r3, [pc, #612]	@ (80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008086:	08db      	lsrs	r3, r3, #3
 8008088:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	fb02 f303 	mul.w	r3, r2, r3
 8008092:	ee07 3a90 	vmov	s15, r3
 8008096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800809a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 8111 	beq.w	80082c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	f000 8083 	beq.w	80081b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	f200 80a1 	bhi.w	80081f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d003      	beq.n	80080c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d056      	beq.n	8008170 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80080c2:	e099      	b.n	80081f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080c4:	4b88      	ldr	r3, [pc, #544]	@ (80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0320 	and.w	r3, r3, #32
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d02d      	beq.n	800812c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080d0:	4b85      	ldr	r3, [pc, #532]	@ (80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	08db      	lsrs	r3, r3, #3
 80080d6:	f003 0303 	and.w	r3, r3, #3
 80080da:	4a84      	ldr	r2, [pc, #528]	@ (80082ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80080dc:	fa22 f303 	lsr.w	r3, r2, r3
 80080e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	ee07 3a90 	vmov	s15, r3
 80080e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	ee07 3a90 	vmov	s15, r3
 80080f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080fa:	4b7b      	ldr	r3, [pc, #492]	@ (80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008102:	ee07 3a90 	vmov	s15, r3
 8008106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800810a:	ed97 6a03 	vldr	s12, [r7, #12]
 800810e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80082f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800811a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800811e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008126:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800812a:	e087      	b.n	800823c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	ee07 3a90 	vmov	s15, r3
 8008132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008136:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80082f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800813a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800813e:	4b6a      	ldr	r3, [pc, #424]	@ (80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008146:	ee07 3a90 	vmov	s15, r3
 800814a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800814e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008152:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80082f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800815a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800815e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800816a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800816e:	e065      	b.n	800823c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	ee07 3a90 	vmov	s15, r3
 8008176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800817a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80082f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800817e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008182:	4b59      	ldr	r3, [pc, #356]	@ (80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800818a:	ee07 3a90 	vmov	s15, r3
 800818e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008192:	ed97 6a03 	vldr	s12, [r7, #12]
 8008196:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80082f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800819a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800819e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081b2:	e043      	b.n	800823c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	ee07 3a90 	vmov	s15, r3
 80081ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80081c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081c6:	4b48      	ldr	r3, [pc, #288]	@ (80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ce:	ee07 3a90 	vmov	s15, r3
 80081d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80081da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80082f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081f6:	e021      	b.n	800823c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	ee07 3a90 	vmov	s15, r3
 80081fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008202:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80082f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800820a:	4b37      	ldr	r3, [pc, #220]	@ (80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800820c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800820e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008212:	ee07 3a90 	vmov	s15, r3
 8008216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800821a:	ed97 6a03 	vldr	s12, [r7, #12]
 800821e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80082f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800822a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800822e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008236:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800823a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800823c:	4b2a      	ldr	r3, [pc, #168]	@ (80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800823e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008240:	0a5b      	lsrs	r3, r3, #9
 8008242:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008246:	ee07 3a90 	vmov	s15, r3
 800824a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800824e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008252:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008256:	edd7 6a07 	vldr	s13, [r7, #28]
 800825a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800825e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008262:	ee17 2a90 	vmov	r2, s15
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800826a:	4b1f      	ldr	r3, [pc, #124]	@ (80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800826c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800826e:	0c1b      	lsrs	r3, r3, #16
 8008270:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008274:	ee07 3a90 	vmov	s15, r3
 8008278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800827c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008280:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008284:	edd7 6a07 	vldr	s13, [r7, #28]
 8008288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800828c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008290:	ee17 2a90 	vmov	r2, s15
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008298:	4b13      	ldr	r3, [pc, #76]	@ (80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800829a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800829c:	0e1b      	lsrs	r3, r3, #24
 800829e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082a2:	ee07 3a90 	vmov	s15, r3
 80082a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80082b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082be:	ee17 2a90 	vmov	r2, s15
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80082c6:	e008      	b.n	80082da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	609a      	str	r2, [r3, #8]
}
 80082da:	bf00      	nop
 80082dc:	3724      	adds	r7, #36	@ 0x24
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	58024400 	.word	0x58024400
 80082ec:	03d09000 	.word	0x03d09000
 80082f0:	46000000 	.word	0x46000000
 80082f4:	4c742400 	.word	0x4c742400
 80082f8:	4a742400 	.word	0x4a742400
 80082fc:	4bb71b00 	.word	0x4bb71b00

08008300 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008300:	b480      	push	{r7}
 8008302:	b089      	sub	sp, #36	@ 0x24
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008308:	4ba1      	ldr	r3, [pc, #644]	@ (8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800830a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800830c:	f003 0303 	and.w	r3, r3, #3
 8008310:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008312:	4b9f      	ldr	r3, [pc, #636]	@ (8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008316:	0d1b      	lsrs	r3, r3, #20
 8008318:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800831c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800831e:	4b9c      	ldr	r3, [pc, #624]	@ (8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008322:	0a1b      	lsrs	r3, r3, #8
 8008324:	f003 0301 	and.w	r3, r3, #1
 8008328:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800832a:	4b99      	ldr	r3, [pc, #612]	@ (8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800832c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800832e:	08db      	lsrs	r3, r3, #3
 8008330:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	fb02 f303 	mul.w	r3, r2, r3
 800833a:	ee07 3a90 	vmov	s15, r3
 800833e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008342:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	2b00      	cmp	r3, #0
 800834a:	f000 8111 	beq.w	8008570 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	2b02      	cmp	r3, #2
 8008352:	f000 8083 	beq.w	800845c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	2b02      	cmp	r3, #2
 800835a:	f200 80a1 	bhi.w	80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d003      	beq.n	800836c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d056      	beq.n	8008418 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800836a:	e099      	b.n	80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800836c:	4b88      	ldr	r3, [pc, #544]	@ (8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0320 	and.w	r3, r3, #32
 8008374:	2b00      	cmp	r3, #0
 8008376:	d02d      	beq.n	80083d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008378:	4b85      	ldr	r3, [pc, #532]	@ (8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	08db      	lsrs	r3, r3, #3
 800837e:	f003 0303 	and.w	r3, r3, #3
 8008382:	4a84      	ldr	r2, [pc, #528]	@ (8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008384:	fa22 f303 	lsr.w	r3, r2, r3
 8008388:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	ee07 3a90 	vmov	s15, r3
 8008390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	ee07 3a90 	vmov	s15, r3
 800839a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800839e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083a2:	4b7b      	ldr	r3, [pc, #492]	@ (8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083aa:	ee07 3a90 	vmov	s15, r3
 80083ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80083b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008598 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80083d2:	e087      	b.n	80084e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	ee07 3a90 	vmov	s15, r3
 80083da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800859c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80083e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083e6:	4b6a      	ldr	r3, [pc, #424]	@ (8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ee:	ee07 3a90 	vmov	s15, r3
 80083f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80083fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008598 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008406:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800840a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800840e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008416:	e065      	b.n	80084e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	ee07 3a90 	vmov	s15, r3
 800841e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008422:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80085a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800842a:	4b59      	ldr	r3, [pc, #356]	@ (8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800842c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800842e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008432:	ee07 3a90 	vmov	s15, r3
 8008436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800843a:	ed97 6a03 	vldr	s12, [r7, #12]
 800843e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008598 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800844a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800844e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008456:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800845a:	e043      	b.n	80084e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	ee07 3a90 	vmov	s15, r3
 8008462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008466:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80085a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800846a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800846e:	4b48      	ldr	r3, [pc, #288]	@ (8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008476:	ee07 3a90 	vmov	s15, r3
 800847a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800847e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008482:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008598 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800848a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800848e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800849a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800849e:	e021      	b.n	80084e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	ee07 3a90 	vmov	s15, r3
 80084a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084aa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80085a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80084ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084b2:	4b37      	ldr	r3, [pc, #220]	@ (8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ba:	ee07 3a90 	vmov	s15, r3
 80084be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80084c6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008598 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80084e4:	4b2a      	ldr	r3, [pc, #168]	@ (8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e8:	0a5b      	lsrs	r3, r3, #9
 80084ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084ee:	ee07 3a90 	vmov	s15, r3
 80084f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80084fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800850a:	ee17 2a90 	vmov	r2, s15
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008512:	4b1f      	ldr	r3, [pc, #124]	@ (8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008516:	0c1b      	lsrs	r3, r3, #16
 8008518:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800851c:	ee07 3a90 	vmov	s15, r3
 8008520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008524:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008528:	ee37 7a87 	vadd.f32	s14, s15, s14
 800852c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008530:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008534:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008538:	ee17 2a90 	vmov	r2, s15
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008540:	4b13      	ldr	r3, [pc, #76]	@ (8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008544:	0e1b      	lsrs	r3, r3, #24
 8008546:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800854a:	ee07 3a90 	vmov	s15, r3
 800854e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008552:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008556:	ee37 7a87 	vadd.f32	s14, s15, s14
 800855a:	edd7 6a07 	vldr	s13, [r7, #28]
 800855e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008566:	ee17 2a90 	vmov	r2, s15
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800856e:	e008      	b.n	8008582 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	609a      	str	r2, [r3, #8]
}
 8008582:	bf00      	nop
 8008584:	3724      	adds	r7, #36	@ 0x24
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	58024400 	.word	0x58024400
 8008594:	03d09000 	.word	0x03d09000
 8008598:	46000000 	.word	0x46000000
 800859c:	4c742400 	.word	0x4c742400
 80085a0:	4a742400 	.word	0x4a742400
 80085a4:	4bb71b00 	.word	0x4bb71b00

080085a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80085b6:	4b53      	ldr	r3, [pc, #332]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 80085b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ba:	f003 0303 	and.w	r3, r3, #3
 80085be:	2b03      	cmp	r3, #3
 80085c0:	d101      	bne.n	80085c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e099      	b.n	80086fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80085c6:	4b4f      	ldr	r3, [pc, #316]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a4e      	ldr	r2, [pc, #312]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 80085cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80085d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085d2:	f7fa fcf5 	bl	8002fc0 <HAL_GetTick>
 80085d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80085d8:	e008      	b.n	80085ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80085da:	f7fa fcf1 	bl	8002fc0 <HAL_GetTick>
 80085de:	4602      	mov	r2, r0
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	1ad3      	subs	r3, r2, r3
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d901      	bls.n	80085ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e086      	b.n	80086fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80085ec:	4b45      	ldr	r3, [pc, #276]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d1f0      	bne.n	80085da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80085f8:	4b42      	ldr	r3, [pc, #264]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 80085fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085fc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	031b      	lsls	r3, r3, #12
 8008606:	493f      	ldr	r1, [pc, #252]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 8008608:	4313      	orrs	r3, r2
 800860a:	628b      	str	r3, [r1, #40]	@ 0x28
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	3b01      	subs	r3, #1
 8008612:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	3b01      	subs	r3, #1
 800861c:	025b      	lsls	r3, r3, #9
 800861e:	b29b      	uxth	r3, r3
 8008620:	431a      	orrs	r2, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	3b01      	subs	r3, #1
 8008628:	041b      	lsls	r3, r3, #16
 800862a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800862e:	431a      	orrs	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	3b01      	subs	r3, #1
 8008636:	061b      	lsls	r3, r3, #24
 8008638:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800863c:	4931      	ldr	r1, [pc, #196]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 800863e:	4313      	orrs	r3, r2
 8008640:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008642:	4b30      	ldr	r3, [pc, #192]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 8008644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008646:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	492d      	ldr	r1, [pc, #180]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 8008650:	4313      	orrs	r3, r2
 8008652:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008654:	4b2b      	ldr	r3, [pc, #172]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 8008656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008658:	f023 0220 	bic.w	r2, r3, #32
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	4928      	ldr	r1, [pc, #160]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 8008662:	4313      	orrs	r3, r2
 8008664:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008666:	4b27      	ldr	r3, [pc, #156]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 8008668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800866a:	4a26      	ldr	r2, [pc, #152]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 800866c:	f023 0310 	bic.w	r3, r3, #16
 8008670:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008672:	4b24      	ldr	r3, [pc, #144]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 8008674:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008676:	4b24      	ldr	r3, [pc, #144]	@ (8008708 <RCCEx_PLL2_Config+0x160>)
 8008678:	4013      	ands	r3, r2
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	69d2      	ldr	r2, [r2, #28]
 800867e:	00d2      	lsls	r2, r2, #3
 8008680:	4920      	ldr	r1, [pc, #128]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 8008682:	4313      	orrs	r3, r2
 8008684:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008686:	4b1f      	ldr	r3, [pc, #124]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 8008688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800868a:	4a1e      	ldr	r2, [pc, #120]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 800868c:	f043 0310 	orr.w	r3, r3, #16
 8008690:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d106      	bne.n	80086a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008698:	4b1a      	ldr	r3, [pc, #104]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 800869a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800869c:	4a19      	ldr	r2, [pc, #100]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 800869e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80086a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80086a4:	e00f      	b.n	80086c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d106      	bne.n	80086ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80086ac:	4b15      	ldr	r3, [pc, #84]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 80086ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086b0:	4a14      	ldr	r2, [pc, #80]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 80086b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80086b8:	e005      	b.n	80086c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80086ba:	4b12      	ldr	r3, [pc, #72]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 80086bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086be:	4a11      	ldr	r2, [pc, #68]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 80086c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80086c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80086c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a0e      	ldr	r2, [pc, #56]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 80086cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80086d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086d2:	f7fa fc75 	bl	8002fc0 <HAL_GetTick>
 80086d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80086d8:	e008      	b.n	80086ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80086da:	f7fa fc71 	bl	8002fc0 <HAL_GetTick>
 80086de:	4602      	mov	r2, r0
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d901      	bls.n	80086ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80086e8:	2303      	movs	r3, #3
 80086ea:	e006      	b.n	80086fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80086ec:	4b05      	ldr	r3, [pc, #20]	@ (8008704 <RCCEx_PLL2_Config+0x15c>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d0f0      	beq.n	80086da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80086f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	58024400 	.word	0x58024400
 8008708:	ffff0007 	.word	0xffff0007

0800870c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008716:	2300      	movs	r3, #0
 8008718:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800871a:	4b53      	ldr	r3, [pc, #332]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 800871c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800871e:	f003 0303 	and.w	r3, r3, #3
 8008722:	2b03      	cmp	r3, #3
 8008724:	d101      	bne.n	800872a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e099      	b.n	800885e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800872a:	4b4f      	ldr	r3, [pc, #316]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a4e      	ldr	r2, [pc, #312]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 8008730:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008734:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008736:	f7fa fc43 	bl	8002fc0 <HAL_GetTick>
 800873a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800873c:	e008      	b.n	8008750 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800873e:	f7fa fc3f 	bl	8002fc0 <HAL_GetTick>
 8008742:	4602      	mov	r2, r0
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	2b02      	cmp	r3, #2
 800874a:	d901      	bls.n	8008750 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800874c:	2303      	movs	r3, #3
 800874e:	e086      	b.n	800885e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008750:	4b45      	ldr	r3, [pc, #276]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1f0      	bne.n	800873e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800875c:	4b42      	ldr	r3, [pc, #264]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 800875e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008760:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	051b      	lsls	r3, r3, #20
 800876a:	493f      	ldr	r1, [pc, #252]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 800876c:	4313      	orrs	r3, r2
 800876e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	3b01      	subs	r3, #1
 8008776:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	3b01      	subs	r3, #1
 8008780:	025b      	lsls	r3, r3, #9
 8008782:	b29b      	uxth	r3, r3
 8008784:	431a      	orrs	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	3b01      	subs	r3, #1
 800878c:	041b      	lsls	r3, r3, #16
 800878e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008792:	431a      	orrs	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	3b01      	subs	r3, #1
 800879a:	061b      	lsls	r3, r3, #24
 800879c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80087a0:	4931      	ldr	r1, [pc, #196]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 80087a2:	4313      	orrs	r3, r2
 80087a4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80087a6:	4b30      	ldr	r3, [pc, #192]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 80087a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	492d      	ldr	r1, [pc, #180]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 80087b4:	4313      	orrs	r3, r2
 80087b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80087b8:	4b2b      	ldr	r3, [pc, #172]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 80087ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	4928      	ldr	r1, [pc, #160]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 80087c6:	4313      	orrs	r3, r2
 80087c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80087ca:	4b27      	ldr	r3, [pc, #156]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 80087cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ce:	4a26      	ldr	r2, [pc, #152]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 80087d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80087d6:	4b24      	ldr	r3, [pc, #144]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 80087d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087da:	4b24      	ldr	r3, [pc, #144]	@ (800886c <RCCEx_PLL3_Config+0x160>)
 80087dc:	4013      	ands	r3, r2
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	69d2      	ldr	r2, [r2, #28]
 80087e2:	00d2      	lsls	r2, r2, #3
 80087e4:	4920      	ldr	r1, [pc, #128]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80087ea:	4b1f      	ldr	r3, [pc, #124]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 80087ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ee:	4a1e      	ldr	r2, [pc, #120]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 80087f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d106      	bne.n	800880a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80087fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 80087fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008800:	4a19      	ldr	r2, [pc, #100]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 8008802:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008806:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008808:	e00f      	b.n	800882a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d106      	bne.n	800881e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008810:	4b15      	ldr	r3, [pc, #84]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 8008812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008814:	4a14      	ldr	r2, [pc, #80]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 8008816:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800881a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800881c:	e005      	b.n	800882a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800881e:	4b12      	ldr	r3, [pc, #72]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 8008820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008822:	4a11      	ldr	r2, [pc, #68]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 8008824:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008828:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800882a:	4b0f      	ldr	r3, [pc, #60]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a0e      	ldr	r2, [pc, #56]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 8008830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008836:	f7fa fbc3 	bl	8002fc0 <HAL_GetTick>
 800883a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800883c:	e008      	b.n	8008850 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800883e:	f7fa fbbf 	bl	8002fc0 <HAL_GetTick>
 8008842:	4602      	mov	r2, r0
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	2b02      	cmp	r3, #2
 800884a:	d901      	bls.n	8008850 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	e006      	b.n	800885e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008850:	4b05      	ldr	r3, [pc, #20]	@ (8008868 <RCCEx_PLL3_Config+0x15c>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008858:	2b00      	cmp	r3, #0
 800885a:	d0f0      	beq.n	800883e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800885c:	7bfb      	ldrb	r3, [r7, #15]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	58024400 	.word	0x58024400
 800886c:	ffff0007 	.word	0xffff0007

08008870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d101      	bne.n	8008882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e049      	b.n	8008916 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d106      	bne.n	800889c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7f9 fd56 	bl	8002348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2202      	movs	r2, #2
 80088a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	3304      	adds	r3, #4
 80088ac:	4619      	mov	r1, r3
 80088ae:	4610      	mov	r0, r2
 80088b0:	f000 fdc0 	bl	8009434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
	...

08008920 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800892e:	b2db      	uxtb	r3, r3
 8008930:	2b01      	cmp	r3, #1
 8008932:	d001      	beq.n	8008938 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e04c      	b.n	80089d2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a26      	ldr	r2, [pc, #152]	@ (80089e0 <HAL_TIM_Base_Start+0xc0>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d022      	beq.n	8008990 <HAL_TIM_Base_Start+0x70>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008952:	d01d      	beq.n	8008990 <HAL_TIM_Base_Start+0x70>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a22      	ldr	r2, [pc, #136]	@ (80089e4 <HAL_TIM_Base_Start+0xc4>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d018      	beq.n	8008990 <HAL_TIM_Base_Start+0x70>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a21      	ldr	r2, [pc, #132]	@ (80089e8 <HAL_TIM_Base_Start+0xc8>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d013      	beq.n	8008990 <HAL_TIM_Base_Start+0x70>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a1f      	ldr	r2, [pc, #124]	@ (80089ec <HAL_TIM_Base_Start+0xcc>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d00e      	beq.n	8008990 <HAL_TIM_Base_Start+0x70>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a1e      	ldr	r2, [pc, #120]	@ (80089f0 <HAL_TIM_Base_Start+0xd0>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d009      	beq.n	8008990 <HAL_TIM_Base_Start+0x70>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a1c      	ldr	r2, [pc, #112]	@ (80089f4 <HAL_TIM_Base_Start+0xd4>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d004      	beq.n	8008990 <HAL_TIM_Base_Start+0x70>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a1b      	ldr	r2, [pc, #108]	@ (80089f8 <HAL_TIM_Base_Start+0xd8>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d115      	bne.n	80089bc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	689a      	ldr	r2, [r3, #8]
 8008996:	4b19      	ldr	r3, [pc, #100]	@ (80089fc <HAL_TIM_Base_Start+0xdc>)
 8008998:	4013      	ands	r3, r2
 800899a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2b06      	cmp	r3, #6
 80089a0:	d015      	beq.n	80089ce <HAL_TIM_Base_Start+0xae>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089a8:	d011      	beq.n	80089ce <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f042 0201 	orr.w	r2, r2, #1
 80089b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ba:	e008      	b.n	80089ce <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f042 0201 	orr.w	r2, r2, #1
 80089ca:	601a      	str	r2, [r3, #0]
 80089cc:	e000      	b.n	80089d0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3714      	adds	r7, #20
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	40010000 	.word	0x40010000
 80089e4:	40000400 	.word	0x40000400
 80089e8:	40000800 	.word	0x40000800
 80089ec:	40000c00 	.word	0x40000c00
 80089f0:	40010400 	.word	0x40010400
 80089f4:	40001800 	.word	0x40001800
 80089f8:	40014000 	.word	0x40014000
 80089fc:	00010007 	.word	0x00010007

08008a00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d001      	beq.n	8008a18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e054      	b.n	8008ac2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68da      	ldr	r2, [r3, #12]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f042 0201 	orr.w	r2, r2, #1
 8008a2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a26      	ldr	r2, [pc, #152]	@ (8008ad0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d022      	beq.n	8008a80 <HAL_TIM_Base_Start_IT+0x80>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a42:	d01d      	beq.n	8008a80 <HAL_TIM_Base_Start_IT+0x80>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a22      	ldr	r2, [pc, #136]	@ (8008ad4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d018      	beq.n	8008a80 <HAL_TIM_Base_Start_IT+0x80>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a21      	ldr	r2, [pc, #132]	@ (8008ad8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d013      	beq.n	8008a80 <HAL_TIM_Base_Start_IT+0x80>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8008adc <HAL_TIM_Base_Start_IT+0xdc>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d00e      	beq.n	8008a80 <HAL_TIM_Base_Start_IT+0x80>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a1e      	ldr	r2, [pc, #120]	@ (8008ae0 <HAL_TIM_Base_Start_IT+0xe0>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d009      	beq.n	8008a80 <HAL_TIM_Base_Start_IT+0x80>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a1c      	ldr	r2, [pc, #112]	@ (8008ae4 <HAL_TIM_Base_Start_IT+0xe4>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d004      	beq.n	8008a80 <HAL_TIM_Base_Start_IT+0x80>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8008ae8 <HAL_TIM_Base_Start_IT+0xe8>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d115      	bne.n	8008aac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	689a      	ldr	r2, [r3, #8]
 8008a86:	4b19      	ldr	r3, [pc, #100]	@ (8008aec <HAL_TIM_Base_Start_IT+0xec>)
 8008a88:	4013      	ands	r3, r2
 8008a8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2b06      	cmp	r3, #6
 8008a90:	d015      	beq.n	8008abe <HAL_TIM_Base_Start_IT+0xbe>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a98:	d011      	beq.n	8008abe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f042 0201 	orr.w	r2, r2, #1
 8008aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aaa:	e008      	b.n	8008abe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f042 0201 	orr.w	r2, r2, #1
 8008aba:	601a      	str	r2, [r3, #0]
 8008abc:	e000      	b.n	8008ac0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008abe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3714      	adds	r7, #20
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	40010000 	.word	0x40010000
 8008ad4:	40000400 	.word	0x40000400
 8008ad8:	40000800 	.word	0x40000800
 8008adc:	40000c00 	.word	0x40000c00
 8008ae0:	40010400 	.word	0x40010400
 8008ae4:	40001800 	.word	0x40001800
 8008ae8:	40014000 	.word	0x40014000
 8008aec:	00010007 	.word	0x00010007

08008af0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e049      	b.n	8008b96 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d106      	bne.n	8008b1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f7f9 fd18 	bl	800254c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	3304      	adds	r3, #4
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	4610      	mov	r0, r2
 8008b30:	f000 fc80 	bl	8009434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
	...

08008ba0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d109      	bne.n	8008bc4 <HAL_TIM_PWM_Start+0x24>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	bf14      	ite	ne
 8008bbc:	2301      	movne	r3, #1
 8008bbe:	2300      	moveq	r3, #0
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	e03c      	b.n	8008c3e <HAL_TIM_PWM_Start+0x9e>
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	2b04      	cmp	r3, #4
 8008bc8:	d109      	bne.n	8008bde <HAL_TIM_PWM_Start+0x3e>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	bf14      	ite	ne
 8008bd6:	2301      	movne	r3, #1
 8008bd8:	2300      	moveq	r3, #0
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	e02f      	b.n	8008c3e <HAL_TIM_PWM_Start+0x9e>
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	2b08      	cmp	r3, #8
 8008be2:	d109      	bne.n	8008bf8 <HAL_TIM_PWM_Start+0x58>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	bf14      	ite	ne
 8008bf0:	2301      	movne	r3, #1
 8008bf2:	2300      	moveq	r3, #0
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	e022      	b.n	8008c3e <HAL_TIM_PWM_Start+0x9e>
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	2b0c      	cmp	r3, #12
 8008bfc:	d109      	bne.n	8008c12 <HAL_TIM_PWM_Start+0x72>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	bf14      	ite	ne
 8008c0a:	2301      	movne	r3, #1
 8008c0c:	2300      	moveq	r3, #0
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	e015      	b.n	8008c3e <HAL_TIM_PWM_Start+0x9e>
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2b10      	cmp	r3, #16
 8008c16:	d109      	bne.n	8008c2c <HAL_TIM_PWM_Start+0x8c>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	bf14      	ite	ne
 8008c24:	2301      	movne	r3, #1
 8008c26:	2300      	moveq	r3, #0
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	e008      	b.n	8008c3e <HAL_TIM_PWM_Start+0x9e>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	bf14      	ite	ne
 8008c38:	2301      	movne	r3, #1
 8008c3a:	2300      	moveq	r3, #0
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e0a1      	b.n	8008d8a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d104      	bne.n	8008c56 <HAL_TIM_PWM_Start+0xb6>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2202      	movs	r2, #2
 8008c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c54:	e023      	b.n	8008c9e <HAL_TIM_PWM_Start+0xfe>
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	d104      	bne.n	8008c66 <HAL_TIM_PWM_Start+0xc6>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2202      	movs	r2, #2
 8008c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c64:	e01b      	b.n	8008c9e <HAL_TIM_PWM_Start+0xfe>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	2b08      	cmp	r3, #8
 8008c6a:	d104      	bne.n	8008c76 <HAL_TIM_PWM_Start+0xd6>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2202      	movs	r2, #2
 8008c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c74:	e013      	b.n	8008c9e <HAL_TIM_PWM_Start+0xfe>
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	2b0c      	cmp	r3, #12
 8008c7a:	d104      	bne.n	8008c86 <HAL_TIM_PWM_Start+0xe6>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c84:	e00b      	b.n	8008c9e <HAL_TIM_PWM_Start+0xfe>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b10      	cmp	r3, #16
 8008c8a:	d104      	bne.n	8008c96 <HAL_TIM_PWM_Start+0xf6>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2202      	movs	r2, #2
 8008c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c94:	e003      	b.n	8008c9e <HAL_TIM_PWM_Start+0xfe>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2202      	movs	r2, #2
 8008c9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	6839      	ldr	r1, [r7, #0]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f000 ffde 	bl	8009c68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a38      	ldr	r2, [pc, #224]	@ (8008d94 <HAL_TIM_PWM_Start+0x1f4>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d013      	beq.n	8008cde <HAL_TIM_PWM_Start+0x13e>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a37      	ldr	r2, [pc, #220]	@ (8008d98 <HAL_TIM_PWM_Start+0x1f8>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d00e      	beq.n	8008cde <HAL_TIM_PWM_Start+0x13e>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a35      	ldr	r2, [pc, #212]	@ (8008d9c <HAL_TIM_PWM_Start+0x1fc>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d009      	beq.n	8008cde <HAL_TIM_PWM_Start+0x13e>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a34      	ldr	r2, [pc, #208]	@ (8008da0 <HAL_TIM_PWM_Start+0x200>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d004      	beq.n	8008cde <HAL_TIM_PWM_Start+0x13e>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a32      	ldr	r2, [pc, #200]	@ (8008da4 <HAL_TIM_PWM_Start+0x204>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d101      	bne.n	8008ce2 <HAL_TIM_PWM_Start+0x142>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e000      	b.n	8008ce4 <HAL_TIM_PWM_Start+0x144>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d007      	beq.n	8008cf8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008cf6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a25      	ldr	r2, [pc, #148]	@ (8008d94 <HAL_TIM_PWM_Start+0x1f4>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d022      	beq.n	8008d48 <HAL_TIM_PWM_Start+0x1a8>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d0a:	d01d      	beq.n	8008d48 <HAL_TIM_PWM_Start+0x1a8>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a25      	ldr	r2, [pc, #148]	@ (8008da8 <HAL_TIM_PWM_Start+0x208>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d018      	beq.n	8008d48 <HAL_TIM_PWM_Start+0x1a8>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a24      	ldr	r2, [pc, #144]	@ (8008dac <HAL_TIM_PWM_Start+0x20c>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d013      	beq.n	8008d48 <HAL_TIM_PWM_Start+0x1a8>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a22      	ldr	r2, [pc, #136]	@ (8008db0 <HAL_TIM_PWM_Start+0x210>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d00e      	beq.n	8008d48 <HAL_TIM_PWM_Start+0x1a8>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8008d98 <HAL_TIM_PWM_Start+0x1f8>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d009      	beq.n	8008d48 <HAL_TIM_PWM_Start+0x1a8>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a1e      	ldr	r2, [pc, #120]	@ (8008db4 <HAL_TIM_PWM_Start+0x214>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d004      	beq.n	8008d48 <HAL_TIM_PWM_Start+0x1a8>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a16      	ldr	r2, [pc, #88]	@ (8008d9c <HAL_TIM_PWM_Start+0x1fc>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d115      	bne.n	8008d74 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	689a      	ldr	r2, [r3, #8]
 8008d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8008db8 <HAL_TIM_PWM_Start+0x218>)
 8008d50:	4013      	ands	r3, r2
 8008d52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2b06      	cmp	r3, #6
 8008d58:	d015      	beq.n	8008d86 <HAL_TIM_PWM_Start+0x1e6>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d60:	d011      	beq.n	8008d86 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f042 0201 	orr.w	r2, r2, #1
 8008d70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d72:	e008      	b.n	8008d86 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f042 0201 	orr.w	r2, r2, #1
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	e000      	b.n	8008d88 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	40010000 	.word	0x40010000
 8008d98:	40010400 	.word	0x40010400
 8008d9c:	40014000 	.word	0x40014000
 8008da0:	40014400 	.word	0x40014400
 8008da4:	40014800 	.word	0x40014800
 8008da8:	40000400 	.word	0x40000400
 8008dac:	40000800 	.word	0x40000800
 8008db0:	40000c00 	.word	0x40000c00
 8008db4:	40001800 	.word	0x40001800
 8008db8:	00010007 	.word	0x00010007

08008dbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	f003 0302 	and.w	r3, r3, #2
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d020      	beq.n	8008e20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f003 0302 	and.w	r3, r3, #2
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d01b      	beq.n	8008e20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f06f 0202 	mvn.w	r2, #2
 8008df0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2201      	movs	r2, #1
 8008df6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	f003 0303 	and.w	r3, r3, #3
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d003      	beq.n	8008e0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 faf6 	bl	80093f8 <HAL_TIM_IC_CaptureCallback>
 8008e0c:	e005      	b.n	8008e1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fae8 	bl	80093e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 faf9 	bl	800940c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	f003 0304 	and.w	r3, r3, #4
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d020      	beq.n	8008e6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f003 0304 	and.w	r3, r3, #4
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d01b      	beq.n	8008e6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f06f 0204 	mvn.w	r2, #4
 8008e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2202      	movs	r2, #2
 8008e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	699b      	ldr	r3, [r3, #24]
 8008e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d003      	beq.n	8008e5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fad0 	bl	80093f8 <HAL_TIM_IC_CaptureCallback>
 8008e58:	e005      	b.n	8008e66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fac2 	bl	80093e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fad3 	bl	800940c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	f003 0308 	and.w	r3, r3, #8
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d020      	beq.n	8008eb8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f003 0308 	and.w	r3, r3, #8
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d01b      	beq.n	8008eb8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f06f 0208 	mvn.w	r2, #8
 8008e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2204      	movs	r2, #4
 8008e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	69db      	ldr	r3, [r3, #28]
 8008e96:	f003 0303 	and.w	r3, r3, #3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d003      	beq.n	8008ea6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 faaa 	bl	80093f8 <HAL_TIM_IC_CaptureCallback>
 8008ea4:	e005      	b.n	8008eb2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fa9c 	bl	80093e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 faad 	bl	800940c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	f003 0310 	and.w	r3, r3, #16
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d020      	beq.n	8008f04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f003 0310 	and.w	r3, r3, #16
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d01b      	beq.n	8008f04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f06f 0210 	mvn.w	r2, #16
 8008ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2208      	movs	r2, #8
 8008eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	69db      	ldr	r3, [r3, #28]
 8008ee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d003      	beq.n	8008ef2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fa84 	bl	80093f8 <HAL_TIM_IC_CaptureCallback>
 8008ef0:	e005      	b.n	8008efe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 fa76 	bl	80093e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fa87 	bl	800940c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	f003 0301 	and.w	r3, r3, #1
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00c      	beq.n	8008f28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f003 0301 	and.w	r3, r3, #1
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d007      	beq.n	8008f28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f06f 0201 	mvn.w	r2, #1
 8008f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f7f8 fe34 	bl	8001b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d104      	bne.n	8008f3c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00c      	beq.n	8008f56 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d007      	beq.n	8008f56 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 ffc5 	bl	8009ee0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00c      	beq.n	8008f7a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d007      	beq.n	8008f7a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 ffbd 	bl	8009ef4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00c      	beq.n	8008f9e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d007      	beq.n	8008f9e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 fa41 	bl	8009420 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	f003 0320 	and.w	r3, r3, #32
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00c      	beq.n	8008fc2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f003 0320 	and.w	r3, r3, #32
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d007      	beq.n	8008fc2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f06f 0220 	mvn.w	r2, #32
 8008fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 ff85 	bl	8009ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fc2:	bf00      	nop
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
	...

08008fcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b086      	sub	sp, #24
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d101      	bne.n	8008fea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008fe6:	2302      	movs	r3, #2
 8008fe8:	e0ff      	b.n	80091ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2201      	movs	r2, #1
 8008fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2b14      	cmp	r3, #20
 8008ff6:	f200 80f0 	bhi.w	80091da <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8009000 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009000:	08009055 	.word	0x08009055
 8009004:	080091db 	.word	0x080091db
 8009008:	080091db 	.word	0x080091db
 800900c:	080091db 	.word	0x080091db
 8009010:	08009095 	.word	0x08009095
 8009014:	080091db 	.word	0x080091db
 8009018:	080091db 	.word	0x080091db
 800901c:	080091db 	.word	0x080091db
 8009020:	080090d7 	.word	0x080090d7
 8009024:	080091db 	.word	0x080091db
 8009028:	080091db 	.word	0x080091db
 800902c:	080091db 	.word	0x080091db
 8009030:	08009117 	.word	0x08009117
 8009034:	080091db 	.word	0x080091db
 8009038:	080091db 	.word	0x080091db
 800903c:	080091db 	.word	0x080091db
 8009040:	08009159 	.word	0x08009159
 8009044:	080091db 	.word	0x080091db
 8009048:	080091db 	.word	0x080091db
 800904c:	080091db 	.word	0x080091db
 8009050:	08009199 	.word	0x08009199
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	68b9      	ldr	r1, [r7, #8]
 800905a:	4618      	mov	r0, r3
 800905c:	f000 fa90 	bl	8009580 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	699a      	ldr	r2, [r3, #24]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f042 0208 	orr.w	r2, r2, #8
 800906e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	699a      	ldr	r2, [r3, #24]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f022 0204 	bic.w	r2, r2, #4
 800907e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6999      	ldr	r1, [r3, #24]
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	691a      	ldr	r2, [r3, #16]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	430a      	orrs	r2, r1
 8009090:	619a      	str	r2, [r3, #24]
      break;
 8009092:	e0a5      	b.n	80091e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68b9      	ldr	r1, [r7, #8]
 800909a:	4618      	mov	r0, r3
 800909c:	f000 fb00 	bl	80096a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	699a      	ldr	r2, [r3, #24]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	699a      	ldr	r2, [r3, #24]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6999      	ldr	r1, [r3, #24]
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	021a      	lsls	r2, r3, #8
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	430a      	orrs	r2, r1
 80090d2:	619a      	str	r2, [r3, #24]
      break;
 80090d4:	e084      	b.n	80091e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68b9      	ldr	r1, [r7, #8]
 80090dc:	4618      	mov	r0, r3
 80090de:	f000 fb69 	bl	80097b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	69da      	ldr	r2, [r3, #28]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f042 0208 	orr.w	r2, r2, #8
 80090f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	69da      	ldr	r2, [r3, #28]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f022 0204 	bic.w	r2, r2, #4
 8009100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	69d9      	ldr	r1, [r3, #28]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	691a      	ldr	r2, [r3, #16]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	430a      	orrs	r2, r1
 8009112:	61da      	str	r2, [r3, #28]
      break;
 8009114:	e064      	b.n	80091e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68b9      	ldr	r1, [r7, #8]
 800911c:	4618      	mov	r0, r3
 800911e:	f000 fbd1 	bl	80098c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	69da      	ldr	r2, [r3, #28]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009130:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	69da      	ldr	r2, [r3, #28]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009140:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	69d9      	ldr	r1, [r3, #28]
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	021a      	lsls	r2, r3, #8
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	430a      	orrs	r2, r1
 8009154:	61da      	str	r2, [r3, #28]
      break;
 8009156:	e043      	b.n	80091e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68b9      	ldr	r1, [r7, #8]
 800915e:	4618      	mov	r0, r3
 8009160:	f000 fc1a 	bl	8009998 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f042 0208 	orr.w	r2, r2, #8
 8009172:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f022 0204 	bic.w	r2, r2, #4
 8009182:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	691a      	ldr	r2, [r3, #16]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	430a      	orrs	r2, r1
 8009194:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009196:	e023      	b.n	80091e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68b9      	ldr	r1, [r7, #8]
 800919e:	4618      	mov	r0, r3
 80091a0:	f000 fc5e 	bl	8009a60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80091b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	021a      	lsls	r2, r3, #8
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	430a      	orrs	r2, r1
 80091d6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80091d8:	e002      	b.n	80091e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	75fb      	strb	r3, [r7, #23]
      break;
 80091de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80091e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3718      	adds	r7, #24
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop

080091f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009208:	2b01      	cmp	r3, #1
 800920a:	d101      	bne.n	8009210 <HAL_TIM_ConfigClockSource+0x1c>
 800920c:	2302      	movs	r3, #2
 800920e:	e0dc      	b.n	80093ca <HAL_TIM_ConfigClockSource+0x1d6>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2202      	movs	r2, #2
 800921c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009228:	68ba      	ldr	r2, [r7, #8]
 800922a:	4b6a      	ldr	r3, [pc, #424]	@ (80093d4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800922c:	4013      	ands	r3, r2
 800922e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68ba      	ldr	r2, [r7, #8]
 800923e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a64      	ldr	r2, [pc, #400]	@ (80093d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009246:	4293      	cmp	r3, r2
 8009248:	f000 80a9 	beq.w	800939e <HAL_TIM_ConfigClockSource+0x1aa>
 800924c:	4a62      	ldr	r2, [pc, #392]	@ (80093d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800924e:	4293      	cmp	r3, r2
 8009250:	f200 80ae 	bhi.w	80093b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009254:	4a61      	ldr	r2, [pc, #388]	@ (80093dc <HAL_TIM_ConfigClockSource+0x1e8>)
 8009256:	4293      	cmp	r3, r2
 8009258:	f000 80a1 	beq.w	800939e <HAL_TIM_ConfigClockSource+0x1aa>
 800925c:	4a5f      	ldr	r2, [pc, #380]	@ (80093dc <HAL_TIM_ConfigClockSource+0x1e8>)
 800925e:	4293      	cmp	r3, r2
 8009260:	f200 80a6 	bhi.w	80093b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009264:	4a5e      	ldr	r2, [pc, #376]	@ (80093e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009266:	4293      	cmp	r3, r2
 8009268:	f000 8099 	beq.w	800939e <HAL_TIM_ConfigClockSource+0x1aa>
 800926c:	4a5c      	ldr	r2, [pc, #368]	@ (80093e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800926e:	4293      	cmp	r3, r2
 8009270:	f200 809e 	bhi.w	80093b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009274:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009278:	f000 8091 	beq.w	800939e <HAL_TIM_ConfigClockSource+0x1aa>
 800927c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009280:	f200 8096 	bhi.w	80093b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009284:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009288:	f000 8089 	beq.w	800939e <HAL_TIM_ConfigClockSource+0x1aa>
 800928c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009290:	f200 808e 	bhi.w	80093b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009294:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009298:	d03e      	beq.n	8009318 <HAL_TIM_ConfigClockSource+0x124>
 800929a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800929e:	f200 8087 	bhi.w	80093b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80092a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092a6:	f000 8086 	beq.w	80093b6 <HAL_TIM_ConfigClockSource+0x1c2>
 80092aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092ae:	d87f      	bhi.n	80093b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80092b0:	2b70      	cmp	r3, #112	@ 0x70
 80092b2:	d01a      	beq.n	80092ea <HAL_TIM_ConfigClockSource+0xf6>
 80092b4:	2b70      	cmp	r3, #112	@ 0x70
 80092b6:	d87b      	bhi.n	80093b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80092b8:	2b60      	cmp	r3, #96	@ 0x60
 80092ba:	d050      	beq.n	800935e <HAL_TIM_ConfigClockSource+0x16a>
 80092bc:	2b60      	cmp	r3, #96	@ 0x60
 80092be:	d877      	bhi.n	80093b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80092c0:	2b50      	cmp	r3, #80	@ 0x50
 80092c2:	d03c      	beq.n	800933e <HAL_TIM_ConfigClockSource+0x14a>
 80092c4:	2b50      	cmp	r3, #80	@ 0x50
 80092c6:	d873      	bhi.n	80093b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80092c8:	2b40      	cmp	r3, #64	@ 0x40
 80092ca:	d058      	beq.n	800937e <HAL_TIM_ConfigClockSource+0x18a>
 80092cc:	2b40      	cmp	r3, #64	@ 0x40
 80092ce:	d86f      	bhi.n	80093b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80092d0:	2b30      	cmp	r3, #48	@ 0x30
 80092d2:	d064      	beq.n	800939e <HAL_TIM_ConfigClockSource+0x1aa>
 80092d4:	2b30      	cmp	r3, #48	@ 0x30
 80092d6:	d86b      	bhi.n	80093b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80092d8:	2b20      	cmp	r3, #32
 80092da:	d060      	beq.n	800939e <HAL_TIM_ConfigClockSource+0x1aa>
 80092dc:	2b20      	cmp	r3, #32
 80092de:	d867      	bhi.n	80093b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d05c      	beq.n	800939e <HAL_TIM_ConfigClockSource+0x1aa>
 80092e4:	2b10      	cmp	r3, #16
 80092e6:	d05a      	beq.n	800939e <HAL_TIM_ConfigClockSource+0x1aa>
 80092e8:	e062      	b.n	80093b0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80092fa:	f000 fc95 	bl	8009c28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800930c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	609a      	str	r2, [r3, #8]
      break;
 8009316:	e04f      	b.n	80093b8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009328:	f000 fc7e 	bl	8009c28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	689a      	ldr	r2, [r3, #8]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800933a:	609a      	str	r2, [r3, #8]
      break;
 800933c:	e03c      	b.n	80093b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800934a:	461a      	mov	r2, r3
 800934c:	f000 fbee 	bl	8009b2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2150      	movs	r1, #80	@ 0x50
 8009356:	4618      	mov	r0, r3
 8009358:	f000 fc48 	bl	8009bec <TIM_ITRx_SetConfig>
      break;
 800935c:	e02c      	b.n	80093b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800936a:	461a      	mov	r2, r3
 800936c:	f000 fc0d 	bl	8009b8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2160      	movs	r1, #96	@ 0x60
 8009376:	4618      	mov	r0, r3
 8009378:	f000 fc38 	bl	8009bec <TIM_ITRx_SetConfig>
      break;
 800937c:	e01c      	b.n	80093b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800938a:	461a      	mov	r2, r3
 800938c:	f000 fbce 	bl	8009b2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2140      	movs	r1, #64	@ 0x40
 8009396:	4618      	mov	r0, r3
 8009398:	f000 fc28 	bl	8009bec <TIM_ITRx_SetConfig>
      break;
 800939c:	e00c      	b.n	80093b8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4619      	mov	r1, r3
 80093a8:	4610      	mov	r0, r2
 80093aa:	f000 fc1f 	bl	8009bec <TIM_ITRx_SetConfig>
      break;
 80093ae:	e003      	b.n	80093b8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	73fb      	strb	r3, [r7, #15]
      break;
 80093b4:	e000      	b.n	80093b8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80093b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80093c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	ffceff88 	.word	0xffceff88
 80093d8:	00100040 	.word	0x00100040
 80093dc:	00100030 	.word	0x00100030
 80093e0:	00100020 	.word	0x00100020

080093e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093ec:	bf00      	nop
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a46      	ldr	r2, [pc, #280]	@ (8009560 <TIM_Base_SetConfig+0x12c>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d013      	beq.n	8009474 <TIM_Base_SetConfig+0x40>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009452:	d00f      	beq.n	8009474 <TIM_Base_SetConfig+0x40>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a43      	ldr	r2, [pc, #268]	@ (8009564 <TIM_Base_SetConfig+0x130>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d00b      	beq.n	8009474 <TIM_Base_SetConfig+0x40>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4a42      	ldr	r2, [pc, #264]	@ (8009568 <TIM_Base_SetConfig+0x134>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d007      	beq.n	8009474 <TIM_Base_SetConfig+0x40>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a41      	ldr	r2, [pc, #260]	@ (800956c <TIM_Base_SetConfig+0x138>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d003      	beq.n	8009474 <TIM_Base_SetConfig+0x40>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a40      	ldr	r2, [pc, #256]	@ (8009570 <TIM_Base_SetConfig+0x13c>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d108      	bne.n	8009486 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800947a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	4313      	orrs	r3, r2
 8009484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a35      	ldr	r2, [pc, #212]	@ (8009560 <TIM_Base_SetConfig+0x12c>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d01f      	beq.n	80094ce <TIM_Base_SetConfig+0x9a>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009494:	d01b      	beq.n	80094ce <TIM_Base_SetConfig+0x9a>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4a32      	ldr	r2, [pc, #200]	@ (8009564 <TIM_Base_SetConfig+0x130>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d017      	beq.n	80094ce <TIM_Base_SetConfig+0x9a>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a31      	ldr	r2, [pc, #196]	@ (8009568 <TIM_Base_SetConfig+0x134>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d013      	beq.n	80094ce <TIM_Base_SetConfig+0x9a>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4a30      	ldr	r2, [pc, #192]	@ (800956c <TIM_Base_SetConfig+0x138>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d00f      	beq.n	80094ce <TIM_Base_SetConfig+0x9a>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a2f      	ldr	r2, [pc, #188]	@ (8009570 <TIM_Base_SetConfig+0x13c>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d00b      	beq.n	80094ce <TIM_Base_SetConfig+0x9a>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a2e      	ldr	r2, [pc, #184]	@ (8009574 <TIM_Base_SetConfig+0x140>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d007      	beq.n	80094ce <TIM_Base_SetConfig+0x9a>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a2d      	ldr	r2, [pc, #180]	@ (8009578 <TIM_Base_SetConfig+0x144>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d003      	beq.n	80094ce <TIM_Base_SetConfig+0x9a>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a2c      	ldr	r2, [pc, #176]	@ (800957c <TIM_Base_SetConfig+0x148>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d108      	bne.n	80094e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	4313      	orrs	r3, r2
 80094de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	695b      	ldr	r3, [r3, #20]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	689a      	ldr	r2, [r3, #8]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a16      	ldr	r2, [pc, #88]	@ (8009560 <TIM_Base_SetConfig+0x12c>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d00f      	beq.n	800952c <TIM_Base_SetConfig+0xf8>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a18      	ldr	r2, [pc, #96]	@ (8009570 <TIM_Base_SetConfig+0x13c>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d00b      	beq.n	800952c <TIM_Base_SetConfig+0xf8>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a17      	ldr	r2, [pc, #92]	@ (8009574 <TIM_Base_SetConfig+0x140>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d007      	beq.n	800952c <TIM_Base_SetConfig+0xf8>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a16      	ldr	r2, [pc, #88]	@ (8009578 <TIM_Base_SetConfig+0x144>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d003      	beq.n	800952c <TIM_Base_SetConfig+0xf8>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a15      	ldr	r2, [pc, #84]	@ (800957c <TIM_Base_SetConfig+0x148>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d103      	bne.n	8009534 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	691a      	ldr	r2, [r3, #16]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	f003 0301 	and.w	r3, r3, #1
 8009542:	2b01      	cmp	r3, #1
 8009544:	d105      	bne.n	8009552 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	f023 0201 	bic.w	r2, r3, #1
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	611a      	str	r2, [r3, #16]
  }
}
 8009552:	bf00      	nop
 8009554:	3714      	adds	r7, #20
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	40010000 	.word	0x40010000
 8009564:	40000400 	.word	0x40000400
 8009568:	40000800 	.word	0x40000800
 800956c:	40000c00 	.word	0x40000c00
 8009570:	40010400 	.word	0x40010400
 8009574:	40014000 	.word	0x40014000
 8009578:	40014400 	.word	0x40014400
 800957c:	40014800 	.word	0x40014800

08009580 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009580:	b480      	push	{r7}
 8009582:	b087      	sub	sp, #28
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a1b      	ldr	r3, [r3, #32]
 800958e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6a1b      	ldr	r3, [r3, #32]
 8009594:	f023 0201 	bic.w	r2, r3, #1
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	4b37      	ldr	r3, [pc, #220]	@ (8009688 <TIM_OC1_SetConfig+0x108>)
 80095ac:	4013      	ands	r3, r2
 80095ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f023 0303 	bic.w	r3, r3, #3
 80095b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	4313      	orrs	r3, r2
 80095c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	f023 0302 	bic.w	r3, r3, #2
 80095c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	697a      	ldr	r2, [r7, #20]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a2d      	ldr	r2, [pc, #180]	@ (800968c <TIM_OC1_SetConfig+0x10c>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d00f      	beq.n	80095fc <TIM_OC1_SetConfig+0x7c>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a2c      	ldr	r2, [pc, #176]	@ (8009690 <TIM_OC1_SetConfig+0x110>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d00b      	beq.n	80095fc <TIM_OC1_SetConfig+0x7c>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	4a2b      	ldr	r2, [pc, #172]	@ (8009694 <TIM_OC1_SetConfig+0x114>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d007      	beq.n	80095fc <TIM_OC1_SetConfig+0x7c>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a2a      	ldr	r2, [pc, #168]	@ (8009698 <TIM_OC1_SetConfig+0x118>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d003      	beq.n	80095fc <TIM_OC1_SetConfig+0x7c>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a29      	ldr	r2, [pc, #164]	@ (800969c <TIM_OC1_SetConfig+0x11c>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d10c      	bne.n	8009616 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	f023 0308 	bic.w	r3, r3, #8
 8009602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	697a      	ldr	r2, [r7, #20]
 800960a:	4313      	orrs	r3, r2
 800960c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	f023 0304 	bic.w	r3, r3, #4
 8009614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a1c      	ldr	r2, [pc, #112]	@ (800968c <TIM_OC1_SetConfig+0x10c>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d00f      	beq.n	800963e <TIM_OC1_SetConfig+0xbe>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a1b      	ldr	r2, [pc, #108]	@ (8009690 <TIM_OC1_SetConfig+0x110>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d00b      	beq.n	800963e <TIM_OC1_SetConfig+0xbe>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a1a      	ldr	r2, [pc, #104]	@ (8009694 <TIM_OC1_SetConfig+0x114>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d007      	beq.n	800963e <TIM_OC1_SetConfig+0xbe>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a19      	ldr	r2, [pc, #100]	@ (8009698 <TIM_OC1_SetConfig+0x118>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d003      	beq.n	800963e <TIM_OC1_SetConfig+0xbe>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a18      	ldr	r2, [pc, #96]	@ (800969c <TIM_OC1_SetConfig+0x11c>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d111      	bne.n	8009662 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800964c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	695b      	ldr	r3, [r3, #20]
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	4313      	orrs	r3, r2
 8009656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	699b      	ldr	r3, [r3, #24]
 800965c:	693a      	ldr	r2, [r7, #16]
 800965e:	4313      	orrs	r3, r2
 8009660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	68fa      	ldr	r2, [r7, #12]
 800966c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	685a      	ldr	r2, [r3, #4]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	697a      	ldr	r2, [r7, #20]
 800967a:	621a      	str	r2, [r3, #32]
}
 800967c:	bf00      	nop
 800967e:	371c      	adds	r7, #28
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	fffeff8f 	.word	0xfffeff8f
 800968c:	40010000 	.word	0x40010000
 8009690:	40010400 	.word	0x40010400
 8009694:	40014000 	.word	0x40014000
 8009698:	40014400 	.word	0x40014400
 800969c:	40014800 	.word	0x40014800

080096a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b087      	sub	sp, #28
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a1b      	ldr	r3, [r3, #32]
 80096ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a1b      	ldr	r3, [r3, #32]
 80096b4:	f023 0210 	bic.w	r2, r3, #16
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	4b34      	ldr	r3, [pc, #208]	@ (800979c <TIM_OC2_SetConfig+0xfc>)
 80096cc:	4013      	ands	r3, r2
 80096ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	021b      	lsls	r3, r3, #8
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	f023 0320 	bic.w	r3, r3, #32
 80096ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	011b      	lsls	r3, r3, #4
 80096f2:	697a      	ldr	r2, [r7, #20]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a29      	ldr	r2, [pc, #164]	@ (80097a0 <TIM_OC2_SetConfig+0x100>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d003      	beq.n	8009708 <TIM_OC2_SetConfig+0x68>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4a28      	ldr	r2, [pc, #160]	@ (80097a4 <TIM_OC2_SetConfig+0x104>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d10d      	bne.n	8009724 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800970e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	011b      	lsls	r3, r3, #4
 8009716:	697a      	ldr	r2, [r7, #20]
 8009718:	4313      	orrs	r3, r2
 800971a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009722:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4a1e      	ldr	r2, [pc, #120]	@ (80097a0 <TIM_OC2_SetConfig+0x100>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d00f      	beq.n	800974c <TIM_OC2_SetConfig+0xac>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4a1d      	ldr	r2, [pc, #116]	@ (80097a4 <TIM_OC2_SetConfig+0x104>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d00b      	beq.n	800974c <TIM_OC2_SetConfig+0xac>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a1c      	ldr	r2, [pc, #112]	@ (80097a8 <TIM_OC2_SetConfig+0x108>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d007      	beq.n	800974c <TIM_OC2_SetConfig+0xac>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a1b      	ldr	r2, [pc, #108]	@ (80097ac <TIM_OC2_SetConfig+0x10c>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d003      	beq.n	800974c <TIM_OC2_SetConfig+0xac>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a1a      	ldr	r2, [pc, #104]	@ (80097b0 <TIM_OC2_SetConfig+0x110>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d113      	bne.n	8009774 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009752:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800975a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	695b      	ldr	r3, [r3, #20]
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	693a      	ldr	r2, [r7, #16]
 8009764:	4313      	orrs	r3, r2
 8009766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	693a      	ldr	r2, [r7, #16]
 8009770:	4313      	orrs	r3, r2
 8009772:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	621a      	str	r2, [r3, #32]
}
 800978e:	bf00      	nop
 8009790:	371c      	adds	r7, #28
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	feff8fff 	.word	0xfeff8fff
 80097a0:	40010000 	.word	0x40010000
 80097a4:	40010400 	.word	0x40010400
 80097a8:	40014000 	.word	0x40014000
 80097ac:	40014400 	.word	0x40014400
 80097b0:	40014800 	.word	0x40014800

080097b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b087      	sub	sp, #28
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a1b      	ldr	r3, [r3, #32]
 80097c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6a1b      	ldr	r3, [r3, #32]
 80097c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	69db      	ldr	r3, [r3, #28]
 80097da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	4b33      	ldr	r3, [pc, #204]	@ (80098ac <TIM_OC3_SetConfig+0xf8>)
 80097e0:	4013      	ands	r3, r2
 80097e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f023 0303 	bic.w	r3, r3, #3
 80097ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80097fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	021b      	lsls	r3, r3, #8
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	4313      	orrs	r3, r2
 8009808:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a28      	ldr	r2, [pc, #160]	@ (80098b0 <TIM_OC3_SetConfig+0xfc>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d003      	beq.n	800981a <TIM_OC3_SetConfig+0x66>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a27      	ldr	r2, [pc, #156]	@ (80098b4 <TIM_OC3_SetConfig+0x100>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d10d      	bne.n	8009836 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009820:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	021b      	lsls	r3, r3, #8
 8009828:	697a      	ldr	r2, [r7, #20]
 800982a:	4313      	orrs	r3, r2
 800982c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a1d      	ldr	r2, [pc, #116]	@ (80098b0 <TIM_OC3_SetConfig+0xfc>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d00f      	beq.n	800985e <TIM_OC3_SetConfig+0xaa>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a1c      	ldr	r2, [pc, #112]	@ (80098b4 <TIM_OC3_SetConfig+0x100>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d00b      	beq.n	800985e <TIM_OC3_SetConfig+0xaa>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a1b      	ldr	r2, [pc, #108]	@ (80098b8 <TIM_OC3_SetConfig+0x104>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d007      	beq.n	800985e <TIM_OC3_SetConfig+0xaa>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a1a      	ldr	r2, [pc, #104]	@ (80098bc <TIM_OC3_SetConfig+0x108>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d003      	beq.n	800985e <TIM_OC3_SetConfig+0xaa>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a19      	ldr	r2, [pc, #100]	@ (80098c0 <TIM_OC3_SetConfig+0x10c>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d113      	bne.n	8009886 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800986c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	695b      	ldr	r3, [r3, #20]
 8009872:	011b      	lsls	r3, r3, #4
 8009874:	693a      	ldr	r2, [r7, #16]
 8009876:	4313      	orrs	r3, r2
 8009878:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	011b      	lsls	r3, r3, #4
 8009880:	693a      	ldr	r2, [r7, #16]
 8009882:	4313      	orrs	r3, r2
 8009884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	693a      	ldr	r2, [r7, #16]
 800988a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	685a      	ldr	r2, [r3, #4]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	697a      	ldr	r2, [r7, #20]
 800989e:	621a      	str	r2, [r3, #32]
}
 80098a0:	bf00      	nop
 80098a2:	371c      	adds	r7, #28
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	fffeff8f 	.word	0xfffeff8f
 80098b0:	40010000 	.word	0x40010000
 80098b4:	40010400 	.word	0x40010400
 80098b8:	40014000 	.word	0x40014000
 80098bc:	40014400 	.word	0x40014400
 80098c0:	40014800 	.word	0x40014800

080098c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b087      	sub	sp, #28
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6a1b      	ldr	r3, [r3, #32]
 80098d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6a1b      	ldr	r3, [r3, #32]
 80098d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	69db      	ldr	r3, [r3, #28]
 80098ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	4b24      	ldr	r3, [pc, #144]	@ (8009980 <TIM_OC4_SetConfig+0xbc>)
 80098f0:	4013      	ands	r3, r2
 80098f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	021b      	lsls	r3, r3, #8
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	4313      	orrs	r3, r2
 8009906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800990e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	031b      	lsls	r3, r3, #12
 8009916:	693a      	ldr	r2, [r7, #16]
 8009918:	4313      	orrs	r3, r2
 800991a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a19      	ldr	r2, [pc, #100]	@ (8009984 <TIM_OC4_SetConfig+0xc0>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d00f      	beq.n	8009944 <TIM_OC4_SetConfig+0x80>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a18      	ldr	r2, [pc, #96]	@ (8009988 <TIM_OC4_SetConfig+0xc4>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d00b      	beq.n	8009944 <TIM_OC4_SetConfig+0x80>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a17      	ldr	r2, [pc, #92]	@ (800998c <TIM_OC4_SetConfig+0xc8>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d007      	beq.n	8009944 <TIM_OC4_SetConfig+0x80>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a16      	ldr	r2, [pc, #88]	@ (8009990 <TIM_OC4_SetConfig+0xcc>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d003      	beq.n	8009944 <TIM_OC4_SetConfig+0x80>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a15      	ldr	r2, [pc, #84]	@ (8009994 <TIM_OC4_SetConfig+0xd0>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d109      	bne.n	8009958 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800994a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	695b      	ldr	r3, [r3, #20]
 8009950:	019b      	lsls	r3, r3, #6
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	4313      	orrs	r3, r2
 8009956:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	697a      	ldr	r2, [r7, #20]
 800995c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	685a      	ldr	r2, [r3, #4]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	693a      	ldr	r2, [r7, #16]
 8009970:	621a      	str	r2, [r3, #32]
}
 8009972:	bf00      	nop
 8009974:	371c      	adds	r7, #28
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	feff8fff 	.word	0xfeff8fff
 8009984:	40010000 	.word	0x40010000
 8009988:	40010400 	.word	0x40010400
 800998c:	40014000 	.word	0x40014000
 8009990:	40014400 	.word	0x40014400
 8009994:	40014800 	.word	0x40014800

08009998 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009998:	b480      	push	{r7}
 800999a:	b087      	sub	sp, #28
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a1b      	ldr	r3, [r3, #32]
 80099a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6a1b      	ldr	r3, [r3, #32]
 80099ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	4b21      	ldr	r3, [pc, #132]	@ (8009a48 <TIM_OC5_SetConfig+0xb0>)
 80099c4:	4013      	ands	r3, r2
 80099c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80099d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	041b      	lsls	r3, r3, #16
 80099e0:	693a      	ldr	r2, [r7, #16]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4a18      	ldr	r2, [pc, #96]	@ (8009a4c <TIM_OC5_SetConfig+0xb4>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d00f      	beq.n	8009a0e <TIM_OC5_SetConfig+0x76>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4a17      	ldr	r2, [pc, #92]	@ (8009a50 <TIM_OC5_SetConfig+0xb8>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d00b      	beq.n	8009a0e <TIM_OC5_SetConfig+0x76>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4a16      	ldr	r2, [pc, #88]	@ (8009a54 <TIM_OC5_SetConfig+0xbc>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d007      	beq.n	8009a0e <TIM_OC5_SetConfig+0x76>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4a15      	ldr	r2, [pc, #84]	@ (8009a58 <TIM_OC5_SetConfig+0xc0>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d003      	beq.n	8009a0e <TIM_OC5_SetConfig+0x76>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4a14      	ldr	r2, [pc, #80]	@ (8009a5c <TIM_OC5_SetConfig+0xc4>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d109      	bne.n	8009a22 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	695b      	ldr	r3, [r3, #20]
 8009a1a:	021b      	lsls	r3, r3, #8
 8009a1c:	697a      	ldr	r2, [r7, #20]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	697a      	ldr	r2, [r7, #20]
 8009a26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	685a      	ldr	r2, [r3, #4]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	693a      	ldr	r2, [r7, #16]
 8009a3a:	621a      	str	r2, [r3, #32]
}
 8009a3c:	bf00      	nop
 8009a3e:	371c      	adds	r7, #28
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr
 8009a48:	fffeff8f 	.word	0xfffeff8f
 8009a4c:	40010000 	.word	0x40010000
 8009a50:	40010400 	.word	0x40010400
 8009a54:	40014000 	.word	0x40014000
 8009a58:	40014400 	.word	0x40014400
 8009a5c:	40014800 	.word	0x40014800

08009a60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b087      	sub	sp, #28
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a1b      	ldr	r3, [r3, #32]
 8009a6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6a1b      	ldr	r3, [r3, #32]
 8009a74:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009a88:	68fa      	ldr	r2, [r7, #12]
 8009a8a:	4b22      	ldr	r3, [pc, #136]	@ (8009b14 <TIM_OC6_SetConfig+0xb4>)
 8009a8c:	4013      	ands	r3, r2
 8009a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	021b      	lsls	r3, r3, #8
 8009a96:	68fa      	ldr	r2, [r7, #12]
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009aa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	051b      	lsls	r3, r3, #20
 8009aaa:	693a      	ldr	r2, [r7, #16]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4a19      	ldr	r2, [pc, #100]	@ (8009b18 <TIM_OC6_SetConfig+0xb8>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d00f      	beq.n	8009ad8 <TIM_OC6_SetConfig+0x78>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a18      	ldr	r2, [pc, #96]	@ (8009b1c <TIM_OC6_SetConfig+0xbc>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d00b      	beq.n	8009ad8 <TIM_OC6_SetConfig+0x78>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a17      	ldr	r2, [pc, #92]	@ (8009b20 <TIM_OC6_SetConfig+0xc0>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d007      	beq.n	8009ad8 <TIM_OC6_SetConfig+0x78>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a16      	ldr	r2, [pc, #88]	@ (8009b24 <TIM_OC6_SetConfig+0xc4>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d003      	beq.n	8009ad8 <TIM_OC6_SetConfig+0x78>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4a15      	ldr	r2, [pc, #84]	@ (8009b28 <TIM_OC6_SetConfig+0xc8>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d109      	bne.n	8009aec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009ade:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	695b      	ldr	r3, [r3, #20]
 8009ae4:	029b      	lsls	r3, r3, #10
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	697a      	ldr	r2, [r7, #20]
 8009af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	693a      	ldr	r2, [r7, #16]
 8009b04:	621a      	str	r2, [r3, #32]
}
 8009b06:	bf00      	nop
 8009b08:	371c      	adds	r7, #28
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	feff8fff 	.word	0xfeff8fff
 8009b18:	40010000 	.word	0x40010000
 8009b1c:	40010400 	.word	0x40010400
 8009b20:	40014000 	.word	0x40014000
 8009b24:	40014400 	.word	0x40014400
 8009b28:	40014800 	.word	0x40014800

08009b2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b087      	sub	sp, #28
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6a1b      	ldr	r3, [r3, #32]
 8009b3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6a1b      	ldr	r3, [r3, #32]
 8009b42:	f023 0201 	bic.w	r2, r3, #1
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	699b      	ldr	r3, [r3, #24]
 8009b4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	011b      	lsls	r3, r3, #4
 8009b5c:	693a      	ldr	r2, [r7, #16]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	f023 030a 	bic.w	r3, r3, #10
 8009b68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b6a:	697a      	ldr	r2, [r7, #20]
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	621a      	str	r2, [r3, #32]
}
 8009b7e:	bf00      	nop
 8009b80:	371c      	adds	r7, #28
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr

08009b8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b8a:	b480      	push	{r7}
 8009b8c:	b087      	sub	sp, #28
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	60f8      	str	r0, [r7, #12]
 8009b92:	60b9      	str	r1, [r7, #8]
 8009b94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6a1b      	ldr	r3, [r3, #32]
 8009b9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	6a1b      	ldr	r3, [r3, #32]
 8009ba0:	f023 0210 	bic.w	r2, r3, #16
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	699b      	ldr	r3, [r3, #24]
 8009bac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009bb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	031b      	lsls	r3, r3, #12
 8009bba:	693a      	ldr	r2, [r7, #16]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009bc6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	011b      	lsls	r3, r3, #4
 8009bcc:	697a      	ldr	r2, [r7, #20]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	697a      	ldr	r2, [r7, #20]
 8009bdc:	621a      	str	r2, [r3, #32]
}
 8009bde:	bf00      	nop
 8009be0:	371c      	adds	r7, #28
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr
	...

08009bec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	4b09      	ldr	r3, [pc, #36]	@ (8009c24 <TIM_ITRx_SetConfig+0x38>)
 8009c00:	4013      	ands	r3, r2
 8009c02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c04:	683a      	ldr	r2, [r7, #0]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	f043 0307 	orr.w	r3, r3, #7
 8009c0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	609a      	str	r2, [r3, #8]
}
 8009c16:	bf00      	nop
 8009c18:	3714      	adds	r7, #20
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	ffcfff8f 	.word	0xffcfff8f

08009c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b087      	sub	sp, #28
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
 8009c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	021a      	lsls	r2, r3, #8
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	431a      	orrs	r2, r3
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	697a      	ldr	r2, [r7, #20]
 8009c52:	4313      	orrs	r3, r2
 8009c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	697a      	ldr	r2, [r7, #20]
 8009c5a:	609a      	str	r2, [r3, #8]
}
 8009c5c:	bf00      	nop
 8009c5e:	371c      	adds	r7, #28
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b087      	sub	sp, #28
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	f003 031f 	and.w	r3, r3, #31
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6a1a      	ldr	r2, [r3, #32]
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	43db      	mvns	r3, r3
 8009c8a:	401a      	ands	r2, r3
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6a1a      	ldr	r2, [r3, #32]
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	f003 031f 	and.w	r3, r3, #31
 8009c9a:	6879      	ldr	r1, [r7, #4]
 8009c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8009ca0:	431a      	orrs	r2, r3
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	621a      	str	r2, [r3, #32]
}
 8009ca6:	bf00      	nop
 8009ca8:	371c      	adds	r7, #28
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
	...

08009cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d101      	bne.n	8009ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009cc8:	2302      	movs	r3, #2
 8009cca:	e06d      	b.n	8009da8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2202      	movs	r2, #2
 8009cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a30      	ldr	r2, [pc, #192]	@ (8009db4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d004      	beq.n	8009d00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a2f      	ldr	r2, [pc, #188]	@ (8009db8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d108      	bne.n	8009d12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009d06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a20      	ldr	r2, [pc, #128]	@ (8009db4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d022      	beq.n	8009d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d3e:	d01d      	beq.n	8009d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a1d      	ldr	r2, [pc, #116]	@ (8009dbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d018      	beq.n	8009d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8009dc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d013      	beq.n	8009d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a1a      	ldr	r2, [pc, #104]	@ (8009dc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d00e      	beq.n	8009d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a15      	ldr	r2, [pc, #84]	@ (8009db8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d009      	beq.n	8009d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a16      	ldr	r2, [pc, #88]	@ (8009dc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d004      	beq.n	8009d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a15      	ldr	r2, [pc, #84]	@ (8009dcc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d10c      	bne.n	8009d96 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	68ba      	ldr	r2, [r7, #8]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	68ba      	ldr	r2, [r7, #8]
 8009d94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3714      	adds	r7, #20
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr
 8009db4:	40010000 	.word	0x40010000
 8009db8:	40010400 	.word	0x40010400
 8009dbc:	40000400 	.word	0x40000400
 8009dc0:	40000800 	.word	0x40000800
 8009dc4:	40000c00 	.word	0x40000c00
 8009dc8:	40001800 	.word	0x40001800
 8009dcc:	40014000 	.word	0x40014000

08009dd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b085      	sub	sp, #20
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d101      	bne.n	8009dec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009de8:	2302      	movs	r3, #2
 8009dea:	e065      	b.n	8009eb8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2201      	movs	r2, #1
 8009df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	4313      	orrs	r3, r2
 8009e38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	695b      	ldr	r3, [r3, #20]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e52:	4313      	orrs	r3, r2
 8009e54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	699b      	ldr	r3, [r3, #24]
 8009e60:	041b      	lsls	r3, r3, #16
 8009e62:	4313      	orrs	r3, r2
 8009e64:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a16      	ldr	r2, [pc, #88]	@ (8009ec4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d004      	beq.n	8009e7a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a14      	ldr	r2, [pc, #80]	@ (8009ec8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d115      	bne.n	8009ea6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e84:	051b      	lsls	r3, r3, #20
 8009e86:	4313      	orrs	r3, r2
 8009e88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	69db      	ldr	r3, [r3, #28]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	6a1b      	ldr	r3, [r3, #32]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	68fa      	ldr	r2, [r7, #12]
 8009eac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009eb6:	2300      	movs	r3, #0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr
 8009ec4:	40010000 	.word	0x40010000
 8009ec8:	40010400 	.word	0x40010400

08009ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ed4:	bf00      	nop
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ee8:	bf00      	nop
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009efc:	bf00      	nop
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d101      	bne.n	8009f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
 8009f18:	e042      	b.n	8009fa0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d106      	bne.n	8009f32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f7f8 fd2d 	bl	800298c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2224      	movs	r2, #36	@ 0x24
 8009f36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f022 0201 	bic.w	r2, r2, #1
 8009f48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d002      	beq.n	8009f58 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f001 f9f8 	bl	800b348 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fc8d 	bl	800a878 <UART_SetConfig>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d101      	bne.n	8009f68 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009f64:	2301      	movs	r3, #1
 8009f66:	e01b      	b.n	8009fa0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	685a      	ldr	r2, [r3, #4]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009f76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	689a      	ldr	r2, [r3, #8]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009f86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f042 0201 	orr.w	r2, r2, #1
 8009f96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f001 fa77 	bl	800b48c <UART_CheckIdleState>
 8009f9e:	4603      	mov	r3, r0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b08a      	sub	sp, #40	@ 0x28
 8009fac:	af02      	add	r7, sp, #8
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	603b      	str	r3, [r7, #0]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fbe:	2b20      	cmp	r3, #32
 8009fc0:	d17b      	bne.n	800a0ba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d002      	beq.n	8009fce <HAL_UART_Transmit+0x26>
 8009fc8:	88fb      	ldrh	r3, [r7, #6]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d101      	bne.n	8009fd2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e074      	b.n	800a0bc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2221      	movs	r2, #33	@ 0x21
 8009fde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009fe2:	f7f8 ffed 	bl	8002fc0 <HAL_GetTick>
 8009fe6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	88fa      	ldrh	r2, [r7, #6]
 8009fec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	88fa      	ldrh	r2, [r7, #6]
 8009ff4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a000:	d108      	bne.n	800a014 <HAL_UART_Transmit+0x6c>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	691b      	ldr	r3, [r3, #16]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d104      	bne.n	800a014 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a00a:	2300      	movs	r3, #0
 800a00c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	61bb      	str	r3, [r7, #24]
 800a012:	e003      	b.n	800a01c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a018:	2300      	movs	r3, #0
 800a01a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a01c:	e030      	b.n	800a080 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	9300      	str	r3, [sp, #0]
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	2200      	movs	r2, #0
 800a026:	2180      	movs	r1, #128	@ 0x80
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f001 fad9 	bl	800b5e0 <UART_WaitOnFlagUntilTimeout>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d005      	beq.n	800a040 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2220      	movs	r2, #32
 800a038:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e03d      	b.n	800a0bc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10b      	bne.n	800a05e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	461a      	mov	r2, r3
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a054:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	3302      	adds	r3, #2
 800a05a:	61bb      	str	r3, [r7, #24]
 800a05c:	e007      	b.n	800a06e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	781a      	ldrb	r2, [r3, #0]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	3301      	adds	r3, #1
 800a06c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a074:	b29b      	uxth	r3, r3
 800a076:	3b01      	subs	r3, #1
 800a078:	b29a      	uxth	r2, r3
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a086:	b29b      	uxth	r3, r3
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d1c8      	bne.n	800a01e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	2200      	movs	r2, #0
 800a094:	2140      	movs	r1, #64	@ 0x40
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f001 faa2 	bl	800b5e0 <UART_WaitOnFlagUntilTimeout>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d005      	beq.n	800a0ae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2220      	movs	r2, #32
 800a0a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	e006      	b.n	800a0bc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2220      	movs	r2, #32
 800a0b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	e000      	b.n	800a0bc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a0ba:	2302      	movs	r3, #2
  }
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3720      	adds	r7, #32
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b0ba      	sub	sp, #232	@ 0xe8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	69db      	ldr	r3, [r3, #28]
 800a0d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a0ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a0ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a0f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d11b      	bne.n	800a138 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a104:	f003 0320 	and.w	r3, r3, #32
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d015      	beq.n	800a138 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a10c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a110:	f003 0320 	and.w	r3, r3, #32
 800a114:	2b00      	cmp	r3, #0
 800a116:	d105      	bne.n	800a124 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a11c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a120:	2b00      	cmp	r3, #0
 800a122:	d009      	beq.n	800a138 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f000 8377 	beq.w	800a81c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	4798      	blx	r3
      }
      return;
 800a136:	e371      	b.n	800a81c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a138:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f000 8123 	beq.w	800a388 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a142:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a146:	4b8d      	ldr	r3, [pc, #564]	@ (800a37c <HAL_UART_IRQHandler+0x2b8>)
 800a148:	4013      	ands	r3, r2
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d106      	bne.n	800a15c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a14e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a152:	4b8b      	ldr	r3, [pc, #556]	@ (800a380 <HAL_UART_IRQHandler+0x2bc>)
 800a154:	4013      	ands	r3, r2
 800a156:	2b00      	cmp	r3, #0
 800a158:	f000 8116 	beq.w	800a388 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a15c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a160:	f003 0301 	and.w	r3, r3, #1
 800a164:	2b00      	cmp	r3, #0
 800a166:	d011      	beq.n	800a18c <HAL_UART_IRQHandler+0xc8>
 800a168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a16c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00b      	beq.n	800a18c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2201      	movs	r2, #1
 800a17a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a182:	f043 0201 	orr.w	r2, r3, #1
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a18c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a190:	f003 0302 	and.w	r3, r3, #2
 800a194:	2b00      	cmp	r3, #0
 800a196:	d011      	beq.n	800a1bc <HAL_UART_IRQHandler+0xf8>
 800a198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a19c:	f003 0301 	and.w	r3, r3, #1
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d00b      	beq.n	800a1bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2202      	movs	r2, #2
 800a1aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1b2:	f043 0204 	orr.w	r2, r3, #4
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a1bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1c0:	f003 0304 	and.w	r3, r3, #4
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d011      	beq.n	800a1ec <HAL_UART_IRQHandler+0x128>
 800a1c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1cc:	f003 0301 	and.w	r3, r3, #1
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00b      	beq.n	800a1ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2204      	movs	r2, #4
 800a1da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1e2:	f043 0202 	orr.w	r2, r3, #2
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a1ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1f0:	f003 0308 	and.w	r3, r3, #8
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d017      	beq.n	800a228 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a1f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1fc:	f003 0320 	and.w	r3, r3, #32
 800a200:	2b00      	cmp	r3, #0
 800a202:	d105      	bne.n	800a210 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a204:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a208:	4b5c      	ldr	r3, [pc, #368]	@ (800a37c <HAL_UART_IRQHandler+0x2b8>)
 800a20a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00b      	beq.n	800a228 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2208      	movs	r2, #8
 800a216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a21e:	f043 0208 	orr.w	r2, r3, #8
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a22c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a230:	2b00      	cmp	r3, #0
 800a232:	d012      	beq.n	800a25a <HAL_UART_IRQHandler+0x196>
 800a234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a238:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00c      	beq.n	800a25a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a248:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a250:	f043 0220 	orr.w	r2, r3, #32
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a260:	2b00      	cmp	r3, #0
 800a262:	f000 82dd 	beq.w	800a820 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a26a:	f003 0320 	and.w	r3, r3, #32
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d013      	beq.n	800a29a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a276:	f003 0320 	and.w	r3, r3, #32
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d105      	bne.n	800a28a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a27e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a286:	2b00      	cmp	r3, #0
 800a288:	d007      	beq.n	800a29a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d003      	beq.n	800a29a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2ae:	2b40      	cmp	r3, #64	@ 0x40
 800a2b0:	d005      	beq.n	800a2be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a2b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a2b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d054      	beq.n	800a368 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f001 f9fc 	bl	800b6bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2ce:	2b40      	cmp	r3, #64	@ 0x40
 800a2d0:	d146      	bne.n	800a360 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	3308      	adds	r3, #8
 800a2d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a2e0:	e853 3f00 	ldrex	r3, [r3]
 800a2e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a2e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a2ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	3308      	adds	r3, #8
 800a2fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a2fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a302:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a306:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a30a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a30e:	e841 2300 	strex	r3, r2, [r1]
 800a312:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1d9      	bne.n	800a2d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a324:	2b00      	cmp	r3, #0
 800a326:	d017      	beq.n	800a358 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a32e:	4a15      	ldr	r2, [pc, #84]	@ (800a384 <HAL_UART_IRQHandler+0x2c0>)
 800a330:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a338:	4618      	mov	r0, r3
 800a33a:	f7f9 faff 	bl	800393c <HAL_DMA_Abort_IT>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d019      	beq.n	800a378 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a34a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a352:	4610      	mov	r0, r2
 800a354:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a356:	e00f      	b.n	800a378 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 fa77 	bl	800a84c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a35e:	e00b      	b.n	800a378 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 fa73 	bl	800a84c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a366:	e007      	b.n	800a378 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 fa6f 	bl	800a84c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a376:	e253      	b.n	800a820 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a378:	bf00      	nop
    return;
 800a37a:	e251      	b.n	800a820 <HAL_UART_IRQHandler+0x75c>
 800a37c:	10000001 	.word	0x10000001
 800a380:	04000120 	.word	0x04000120
 800a384:	0800b789 	.word	0x0800b789

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	f040 81e7 	bne.w	800a760 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a396:	f003 0310 	and.w	r3, r3, #16
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f000 81e0 	beq.w	800a760 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a3a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3a4:	f003 0310 	and.w	r3, r3, #16
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f000 81d9 	beq.w	800a760 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2210      	movs	r2, #16
 800a3b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3c0:	2b40      	cmp	r3, #64	@ 0x40
 800a3c2:	f040 8151 	bne.w	800a668 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a96      	ldr	r2, [pc, #600]	@ (800a628 <HAL_UART_IRQHandler+0x564>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d068      	beq.n	800a4a6 <HAL_UART_IRQHandler+0x3e2>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a93      	ldr	r2, [pc, #588]	@ (800a62c <HAL_UART_IRQHandler+0x568>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d061      	beq.n	800a4a6 <HAL_UART_IRQHandler+0x3e2>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a91      	ldr	r2, [pc, #580]	@ (800a630 <HAL_UART_IRQHandler+0x56c>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d05a      	beq.n	800a4a6 <HAL_UART_IRQHandler+0x3e2>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a8e      	ldr	r2, [pc, #568]	@ (800a634 <HAL_UART_IRQHandler+0x570>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d053      	beq.n	800a4a6 <HAL_UART_IRQHandler+0x3e2>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a8c      	ldr	r2, [pc, #560]	@ (800a638 <HAL_UART_IRQHandler+0x574>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d04c      	beq.n	800a4a6 <HAL_UART_IRQHandler+0x3e2>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a89      	ldr	r2, [pc, #548]	@ (800a63c <HAL_UART_IRQHandler+0x578>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d045      	beq.n	800a4a6 <HAL_UART_IRQHandler+0x3e2>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a87      	ldr	r2, [pc, #540]	@ (800a640 <HAL_UART_IRQHandler+0x57c>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d03e      	beq.n	800a4a6 <HAL_UART_IRQHandler+0x3e2>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a84      	ldr	r2, [pc, #528]	@ (800a644 <HAL_UART_IRQHandler+0x580>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d037      	beq.n	800a4a6 <HAL_UART_IRQHandler+0x3e2>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a82      	ldr	r2, [pc, #520]	@ (800a648 <HAL_UART_IRQHandler+0x584>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d030      	beq.n	800a4a6 <HAL_UART_IRQHandler+0x3e2>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a7f      	ldr	r2, [pc, #508]	@ (800a64c <HAL_UART_IRQHandler+0x588>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d029      	beq.n	800a4a6 <HAL_UART_IRQHandler+0x3e2>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a7d      	ldr	r2, [pc, #500]	@ (800a650 <HAL_UART_IRQHandler+0x58c>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d022      	beq.n	800a4a6 <HAL_UART_IRQHandler+0x3e2>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a7a      	ldr	r2, [pc, #488]	@ (800a654 <HAL_UART_IRQHandler+0x590>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d01b      	beq.n	800a4a6 <HAL_UART_IRQHandler+0x3e2>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a78      	ldr	r2, [pc, #480]	@ (800a658 <HAL_UART_IRQHandler+0x594>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d014      	beq.n	800a4a6 <HAL_UART_IRQHandler+0x3e2>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a75      	ldr	r2, [pc, #468]	@ (800a65c <HAL_UART_IRQHandler+0x598>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d00d      	beq.n	800a4a6 <HAL_UART_IRQHandler+0x3e2>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a73      	ldr	r2, [pc, #460]	@ (800a660 <HAL_UART_IRQHandler+0x59c>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d006      	beq.n	800a4a6 <HAL_UART_IRQHandler+0x3e2>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a70      	ldr	r2, [pc, #448]	@ (800a664 <HAL_UART_IRQHandler+0x5a0>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d106      	bne.n	800a4b4 <HAL_UART_IRQHandler+0x3f0>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	e005      	b.n	800a4c0 <HAL_UART_IRQHandler+0x3fc>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a4c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	f000 81ab 	beq.w	800a824 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a4d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	f080 81a3 	bcs.w	800a824 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a4e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4ee:	69db      	ldr	r3, [r3, #28]
 800a4f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4f4:	f000 8087 	beq.w	800a606 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a500:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a504:	e853 3f00 	ldrex	r3, [r3]
 800a508:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a50c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a510:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a514:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	461a      	mov	r2, r3
 800a51e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a522:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a526:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a52a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a52e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a532:	e841 2300 	strex	r3, r2, [r1]
 800a536:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a53a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d1da      	bne.n	800a4f8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	3308      	adds	r3, #8
 800a548:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a54c:	e853 3f00 	ldrex	r3, [r3]
 800a550:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a552:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a554:	f023 0301 	bic.w	r3, r3, #1
 800a558:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	3308      	adds	r3, #8
 800a562:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a566:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a56a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a56c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a56e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a572:	e841 2300 	strex	r3, r2, [r1]
 800a576:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a578:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d1e1      	bne.n	800a542 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	3308      	adds	r3, #8
 800a584:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a586:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a588:	e853 3f00 	ldrex	r3, [r3]
 800a58c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a58e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a590:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a594:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	3308      	adds	r3, #8
 800a59e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a5a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a5a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a5a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a5aa:	e841 2300 	strex	r3, r2, [r1]
 800a5ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a5b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1e3      	bne.n	800a57e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2220      	movs	r2, #32
 800a5ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5cc:	e853 3f00 	ldrex	r3, [r3]
 800a5d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a5d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5d4:	f023 0310 	bic.w	r3, r3, #16
 800a5d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a5e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a5ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a5ee:	e841 2300 	strex	r3, r2, [r1]
 800a5f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a5f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d1e4      	bne.n	800a5c4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a600:	4618      	mov	r0, r3
 800a602:	f7f8 fe7d 	bl	8003300 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2202      	movs	r2, #2
 800a60a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a618:	b29b      	uxth	r3, r3
 800a61a:	1ad3      	subs	r3, r2, r3
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	4619      	mov	r1, r3
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 f91d 	bl	800a860 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a626:	e0fd      	b.n	800a824 <HAL_UART_IRQHandler+0x760>
 800a628:	40020010 	.word	0x40020010
 800a62c:	40020028 	.word	0x40020028
 800a630:	40020040 	.word	0x40020040
 800a634:	40020058 	.word	0x40020058
 800a638:	40020070 	.word	0x40020070
 800a63c:	40020088 	.word	0x40020088
 800a640:	400200a0 	.word	0x400200a0
 800a644:	400200b8 	.word	0x400200b8
 800a648:	40020410 	.word	0x40020410
 800a64c:	40020428 	.word	0x40020428
 800a650:	40020440 	.word	0x40020440
 800a654:	40020458 	.word	0x40020458
 800a658:	40020470 	.word	0x40020470
 800a65c:	40020488 	.word	0x40020488
 800a660:	400204a0 	.word	0x400204a0
 800a664:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a674:	b29b      	uxth	r3, r3
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a682:	b29b      	uxth	r3, r3
 800a684:	2b00      	cmp	r3, #0
 800a686:	f000 80cf 	beq.w	800a828 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a68a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a68e:	2b00      	cmp	r3, #0
 800a690:	f000 80ca 	beq.w	800a828 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a69a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a69c:	e853 3f00 	ldrex	r3, [r3]
 800a6a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a6a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a6b6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6b8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a6bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6be:	e841 2300 	strex	r3, r2, [r1]
 800a6c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d1e4      	bne.n	800a694 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	3308      	adds	r3, #8
 800a6d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d4:	e853 3f00 	ldrex	r3, [r3]
 800a6d8:	623b      	str	r3, [r7, #32]
   return(result);
 800a6da:	6a3a      	ldr	r2, [r7, #32]
 800a6dc:	4b55      	ldr	r3, [pc, #340]	@ (800a834 <HAL_UART_IRQHandler+0x770>)
 800a6de:	4013      	ands	r3, r2
 800a6e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	3308      	adds	r3, #8
 800a6ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a6ee:	633a      	str	r2, [r7, #48]	@ 0x30
 800a6f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6f6:	e841 2300 	strex	r3, r2, [r1]
 800a6fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d1e3      	bne.n	800a6ca <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2220      	movs	r2, #32
 800a706:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	e853 3f00 	ldrex	r3, [r3]
 800a722:	60fb      	str	r3, [r7, #12]
   return(result);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f023 0310 	bic.w	r3, r3, #16
 800a72a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	461a      	mov	r2, r3
 800a734:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a738:	61fb      	str	r3, [r7, #28]
 800a73a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73c:	69b9      	ldr	r1, [r7, #24]
 800a73e:	69fa      	ldr	r2, [r7, #28]
 800a740:	e841 2300 	strex	r3, r2, [r1]
 800a744:	617b      	str	r3, [r7, #20]
   return(result);
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1e4      	bne.n	800a716 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2202      	movs	r2, #2
 800a750:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a752:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a756:	4619      	mov	r1, r3
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 f881 	bl	800a860 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a75e:	e063      	b.n	800a828 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a764:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d00e      	beq.n	800a78a <HAL_UART_IRQHandler+0x6c6>
 800a76c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a770:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a774:	2b00      	cmp	r3, #0
 800a776:	d008      	beq.n	800a78a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a780:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f001 f841 	bl	800b80a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a788:	e051      	b.n	800a82e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a78a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a78e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a792:	2b00      	cmp	r3, #0
 800a794:	d014      	beq.n	800a7c0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a79a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d105      	bne.n	800a7ae <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a7a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d008      	beq.n	800a7c0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d03a      	beq.n	800a82c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	4798      	blx	r3
    }
    return;
 800a7be:	e035      	b.n	800a82c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a7c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d009      	beq.n	800a7e0 <HAL_UART_IRQHandler+0x71c>
 800a7cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d003      	beq.n	800a7e0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 ffeb 	bl	800b7b4 <UART_EndTransmit_IT>
    return;
 800a7de:	e026      	b.n	800a82e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a7e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d009      	beq.n	800a800 <HAL_UART_IRQHandler+0x73c>
 800a7ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d003      	beq.n	800a800 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f001 f81a 	bl	800b832 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a7fe:	e016      	b.n	800a82e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a804:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d010      	beq.n	800a82e <HAL_UART_IRQHandler+0x76a>
 800a80c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a810:	2b00      	cmp	r3, #0
 800a812:	da0c      	bge.n	800a82e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f001 f802 	bl	800b81e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a81a:	e008      	b.n	800a82e <HAL_UART_IRQHandler+0x76a>
      return;
 800a81c:	bf00      	nop
 800a81e:	e006      	b.n	800a82e <HAL_UART_IRQHandler+0x76a>
    return;
 800a820:	bf00      	nop
 800a822:	e004      	b.n	800a82e <HAL_UART_IRQHandler+0x76a>
      return;
 800a824:	bf00      	nop
 800a826:	e002      	b.n	800a82e <HAL_UART_IRQHandler+0x76a>
      return;
 800a828:	bf00      	nop
 800a82a:	e000      	b.n	800a82e <HAL_UART_IRQHandler+0x76a>
    return;
 800a82c:	bf00      	nop
  }
}
 800a82e:	37e8      	adds	r7, #232	@ 0xe8
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	effffffe 	.word	0xeffffffe

0800a838 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a840:	bf00      	nop
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a854:	bf00      	nop
 800a856:	370c      	adds	r7, #12
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	460b      	mov	r3, r1
 800a86a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a86c:	bf00      	nop
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a87c:	b092      	sub	sp, #72	@ 0x48
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a882:	2300      	movs	r3, #0
 800a884:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	689a      	ldr	r2, [r3, #8]
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	431a      	orrs	r2, r3
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	695b      	ldr	r3, [r3, #20]
 800a896:	431a      	orrs	r2, r3
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	69db      	ldr	r3, [r3, #28]
 800a89c:	4313      	orrs	r3, r2
 800a89e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	4bbe      	ldr	r3, [pc, #760]	@ (800aba0 <UART_SetConfig+0x328>)
 800a8a8:	4013      	ands	r3, r2
 800a8aa:	697a      	ldr	r2, [r7, #20]
 800a8ac:	6812      	ldr	r2, [r2, #0]
 800a8ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a8b0:	430b      	orrs	r3, r1
 800a8b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	68da      	ldr	r2, [r3, #12]
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	430a      	orrs	r2, r1
 800a8c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	699b      	ldr	r3, [r3, #24]
 800a8ce:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4ab3      	ldr	r2, [pc, #716]	@ (800aba4 <UART_SetConfig+0x32c>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d004      	beq.n	800a8e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	6a1b      	ldr	r3, [r3, #32]
 800a8de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	689a      	ldr	r2, [r3, #8]
 800a8ea:	4baf      	ldr	r3, [pc, #700]	@ (800aba8 <UART_SetConfig+0x330>)
 800a8ec:	4013      	ands	r3, r2
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	6812      	ldr	r2, [r2, #0]
 800a8f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a8f4:	430b      	orrs	r3, r1
 800a8f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8fe:	f023 010f 	bic.w	r1, r3, #15
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	430a      	orrs	r2, r1
 800a90c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	4aa6      	ldr	r2, [pc, #664]	@ (800abac <UART_SetConfig+0x334>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d177      	bne.n	800aa08 <UART_SetConfig+0x190>
 800a918:	4ba5      	ldr	r3, [pc, #660]	@ (800abb0 <UART_SetConfig+0x338>)
 800a91a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a91c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a920:	2b28      	cmp	r3, #40	@ 0x28
 800a922:	d86d      	bhi.n	800aa00 <UART_SetConfig+0x188>
 800a924:	a201      	add	r2, pc, #4	@ (adr r2, 800a92c <UART_SetConfig+0xb4>)
 800a926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a92a:	bf00      	nop
 800a92c:	0800a9d1 	.word	0x0800a9d1
 800a930:	0800aa01 	.word	0x0800aa01
 800a934:	0800aa01 	.word	0x0800aa01
 800a938:	0800aa01 	.word	0x0800aa01
 800a93c:	0800aa01 	.word	0x0800aa01
 800a940:	0800aa01 	.word	0x0800aa01
 800a944:	0800aa01 	.word	0x0800aa01
 800a948:	0800aa01 	.word	0x0800aa01
 800a94c:	0800a9d9 	.word	0x0800a9d9
 800a950:	0800aa01 	.word	0x0800aa01
 800a954:	0800aa01 	.word	0x0800aa01
 800a958:	0800aa01 	.word	0x0800aa01
 800a95c:	0800aa01 	.word	0x0800aa01
 800a960:	0800aa01 	.word	0x0800aa01
 800a964:	0800aa01 	.word	0x0800aa01
 800a968:	0800aa01 	.word	0x0800aa01
 800a96c:	0800a9e1 	.word	0x0800a9e1
 800a970:	0800aa01 	.word	0x0800aa01
 800a974:	0800aa01 	.word	0x0800aa01
 800a978:	0800aa01 	.word	0x0800aa01
 800a97c:	0800aa01 	.word	0x0800aa01
 800a980:	0800aa01 	.word	0x0800aa01
 800a984:	0800aa01 	.word	0x0800aa01
 800a988:	0800aa01 	.word	0x0800aa01
 800a98c:	0800a9e9 	.word	0x0800a9e9
 800a990:	0800aa01 	.word	0x0800aa01
 800a994:	0800aa01 	.word	0x0800aa01
 800a998:	0800aa01 	.word	0x0800aa01
 800a99c:	0800aa01 	.word	0x0800aa01
 800a9a0:	0800aa01 	.word	0x0800aa01
 800a9a4:	0800aa01 	.word	0x0800aa01
 800a9a8:	0800aa01 	.word	0x0800aa01
 800a9ac:	0800a9f1 	.word	0x0800a9f1
 800a9b0:	0800aa01 	.word	0x0800aa01
 800a9b4:	0800aa01 	.word	0x0800aa01
 800a9b8:	0800aa01 	.word	0x0800aa01
 800a9bc:	0800aa01 	.word	0x0800aa01
 800a9c0:	0800aa01 	.word	0x0800aa01
 800a9c4:	0800aa01 	.word	0x0800aa01
 800a9c8:	0800aa01 	.word	0x0800aa01
 800a9cc:	0800a9f9 	.word	0x0800a9f9
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9d6:	e222      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800a9d8:	2304      	movs	r3, #4
 800a9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9de:	e21e      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800a9e0:	2308      	movs	r3, #8
 800a9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9e6:	e21a      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800a9e8:	2310      	movs	r3, #16
 800a9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ee:	e216      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800a9f0:	2320      	movs	r3, #32
 800a9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9f6:	e212      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800a9f8:	2340      	movs	r3, #64	@ 0x40
 800a9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9fe:	e20e      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800aa00:	2380      	movs	r3, #128	@ 0x80
 800aa02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa06:	e20a      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a69      	ldr	r2, [pc, #420]	@ (800abb4 <UART_SetConfig+0x33c>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d130      	bne.n	800aa74 <UART_SetConfig+0x1fc>
 800aa12:	4b67      	ldr	r3, [pc, #412]	@ (800abb0 <UART_SetConfig+0x338>)
 800aa14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa16:	f003 0307 	and.w	r3, r3, #7
 800aa1a:	2b05      	cmp	r3, #5
 800aa1c:	d826      	bhi.n	800aa6c <UART_SetConfig+0x1f4>
 800aa1e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa24 <UART_SetConfig+0x1ac>)
 800aa20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa24:	0800aa3d 	.word	0x0800aa3d
 800aa28:	0800aa45 	.word	0x0800aa45
 800aa2c:	0800aa4d 	.word	0x0800aa4d
 800aa30:	0800aa55 	.word	0x0800aa55
 800aa34:	0800aa5d 	.word	0x0800aa5d
 800aa38:	0800aa65 	.word	0x0800aa65
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa42:	e1ec      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800aa44:	2304      	movs	r3, #4
 800aa46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa4a:	e1e8      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800aa4c:	2308      	movs	r3, #8
 800aa4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa52:	e1e4      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800aa54:	2310      	movs	r3, #16
 800aa56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa5a:	e1e0      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800aa5c:	2320      	movs	r3, #32
 800aa5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa62:	e1dc      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800aa64:	2340      	movs	r3, #64	@ 0x40
 800aa66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa6a:	e1d8      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800aa6c:	2380      	movs	r3, #128	@ 0x80
 800aa6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa72:	e1d4      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a4f      	ldr	r2, [pc, #316]	@ (800abb8 <UART_SetConfig+0x340>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d130      	bne.n	800aae0 <UART_SetConfig+0x268>
 800aa7e:	4b4c      	ldr	r3, [pc, #304]	@ (800abb0 <UART_SetConfig+0x338>)
 800aa80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa82:	f003 0307 	and.w	r3, r3, #7
 800aa86:	2b05      	cmp	r3, #5
 800aa88:	d826      	bhi.n	800aad8 <UART_SetConfig+0x260>
 800aa8a:	a201      	add	r2, pc, #4	@ (adr r2, 800aa90 <UART_SetConfig+0x218>)
 800aa8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa90:	0800aaa9 	.word	0x0800aaa9
 800aa94:	0800aab1 	.word	0x0800aab1
 800aa98:	0800aab9 	.word	0x0800aab9
 800aa9c:	0800aac1 	.word	0x0800aac1
 800aaa0:	0800aac9 	.word	0x0800aac9
 800aaa4:	0800aad1 	.word	0x0800aad1
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaae:	e1b6      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800aab0:	2304      	movs	r3, #4
 800aab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aab6:	e1b2      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800aab8:	2308      	movs	r3, #8
 800aaba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aabe:	e1ae      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800aac0:	2310      	movs	r3, #16
 800aac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aac6:	e1aa      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800aac8:	2320      	movs	r3, #32
 800aaca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aace:	e1a6      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800aad0:	2340      	movs	r3, #64	@ 0x40
 800aad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aad6:	e1a2      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800aad8:	2380      	movs	r3, #128	@ 0x80
 800aada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aade:	e19e      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a35      	ldr	r2, [pc, #212]	@ (800abbc <UART_SetConfig+0x344>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d130      	bne.n	800ab4c <UART_SetConfig+0x2d4>
 800aaea:	4b31      	ldr	r3, [pc, #196]	@ (800abb0 <UART_SetConfig+0x338>)
 800aaec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaee:	f003 0307 	and.w	r3, r3, #7
 800aaf2:	2b05      	cmp	r3, #5
 800aaf4:	d826      	bhi.n	800ab44 <UART_SetConfig+0x2cc>
 800aaf6:	a201      	add	r2, pc, #4	@ (adr r2, 800aafc <UART_SetConfig+0x284>)
 800aaf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aafc:	0800ab15 	.word	0x0800ab15
 800ab00:	0800ab1d 	.word	0x0800ab1d
 800ab04:	0800ab25 	.word	0x0800ab25
 800ab08:	0800ab2d 	.word	0x0800ab2d
 800ab0c:	0800ab35 	.word	0x0800ab35
 800ab10:	0800ab3d 	.word	0x0800ab3d
 800ab14:	2300      	movs	r3, #0
 800ab16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab1a:	e180      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ab1c:	2304      	movs	r3, #4
 800ab1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab22:	e17c      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ab24:	2308      	movs	r3, #8
 800ab26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab2a:	e178      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ab2c:	2310      	movs	r3, #16
 800ab2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab32:	e174      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ab34:	2320      	movs	r3, #32
 800ab36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab3a:	e170      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ab3c:	2340      	movs	r3, #64	@ 0x40
 800ab3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab42:	e16c      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ab44:	2380      	movs	r3, #128	@ 0x80
 800ab46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab4a:	e168      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a1b      	ldr	r2, [pc, #108]	@ (800abc0 <UART_SetConfig+0x348>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d142      	bne.n	800abdc <UART_SetConfig+0x364>
 800ab56:	4b16      	ldr	r3, [pc, #88]	@ (800abb0 <UART_SetConfig+0x338>)
 800ab58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab5a:	f003 0307 	and.w	r3, r3, #7
 800ab5e:	2b05      	cmp	r3, #5
 800ab60:	d838      	bhi.n	800abd4 <UART_SetConfig+0x35c>
 800ab62:	a201      	add	r2, pc, #4	@ (adr r2, 800ab68 <UART_SetConfig+0x2f0>)
 800ab64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab68:	0800ab81 	.word	0x0800ab81
 800ab6c:	0800ab89 	.word	0x0800ab89
 800ab70:	0800ab91 	.word	0x0800ab91
 800ab74:	0800ab99 	.word	0x0800ab99
 800ab78:	0800abc5 	.word	0x0800abc5
 800ab7c:	0800abcd 	.word	0x0800abcd
 800ab80:	2300      	movs	r3, #0
 800ab82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab86:	e14a      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ab88:	2304      	movs	r3, #4
 800ab8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab8e:	e146      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ab90:	2308      	movs	r3, #8
 800ab92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab96:	e142      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ab98:	2310      	movs	r3, #16
 800ab9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab9e:	e13e      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800aba0:	cfff69f3 	.word	0xcfff69f3
 800aba4:	58000c00 	.word	0x58000c00
 800aba8:	11fff4ff 	.word	0x11fff4ff
 800abac:	40011000 	.word	0x40011000
 800abb0:	58024400 	.word	0x58024400
 800abb4:	40004400 	.word	0x40004400
 800abb8:	40004800 	.word	0x40004800
 800abbc:	40004c00 	.word	0x40004c00
 800abc0:	40005000 	.word	0x40005000
 800abc4:	2320      	movs	r3, #32
 800abc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abca:	e128      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800abcc:	2340      	movs	r3, #64	@ 0x40
 800abce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abd2:	e124      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800abd4:	2380      	movs	r3, #128	@ 0x80
 800abd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abda:	e120      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4acb      	ldr	r2, [pc, #812]	@ (800af10 <UART_SetConfig+0x698>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d176      	bne.n	800acd4 <UART_SetConfig+0x45c>
 800abe6:	4bcb      	ldr	r3, [pc, #812]	@ (800af14 <UART_SetConfig+0x69c>)
 800abe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800abee:	2b28      	cmp	r3, #40	@ 0x28
 800abf0:	d86c      	bhi.n	800accc <UART_SetConfig+0x454>
 800abf2:	a201      	add	r2, pc, #4	@ (adr r2, 800abf8 <UART_SetConfig+0x380>)
 800abf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf8:	0800ac9d 	.word	0x0800ac9d
 800abfc:	0800accd 	.word	0x0800accd
 800ac00:	0800accd 	.word	0x0800accd
 800ac04:	0800accd 	.word	0x0800accd
 800ac08:	0800accd 	.word	0x0800accd
 800ac0c:	0800accd 	.word	0x0800accd
 800ac10:	0800accd 	.word	0x0800accd
 800ac14:	0800accd 	.word	0x0800accd
 800ac18:	0800aca5 	.word	0x0800aca5
 800ac1c:	0800accd 	.word	0x0800accd
 800ac20:	0800accd 	.word	0x0800accd
 800ac24:	0800accd 	.word	0x0800accd
 800ac28:	0800accd 	.word	0x0800accd
 800ac2c:	0800accd 	.word	0x0800accd
 800ac30:	0800accd 	.word	0x0800accd
 800ac34:	0800accd 	.word	0x0800accd
 800ac38:	0800acad 	.word	0x0800acad
 800ac3c:	0800accd 	.word	0x0800accd
 800ac40:	0800accd 	.word	0x0800accd
 800ac44:	0800accd 	.word	0x0800accd
 800ac48:	0800accd 	.word	0x0800accd
 800ac4c:	0800accd 	.word	0x0800accd
 800ac50:	0800accd 	.word	0x0800accd
 800ac54:	0800accd 	.word	0x0800accd
 800ac58:	0800acb5 	.word	0x0800acb5
 800ac5c:	0800accd 	.word	0x0800accd
 800ac60:	0800accd 	.word	0x0800accd
 800ac64:	0800accd 	.word	0x0800accd
 800ac68:	0800accd 	.word	0x0800accd
 800ac6c:	0800accd 	.word	0x0800accd
 800ac70:	0800accd 	.word	0x0800accd
 800ac74:	0800accd 	.word	0x0800accd
 800ac78:	0800acbd 	.word	0x0800acbd
 800ac7c:	0800accd 	.word	0x0800accd
 800ac80:	0800accd 	.word	0x0800accd
 800ac84:	0800accd 	.word	0x0800accd
 800ac88:	0800accd 	.word	0x0800accd
 800ac8c:	0800accd 	.word	0x0800accd
 800ac90:	0800accd 	.word	0x0800accd
 800ac94:	0800accd 	.word	0x0800accd
 800ac98:	0800acc5 	.word	0x0800acc5
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aca2:	e0bc      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800aca4:	2304      	movs	r3, #4
 800aca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acaa:	e0b8      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800acac:	2308      	movs	r3, #8
 800acae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acb2:	e0b4      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800acb4:	2310      	movs	r3, #16
 800acb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acba:	e0b0      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800acbc:	2320      	movs	r3, #32
 800acbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acc2:	e0ac      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800acc4:	2340      	movs	r3, #64	@ 0x40
 800acc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acca:	e0a8      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800accc:	2380      	movs	r3, #128	@ 0x80
 800acce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acd2:	e0a4      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a8f      	ldr	r2, [pc, #572]	@ (800af18 <UART_SetConfig+0x6a0>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d130      	bne.n	800ad40 <UART_SetConfig+0x4c8>
 800acde:	4b8d      	ldr	r3, [pc, #564]	@ (800af14 <UART_SetConfig+0x69c>)
 800ace0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ace2:	f003 0307 	and.w	r3, r3, #7
 800ace6:	2b05      	cmp	r3, #5
 800ace8:	d826      	bhi.n	800ad38 <UART_SetConfig+0x4c0>
 800acea:	a201      	add	r2, pc, #4	@ (adr r2, 800acf0 <UART_SetConfig+0x478>)
 800acec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf0:	0800ad09 	.word	0x0800ad09
 800acf4:	0800ad11 	.word	0x0800ad11
 800acf8:	0800ad19 	.word	0x0800ad19
 800acfc:	0800ad21 	.word	0x0800ad21
 800ad00:	0800ad29 	.word	0x0800ad29
 800ad04:	0800ad31 	.word	0x0800ad31
 800ad08:	2300      	movs	r3, #0
 800ad0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad0e:	e086      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ad10:	2304      	movs	r3, #4
 800ad12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad16:	e082      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ad18:	2308      	movs	r3, #8
 800ad1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad1e:	e07e      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ad20:	2310      	movs	r3, #16
 800ad22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad26:	e07a      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ad28:	2320      	movs	r3, #32
 800ad2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad2e:	e076      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ad30:	2340      	movs	r3, #64	@ 0x40
 800ad32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad36:	e072      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ad38:	2380      	movs	r3, #128	@ 0x80
 800ad3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad3e:	e06e      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a75      	ldr	r2, [pc, #468]	@ (800af1c <UART_SetConfig+0x6a4>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d130      	bne.n	800adac <UART_SetConfig+0x534>
 800ad4a:	4b72      	ldr	r3, [pc, #456]	@ (800af14 <UART_SetConfig+0x69c>)
 800ad4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad4e:	f003 0307 	and.w	r3, r3, #7
 800ad52:	2b05      	cmp	r3, #5
 800ad54:	d826      	bhi.n	800ada4 <UART_SetConfig+0x52c>
 800ad56:	a201      	add	r2, pc, #4	@ (adr r2, 800ad5c <UART_SetConfig+0x4e4>)
 800ad58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad5c:	0800ad75 	.word	0x0800ad75
 800ad60:	0800ad7d 	.word	0x0800ad7d
 800ad64:	0800ad85 	.word	0x0800ad85
 800ad68:	0800ad8d 	.word	0x0800ad8d
 800ad6c:	0800ad95 	.word	0x0800ad95
 800ad70:	0800ad9d 	.word	0x0800ad9d
 800ad74:	2300      	movs	r3, #0
 800ad76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad7a:	e050      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ad7c:	2304      	movs	r3, #4
 800ad7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad82:	e04c      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ad84:	2308      	movs	r3, #8
 800ad86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad8a:	e048      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ad8c:	2310      	movs	r3, #16
 800ad8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad92:	e044      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ad94:	2320      	movs	r3, #32
 800ad96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad9a:	e040      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ad9c:	2340      	movs	r3, #64	@ 0x40
 800ad9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ada2:	e03c      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ada4:	2380      	movs	r3, #128	@ 0x80
 800ada6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adaa:	e038      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a5b      	ldr	r2, [pc, #364]	@ (800af20 <UART_SetConfig+0x6a8>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d130      	bne.n	800ae18 <UART_SetConfig+0x5a0>
 800adb6:	4b57      	ldr	r3, [pc, #348]	@ (800af14 <UART_SetConfig+0x69c>)
 800adb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adba:	f003 0307 	and.w	r3, r3, #7
 800adbe:	2b05      	cmp	r3, #5
 800adc0:	d826      	bhi.n	800ae10 <UART_SetConfig+0x598>
 800adc2:	a201      	add	r2, pc, #4	@ (adr r2, 800adc8 <UART_SetConfig+0x550>)
 800adc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc8:	0800ade1 	.word	0x0800ade1
 800adcc:	0800ade9 	.word	0x0800ade9
 800add0:	0800adf1 	.word	0x0800adf1
 800add4:	0800adf9 	.word	0x0800adf9
 800add8:	0800ae01 	.word	0x0800ae01
 800addc:	0800ae09 	.word	0x0800ae09
 800ade0:	2302      	movs	r3, #2
 800ade2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ade6:	e01a      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ade8:	2304      	movs	r3, #4
 800adea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adee:	e016      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800adf0:	2308      	movs	r3, #8
 800adf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adf6:	e012      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800adf8:	2310      	movs	r3, #16
 800adfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adfe:	e00e      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ae00:	2320      	movs	r3, #32
 800ae02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae06:	e00a      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ae08:	2340      	movs	r3, #64	@ 0x40
 800ae0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae0e:	e006      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ae10:	2380      	movs	r3, #128	@ 0x80
 800ae12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae16:	e002      	b.n	800ae1e <UART_SetConfig+0x5a6>
 800ae18:	2380      	movs	r3, #128	@ 0x80
 800ae1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a3f      	ldr	r2, [pc, #252]	@ (800af20 <UART_SetConfig+0x6a8>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	f040 80f8 	bne.w	800b01a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ae2a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ae2e:	2b20      	cmp	r3, #32
 800ae30:	dc46      	bgt.n	800aec0 <UART_SetConfig+0x648>
 800ae32:	2b02      	cmp	r3, #2
 800ae34:	f2c0 8082 	blt.w	800af3c <UART_SetConfig+0x6c4>
 800ae38:	3b02      	subs	r3, #2
 800ae3a:	2b1e      	cmp	r3, #30
 800ae3c:	d87e      	bhi.n	800af3c <UART_SetConfig+0x6c4>
 800ae3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ae44 <UART_SetConfig+0x5cc>)
 800ae40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae44:	0800aec7 	.word	0x0800aec7
 800ae48:	0800af3d 	.word	0x0800af3d
 800ae4c:	0800aecf 	.word	0x0800aecf
 800ae50:	0800af3d 	.word	0x0800af3d
 800ae54:	0800af3d 	.word	0x0800af3d
 800ae58:	0800af3d 	.word	0x0800af3d
 800ae5c:	0800aedf 	.word	0x0800aedf
 800ae60:	0800af3d 	.word	0x0800af3d
 800ae64:	0800af3d 	.word	0x0800af3d
 800ae68:	0800af3d 	.word	0x0800af3d
 800ae6c:	0800af3d 	.word	0x0800af3d
 800ae70:	0800af3d 	.word	0x0800af3d
 800ae74:	0800af3d 	.word	0x0800af3d
 800ae78:	0800af3d 	.word	0x0800af3d
 800ae7c:	0800aeef 	.word	0x0800aeef
 800ae80:	0800af3d 	.word	0x0800af3d
 800ae84:	0800af3d 	.word	0x0800af3d
 800ae88:	0800af3d 	.word	0x0800af3d
 800ae8c:	0800af3d 	.word	0x0800af3d
 800ae90:	0800af3d 	.word	0x0800af3d
 800ae94:	0800af3d 	.word	0x0800af3d
 800ae98:	0800af3d 	.word	0x0800af3d
 800ae9c:	0800af3d 	.word	0x0800af3d
 800aea0:	0800af3d 	.word	0x0800af3d
 800aea4:	0800af3d 	.word	0x0800af3d
 800aea8:	0800af3d 	.word	0x0800af3d
 800aeac:	0800af3d 	.word	0x0800af3d
 800aeb0:	0800af3d 	.word	0x0800af3d
 800aeb4:	0800af3d 	.word	0x0800af3d
 800aeb8:	0800af3d 	.word	0x0800af3d
 800aebc:	0800af2f 	.word	0x0800af2f
 800aec0:	2b40      	cmp	r3, #64	@ 0x40
 800aec2:	d037      	beq.n	800af34 <UART_SetConfig+0x6bc>
 800aec4:	e03a      	b.n	800af3c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aec6:	f7fd f8b1 	bl	800802c <HAL_RCCEx_GetD3PCLK1Freq>
 800aeca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aecc:	e03c      	b.n	800af48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aece:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7fd f8c0 	bl	8008058 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aedc:	e034      	b.n	800af48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aede:	f107 0318 	add.w	r3, r7, #24
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fd fa0c 	bl	8008300 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeec:	e02c      	b.n	800af48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aeee:	4b09      	ldr	r3, [pc, #36]	@ (800af14 <UART_SetConfig+0x69c>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f003 0320 	and.w	r3, r3, #32
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d016      	beq.n	800af28 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aefa:	4b06      	ldr	r3, [pc, #24]	@ (800af14 <UART_SetConfig+0x69c>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	08db      	lsrs	r3, r3, #3
 800af00:	f003 0303 	and.w	r3, r3, #3
 800af04:	4a07      	ldr	r2, [pc, #28]	@ (800af24 <UART_SetConfig+0x6ac>)
 800af06:	fa22 f303 	lsr.w	r3, r2, r3
 800af0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af0c:	e01c      	b.n	800af48 <UART_SetConfig+0x6d0>
 800af0e:	bf00      	nop
 800af10:	40011400 	.word	0x40011400
 800af14:	58024400 	.word	0x58024400
 800af18:	40007800 	.word	0x40007800
 800af1c:	40007c00 	.word	0x40007c00
 800af20:	58000c00 	.word	0x58000c00
 800af24:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800af28:	4b9d      	ldr	r3, [pc, #628]	@ (800b1a0 <UART_SetConfig+0x928>)
 800af2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af2c:	e00c      	b.n	800af48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af2e:	4b9d      	ldr	r3, [pc, #628]	@ (800b1a4 <UART_SetConfig+0x92c>)
 800af30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af32:	e009      	b.n	800af48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af3a:	e005      	b.n	800af48 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800af3c:	2300      	movs	r3, #0
 800af3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800af46:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800af48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	f000 81de 	beq.w	800b30c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af54:	4a94      	ldr	r2, [pc, #592]	@ (800b1a8 <UART_SetConfig+0x930>)
 800af56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af5a:	461a      	mov	r2, r3
 800af5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af5e:	fbb3 f3f2 	udiv	r3, r3, r2
 800af62:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	685a      	ldr	r2, [r3, #4]
 800af68:	4613      	mov	r3, r2
 800af6a:	005b      	lsls	r3, r3, #1
 800af6c:	4413      	add	r3, r2
 800af6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af70:	429a      	cmp	r2, r3
 800af72:	d305      	bcc.n	800af80 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d903      	bls.n	800af88 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800af80:	2301      	movs	r3, #1
 800af82:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800af86:	e1c1      	b.n	800b30c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af8a:	2200      	movs	r2, #0
 800af8c:	60bb      	str	r3, [r7, #8]
 800af8e:	60fa      	str	r2, [r7, #12]
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af94:	4a84      	ldr	r2, [pc, #528]	@ (800b1a8 <UART_SetConfig+0x930>)
 800af96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	2200      	movs	r2, #0
 800af9e:	603b      	str	r3, [r7, #0]
 800afa0:	607a      	str	r2, [r7, #4]
 800afa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afa6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800afaa:	f7f5 f9f1 	bl	8000390 <__aeabi_uldivmod>
 800afae:	4602      	mov	r2, r0
 800afb0:	460b      	mov	r3, r1
 800afb2:	4610      	mov	r0, r2
 800afb4:	4619      	mov	r1, r3
 800afb6:	f04f 0200 	mov.w	r2, #0
 800afba:	f04f 0300 	mov.w	r3, #0
 800afbe:	020b      	lsls	r3, r1, #8
 800afc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800afc4:	0202      	lsls	r2, r0, #8
 800afc6:	6979      	ldr	r1, [r7, #20]
 800afc8:	6849      	ldr	r1, [r1, #4]
 800afca:	0849      	lsrs	r1, r1, #1
 800afcc:	2000      	movs	r0, #0
 800afce:	460c      	mov	r4, r1
 800afd0:	4605      	mov	r5, r0
 800afd2:	eb12 0804 	adds.w	r8, r2, r4
 800afd6:	eb43 0905 	adc.w	r9, r3, r5
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	469a      	mov	sl, r3
 800afe2:	4693      	mov	fp, r2
 800afe4:	4652      	mov	r2, sl
 800afe6:	465b      	mov	r3, fp
 800afe8:	4640      	mov	r0, r8
 800afea:	4649      	mov	r1, r9
 800afec:	f7f5 f9d0 	bl	8000390 <__aeabi_uldivmod>
 800aff0:	4602      	mov	r2, r0
 800aff2:	460b      	mov	r3, r1
 800aff4:	4613      	mov	r3, r2
 800aff6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800affa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800affe:	d308      	bcc.n	800b012 <UART_SetConfig+0x79a>
 800b000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b002:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b006:	d204      	bcs.n	800b012 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b00e:	60da      	str	r2, [r3, #12]
 800b010:	e17c      	b.n	800b30c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b012:	2301      	movs	r3, #1
 800b014:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b018:	e178      	b.n	800b30c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	69db      	ldr	r3, [r3, #28]
 800b01e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b022:	f040 80c5 	bne.w	800b1b0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b026:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b02a:	2b20      	cmp	r3, #32
 800b02c:	dc48      	bgt.n	800b0c0 <UART_SetConfig+0x848>
 800b02e:	2b00      	cmp	r3, #0
 800b030:	db7b      	blt.n	800b12a <UART_SetConfig+0x8b2>
 800b032:	2b20      	cmp	r3, #32
 800b034:	d879      	bhi.n	800b12a <UART_SetConfig+0x8b2>
 800b036:	a201      	add	r2, pc, #4	@ (adr r2, 800b03c <UART_SetConfig+0x7c4>)
 800b038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b03c:	0800b0c7 	.word	0x0800b0c7
 800b040:	0800b0cf 	.word	0x0800b0cf
 800b044:	0800b12b 	.word	0x0800b12b
 800b048:	0800b12b 	.word	0x0800b12b
 800b04c:	0800b0d7 	.word	0x0800b0d7
 800b050:	0800b12b 	.word	0x0800b12b
 800b054:	0800b12b 	.word	0x0800b12b
 800b058:	0800b12b 	.word	0x0800b12b
 800b05c:	0800b0e7 	.word	0x0800b0e7
 800b060:	0800b12b 	.word	0x0800b12b
 800b064:	0800b12b 	.word	0x0800b12b
 800b068:	0800b12b 	.word	0x0800b12b
 800b06c:	0800b12b 	.word	0x0800b12b
 800b070:	0800b12b 	.word	0x0800b12b
 800b074:	0800b12b 	.word	0x0800b12b
 800b078:	0800b12b 	.word	0x0800b12b
 800b07c:	0800b0f7 	.word	0x0800b0f7
 800b080:	0800b12b 	.word	0x0800b12b
 800b084:	0800b12b 	.word	0x0800b12b
 800b088:	0800b12b 	.word	0x0800b12b
 800b08c:	0800b12b 	.word	0x0800b12b
 800b090:	0800b12b 	.word	0x0800b12b
 800b094:	0800b12b 	.word	0x0800b12b
 800b098:	0800b12b 	.word	0x0800b12b
 800b09c:	0800b12b 	.word	0x0800b12b
 800b0a0:	0800b12b 	.word	0x0800b12b
 800b0a4:	0800b12b 	.word	0x0800b12b
 800b0a8:	0800b12b 	.word	0x0800b12b
 800b0ac:	0800b12b 	.word	0x0800b12b
 800b0b0:	0800b12b 	.word	0x0800b12b
 800b0b4:	0800b12b 	.word	0x0800b12b
 800b0b8:	0800b12b 	.word	0x0800b12b
 800b0bc:	0800b11d 	.word	0x0800b11d
 800b0c0:	2b40      	cmp	r3, #64	@ 0x40
 800b0c2:	d02e      	beq.n	800b122 <UART_SetConfig+0x8aa>
 800b0c4:	e031      	b.n	800b12a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0c6:	f7fb fd7b 	bl	8006bc0 <HAL_RCC_GetPCLK1Freq>
 800b0ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0cc:	e033      	b.n	800b136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b0ce:	f7fb fd8d 	bl	8006bec <HAL_RCC_GetPCLK2Freq>
 800b0d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0d4:	e02f      	b.n	800b136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7fc ffbc 	bl	8008058 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b0e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0e4:	e027      	b.n	800b136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0e6:	f107 0318 	add.w	r3, r7, #24
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7fd f908 	bl	8008300 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0f4:	e01f      	b.n	800b136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0f6:	4b2d      	ldr	r3, [pc, #180]	@ (800b1ac <UART_SetConfig+0x934>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f003 0320 	and.w	r3, r3, #32
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d009      	beq.n	800b116 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b102:	4b2a      	ldr	r3, [pc, #168]	@ (800b1ac <UART_SetConfig+0x934>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	08db      	lsrs	r3, r3, #3
 800b108:	f003 0303 	and.w	r3, r3, #3
 800b10c:	4a24      	ldr	r2, [pc, #144]	@ (800b1a0 <UART_SetConfig+0x928>)
 800b10e:	fa22 f303 	lsr.w	r3, r2, r3
 800b112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b114:	e00f      	b.n	800b136 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b116:	4b22      	ldr	r3, [pc, #136]	@ (800b1a0 <UART_SetConfig+0x928>)
 800b118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b11a:	e00c      	b.n	800b136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b11c:	4b21      	ldr	r3, [pc, #132]	@ (800b1a4 <UART_SetConfig+0x92c>)
 800b11e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b120:	e009      	b.n	800b136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b122:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b128:	e005      	b.n	800b136 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b12a:	2300      	movs	r3, #0
 800b12c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b12e:	2301      	movs	r3, #1
 800b130:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b134:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f000 80e7 	beq.w	800b30c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b142:	4a19      	ldr	r2, [pc, #100]	@ (800b1a8 <UART_SetConfig+0x930>)
 800b144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b148:	461a      	mov	r2, r3
 800b14a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b14c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b150:	005a      	lsls	r2, r3, #1
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	085b      	lsrs	r3, r3, #1
 800b158:	441a      	add	r2, r3
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b162:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b166:	2b0f      	cmp	r3, #15
 800b168:	d916      	bls.n	800b198 <UART_SetConfig+0x920>
 800b16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b16c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b170:	d212      	bcs.n	800b198 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b174:	b29b      	uxth	r3, r3
 800b176:	f023 030f 	bic.w	r3, r3, #15
 800b17a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b17e:	085b      	lsrs	r3, r3, #1
 800b180:	b29b      	uxth	r3, r3
 800b182:	f003 0307 	and.w	r3, r3, #7
 800b186:	b29a      	uxth	r2, r3
 800b188:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b18a:	4313      	orrs	r3, r2
 800b18c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b194:	60da      	str	r2, [r3, #12]
 800b196:	e0b9      	b.n	800b30c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b198:	2301      	movs	r3, #1
 800b19a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b19e:	e0b5      	b.n	800b30c <UART_SetConfig+0xa94>
 800b1a0:	03d09000 	.word	0x03d09000
 800b1a4:	003d0900 	.word	0x003d0900
 800b1a8:	0800f1e0 	.word	0x0800f1e0
 800b1ac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b1b0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b1b4:	2b20      	cmp	r3, #32
 800b1b6:	dc49      	bgt.n	800b24c <UART_SetConfig+0x9d4>
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	db7c      	blt.n	800b2b6 <UART_SetConfig+0xa3e>
 800b1bc:	2b20      	cmp	r3, #32
 800b1be:	d87a      	bhi.n	800b2b6 <UART_SetConfig+0xa3e>
 800b1c0:	a201      	add	r2, pc, #4	@ (adr r2, 800b1c8 <UART_SetConfig+0x950>)
 800b1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c6:	bf00      	nop
 800b1c8:	0800b253 	.word	0x0800b253
 800b1cc:	0800b25b 	.word	0x0800b25b
 800b1d0:	0800b2b7 	.word	0x0800b2b7
 800b1d4:	0800b2b7 	.word	0x0800b2b7
 800b1d8:	0800b263 	.word	0x0800b263
 800b1dc:	0800b2b7 	.word	0x0800b2b7
 800b1e0:	0800b2b7 	.word	0x0800b2b7
 800b1e4:	0800b2b7 	.word	0x0800b2b7
 800b1e8:	0800b273 	.word	0x0800b273
 800b1ec:	0800b2b7 	.word	0x0800b2b7
 800b1f0:	0800b2b7 	.word	0x0800b2b7
 800b1f4:	0800b2b7 	.word	0x0800b2b7
 800b1f8:	0800b2b7 	.word	0x0800b2b7
 800b1fc:	0800b2b7 	.word	0x0800b2b7
 800b200:	0800b2b7 	.word	0x0800b2b7
 800b204:	0800b2b7 	.word	0x0800b2b7
 800b208:	0800b283 	.word	0x0800b283
 800b20c:	0800b2b7 	.word	0x0800b2b7
 800b210:	0800b2b7 	.word	0x0800b2b7
 800b214:	0800b2b7 	.word	0x0800b2b7
 800b218:	0800b2b7 	.word	0x0800b2b7
 800b21c:	0800b2b7 	.word	0x0800b2b7
 800b220:	0800b2b7 	.word	0x0800b2b7
 800b224:	0800b2b7 	.word	0x0800b2b7
 800b228:	0800b2b7 	.word	0x0800b2b7
 800b22c:	0800b2b7 	.word	0x0800b2b7
 800b230:	0800b2b7 	.word	0x0800b2b7
 800b234:	0800b2b7 	.word	0x0800b2b7
 800b238:	0800b2b7 	.word	0x0800b2b7
 800b23c:	0800b2b7 	.word	0x0800b2b7
 800b240:	0800b2b7 	.word	0x0800b2b7
 800b244:	0800b2b7 	.word	0x0800b2b7
 800b248:	0800b2a9 	.word	0x0800b2a9
 800b24c:	2b40      	cmp	r3, #64	@ 0x40
 800b24e:	d02e      	beq.n	800b2ae <UART_SetConfig+0xa36>
 800b250:	e031      	b.n	800b2b6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b252:	f7fb fcb5 	bl	8006bc0 <HAL_RCC_GetPCLK1Freq>
 800b256:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b258:	e033      	b.n	800b2c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b25a:	f7fb fcc7 	bl	8006bec <HAL_RCC_GetPCLK2Freq>
 800b25e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b260:	e02f      	b.n	800b2c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b262:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b266:	4618      	mov	r0, r3
 800b268:	f7fc fef6 	bl	8008058 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b270:	e027      	b.n	800b2c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b272:	f107 0318 	add.w	r3, r7, #24
 800b276:	4618      	mov	r0, r3
 800b278:	f7fd f842 	bl	8008300 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b280:	e01f      	b.n	800b2c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b282:	4b2d      	ldr	r3, [pc, #180]	@ (800b338 <UART_SetConfig+0xac0>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f003 0320 	and.w	r3, r3, #32
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d009      	beq.n	800b2a2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b28e:	4b2a      	ldr	r3, [pc, #168]	@ (800b338 <UART_SetConfig+0xac0>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	08db      	lsrs	r3, r3, #3
 800b294:	f003 0303 	and.w	r3, r3, #3
 800b298:	4a28      	ldr	r2, [pc, #160]	@ (800b33c <UART_SetConfig+0xac4>)
 800b29a:	fa22 f303 	lsr.w	r3, r2, r3
 800b29e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b2a0:	e00f      	b.n	800b2c2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b2a2:	4b26      	ldr	r3, [pc, #152]	@ (800b33c <UART_SetConfig+0xac4>)
 800b2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2a6:	e00c      	b.n	800b2c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b2a8:	4b25      	ldr	r3, [pc, #148]	@ (800b340 <UART_SetConfig+0xac8>)
 800b2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2ac:	e009      	b.n	800b2c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2b4:	e005      	b.n	800b2c2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b2c0:	bf00      	nop
    }

    if (pclk != 0U)
 800b2c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d021      	beq.n	800b30c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2cc:	4a1d      	ldr	r2, [pc, #116]	@ (800b344 <UART_SetConfig+0xacc>)
 800b2ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2d6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	085b      	lsrs	r3, r3, #1
 800b2e0:	441a      	add	r2, r3
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ee:	2b0f      	cmp	r3, #15
 800b2f0:	d909      	bls.n	800b306 <UART_SetConfig+0xa8e>
 800b2f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2f8:	d205      	bcs.n	800b306 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b2fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2fc:	b29a      	uxth	r2, r3
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	60da      	str	r2, [r3, #12]
 800b304:	e002      	b.n	800b30c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b306:	2301      	movs	r3, #1
 800b308:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	2201      	movs	r2, #1
 800b310:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	2201      	movs	r2, #1
 800b318:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	2200      	movs	r2, #0
 800b320:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	2200      	movs	r2, #0
 800b326:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b328:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3748      	adds	r7, #72	@ 0x48
 800b330:	46bd      	mov	sp, r7
 800b332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b336:	bf00      	nop
 800b338:	58024400 	.word	0x58024400
 800b33c:	03d09000 	.word	0x03d09000
 800b340:	003d0900 	.word	0x003d0900
 800b344:	0800f1e0 	.word	0x0800f1e0

0800b348 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b354:	f003 0308 	and.w	r3, r3, #8
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00a      	beq.n	800b372 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	430a      	orrs	r2, r1
 800b370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b376:	f003 0301 	and.w	r3, r3, #1
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d00a      	beq.n	800b394 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	430a      	orrs	r2, r1
 800b392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b398:	f003 0302 	and.w	r3, r3, #2
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00a      	beq.n	800b3b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	430a      	orrs	r2, r1
 800b3b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ba:	f003 0304 	and.w	r3, r3, #4
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d00a      	beq.n	800b3d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	430a      	orrs	r2, r1
 800b3d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3dc:	f003 0310 	and.w	r3, r3, #16
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d00a      	beq.n	800b3fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	689b      	ldr	r3, [r3, #8]
 800b3ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	430a      	orrs	r2, r1
 800b3f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3fe:	f003 0320 	and.w	r3, r3, #32
 800b402:	2b00      	cmp	r3, #0
 800b404:	d00a      	beq.n	800b41c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	430a      	orrs	r2, r1
 800b41a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b424:	2b00      	cmp	r3, #0
 800b426:	d01a      	beq.n	800b45e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	430a      	orrs	r2, r1
 800b43c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b442:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b446:	d10a      	bne.n	800b45e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	430a      	orrs	r2, r1
 800b45c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00a      	beq.n	800b480 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	430a      	orrs	r2, r1
 800b47e:	605a      	str	r2, [r3, #4]
  }
}
 800b480:	bf00      	nop
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b098      	sub	sp, #96	@ 0x60
 800b490:	af02      	add	r7, sp, #8
 800b492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b49c:	f7f7 fd90 	bl	8002fc0 <HAL_GetTick>
 800b4a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f003 0308 	and.w	r3, r3, #8
 800b4ac:	2b08      	cmp	r3, #8
 800b4ae:	d12f      	bne.n	800b510 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b4b4:	9300      	str	r3, [sp, #0]
 800b4b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 f88e 	bl	800b5e0 <UART_WaitOnFlagUntilTimeout>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d022      	beq.n	800b510 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d2:	e853 3f00 	ldrex	r3, [r3]
 800b4d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b4d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b4de:	653b      	str	r3, [r7, #80]	@ 0x50
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b4ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b4ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b4f0:	e841 2300 	strex	r3, r2, [r1]
 800b4f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b4f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d1e6      	bne.n	800b4ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2220      	movs	r2, #32
 800b500:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2200      	movs	r2, #0
 800b508:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b50c:	2303      	movs	r3, #3
 800b50e:	e063      	b.n	800b5d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f003 0304 	and.w	r3, r3, #4
 800b51a:	2b04      	cmp	r3, #4
 800b51c:	d149      	bne.n	800b5b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b51e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b522:	9300      	str	r3, [sp, #0]
 800b524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b526:	2200      	movs	r2, #0
 800b528:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 f857 	bl	800b5e0 <UART_WaitOnFlagUntilTimeout>
 800b532:	4603      	mov	r3, r0
 800b534:	2b00      	cmp	r3, #0
 800b536:	d03c      	beq.n	800b5b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b540:	e853 3f00 	ldrex	r3, [r3]
 800b544:	623b      	str	r3, [r7, #32]
   return(result);
 800b546:	6a3b      	ldr	r3, [r7, #32]
 800b548:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b54c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	461a      	mov	r2, r3
 800b554:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b556:	633b      	str	r3, [r7, #48]	@ 0x30
 800b558:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b55a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b55c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b55e:	e841 2300 	strex	r3, r2, [r1]
 800b562:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1e6      	bne.n	800b538 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	3308      	adds	r3, #8
 800b570:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	e853 3f00 	ldrex	r3, [r3]
 800b578:	60fb      	str	r3, [r7, #12]
   return(result);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f023 0301 	bic.w	r3, r3, #1
 800b580:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	3308      	adds	r3, #8
 800b588:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b58a:	61fa      	str	r2, [r7, #28]
 800b58c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58e:	69b9      	ldr	r1, [r7, #24]
 800b590:	69fa      	ldr	r2, [r7, #28]
 800b592:	e841 2300 	strex	r3, r2, [r1]
 800b596:	617b      	str	r3, [r7, #20]
   return(result);
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d1e5      	bne.n	800b56a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2220      	movs	r2, #32
 800b5a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5ae:	2303      	movs	r3, #3
 800b5b0:	e012      	b.n	800b5d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2220      	movs	r2, #32
 800b5b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2220      	movs	r2, #32
 800b5be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3758      	adds	r7, #88	@ 0x58
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	603b      	str	r3, [r7, #0]
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5f0:	e04f      	b.n	800b692 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5f2:	69bb      	ldr	r3, [r7, #24]
 800b5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f8:	d04b      	beq.n	800b692 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5fa:	f7f7 fce1 	bl	8002fc0 <HAL_GetTick>
 800b5fe:	4602      	mov	r2, r0
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	1ad3      	subs	r3, r2, r3
 800b604:	69ba      	ldr	r2, [r7, #24]
 800b606:	429a      	cmp	r2, r3
 800b608:	d302      	bcc.n	800b610 <UART_WaitOnFlagUntilTimeout+0x30>
 800b60a:	69bb      	ldr	r3, [r7, #24]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d101      	bne.n	800b614 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b610:	2303      	movs	r3, #3
 800b612:	e04e      	b.n	800b6b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f003 0304 	and.w	r3, r3, #4
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d037      	beq.n	800b692 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	2b80      	cmp	r3, #128	@ 0x80
 800b626:	d034      	beq.n	800b692 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	2b40      	cmp	r3, #64	@ 0x40
 800b62c:	d031      	beq.n	800b692 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	69db      	ldr	r3, [r3, #28]
 800b634:	f003 0308 	and.w	r3, r3, #8
 800b638:	2b08      	cmp	r3, #8
 800b63a:	d110      	bne.n	800b65e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2208      	movs	r2, #8
 800b642:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b644:	68f8      	ldr	r0, [r7, #12]
 800b646:	f000 f839 	bl	800b6bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2208      	movs	r2, #8
 800b64e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2200      	movs	r2, #0
 800b656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b65a:	2301      	movs	r3, #1
 800b65c:	e029      	b.n	800b6b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	69db      	ldr	r3, [r3, #28]
 800b664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b66c:	d111      	bne.n	800b692 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b676:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f000 f81f 	bl	800b6bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2220      	movs	r2, #32
 800b682:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2200      	movs	r2, #0
 800b68a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b68e:	2303      	movs	r3, #3
 800b690:	e00f      	b.n	800b6b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	69da      	ldr	r2, [r3, #28]
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	4013      	ands	r3, r2
 800b69c:	68ba      	ldr	r2, [r7, #8]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	bf0c      	ite	eq
 800b6a2:	2301      	moveq	r3, #1
 800b6a4:	2300      	movne	r3, #0
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	79fb      	ldrb	r3, [r7, #7]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d0a0      	beq.n	800b5f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b6b0:	2300      	movs	r3, #0
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
	...

0800b6bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b095      	sub	sp, #84	@ 0x54
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6cc:	e853 3f00 	ldrex	r3, [r3]
 800b6d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b6d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	461a      	mov	r2, r3
 800b6e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800b6e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b6e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b6ea:	e841 2300 	strex	r3, r2, [r1]
 800b6ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b6f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d1e6      	bne.n	800b6c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	3308      	adds	r3, #8
 800b6fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6fe:	6a3b      	ldr	r3, [r7, #32]
 800b700:	e853 3f00 	ldrex	r3, [r3]
 800b704:	61fb      	str	r3, [r7, #28]
   return(result);
 800b706:	69fa      	ldr	r2, [r7, #28]
 800b708:	4b1e      	ldr	r3, [pc, #120]	@ (800b784 <UART_EndRxTransfer+0xc8>)
 800b70a:	4013      	ands	r3, r2
 800b70c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	3308      	adds	r3, #8
 800b714:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b716:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b718:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b71a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b71c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b71e:	e841 2300 	strex	r3, r2, [r1]
 800b722:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b726:	2b00      	cmp	r3, #0
 800b728:	d1e5      	bne.n	800b6f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d118      	bne.n	800b764 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	e853 3f00 	ldrex	r3, [r3]
 800b73e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	f023 0310 	bic.w	r3, r3, #16
 800b746:	647b      	str	r3, [r7, #68]	@ 0x44
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	461a      	mov	r2, r3
 800b74e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b750:	61bb      	str	r3, [r7, #24]
 800b752:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b754:	6979      	ldr	r1, [r7, #20]
 800b756:	69ba      	ldr	r2, [r7, #24]
 800b758:	e841 2300 	strex	r3, r2, [r1]
 800b75c:	613b      	str	r3, [r7, #16]
   return(result);
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d1e6      	bne.n	800b732 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2220      	movs	r2, #32
 800b768:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2200      	movs	r2, #0
 800b776:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b778:	bf00      	nop
 800b77a:	3754      	adds	r7, #84	@ 0x54
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr
 800b784:	effffffe 	.word	0xeffffffe

0800b788 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b794:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2200      	movs	r2, #0
 800b79a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7a6:	68f8      	ldr	r0, [r7, #12]
 800b7a8:	f7ff f850 	bl	800a84c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7ac:	bf00      	nop
 800b7ae:	3710      	adds	r7, #16
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b088      	sub	sp, #32
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	e853 3f00 	ldrex	r3, [r3]
 800b7c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7d0:	61fb      	str	r3, [r7, #28]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	61bb      	str	r3, [r7, #24]
 800b7dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7de:	6979      	ldr	r1, [r7, #20]
 800b7e0:	69ba      	ldr	r2, [r7, #24]
 800b7e2:	e841 2300 	strex	r3, r2, [r1]
 800b7e6:	613b      	str	r3, [r7, #16]
   return(result);
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d1e6      	bne.n	800b7bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2220      	movs	r2, #32
 800b7f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f7ff f81b 	bl	800a838 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b802:	bf00      	nop
 800b804:	3720      	adds	r7, #32
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}

0800b80a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b80a:	b480      	push	{r7}
 800b80c:	b083      	sub	sp, #12
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b812:	bf00      	nop
 800b814:	370c      	adds	r7, #12
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr

0800b81e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b81e:	b480      	push	{r7}
 800b820:	b083      	sub	sp, #12
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b826:	bf00      	nop
 800b828:	370c      	adds	r7, #12
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr

0800b832 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b832:	b480      	push	{r7}
 800b834:	b083      	sub	sp, #12
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b83a:	bf00      	nop
 800b83c:	370c      	adds	r7, #12
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr

0800b846 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b846:	b480      	push	{r7}
 800b848:	b085      	sub	sp, #20
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b854:	2b01      	cmp	r3, #1
 800b856:	d101      	bne.n	800b85c <HAL_UARTEx_DisableFifoMode+0x16>
 800b858:	2302      	movs	r3, #2
 800b85a:	e027      	b.n	800b8ac <HAL_UARTEx_DisableFifoMode+0x66>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2201      	movs	r2, #1
 800b860:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2224      	movs	r2, #36	@ 0x24
 800b868:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f022 0201 	bic.w	r2, r2, #1
 800b882:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b88a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2200      	movs	r2, #0
 800b890:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2220      	movs	r2, #32
 800b89e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8aa:	2300      	movs	r3, #0
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3714      	adds	r7, #20
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d101      	bne.n	800b8d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b8cc:	2302      	movs	r3, #2
 800b8ce:	e02d      	b.n	800b92c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2224      	movs	r2, #36	@ 0x24
 800b8dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f022 0201 	bic.w	r2, r2, #1
 800b8f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	683a      	ldr	r2, [r7, #0]
 800b908:	430a      	orrs	r2, r1
 800b90a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 f84f 	bl	800b9b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	68fa      	ldr	r2, [r7, #12]
 800b918:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2220      	movs	r2, #32
 800b91e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3710      	adds	r7, #16
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b944:	2b01      	cmp	r3, #1
 800b946:	d101      	bne.n	800b94c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b948:	2302      	movs	r3, #2
 800b94a:	e02d      	b.n	800b9a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2201      	movs	r2, #1
 800b950:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2224      	movs	r2, #36	@ 0x24
 800b958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f022 0201 	bic.w	r2, r2, #1
 800b972:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	689b      	ldr	r3, [r3, #8]
 800b97a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	683a      	ldr	r2, [r7, #0]
 800b984:	430a      	orrs	r2, r1
 800b986:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 f811 	bl	800b9b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	68fa      	ldr	r2, [r7, #12]
 800b994:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2220      	movs	r2, #32
 800b99a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9a6:	2300      	movs	r3, #0
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3710      	adds	r7, #16
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b085      	sub	sp, #20
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d108      	bne.n	800b9d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b9d0:	e031      	b.n	800ba36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b9d2:	2310      	movs	r3, #16
 800b9d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b9d6:	2310      	movs	r3, #16
 800b9d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	689b      	ldr	r3, [r3, #8]
 800b9e0:	0e5b      	lsrs	r3, r3, #25
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	f003 0307 	and.w	r3, r3, #7
 800b9e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	689b      	ldr	r3, [r3, #8]
 800b9f0:	0f5b      	lsrs	r3, r3, #29
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	f003 0307 	and.w	r3, r3, #7
 800b9f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b9fa:	7bbb      	ldrb	r3, [r7, #14]
 800b9fc:	7b3a      	ldrb	r2, [r7, #12]
 800b9fe:	4911      	ldr	r1, [pc, #68]	@ (800ba44 <UARTEx_SetNbDataToProcess+0x94>)
 800ba00:	5c8a      	ldrb	r2, [r1, r2]
 800ba02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ba06:	7b3a      	ldrb	r2, [r7, #12]
 800ba08:	490f      	ldr	r1, [pc, #60]	@ (800ba48 <UARTEx_SetNbDataToProcess+0x98>)
 800ba0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba0c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba10:	b29a      	uxth	r2, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba18:	7bfb      	ldrb	r3, [r7, #15]
 800ba1a:	7b7a      	ldrb	r2, [r7, #13]
 800ba1c:	4909      	ldr	r1, [pc, #36]	@ (800ba44 <UARTEx_SetNbDataToProcess+0x94>)
 800ba1e:	5c8a      	ldrb	r2, [r1, r2]
 800ba20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ba24:	7b7a      	ldrb	r2, [r7, #13]
 800ba26:	4908      	ldr	r1, [pc, #32]	@ (800ba48 <UARTEx_SetNbDataToProcess+0x98>)
 800ba28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba2a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba2e:	b29a      	uxth	r2, r3
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ba36:	bf00      	nop
 800ba38:	3714      	adds	r7, #20
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop
 800ba44:	0800f1f8 	.word	0x0800f1f8
 800ba48:	0800f200 	.word	0x0800f200

0800ba4c <__cvt>:
 800ba4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba4e:	ed2d 8b02 	vpush	{d8}
 800ba52:	eeb0 8b40 	vmov.f64	d8, d0
 800ba56:	b085      	sub	sp, #20
 800ba58:	4617      	mov	r7, r2
 800ba5a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800ba5c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ba5e:	ee18 2a90 	vmov	r2, s17
 800ba62:	f025 0520 	bic.w	r5, r5, #32
 800ba66:	2a00      	cmp	r2, #0
 800ba68:	bfb6      	itet	lt
 800ba6a:	222d      	movlt	r2, #45	@ 0x2d
 800ba6c:	2200      	movge	r2, #0
 800ba6e:	eeb1 8b40 	vneglt.f64	d8, d0
 800ba72:	2d46      	cmp	r5, #70	@ 0x46
 800ba74:	460c      	mov	r4, r1
 800ba76:	701a      	strb	r2, [r3, #0]
 800ba78:	d004      	beq.n	800ba84 <__cvt+0x38>
 800ba7a:	2d45      	cmp	r5, #69	@ 0x45
 800ba7c:	d100      	bne.n	800ba80 <__cvt+0x34>
 800ba7e:	3401      	adds	r4, #1
 800ba80:	2102      	movs	r1, #2
 800ba82:	e000      	b.n	800ba86 <__cvt+0x3a>
 800ba84:	2103      	movs	r1, #3
 800ba86:	ab03      	add	r3, sp, #12
 800ba88:	9301      	str	r3, [sp, #4]
 800ba8a:	ab02      	add	r3, sp, #8
 800ba8c:	9300      	str	r3, [sp, #0]
 800ba8e:	4622      	mov	r2, r4
 800ba90:	4633      	mov	r3, r6
 800ba92:	eeb0 0b48 	vmov.f64	d0, d8
 800ba96:	f000 fe4f 	bl	800c738 <_dtoa_r>
 800ba9a:	2d47      	cmp	r5, #71	@ 0x47
 800ba9c:	d114      	bne.n	800bac8 <__cvt+0x7c>
 800ba9e:	07fb      	lsls	r3, r7, #31
 800baa0:	d50a      	bpl.n	800bab8 <__cvt+0x6c>
 800baa2:	1902      	adds	r2, r0, r4
 800baa4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800baa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baac:	bf08      	it	eq
 800baae:	9203      	streq	r2, [sp, #12]
 800bab0:	2130      	movs	r1, #48	@ 0x30
 800bab2:	9b03      	ldr	r3, [sp, #12]
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d319      	bcc.n	800baec <__cvt+0xa0>
 800bab8:	9b03      	ldr	r3, [sp, #12]
 800baba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800babc:	1a1b      	subs	r3, r3, r0
 800babe:	6013      	str	r3, [r2, #0]
 800bac0:	b005      	add	sp, #20
 800bac2:	ecbd 8b02 	vpop	{d8}
 800bac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bac8:	2d46      	cmp	r5, #70	@ 0x46
 800baca:	eb00 0204 	add.w	r2, r0, r4
 800bace:	d1e9      	bne.n	800baa4 <__cvt+0x58>
 800bad0:	7803      	ldrb	r3, [r0, #0]
 800bad2:	2b30      	cmp	r3, #48	@ 0x30
 800bad4:	d107      	bne.n	800bae6 <__cvt+0x9a>
 800bad6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bade:	bf1c      	itt	ne
 800bae0:	f1c4 0401 	rsbne	r4, r4, #1
 800bae4:	6034      	strne	r4, [r6, #0]
 800bae6:	6833      	ldr	r3, [r6, #0]
 800bae8:	441a      	add	r2, r3
 800baea:	e7db      	b.n	800baa4 <__cvt+0x58>
 800baec:	1c5c      	adds	r4, r3, #1
 800baee:	9403      	str	r4, [sp, #12]
 800baf0:	7019      	strb	r1, [r3, #0]
 800baf2:	e7de      	b.n	800bab2 <__cvt+0x66>

0800baf4 <__exponent>:
 800baf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800baf6:	2900      	cmp	r1, #0
 800baf8:	bfba      	itte	lt
 800bafa:	4249      	neglt	r1, r1
 800bafc:	232d      	movlt	r3, #45	@ 0x2d
 800bafe:	232b      	movge	r3, #43	@ 0x2b
 800bb00:	2909      	cmp	r1, #9
 800bb02:	7002      	strb	r2, [r0, #0]
 800bb04:	7043      	strb	r3, [r0, #1]
 800bb06:	dd29      	ble.n	800bb5c <__exponent+0x68>
 800bb08:	f10d 0307 	add.w	r3, sp, #7
 800bb0c:	461d      	mov	r5, r3
 800bb0e:	270a      	movs	r7, #10
 800bb10:	461a      	mov	r2, r3
 800bb12:	fbb1 f6f7 	udiv	r6, r1, r7
 800bb16:	fb07 1416 	mls	r4, r7, r6, r1
 800bb1a:	3430      	adds	r4, #48	@ 0x30
 800bb1c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bb20:	460c      	mov	r4, r1
 800bb22:	2c63      	cmp	r4, #99	@ 0x63
 800bb24:	f103 33ff 	add.w	r3, r3, #4294967295
 800bb28:	4631      	mov	r1, r6
 800bb2a:	dcf1      	bgt.n	800bb10 <__exponent+0x1c>
 800bb2c:	3130      	adds	r1, #48	@ 0x30
 800bb2e:	1e94      	subs	r4, r2, #2
 800bb30:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bb34:	1c41      	adds	r1, r0, #1
 800bb36:	4623      	mov	r3, r4
 800bb38:	42ab      	cmp	r3, r5
 800bb3a:	d30a      	bcc.n	800bb52 <__exponent+0x5e>
 800bb3c:	f10d 0309 	add.w	r3, sp, #9
 800bb40:	1a9b      	subs	r3, r3, r2
 800bb42:	42ac      	cmp	r4, r5
 800bb44:	bf88      	it	hi
 800bb46:	2300      	movhi	r3, #0
 800bb48:	3302      	adds	r3, #2
 800bb4a:	4403      	add	r3, r0
 800bb4c:	1a18      	subs	r0, r3, r0
 800bb4e:	b003      	add	sp, #12
 800bb50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb52:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bb56:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bb5a:	e7ed      	b.n	800bb38 <__exponent+0x44>
 800bb5c:	2330      	movs	r3, #48	@ 0x30
 800bb5e:	3130      	adds	r1, #48	@ 0x30
 800bb60:	7083      	strb	r3, [r0, #2]
 800bb62:	70c1      	strb	r1, [r0, #3]
 800bb64:	1d03      	adds	r3, r0, #4
 800bb66:	e7f1      	b.n	800bb4c <__exponent+0x58>

0800bb68 <_printf_float>:
 800bb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6c:	b08d      	sub	sp, #52	@ 0x34
 800bb6e:	460c      	mov	r4, r1
 800bb70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bb74:	4616      	mov	r6, r2
 800bb76:	461f      	mov	r7, r3
 800bb78:	4605      	mov	r5, r0
 800bb7a:	f000 fcdd 	bl	800c538 <_localeconv_r>
 800bb7e:	f8d0 b000 	ldr.w	fp, [r0]
 800bb82:	4658      	mov	r0, fp
 800bb84:	f7f4 fbfc 	bl	8000380 <strlen>
 800bb88:	2300      	movs	r3, #0
 800bb8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb8c:	f8d8 3000 	ldr.w	r3, [r8]
 800bb90:	f894 9018 	ldrb.w	r9, [r4, #24]
 800bb94:	6822      	ldr	r2, [r4, #0]
 800bb96:	9005      	str	r0, [sp, #20]
 800bb98:	3307      	adds	r3, #7
 800bb9a:	f023 0307 	bic.w	r3, r3, #7
 800bb9e:	f103 0108 	add.w	r1, r3, #8
 800bba2:	f8c8 1000 	str.w	r1, [r8]
 800bba6:	ed93 0b00 	vldr	d0, [r3]
 800bbaa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800be08 <_printf_float+0x2a0>
 800bbae:	eeb0 7bc0 	vabs.f64	d7, d0
 800bbb2:	eeb4 7b46 	vcmp.f64	d7, d6
 800bbb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbba:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800bbbe:	dd24      	ble.n	800bc0a <_printf_float+0xa2>
 800bbc0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bbc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbc8:	d502      	bpl.n	800bbd0 <_printf_float+0x68>
 800bbca:	232d      	movs	r3, #45	@ 0x2d
 800bbcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbd0:	498f      	ldr	r1, [pc, #572]	@ (800be10 <_printf_float+0x2a8>)
 800bbd2:	4b90      	ldr	r3, [pc, #576]	@ (800be14 <_printf_float+0x2ac>)
 800bbd4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800bbd8:	bf94      	ite	ls
 800bbda:	4688      	movls	r8, r1
 800bbdc:	4698      	movhi	r8, r3
 800bbde:	f022 0204 	bic.w	r2, r2, #4
 800bbe2:	2303      	movs	r3, #3
 800bbe4:	6123      	str	r3, [r4, #16]
 800bbe6:	6022      	str	r2, [r4, #0]
 800bbe8:	f04f 0a00 	mov.w	sl, #0
 800bbec:	9700      	str	r7, [sp, #0]
 800bbee:	4633      	mov	r3, r6
 800bbf0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bbf2:	4621      	mov	r1, r4
 800bbf4:	4628      	mov	r0, r5
 800bbf6:	f000 f9d1 	bl	800bf9c <_printf_common>
 800bbfa:	3001      	adds	r0, #1
 800bbfc:	f040 8089 	bne.w	800bd12 <_printf_float+0x1aa>
 800bc00:	f04f 30ff 	mov.w	r0, #4294967295
 800bc04:	b00d      	add	sp, #52	@ 0x34
 800bc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc0a:	eeb4 0b40 	vcmp.f64	d0, d0
 800bc0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc12:	d709      	bvc.n	800bc28 <_printf_float+0xc0>
 800bc14:	ee10 3a90 	vmov	r3, s1
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	bfbc      	itt	lt
 800bc1c:	232d      	movlt	r3, #45	@ 0x2d
 800bc1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bc22:	497d      	ldr	r1, [pc, #500]	@ (800be18 <_printf_float+0x2b0>)
 800bc24:	4b7d      	ldr	r3, [pc, #500]	@ (800be1c <_printf_float+0x2b4>)
 800bc26:	e7d5      	b.n	800bbd4 <_printf_float+0x6c>
 800bc28:	6863      	ldr	r3, [r4, #4]
 800bc2a:	1c59      	adds	r1, r3, #1
 800bc2c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800bc30:	d139      	bne.n	800bca6 <_printf_float+0x13e>
 800bc32:	2306      	movs	r3, #6
 800bc34:	6063      	str	r3, [r4, #4]
 800bc36:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	6022      	str	r2, [r4, #0]
 800bc3e:	9303      	str	r3, [sp, #12]
 800bc40:	ab0a      	add	r3, sp, #40	@ 0x28
 800bc42:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800bc46:	ab09      	add	r3, sp, #36	@ 0x24
 800bc48:	9300      	str	r3, [sp, #0]
 800bc4a:	6861      	ldr	r1, [r4, #4]
 800bc4c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bc50:	4628      	mov	r0, r5
 800bc52:	f7ff fefb 	bl	800ba4c <__cvt>
 800bc56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bc5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bc5c:	4680      	mov	r8, r0
 800bc5e:	d129      	bne.n	800bcb4 <_printf_float+0x14c>
 800bc60:	1cc8      	adds	r0, r1, #3
 800bc62:	db02      	blt.n	800bc6a <_printf_float+0x102>
 800bc64:	6863      	ldr	r3, [r4, #4]
 800bc66:	4299      	cmp	r1, r3
 800bc68:	dd41      	ble.n	800bcee <_printf_float+0x186>
 800bc6a:	f1a9 0902 	sub.w	r9, r9, #2
 800bc6e:	fa5f f989 	uxtb.w	r9, r9
 800bc72:	3901      	subs	r1, #1
 800bc74:	464a      	mov	r2, r9
 800bc76:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bc7a:	9109      	str	r1, [sp, #36]	@ 0x24
 800bc7c:	f7ff ff3a 	bl	800baf4 <__exponent>
 800bc80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc82:	1813      	adds	r3, r2, r0
 800bc84:	2a01      	cmp	r2, #1
 800bc86:	4682      	mov	sl, r0
 800bc88:	6123      	str	r3, [r4, #16]
 800bc8a:	dc02      	bgt.n	800bc92 <_printf_float+0x12a>
 800bc8c:	6822      	ldr	r2, [r4, #0]
 800bc8e:	07d2      	lsls	r2, r2, #31
 800bc90:	d501      	bpl.n	800bc96 <_printf_float+0x12e>
 800bc92:	3301      	adds	r3, #1
 800bc94:	6123      	str	r3, [r4, #16]
 800bc96:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d0a6      	beq.n	800bbec <_printf_float+0x84>
 800bc9e:	232d      	movs	r3, #45	@ 0x2d
 800bca0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bca4:	e7a2      	b.n	800bbec <_printf_float+0x84>
 800bca6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bcaa:	d1c4      	bne.n	800bc36 <_printf_float+0xce>
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d1c2      	bne.n	800bc36 <_printf_float+0xce>
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	e7bf      	b.n	800bc34 <_printf_float+0xcc>
 800bcb4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800bcb8:	d9db      	bls.n	800bc72 <_printf_float+0x10a>
 800bcba:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800bcbe:	d118      	bne.n	800bcf2 <_printf_float+0x18a>
 800bcc0:	2900      	cmp	r1, #0
 800bcc2:	6863      	ldr	r3, [r4, #4]
 800bcc4:	dd0b      	ble.n	800bcde <_printf_float+0x176>
 800bcc6:	6121      	str	r1, [r4, #16]
 800bcc8:	b913      	cbnz	r3, 800bcd0 <_printf_float+0x168>
 800bcca:	6822      	ldr	r2, [r4, #0]
 800bccc:	07d0      	lsls	r0, r2, #31
 800bcce:	d502      	bpl.n	800bcd6 <_printf_float+0x16e>
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	440b      	add	r3, r1
 800bcd4:	6123      	str	r3, [r4, #16]
 800bcd6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bcd8:	f04f 0a00 	mov.w	sl, #0
 800bcdc:	e7db      	b.n	800bc96 <_printf_float+0x12e>
 800bcde:	b913      	cbnz	r3, 800bce6 <_printf_float+0x17e>
 800bce0:	6822      	ldr	r2, [r4, #0]
 800bce2:	07d2      	lsls	r2, r2, #31
 800bce4:	d501      	bpl.n	800bcea <_printf_float+0x182>
 800bce6:	3302      	adds	r3, #2
 800bce8:	e7f4      	b.n	800bcd4 <_printf_float+0x16c>
 800bcea:	2301      	movs	r3, #1
 800bcec:	e7f2      	b.n	800bcd4 <_printf_float+0x16c>
 800bcee:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800bcf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcf4:	4299      	cmp	r1, r3
 800bcf6:	db05      	blt.n	800bd04 <_printf_float+0x19c>
 800bcf8:	6823      	ldr	r3, [r4, #0]
 800bcfa:	6121      	str	r1, [r4, #16]
 800bcfc:	07d8      	lsls	r0, r3, #31
 800bcfe:	d5ea      	bpl.n	800bcd6 <_printf_float+0x16e>
 800bd00:	1c4b      	adds	r3, r1, #1
 800bd02:	e7e7      	b.n	800bcd4 <_printf_float+0x16c>
 800bd04:	2900      	cmp	r1, #0
 800bd06:	bfd4      	ite	le
 800bd08:	f1c1 0202 	rsble	r2, r1, #2
 800bd0c:	2201      	movgt	r2, #1
 800bd0e:	4413      	add	r3, r2
 800bd10:	e7e0      	b.n	800bcd4 <_printf_float+0x16c>
 800bd12:	6823      	ldr	r3, [r4, #0]
 800bd14:	055a      	lsls	r2, r3, #21
 800bd16:	d407      	bmi.n	800bd28 <_printf_float+0x1c0>
 800bd18:	6923      	ldr	r3, [r4, #16]
 800bd1a:	4642      	mov	r2, r8
 800bd1c:	4631      	mov	r1, r6
 800bd1e:	4628      	mov	r0, r5
 800bd20:	47b8      	blx	r7
 800bd22:	3001      	adds	r0, #1
 800bd24:	d12a      	bne.n	800bd7c <_printf_float+0x214>
 800bd26:	e76b      	b.n	800bc00 <_printf_float+0x98>
 800bd28:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800bd2c:	f240 80e0 	bls.w	800bef0 <_printf_float+0x388>
 800bd30:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800bd34:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bd38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd3c:	d133      	bne.n	800bda6 <_printf_float+0x23e>
 800bd3e:	4a38      	ldr	r2, [pc, #224]	@ (800be20 <_printf_float+0x2b8>)
 800bd40:	2301      	movs	r3, #1
 800bd42:	4631      	mov	r1, r6
 800bd44:	4628      	mov	r0, r5
 800bd46:	47b8      	blx	r7
 800bd48:	3001      	adds	r0, #1
 800bd4a:	f43f af59 	beq.w	800bc00 <_printf_float+0x98>
 800bd4e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bd52:	4543      	cmp	r3, r8
 800bd54:	db02      	blt.n	800bd5c <_printf_float+0x1f4>
 800bd56:	6823      	ldr	r3, [r4, #0]
 800bd58:	07d8      	lsls	r0, r3, #31
 800bd5a:	d50f      	bpl.n	800bd7c <_printf_float+0x214>
 800bd5c:	9b05      	ldr	r3, [sp, #20]
 800bd5e:	465a      	mov	r2, fp
 800bd60:	4631      	mov	r1, r6
 800bd62:	4628      	mov	r0, r5
 800bd64:	47b8      	blx	r7
 800bd66:	3001      	adds	r0, #1
 800bd68:	f43f af4a 	beq.w	800bc00 <_printf_float+0x98>
 800bd6c:	f04f 0900 	mov.w	r9, #0
 800bd70:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd74:	f104 0a1a 	add.w	sl, r4, #26
 800bd78:	45c8      	cmp	r8, r9
 800bd7a:	dc09      	bgt.n	800bd90 <_printf_float+0x228>
 800bd7c:	6823      	ldr	r3, [r4, #0]
 800bd7e:	079b      	lsls	r3, r3, #30
 800bd80:	f100 8107 	bmi.w	800bf92 <_printf_float+0x42a>
 800bd84:	68e0      	ldr	r0, [r4, #12]
 800bd86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd88:	4298      	cmp	r0, r3
 800bd8a:	bfb8      	it	lt
 800bd8c:	4618      	movlt	r0, r3
 800bd8e:	e739      	b.n	800bc04 <_printf_float+0x9c>
 800bd90:	2301      	movs	r3, #1
 800bd92:	4652      	mov	r2, sl
 800bd94:	4631      	mov	r1, r6
 800bd96:	4628      	mov	r0, r5
 800bd98:	47b8      	blx	r7
 800bd9a:	3001      	adds	r0, #1
 800bd9c:	f43f af30 	beq.w	800bc00 <_printf_float+0x98>
 800bda0:	f109 0901 	add.w	r9, r9, #1
 800bda4:	e7e8      	b.n	800bd78 <_printf_float+0x210>
 800bda6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	dc3b      	bgt.n	800be24 <_printf_float+0x2bc>
 800bdac:	4a1c      	ldr	r2, [pc, #112]	@ (800be20 <_printf_float+0x2b8>)
 800bdae:	2301      	movs	r3, #1
 800bdb0:	4631      	mov	r1, r6
 800bdb2:	4628      	mov	r0, r5
 800bdb4:	47b8      	blx	r7
 800bdb6:	3001      	adds	r0, #1
 800bdb8:	f43f af22 	beq.w	800bc00 <_printf_float+0x98>
 800bdbc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bdc0:	ea59 0303 	orrs.w	r3, r9, r3
 800bdc4:	d102      	bne.n	800bdcc <_printf_float+0x264>
 800bdc6:	6823      	ldr	r3, [r4, #0]
 800bdc8:	07d9      	lsls	r1, r3, #31
 800bdca:	d5d7      	bpl.n	800bd7c <_printf_float+0x214>
 800bdcc:	9b05      	ldr	r3, [sp, #20]
 800bdce:	465a      	mov	r2, fp
 800bdd0:	4631      	mov	r1, r6
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	47b8      	blx	r7
 800bdd6:	3001      	adds	r0, #1
 800bdd8:	f43f af12 	beq.w	800bc00 <_printf_float+0x98>
 800bddc:	f04f 0a00 	mov.w	sl, #0
 800bde0:	f104 0b1a 	add.w	fp, r4, #26
 800bde4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bde6:	425b      	negs	r3, r3
 800bde8:	4553      	cmp	r3, sl
 800bdea:	dc01      	bgt.n	800bdf0 <_printf_float+0x288>
 800bdec:	464b      	mov	r3, r9
 800bdee:	e794      	b.n	800bd1a <_printf_float+0x1b2>
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	465a      	mov	r2, fp
 800bdf4:	4631      	mov	r1, r6
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	47b8      	blx	r7
 800bdfa:	3001      	adds	r0, #1
 800bdfc:	f43f af00 	beq.w	800bc00 <_printf_float+0x98>
 800be00:	f10a 0a01 	add.w	sl, sl, #1
 800be04:	e7ee      	b.n	800bde4 <_printf_float+0x27c>
 800be06:	bf00      	nop
 800be08:	ffffffff 	.word	0xffffffff
 800be0c:	7fefffff 	.word	0x7fefffff
 800be10:	0800f208 	.word	0x0800f208
 800be14:	0800f20c 	.word	0x0800f20c
 800be18:	0800f210 	.word	0x0800f210
 800be1c:	0800f214 	.word	0x0800f214
 800be20:	0800f218 	.word	0x0800f218
 800be24:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800be26:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800be2a:	4553      	cmp	r3, sl
 800be2c:	bfa8      	it	ge
 800be2e:	4653      	movge	r3, sl
 800be30:	2b00      	cmp	r3, #0
 800be32:	4699      	mov	r9, r3
 800be34:	dc37      	bgt.n	800bea6 <_printf_float+0x33e>
 800be36:	2300      	movs	r3, #0
 800be38:	9307      	str	r3, [sp, #28]
 800be3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be3e:	f104 021a 	add.w	r2, r4, #26
 800be42:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800be44:	9907      	ldr	r1, [sp, #28]
 800be46:	9306      	str	r3, [sp, #24]
 800be48:	eba3 0309 	sub.w	r3, r3, r9
 800be4c:	428b      	cmp	r3, r1
 800be4e:	dc31      	bgt.n	800beb4 <_printf_float+0x34c>
 800be50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be52:	459a      	cmp	sl, r3
 800be54:	dc3b      	bgt.n	800bece <_printf_float+0x366>
 800be56:	6823      	ldr	r3, [r4, #0]
 800be58:	07da      	lsls	r2, r3, #31
 800be5a:	d438      	bmi.n	800bece <_printf_float+0x366>
 800be5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be5e:	ebaa 0903 	sub.w	r9, sl, r3
 800be62:	9b06      	ldr	r3, [sp, #24]
 800be64:	ebaa 0303 	sub.w	r3, sl, r3
 800be68:	4599      	cmp	r9, r3
 800be6a:	bfa8      	it	ge
 800be6c:	4699      	movge	r9, r3
 800be6e:	f1b9 0f00 	cmp.w	r9, #0
 800be72:	dc34      	bgt.n	800bede <_printf_float+0x376>
 800be74:	f04f 0800 	mov.w	r8, #0
 800be78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be7c:	f104 0b1a 	add.w	fp, r4, #26
 800be80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be82:	ebaa 0303 	sub.w	r3, sl, r3
 800be86:	eba3 0309 	sub.w	r3, r3, r9
 800be8a:	4543      	cmp	r3, r8
 800be8c:	f77f af76 	ble.w	800bd7c <_printf_float+0x214>
 800be90:	2301      	movs	r3, #1
 800be92:	465a      	mov	r2, fp
 800be94:	4631      	mov	r1, r6
 800be96:	4628      	mov	r0, r5
 800be98:	47b8      	blx	r7
 800be9a:	3001      	adds	r0, #1
 800be9c:	f43f aeb0 	beq.w	800bc00 <_printf_float+0x98>
 800bea0:	f108 0801 	add.w	r8, r8, #1
 800bea4:	e7ec      	b.n	800be80 <_printf_float+0x318>
 800bea6:	4642      	mov	r2, r8
 800bea8:	4631      	mov	r1, r6
 800beaa:	4628      	mov	r0, r5
 800beac:	47b8      	blx	r7
 800beae:	3001      	adds	r0, #1
 800beb0:	d1c1      	bne.n	800be36 <_printf_float+0x2ce>
 800beb2:	e6a5      	b.n	800bc00 <_printf_float+0x98>
 800beb4:	2301      	movs	r3, #1
 800beb6:	4631      	mov	r1, r6
 800beb8:	4628      	mov	r0, r5
 800beba:	9206      	str	r2, [sp, #24]
 800bebc:	47b8      	blx	r7
 800bebe:	3001      	adds	r0, #1
 800bec0:	f43f ae9e 	beq.w	800bc00 <_printf_float+0x98>
 800bec4:	9b07      	ldr	r3, [sp, #28]
 800bec6:	9a06      	ldr	r2, [sp, #24]
 800bec8:	3301      	adds	r3, #1
 800beca:	9307      	str	r3, [sp, #28]
 800becc:	e7b9      	b.n	800be42 <_printf_float+0x2da>
 800bece:	9b05      	ldr	r3, [sp, #20]
 800bed0:	465a      	mov	r2, fp
 800bed2:	4631      	mov	r1, r6
 800bed4:	4628      	mov	r0, r5
 800bed6:	47b8      	blx	r7
 800bed8:	3001      	adds	r0, #1
 800beda:	d1bf      	bne.n	800be5c <_printf_float+0x2f4>
 800bedc:	e690      	b.n	800bc00 <_printf_float+0x98>
 800bede:	9a06      	ldr	r2, [sp, #24]
 800bee0:	464b      	mov	r3, r9
 800bee2:	4442      	add	r2, r8
 800bee4:	4631      	mov	r1, r6
 800bee6:	4628      	mov	r0, r5
 800bee8:	47b8      	blx	r7
 800beea:	3001      	adds	r0, #1
 800beec:	d1c2      	bne.n	800be74 <_printf_float+0x30c>
 800beee:	e687      	b.n	800bc00 <_printf_float+0x98>
 800bef0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800bef4:	f1b9 0f01 	cmp.w	r9, #1
 800bef8:	dc01      	bgt.n	800befe <_printf_float+0x396>
 800befa:	07db      	lsls	r3, r3, #31
 800befc:	d536      	bpl.n	800bf6c <_printf_float+0x404>
 800befe:	2301      	movs	r3, #1
 800bf00:	4642      	mov	r2, r8
 800bf02:	4631      	mov	r1, r6
 800bf04:	4628      	mov	r0, r5
 800bf06:	47b8      	blx	r7
 800bf08:	3001      	adds	r0, #1
 800bf0a:	f43f ae79 	beq.w	800bc00 <_printf_float+0x98>
 800bf0e:	9b05      	ldr	r3, [sp, #20]
 800bf10:	465a      	mov	r2, fp
 800bf12:	4631      	mov	r1, r6
 800bf14:	4628      	mov	r0, r5
 800bf16:	47b8      	blx	r7
 800bf18:	3001      	adds	r0, #1
 800bf1a:	f43f ae71 	beq.w	800bc00 <_printf_float+0x98>
 800bf1e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800bf22:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bf26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf2a:	f109 39ff 	add.w	r9, r9, #4294967295
 800bf2e:	d018      	beq.n	800bf62 <_printf_float+0x3fa>
 800bf30:	464b      	mov	r3, r9
 800bf32:	f108 0201 	add.w	r2, r8, #1
 800bf36:	4631      	mov	r1, r6
 800bf38:	4628      	mov	r0, r5
 800bf3a:	47b8      	blx	r7
 800bf3c:	3001      	adds	r0, #1
 800bf3e:	d10c      	bne.n	800bf5a <_printf_float+0x3f2>
 800bf40:	e65e      	b.n	800bc00 <_printf_float+0x98>
 800bf42:	2301      	movs	r3, #1
 800bf44:	465a      	mov	r2, fp
 800bf46:	4631      	mov	r1, r6
 800bf48:	4628      	mov	r0, r5
 800bf4a:	47b8      	blx	r7
 800bf4c:	3001      	adds	r0, #1
 800bf4e:	f43f ae57 	beq.w	800bc00 <_printf_float+0x98>
 800bf52:	f108 0801 	add.w	r8, r8, #1
 800bf56:	45c8      	cmp	r8, r9
 800bf58:	dbf3      	blt.n	800bf42 <_printf_float+0x3da>
 800bf5a:	4653      	mov	r3, sl
 800bf5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bf60:	e6dc      	b.n	800bd1c <_printf_float+0x1b4>
 800bf62:	f04f 0800 	mov.w	r8, #0
 800bf66:	f104 0b1a 	add.w	fp, r4, #26
 800bf6a:	e7f4      	b.n	800bf56 <_printf_float+0x3ee>
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	4642      	mov	r2, r8
 800bf70:	e7e1      	b.n	800bf36 <_printf_float+0x3ce>
 800bf72:	2301      	movs	r3, #1
 800bf74:	464a      	mov	r2, r9
 800bf76:	4631      	mov	r1, r6
 800bf78:	4628      	mov	r0, r5
 800bf7a:	47b8      	blx	r7
 800bf7c:	3001      	adds	r0, #1
 800bf7e:	f43f ae3f 	beq.w	800bc00 <_printf_float+0x98>
 800bf82:	f108 0801 	add.w	r8, r8, #1
 800bf86:	68e3      	ldr	r3, [r4, #12]
 800bf88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bf8a:	1a5b      	subs	r3, r3, r1
 800bf8c:	4543      	cmp	r3, r8
 800bf8e:	dcf0      	bgt.n	800bf72 <_printf_float+0x40a>
 800bf90:	e6f8      	b.n	800bd84 <_printf_float+0x21c>
 800bf92:	f04f 0800 	mov.w	r8, #0
 800bf96:	f104 0919 	add.w	r9, r4, #25
 800bf9a:	e7f4      	b.n	800bf86 <_printf_float+0x41e>

0800bf9c <_printf_common>:
 800bf9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfa0:	4616      	mov	r6, r2
 800bfa2:	4698      	mov	r8, r3
 800bfa4:	688a      	ldr	r2, [r1, #8]
 800bfa6:	690b      	ldr	r3, [r1, #16]
 800bfa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bfac:	4293      	cmp	r3, r2
 800bfae:	bfb8      	it	lt
 800bfb0:	4613      	movlt	r3, r2
 800bfb2:	6033      	str	r3, [r6, #0]
 800bfb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bfb8:	4607      	mov	r7, r0
 800bfba:	460c      	mov	r4, r1
 800bfbc:	b10a      	cbz	r2, 800bfc2 <_printf_common+0x26>
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	6033      	str	r3, [r6, #0]
 800bfc2:	6823      	ldr	r3, [r4, #0]
 800bfc4:	0699      	lsls	r1, r3, #26
 800bfc6:	bf42      	ittt	mi
 800bfc8:	6833      	ldrmi	r3, [r6, #0]
 800bfca:	3302      	addmi	r3, #2
 800bfcc:	6033      	strmi	r3, [r6, #0]
 800bfce:	6825      	ldr	r5, [r4, #0]
 800bfd0:	f015 0506 	ands.w	r5, r5, #6
 800bfd4:	d106      	bne.n	800bfe4 <_printf_common+0x48>
 800bfd6:	f104 0a19 	add.w	sl, r4, #25
 800bfda:	68e3      	ldr	r3, [r4, #12]
 800bfdc:	6832      	ldr	r2, [r6, #0]
 800bfde:	1a9b      	subs	r3, r3, r2
 800bfe0:	42ab      	cmp	r3, r5
 800bfe2:	dc26      	bgt.n	800c032 <_printf_common+0x96>
 800bfe4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bfe8:	6822      	ldr	r2, [r4, #0]
 800bfea:	3b00      	subs	r3, #0
 800bfec:	bf18      	it	ne
 800bfee:	2301      	movne	r3, #1
 800bff0:	0692      	lsls	r2, r2, #26
 800bff2:	d42b      	bmi.n	800c04c <_printf_common+0xb0>
 800bff4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bff8:	4641      	mov	r1, r8
 800bffa:	4638      	mov	r0, r7
 800bffc:	47c8      	blx	r9
 800bffe:	3001      	adds	r0, #1
 800c000:	d01e      	beq.n	800c040 <_printf_common+0xa4>
 800c002:	6823      	ldr	r3, [r4, #0]
 800c004:	6922      	ldr	r2, [r4, #16]
 800c006:	f003 0306 	and.w	r3, r3, #6
 800c00a:	2b04      	cmp	r3, #4
 800c00c:	bf02      	ittt	eq
 800c00e:	68e5      	ldreq	r5, [r4, #12]
 800c010:	6833      	ldreq	r3, [r6, #0]
 800c012:	1aed      	subeq	r5, r5, r3
 800c014:	68a3      	ldr	r3, [r4, #8]
 800c016:	bf0c      	ite	eq
 800c018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c01c:	2500      	movne	r5, #0
 800c01e:	4293      	cmp	r3, r2
 800c020:	bfc4      	itt	gt
 800c022:	1a9b      	subgt	r3, r3, r2
 800c024:	18ed      	addgt	r5, r5, r3
 800c026:	2600      	movs	r6, #0
 800c028:	341a      	adds	r4, #26
 800c02a:	42b5      	cmp	r5, r6
 800c02c:	d11a      	bne.n	800c064 <_printf_common+0xc8>
 800c02e:	2000      	movs	r0, #0
 800c030:	e008      	b.n	800c044 <_printf_common+0xa8>
 800c032:	2301      	movs	r3, #1
 800c034:	4652      	mov	r2, sl
 800c036:	4641      	mov	r1, r8
 800c038:	4638      	mov	r0, r7
 800c03a:	47c8      	blx	r9
 800c03c:	3001      	adds	r0, #1
 800c03e:	d103      	bne.n	800c048 <_printf_common+0xac>
 800c040:	f04f 30ff 	mov.w	r0, #4294967295
 800c044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c048:	3501      	adds	r5, #1
 800c04a:	e7c6      	b.n	800bfda <_printf_common+0x3e>
 800c04c:	18e1      	adds	r1, r4, r3
 800c04e:	1c5a      	adds	r2, r3, #1
 800c050:	2030      	movs	r0, #48	@ 0x30
 800c052:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c056:	4422      	add	r2, r4
 800c058:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c05c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c060:	3302      	adds	r3, #2
 800c062:	e7c7      	b.n	800bff4 <_printf_common+0x58>
 800c064:	2301      	movs	r3, #1
 800c066:	4622      	mov	r2, r4
 800c068:	4641      	mov	r1, r8
 800c06a:	4638      	mov	r0, r7
 800c06c:	47c8      	blx	r9
 800c06e:	3001      	adds	r0, #1
 800c070:	d0e6      	beq.n	800c040 <_printf_common+0xa4>
 800c072:	3601      	adds	r6, #1
 800c074:	e7d9      	b.n	800c02a <_printf_common+0x8e>
	...

0800c078 <_printf_i>:
 800c078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c07c:	7e0f      	ldrb	r7, [r1, #24]
 800c07e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c080:	2f78      	cmp	r7, #120	@ 0x78
 800c082:	4691      	mov	r9, r2
 800c084:	4680      	mov	r8, r0
 800c086:	460c      	mov	r4, r1
 800c088:	469a      	mov	sl, r3
 800c08a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c08e:	d807      	bhi.n	800c0a0 <_printf_i+0x28>
 800c090:	2f62      	cmp	r7, #98	@ 0x62
 800c092:	d80a      	bhi.n	800c0aa <_printf_i+0x32>
 800c094:	2f00      	cmp	r7, #0
 800c096:	f000 80d2 	beq.w	800c23e <_printf_i+0x1c6>
 800c09a:	2f58      	cmp	r7, #88	@ 0x58
 800c09c:	f000 80b9 	beq.w	800c212 <_printf_i+0x19a>
 800c0a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c0a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c0a8:	e03a      	b.n	800c120 <_printf_i+0xa8>
 800c0aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c0ae:	2b15      	cmp	r3, #21
 800c0b0:	d8f6      	bhi.n	800c0a0 <_printf_i+0x28>
 800c0b2:	a101      	add	r1, pc, #4	@ (adr r1, 800c0b8 <_printf_i+0x40>)
 800c0b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0b8:	0800c111 	.word	0x0800c111
 800c0bc:	0800c125 	.word	0x0800c125
 800c0c0:	0800c0a1 	.word	0x0800c0a1
 800c0c4:	0800c0a1 	.word	0x0800c0a1
 800c0c8:	0800c0a1 	.word	0x0800c0a1
 800c0cc:	0800c0a1 	.word	0x0800c0a1
 800c0d0:	0800c125 	.word	0x0800c125
 800c0d4:	0800c0a1 	.word	0x0800c0a1
 800c0d8:	0800c0a1 	.word	0x0800c0a1
 800c0dc:	0800c0a1 	.word	0x0800c0a1
 800c0e0:	0800c0a1 	.word	0x0800c0a1
 800c0e4:	0800c225 	.word	0x0800c225
 800c0e8:	0800c14f 	.word	0x0800c14f
 800c0ec:	0800c1df 	.word	0x0800c1df
 800c0f0:	0800c0a1 	.word	0x0800c0a1
 800c0f4:	0800c0a1 	.word	0x0800c0a1
 800c0f8:	0800c247 	.word	0x0800c247
 800c0fc:	0800c0a1 	.word	0x0800c0a1
 800c100:	0800c14f 	.word	0x0800c14f
 800c104:	0800c0a1 	.word	0x0800c0a1
 800c108:	0800c0a1 	.word	0x0800c0a1
 800c10c:	0800c1e7 	.word	0x0800c1e7
 800c110:	6833      	ldr	r3, [r6, #0]
 800c112:	1d1a      	adds	r2, r3, #4
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	6032      	str	r2, [r6, #0]
 800c118:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c11c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c120:	2301      	movs	r3, #1
 800c122:	e09d      	b.n	800c260 <_printf_i+0x1e8>
 800c124:	6833      	ldr	r3, [r6, #0]
 800c126:	6820      	ldr	r0, [r4, #0]
 800c128:	1d19      	adds	r1, r3, #4
 800c12a:	6031      	str	r1, [r6, #0]
 800c12c:	0606      	lsls	r6, r0, #24
 800c12e:	d501      	bpl.n	800c134 <_printf_i+0xbc>
 800c130:	681d      	ldr	r5, [r3, #0]
 800c132:	e003      	b.n	800c13c <_printf_i+0xc4>
 800c134:	0645      	lsls	r5, r0, #25
 800c136:	d5fb      	bpl.n	800c130 <_printf_i+0xb8>
 800c138:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c13c:	2d00      	cmp	r5, #0
 800c13e:	da03      	bge.n	800c148 <_printf_i+0xd0>
 800c140:	232d      	movs	r3, #45	@ 0x2d
 800c142:	426d      	negs	r5, r5
 800c144:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c148:	4859      	ldr	r0, [pc, #356]	@ (800c2b0 <_printf_i+0x238>)
 800c14a:	230a      	movs	r3, #10
 800c14c:	e011      	b.n	800c172 <_printf_i+0xfa>
 800c14e:	6821      	ldr	r1, [r4, #0]
 800c150:	6833      	ldr	r3, [r6, #0]
 800c152:	0608      	lsls	r0, r1, #24
 800c154:	f853 5b04 	ldr.w	r5, [r3], #4
 800c158:	d402      	bmi.n	800c160 <_printf_i+0xe8>
 800c15a:	0649      	lsls	r1, r1, #25
 800c15c:	bf48      	it	mi
 800c15e:	b2ad      	uxthmi	r5, r5
 800c160:	2f6f      	cmp	r7, #111	@ 0x6f
 800c162:	4853      	ldr	r0, [pc, #332]	@ (800c2b0 <_printf_i+0x238>)
 800c164:	6033      	str	r3, [r6, #0]
 800c166:	bf14      	ite	ne
 800c168:	230a      	movne	r3, #10
 800c16a:	2308      	moveq	r3, #8
 800c16c:	2100      	movs	r1, #0
 800c16e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c172:	6866      	ldr	r6, [r4, #4]
 800c174:	60a6      	str	r6, [r4, #8]
 800c176:	2e00      	cmp	r6, #0
 800c178:	bfa2      	ittt	ge
 800c17a:	6821      	ldrge	r1, [r4, #0]
 800c17c:	f021 0104 	bicge.w	r1, r1, #4
 800c180:	6021      	strge	r1, [r4, #0]
 800c182:	b90d      	cbnz	r5, 800c188 <_printf_i+0x110>
 800c184:	2e00      	cmp	r6, #0
 800c186:	d04b      	beq.n	800c220 <_printf_i+0x1a8>
 800c188:	4616      	mov	r6, r2
 800c18a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c18e:	fb03 5711 	mls	r7, r3, r1, r5
 800c192:	5dc7      	ldrb	r7, [r0, r7]
 800c194:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c198:	462f      	mov	r7, r5
 800c19a:	42bb      	cmp	r3, r7
 800c19c:	460d      	mov	r5, r1
 800c19e:	d9f4      	bls.n	800c18a <_printf_i+0x112>
 800c1a0:	2b08      	cmp	r3, #8
 800c1a2:	d10b      	bne.n	800c1bc <_printf_i+0x144>
 800c1a4:	6823      	ldr	r3, [r4, #0]
 800c1a6:	07df      	lsls	r7, r3, #31
 800c1a8:	d508      	bpl.n	800c1bc <_printf_i+0x144>
 800c1aa:	6923      	ldr	r3, [r4, #16]
 800c1ac:	6861      	ldr	r1, [r4, #4]
 800c1ae:	4299      	cmp	r1, r3
 800c1b0:	bfde      	ittt	le
 800c1b2:	2330      	movle	r3, #48	@ 0x30
 800c1b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c1b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c1bc:	1b92      	subs	r2, r2, r6
 800c1be:	6122      	str	r2, [r4, #16]
 800c1c0:	f8cd a000 	str.w	sl, [sp]
 800c1c4:	464b      	mov	r3, r9
 800c1c6:	aa03      	add	r2, sp, #12
 800c1c8:	4621      	mov	r1, r4
 800c1ca:	4640      	mov	r0, r8
 800c1cc:	f7ff fee6 	bl	800bf9c <_printf_common>
 800c1d0:	3001      	adds	r0, #1
 800c1d2:	d14a      	bne.n	800c26a <_printf_i+0x1f2>
 800c1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d8:	b004      	add	sp, #16
 800c1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1de:	6823      	ldr	r3, [r4, #0]
 800c1e0:	f043 0320 	orr.w	r3, r3, #32
 800c1e4:	6023      	str	r3, [r4, #0]
 800c1e6:	4833      	ldr	r0, [pc, #204]	@ (800c2b4 <_printf_i+0x23c>)
 800c1e8:	2778      	movs	r7, #120	@ 0x78
 800c1ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c1ee:	6823      	ldr	r3, [r4, #0]
 800c1f0:	6831      	ldr	r1, [r6, #0]
 800c1f2:	061f      	lsls	r7, r3, #24
 800c1f4:	f851 5b04 	ldr.w	r5, [r1], #4
 800c1f8:	d402      	bmi.n	800c200 <_printf_i+0x188>
 800c1fa:	065f      	lsls	r7, r3, #25
 800c1fc:	bf48      	it	mi
 800c1fe:	b2ad      	uxthmi	r5, r5
 800c200:	6031      	str	r1, [r6, #0]
 800c202:	07d9      	lsls	r1, r3, #31
 800c204:	bf44      	itt	mi
 800c206:	f043 0320 	orrmi.w	r3, r3, #32
 800c20a:	6023      	strmi	r3, [r4, #0]
 800c20c:	b11d      	cbz	r5, 800c216 <_printf_i+0x19e>
 800c20e:	2310      	movs	r3, #16
 800c210:	e7ac      	b.n	800c16c <_printf_i+0xf4>
 800c212:	4827      	ldr	r0, [pc, #156]	@ (800c2b0 <_printf_i+0x238>)
 800c214:	e7e9      	b.n	800c1ea <_printf_i+0x172>
 800c216:	6823      	ldr	r3, [r4, #0]
 800c218:	f023 0320 	bic.w	r3, r3, #32
 800c21c:	6023      	str	r3, [r4, #0]
 800c21e:	e7f6      	b.n	800c20e <_printf_i+0x196>
 800c220:	4616      	mov	r6, r2
 800c222:	e7bd      	b.n	800c1a0 <_printf_i+0x128>
 800c224:	6833      	ldr	r3, [r6, #0]
 800c226:	6825      	ldr	r5, [r4, #0]
 800c228:	6961      	ldr	r1, [r4, #20]
 800c22a:	1d18      	adds	r0, r3, #4
 800c22c:	6030      	str	r0, [r6, #0]
 800c22e:	062e      	lsls	r6, r5, #24
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	d501      	bpl.n	800c238 <_printf_i+0x1c0>
 800c234:	6019      	str	r1, [r3, #0]
 800c236:	e002      	b.n	800c23e <_printf_i+0x1c6>
 800c238:	0668      	lsls	r0, r5, #25
 800c23a:	d5fb      	bpl.n	800c234 <_printf_i+0x1bc>
 800c23c:	8019      	strh	r1, [r3, #0]
 800c23e:	2300      	movs	r3, #0
 800c240:	6123      	str	r3, [r4, #16]
 800c242:	4616      	mov	r6, r2
 800c244:	e7bc      	b.n	800c1c0 <_printf_i+0x148>
 800c246:	6833      	ldr	r3, [r6, #0]
 800c248:	1d1a      	adds	r2, r3, #4
 800c24a:	6032      	str	r2, [r6, #0]
 800c24c:	681e      	ldr	r6, [r3, #0]
 800c24e:	6862      	ldr	r2, [r4, #4]
 800c250:	2100      	movs	r1, #0
 800c252:	4630      	mov	r0, r6
 800c254:	f7f4 f844 	bl	80002e0 <memchr>
 800c258:	b108      	cbz	r0, 800c25e <_printf_i+0x1e6>
 800c25a:	1b80      	subs	r0, r0, r6
 800c25c:	6060      	str	r0, [r4, #4]
 800c25e:	6863      	ldr	r3, [r4, #4]
 800c260:	6123      	str	r3, [r4, #16]
 800c262:	2300      	movs	r3, #0
 800c264:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c268:	e7aa      	b.n	800c1c0 <_printf_i+0x148>
 800c26a:	6923      	ldr	r3, [r4, #16]
 800c26c:	4632      	mov	r2, r6
 800c26e:	4649      	mov	r1, r9
 800c270:	4640      	mov	r0, r8
 800c272:	47d0      	blx	sl
 800c274:	3001      	adds	r0, #1
 800c276:	d0ad      	beq.n	800c1d4 <_printf_i+0x15c>
 800c278:	6823      	ldr	r3, [r4, #0]
 800c27a:	079b      	lsls	r3, r3, #30
 800c27c:	d413      	bmi.n	800c2a6 <_printf_i+0x22e>
 800c27e:	68e0      	ldr	r0, [r4, #12]
 800c280:	9b03      	ldr	r3, [sp, #12]
 800c282:	4298      	cmp	r0, r3
 800c284:	bfb8      	it	lt
 800c286:	4618      	movlt	r0, r3
 800c288:	e7a6      	b.n	800c1d8 <_printf_i+0x160>
 800c28a:	2301      	movs	r3, #1
 800c28c:	4632      	mov	r2, r6
 800c28e:	4649      	mov	r1, r9
 800c290:	4640      	mov	r0, r8
 800c292:	47d0      	blx	sl
 800c294:	3001      	adds	r0, #1
 800c296:	d09d      	beq.n	800c1d4 <_printf_i+0x15c>
 800c298:	3501      	adds	r5, #1
 800c29a:	68e3      	ldr	r3, [r4, #12]
 800c29c:	9903      	ldr	r1, [sp, #12]
 800c29e:	1a5b      	subs	r3, r3, r1
 800c2a0:	42ab      	cmp	r3, r5
 800c2a2:	dcf2      	bgt.n	800c28a <_printf_i+0x212>
 800c2a4:	e7eb      	b.n	800c27e <_printf_i+0x206>
 800c2a6:	2500      	movs	r5, #0
 800c2a8:	f104 0619 	add.w	r6, r4, #25
 800c2ac:	e7f5      	b.n	800c29a <_printf_i+0x222>
 800c2ae:	bf00      	nop
 800c2b0:	0800f21a 	.word	0x0800f21a
 800c2b4:	0800f22b 	.word	0x0800f22b

0800c2b8 <std>:
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	b510      	push	{r4, lr}
 800c2bc:	4604      	mov	r4, r0
 800c2be:	e9c0 3300 	strd	r3, r3, [r0]
 800c2c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c2c6:	6083      	str	r3, [r0, #8]
 800c2c8:	8181      	strh	r1, [r0, #12]
 800c2ca:	6643      	str	r3, [r0, #100]	@ 0x64
 800c2cc:	81c2      	strh	r2, [r0, #14]
 800c2ce:	6183      	str	r3, [r0, #24]
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	2208      	movs	r2, #8
 800c2d4:	305c      	adds	r0, #92	@ 0x5c
 800c2d6:	f000 f926 	bl	800c526 <memset>
 800c2da:	4b0d      	ldr	r3, [pc, #52]	@ (800c310 <std+0x58>)
 800c2dc:	6263      	str	r3, [r4, #36]	@ 0x24
 800c2de:	4b0d      	ldr	r3, [pc, #52]	@ (800c314 <std+0x5c>)
 800c2e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c2e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c318 <std+0x60>)
 800c2e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c2e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c31c <std+0x64>)
 800c2e8:	6323      	str	r3, [r4, #48]	@ 0x30
 800c2ea:	4b0d      	ldr	r3, [pc, #52]	@ (800c320 <std+0x68>)
 800c2ec:	6224      	str	r4, [r4, #32]
 800c2ee:	429c      	cmp	r4, r3
 800c2f0:	d006      	beq.n	800c300 <std+0x48>
 800c2f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c2f6:	4294      	cmp	r4, r2
 800c2f8:	d002      	beq.n	800c300 <std+0x48>
 800c2fa:	33d0      	adds	r3, #208	@ 0xd0
 800c2fc:	429c      	cmp	r4, r3
 800c2fe:	d105      	bne.n	800c30c <std+0x54>
 800c300:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c308:	f000 b98a 	b.w	800c620 <__retarget_lock_init_recursive>
 800c30c:	bd10      	pop	{r4, pc}
 800c30e:	bf00      	nop
 800c310:	0800c4a1 	.word	0x0800c4a1
 800c314:	0800c4c3 	.word	0x0800c4c3
 800c318:	0800c4fb 	.word	0x0800c4fb
 800c31c:	0800c51f 	.word	0x0800c51f
 800c320:	24002640 	.word	0x24002640

0800c324 <stdio_exit_handler>:
 800c324:	4a02      	ldr	r2, [pc, #8]	@ (800c330 <stdio_exit_handler+0xc>)
 800c326:	4903      	ldr	r1, [pc, #12]	@ (800c334 <stdio_exit_handler+0x10>)
 800c328:	4803      	ldr	r0, [pc, #12]	@ (800c338 <stdio_exit_handler+0x14>)
 800c32a:	f000 b869 	b.w	800c400 <_fwalk_sglue>
 800c32e:	bf00      	nop
 800c330:	24000014 	.word	0x24000014
 800c334:	0800e125 	.word	0x0800e125
 800c338:	24000024 	.word	0x24000024

0800c33c <cleanup_stdio>:
 800c33c:	6841      	ldr	r1, [r0, #4]
 800c33e:	4b0c      	ldr	r3, [pc, #48]	@ (800c370 <cleanup_stdio+0x34>)
 800c340:	4299      	cmp	r1, r3
 800c342:	b510      	push	{r4, lr}
 800c344:	4604      	mov	r4, r0
 800c346:	d001      	beq.n	800c34c <cleanup_stdio+0x10>
 800c348:	f001 feec 	bl	800e124 <_fflush_r>
 800c34c:	68a1      	ldr	r1, [r4, #8]
 800c34e:	4b09      	ldr	r3, [pc, #36]	@ (800c374 <cleanup_stdio+0x38>)
 800c350:	4299      	cmp	r1, r3
 800c352:	d002      	beq.n	800c35a <cleanup_stdio+0x1e>
 800c354:	4620      	mov	r0, r4
 800c356:	f001 fee5 	bl	800e124 <_fflush_r>
 800c35a:	68e1      	ldr	r1, [r4, #12]
 800c35c:	4b06      	ldr	r3, [pc, #24]	@ (800c378 <cleanup_stdio+0x3c>)
 800c35e:	4299      	cmp	r1, r3
 800c360:	d004      	beq.n	800c36c <cleanup_stdio+0x30>
 800c362:	4620      	mov	r0, r4
 800c364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c368:	f001 bedc 	b.w	800e124 <_fflush_r>
 800c36c:	bd10      	pop	{r4, pc}
 800c36e:	bf00      	nop
 800c370:	24002640 	.word	0x24002640
 800c374:	240026a8 	.word	0x240026a8
 800c378:	24002710 	.word	0x24002710

0800c37c <global_stdio_init.part.0>:
 800c37c:	b510      	push	{r4, lr}
 800c37e:	4b0b      	ldr	r3, [pc, #44]	@ (800c3ac <global_stdio_init.part.0+0x30>)
 800c380:	4c0b      	ldr	r4, [pc, #44]	@ (800c3b0 <global_stdio_init.part.0+0x34>)
 800c382:	4a0c      	ldr	r2, [pc, #48]	@ (800c3b4 <global_stdio_init.part.0+0x38>)
 800c384:	601a      	str	r2, [r3, #0]
 800c386:	4620      	mov	r0, r4
 800c388:	2200      	movs	r2, #0
 800c38a:	2104      	movs	r1, #4
 800c38c:	f7ff ff94 	bl	800c2b8 <std>
 800c390:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c394:	2201      	movs	r2, #1
 800c396:	2109      	movs	r1, #9
 800c398:	f7ff ff8e 	bl	800c2b8 <std>
 800c39c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c3a0:	2202      	movs	r2, #2
 800c3a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3a6:	2112      	movs	r1, #18
 800c3a8:	f7ff bf86 	b.w	800c2b8 <std>
 800c3ac:	24002778 	.word	0x24002778
 800c3b0:	24002640 	.word	0x24002640
 800c3b4:	0800c325 	.word	0x0800c325

0800c3b8 <__sfp_lock_acquire>:
 800c3b8:	4801      	ldr	r0, [pc, #4]	@ (800c3c0 <__sfp_lock_acquire+0x8>)
 800c3ba:	f000 b932 	b.w	800c622 <__retarget_lock_acquire_recursive>
 800c3be:	bf00      	nop
 800c3c0:	24002781 	.word	0x24002781

0800c3c4 <__sfp_lock_release>:
 800c3c4:	4801      	ldr	r0, [pc, #4]	@ (800c3cc <__sfp_lock_release+0x8>)
 800c3c6:	f000 b92d 	b.w	800c624 <__retarget_lock_release_recursive>
 800c3ca:	bf00      	nop
 800c3cc:	24002781 	.word	0x24002781

0800c3d0 <__sinit>:
 800c3d0:	b510      	push	{r4, lr}
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	f7ff fff0 	bl	800c3b8 <__sfp_lock_acquire>
 800c3d8:	6a23      	ldr	r3, [r4, #32]
 800c3da:	b11b      	cbz	r3, 800c3e4 <__sinit+0x14>
 800c3dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3e0:	f7ff bff0 	b.w	800c3c4 <__sfp_lock_release>
 800c3e4:	4b04      	ldr	r3, [pc, #16]	@ (800c3f8 <__sinit+0x28>)
 800c3e6:	6223      	str	r3, [r4, #32]
 800c3e8:	4b04      	ldr	r3, [pc, #16]	@ (800c3fc <__sinit+0x2c>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d1f5      	bne.n	800c3dc <__sinit+0xc>
 800c3f0:	f7ff ffc4 	bl	800c37c <global_stdio_init.part.0>
 800c3f4:	e7f2      	b.n	800c3dc <__sinit+0xc>
 800c3f6:	bf00      	nop
 800c3f8:	0800c33d 	.word	0x0800c33d
 800c3fc:	24002778 	.word	0x24002778

0800c400 <_fwalk_sglue>:
 800c400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c404:	4607      	mov	r7, r0
 800c406:	4688      	mov	r8, r1
 800c408:	4614      	mov	r4, r2
 800c40a:	2600      	movs	r6, #0
 800c40c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c410:	f1b9 0901 	subs.w	r9, r9, #1
 800c414:	d505      	bpl.n	800c422 <_fwalk_sglue+0x22>
 800c416:	6824      	ldr	r4, [r4, #0]
 800c418:	2c00      	cmp	r4, #0
 800c41a:	d1f7      	bne.n	800c40c <_fwalk_sglue+0xc>
 800c41c:	4630      	mov	r0, r6
 800c41e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c422:	89ab      	ldrh	r3, [r5, #12]
 800c424:	2b01      	cmp	r3, #1
 800c426:	d907      	bls.n	800c438 <_fwalk_sglue+0x38>
 800c428:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c42c:	3301      	adds	r3, #1
 800c42e:	d003      	beq.n	800c438 <_fwalk_sglue+0x38>
 800c430:	4629      	mov	r1, r5
 800c432:	4638      	mov	r0, r7
 800c434:	47c0      	blx	r8
 800c436:	4306      	orrs	r6, r0
 800c438:	3568      	adds	r5, #104	@ 0x68
 800c43a:	e7e9      	b.n	800c410 <_fwalk_sglue+0x10>

0800c43c <iprintf>:
 800c43c:	b40f      	push	{r0, r1, r2, r3}
 800c43e:	b507      	push	{r0, r1, r2, lr}
 800c440:	4906      	ldr	r1, [pc, #24]	@ (800c45c <iprintf+0x20>)
 800c442:	ab04      	add	r3, sp, #16
 800c444:	6808      	ldr	r0, [r1, #0]
 800c446:	f853 2b04 	ldr.w	r2, [r3], #4
 800c44a:	6881      	ldr	r1, [r0, #8]
 800c44c:	9301      	str	r3, [sp, #4]
 800c44e:	f001 fccd 	bl	800ddec <_vfiprintf_r>
 800c452:	b003      	add	sp, #12
 800c454:	f85d eb04 	ldr.w	lr, [sp], #4
 800c458:	b004      	add	sp, #16
 800c45a:	4770      	bx	lr
 800c45c:	24000020 	.word	0x24000020

0800c460 <siprintf>:
 800c460:	b40e      	push	{r1, r2, r3}
 800c462:	b500      	push	{lr}
 800c464:	b09c      	sub	sp, #112	@ 0x70
 800c466:	ab1d      	add	r3, sp, #116	@ 0x74
 800c468:	9002      	str	r0, [sp, #8]
 800c46a:	9006      	str	r0, [sp, #24]
 800c46c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c470:	4809      	ldr	r0, [pc, #36]	@ (800c498 <siprintf+0x38>)
 800c472:	9107      	str	r1, [sp, #28]
 800c474:	9104      	str	r1, [sp, #16]
 800c476:	4909      	ldr	r1, [pc, #36]	@ (800c49c <siprintf+0x3c>)
 800c478:	f853 2b04 	ldr.w	r2, [r3], #4
 800c47c:	9105      	str	r1, [sp, #20]
 800c47e:	6800      	ldr	r0, [r0, #0]
 800c480:	9301      	str	r3, [sp, #4]
 800c482:	a902      	add	r1, sp, #8
 800c484:	f001 fb8c 	bl	800dba0 <_svfiprintf_r>
 800c488:	9b02      	ldr	r3, [sp, #8]
 800c48a:	2200      	movs	r2, #0
 800c48c:	701a      	strb	r2, [r3, #0]
 800c48e:	b01c      	add	sp, #112	@ 0x70
 800c490:	f85d eb04 	ldr.w	lr, [sp], #4
 800c494:	b003      	add	sp, #12
 800c496:	4770      	bx	lr
 800c498:	24000020 	.word	0x24000020
 800c49c:	ffff0208 	.word	0xffff0208

0800c4a0 <__sread>:
 800c4a0:	b510      	push	{r4, lr}
 800c4a2:	460c      	mov	r4, r1
 800c4a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4a8:	f000 f86c 	bl	800c584 <_read_r>
 800c4ac:	2800      	cmp	r0, #0
 800c4ae:	bfab      	itete	ge
 800c4b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c4b2:	89a3      	ldrhlt	r3, [r4, #12]
 800c4b4:	181b      	addge	r3, r3, r0
 800c4b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c4ba:	bfac      	ite	ge
 800c4bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c4be:	81a3      	strhlt	r3, [r4, #12]
 800c4c0:	bd10      	pop	{r4, pc}

0800c4c2 <__swrite>:
 800c4c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4c6:	461f      	mov	r7, r3
 800c4c8:	898b      	ldrh	r3, [r1, #12]
 800c4ca:	05db      	lsls	r3, r3, #23
 800c4cc:	4605      	mov	r5, r0
 800c4ce:	460c      	mov	r4, r1
 800c4d0:	4616      	mov	r6, r2
 800c4d2:	d505      	bpl.n	800c4e0 <__swrite+0x1e>
 800c4d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4d8:	2302      	movs	r3, #2
 800c4da:	2200      	movs	r2, #0
 800c4dc:	f000 f840 	bl	800c560 <_lseek_r>
 800c4e0:	89a3      	ldrh	r3, [r4, #12]
 800c4e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c4ea:	81a3      	strh	r3, [r4, #12]
 800c4ec:	4632      	mov	r2, r6
 800c4ee:	463b      	mov	r3, r7
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4f6:	f000 b857 	b.w	800c5a8 <_write_r>

0800c4fa <__sseek>:
 800c4fa:	b510      	push	{r4, lr}
 800c4fc:	460c      	mov	r4, r1
 800c4fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c502:	f000 f82d 	bl	800c560 <_lseek_r>
 800c506:	1c43      	adds	r3, r0, #1
 800c508:	89a3      	ldrh	r3, [r4, #12]
 800c50a:	bf15      	itete	ne
 800c50c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c50e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c512:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c516:	81a3      	strheq	r3, [r4, #12]
 800c518:	bf18      	it	ne
 800c51a:	81a3      	strhne	r3, [r4, #12]
 800c51c:	bd10      	pop	{r4, pc}

0800c51e <__sclose>:
 800c51e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c522:	f000 b80d 	b.w	800c540 <_close_r>

0800c526 <memset>:
 800c526:	4402      	add	r2, r0
 800c528:	4603      	mov	r3, r0
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d100      	bne.n	800c530 <memset+0xa>
 800c52e:	4770      	bx	lr
 800c530:	f803 1b01 	strb.w	r1, [r3], #1
 800c534:	e7f9      	b.n	800c52a <memset+0x4>
	...

0800c538 <_localeconv_r>:
 800c538:	4800      	ldr	r0, [pc, #0]	@ (800c53c <_localeconv_r+0x4>)
 800c53a:	4770      	bx	lr
 800c53c:	24000160 	.word	0x24000160

0800c540 <_close_r>:
 800c540:	b538      	push	{r3, r4, r5, lr}
 800c542:	4d06      	ldr	r5, [pc, #24]	@ (800c55c <_close_r+0x1c>)
 800c544:	2300      	movs	r3, #0
 800c546:	4604      	mov	r4, r0
 800c548:	4608      	mov	r0, r1
 800c54a:	602b      	str	r3, [r5, #0]
 800c54c:	f7f6 fb96 	bl	8002c7c <_close>
 800c550:	1c43      	adds	r3, r0, #1
 800c552:	d102      	bne.n	800c55a <_close_r+0x1a>
 800c554:	682b      	ldr	r3, [r5, #0]
 800c556:	b103      	cbz	r3, 800c55a <_close_r+0x1a>
 800c558:	6023      	str	r3, [r4, #0]
 800c55a:	bd38      	pop	{r3, r4, r5, pc}
 800c55c:	2400277c 	.word	0x2400277c

0800c560 <_lseek_r>:
 800c560:	b538      	push	{r3, r4, r5, lr}
 800c562:	4d07      	ldr	r5, [pc, #28]	@ (800c580 <_lseek_r+0x20>)
 800c564:	4604      	mov	r4, r0
 800c566:	4608      	mov	r0, r1
 800c568:	4611      	mov	r1, r2
 800c56a:	2200      	movs	r2, #0
 800c56c:	602a      	str	r2, [r5, #0]
 800c56e:	461a      	mov	r2, r3
 800c570:	f7f6 fbab 	bl	8002cca <_lseek>
 800c574:	1c43      	adds	r3, r0, #1
 800c576:	d102      	bne.n	800c57e <_lseek_r+0x1e>
 800c578:	682b      	ldr	r3, [r5, #0]
 800c57a:	b103      	cbz	r3, 800c57e <_lseek_r+0x1e>
 800c57c:	6023      	str	r3, [r4, #0]
 800c57e:	bd38      	pop	{r3, r4, r5, pc}
 800c580:	2400277c 	.word	0x2400277c

0800c584 <_read_r>:
 800c584:	b538      	push	{r3, r4, r5, lr}
 800c586:	4d07      	ldr	r5, [pc, #28]	@ (800c5a4 <_read_r+0x20>)
 800c588:	4604      	mov	r4, r0
 800c58a:	4608      	mov	r0, r1
 800c58c:	4611      	mov	r1, r2
 800c58e:	2200      	movs	r2, #0
 800c590:	602a      	str	r2, [r5, #0]
 800c592:	461a      	mov	r2, r3
 800c594:	f7f6 fb39 	bl	8002c0a <_read>
 800c598:	1c43      	adds	r3, r0, #1
 800c59a:	d102      	bne.n	800c5a2 <_read_r+0x1e>
 800c59c:	682b      	ldr	r3, [r5, #0]
 800c59e:	b103      	cbz	r3, 800c5a2 <_read_r+0x1e>
 800c5a0:	6023      	str	r3, [r4, #0]
 800c5a2:	bd38      	pop	{r3, r4, r5, pc}
 800c5a4:	2400277c 	.word	0x2400277c

0800c5a8 <_write_r>:
 800c5a8:	b538      	push	{r3, r4, r5, lr}
 800c5aa:	4d07      	ldr	r5, [pc, #28]	@ (800c5c8 <_write_r+0x20>)
 800c5ac:	4604      	mov	r4, r0
 800c5ae:	4608      	mov	r0, r1
 800c5b0:	4611      	mov	r1, r2
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	602a      	str	r2, [r5, #0]
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	f7f6 fb44 	bl	8002c44 <_write>
 800c5bc:	1c43      	adds	r3, r0, #1
 800c5be:	d102      	bne.n	800c5c6 <_write_r+0x1e>
 800c5c0:	682b      	ldr	r3, [r5, #0]
 800c5c2:	b103      	cbz	r3, 800c5c6 <_write_r+0x1e>
 800c5c4:	6023      	str	r3, [r4, #0]
 800c5c6:	bd38      	pop	{r3, r4, r5, pc}
 800c5c8:	2400277c 	.word	0x2400277c

0800c5cc <__errno>:
 800c5cc:	4b01      	ldr	r3, [pc, #4]	@ (800c5d4 <__errno+0x8>)
 800c5ce:	6818      	ldr	r0, [r3, #0]
 800c5d0:	4770      	bx	lr
 800c5d2:	bf00      	nop
 800c5d4:	24000020 	.word	0x24000020

0800c5d8 <__libc_init_array>:
 800c5d8:	b570      	push	{r4, r5, r6, lr}
 800c5da:	4d0d      	ldr	r5, [pc, #52]	@ (800c610 <__libc_init_array+0x38>)
 800c5dc:	4c0d      	ldr	r4, [pc, #52]	@ (800c614 <__libc_init_array+0x3c>)
 800c5de:	1b64      	subs	r4, r4, r5
 800c5e0:	10a4      	asrs	r4, r4, #2
 800c5e2:	2600      	movs	r6, #0
 800c5e4:	42a6      	cmp	r6, r4
 800c5e6:	d109      	bne.n	800c5fc <__libc_init_array+0x24>
 800c5e8:	4d0b      	ldr	r5, [pc, #44]	@ (800c618 <__libc_init_array+0x40>)
 800c5ea:	4c0c      	ldr	r4, [pc, #48]	@ (800c61c <__libc_init_array+0x44>)
 800c5ec:	f002 fdc4 	bl	800f178 <_init>
 800c5f0:	1b64      	subs	r4, r4, r5
 800c5f2:	10a4      	asrs	r4, r4, #2
 800c5f4:	2600      	movs	r6, #0
 800c5f6:	42a6      	cmp	r6, r4
 800c5f8:	d105      	bne.n	800c606 <__libc_init_array+0x2e>
 800c5fa:	bd70      	pop	{r4, r5, r6, pc}
 800c5fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c600:	4798      	blx	r3
 800c602:	3601      	adds	r6, #1
 800c604:	e7ee      	b.n	800c5e4 <__libc_init_array+0xc>
 800c606:	f855 3b04 	ldr.w	r3, [r5], #4
 800c60a:	4798      	blx	r3
 800c60c:	3601      	adds	r6, #1
 800c60e:	e7f2      	b.n	800c5f6 <__libc_init_array+0x1e>
 800c610:	0800f758 	.word	0x0800f758
 800c614:	0800f758 	.word	0x0800f758
 800c618:	0800f758 	.word	0x0800f758
 800c61c:	0800f75c 	.word	0x0800f75c

0800c620 <__retarget_lock_init_recursive>:
 800c620:	4770      	bx	lr

0800c622 <__retarget_lock_acquire_recursive>:
 800c622:	4770      	bx	lr

0800c624 <__retarget_lock_release_recursive>:
 800c624:	4770      	bx	lr

0800c626 <quorem>:
 800c626:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c62a:	6903      	ldr	r3, [r0, #16]
 800c62c:	690c      	ldr	r4, [r1, #16]
 800c62e:	42a3      	cmp	r3, r4
 800c630:	4607      	mov	r7, r0
 800c632:	db7e      	blt.n	800c732 <quorem+0x10c>
 800c634:	3c01      	subs	r4, #1
 800c636:	f101 0814 	add.w	r8, r1, #20
 800c63a:	00a3      	lsls	r3, r4, #2
 800c63c:	f100 0514 	add.w	r5, r0, #20
 800c640:	9300      	str	r3, [sp, #0]
 800c642:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c646:	9301      	str	r3, [sp, #4]
 800c648:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c64c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c650:	3301      	adds	r3, #1
 800c652:	429a      	cmp	r2, r3
 800c654:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c658:	fbb2 f6f3 	udiv	r6, r2, r3
 800c65c:	d32e      	bcc.n	800c6bc <quorem+0x96>
 800c65e:	f04f 0a00 	mov.w	sl, #0
 800c662:	46c4      	mov	ip, r8
 800c664:	46ae      	mov	lr, r5
 800c666:	46d3      	mov	fp, sl
 800c668:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c66c:	b298      	uxth	r0, r3
 800c66e:	fb06 a000 	mla	r0, r6, r0, sl
 800c672:	0c02      	lsrs	r2, r0, #16
 800c674:	0c1b      	lsrs	r3, r3, #16
 800c676:	fb06 2303 	mla	r3, r6, r3, r2
 800c67a:	f8de 2000 	ldr.w	r2, [lr]
 800c67e:	b280      	uxth	r0, r0
 800c680:	b292      	uxth	r2, r2
 800c682:	1a12      	subs	r2, r2, r0
 800c684:	445a      	add	r2, fp
 800c686:	f8de 0000 	ldr.w	r0, [lr]
 800c68a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c68e:	b29b      	uxth	r3, r3
 800c690:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c694:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c698:	b292      	uxth	r2, r2
 800c69a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c69e:	45e1      	cmp	r9, ip
 800c6a0:	f84e 2b04 	str.w	r2, [lr], #4
 800c6a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c6a8:	d2de      	bcs.n	800c668 <quorem+0x42>
 800c6aa:	9b00      	ldr	r3, [sp, #0]
 800c6ac:	58eb      	ldr	r3, [r5, r3]
 800c6ae:	b92b      	cbnz	r3, 800c6bc <quorem+0x96>
 800c6b0:	9b01      	ldr	r3, [sp, #4]
 800c6b2:	3b04      	subs	r3, #4
 800c6b4:	429d      	cmp	r5, r3
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	d32f      	bcc.n	800c71a <quorem+0xf4>
 800c6ba:	613c      	str	r4, [r7, #16]
 800c6bc:	4638      	mov	r0, r7
 800c6be:	f001 f90b 	bl	800d8d8 <__mcmp>
 800c6c2:	2800      	cmp	r0, #0
 800c6c4:	db25      	blt.n	800c712 <quorem+0xec>
 800c6c6:	4629      	mov	r1, r5
 800c6c8:	2000      	movs	r0, #0
 800c6ca:	f858 2b04 	ldr.w	r2, [r8], #4
 800c6ce:	f8d1 c000 	ldr.w	ip, [r1]
 800c6d2:	fa1f fe82 	uxth.w	lr, r2
 800c6d6:	fa1f f38c 	uxth.w	r3, ip
 800c6da:	eba3 030e 	sub.w	r3, r3, lr
 800c6de:	4403      	add	r3, r0
 800c6e0:	0c12      	lsrs	r2, r2, #16
 800c6e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c6e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6f0:	45c1      	cmp	r9, r8
 800c6f2:	f841 3b04 	str.w	r3, [r1], #4
 800c6f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c6fa:	d2e6      	bcs.n	800c6ca <quorem+0xa4>
 800c6fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c700:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c704:	b922      	cbnz	r2, 800c710 <quorem+0xea>
 800c706:	3b04      	subs	r3, #4
 800c708:	429d      	cmp	r5, r3
 800c70a:	461a      	mov	r2, r3
 800c70c:	d30b      	bcc.n	800c726 <quorem+0x100>
 800c70e:	613c      	str	r4, [r7, #16]
 800c710:	3601      	adds	r6, #1
 800c712:	4630      	mov	r0, r6
 800c714:	b003      	add	sp, #12
 800c716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c71a:	6812      	ldr	r2, [r2, #0]
 800c71c:	3b04      	subs	r3, #4
 800c71e:	2a00      	cmp	r2, #0
 800c720:	d1cb      	bne.n	800c6ba <quorem+0x94>
 800c722:	3c01      	subs	r4, #1
 800c724:	e7c6      	b.n	800c6b4 <quorem+0x8e>
 800c726:	6812      	ldr	r2, [r2, #0]
 800c728:	3b04      	subs	r3, #4
 800c72a:	2a00      	cmp	r2, #0
 800c72c:	d1ef      	bne.n	800c70e <quorem+0xe8>
 800c72e:	3c01      	subs	r4, #1
 800c730:	e7ea      	b.n	800c708 <quorem+0xe2>
 800c732:	2000      	movs	r0, #0
 800c734:	e7ee      	b.n	800c714 <quorem+0xee>
	...

0800c738 <_dtoa_r>:
 800c738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c73c:	ed2d 8b02 	vpush	{d8}
 800c740:	69c7      	ldr	r7, [r0, #28]
 800c742:	b091      	sub	sp, #68	@ 0x44
 800c744:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c748:	ec55 4b10 	vmov	r4, r5, d0
 800c74c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800c74e:	9107      	str	r1, [sp, #28]
 800c750:	4681      	mov	r9, r0
 800c752:	9209      	str	r2, [sp, #36]	@ 0x24
 800c754:	930d      	str	r3, [sp, #52]	@ 0x34
 800c756:	b97f      	cbnz	r7, 800c778 <_dtoa_r+0x40>
 800c758:	2010      	movs	r0, #16
 800c75a:	f000 fd8d 	bl	800d278 <malloc>
 800c75e:	4602      	mov	r2, r0
 800c760:	f8c9 001c 	str.w	r0, [r9, #28]
 800c764:	b920      	cbnz	r0, 800c770 <_dtoa_r+0x38>
 800c766:	4ba0      	ldr	r3, [pc, #640]	@ (800c9e8 <_dtoa_r+0x2b0>)
 800c768:	21ef      	movs	r1, #239	@ 0xef
 800c76a:	48a0      	ldr	r0, [pc, #640]	@ (800c9ec <_dtoa_r+0x2b4>)
 800c76c:	f001 fdce 	bl	800e30c <__assert_func>
 800c770:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c774:	6007      	str	r7, [r0, #0]
 800c776:	60c7      	str	r7, [r0, #12]
 800c778:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c77c:	6819      	ldr	r1, [r3, #0]
 800c77e:	b159      	cbz	r1, 800c798 <_dtoa_r+0x60>
 800c780:	685a      	ldr	r2, [r3, #4]
 800c782:	604a      	str	r2, [r1, #4]
 800c784:	2301      	movs	r3, #1
 800c786:	4093      	lsls	r3, r2
 800c788:	608b      	str	r3, [r1, #8]
 800c78a:	4648      	mov	r0, r9
 800c78c:	f000 fe6a 	bl	800d464 <_Bfree>
 800c790:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c794:	2200      	movs	r2, #0
 800c796:	601a      	str	r2, [r3, #0]
 800c798:	1e2b      	subs	r3, r5, #0
 800c79a:	bfbb      	ittet	lt
 800c79c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c7a0:	9303      	strlt	r3, [sp, #12]
 800c7a2:	2300      	movge	r3, #0
 800c7a4:	2201      	movlt	r2, #1
 800c7a6:	bfac      	ite	ge
 800c7a8:	6033      	strge	r3, [r6, #0]
 800c7aa:	6032      	strlt	r2, [r6, #0]
 800c7ac:	4b90      	ldr	r3, [pc, #576]	@ (800c9f0 <_dtoa_r+0x2b8>)
 800c7ae:	9e03      	ldr	r6, [sp, #12]
 800c7b0:	43b3      	bics	r3, r6
 800c7b2:	d110      	bne.n	800c7d6 <_dtoa_r+0x9e>
 800c7b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c7b6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c7ba:	6013      	str	r3, [r2, #0]
 800c7bc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800c7c0:	4323      	orrs	r3, r4
 800c7c2:	f000 84de 	beq.w	800d182 <_dtoa_r+0xa4a>
 800c7c6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c7c8:	4f8a      	ldr	r7, [pc, #552]	@ (800c9f4 <_dtoa_r+0x2bc>)
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	f000 84e0 	beq.w	800d190 <_dtoa_r+0xa58>
 800c7d0:	1cfb      	adds	r3, r7, #3
 800c7d2:	f000 bcdb 	b.w	800d18c <_dtoa_r+0xa54>
 800c7d6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c7da:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c7de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7e2:	d10a      	bne.n	800c7fa <_dtoa_r+0xc2>
 800c7e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	6013      	str	r3, [r2, #0]
 800c7ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c7ec:	b113      	cbz	r3, 800c7f4 <_dtoa_r+0xbc>
 800c7ee:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c7f0:	4b81      	ldr	r3, [pc, #516]	@ (800c9f8 <_dtoa_r+0x2c0>)
 800c7f2:	6013      	str	r3, [r2, #0]
 800c7f4:	4f81      	ldr	r7, [pc, #516]	@ (800c9fc <_dtoa_r+0x2c4>)
 800c7f6:	f000 bccb 	b.w	800d190 <_dtoa_r+0xa58>
 800c7fa:	aa0e      	add	r2, sp, #56	@ 0x38
 800c7fc:	a90f      	add	r1, sp, #60	@ 0x3c
 800c7fe:	4648      	mov	r0, r9
 800c800:	eeb0 0b48 	vmov.f64	d0, d8
 800c804:	f001 f918 	bl	800da38 <__d2b>
 800c808:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800c80c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c80e:	9001      	str	r0, [sp, #4]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d045      	beq.n	800c8a0 <_dtoa_r+0x168>
 800c814:	eeb0 7b48 	vmov.f64	d7, d8
 800c818:	ee18 1a90 	vmov	r1, s17
 800c81c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c820:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800c824:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800c828:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c82c:	2500      	movs	r5, #0
 800c82e:	ee07 1a90 	vmov	s15, r1
 800c832:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800c836:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c9d0 <_dtoa_r+0x298>
 800c83a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c83e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800c9d8 <_dtoa_r+0x2a0>
 800c842:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c846:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c9e0 <_dtoa_r+0x2a8>
 800c84a:	ee07 3a90 	vmov	s15, r3
 800c84e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c852:	eeb0 7b46 	vmov.f64	d7, d6
 800c856:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c85a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c85e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c866:	ee16 8a90 	vmov	r8, s13
 800c86a:	d508      	bpl.n	800c87e <_dtoa_r+0x146>
 800c86c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c870:	eeb4 6b47 	vcmp.f64	d6, d7
 800c874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c878:	bf18      	it	ne
 800c87a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800c87e:	f1b8 0f16 	cmp.w	r8, #22
 800c882:	d82b      	bhi.n	800c8dc <_dtoa_r+0x1a4>
 800c884:	495e      	ldr	r1, [pc, #376]	@ (800ca00 <_dtoa_r+0x2c8>)
 800c886:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800c88a:	ed91 7b00 	vldr	d7, [r1]
 800c88e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c896:	d501      	bpl.n	800c89c <_dtoa_r+0x164>
 800c898:	f108 38ff 	add.w	r8, r8, #4294967295
 800c89c:	2100      	movs	r1, #0
 800c89e:	e01e      	b.n	800c8de <_dtoa_r+0x1a6>
 800c8a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8a2:	4413      	add	r3, r2
 800c8a4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800c8a8:	2920      	cmp	r1, #32
 800c8aa:	bfc1      	itttt	gt
 800c8ac:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800c8b0:	408e      	lslgt	r6, r1
 800c8b2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800c8b6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800c8ba:	bfd6      	itet	le
 800c8bc:	f1c1 0120 	rsble	r1, r1, #32
 800c8c0:	4331      	orrgt	r1, r6
 800c8c2:	fa04 f101 	lslle.w	r1, r4, r1
 800c8c6:	ee07 1a90 	vmov	s15, r1
 800c8ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c8ce:	3b01      	subs	r3, #1
 800c8d0:	ee17 1a90 	vmov	r1, s15
 800c8d4:	2501      	movs	r5, #1
 800c8d6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800c8da:	e7a8      	b.n	800c82e <_dtoa_r+0xf6>
 800c8dc:	2101      	movs	r1, #1
 800c8de:	1ad2      	subs	r2, r2, r3
 800c8e0:	1e53      	subs	r3, r2, #1
 800c8e2:	9306      	str	r3, [sp, #24]
 800c8e4:	bf45      	ittet	mi
 800c8e6:	f1c2 0301 	rsbmi	r3, r2, #1
 800c8ea:	9305      	strmi	r3, [sp, #20]
 800c8ec:	2300      	movpl	r3, #0
 800c8ee:	2300      	movmi	r3, #0
 800c8f0:	bf4c      	ite	mi
 800c8f2:	9306      	strmi	r3, [sp, #24]
 800c8f4:	9305      	strpl	r3, [sp, #20]
 800c8f6:	f1b8 0f00 	cmp.w	r8, #0
 800c8fa:	910c      	str	r1, [sp, #48]	@ 0x30
 800c8fc:	db18      	blt.n	800c930 <_dtoa_r+0x1f8>
 800c8fe:	9b06      	ldr	r3, [sp, #24]
 800c900:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800c904:	4443      	add	r3, r8
 800c906:	9306      	str	r3, [sp, #24]
 800c908:	2300      	movs	r3, #0
 800c90a:	9a07      	ldr	r2, [sp, #28]
 800c90c:	2a09      	cmp	r2, #9
 800c90e:	d849      	bhi.n	800c9a4 <_dtoa_r+0x26c>
 800c910:	2a05      	cmp	r2, #5
 800c912:	bfc4      	itt	gt
 800c914:	3a04      	subgt	r2, #4
 800c916:	9207      	strgt	r2, [sp, #28]
 800c918:	9a07      	ldr	r2, [sp, #28]
 800c91a:	f1a2 0202 	sub.w	r2, r2, #2
 800c91e:	bfcc      	ite	gt
 800c920:	2400      	movgt	r4, #0
 800c922:	2401      	movle	r4, #1
 800c924:	2a03      	cmp	r2, #3
 800c926:	d848      	bhi.n	800c9ba <_dtoa_r+0x282>
 800c928:	e8df f002 	tbb	[pc, r2]
 800c92c:	3a2c2e0b 	.word	0x3a2c2e0b
 800c930:	9b05      	ldr	r3, [sp, #20]
 800c932:	2200      	movs	r2, #0
 800c934:	eba3 0308 	sub.w	r3, r3, r8
 800c938:	9305      	str	r3, [sp, #20]
 800c93a:	920a      	str	r2, [sp, #40]	@ 0x28
 800c93c:	f1c8 0300 	rsb	r3, r8, #0
 800c940:	e7e3      	b.n	800c90a <_dtoa_r+0x1d2>
 800c942:	2200      	movs	r2, #0
 800c944:	9208      	str	r2, [sp, #32]
 800c946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c948:	2a00      	cmp	r2, #0
 800c94a:	dc39      	bgt.n	800c9c0 <_dtoa_r+0x288>
 800c94c:	f04f 0b01 	mov.w	fp, #1
 800c950:	46da      	mov	sl, fp
 800c952:	465a      	mov	r2, fp
 800c954:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800c958:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800c95c:	2100      	movs	r1, #0
 800c95e:	2004      	movs	r0, #4
 800c960:	f100 0614 	add.w	r6, r0, #20
 800c964:	4296      	cmp	r6, r2
 800c966:	d930      	bls.n	800c9ca <_dtoa_r+0x292>
 800c968:	6079      	str	r1, [r7, #4]
 800c96a:	4648      	mov	r0, r9
 800c96c:	9304      	str	r3, [sp, #16]
 800c96e:	f000 fd39 	bl	800d3e4 <_Balloc>
 800c972:	9b04      	ldr	r3, [sp, #16]
 800c974:	4607      	mov	r7, r0
 800c976:	2800      	cmp	r0, #0
 800c978:	d146      	bne.n	800ca08 <_dtoa_r+0x2d0>
 800c97a:	4b22      	ldr	r3, [pc, #136]	@ (800ca04 <_dtoa_r+0x2cc>)
 800c97c:	4602      	mov	r2, r0
 800c97e:	f240 11af 	movw	r1, #431	@ 0x1af
 800c982:	e6f2      	b.n	800c76a <_dtoa_r+0x32>
 800c984:	2201      	movs	r2, #1
 800c986:	e7dd      	b.n	800c944 <_dtoa_r+0x20c>
 800c988:	2200      	movs	r2, #0
 800c98a:	9208      	str	r2, [sp, #32]
 800c98c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c98e:	eb08 0b02 	add.w	fp, r8, r2
 800c992:	f10b 0a01 	add.w	sl, fp, #1
 800c996:	4652      	mov	r2, sl
 800c998:	2a01      	cmp	r2, #1
 800c99a:	bfb8      	it	lt
 800c99c:	2201      	movlt	r2, #1
 800c99e:	e7db      	b.n	800c958 <_dtoa_r+0x220>
 800c9a0:	2201      	movs	r2, #1
 800c9a2:	e7f2      	b.n	800c98a <_dtoa_r+0x252>
 800c9a4:	2401      	movs	r4, #1
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800c9ac:	f04f 3bff 	mov.w	fp, #4294967295
 800c9b0:	2100      	movs	r1, #0
 800c9b2:	46da      	mov	sl, fp
 800c9b4:	2212      	movs	r2, #18
 800c9b6:	9109      	str	r1, [sp, #36]	@ 0x24
 800c9b8:	e7ce      	b.n	800c958 <_dtoa_r+0x220>
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	9208      	str	r2, [sp, #32]
 800c9be:	e7f5      	b.n	800c9ac <_dtoa_r+0x274>
 800c9c0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800c9c4:	46da      	mov	sl, fp
 800c9c6:	465a      	mov	r2, fp
 800c9c8:	e7c6      	b.n	800c958 <_dtoa_r+0x220>
 800c9ca:	3101      	adds	r1, #1
 800c9cc:	0040      	lsls	r0, r0, #1
 800c9ce:	e7c7      	b.n	800c960 <_dtoa_r+0x228>
 800c9d0:	636f4361 	.word	0x636f4361
 800c9d4:	3fd287a7 	.word	0x3fd287a7
 800c9d8:	8b60c8b3 	.word	0x8b60c8b3
 800c9dc:	3fc68a28 	.word	0x3fc68a28
 800c9e0:	509f79fb 	.word	0x509f79fb
 800c9e4:	3fd34413 	.word	0x3fd34413
 800c9e8:	0800f249 	.word	0x0800f249
 800c9ec:	0800f260 	.word	0x0800f260
 800c9f0:	7ff00000 	.word	0x7ff00000
 800c9f4:	0800f245 	.word	0x0800f245
 800c9f8:	0800f219 	.word	0x0800f219
 800c9fc:	0800f218 	.word	0x0800f218
 800ca00:	0800f358 	.word	0x0800f358
 800ca04:	0800f2b8 	.word	0x0800f2b8
 800ca08:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800ca0c:	f1ba 0f0e 	cmp.w	sl, #14
 800ca10:	6010      	str	r0, [r2, #0]
 800ca12:	d86f      	bhi.n	800caf4 <_dtoa_r+0x3bc>
 800ca14:	2c00      	cmp	r4, #0
 800ca16:	d06d      	beq.n	800caf4 <_dtoa_r+0x3bc>
 800ca18:	f1b8 0f00 	cmp.w	r8, #0
 800ca1c:	f340 80c2 	ble.w	800cba4 <_dtoa_r+0x46c>
 800ca20:	4aca      	ldr	r2, [pc, #808]	@ (800cd4c <_dtoa_r+0x614>)
 800ca22:	f008 010f 	and.w	r1, r8, #15
 800ca26:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ca2a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800ca2e:	ed92 7b00 	vldr	d7, [r2]
 800ca32:	ea4f 1128 	mov.w	r1, r8, asr #4
 800ca36:	f000 80a9 	beq.w	800cb8c <_dtoa_r+0x454>
 800ca3a:	4ac5      	ldr	r2, [pc, #788]	@ (800cd50 <_dtoa_r+0x618>)
 800ca3c:	ed92 6b08 	vldr	d6, [r2, #32]
 800ca40:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ca44:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ca48:	f001 010f 	and.w	r1, r1, #15
 800ca4c:	2203      	movs	r2, #3
 800ca4e:	48c0      	ldr	r0, [pc, #768]	@ (800cd50 <_dtoa_r+0x618>)
 800ca50:	2900      	cmp	r1, #0
 800ca52:	f040 809d 	bne.w	800cb90 <_dtoa_r+0x458>
 800ca56:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ca5a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ca5e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ca62:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ca64:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ca68:	2900      	cmp	r1, #0
 800ca6a:	f000 80c1 	beq.w	800cbf0 <_dtoa_r+0x4b8>
 800ca6e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800ca72:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ca76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca7a:	f140 80b9 	bpl.w	800cbf0 <_dtoa_r+0x4b8>
 800ca7e:	f1ba 0f00 	cmp.w	sl, #0
 800ca82:	f000 80b5 	beq.w	800cbf0 <_dtoa_r+0x4b8>
 800ca86:	f1bb 0f00 	cmp.w	fp, #0
 800ca8a:	dd31      	ble.n	800caf0 <_dtoa_r+0x3b8>
 800ca8c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800ca90:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ca94:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ca98:	f108 31ff 	add.w	r1, r8, #4294967295
 800ca9c:	9104      	str	r1, [sp, #16]
 800ca9e:	3201      	adds	r2, #1
 800caa0:	465c      	mov	r4, fp
 800caa2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800caa6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800caaa:	ee07 2a90 	vmov	s15, r2
 800caae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cab2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800cab6:	ee15 2a90 	vmov	r2, s11
 800caba:	ec51 0b15 	vmov	r0, r1, d5
 800cabe:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800cac2:	2c00      	cmp	r4, #0
 800cac4:	f040 8098 	bne.w	800cbf8 <_dtoa_r+0x4c0>
 800cac8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800cacc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cad0:	ec41 0b17 	vmov	d7, r0, r1
 800cad4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cadc:	f300 8261 	bgt.w	800cfa2 <_dtoa_r+0x86a>
 800cae0:	eeb1 7b47 	vneg.f64	d7, d7
 800cae4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caec:	f100 80f5 	bmi.w	800ccda <_dtoa_r+0x5a2>
 800caf0:	ed8d 8b02 	vstr	d8, [sp, #8]
 800caf4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800caf6:	2a00      	cmp	r2, #0
 800caf8:	f2c0 812c 	blt.w	800cd54 <_dtoa_r+0x61c>
 800cafc:	f1b8 0f0e 	cmp.w	r8, #14
 800cb00:	f300 8128 	bgt.w	800cd54 <_dtoa_r+0x61c>
 800cb04:	4b91      	ldr	r3, [pc, #580]	@ (800cd4c <_dtoa_r+0x614>)
 800cb06:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cb0a:	ed93 6b00 	vldr	d6, [r3]
 800cb0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	da03      	bge.n	800cb1c <_dtoa_r+0x3e4>
 800cb14:	f1ba 0f00 	cmp.w	sl, #0
 800cb18:	f340 80d2 	ble.w	800ccc0 <_dtoa_r+0x588>
 800cb1c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800cb20:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb24:	463e      	mov	r6, r7
 800cb26:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800cb2a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800cb2e:	ee15 3a10 	vmov	r3, s10
 800cb32:	3330      	adds	r3, #48	@ 0x30
 800cb34:	f806 3b01 	strb.w	r3, [r6], #1
 800cb38:	1bf3      	subs	r3, r6, r7
 800cb3a:	459a      	cmp	sl, r3
 800cb3c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800cb40:	eea3 7b46 	vfms.f64	d7, d3, d6
 800cb44:	f040 80f8 	bne.w	800cd38 <_dtoa_r+0x600>
 800cb48:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cb4c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cb50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb54:	f300 80dd 	bgt.w	800cd12 <_dtoa_r+0x5da>
 800cb58:	eeb4 7b46 	vcmp.f64	d7, d6
 800cb5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb60:	d104      	bne.n	800cb6c <_dtoa_r+0x434>
 800cb62:	ee15 3a10 	vmov	r3, s10
 800cb66:	07db      	lsls	r3, r3, #31
 800cb68:	f100 80d3 	bmi.w	800cd12 <_dtoa_r+0x5da>
 800cb6c:	9901      	ldr	r1, [sp, #4]
 800cb6e:	4648      	mov	r0, r9
 800cb70:	f000 fc78 	bl	800d464 <_Bfree>
 800cb74:	2300      	movs	r3, #0
 800cb76:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cb78:	7033      	strb	r3, [r6, #0]
 800cb7a:	f108 0301 	add.w	r3, r8, #1
 800cb7e:	6013      	str	r3, [r2, #0]
 800cb80:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	f000 8304 	beq.w	800d190 <_dtoa_r+0xa58>
 800cb88:	601e      	str	r6, [r3, #0]
 800cb8a:	e301      	b.n	800d190 <_dtoa_r+0xa58>
 800cb8c:	2202      	movs	r2, #2
 800cb8e:	e75e      	b.n	800ca4e <_dtoa_r+0x316>
 800cb90:	07cc      	lsls	r4, r1, #31
 800cb92:	d504      	bpl.n	800cb9e <_dtoa_r+0x466>
 800cb94:	ed90 6b00 	vldr	d6, [r0]
 800cb98:	3201      	adds	r2, #1
 800cb9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cb9e:	1049      	asrs	r1, r1, #1
 800cba0:	3008      	adds	r0, #8
 800cba2:	e755      	b.n	800ca50 <_dtoa_r+0x318>
 800cba4:	d022      	beq.n	800cbec <_dtoa_r+0x4b4>
 800cba6:	f1c8 0100 	rsb	r1, r8, #0
 800cbaa:	4a68      	ldr	r2, [pc, #416]	@ (800cd4c <_dtoa_r+0x614>)
 800cbac:	f001 000f 	and.w	r0, r1, #15
 800cbb0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cbb4:	ed92 7b00 	vldr	d7, [r2]
 800cbb8:	ee28 7b07 	vmul.f64	d7, d8, d7
 800cbbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cbc0:	4863      	ldr	r0, [pc, #396]	@ (800cd50 <_dtoa_r+0x618>)
 800cbc2:	1109      	asrs	r1, r1, #4
 800cbc4:	2400      	movs	r4, #0
 800cbc6:	2202      	movs	r2, #2
 800cbc8:	b929      	cbnz	r1, 800cbd6 <_dtoa_r+0x49e>
 800cbca:	2c00      	cmp	r4, #0
 800cbcc:	f43f af49 	beq.w	800ca62 <_dtoa_r+0x32a>
 800cbd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cbd4:	e745      	b.n	800ca62 <_dtoa_r+0x32a>
 800cbd6:	07ce      	lsls	r6, r1, #31
 800cbd8:	d505      	bpl.n	800cbe6 <_dtoa_r+0x4ae>
 800cbda:	ed90 6b00 	vldr	d6, [r0]
 800cbde:	3201      	adds	r2, #1
 800cbe0:	2401      	movs	r4, #1
 800cbe2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cbe6:	1049      	asrs	r1, r1, #1
 800cbe8:	3008      	adds	r0, #8
 800cbea:	e7ed      	b.n	800cbc8 <_dtoa_r+0x490>
 800cbec:	2202      	movs	r2, #2
 800cbee:	e738      	b.n	800ca62 <_dtoa_r+0x32a>
 800cbf0:	f8cd 8010 	str.w	r8, [sp, #16]
 800cbf4:	4654      	mov	r4, sl
 800cbf6:	e754      	b.n	800caa2 <_dtoa_r+0x36a>
 800cbf8:	4a54      	ldr	r2, [pc, #336]	@ (800cd4c <_dtoa_r+0x614>)
 800cbfa:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800cbfe:	ed12 4b02 	vldr	d4, [r2, #-8]
 800cc02:	9a08      	ldr	r2, [sp, #32]
 800cc04:	ec41 0b17 	vmov	d7, r0, r1
 800cc08:	443c      	add	r4, r7
 800cc0a:	b34a      	cbz	r2, 800cc60 <_dtoa_r+0x528>
 800cc0c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800cc10:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800cc14:	463e      	mov	r6, r7
 800cc16:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800cc1a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800cc1e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cc22:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cc26:	ee14 2a90 	vmov	r2, s9
 800cc2a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cc2e:	3230      	adds	r2, #48	@ 0x30
 800cc30:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cc34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cc38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc3c:	f806 2b01 	strb.w	r2, [r6], #1
 800cc40:	d438      	bmi.n	800ccb4 <_dtoa_r+0x57c>
 800cc42:	ee32 5b46 	vsub.f64	d5, d2, d6
 800cc46:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800cc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc4e:	d462      	bmi.n	800cd16 <_dtoa_r+0x5de>
 800cc50:	42a6      	cmp	r6, r4
 800cc52:	f43f af4d 	beq.w	800caf0 <_dtoa_r+0x3b8>
 800cc56:	ee27 7b03 	vmul.f64	d7, d7, d3
 800cc5a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cc5e:	e7e0      	b.n	800cc22 <_dtoa_r+0x4ea>
 800cc60:	4621      	mov	r1, r4
 800cc62:	463e      	mov	r6, r7
 800cc64:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cc68:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800cc6c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cc70:	ee14 2a90 	vmov	r2, s9
 800cc74:	3230      	adds	r2, #48	@ 0x30
 800cc76:	f806 2b01 	strb.w	r2, [r6], #1
 800cc7a:	42a6      	cmp	r6, r4
 800cc7c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cc80:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cc84:	d119      	bne.n	800ccba <_dtoa_r+0x582>
 800cc86:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800cc8a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800cc8e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800cc92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc96:	dc3e      	bgt.n	800cd16 <_dtoa_r+0x5de>
 800cc98:	ee35 5b47 	vsub.f64	d5, d5, d7
 800cc9c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800cca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cca4:	f57f af24 	bpl.w	800caf0 <_dtoa_r+0x3b8>
 800cca8:	460e      	mov	r6, r1
 800ccaa:	3901      	subs	r1, #1
 800ccac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ccb0:	2b30      	cmp	r3, #48	@ 0x30
 800ccb2:	d0f9      	beq.n	800cca8 <_dtoa_r+0x570>
 800ccb4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ccb8:	e758      	b.n	800cb6c <_dtoa_r+0x434>
 800ccba:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ccbe:	e7d5      	b.n	800cc6c <_dtoa_r+0x534>
 800ccc0:	d10b      	bne.n	800ccda <_dtoa_r+0x5a2>
 800ccc2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ccc6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ccca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ccce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ccd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccd6:	f2c0 8161 	blt.w	800cf9c <_dtoa_r+0x864>
 800ccda:	2400      	movs	r4, #0
 800ccdc:	4625      	mov	r5, r4
 800ccde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cce0:	43db      	mvns	r3, r3
 800cce2:	9304      	str	r3, [sp, #16]
 800cce4:	463e      	mov	r6, r7
 800cce6:	f04f 0800 	mov.w	r8, #0
 800ccea:	4621      	mov	r1, r4
 800ccec:	4648      	mov	r0, r9
 800ccee:	f000 fbb9 	bl	800d464 <_Bfree>
 800ccf2:	2d00      	cmp	r5, #0
 800ccf4:	d0de      	beq.n	800ccb4 <_dtoa_r+0x57c>
 800ccf6:	f1b8 0f00 	cmp.w	r8, #0
 800ccfa:	d005      	beq.n	800cd08 <_dtoa_r+0x5d0>
 800ccfc:	45a8      	cmp	r8, r5
 800ccfe:	d003      	beq.n	800cd08 <_dtoa_r+0x5d0>
 800cd00:	4641      	mov	r1, r8
 800cd02:	4648      	mov	r0, r9
 800cd04:	f000 fbae 	bl	800d464 <_Bfree>
 800cd08:	4629      	mov	r1, r5
 800cd0a:	4648      	mov	r0, r9
 800cd0c:	f000 fbaa 	bl	800d464 <_Bfree>
 800cd10:	e7d0      	b.n	800ccb4 <_dtoa_r+0x57c>
 800cd12:	f8cd 8010 	str.w	r8, [sp, #16]
 800cd16:	4633      	mov	r3, r6
 800cd18:	461e      	mov	r6, r3
 800cd1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd1e:	2a39      	cmp	r2, #57	@ 0x39
 800cd20:	d106      	bne.n	800cd30 <_dtoa_r+0x5f8>
 800cd22:	429f      	cmp	r7, r3
 800cd24:	d1f8      	bne.n	800cd18 <_dtoa_r+0x5e0>
 800cd26:	9a04      	ldr	r2, [sp, #16]
 800cd28:	3201      	adds	r2, #1
 800cd2a:	9204      	str	r2, [sp, #16]
 800cd2c:	2230      	movs	r2, #48	@ 0x30
 800cd2e:	703a      	strb	r2, [r7, #0]
 800cd30:	781a      	ldrb	r2, [r3, #0]
 800cd32:	3201      	adds	r2, #1
 800cd34:	701a      	strb	r2, [r3, #0]
 800cd36:	e7bd      	b.n	800ccb4 <_dtoa_r+0x57c>
 800cd38:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cd3c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd44:	f47f aeef 	bne.w	800cb26 <_dtoa_r+0x3ee>
 800cd48:	e710      	b.n	800cb6c <_dtoa_r+0x434>
 800cd4a:	bf00      	nop
 800cd4c:	0800f358 	.word	0x0800f358
 800cd50:	0800f330 	.word	0x0800f330
 800cd54:	9908      	ldr	r1, [sp, #32]
 800cd56:	2900      	cmp	r1, #0
 800cd58:	f000 80e3 	beq.w	800cf22 <_dtoa_r+0x7ea>
 800cd5c:	9907      	ldr	r1, [sp, #28]
 800cd5e:	2901      	cmp	r1, #1
 800cd60:	f300 80c8 	bgt.w	800cef4 <_dtoa_r+0x7bc>
 800cd64:	2d00      	cmp	r5, #0
 800cd66:	f000 80c1 	beq.w	800ceec <_dtoa_r+0x7b4>
 800cd6a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cd6e:	9e05      	ldr	r6, [sp, #20]
 800cd70:	461c      	mov	r4, r3
 800cd72:	9304      	str	r3, [sp, #16]
 800cd74:	9b05      	ldr	r3, [sp, #20]
 800cd76:	4413      	add	r3, r2
 800cd78:	9305      	str	r3, [sp, #20]
 800cd7a:	9b06      	ldr	r3, [sp, #24]
 800cd7c:	2101      	movs	r1, #1
 800cd7e:	4413      	add	r3, r2
 800cd80:	4648      	mov	r0, r9
 800cd82:	9306      	str	r3, [sp, #24]
 800cd84:	f000 fc22 	bl	800d5cc <__i2b>
 800cd88:	9b04      	ldr	r3, [sp, #16]
 800cd8a:	4605      	mov	r5, r0
 800cd8c:	b166      	cbz	r6, 800cda8 <_dtoa_r+0x670>
 800cd8e:	9a06      	ldr	r2, [sp, #24]
 800cd90:	2a00      	cmp	r2, #0
 800cd92:	dd09      	ble.n	800cda8 <_dtoa_r+0x670>
 800cd94:	42b2      	cmp	r2, r6
 800cd96:	9905      	ldr	r1, [sp, #20]
 800cd98:	bfa8      	it	ge
 800cd9a:	4632      	movge	r2, r6
 800cd9c:	1a89      	subs	r1, r1, r2
 800cd9e:	9105      	str	r1, [sp, #20]
 800cda0:	9906      	ldr	r1, [sp, #24]
 800cda2:	1ab6      	subs	r6, r6, r2
 800cda4:	1a8a      	subs	r2, r1, r2
 800cda6:	9206      	str	r2, [sp, #24]
 800cda8:	b1fb      	cbz	r3, 800cdea <_dtoa_r+0x6b2>
 800cdaa:	9a08      	ldr	r2, [sp, #32]
 800cdac:	2a00      	cmp	r2, #0
 800cdae:	f000 80bc 	beq.w	800cf2a <_dtoa_r+0x7f2>
 800cdb2:	b19c      	cbz	r4, 800cddc <_dtoa_r+0x6a4>
 800cdb4:	4629      	mov	r1, r5
 800cdb6:	4622      	mov	r2, r4
 800cdb8:	4648      	mov	r0, r9
 800cdba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cdbc:	f000 fcc6 	bl	800d74c <__pow5mult>
 800cdc0:	9a01      	ldr	r2, [sp, #4]
 800cdc2:	4601      	mov	r1, r0
 800cdc4:	4605      	mov	r5, r0
 800cdc6:	4648      	mov	r0, r9
 800cdc8:	f000 fc16 	bl	800d5f8 <__multiply>
 800cdcc:	9901      	ldr	r1, [sp, #4]
 800cdce:	9004      	str	r0, [sp, #16]
 800cdd0:	4648      	mov	r0, r9
 800cdd2:	f000 fb47 	bl	800d464 <_Bfree>
 800cdd6:	9a04      	ldr	r2, [sp, #16]
 800cdd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cdda:	9201      	str	r2, [sp, #4]
 800cddc:	1b1a      	subs	r2, r3, r4
 800cdde:	d004      	beq.n	800cdea <_dtoa_r+0x6b2>
 800cde0:	9901      	ldr	r1, [sp, #4]
 800cde2:	4648      	mov	r0, r9
 800cde4:	f000 fcb2 	bl	800d74c <__pow5mult>
 800cde8:	9001      	str	r0, [sp, #4]
 800cdea:	2101      	movs	r1, #1
 800cdec:	4648      	mov	r0, r9
 800cdee:	f000 fbed 	bl	800d5cc <__i2b>
 800cdf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	f000 81d0 	beq.w	800d19c <_dtoa_r+0xa64>
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	4601      	mov	r1, r0
 800ce00:	4648      	mov	r0, r9
 800ce02:	f000 fca3 	bl	800d74c <__pow5mult>
 800ce06:	9b07      	ldr	r3, [sp, #28]
 800ce08:	2b01      	cmp	r3, #1
 800ce0a:	4604      	mov	r4, r0
 800ce0c:	f300 8095 	bgt.w	800cf3a <_dtoa_r+0x802>
 800ce10:	9b02      	ldr	r3, [sp, #8]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	f040 808b 	bne.w	800cf2e <_dtoa_r+0x7f6>
 800ce18:	9b03      	ldr	r3, [sp, #12]
 800ce1a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ce1e:	2a00      	cmp	r2, #0
 800ce20:	f040 8087 	bne.w	800cf32 <_dtoa_r+0x7fa>
 800ce24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ce28:	0d12      	lsrs	r2, r2, #20
 800ce2a:	0512      	lsls	r2, r2, #20
 800ce2c:	2a00      	cmp	r2, #0
 800ce2e:	f000 8082 	beq.w	800cf36 <_dtoa_r+0x7fe>
 800ce32:	9b05      	ldr	r3, [sp, #20]
 800ce34:	3301      	adds	r3, #1
 800ce36:	9305      	str	r3, [sp, #20]
 800ce38:	9b06      	ldr	r3, [sp, #24]
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	9306      	str	r3, [sp, #24]
 800ce3e:	2301      	movs	r3, #1
 800ce40:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	f000 81af 	beq.w	800d1a8 <_dtoa_r+0xa70>
 800ce4a:	6922      	ldr	r2, [r4, #16]
 800ce4c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ce50:	6910      	ldr	r0, [r2, #16]
 800ce52:	f000 fb6f 	bl	800d534 <__hi0bits>
 800ce56:	f1c0 0020 	rsb	r0, r0, #32
 800ce5a:	9b06      	ldr	r3, [sp, #24]
 800ce5c:	4418      	add	r0, r3
 800ce5e:	f010 001f 	ands.w	r0, r0, #31
 800ce62:	d076      	beq.n	800cf52 <_dtoa_r+0x81a>
 800ce64:	f1c0 0220 	rsb	r2, r0, #32
 800ce68:	2a04      	cmp	r2, #4
 800ce6a:	dd69      	ble.n	800cf40 <_dtoa_r+0x808>
 800ce6c:	9b05      	ldr	r3, [sp, #20]
 800ce6e:	f1c0 001c 	rsb	r0, r0, #28
 800ce72:	4403      	add	r3, r0
 800ce74:	9305      	str	r3, [sp, #20]
 800ce76:	9b06      	ldr	r3, [sp, #24]
 800ce78:	4406      	add	r6, r0
 800ce7a:	4403      	add	r3, r0
 800ce7c:	9306      	str	r3, [sp, #24]
 800ce7e:	9b05      	ldr	r3, [sp, #20]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	dd05      	ble.n	800ce90 <_dtoa_r+0x758>
 800ce84:	9901      	ldr	r1, [sp, #4]
 800ce86:	461a      	mov	r2, r3
 800ce88:	4648      	mov	r0, r9
 800ce8a:	f000 fcb9 	bl	800d800 <__lshift>
 800ce8e:	9001      	str	r0, [sp, #4]
 800ce90:	9b06      	ldr	r3, [sp, #24]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	dd05      	ble.n	800cea2 <_dtoa_r+0x76a>
 800ce96:	4621      	mov	r1, r4
 800ce98:	461a      	mov	r2, r3
 800ce9a:	4648      	mov	r0, r9
 800ce9c:	f000 fcb0 	bl	800d800 <__lshift>
 800cea0:	4604      	mov	r4, r0
 800cea2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d056      	beq.n	800cf56 <_dtoa_r+0x81e>
 800cea8:	9801      	ldr	r0, [sp, #4]
 800ceaa:	4621      	mov	r1, r4
 800ceac:	f000 fd14 	bl	800d8d8 <__mcmp>
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	da50      	bge.n	800cf56 <_dtoa_r+0x81e>
 800ceb4:	f108 33ff 	add.w	r3, r8, #4294967295
 800ceb8:	9304      	str	r3, [sp, #16]
 800ceba:	9901      	ldr	r1, [sp, #4]
 800cebc:	2300      	movs	r3, #0
 800cebe:	220a      	movs	r2, #10
 800cec0:	4648      	mov	r0, r9
 800cec2:	f000 faf1 	bl	800d4a8 <__multadd>
 800cec6:	9b08      	ldr	r3, [sp, #32]
 800cec8:	9001      	str	r0, [sp, #4]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	f000 816e 	beq.w	800d1ac <_dtoa_r+0xa74>
 800ced0:	4629      	mov	r1, r5
 800ced2:	2300      	movs	r3, #0
 800ced4:	220a      	movs	r2, #10
 800ced6:	4648      	mov	r0, r9
 800ced8:	f000 fae6 	bl	800d4a8 <__multadd>
 800cedc:	f1bb 0f00 	cmp.w	fp, #0
 800cee0:	4605      	mov	r5, r0
 800cee2:	dc64      	bgt.n	800cfae <_dtoa_r+0x876>
 800cee4:	9b07      	ldr	r3, [sp, #28]
 800cee6:	2b02      	cmp	r3, #2
 800cee8:	dc3e      	bgt.n	800cf68 <_dtoa_r+0x830>
 800ceea:	e060      	b.n	800cfae <_dtoa_r+0x876>
 800ceec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ceee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cef2:	e73c      	b.n	800cd6e <_dtoa_r+0x636>
 800cef4:	f10a 34ff 	add.w	r4, sl, #4294967295
 800cef8:	42a3      	cmp	r3, r4
 800cefa:	bfbf      	itttt	lt
 800cefc:	1ae2      	sublt	r2, r4, r3
 800cefe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cf00:	189b      	addlt	r3, r3, r2
 800cf02:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800cf04:	bfae      	itee	ge
 800cf06:	1b1c      	subge	r4, r3, r4
 800cf08:	4623      	movlt	r3, r4
 800cf0a:	2400      	movlt	r4, #0
 800cf0c:	f1ba 0f00 	cmp.w	sl, #0
 800cf10:	bfb5      	itete	lt
 800cf12:	9a05      	ldrlt	r2, [sp, #20]
 800cf14:	9e05      	ldrge	r6, [sp, #20]
 800cf16:	eba2 060a 	sublt.w	r6, r2, sl
 800cf1a:	4652      	movge	r2, sl
 800cf1c:	bfb8      	it	lt
 800cf1e:	2200      	movlt	r2, #0
 800cf20:	e727      	b.n	800cd72 <_dtoa_r+0x63a>
 800cf22:	9e05      	ldr	r6, [sp, #20]
 800cf24:	9d08      	ldr	r5, [sp, #32]
 800cf26:	461c      	mov	r4, r3
 800cf28:	e730      	b.n	800cd8c <_dtoa_r+0x654>
 800cf2a:	461a      	mov	r2, r3
 800cf2c:	e758      	b.n	800cde0 <_dtoa_r+0x6a8>
 800cf2e:	2300      	movs	r3, #0
 800cf30:	e786      	b.n	800ce40 <_dtoa_r+0x708>
 800cf32:	9b02      	ldr	r3, [sp, #8]
 800cf34:	e784      	b.n	800ce40 <_dtoa_r+0x708>
 800cf36:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cf38:	e783      	b.n	800ce42 <_dtoa_r+0x70a>
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf3e:	e784      	b.n	800ce4a <_dtoa_r+0x712>
 800cf40:	d09d      	beq.n	800ce7e <_dtoa_r+0x746>
 800cf42:	9b05      	ldr	r3, [sp, #20]
 800cf44:	321c      	adds	r2, #28
 800cf46:	4413      	add	r3, r2
 800cf48:	9305      	str	r3, [sp, #20]
 800cf4a:	9b06      	ldr	r3, [sp, #24]
 800cf4c:	4416      	add	r6, r2
 800cf4e:	4413      	add	r3, r2
 800cf50:	e794      	b.n	800ce7c <_dtoa_r+0x744>
 800cf52:	4602      	mov	r2, r0
 800cf54:	e7f5      	b.n	800cf42 <_dtoa_r+0x80a>
 800cf56:	f1ba 0f00 	cmp.w	sl, #0
 800cf5a:	f8cd 8010 	str.w	r8, [sp, #16]
 800cf5e:	46d3      	mov	fp, sl
 800cf60:	dc21      	bgt.n	800cfa6 <_dtoa_r+0x86e>
 800cf62:	9b07      	ldr	r3, [sp, #28]
 800cf64:	2b02      	cmp	r3, #2
 800cf66:	dd1e      	ble.n	800cfa6 <_dtoa_r+0x86e>
 800cf68:	f1bb 0f00 	cmp.w	fp, #0
 800cf6c:	f47f aeb7 	bne.w	800ccde <_dtoa_r+0x5a6>
 800cf70:	4621      	mov	r1, r4
 800cf72:	465b      	mov	r3, fp
 800cf74:	2205      	movs	r2, #5
 800cf76:	4648      	mov	r0, r9
 800cf78:	f000 fa96 	bl	800d4a8 <__multadd>
 800cf7c:	4601      	mov	r1, r0
 800cf7e:	4604      	mov	r4, r0
 800cf80:	9801      	ldr	r0, [sp, #4]
 800cf82:	f000 fca9 	bl	800d8d8 <__mcmp>
 800cf86:	2800      	cmp	r0, #0
 800cf88:	f77f aea9 	ble.w	800ccde <_dtoa_r+0x5a6>
 800cf8c:	463e      	mov	r6, r7
 800cf8e:	2331      	movs	r3, #49	@ 0x31
 800cf90:	f806 3b01 	strb.w	r3, [r6], #1
 800cf94:	9b04      	ldr	r3, [sp, #16]
 800cf96:	3301      	adds	r3, #1
 800cf98:	9304      	str	r3, [sp, #16]
 800cf9a:	e6a4      	b.n	800cce6 <_dtoa_r+0x5ae>
 800cf9c:	f8cd 8010 	str.w	r8, [sp, #16]
 800cfa0:	4654      	mov	r4, sl
 800cfa2:	4625      	mov	r5, r4
 800cfa4:	e7f2      	b.n	800cf8c <_dtoa_r+0x854>
 800cfa6:	9b08      	ldr	r3, [sp, #32]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	f000 8103 	beq.w	800d1b4 <_dtoa_r+0xa7c>
 800cfae:	2e00      	cmp	r6, #0
 800cfb0:	dd05      	ble.n	800cfbe <_dtoa_r+0x886>
 800cfb2:	4629      	mov	r1, r5
 800cfb4:	4632      	mov	r2, r6
 800cfb6:	4648      	mov	r0, r9
 800cfb8:	f000 fc22 	bl	800d800 <__lshift>
 800cfbc:	4605      	mov	r5, r0
 800cfbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d058      	beq.n	800d076 <_dtoa_r+0x93e>
 800cfc4:	6869      	ldr	r1, [r5, #4]
 800cfc6:	4648      	mov	r0, r9
 800cfc8:	f000 fa0c 	bl	800d3e4 <_Balloc>
 800cfcc:	4606      	mov	r6, r0
 800cfce:	b928      	cbnz	r0, 800cfdc <_dtoa_r+0x8a4>
 800cfd0:	4b82      	ldr	r3, [pc, #520]	@ (800d1dc <_dtoa_r+0xaa4>)
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cfd8:	f7ff bbc7 	b.w	800c76a <_dtoa_r+0x32>
 800cfdc:	692a      	ldr	r2, [r5, #16]
 800cfde:	3202      	adds	r2, #2
 800cfe0:	0092      	lsls	r2, r2, #2
 800cfe2:	f105 010c 	add.w	r1, r5, #12
 800cfe6:	300c      	adds	r0, #12
 800cfe8:	f001 f982 	bl	800e2f0 <memcpy>
 800cfec:	2201      	movs	r2, #1
 800cfee:	4631      	mov	r1, r6
 800cff0:	4648      	mov	r0, r9
 800cff2:	f000 fc05 	bl	800d800 <__lshift>
 800cff6:	1c7b      	adds	r3, r7, #1
 800cff8:	9305      	str	r3, [sp, #20]
 800cffa:	eb07 030b 	add.w	r3, r7, fp
 800cffe:	9309      	str	r3, [sp, #36]	@ 0x24
 800d000:	9b02      	ldr	r3, [sp, #8]
 800d002:	f003 0301 	and.w	r3, r3, #1
 800d006:	46a8      	mov	r8, r5
 800d008:	9308      	str	r3, [sp, #32]
 800d00a:	4605      	mov	r5, r0
 800d00c:	9b05      	ldr	r3, [sp, #20]
 800d00e:	9801      	ldr	r0, [sp, #4]
 800d010:	4621      	mov	r1, r4
 800d012:	f103 3bff 	add.w	fp, r3, #4294967295
 800d016:	f7ff fb06 	bl	800c626 <quorem>
 800d01a:	4641      	mov	r1, r8
 800d01c:	9002      	str	r0, [sp, #8]
 800d01e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d022:	9801      	ldr	r0, [sp, #4]
 800d024:	f000 fc58 	bl	800d8d8 <__mcmp>
 800d028:	462a      	mov	r2, r5
 800d02a:	9006      	str	r0, [sp, #24]
 800d02c:	4621      	mov	r1, r4
 800d02e:	4648      	mov	r0, r9
 800d030:	f000 fc6e 	bl	800d910 <__mdiff>
 800d034:	68c2      	ldr	r2, [r0, #12]
 800d036:	4606      	mov	r6, r0
 800d038:	b9fa      	cbnz	r2, 800d07a <_dtoa_r+0x942>
 800d03a:	4601      	mov	r1, r0
 800d03c:	9801      	ldr	r0, [sp, #4]
 800d03e:	f000 fc4b 	bl	800d8d8 <__mcmp>
 800d042:	4602      	mov	r2, r0
 800d044:	4631      	mov	r1, r6
 800d046:	4648      	mov	r0, r9
 800d048:	920a      	str	r2, [sp, #40]	@ 0x28
 800d04a:	f000 fa0b 	bl	800d464 <_Bfree>
 800d04e:	9b07      	ldr	r3, [sp, #28]
 800d050:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d052:	9e05      	ldr	r6, [sp, #20]
 800d054:	ea43 0102 	orr.w	r1, r3, r2
 800d058:	9b08      	ldr	r3, [sp, #32]
 800d05a:	4319      	orrs	r1, r3
 800d05c:	d10f      	bne.n	800d07e <_dtoa_r+0x946>
 800d05e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d062:	d028      	beq.n	800d0b6 <_dtoa_r+0x97e>
 800d064:	9b06      	ldr	r3, [sp, #24]
 800d066:	2b00      	cmp	r3, #0
 800d068:	dd02      	ble.n	800d070 <_dtoa_r+0x938>
 800d06a:	9b02      	ldr	r3, [sp, #8]
 800d06c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800d070:	f88b a000 	strb.w	sl, [fp]
 800d074:	e639      	b.n	800ccea <_dtoa_r+0x5b2>
 800d076:	4628      	mov	r0, r5
 800d078:	e7bd      	b.n	800cff6 <_dtoa_r+0x8be>
 800d07a:	2201      	movs	r2, #1
 800d07c:	e7e2      	b.n	800d044 <_dtoa_r+0x90c>
 800d07e:	9b06      	ldr	r3, [sp, #24]
 800d080:	2b00      	cmp	r3, #0
 800d082:	db04      	blt.n	800d08e <_dtoa_r+0x956>
 800d084:	9907      	ldr	r1, [sp, #28]
 800d086:	430b      	orrs	r3, r1
 800d088:	9908      	ldr	r1, [sp, #32]
 800d08a:	430b      	orrs	r3, r1
 800d08c:	d120      	bne.n	800d0d0 <_dtoa_r+0x998>
 800d08e:	2a00      	cmp	r2, #0
 800d090:	ddee      	ble.n	800d070 <_dtoa_r+0x938>
 800d092:	9901      	ldr	r1, [sp, #4]
 800d094:	2201      	movs	r2, #1
 800d096:	4648      	mov	r0, r9
 800d098:	f000 fbb2 	bl	800d800 <__lshift>
 800d09c:	4621      	mov	r1, r4
 800d09e:	9001      	str	r0, [sp, #4]
 800d0a0:	f000 fc1a 	bl	800d8d8 <__mcmp>
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	dc03      	bgt.n	800d0b0 <_dtoa_r+0x978>
 800d0a8:	d1e2      	bne.n	800d070 <_dtoa_r+0x938>
 800d0aa:	f01a 0f01 	tst.w	sl, #1
 800d0ae:	d0df      	beq.n	800d070 <_dtoa_r+0x938>
 800d0b0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d0b4:	d1d9      	bne.n	800d06a <_dtoa_r+0x932>
 800d0b6:	2339      	movs	r3, #57	@ 0x39
 800d0b8:	f88b 3000 	strb.w	r3, [fp]
 800d0bc:	4633      	mov	r3, r6
 800d0be:	461e      	mov	r6, r3
 800d0c0:	3b01      	subs	r3, #1
 800d0c2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d0c6:	2a39      	cmp	r2, #57	@ 0x39
 800d0c8:	d053      	beq.n	800d172 <_dtoa_r+0xa3a>
 800d0ca:	3201      	adds	r2, #1
 800d0cc:	701a      	strb	r2, [r3, #0]
 800d0ce:	e60c      	b.n	800ccea <_dtoa_r+0x5b2>
 800d0d0:	2a00      	cmp	r2, #0
 800d0d2:	dd07      	ble.n	800d0e4 <_dtoa_r+0x9ac>
 800d0d4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d0d8:	d0ed      	beq.n	800d0b6 <_dtoa_r+0x97e>
 800d0da:	f10a 0301 	add.w	r3, sl, #1
 800d0de:	f88b 3000 	strb.w	r3, [fp]
 800d0e2:	e602      	b.n	800ccea <_dtoa_r+0x5b2>
 800d0e4:	9b05      	ldr	r3, [sp, #20]
 800d0e6:	9a05      	ldr	r2, [sp, #20]
 800d0e8:	f803 ac01 	strb.w	sl, [r3, #-1]
 800d0ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d029      	beq.n	800d146 <_dtoa_r+0xa0e>
 800d0f2:	9901      	ldr	r1, [sp, #4]
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	220a      	movs	r2, #10
 800d0f8:	4648      	mov	r0, r9
 800d0fa:	f000 f9d5 	bl	800d4a8 <__multadd>
 800d0fe:	45a8      	cmp	r8, r5
 800d100:	9001      	str	r0, [sp, #4]
 800d102:	f04f 0300 	mov.w	r3, #0
 800d106:	f04f 020a 	mov.w	r2, #10
 800d10a:	4641      	mov	r1, r8
 800d10c:	4648      	mov	r0, r9
 800d10e:	d107      	bne.n	800d120 <_dtoa_r+0x9e8>
 800d110:	f000 f9ca 	bl	800d4a8 <__multadd>
 800d114:	4680      	mov	r8, r0
 800d116:	4605      	mov	r5, r0
 800d118:	9b05      	ldr	r3, [sp, #20]
 800d11a:	3301      	adds	r3, #1
 800d11c:	9305      	str	r3, [sp, #20]
 800d11e:	e775      	b.n	800d00c <_dtoa_r+0x8d4>
 800d120:	f000 f9c2 	bl	800d4a8 <__multadd>
 800d124:	4629      	mov	r1, r5
 800d126:	4680      	mov	r8, r0
 800d128:	2300      	movs	r3, #0
 800d12a:	220a      	movs	r2, #10
 800d12c:	4648      	mov	r0, r9
 800d12e:	f000 f9bb 	bl	800d4a8 <__multadd>
 800d132:	4605      	mov	r5, r0
 800d134:	e7f0      	b.n	800d118 <_dtoa_r+0x9e0>
 800d136:	f1bb 0f00 	cmp.w	fp, #0
 800d13a:	bfcc      	ite	gt
 800d13c:	465e      	movgt	r6, fp
 800d13e:	2601      	movle	r6, #1
 800d140:	443e      	add	r6, r7
 800d142:	f04f 0800 	mov.w	r8, #0
 800d146:	9901      	ldr	r1, [sp, #4]
 800d148:	2201      	movs	r2, #1
 800d14a:	4648      	mov	r0, r9
 800d14c:	f000 fb58 	bl	800d800 <__lshift>
 800d150:	4621      	mov	r1, r4
 800d152:	9001      	str	r0, [sp, #4]
 800d154:	f000 fbc0 	bl	800d8d8 <__mcmp>
 800d158:	2800      	cmp	r0, #0
 800d15a:	dcaf      	bgt.n	800d0bc <_dtoa_r+0x984>
 800d15c:	d102      	bne.n	800d164 <_dtoa_r+0xa2c>
 800d15e:	f01a 0f01 	tst.w	sl, #1
 800d162:	d1ab      	bne.n	800d0bc <_dtoa_r+0x984>
 800d164:	4633      	mov	r3, r6
 800d166:	461e      	mov	r6, r3
 800d168:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d16c:	2a30      	cmp	r2, #48	@ 0x30
 800d16e:	d0fa      	beq.n	800d166 <_dtoa_r+0xa2e>
 800d170:	e5bb      	b.n	800ccea <_dtoa_r+0x5b2>
 800d172:	429f      	cmp	r7, r3
 800d174:	d1a3      	bne.n	800d0be <_dtoa_r+0x986>
 800d176:	9b04      	ldr	r3, [sp, #16]
 800d178:	3301      	adds	r3, #1
 800d17a:	9304      	str	r3, [sp, #16]
 800d17c:	2331      	movs	r3, #49	@ 0x31
 800d17e:	703b      	strb	r3, [r7, #0]
 800d180:	e5b3      	b.n	800ccea <_dtoa_r+0x5b2>
 800d182:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d184:	4f16      	ldr	r7, [pc, #88]	@ (800d1e0 <_dtoa_r+0xaa8>)
 800d186:	b11b      	cbz	r3, 800d190 <_dtoa_r+0xa58>
 800d188:	f107 0308 	add.w	r3, r7, #8
 800d18c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d18e:	6013      	str	r3, [r2, #0]
 800d190:	4638      	mov	r0, r7
 800d192:	b011      	add	sp, #68	@ 0x44
 800d194:	ecbd 8b02 	vpop	{d8}
 800d198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d19c:	9b07      	ldr	r3, [sp, #28]
 800d19e:	2b01      	cmp	r3, #1
 800d1a0:	f77f ae36 	ble.w	800ce10 <_dtoa_r+0x6d8>
 800d1a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d1a8:	2001      	movs	r0, #1
 800d1aa:	e656      	b.n	800ce5a <_dtoa_r+0x722>
 800d1ac:	f1bb 0f00 	cmp.w	fp, #0
 800d1b0:	f77f aed7 	ble.w	800cf62 <_dtoa_r+0x82a>
 800d1b4:	463e      	mov	r6, r7
 800d1b6:	9801      	ldr	r0, [sp, #4]
 800d1b8:	4621      	mov	r1, r4
 800d1ba:	f7ff fa34 	bl	800c626 <quorem>
 800d1be:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d1c2:	f806 ab01 	strb.w	sl, [r6], #1
 800d1c6:	1bf2      	subs	r2, r6, r7
 800d1c8:	4593      	cmp	fp, r2
 800d1ca:	ddb4      	ble.n	800d136 <_dtoa_r+0x9fe>
 800d1cc:	9901      	ldr	r1, [sp, #4]
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	220a      	movs	r2, #10
 800d1d2:	4648      	mov	r0, r9
 800d1d4:	f000 f968 	bl	800d4a8 <__multadd>
 800d1d8:	9001      	str	r0, [sp, #4]
 800d1da:	e7ec      	b.n	800d1b6 <_dtoa_r+0xa7e>
 800d1dc:	0800f2b8 	.word	0x0800f2b8
 800d1e0:	0800f23c 	.word	0x0800f23c

0800d1e4 <_free_r>:
 800d1e4:	b538      	push	{r3, r4, r5, lr}
 800d1e6:	4605      	mov	r5, r0
 800d1e8:	2900      	cmp	r1, #0
 800d1ea:	d041      	beq.n	800d270 <_free_r+0x8c>
 800d1ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1f0:	1f0c      	subs	r4, r1, #4
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	bfb8      	it	lt
 800d1f6:	18e4      	addlt	r4, r4, r3
 800d1f8:	f000 f8e8 	bl	800d3cc <__malloc_lock>
 800d1fc:	4a1d      	ldr	r2, [pc, #116]	@ (800d274 <_free_r+0x90>)
 800d1fe:	6813      	ldr	r3, [r2, #0]
 800d200:	b933      	cbnz	r3, 800d210 <_free_r+0x2c>
 800d202:	6063      	str	r3, [r4, #4]
 800d204:	6014      	str	r4, [r2, #0]
 800d206:	4628      	mov	r0, r5
 800d208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d20c:	f000 b8e4 	b.w	800d3d8 <__malloc_unlock>
 800d210:	42a3      	cmp	r3, r4
 800d212:	d908      	bls.n	800d226 <_free_r+0x42>
 800d214:	6820      	ldr	r0, [r4, #0]
 800d216:	1821      	adds	r1, r4, r0
 800d218:	428b      	cmp	r3, r1
 800d21a:	bf01      	itttt	eq
 800d21c:	6819      	ldreq	r1, [r3, #0]
 800d21e:	685b      	ldreq	r3, [r3, #4]
 800d220:	1809      	addeq	r1, r1, r0
 800d222:	6021      	streq	r1, [r4, #0]
 800d224:	e7ed      	b.n	800d202 <_free_r+0x1e>
 800d226:	461a      	mov	r2, r3
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	b10b      	cbz	r3, 800d230 <_free_r+0x4c>
 800d22c:	42a3      	cmp	r3, r4
 800d22e:	d9fa      	bls.n	800d226 <_free_r+0x42>
 800d230:	6811      	ldr	r1, [r2, #0]
 800d232:	1850      	adds	r0, r2, r1
 800d234:	42a0      	cmp	r0, r4
 800d236:	d10b      	bne.n	800d250 <_free_r+0x6c>
 800d238:	6820      	ldr	r0, [r4, #0]
 800d23a:	4401      	add	r1, r0
 800d23c:	1850      	adds	r0, r2, r1
 800d23e:	4283      	cmp	r3, r0
 800d240:	6011      	str	r1, [r2, #0]
 800d242:	d1e0      	bne.n	800d206 <_free_r+0x22>
 800d244:	6818      	ldr	r0, [r3, #0]
 800d246:	685b      	ldr	r3, [r3, #4]
 800d248:	6053      	str	r3, [r2, #4]
 800d24a:	4408      	add	r0, r1
 800d24c:	6010      	str	r0, [r2, #0]
 800d24e:	e7da      	b.n	800d206 <_free_r+0x22>
 800d250:	d902      	bls.n	800d258 <_free_r+0x74>
 800d252:	230c      	movs	r3, #12
 800d254:	602b      	str	r3, [r5, #0]
 800d256:	e7d6      	b.n	800d206 <_free_r+0x22>
 800d258:	6820      	ldr	r0, [r4, #0]
 800d25a:	1821      	adds	r1, r4, r0
 800d25c:	428b      	cmp	r3, r1
 800d25e:	bf04      	itt	eq
 800d260:	6819      	ldreq	r1, [r3, #0]
 800d262:	685b      	ldreq	r3, [r3, #4]
 800d264:	6063      	str	r3, [r4, #4]
 800d266:	bf04      	itt	eq
 800d268:	1809      	addeq	r1, r1, r0
 800d26a:	6021      	streq	r1, [r4, #0]
 800d26c:	6054      	str	r4, [r2, #4]
 800d26e:	e7ca      	b.n	800d206 <_free_r+0x22>
 800d270:	bd38      	pop	{r3, r4, r5, pc}
 800d272:	bf00      	nop
 800d274:	24002788 	.word	0x24002788

0800d278 <malloc>:
 800d278:	4b02      	ldr	r3, [pc, #8]	@ (800d284 <malloc+0xc>)
 800d27a:	4601      	mov	r1, r0
 800d27c:	6818      	ldr	r0, [r3, #0]
 800d27e:	f000 b825 	b.w	800d2cc <_malloc_r>
 800d282:	bf00      	nop
 800d284:	24000020 	.word	0x24000020

0800d288 <sbrk_aligned>:
 800d288:	b570      	push	{r4, r5, r6, lr}
 800d28a:	4e0f      	ldr	r6, [pc, #60]	@ (800d2c8 <sbrk_aligned+0x40>)
 800d28c:	460c      	mov	r4, r1
 800d28e:	6831      	ldr	r1, [r6, #0]
 800d290:	4605      	mov	r5, r0
 800d292:	b911      	cbnz	r1, 800d29a <sbrk_aligned+0x12>
 800d294:	f001 f81c 	bl	800e2d0 <_sbrk_r>
 800d298:	6030      	str	r0, [r6, #0]
 800d29a:	4621      	mov	r1, r4
 800d29c:	4628      	mov	r0, r5
 800d29e:	f001 f817 	bl	800e2d0 <_sbrk_r>
 800d2a2:	1c43      	adds	r3, r0, #1
 800d2a4:	d103      	bne.n	800d2ae <sbrk_aligned+0x26>
 800d2a6:	f04f 34ff 	mov.w	r4, #4294967295
 800d2aa:	4620      	mov	r0, r4
 800d2ac:	bd70      	pop	{r4, r5, r6, pc}
 800d2ae:	1cc4      	adds	r4, r0, #3
 800d2b0:	f024 0403 	bic.w	r4, r4, #3
 800d2b4:	42a0      	cmp	r0, r4
 800d2b6:	d0f8      	beq.n	800d2aa <sbrk_aligned+0x22>
 800d2b8:	1a21      	subs	r1, r4, r0
 800d2ba:	4628      	mov	r0, r5
 800d2bc:	f001 f808 	bl	800e2d0 <_sbrk_r>
 800d2c0:	3001      	adds	r0, #1
 800d2c2:	d1f2      	bne.n	800d2aa <sbrk_aligned+0x22>
 800d2c4:	e7ef      	b.n	800d2a6 <sbrk_aligned+0x1e>
 800d2c6:	bf00      	nop
 800d2c8:	24002784 	.word	0x24002784

0800d2cc <_malloc_r>:
 800d2cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2d0:	1ccd      	adds	r5, r1, #3
 800d2d2:	f025 0503 	bic.w	r5, r5, #3
 800d2d6:	3508      	adds	r5, #8
 800d2d8:	2d0c      	cmp	r5, #12
 800d2da:	bf38      	it	cc
 800d2dc:	250c      	movcc	r5, #12
 800d2de:	2d00      	cmp	r5, #0
 800d2e0:	4606      	mov	r6, r0
 800d2e2:	db01      	blt.n	800d2e8 <_malloc_r+0x1c>
 800d2e4:	42a9      	cmp	r1, r5
 800d2e6:	d904      	bls.n	800d2f2 <_malloc_r+0x26>
 800d2e8:	230c      	movs	r3, #12
 800d2ea:	6033      	str	r3, [r6, #0]
 800d2ec:	2000      	movs	r0, #0
 800d2ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d3c8 <_malloc_r+0xfc>
 800d2f6:	f000 f869 	bl	800d3cc <__malloc_lock>
 800d2fa:	f8d8 3000 	ldr.w	r3, [r8]
 800d2fe:	461c      	mov	r4, r3
 800d300:	bb44      	cbnz	r4, 800d354 <_malloc_r+0x88>
 800d302:	4629      	mov	r1, r5
 800d304:	4630      	mov	r0, r6
 800d306:	f7ff ffbf 	bl	800d288 <sbrk_aligned>
 800d30a:	1c43      	adds	r3, r0, #1
 800d30c:	4604      	mov	r4, r0
 800d30e:	d158      	bne.n	800d3c2 <_malloc_r+0xf6>
 800d310:	f8d8 4000 	ldr.w	r4, [r8]
 800d314:	4627      	mov	r7, r4
 800d316:	2f00      	cmp	r7, #0
 800d318:	d143      	bne.n	800d3a2 <_malloc_r+0xd6>
 800d31a:	2c00      	cmp	r4, #0
 800d31c:	d04b      	beq.n	800d3b6 <_malloc_r+0xea>
 800d31e:	6823      	ldr	r3, [r4, #0]
 800d320:	4639      	mov	r1, r7
 800d322:	4630      	mov	r0, r6
 800d324:	eb04 0903 	add.w	r9, r4, r3
 800d328:	f000 ffd2 	bl	800e2d0 <_sbrk_r>
 800d32c:	4581      	cmp	r9, r0
 800d32e:	d142      	bne.n	800d3b6 <_malloc_r+0xea>
 800d330:	6821      	ldr	r1, [r4, #0]
 800d332:	1a6d      	subs	r5, r5, r1
 800d334:	4629      	mov	r1, r5
 800d336:	4630      	mov	r0, r6
 800d338:	f7ff ffa6 	bl	800d288 <sbrk_aligned>
 800d33c:	3001      	adds	r0, #1
 800d33e:	d03a      	beq.n	800d3b6 <_malloc_r+0xea>
 800d340:	6823      	ldr	r3, [r4, #0]
 800d342:	442b      	add	r3, r5
 800d344:	6023      	str	r3, [r4, #0]
 800d346:	f8d8 3000 	ldr.w	r3, [r8]
 800d34a:	685a      	ldr	r2, [r3, #4]
 800d34c:	bb62      	cbnz	r2, 800d3a8 <_malloc_r+0xdc>
 800d34e:	f8c8 7000 	str.w	r7, [r8]
 800d352:	e00f      	b.n	800d374 <_malloc_r+0xa8>
 800d354:	6822      	ldr	r2, [r4, #0]
 800d356:	1b52      	subs	r2, r2, r5
 800d358:	d420      	bmi.n	800d39c <_malloc_r+0xd0>
 800d35a:	2a0b      	cmp	r2, #11
 800d35c:	d917      	bls.n	800d38e <_malloc_r+0xc2>
 800d35e:	1961      	adds	r1, r4, r5
 800d360:	42a3      	cmp	r3, r4
 800d362:	6025      	str	r5, [r4, #0]
 800d364:	bf18      	it	ne
 800d366:	6059      	strne	r1, [r3, #4]
 800d368:	6863      	ldr	r3, [r4, #4]
 800d36a:	bf08      	it	eq
 800d36c:	f8c8 1000 	streq.w	r1, [r8]
 800d370:	5162      	str	r2, [r4, r5]
 800d372:	604b      	str	r3, [r1, #4]
 800d374:	4630      	mov	r0, r6
 800d376:	f000 f82f 	bl	800d3d8 <__malloc_unlock>
 800d37a:	f104 000b 	add.w	r0, r4, #11
 800d37e:	1d23      	adds	r3, r4, #4
 800d380:	f020 0007 	bic.w	r0, r0, #7
 800d384:	1ac2      	subs	r2, r0, r3
 800d386:	bf1c      	itt	ne
 800d388:	1a1b      	subne	r3, r3, r0
 800d38a:	50a3      	strne	r3, [r4, r2]
 800d38c:	e7af      	b.n	800d2ee <_malloc_r+0x22>
 800d38e:	6862      	ldr	r2, [r4, #4]
 800d390:	42a3      	cmp	r3, r4
 800d392:	bf0c      	ite	eq
 800d394:	f8c8 2000 	streq.w	r2, [r8]
 800d398:	605a      	strne	r2, [r3, #4]
 800d39a:	e7eb      	b.n	800d374 <_malloc_r+0xa8>
 800d39c:	4623      	mov	r3, r4
 800d39e:	6864      	ldr	r4, [r4, #4]
 800d3a0:	e7ae      	b.n	800d300 <_malloc_r+0x34>
 800d3a2:	463c      	mov	r4, r7
 800d3a4:	687f      	ldr	r7, [r7, #4]
 800d3a6:	e7b6      	b.n	800d316 <_malloc_r+0x4a>
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	42a3      	cmp	r3, r4
 800d3ae:	d1fb      	bne.n	800d3a8 <_malloc_r+0xdc>
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	6053      	str	r3, [r2, #4]
 800d3b4:	e7de      	b.n	800d374 <_malloc_r+0xa8>
 800d3b6:	230c      	movs	r3, #12
 800d3b8:	6033      	str	r3, [r6, #0]
 800d3ba:	4630      	mov	r0, r6
 800d3bc:	f000 f80c 	bl	800d3d8 <__malloc_unlock>
 800d3c0:	e794      	b.n	800d2ec <_malloc_r+0x20>
 800d3c2:	6005      	str	r5, [r0, #0]
 800d3c4:	e7d6      	b.n	800d374 <_malloc_r+0xa8>
 800d3c6:	bf00      	nop
 800d3c8:	24002788 	.word	0x24002788

0800d3cc <__malloc_lock>:
 800d3cc:	4801      	ldr	r0, [pc, #4]	@ (800d3d4 <__malloc_lock+0x8>)
 800d3ce:	f7ff b928 	b.w	800c622 <__retarget_lock_acquire_recursive>
 800d3d2:	bf00      	nop
 800d3d4:	24002780 	.word	0x24002780

0800d3d8 <__malloc_unlock>:
 800d3d8:	4801      	ldr	r0, [pc, #4]	@ (800d3e0 <__malloc_unlock+0x8>)
 800d3da:	f7ff b923 	b.w	800c624 <__retarget_lock_release_recursive>
 800d3de:	bf00      	nop
 800d3e0:	24002780 	.word	0x24002780

0800d3e4 <_Balloc>:
 800d3e4:	b570      	push	{r4, r5, r6, lr}
 800d3e6:	69c6      	ldr	r6, [r0, #28]
 800d3e8:	4604      	mov	r4, r0
 800d3ea:	460d      	mov	r5, r1
 800d3ec:	b976      	cbnz	r6, 800d40c <_Balloc+0x28>
 800d3ee:	2010      	movs	r0, #16
 800d3f0:	f7ff ff42 	bl	800d278 <malloc>
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	61e0      	str	r0, [r4, #28]
 800d3f8:	b920      	cbnz	r0, 800d404 <_Balloc+0x20>
 800d3fa:	4b18      	ldr	r3, [pc, #96]	@ (800d45c <_Balloc+0x78>)
 800d3fc:	4818      	ldr	r0, [pc, #96]	@ (800d460 <_Balloc+0x7c>)
 800d3fe:	216b      	movs	r1, #107	@ 0x6b
 800d400:	f000 ff84 	bl	800e30c <__assert_func>
 800d404:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d408:	6006      	str	r6, [r0, #0]
 800d40a:	60c6      	str	r6, [r0, #12]
 800d40c:	69e6      	ldr	r6, [r4, #28]
 800d40e:	68f3      	ldr	r3, [r6, #12]
 800d410:	b183      	cbz	r3, 800d434 <_Balloc+0x50>
 800d412:	69e3      	ldr	r3, [r4, #28]
 800d414:	68db      	ldr	r3, [r3, #12]
 800d416:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d41a:	b9b8      	cbnz	r0, 800d44c <_Balloc+0x68>
 800d41c:	2101      	movs	r1, #1
 800d41e:	fa01 f605 	lsl.w	r6, r1, r5
 800d422:	1d72      	adds	r2, r6, #5
 800d424:	0092      	lsls	r2, r2, #2
 800d426:	4620      	mov	r0, r4
 800d428:	f000 ff8e 	bl	800e348 <_calloc_r>
 800d42c:	b160      	cbz	r0, 800d448 <_Balloc+0x64>
 800d42e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d432:	e00e      	b.n	800d452 <_Balloc+0x6e>
 800d434:	2221      	movs	r2, #33	@ 0x21
 800d436:	2104      	movs	r1, #4
 800d438:	4620      	mov	r0, r4
 800d43a:	f000 ff85 	bl	800e348 <_calloc_r>
 800d43e:	69e3      	ldr	r3, [r4, #28]
 800d440:	60f0      	str	r0, [r6, #12]
 800d442:	68db      	ldr	r3, [r3, #12]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d1e4      	bne.n	800d412 <_Balloc+0x2e>
 800d448:	2000      	movs	r0, #0
 800d44a:	bd70      	pop	{r4, r5, r6, pc}
 800d44c:	6802      	ldr	r2, [r0, #0]
 800d44e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d452:	2300      	movs	r3, #0
 800d454:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d458:	e7f7      	b.n	800d44a <_Balloc+0x66>
 800d45a:	bf00      	nop
 800d45c:	0800f249 	.word	0x0800f249
 800d460:	0800f2c9 	.word	0x0800f2c9

0800d464 <_Bfree>:
 800d464:	b570      	push	{r4, r5, r6, lr}
 800d466:	69c6      	ldr	r6, [r0, #28]
 800d468:	4605      	mov	r5, r0
 800d46a:	460c      	mov	r4, r1
 800d46c:	b976      	cbnz	r6, 800d48c <_Bfree+0x28>
 800d46e:	2010      	movs	r0, #16
 800d470:	f7ff ff02 	bl	800d278 <malloc>
 800d474:	4602      	mov	r2, r0
 800d476:	61e8      	str	r0, [r5, #28]
 800d478:	b920      	cbnz	r0, 800d484 <_Bfree+0x20>
 800d47a:	4b09      	ldr	r3, [pc, #36]	@ (800d4a0 <_Bfree+0x3c>)
 800d47c:	4809      	ldr	r0, [pc, #36]	@ (800d4a4 <_Bfree+0x40>)
 800d47e:	218f      	movs	r1, #143	@ 0x8f
 800d480:	f000 ff44 	bl	800e30c <__assert_func>
 800d484:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d488:	6006      	str	r6, [r0, #0]
 800d48a:	60c6      	str	r6, [r0, #12]
 800d48c:	b13c      	cbz	r4, 800d49e <_Bfree+0x3a>
 800d48e:	69eb      	ldr	r3, [r5, #28]
 800d490:	6862      	ldr	r2, [r4, #4]
 800d492:	68db      	ldr	r3, [r3, #12]
 800d494:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d498:	6021      	str	r1, [r4, #0]
 800d49a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d49e:	bd70      	pop	{r4, r5, r6, pc}
 800d4a0:	0800f249 	.word	0x0800f249
 800d4a4:	0800f2c9 	.word	0x0800f2c9

0800d4a8 <__multadd>:
 800d4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ac:	690d      	ldr	r5, [r1, #16]
 800d4ae:	4607      	mov	r7, r0
 800d4b0:	460c      	mov	r4, r1
 800d4b2:	461e      	mov	r6, r3
 800d4b4:	f101 0c14 	add.w	ip, r1, #20
 800d4b8:	2000      	movs	r0, #0
 800d4ba:	f8dc 3000 	ldr.w	r3, [ip]
 800d4be:	b299      	uxth	r1, r3
 800d4c0:	fb02 6101 	mla	r1, r2, r1, r6
 800d4c4:	0c1e      	lsrs	r6, r3, #16
 800d4c6:	0c0b      	lsrs	r3, r1, #16
 800d4c8:	fb02 3306 	mla	r3, r2, r6, r3
 800d4cc:	b289      	uxth	r1, r1
 800d4ce:	3001      	adds	r0, #1
 800d4d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d4d4:	4285      	cmp	r5, r0
 800d4d6:	f84c 1b04 	str.w	r1, [ip], #4
 800d4da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d4de:	dcec      	bgt.n	800d4ba <__multadd+0x12>
 800d4e0:	b30e      	cbz	r6, 800d526 <__multadd+0x7e>
 800d4e2:	68a3      	ldr	r3, [r4, #8]
 800d4e4:	42ab      	cmp	r3, r5
 800d4e6:	dc19      	bgt.n	800d51c <__multadd+0x74>
 800d4e8:	6861      	ldr	r1, [r4, #4]
 800d4ea:	4638      	mov	r0, r7
 800d4ec:	3101      	adds	r1, #1
 800d4ee:	f7ff ff79 	bl	800d3e4 <_Balloc>
 800d4f2:	4680      	mov	r8, r0
 800d4f4:	b928      	cbnz	r0, 800d502 <__multadd+0x5a>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	4b0c      	ldr	r3, [pc, #48]	@ (800d52c <__multadd+0x84>)
 800d4fa:	480d      	ldr	r0, [pc, #52]	@ (800d530 <__multadd+0x88>)
 800d4fc:	21ba      	movs	r1, #186	@ 0xba
 800d4fe:	f000 ff05 	bl	800e30c <__assert_func>
 800d502:	6922      	ldr	r2, [r4, #16]
 800d504:	3202      	adds	r2, #2
 800d506:	f104 010c 	add.w	r1, r4, #12
 800d50a:	0092      	lsls	r2, r2, #2
 800d50c:	300c      	adds	r0, #12
 800d50e:	f000 feef 	bl	800e2f0 <memcpy>
 800d512:	4621      	mov	r1, r4
 800d514:	4638      	mov	r0, r7
 800d516:	f7ff ffa5 	bl	800d464 <_Bfree>
 800d51a:	4644      	mov	r4, r8
 800d51c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d520:	3501      	adds	r5, #1
 800d522:	615e      	str	r6, [r3, #20]
 800d524:	6125      	str	r5, [r4, #16]
 800d526:	4620      	mov	r0, r4
 800d528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d52c:	0800f2b8 	.word	0x0800f2b8
 800d530:	0800f2c9 	.word	0x0800f2c9

0800d534 <__hi0bits>:
 800d534:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d538:	4603      	mov	r3, r0
 800d53a:	bf36      	itet	cc
 800d53c:	0403      	lslcc	r3, r0, #16
 800d53e:	2000      	movcs	r0, #0
 800d540:	2010      	movcc	r0, #16
 800d542:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d546:	bf3c      	itt	cc
 800d548:	021b      	lslcc	r3, r3, #8
 800d54a:	3008      	addcc	r0, #8
 800d54c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d550:	bf3c      	itt	cc
 800d552:	011b      	lslcc	r3, r3, #4
 800d554:	3004      	addcc	r0, #4
 800d556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d55a:	bf3c      	itt	cc
 800d55c:	009b      	lslcc	r3, r3, #2
 800d55e:	3002      	addcc	r0, #2
 800d560:	2b00      	cmp	r3, #0
 800d562:	db05      	blt.n	800d570 <__hi0bits+0x3c>
 800d564:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d568:	f100 0001 	add.w	r0, r0, #1
 800d56c:	bf08      	it	eq
 800d56e:	2020      	moveq	r0, #32
 800d570:	4770      	bx	lr

0800d572 <__lo0bits>:
 800d572:	6803      	ldr	r3, [r0, #0]
 800d574:	4602      	mov	r2, r0
 800d576:	f013 0007 	ands.w	r0, r3, #7
 800d57a:	d00b      	beq.n	800d594 <__lo0bits+0x22>
 800d57c:	07d9      	lsls	r1, r3, #31
 800d57e:	d421      	bmi.n	800d5c4 <__lo0bits+0x52>
 800d580:	0798      	lsls	r0, r3, #30
 800d582:	bf49      	itett	mi
 800d584:	085b      	lsrmi	r3, r3, #1
 800d586:	089b      	lsrpl	r3, r3, #2
 800d588:	2001      	movmi	r0, #1
 800d58a:	6013      	strmi	r3, [r2, #0]
 800d58c:	bf5c      	itt	pl
 800d58e:	6013      	strpl	r3, [r2, #0]
 800d590:	2002      	movpl	r0, #2
 800d592:	4770      	bx	lr
 800d594:	b299      	uxth	r1, r3
 800d596:	b909      	cbnz	r1, 800d59c <__lo0bits+0x2a>
 800d598:	0c1b      	lsrs	r3, r3, #16
 800d59a:	2010      	movs	r0, #16
 800d59c:	b2d9      	uxtb	r1, r3
 800d59e:	b909      	cbnz	r1, 800d5a4 <__lo0bits+0x32>
 800d5a0:	3008      	adds	r0, #8
 800d5a2:	0a1b      	lsrs	r3, r3, #8
 800d5a4:	0719      	lsls	r1, r3, #28
 800d5a6:	bf04      	itt	eq
 800d5a8:	091b      	lsreq	r3, r3, #4
 800d5aa:	3004      	addeq	r0, #4
 800d5ac:	0799      	lsls	r1, r3, #30
 800d5ae:	bf04      	itt	eq
 800d5b0:	089b      	lsreq	r3, r3, #2
 800d5b2:	3002      	addeq	r0, #2
 800d5b4:	07d9      	lsls	r1, r3, #31
 800d5b6:	d403      	bmi.n	800d5c0 <__lo0bits+0x4e>
 800d5b8:	085b      	lsrs	r3, r3, #1
 800d5ba:	f100 0001 	add.w	r0, r0, #1
 800d5be:	d003      	beq.n	800d5c8 <__lo0bits+0x56>
 800d5c0:	6013      	str	r3, [r2, #0]
 800d5c2:	4770      	bx	lr
 800d5c4:	2000      	movs	r0, #0
 800d5c6:	4770      	bx	lr
 800d5c8:	2020      	movs	r0, #32
 800d5ca:	4770      	bx	lr

0800d5cc <__i2b>:
 800d5cc:	b510      	push	{r4, lr}
 800d5ce:	460c      	mov	r4, r1
 800d5d0:	2101      	movs	r1, #1
 800d5d2:	f7ff ff07 	bl	800d3e4 <_Balloc>
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	b928      	cbnz	r0, 800d5e6 <__i2b+0x1a>
 800d5da:	4b05      	ldr	r3, [pc, #20]	@ (800d5f0 <__i2b+0x24>)
 800d5dc:	4805      	ldr	r0, [pc, #20]	@ (800d5f4 <__i2b+0x28>)
 800d5de:	f240 1145 	movw	r1, #325	@ 0x145
 800d5e2:	f000 fe93 	bl	800e30c <__assert_func>
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	6144      	str	r4, [r0, #20]
 800d5ea:	6103      	str	r3, [r0, #16]
 800d5ec:	bd10      	pop	{r4, pc}
 800d5ee:	bf00      	nop
 800d5f0:	0800f2b8 	.word	0x0800f2b8
 800d5f4:	0800f2c9 	.word	0x0800f2c9

0800d5f8 <__multiply>:
 800d5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5fc:	4614      	mov	r4, r2
 800d5fe:	690a      	ldr	r2, [r1, #16]
 800d600:	6923      	ldr	r3, [r4, #16]
 800d602:	429a      	cmp	r2, r3
 800d604:	bfa8      	it	ge
 800d606:	4623      	movge	r3, r4
 800d608:	460f      	mov	r7, r1
 800d60a:	bfa4      	itt	ge
 800d60c:	460c      	movge	r4, r1
 800d60e:	461f      	movge	r7, r3
 800d610:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d614:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d618:	68a3      	ldr	r3, [r4, #8]
 800d61a:	6861      	ldr	r1, [r4, #4]
 800d61c:	eb0a 0609 	add.w	r6, sl, r9
 800d620:	42b3      	cmp	r3, r6
 800d622:	b085      	sub	sp, #20
 800d624:	bfb8      	it	lt
 800d626:	3101      	addlt	r1, #1
 800d628:	f7ff fedc 	bl	800d3e4 <_Balloc>
 800d62c:	b930      	cbnz	r0, 800d63c <__multiply+0x44>
 800d62e:	4602      	mov	r2, r0
 800d630:	4b44      	ldr	r3, [pc, #272]	@ (800d744 <__multiply+0x14c>)
 800d632:	4845      	ldr	r0, [pc, #276]	@ (800d748 <__multiply+0x150>)
 800d634:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d638:	f000 fe68 	bl	800e30c <__assert_func>
 800d63c:	f100 0514 	add.w	r5, r0, #20
 800d640:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d644:	462b      	mov	r3, r5
 800d646:	2200      	movs	r2, #0
 800d648:	4543      	cmp	r3, r8
 800d64a:	d321      	bcc.n	800d690 <__multiply+0x98>
 800d64c:	f107 0114 	add.w	r1, r7, #20
 800d650:	f104 0214 	add.w	r2, r4, #20
 800d654:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d658:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d65c:	9302      	str	r3, [sp, #8]
 800d65e:	1b13      	subs	r3, r2, r4
 800d660:	3b15      	subs	r3, #21
 800d662:	f023 0303 	bic.w	r3, r3, #3
 800d666:	3304      	adds	r3, #4
 800d668:	f104 0715 	add.w	r7, r4, #21
 800d66c:	42ba      	cmp	r2, r7
 800d66e:	bf38      	it	cc
 800d670:	2304      	movcc	r3, #4
 800d672:	9301      	str	r3, [sp, #4]
 800d674:	9b02      	ldr	r3, [sp, #8]
 800d676:	9103      	str	r1, [sp, #12]
 800d678:	428b      	cmp	r3, r1
 800d67a:	d80c      	bhi.n	800d696 <__multiply+0x9e>
 800d67c:	2e00      	cmp	r6, #0
 800d67e:	dd03      	ble.n	800d688 <__multiply+0x90>
 800d680:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d684:	2b00      	cmp	r3, #0
 800d686:	d05b      	beq.n	800d740 <__multiply+0x148>
 800d688:	6106      	str	r6, [r0, #16]
 800d68a:	b005      	add	sp, #20
 800d68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d690:	f843 2b04 	str.w	r2, [r3], #4
 800d694:	e7d8      	b.n	800d648 <__multiply+0x50>
 800d696:	f8b1 a000 	ldrh.w	sl, [r1]
 800d69a:	f1ba 0f00 	cmp.w	sl, #0
 800d69e:	d024      	beq.n	800d6ea <__multiply+0xf2>
 800d6a0:	f104 0e14 	add.w	lr, r4, #20
 800d6a4:	46a9      	mov	r9, r5
 800d6a6:	f04f 0c00 	mov.w	ip, #0
 800d6aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d6ae:	f8d9 3000 	ldr.w	r3, [r9]
 800d6b2:	fa1f fb87 	uxth.w	fp, r7
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	fb0a 330b 	mla	r3, sl, fp, r3
 800d6bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d6c0:	f8d9 7000 	ldr.w	r7, [r9]
 800d6c4:	4463      	add	r3, ip
 800d6c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d6ca:	fb0a c70b 	mla	r7, sl, fp, ip
 800d6ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d6d2:	b29b      	uxth	r3, r3
 800d6d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d6d8:	4572      	cmp	r2, lr
 800d6da:	f849 3b04 	str.w	r3, [r9], #4
 800d6de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d6e2:	d8e2      	bhi.n	800d6aa <__multiply+0xb2>
 800d6e4:	9b01      	ldr	r3, [sp, #4]
 800d6e6:	f845 c003 	str.w	ip, [r5, r3]
 800d6ea:	9b03      	ldr	r3, [sp, #12]
 800d6ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d6f0:	3104      	adds	r1, #4
 800d6f2:	f1b9 0f00 	cmp.w	r9, #0
 800d6f6:	d021      	beq.n	800d73c <__multiply+0x144>
 800d6f8:	682b      	ldr	r3, [r5, #0]
 800d6fa:	f104 0c14 	add.w	ip, r4, #20
 800d6fe:	46ae      	mov	lr, r5
 800d700:	f04f 0a00 	mov.w	sl, #0
 800d704:	f8bc b000 	ldrh.w	fp, [ip]
 800d708:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d70c:	fb09 770b 	mla	r7, r9, fp, r7
 800d710:	4457      	add	r7, sl
 800d712:	b29b      	uxth	r3, r3
 800d714:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d718:	f84e 3b04 	str.w	r3, [lr], #4
 800d71c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d720:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d724:	f8be 3000 	ldrh.w	r3, [lr]
 800d728:	fb09 330a 	mla	r3, r9, sl, r3
 800d72c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d730:	4562      	cmp	r2, ip
 800d732:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d736:	d8e5      	bhi.n	800d704 <__multiply+0x10c>
 800d738:	9f01      	ldr	r7, [sp, #4]
 800d73a:	51eb      	str	r3, [r5, r7]
 800d73c:	3504      	adds	r5, #4
 800d73e:	e799      	b.n	800d674 <__multiply+0x7c>
 800d740:	3e01      	subs	r6, #1
 800d742:	e79b      	b.n	800d67c <__multiply+0x84>
 800d744:	0800f2b8 	.word	0x0800f2b8
 800d748:	0800f2c9 	.word	0x0800f2c9

0800d74c <__pow5mult>:
 800d74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d750:	4615      	mov	r5, r2
 800d752:	f012 0203 	ands.w	r2, r2, #3
 800d756:	4607      	mov	r7, r0
 800d758:	460e      	mov	r6, r1
 800d75a:	d007      	beq.n	800d76c <__pow5mult+0x20>
 800d75c:	4c25      	ldr	r4, [pc, #148]	@ (800d7f4 <__pow5mult+0xa8>)
 800d75e:	3a01      	subs	r2, #1
 800d760:	2300      	movs	r3, #0
 800d762:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d766:	f7ff fe9f 	bl	800d4a8 <__multadd>
 800d76a:	4606      	mov	r6, r0
 800d76c:	10ad      	asrs	r5, r5, #2
 800d76e:	d03d      	beq.n	800d7ec <__pow5mult+0xa0>
 800d770:	69fc      	ldr	r4, [r7, #28]
 800d772:	b97c      	cbnz	r4, 800d794 <__pow5mult+0x48>
 800d774:	2010      	movs	r0, #16
 800d776:	f7ff fd7f 	bl	800d278 <malloc>
 800d77a:	4602      	mov	r2, r0
 800d77c:	61f8      	str	r0, [r7, #28]
 800d77e:	b928      	cbnz	r0, 800d78c <__pow5mult+0x40>
 800d780:	4b1d      	ldr	r3, [pc, #116]	@ (800d7f8 <__pow5mult+0xac>)
 800d782:	481e      	ldr	r0, [pc, #120]	@ (800d7fc <__pow5mult+0xb0>)
 800d784:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d788:	f000 fdc0 	bl	800e30c <__assert_func>
 800d78c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d790:	6004      	str	r4, [r0, #0]
 800d792:	60c4      	str	r4, [r0, #12]
 800d794:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d798:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d79c:	b94c      	cbnz	r4, 800d7b2 <__pow5mult+0x66>
 800d79e:	f240 2171 	movw	r1, #625	@ 0x271
 800d7a2:	4638      	mov	r0, r7
 800d7a4:	f7ff ff12 	bl	800d5cc <__i2b>
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800d7ae:	4604      	mov	r4, r0
 800d7b0:	6003      	str	r3, [r0, #0]
 800d7b2:	f04f 0900 	mov.w	r9, #0
 800d7b6:	07eb      	lsls	r3, r5, #31
 800d7b8:	d50a      	bpl.n	800d7d0 <__pow5mult+0x84>
 800d7ba:	4631      	mov	r1, r6
 800d7bc:	4622      	mov	r2, r4
 800d7be:	4638      	mov	r0, r7
 800d7c0:	f7ff ff1a 	bl	800d5f8 <__multiply>
 800d7c4:	4631      	mov	r1, r6
 800d7c6:	4680      	mov	r8, r0
 800d7c8:	4638      	mov	r0, r7
 800d7ca:	f7ff fe4b 	bl	800d464 <_Bfree>
 800d7ce:	4646      	mov	r6, r8
 800d7d0:	106d      	asrs	r5, r5, #1
 800d7d2:	d00b      	beq.n	800d7ec <__pow5mult+0xa0>
 800d7d4:	6820      	ldr	r0, [r4, #0]
 800d7d6:	b938      	cbnz	r0, 800d7e8 <__pow5mult+0x9c>
 800d7d8:	4622      	mov	r2, r4
 800d7da:	4621      	mov	r1, r4
 800d7dc:	4638      	mov	r0, r7
 800d7de:	f7ff ff0b 	bl	800d5f8 <__multiply>
 800d7e2:	6020      	str	r0, [r4, #0]
 800d7e4:	f8c0 9000 	str.w	r9, [r0]
 800d7e8:	4604      	mov	r4, r0
 800d7ea:	e7e4      	b.n	800d7b6 <__pow5mult+0x6a>
 800d7ec:	4630      	mov	r0, r6
 800d7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7f2:	bf00      	nop
 800d7f4:	0800f324 	.word	0x0800f324
 800d7f8:	0800f249 	.word	0x0800f249
 800d7fc:	0800f2c9 	.word	0x0800f2c9

0800d800 <__lshift>:
 800d800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d804:	460c      	mov	r4, r1
 800d806:	6849      	ldr	r1, [r1, #4]
 800d808:	6923      	ldr	r3, [r4, #16]
 800d80a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d80e:	68a3      	ldr	r3, [r4, #8]
 800d810:	4607      	mov	r7, r0
 800d812:	4691      	mov	r9, r2
 800d814:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d818:	f108 0601 	add.w	r6, r8, #1
 800d81c:	42b3      	cmp	r3, r6
 800d81e:	db0b      	blt.n	800d838 <__lshift+0x38>
 800d820:	4638      	mov	r0, r7
 800d822:	f7ff fddf 	bl	800d3e4 <_Balloc>
 800d826:	4605      	mov	r5, r0
 800d828:	b948      	cbnz	r0, 800d83e <__lshift+0x3e>
 800d82a:	4602      	mov	r2, r0
 800d82c:	4b28      	ldr	r3, [pc, #160]	@ (800d8d0 <__lshift+0xd0>)
 800d82e:	4829      	ldr	r0, [pc, #164]	@ (800d8d4 <__lshift+0xd4>)
 800d830:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d834:	f000 fd6a 	bl	800e30c <__assert_func>
 800d838:	3101      	adds	r1, #1
 800d83a:	005b      	lsls	r3, r3, #1
 800d83c:	e7ee      	b.n	800d81c <__lshift+0x1c>
 800d83e:	2300      	movs	r3, #0
 800d840:	f100 0114 	add.w	r1, r0, #20
 800d844:	f100 0210 	add.w	r2, r0, #16
 800d848:	4618      	mov	r0, r3
 800d84a:	4553      	cmp	r3, sl
 800d84c:	db33      	blt.n	800d8b6 <__lshift+0xb6>
 800d84e:	6920      	ldr	r0, [r4, #16]
 800d850:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d854:	f104 0314 	add.w	r3, r4, #20
 800d858:	f019 091f 	ands.w	r9, r9, #31
 800d85c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d860:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d864:	d02b      	beq.n	800d8be <__lshift+0xbe>
 800d866:	f1c9 0e20 	rsb	lr, r9, #32
 800d86a:	468a      	mov	sl, r1
 800d86c:	2200      	movs	r2, #0
 800d86e:	6818      	ldr	r0, [r3, #0]
 800d870:	fa00 f009 	lsl.w	r0, r0, r9
 800d874:	4310      	orrs	r0, r2
 800d876:	f84a 0b04 	str.w	r0, [sl], #4
 800d87a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d87e:	459c      	cmp	ip, r3
 800d880:	fa22 f20e 	lsr.w	r2, r2, lr
 800d884:	d8f3      	bhi.n	800d86e <__lshift+0x6e>
 800d886:	ebac 0304 	sub.w	r3, ip, r4
 800d88a:	3b15      	subs	r3, #21
 800d88c:	f023 0303 	bic.w	r3, r3, #3
 800d890:	3304      	adds	r3, #4
 800d892:	f104 0015 	add.w	r0, r4, #21
 800d896:	4584      	cmp	ip, r0
 800d898:	bf38      	it	cc
 800d89a:	2304      	movcc	r3, #4
 800d89c:	50ca      	str	r2, [r1, r3]
 800d89e:	b10a      	cbz	r2, 800d8a4 <__lshift+0xa4>
 800d8a0:	f108 0602 	add.w	r6, r8, #2
 800d8a4:	3e01      	subs	r6, #1
 800d8a6:	4638      	mov	r0, r7
 800d8a8:	612e      	str	r6, [r5, #16]
 800d8aa:	4621      	mov	r1, r4
 800d8ac:	f7ff fdda 	bl	800d464 <_Bfree>
 800d8b0:	4628      	mov	r0, r5
 800d8b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	e7c5      	b.n	800d84a <__lshift+0x4a>
 800d8be:	3904      	subs	r1, #4
 800d8c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d8c8:	459c      	cmp	ip, r3
 800d8ca:	d8f9      	bhi.n	800d8c0 <__lshift+0xc0>
 800d8cc:	e7ea      	b.n	800d8a4 <__lshift+0xa4>
 800d8ce:	bf00      	nop
 800d8d0:	0800f2b8 	.word	0x0800f2b8
 800d8d4:	0800f2c9 	.word	0x0800f2c9

0800d8d8 <__mcmp>:
 800d8d8:	690a      	ldr	r2, [r1, #16]
 800d8da:	4603      	mov	r3, r0
 800d8dc:	6900      	ldr	r0, [r0, #16]
 800d8de:	1a80      	subs	r0, r0, r2
 800d8e0:	b530      	push	{r4, r5, lr}
 800d8e2:	d10e      	bne.n	800d902 <__mcmp+0x2a>
 800d8e4:	3314      	adds	r3, #20
 800d8e6:	3114      	adds	r1, #20
 800d8e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d8ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d8f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d8f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d8f8:	4295      	cmp	r5, r2
 800d8fa:	d003      	beq.n	800d904 <__mcmp+0x2c>
 800d8fc:	d205      	bcs.n	800d90a <__mcmp+0x32>
 800d8fe:	f04f 30ff 	mov.w	r0, #4294967295
 800d902:	bd30      	pop	{r4, r5, pc}
 800d904:	42a3      	cmp	r3, r4
 800d906:	d3f3      	bcc.n	800d8f0 <__mcmp+0x18>
 800d908:	e7fb      	b.n	800d902 <__mcmp+0x2a>
 800d90a:	2001      	movs	r0, #1
 800d90c:	e7f9      	b.n	800d902 <__mcmp+0x2a>
	...

0800d910 <__mdiff>:
 800d910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d914:	4689      	mov	r9, r1
 800d916:	4606      	mov	r6, r0
 800d918:	4611      	mov	r1, r2
 800d91a:	4648      	mov	r0, r9
 800d91c:	4614      	mov	r4, r2
 800d91e:	f7ff ffdb 	bl	800d8d8 <__mcmp>
 800d922:	1e05      	subs	r5, r0, #0
 800d924:	d112      	bne.n	800d94c <__mdiff+0x3c>
 800d926:	4629      	mov	r1, r5
 800d928:	4630      	mov	r0, r6
 800d92a:	f7ff fd5b 	bl	800d3e4 <_Balloc>
 800d92e:	4602      	mov	r2, r0
 800d930:	b928      	cbnz	r0, 800d93e <__mdiff+0x2e>
 800d932:	4b3f      	ldr	r3, [pc, #252]	@ (800da30 <__mdiff+0x120>)
 800d934:	f240 2137 	movw	r1, #567	@ 0x237
 800d938:	483e      	ldr	r0, [pc, #248]	@ (800da34 <__mdiff+0x124>)
 800d93a:	f000 fce7 	bl	800e30c <__assert_func>
 800d93e:	2301      	movs	r3, #1
 800d940:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d944:	4610      	mov	r0, r2
 800d946:	b003      	add	sp, #12
 800d948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d94c:	bfbc      	itt	lt
 800d94e:	464b      	movlt	r3, r9
 800d950:	46a1      	movlt	r9, r4
 800d952:	4630      	mov	r0, r6
 800d954:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d958:	bfba      	itte	lt
 800d95a:	461c      	movlt	r4, r3
 800d95c:	2501      	movlt	r5, #1
 800d95e:	2500      	movge	r5, #0
 800d960:	f7ff fd40 	bl	800d3e4 <_Balloc>
 800d964:	4602      	mov	r2, r0
 800d966:	b918      	cbnz	r0, 800d970 <__mdiff+0x60>
 800d968:	4b31      	ldr	r3, [pc, #196]	@ (800da30 <__mdiff+0x120>)
 800d96a:	f240 2145 	movw	r1, #581	@ 0x245
 800d96e:	e7e3      	b.n	800d938 <__mdiff+0x28>
 800d970:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d974:	6926      	ldr	r6, [r4, #16]
 800d976:	60c5      	str	r5, [r0, #12]
 800d978:	f109 0310 	add.w	r3, r9, #16
 800d97c:	f109 0514 	add.w	r5, r9, #20
 800d980:	f104 0e14 	add.w	lr, r4, #20
 800d984:	f100 0b14 	add.w	fp, r0, #20
 800d988:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d98c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d990:	9301      	str	r3, [sp, #4]
 800d992:	46d9      	mov	r9, fp
 800d994:	f04f 0c00 	mov.w	ip, #0
 800d998:	9b01      	ldr	r3, [sp, #4]
 800d99a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d99e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d9a2:	9301      	str	r3, [sp, #4]
 800d9a4:	fa1f f38a 	uxth.w	r3, sl
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	b283      	uxth	r3, r0
 800d9ac:	1acb      	subs	r3, r1, r3
 800d9ae:	0c00      	lsrs	r0, r0, #16
 800d9b0:	4463      	add	r3, ip
 800d9b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d9b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d9ba:	b29b      	uxth	r3, r3
 800d9bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d9c0:	4576      	cmp	r6, lr
 800d9c2:	f849 3b04 	str.w	r3, [r9], #4
 800d9c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d9ca:	d8e5      	bhi.n	800d998 <__mdiff+0x88>
 800d9cc:	1b33      	subs	r3, r6, r4
 800d9ce:	3b15      	subs	r3, #21
 800d9d0:	f023 0303 	bic.w	r3, r3, #3
 800d9d4:	3415      	adds	r4, #21
 800d9d6:	3304      	adds	r3, #4
 800d9d8:	42a6      	cmp	r6, r4
 800d9da:	bf38      	it	cc
 800d9dc:	2304      	movcc	r3, #4
 800d9de:	441d      	add	r5, r3
 800d9e0:	445b      	add	r3, fp
 800d9e2:	461e      	mov	r6, r3
 800d9e4:	462c      	mov	r4, r5
 800d9e6:	4544      	cmp	r4, r8
 800d9e8:	d30e      	bcc.n	800da08 <__mdiff+0xf8>
 800d9ea:	f108 0103 	add.w	r1, r8, #3
 800d9ee:	1b49      	subs	r1, r1, r5
 800d9f0:	f021 0103 	bic.w	r1, r1, #3
 800d9f4:	3d03      	subs	r5, #3
 800d9f6:	45a8      	cmp	r8, r5
 800d9f8:	bf38      	it	cc
 800d9fa:	2100      	movcc	r1, #0
 800d9fc:	440b      	add	r3, r1
 800d9fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da02:	b191      	cbz	r1, 800da2a <__mdiff+0x11a>
 800da04:	6117      	str	r7, [r2, #16]
 800da06:	e79d      	b.n	800d944 <__mdiff+0x34>
 800da08:	f854 1b04 	ldr.w	r1, [r4], #4
 800da0c:	46e6      	mov	lr, ip
 800da0e:	0c08      	lsrs	r0, r1, #16
 800da10:	fa1c fc81 	uxtah	ip, ip, r1
 800da14:	4471      	add	r1, lr
 800da16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800da1a:	b289      	uxth	r1, r1
 800da1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800da20:	f846 1b04 	str.w	r1, [r6], #4
 800da24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800da28:	e7dd      	b.n	800d9e6 <__mdiff+0xd6>
 800da2a:	3f01      	subs	r7, #1
 800da2c:	e7e7      	b.n	800d9fe <__mdiff+0xee>
 800da2e:	bf00      	nop
 800da30:	0800f2b8 	.word	0x0800f2b8
 800da34:	0800f2c9 	.word	0x0800f2c9

0800da38 <__d2b>:
 800da38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da3c:	460f      	mov	r7, r1
 800da3e:	2101      	movs	r1, #1
 800da40:	ec59 8b10 	vmov	r8, r9, d0
 800da44:	4616      	mov	r6, r2
 800da46:	f7ff fccd 	bl	800d3e4 <_Balloc>
 800da4a:	4604      	mov	r4, r0
 800da4c:	b930      	cbnz	r0, 800da5c <__d2b+0x24>
 800da4e:	4602      	mov	r2, r0
 800da50:	4b23      	ldr	r3, [pc, #140]	@ (800dae0 <__d2b+0xa8>)
 800da52:	4824      	ldr	r0, [pc, #144]	@ (800dae4 <__d2b+0xac>)
 800da54:	f240 310f 	movw	r1, #783	@ 0x30f
 800da58:	f000 fc58 	bl	800e30c <__assert_func>
 800da5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800da60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800da64:	b10d      	cbz	r5, 800da6a <__d2b+0x32>
 800da66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800da6a:	9301      	str	r3, [sp, #4]
 800da6c:	f1b8 0300 	subs.w	r3, r8, #0
 800da70:	d023      	beq.n	800daba <__d2b+0x82>
 800da72:	4668      	mov	r0, sp
 800da74:	9300      	str	r3, [sp, #0]
 800da76:	f7ff fd7c 	bl	800d572 <__lo0bits>
 800da7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800da7e:	b1d0      	cbz	r0, 800dab6 <__d2b+0x7e>
 800da80:	f1c0 0320 	rsb	r3, r0, #32
 800da84:	fa02 f303 	lsl.w	r3, r2, r3
 800da88:	430b      	orrs	r3, r1
 800da8a:	40c2      	lsrs	r2, r0
 800da8c:	6163      	str	r3, [r4, #20]
 800da8e:	9201      	str	r2, [sp, #4]
 800da90:	9b01      	ldr	r3, [sp, #4]
 800da92:	61a3      	str	r3, [r4, #24]
 800da94:	2b00      	cmp	r3, #0
 800da96:	bf0c      	ite	eq
 800da98:	2201      	moveq	r2, #1
 800da9a:	2202      	movne	r2, #2
 800da9c:	6122      	str	r2, [r4, #16]
 800da9e:	b1a5      	cbz	r5, 800daca <__d2b+0x92>
 800daa0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800daa4:	4405      	add	r5, r0
 800daa6:	603d      	str	r5, [r7, #0]
 800daa8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800daac:	6030      	str	r0, [r6, #0]
 800daae:	4620      	mov	r0, r4
 800dab0:	b003      	add	sp, #12
 800dab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dab6:	6161      	str	r1, [r4, #20]
 800dab8:	e7ea      	b.n	800da90 <__d2b+0x58>
 800daba:	a801      	add	r0, sp, #4
 800dabc:	f7ff fd59 	bl	800d572 <__lo0bits>
 800dac0:	9b01      	ldr	r3, [sp, #4]
 800dac2:	6163      	str	r3, [r4, #20]
 800dac4:	3020      	adds	r0, #32
 800dac6:	2201      	movs	r2, #1
 800dac8:	e7e8      	b.n	800da9c <__d2b+0x64>
 800daca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dace:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dad2:	6038      	str	r0, [r7, #0]
 800dad4:	6918      	ldr	r0, [r3, #16]
 800dad6:	f7ff fd2d 	bl	800d534 <__hi0bits>
 800dada:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dade:	e7e5      	b.n	800daac <__d2b+0x74>
 800dae0:	0800f2b8 	.word	0x0800f2b8
 800dae4:	0800f2c9 	.word	0x0800f2c9

0800dae8 <__ssputs_r>:
 800dae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800daec:	688e      	ldr	r6, [r1, #8]
 800daee:	461f      	mov	r7, r3
 800daf0:	42be      	cmp	r6, r7
 800daf2:	680b      	ldr	r3, [r1, #0]
 800daf4:	4682      	mov	sl, r0
 800daf6:	460c      	mov	r4, r1
 800daf8:	4690      	mov	r8, r2
 800dafa:	d82d      	bhi.n	800db58 <__ssputs_r+0x70>
 800dafc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800db00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800db04:	d026      	beq.n	800db54 <__ssputs_r+0x6c>
 800db06:	6965      	ldr	r5, [r4, #20]
 800db08:	6909      	ldr	r1, [r1, #16]
 800db0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db0e:	eba3 0901 	sub.w	r9, r3, r1
 800db12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db16:	1c7b      	adds	r3, r7, #1
 800db18:	444b      	add	r3, r9
 800db1a:	106d      	asrs	r5, r5, #1
 800db1c:	429d      	cmp	r5, r3
 800db1e:	bf38      	it	cc
 800db20:	461d      	movcc	r5, r3
 800db22:	0553      	lsls	r3, r2, #21
 800db24:	d527      	bpl.n	800db76 <__ssputs_r+0x8e>
 800db26:	4629      	mov	r1, r5
 800db28:	f7ff fbd0 	bl	800d2cc <_malloc_r>
 800db2c:	4606      	mov	r6, r0
 800db2e:	b360      	cbz	r0, 800db8a <__ssputs_r+0xa2>
 800db30:	6921      	ldr	r1, [r4, #16]
 800db32:	464a      	mov	r2, r9
 800db34:	f000 fbdc 	bl	800e2f0 <memcpy>
 800db38:	89a3      	ldrh	r3, [r4, #12]
 800db3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800db3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db42:	81a3      	strh	r3, [r4, #12]
 800db44:	6126      	str	r6, [r4, #16]
 800db46:	6165      	str	r5, [r4, #20]
 800db48:	444e      	add	r6, r9
 800db4a:	eba5 0509 	sub.w	r5, r5, r9
 800db4e:	6026      	str	r6, [r4, #0]
 800db50:	60a5      	str	r5, [r4, #8]
 800db52:	463e      	mov	r6, r7
 800db54:	42be      	cmp	r6, r7
 800db56:	d900      	bls.n	800db5a <__ssputs_r+0x72>
 800db58:	463e      	mov	r6, r7
 800db5a:	6820      	ldr	r0, [r4, #0]
 800db5c:	4632      	mov	r2, r6
 800db5e:	4641      	mov	r1, r8
 800db60:	f000 fb9c 	bl	800e29c <memmove>
 800db64:	68a3      	ldr	r3, [r4, #8]
 800db66:	1b9b      	subs	r3, r3, r6
 800db68:	60a3      	str	r3, [r4, #8]
 800db6a:	6823      	ldr	r3, [r4, #0]
 800db6c:	4433      	add	r3, r6
 800db6e:	6023      	str	r3, [r4, #0]
 800db70:	2000      	movs	r0, #0
 800db72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db76:	462a      	mov	r2, r5
 800db78:	f000 fc0c 	bl	800e394 <_realloc_r>
 800db7c:	4606      	mov	r6, r0
 800db7e:	2800      	cmp	r0, #0
 800db80:	d1e0      	bne.n	800db44 <__ssputs_r+0x5c>
 800db82:	6921      	ldr	r1, [r4, #16]
 800db84:	4650      	mov	r0, sl
 800db86:	f7ff fb2d 	bl	800d1e4 <_free_r>
 800db8a:	230c      	movs	r3, #12
 800db8c:	f8ca 3000 	str.w	r3, [sl]
 800db90:	89a3      	ldrh	r3, [r4, #12]
 800db92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db96:	81a3      	strh	r3, [r4, #12]
 800db98:	f04f 30ff 	mov.w	r0, #4294967295
 800db9c:	e7e9      	b.n	800db72 <__ssputs_r+0x8a>
	...

0800dba0 <_svfiprintf_r>:
 800dba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dba4:	4698      	mov	r8, r3
 800dba6:	898b      	ldrh	r3, [r1, #12]
 800dba8:	061b      	lsls	r3, r3, #24
 800dbaa:	b09d      	sub	sp, #116	@ 0x74
 800dbac:	4607      	mov	r7, r0
 800dbae:	460d      	mov	r5, r1
 800dbb0:	4614      	mov	r4, r2
 800dbb2:	d510      	bpl.n	800dbd6 <_svfiprintf_r+0x36>
 800dbb4:	690b      	ldr	r3, [r1, #16]
 800dbb6:	b973      	cbnz	r3, 800dbd6 <_svfiprintf_r+0x36>
 800dbb8:	2140      	movs	r1, #64	@ 0x40
 800dbba:	f7ff fb87 	bl	800d2cc <_malloc_r>
 800dbbe:	6028      	str	r0, [r5, #0]
 800dbc0:	6128      	str	r0, [r5, #16]
 800dbc2:	b930      	cbnz	r0, 800dbd2 <_svfiprintf_r+0x32>
 800dbc4:	230c      	movs	r3, #12
 800dbc6:	603b      	str	r3, [r7, #0]
 800dbc8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbcc:	b01d      	add	sp, #116	@ 0x74
 800dbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbd2:	2340      	movs	r3, #64	@ 0x40
 800dbd4:	616b      	str	r3, [r5, #20]
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbda:	2320      	movs	r3, #32
 800dbdc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dbe0:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbe4:	2330      	movs	r3, #48	@ 0x30
 800dbe6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dd84 <_svfiprintf_r+0x1e4>
 800dbea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dbee:	f04f 0901 	mov.w	r9, #1
 800dbf2:	4623      	mov	r3, r4
 800dbf4:	469a      	mov	sl, r3
 800dbf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbfa:	b10a      	cbz	r2, 800dc00 <_svfiprintf_r+0x60>
 800dbfc:	2a25      	cmp	r2, #37	@ 0x25
 800dbfe:	d1f9      	bne.n	800dbf4 <_svfiprintf_r+0x54>
 800dc00:	ebba 0b04 	subs.w	fp, sl, r4
 800dc04:	d00b      	beq.n	800dc1e <_svfiprintf_r+0x7e>
 800dc06:	465b      	mov	r3, fp
 800dc08:	4622      	mov	r2, r4
 800dc0a:	4629      	mov	r1, r5
 800dc0c:	4638      	mov	r0, r7
 800dc0e:	f7ff ff6b 	bl	800dae8 <__ssputs_r>
 800dc12:	3001      	adds	r0, #1
 800dc14:	f000 80a7 	beq.w	800dd66 <_svfiprintf_r+0x1c6>
 800dc18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc1a:	445a      	add	r2, fp
 800dc1c:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc1e:	f89a 3000 	ldrb.w	r3, [sl]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	f000 809f 	beq.w	800dd66 <_svfiprintf_r+0x1c6>
 800dc28:	2300      	movs	r3, #0
 800dc2a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc32:	f10a 0a01 	add.w	sl, sl, #1
 800dc36:	9304      	str	r3, [sp, #16]
 800dc38:	9307      	str	r3, [sp, #28]
 800dc3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dc3e:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc40:	4654      	mov	r4, sl
 800dc42:	2205      	movs	r2, #5
 800dc44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc48:	484e      	ldr	r0, [pc, #312]	@ (800dd84 <_svfiprintf_r+0x1e4>)
 800dc4a:	f7f2 fb49 	bl	80002e0 <memchr>
 800dc4e:	9a04      	ldr	r2, [sp, #16]
 800dc50:	b9d8      	cbnz	r0, 800dc8a <_svfiprintf_r+0xea>
 800dc52:	06d0      	lsls	r0, r2, #27
 800dc54:	bf44      	itt	mi
 800dc56:	2320      	movmi	r3, #32
 800dc58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc5c:	0711      	lsls	r1, r2, #28
 800dc5e:	bf44      	itt	mi
 800dc60:	232b      	movmi	r3, #43	@ 0x2b
 800dc62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc66:	f89a 3000 	ldrb.w	r3, [sl]
 800dc6a:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc6c:	d015      	beq.n	800dc9a <_svfiprintf_r+0xfa>
 800dc6e:	9a07      	ldr	r2, [sp, #28]
 800dc70:	4654      	mov	r4, sl
 800dc72:	2000      	movs	r0, #0
 800dc74:	f04f 0c0a 	mov.w	ip, #10
 800dc78:	4621      	mov	r1, r4
 800dc7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc7e:	3b30      	subs	r3, #48	@ 0x30
 800dc80:	2b09      	cmp	r3, #9
 800dc82:	d94b      	bls.n	800dd1c <_svfiprintf_r+0x17c>
 800dc84:	b1b0      	cbz	r0, 800dcb4 <_svfiprintf_r+0x114>
 800dc86:	9207      	str	r2, [sp, #28]
 800dc88:	e014      	b.n	800dcb4 <_svfiprintf_r+0x114>
 800dc8a:	eba0 0308 	sub.w	r3, r0, r8
 800dc8e:	fa09 f303 	lsl.w	r3, r9, r3
 800dc92:	4313      	orrs	r3, r2
 800dc94:	9304      	str	r3, [sp, #16]
 800dc96:	46a2      	mov	sl, r4
 800dc98:	e7d2      	b.n	800dc40 <_svfiprintf_r+0xa0>
 800dc9a:	9b03      	ldr	r3, [sp, #12]
 800dc9c:	1d19      	adds	r1, r3, #4
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	9103      	str	r1, [sp, #12]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	bfbb      	ittet	lt
 800dca6:	425b      	neglt	r3, r3
 800dca8:	f042 0202 	orrlt.w	r2, r2, #2
 800dcac:	9307      	strge	r3, [sp, #28]
 800dcae:	9307      	strlt	r3, [sp, #28]
 800dcb0:	bfb8      	it	lt
 800dcb2:	9204      	strlt	r2, [sp, #16]
 800dcb4:	7823      	ldrb	r3, [r4, #0]
 800dcb6:	2b2e      	cmp	r3, #46	@ 0x2e
 800dcb8:	d10a      	bne.n	800dcd0 <_svfiprintf_r+0x130>
 800dcba:	7863      	ldrb	r3, [r4, #1]
 800dcbc:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcbe:	d132      	bne.n	800dd26 <_svfiprintf_r+0x186>
 800dcc0:	9b03      	ldr	r3, [sp, #12]
 800dcc2:	1d1a      	adds	r2, r3, #4
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	9203      	str	r2, [sp, #12]
 800dcc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dccc:	3402      	adds	r4, #2
 800dcce:	9305      	str	r3, [sp, #20]
 800dcd0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dd94 <_svfiprintf_r+0x1f4>
 800dcd4:	7821      	ldrb	r1, [r4, #0]
 800dcd6:	2203      	movs	r2, #3
 800dcd8:	4650      	mov	r0, sl
 800dcda:	f7f2 fb01 	bl	80002e0 <memchr>
 800dcde:	b138      	cbz	r0, 800dcf0 <_svfiprintf_r+0x150>
 800dce0:	9b04      	ldr	r3, [sp, #16]
 800dce2:	eba0 000a 	sub.w	r0, r0, sl
 800dce6:	2240      	movs	r2, #64	@ 0x40
 800dce8:	4082      	lsls	r2, r0
 800dcea:	4313      	orrs	r3, r2
 800dcec:	3401      	adds	r4, #1
 800dcee:	9304      	str	r3, [sp, #16]
 800dcf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcf4:	4824      	ldr	r0, [pc, #144]	@ (800dd88 <_svfiprintf_r+0x1e8>)
 800dcf6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dcfa:	2206      	movs	r2, #6
 800dcfc:	f7f2 faf0 	bl	80002e0 <memchr>
 800dd00:	2800      	cmp	r0, #0
 800dd02:	d036      	beq.n	800dd72 <_svfiprintf_r+0x1d2>
 800dd04:	4b21      	ldr	r3, [pc, #132]	@ (800dd8c <_svfiprintf_r+0x1ec>)
 800dd06:	bb1b      	cbnz	r3, 800dd50 <_svfiprintf_r+0x1b0>
 800dd08:	9b03      	ldr	r3, [sp, #12]
 800dd0a:	3307      	adds	r3, #7
 800dd0c:	f023 0307 	bic.w	r3, r3, #7
 800dd10:	3308      	adds	r3, #8
 800dd12:	9303      	str	r3, [sp, #12]
 800dd14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd16:	4433      	add	r3, r6
 800dd18:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd1a:	e76a      	b.n	800dbf2 <_svfiprintf_r+0x52>
 800dd1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd20:	460c      	mov	r4, r1
 800dd22:	2001      	movs	r0, #1
 800dd24:	e7a8      	b.n	800dc78 <_svfiprintf_r+0xd8>
 800dd26:	2300      	movs	r3, #0
 800dd28:	3401      	adds	r4, #1
 800dd2a:	9305      	str	r3, [sp, #20]
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	f04f 0c0a 	mov.w	ip, #10
 800dd32:	4620      	mov	r0, r4
 800dd34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd38:	3a30      	subs	r2, #48	@ 0x30
 800dd3a:	2a09      	cmp	r2, #9
 800dd3c:	d903      	bls.n	800dd46 <_svfiprintf_r+0x1a6>
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d0c6      	beq.n	800dcd0 <_svfiprintf_r+0x130>
 800dd42:	9105      	str	r1, [sp, #20]
 800dd44:	e7c4      	b.n	800dcd0 <_svfiprintf_r+0x130>
 800dd46:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd4a:	4604      	mov	r4, r0
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	e7f0      	b.n	800dd32 <_svfiprintf_r+0x192>
 800dd50:	ab03      	add	r3, sp, #12
 800dd52:	9300      	str	r3, [sp, #0]
 800dd54:	462a      	mov	r2, r5
 800dd56:	4b0e      	ldr	r3, [pc, #56]	@ (800dd90 <_svfiprintf_r+0x1f0>)
 800dd58:	a904      	add	r1, sp, #16
 800dd5a:	4638      	mov	r0, r7
 800dd5c:	f7fd ff04 	bl	800bb68 <_printf_float>
 800dd60:	1c42      	adds	r2, r0, #1
 800dd62:	4606      	mov	r6, r0
 800dd64:	d1d6      	bne.n	800dd14 <_svfiprintf_r+0x174>
 800dd66:	89ab      	ldrh	r3, [r5, #12]
 800dd68:	065b      	lsls	r3, r3, #25
 800dd6a:	f53f af2d 	bmi.w	800dbc8 <_svfiprintf_r+0x28>
 800dd6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd70:	e72c      	b.n	800dbcc <_svfiprintf_r+0x2c>
 800dd72:	ab03      	add	r3, sp, #12
 800dd74:	9300      	str	r3, [sp, #0]
 800dd76:	462a      	mov	r2, r5
 800dd78:	4b05      	ldr	r3, [pc, #20]	@ (800dd90 <_svfiprintf_r+0x1f0>)
 800dd7a:	a904      	add	r1, sp, #16
 800dd7c:	4638      	mov	r0, r7
 800dd7e:	f7fe f97b 	bl	800c078 <_printf_i>
 800dd82:	e7ed      	b.n	800dd60 <_svfiprintf_r+0x1c0>
 800dd84:	0800f420 	.word	0x0800f420
 800dd88:	0800f42a 	.word	0x0800f42a
 800dd8c:	0800bb69 	.word	0x0800bb69
 800dd90:	0800dae9 	.word	0x0800dae9
 800dd94:	0800f426 	.word	0x0800f426

0800dd98 <__sfputc_r>:
 800dd98:	6893      	ldr	r3, [r2, #8]
 800dd9a:	3b01      	subs	r3, #1
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	b410      	push	{r4}
 800dda0:	6093      	str	r3, [r2, #8]
 800dda2:	da08      	bge.n	800ddb6 <__sfputc_r+0x1e>
 800dda4:	6994      	ldr	r4, [r2, #24]
 800dda6:	42a3      	cmp	r3, r4
 800dda8:	db01      	blt.n	800ddae <__sfputc_r+0x16>
 800ddaa:	290a      	cmp	r1, #10
 800ddac:	d103      	bne.n	800ddb6 <__sfputc_r+0x1e>
 800ddae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddb2:	f000 b9df 	b.w	800e174 <__swbuf_r>
 800ddb6:	6813      	ldr	r3, [r2, #0]
 800ddb8:	1c58      	adds	r0, r3, #1
 800ddba:	6010      	str	r0, [r2, #0]
 800ddbc:	7019      	strb	r1, [r3, #0]
 800ddbe:	4608      	mov	r0, r1
 800ddc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddc4:	4770      	bx	lr

0800ddc6 <__sfputs_r>:
 800ddc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddc8:	4606      	mov	r6, r0
 800ddca:	460f      	mov	r7, r1
 800ddcc:	4614      	mov	r4, r2
 800ddce:	18d5      	adds	r5, r2, r3
 800ddd0:	42ac      	cmp	r4, r5
 800ddd2:	d101      	bne.n	800ddd8 <__sfputs_r+0x12>
 800ddd4:	2000      	movs	r0, #0
 800ddd6:	e007      	b.n	800dde8 <__sfputs_r+0x22>
 800ddd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dddc:	463a      	mov	r2, r7
 800ddde:	4630      	mov	r0, r6
 800dde0:	f7ff ffda 	bl	800dd98 <__sfputc_r>
 800dde4:	1c43      	adds	r3, r0, #1
 800dde6:	d1f3      	bne.n	800ddd0 <__sfputs_r+0xa>
 800dde8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ddec <_vfiprintf_r>:
 800ddec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddf0:	460d      	mov	r5, r1
 800ddf2:	b09d      	sub	sp, #116	@ 0x74
 800ddf4:	4614      	mov	r4, r2
 800ddf6:	4698      	mov	r8, r3
 800ddf8:	4606      	mov	r6, r0
 800ddfa:	b118      	cbz	r0, 800de04 <_vfiprintf_r+0x18>
 800ddfc:	6a03      	ldr	r3, [r0, #32]
 800ddfe:	b90b      	cbnz	r3, 800de04 <_vfiprintf_r+0x18>
 800de00:	f7fe fae6 	bl	800c3d0 <__sinit>
 800de04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de06:	07d9      	lsls	r1, r3, #31
 800de08:	d405      	bmi.n	800de16 <_vfiprintf_r+0x2a>
 800de0a:	89ab      	ldrh	r3, [r5, #12]
 800de0c:	059a      	lsls	r2, r3, #22
 800de0e:	d402      	bmi.n	800de16 <_vfiprintf_r+0x2a>
 800de10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de12:	f7fe fc06 	bl	800c622 <__retarget_lock_acquire_recursive>
 800de16:	89ab      	ldrh	r3, [r5, #12]
 800de18:	071b      	lsls	r3, r3, #28
 800de1a:	d501      	bpl.n	800de20 <_vfiprintf_r+0x34>
 800de1c:	692b      	ldr	r3, [r5, #16]
 800de1e:	b99b      	cbnz	r3, 800de48 <_vfiprintf_r+0x5c>
 800de20:	4629      	mov	r1, r5
 800de22:	4630      	mov	r0, r6
 800de24:	f000 f9e4 	bl	800e1f0 <__swsetup_r>
 800de28:	b170      	cbz	r0, 800de48 <_vfiprintf_r+0x5c>
 800de2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de2c:	07dc      	lsls	r4, r3, #31
 800de2e:	d504      	bpl.n	800de3a <_vfiprintf_r+0x4e>
 800de30:	f04f 30ff 	mov.w	r0, #4294967295
 800de34:	b01d      	add	sp, #116	@ 0x74
 800de36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de3a:	89ab      	ldrh	r3, [r5, #12]
 800de3c:	0598      	lsls	r0, r3, #22
 800de3e:	d4f7      	bmi.n	800de30 <_vfiprintf_r+0x44>
 800de40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de42:	f7fe fbef 	bl	800c624 <__retarget_lock_release_recursive>
 800de46:	e7f3      	b.n	800de30 <_vfiprintf_r+0x44>
 800de48:	2300      	movs	r3, #0
 800de4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800de4c:	2320      	movs	r3, #32
 800de4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800de52:	f8cd 800c 	str.w	r8, [sp, #12]
 800de56:	2330      	movs	r3, #48	@ 0x30
 800de58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e008 <_vfiprintf_r+0x21c>
 800de5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800de60:	f04f 0901 	mov.w	r9, #1
 800de64:	4623      	mov	r3, r4
 800de66:	469a      	mov	sl, r3
 800de68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de6c:	b10a      	cbz	r2, 800de72 <_vfiprintf_r+0x86>
 800de6e:	2a25      	cmp	r2, #37	@ 0x25
 800de70:	d1f9      	bne.n	800de66 <_vfiprintf_r+0x7a>
 800de72:	ebba 0b04 	subs.w	fp, sl, r4
 800de76:	d00b      	beq.n	800de90 <_vfiprintf_r+0xa4>
 800de78:	465b      	mov	r3, fp
 800de7a:	4622      	mov	r2, r4
 800de7c:	4629      	mov	r1, r5
 800de7e:	4630      	mov	r0, r6
 800de80:	f7ff ffa1 	bl	800ddc6 <__sfputs_r>
 800de84:	3001      	adds	r0, #1
 800de86:	f000 80a7 	beq.w	800dfd8 <_vfiprintf_r+0x1ec>
 800de8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de8c:	445a      	add	r2, fp
 800de8e:	9209      	str	r2, [sp, #36]	@ 0x24
 800de90:	f89a 3000 	ldrb.w	r3, [sl]
 800de94:	2b00      	cmp	r3, #0
 800de96:	f000 809f 	beq.w	800dfd8 <_vfiprintf_r+0x1ec>
 800de9a:	2300      	movs	r3, #0
 800de9c:	f04f 32ff 	mov.w	r2, #4294967295
 800dea0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dea4:	f10a 0a01 	add.w	sl, sl, #1
 800dea8:	9304      	str	r3, [sp, #16]
 800deaa:	9307      	str	r3, [sp, #28]
 800deac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800deb0:	931a      	str	r3, [sp, #104]	@ 0x68
 800deb2:	4654      	mov	r4, sl
 800deb4:	2205      	movs	r2, #5
 800deb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deba:	4853      	ldr	r0, [pc, #332]	@ (800e008 <_vfiprintf_r+0x21c>)
 800debc:	f7f2 fa10 	bl	80002e0 <memchr>
 800dec0:	9a04      	ldr	r2, [sp, #16]
 800dec2:	b9d8      	cbnz	r0, 800defc <_vfiprintf_r+0x110>
 800dec4:	06d1      	lsls	r1, r2, #27
 800dec6:	bf44      	itt	mi
 800dec8:	2320      	movmi	r3, #32
 800deca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dece:	0713      	lsls	r3, r2, #28
 800ded0:	bf44      	itt	mi
 800ded2:	232b      	movmi	r3, #43	@ 0x2b
 800ded4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ded8:	f89a 3000 	ldrb.w	r3, [sl]
 800dedc:	2b2a      	cmp	r3, #42	@ 0x2a
 800dede:	d015      	beq.n	800df0c <_vfiprintf_r+0x120>
 800dee0:	9a07      	ldr	r2, [sp, #28]
 800dee2:	4654      	mov	r4, sl
 800dee4:	2000      	movs	r0, #0
 800dee6:	f04f 0c0a 	mov.w	ip, #10
 800deea:	4621      	mov	r1, r4
 800deec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800def0:	3b30      	subs	r3, #48	@ 0x30
 800def2:	2b09      	cmp	r3, #9
 800def4:	d94b      	bls.n	800df8e <_vfiprintf_r+0x1a2>
 800def6:	b1b0      	cbz	r0, 800df26 <_vfiprintf_r+0x13a>
 800def8:	9207      	str	r2, [sp, #28]
 800defa:	e014      	b.n	800df26 <_vfiprintf_r+0x13a>
 800defc:	eba0 0308 	sub.w	r3, r0, r8
 800df00:	fa09 f303 	lsl.w	r3, r9, r3
 800df04:	4313      	orrs	r3, r2
 800df06:	9304      	str	r3, [sp, #16]
 800df08:	46a2      	mov	sl, r4
 800df0a:	e7d2      	b.n	800deb2 <_vfiprintf_r+0xc6>
 800df0c:	9b03      	ldr	r3, [sp, #12]
 800df0e:	1d19      	adds	r1, r3, #4
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	9103      	str	r1, [sp, #12]
 800df14:	2b00      	cmp	r3, #0
 800df16:	bfbb      	ittet	lt
 800df18:	425b      	neglt	r3, r3
 800df1a:	f042 0202 	orrlt.w	r2, r2, #2
 800df1e:	9307      	strge	r3, [sp, #28]
 800df20:	9307      	strlt	r3, [sp, #28]
 800df22:	bfb8      	it	lt
 800df24:	9204      	strlt	r2, [sp, #16]
 800df26:	7823      	ldrb	r3, [r4, #0]
 800df28:	2b2e      	cmp	r3, #46	@ 0x2e
 800df2a:	d10a      	bne.n	800df42 <_vfiprintf_r+0x156>
 800df2c:	7863      	ldrb	r3, [r4, #1]
 800df2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800df30:	d132      	bne.n	800df98 <_vfiprintf_r+0x1ac>
 800df32:	9b03      	ldr	r3, [sp, #12]
 800df34:	1d1a      	adds	r2, r3, #4
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	9203      	str	r2, [sp, #12]
 800df3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800df3e:	3402      	adds	r4, #2
 800df40:	9305      	str	r3, [sp, #20]
 800df42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e018 <_vfiprintf_r+0x22c>
 800df46:	7821      	ldrb	r1, [r4, #0]
 800df48:	2203      	movs	r2, #3
 800df4a:	4650      	mov	r0, sl
 800df4c:	f7f2 f9c8 	bl	80002e0 <memchr>
 800df50:	b138      	cbz	r0, 800df62 <_vfiprintf_r+0x176>
 800df52:	9b04      	ldr	r3, [sp, #16]
 800df54:	eba0 000a 	sub.w	r0, r0, sl
 800df58:	2240      	movs	r2, #64	@ 0x40
 800df5a:	4082      	lsls	r2, r0
 800df5c:	4313      	orrs	r3, r2
 800df5e:	3401      	adds	r4, #1
 800df60:	9304      	str	r3, [sp, #16]
 800df62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df66:	4829      	ldr	r0, [pc, #164]	@ (800e00c <_vfiprintf_r+0x220>)
 800df68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800df6c:	2206      	movs	r2, #6
 800df6e:	f7f2 f9b7 	bl	80002e0 <memchr>
 800df72:	2800      	cmp	r0, #0
 800df74:	d03f      	beq.n	800dff6 <_vfiprintf_r+0x20a>
 800df76:	4b26      	ldr	r3, [pc, #152]	@ (800e010 <_vfiprintf_r+0x224>)
 800df78:	bb1b      	cbnz	r3, 800dfc2 <_vfiprintf_r+0x1d6>
 800df7a:	9b03      	ldr	r3, [sp, #12]
 800df7c:	3307      	adds	r3, #7
 800df7e:	f023 0307 	bic.w	r3, r3, #7
 800df82:	3308      	adds	r3, #8
 800df84:	9303      	str	r3, [sp, #12]
 800df86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df88:	443b      	add	r3, r7
 800df8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800df8c:	e76a      	b.n	800de64 <_vfiprintf_r+0x78>
 800df8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800df92:	460c      	mov	r4, r1
 800df94:	2001      	movs	r0, #1
 800df96:	e7a8      	b.n	800deea <_vfiprintf_r+0xfe>
 800df98:	2300      	movs	r3, #0
 800df9a:	3401      	adds	r4, #1
 800df9c:	9305      	str	r3, [sp, #20]
 800df9e:	4619      	mov	r1, r3
 800dfa0:	f04f 0c0a 	mov.w	ip, #10
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfaa:	3a30      	subs	r2, #48	@ 0x30
 800dfac:	2a09      	cmp	r2, #9
 800dfae:	d903      	bls.n	800dfb8 <_vfiprintf_r+0x1cc>
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d0c6      	beq.n	800df42 <_vfiprintf_r+0x156>
 800dfb4:	9105      	str	r1, [sp, #20]
 800dfb6:	e7c4      	b.n	800df42 <_vfiprintf_r+0x156>
 800dfb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfbc:	4604      	mov	r4, r0
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	e7f0      	b.n	800dfa4 <_vfiprintf_r+0x1b8>
 800dfc2:	ab03      	add	r3, sp, #12
 800dfc4:	9300      	str	r3, [sp, #0]
 800dfc6:	462a      	mov	r2, r5
 800dfc8:	4b12      	ldr	r3, [pc, #72]	@ (800e014 <_vfiprintf_r+0x228>)
 800dfca:	a904      	add	r1, sp, #16
 800dfcc:	4630      	mov	r0, r6
 800dfce:	f7fd fdcb 	bl	800bb68 <_printf_float>
 800dfd2:	4607      	mov	r7, r0
 800dfd4:	1c78      	adds	r0, r7, #1
 800dfd6:	d1d6      	bne.n	800df86 <_vfiprintf_r+0x19a>
 800dfd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfda:	07d9      	lsls	r1, r3, #31
 800dfdc:	d405      	bmi.n	800dfea <_vfiprintf_r+0x1fe>
 800dfde:	89ab      	ldrh	r3, [r5, #12]
 800dfe0:	059a      	lsls	r2, r3, #22
 800dfe2:	d402      	bmi.n	800dfea <_vfiprintf_r+0x1fe>
 800dfe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfe6:	f7fe fb1d 	bl	800c624 <__retarget_lock_release_recursive>
 800dfea:	89ab      	ldrh	r3, [r5, #12]
 800dfec:	065b      	lsls	r3, r3, #25
 800dfee:	f53f af1f 	bmi.w	800de30 <_vfiprintf_r+0x44>
 800dff2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dff4:	e71e      	b.n	800de34 <_vfiprintf_r+0x48>
 800dff6:	ab03      	add	r3, sp, #12
 800dff8:	9300      	str	r3, [sp, #0]
 800dffa:	462a      	mov	r2, r5
 800dffc:	4b05      	ldr	r3, [pc, #20]	@ (800e014 <_vfiprintf_r+0x228>)
 800dffe:	a904      	add	r1, sp, #16
 800e000:	4630      	mov	r0, r6
 800e002:	f7fe f839 	bl	800c078 <_printf_i>
 800e006:	e7e4      	b.n	800dfd2 <_vfiprintf_r+0x1e6>
 800e008:	0800f420 	.word	0x0800f420
 800e00c:	0800f42a 	.word	0x0800f42a
 800e010:	0800bb69 	.word	0x0800bb69
 800e014:	0800ddc7 	.word	0x0800ddc7
 800e018:	0800f426 	.word	0x0800f426

0800e01c <__sflush_r>:
 800e01c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e024:	0716      	lsls	r6, r2, #28
 800e026:	4605      	mov	r5, r0
 800e028:	460c      	mov	r4, r1
 800e02a:	d454      	bmi.n	800e0d6 <__sflush_r+0xba>
 800e02c:	684b      	ldr	r3, [r1, #4]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	dc02      	bgt.n	800e038 <__sflush_r+0x1c>
 800e032:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e034:	2b00      	cmp	r3, #0
 800e036:	dd48      	ble.n	800e0ca <__sflush_r+0xae>
 800e038:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e03a:	2e00      	cmp	r6, #0
 800e03c:	d045      	beq.n	800e0ca <__sflush_r+0xae>
 800e03e:	2300      	movs	r3, #0
 800e040:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e044:	682f      	ldr	r7, [r5, #0]
 800e046:	6a21      	ldr	r1, [r4, #32]
 800e048:	602b      	str	r3, [r5, #0]
 800e04a:	d030      	beq.n	800e0ae <__sflush_r+0x92>
 800e04c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e04e:	89a3      	ldrh	r3, [r4, #12]
 800e050:	0759      	lsls	r1, r3, #29
 800e052:	d505      	bpl.n	800e060 <__sflush_r+0x44>
 800e054:	6863      	ldr	r3, [r4, #4]
 800e056:	1ad2      	subs	r2, r2, r3
 800e058:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e05a:	b10b      	cbz	r3, 800e060 <__sflush_r+0x44>
 800e05c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e05e:	1ad2      	subs	r2, r2, r3
 800e060:	2300      	movs	r3, #0
 800e062:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e064:	6a21      	ldr	r1, [r4, #32]
 800e066:	4628      	mov	r0, r5
 800e068:	47b0      	blx	r6
 800e06a:	1c43      	adds	r3, r0, #1
 800e06c:	89a3      	ldrh	r3, [r4, #12]
 800e06e:	d106      	bne.n	800e07e <__sflush_r+0x62>
 800e070:	6829      	ldr	r1, [r5, #0]
 800e072:	291d      	cmp	r1, #29
 800e074:	d82b      	bhi.n	800e0ce <__sflush_r+0xb2>
 800e076:	4a2a      	ldr	r2, [pc, #168]	@ (800e120 <__sflush_r+0x104>)
 800e078:	410a      	asrs	r2, r1
 800e07a:	07d6      	lsls	r6, r2, #31
 800e07c:	d427      	bmi.n	800e0ce <__sflush_r+0xb2>
 800e07e:	2200      	movs	r2, #0
 800e080:	6062      	str	r2, [r4, #4]
 800e082:	04d9      	lsls	r1, r3, #19
 800e084:	6922      	ldr	r2, [r4, #16]
 800e086:	6022      	str	r2, [r4, #0]
 800e088:	d504      	bpl.n	800e094 <__sflush_r+0x78>
 800e08a:	1c42      	adds	r2, r0, #1
 800e08c:	d101      	bne.n	800e092 <__sflush_r+0x76>
 800e08e:	682b      	ldr	r3, [r5, #0]
 800e090:	b903      	cbnz	r3, 800e094 <__sflush_r+0x78>
 800e092:	6560      	str	r0, [r4, #84]	@ 0x54
 800e094:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e096:	602f      	str	r7, [r5, #0]
 800e098:	b1b9      	cbz	r1, 800e0ca <__sflush_r+0xae>
 800e09a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e09e:	4299      	cmp	r1, r3
 800e0a0:	d002      	beq.n	800e0a8 <__sflush_r+0x8c>
 800e0a2:	4628      	mov	r0, r5
 800e0a4:	f7ff f89e 	bl	800d1e4 <_free_r>
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	6363      	str	r3, [r4, #52]	@ 0x34
 800e0ac:	e00d      	b.n	800e0ca <__sflush_r+0xae>
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	47b0      	blx	r6
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	1c50      	adds	r0, r2, #1
 800e0b8:	d1c9      	bne.n	800e04e <__sflush_r+0x32>
 800e0ba:	682b      	ldr	r3, [r5, #0]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d0c6      	beq.n	800e04e <__sflush_r+0x32>
 800e0c0:	2b1d      	cmp	r3, #29
 800e0c2:	d001      	beq.n	800e0c8 <__sflush_r+0xac>
 800e0c4:	2b16      	cmp	r3, #22
 800e0c6:	d11e      	bne.n	800e106 <__sflush_r+0xea>
 800e0c8:	602f      	str	r7, [r5, #0]
 800e0ca:	2000      	movs	r0, #0
 800e0cc:	e022      	b.n	800e114 <__sflush_r+0xf8>
 800e0ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0d2:	b21b      	sxth	r3, r3
 800e0d4:	e01b      	b.n	800e10e <__sflush_r+0xf2>
 800e0d6:	690f      	ldr	r7, [r1, #16]
 800e0d8:	2f00      	cmp	r7, #0
 800e0da:	d0f6      	beq.n	800e0ca <__sflush_r+0xae>
 800e0dc:	0793      	lsls	r3, r2, #30
 800e0de:	680e      	ldr	r6, [r1, #0]
 800e0e0:	bf08      	it	eq
 800e0e2:	694b      	ldreq	r3, [r1, #20]
 800e0e4:	600f      	str	r7, [r1, #0]
 800e0e6:	bf18      	it	ne
 800e0e8:	2300      	movne	r3, #0
 800e0ea:	eba6 0807 	sub.w	r8, r6, r7
 800e0ee:	608b      	str	r3, [r1, #8]
 800e0f0:	f1b8 0f00 	cmp.w	r8, #0
 800e0f4:	dde9      	ble.n	800e0ca <__sflush_r+0xae>
 800e0f6:	6a21      	ldr	r1, [r4, #32]
 800e0f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e0fa:	4643      	mov	r3, r8
 800e0fc:	463a      	mov	r2, r7
 800e0fe:	4628      	mov	r0, r5
 800e100:	47b0      	blx	r6
 800e102:	2800      	cmp	r0, #0
 800e104:	dc08      	bgt.n	800e118 <__sflush_r+0xfc>
 800e106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e10a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e10e:	81a3      	strh	r3, [r4, #12]
 800e110:	f04f 30ff 	mov.w	r0, #4294967295
 800e114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e118:	4407      	add	r7, r0
 800e11a:	eba8 0800 	sub.w	r8, r8, r0
 800e11e:	e7e7      	b.n	800e0f0 <__sflush_r+0xd4>
 800e120:	dfbffffe 	.word	0xdfbffffe

0800e124 <_fflush_r>:
 800e124:	b538      	push	{r3, r4, r5, lr}
 800e126:	690b      	ldr	r3, [r1, #16]
 800e128:	4605      	mov	r5, r0
 800e12a:	460c      	mov	r4, r1
 800e12c:	b913      	cbnz	r3, 800e134 <_fflush_r+0x10>
 800e12e:	2500      	movs	r5, #0
 800e130:	4628      	mov	r0, r5
 800e132:	bd38      	pop	{r3, r4, r5, pc}
 800e134:	b118      	cbz	r0, 800e13e <_fflush_r+0x1a>
 800e136:	6a03      	ldr	r3, [r0, #32]
 800e138:	b90b      	cbnz	r3, 800e13e <_fflush_r+0x1a>
 800e13a:	f7fe f949 	bl	800c3d0 <__sinit>
 800e13e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d0f3      	beq.n	800e12e <_fflush_r+0xa>
 800e146:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e148:	07d0      	lsls	r0, r2, #31
 800e14a:	d404      	bmi.n	800e156 <_fflush_r+0x32>
 800e14c:	0599      	lsls	r1, r3, #22
 800e14e:	d402      	bmi.n	800e156 <_fflush_r+0x32>
 800e150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e152:	f7fe fa66 	bl	800c622 <__retarget_lock_acquire_recursive>
 800e156:	4628      	mov	r0, r5
 800e158:	4621      	mov	r1, r4
 800e15a:	f7ff ff5f 	bl	800e01c <__sflush_r>
 800e15e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e160:	07da      	lsls	r2, r3, #31
 800e162:	4605      	mov	r5, r0
 800e164:	d4e4      	bmi.n	800e130 <_fflush_r+0xc>
 800e166:	89a3      	ldrh	r3, [r4, #12]
 800e168:	059b      	lsls	r3, r3, #22
 800e16a:	d4e1      	bmi.n	800e130 <_fflush_r+0xc>
 800e16c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e16e:	f7fe fa59 	bl	800c624 <__retarget_lock_release_recursive>
 800e172:	e7dd      	b.n	800e130 <_fflush_r+0xc>

0800e174 <__swbuf_r>:
 800e174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e176:	460e      	mov	r6, r1
 800e178:	4614      	mov	r4, r2
 800e17a:	4605      	mov	r5, r0
 800e17c:	b118      	cbz	r0, 800e186 <__swbuf_r+0x12>
 800e17e:	6a03      	ldr	r3, [r0, #32]
 800e180:	b90b      	cbnz	r3, 800e186 <__swbuf_r+0x12>
 800e182:	f7fe f925 	bl	800c3d0 <__sinit>
 800e186:	69a3      	ldr	r3, [r4, #24]
 800e188:	60a3      	str	r3, [r4, #8]
 800e18a:	89a3      	ldrh	r3, [r4, #12]
 800e18c:	071a      	lsls	r2, r3, #28
 800e18e:	d501      	bpl.n	800e194 <__swbuf_r+0x20>
 800e190:	6923      	ldr	r3, [r4, #16]
 800e192:	b943      	cbnz	r3, 800e1a6 <__swbuf_r+0x32>
 800e194:	4621      	mov	r1, r4
 800e196:	4628      	mov	r0, r5
 800e198:	f000 f82a 	bl	800e1f0 <__swsetup_r>
 800e19c:	b118      	cbz	r0, 800e1a6 <__swbuf_r+0x32>
 800e19e:	f04f 37ff 	mov.w	r7, #4294967295
 800e1a2:	4638      	mov	r0, r7
 800e1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1a6:	6823      	ldr	r3, [r4, #0]
 800e1a8:	6922      	ldr	r2, [r4, #16]
 800e1aa:	1a98      	subs	r0, r3, r2
 800e1ac:	6963      	ldr	r3, [r4, #20]
 800e1ae:	b2f6      	uxtb	r6, r6
 800e1b0:	4283      	cmp	r3, r0
 800e1b2:	4637      	mov	r7, r6
 800e1b4:	dc05      	bgt.n	800e1c2 <__swbuf_r+0x4e>
 800e1b6:	4621      	mov	r1, r4
 800e1b8:	4628      	mov	r0, r5
 800e1ba:	f7ff ffb3 	bl	800e124 <_fflush_r>
 800e1be:	2800      	cmp	r0, #0
 800e1c0:	d1ed      	bne.n	800e19e <__swbuf_r+0x2a>
 800e1c2:	68a3      	ldr	r3, [r4, #8]
 800e1c4:	3b01      	subs	r3, #1
 800e1c6:	60a3      	str	r3, [r4, #8]
 800e1c8:	6823      	ldr	r3, [r4, #0]
 800e1ca:	1c5a      	adds	r2, r3, #1
 800e1cc:	6022      	str	r2, [r4, #0]
 800e1ce:	701e      	strb	r6, [r3, #0]
 800e1d0:	6962      	ldr	r2, [r4, #20]
 800e1d2:	1c43      	adds	r3, r0, #1
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d004      	beq.n	800e1e2 <__swbuf_r+0x6e>
 800e1d8:	89a3      	ldrh	r3, [r4, #12]
 800e1da:	07db      	lsls	r3, r3, #31
 800e1dc:	d5e1      	bpl.n	800e1a2 <__swbuf_r+0x2e>
 800e1de:	2e0a      	cmp	r6, #10
 800e1e0:	d1df      	bne.n	800e1a2 <__swbuf_r+0x2e>
 800e1e2:	4621      	mov	r1, r4
 800e1e4:	4628      	mov	r0, r5
 800e1e6:	f7ff ff9d 	bl	800e124 <_fflush_r>
 800e1ea:	2800      	cmp	r0, #0
 800e1ec:	d0d9      	beq.n	800e1a2 <__swbuf_r+0x2e>
 800e1ee:	e7d6      	b.n	800e19e <__swbuf_r+0x2a>

0800e1f0 <__swsetup_r>:
 800e1f0:	b538      	push	{r3, r4, r5, lr}
 800e1f2:	4b29      	ldr	r3, [pc, #164]	@ (800e298 <__swsetup_r+0xa8>)
 800e1f4:	4605      	mov	r5, r0
 800e1f6:	6818      	ldr	r0, [r3, #0]
 800e1f8:	460c      	mov	r4, r1
 800e1fa:	b118      	cbz	r0, 800e204 <__swsetup_r+0x14>
 800e1fc:	6a03      	ldr	r3, [r0, #32]
 800e1fe:	b90b      	cbnz	r3, 800e204 <__swsetup_r+0x14>
 800e200:	f7fe f8e6 	bl	800c3d0 <__sinit>
 800e204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e208:	0719      	lsls	r1, r3, #28
 800e20a:	d422      	bmi.n	800e252 <__swsetup_r+0x62>
 800e20c:	06da      	lsls	r2, r3, #27
 800e20e:	d407      	bmi.n	800e220 <__swsetup_r+0x30>
 800e210:	2209      	movs	r2, #9
 800e212:	602a      	str	r2, [r5, #0]
 800e214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e218:	81a3      	strh	r3, [r4, #12]
 800e21a:	f04f 30ff 	mov.w	r0, #4294967295
 800e21e:	e033      	b.n	800e288 <__swsetup_r+0x98>
 800e220:	0758      	lsls	r0, r3, #29
 800e222:	d512      	bpl.n	800e24a <__swsetup_r+0x5a>
 800e224:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e226:	b141      	cbz	r1, 800e23a <__swsetup_r+0x4a>
 800e228:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e22c:	4299      	cmp	r1, r3
 800e22e:	d002      	beq.n	800e236 <__swsetup_r+0x46>
 800e230:	4628      	mov	r0, r5
 800e232:	f7fe ffd7 	bl	800d1e4 <_free_r>
 800e236:	2300      	movs	r3, #0
 800e238:	6363      	str	r3, [r4, #52]	@ 0x34
 800e23a:	89a3      	ldrh	r3, [r4, #12]
 800e23c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e240:	81a3      	strh	r3, [r4, #12]
 800e242:	2300      	movs	r3, #0
 800e244:	6063      	str	r3, [r4, #4]
 800e246:	6923      	ldr	r3, [r4, #16]
 800e248:	6023      	str	r3, [r4, #0]
 800e24a:	89a3      	ldrh	r3, [r4, #12]
 800e24c:	f043 0308 	orr.w	r3, r3, #8
 800e250:	81a3      	strh	r3, [r4, #12]
 800e252:	6923      	ldr	r3, [r4, #16]
 800e254:	b94b      	cbnz	r3, 800e26a <__swsetup_r+0x7a>
 800e256:	89a3      	ldrh	r3, [r4, #12]
 800e258:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e25c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e260:	d003      	beq.n	800e26a <__swsetup_r+0x7a>
 800e262:	4621      	mov	r1, r4
 800e264:	4628      	mov	r0, r5
 800e266:	f000 f909 	bl	800e47c <__smakebuf_r>
 800e26a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e26e:	f013 0201 	ands.w	r2, r3, #1
 800e272:	d00a      	beq.n	800e28a <__swsetup_r+0x9a>
 800e274:	2200      	movs	r2, #0
 800e276:	60a2      	str	r2, [r4, #8]
 800e278:	6962      	ldr	r2, [r4, #20]
 800e27a:	4252      	negs	r2, r2
 800e27c:	61a2      	str	r2, [r4, #24]
 800e27e:	6922      	ldr	r2, [r4, #16]
 800e280:	b942      	cbnz	r2, 800e294 <__swsetup_r+0xa4>
 800e282:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e286:	d1c5      	bne.n	800e214 <__swsetup_r+0x24>
 800e288:	bd38      	pop	{r3, r4, r5, pc}
 800e28a:	0799      	lsls	r1, r3, #30
 800e28c:	bf58      	it	pl
 800e28e:	6962      	ldrpl	r2, [r4, #20]
 800e290:	60a2      	str	r2, [r4, #8]
 800e292:	e7f4      	b.n	800e27e <__swsetup_r+0x8e>
 800e294:	2000      	movs	r0, #0
 800e296:	e7f7      	b.n	800e288 <__swsetup_r+0x98>
 800e298:	24000020 	.word	0x24000020

0800e29c <memmove>:
 800e29c:	4288      	cmp	r0, r1
 800e29e:	b510      	push	{r4, lr}
 800e2a0:	eb01 0402 	add.w	r4, r1, r2
 800e2a4:	d902      	bls.n	800e2ac <memmove+0x10>
 800e2a6:	4284      	cmp	r4, r0
 800e2a8:	4623      	mov	r3, r4
 800e2aa:	d807      	bhi.n	800e2bc <memmove+0x20>
 800e2ac:	1e43      	subs	r3, r0, #1
 800e2ae:	42a1      	cmp	r1, r4
 800e2b0:	d008      	beq.n	800e2c4 <memmove+0x28>
 800e2b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e2ba:	e7f8      	b.n	800e2ae <memmove+0x12>
 800e2bc:	4402      	add	r2, r0
 800e2be:	4601      	mov	r1, r0
 800e2c0:	428a      	cmp	r2, r1
 800e2c2:	d100      	bne.n	800e2c6 <memmove+0x2a>
 800e2c4:	bd10      	pop	{r4, pc}
 800e2c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e2ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e2ce:	e7f7      	b.n	800e2c0 <memmove+0x24>

0800e2d0 <_sbrk_r>:
 800e2d0:	b538      	push	{r3, r4, r5, lr}
 800e2d2:	4d06      	ldr	r5, [pc, #24]	@ (800e2ec <_sbrk_r+0x1c>)
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	4604      	mov	r4, r0
 800e2d8:	4608      	mov	r0, r1
 800e2da:	602b      	str	r3, [r5, #0]
 800e2dc:	f7f4 fd02 	bl	8002ce4 <_sbrk>
 800e2e0:	1c43      	adds	r3, r0, #1
 800e2e2:	d102      	bne.n	800e2ea <_sbrk_r+0x1a>
 800e2e4:	682b      	ldr	r3, [r5, #0]
 800e2e6:	b103      	cbz	r3, 800e2ea <_sbrk_r+0x1a>
 800e2e8:	6023      	str	r3, [r4, #0]
 800e2ea:	bd38      	pop	{r3, r4, r5, pc}
 800e2ec:	2400277c 	.word	0x2400277c

0800e2f0 <memcpy>:
 800e2f0:	440a      	add	r2, r1
 800e2f2:	4291      	cmp	r1, r2
 800e2f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e2f8:	d100      	bne.n	800e2fc <memcpy+0xc>
 800e2fa:	4770      	bx	lr
 800e2fc:	b510      	push	{r4, lr}
 800e2fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e302:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e306:	4291      	cmp	r1, r2
 800e308:	d1f9      	bne.n	800e2fe <memcpy+0xe>
 800e30a:	bd10      	pop	{r4, pc}

0800e30c <__assert_func>:
 800e30c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e30e:	4614      	mov	r4, r2
 800e310:	461a      	mov	r2, r3
 800e312:	4b09      	ldr	r3, [pc, #36]	@ (800e338 <__assert_func+0x2c>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	4605      	mov	r5, r0
 800e318:	68d8      	ldr	r0, [r3, #12]
 800e31a:	b954      	cbnz	r4, 800e332 <__assert_func+0x26>
 800e31c:	4b07      	ldr	r3, [pc, #28]	@ (800e33c <__assert_func+0x30>)
 800e31e:	461c      	mov	r4, r3
 800e320:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e324:	9100      	str	r1, [sp, #0]
 800e326:	462b      	mov	r3, r5
 800e328:	4905      	ldr	r1, [pc, #20]	@ (800e340 <__assert_func+0x34>)
 800e32a:	f000 f86f 	bl	800e40c <fiprintf>
 800e32e:	f000 f903 	bl	800e538 <abort>
 800e332:	4b04      	ldr	r3, [pc, #16]	@ (800e344 <__assert_func+0x38>)
 800e334:	e7f4      	b.n	800e320 <__assert_func+0x14>
 800e336:	bf00      	nop
 800e338:	24000020 	.word	0x24000020
 800e33c:	0800f476 	.word	0x0800f476
 800e340:	0800f448 	.word	0x0800f448
 800e344:	0800f43b 	.word	0x0800f43b

0800e348 <_calloc_r>:
 800e348:	b570      	push	{r4, r5, r6, lr}
 800e34a:	fba1 5402 	umull	r5, r4, r1, r2
 800e34e:	b93c      	cbnz	r4, 800e360 <_calloc_r+0x18>
 800e350:	4629      	mov	r1, r5
 800e352:	f7fe ffbb 	bl	800d2cc <_malloc_r>
 800e356:	4606      	mov	r6, r0
 800e358:	b928      	cbnz	r0, 800e366 <_calloc_r+0x1e>
 800e35a:	2600      	movs	r6, #0
 800e35c:	4630      	mov	r0, r6
 800e35e:	bd70      	pop	{r4, r5, r6, pc}
 800e360:	220c      	movs	r2, #12
 800e362:	6002      	str	r2, [r0, #0]
 800e364:	e7f9      	b.n	800e35a <_calloc_r+0x12>
 800e366:	462a      	mov	r2, r5
 800e368:	4621      	mov	r1, r4
 800e36a:	f7fe f8dc 	bl	800c526 <memset>
 800e36e:	e7f5      	b.n	800e35c <_calloc_r+0x14>

0800e370 <__ascii_mbtowc>:
 800e370:	b082      	sub	sp, #8
 800e372:	b901      	cbnz	r1, 800e376 <__ascii_mbtowc+0x6>
 800e374:	a901      	add	r1, sp, #4
 800e376:	b142      	cbz	r2, 800e38a <__ascii_mbtowc+0x1a>
 800e378:	b14b      	cbz	r3, 800e38e <__ascii_mbtowc+0x1e>
 800e37a:	7813      	ldrb	r3, [r2, #0]
 800e37c:	600b      	str	r3, [r1, #0]
 800e37e:	7812      	ldrb	r2, [r2, #0]
 800e380:	1e10      	subs	r0, r2, #0
 800e382:	bf18      	it	ne
 800e384:	2001      	movne	r0, #1
 800e386:	b002      	add	sp, #8
 800e388:	4770      	bx	lr
 800e38a:	4610      	mov	r0, r2
 800e38c:	e7fb      	b.n	800e386 <__ascii_mbtowc+0x16>
 800e38e:	f06f 0001 	mvn.w	r0, #1
 800e392:	e7f8      	b.n	800e386 <__ascii_mbtowc+0x16>

0800e394 <_realloc_r>:
 800e394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e398:	4680      	mov	r8, r0
 800e39a:	4615      	mov	r5, r2
 800e39c:	460c      	mov	r4, r1
 800e39e:	b921      	cbnz	r1, 800e3aa <_realloc_r+0x16>
 800e3a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3a4:	4611      	mov	r1, r2
 800e3a6:	f7fe bf91 	b.w	800d2cc <_malloc_r>
 800e3aa:	b92a      	cbnz	r2, 800e3b8 <_realloc_r+0x24>
 800e3ac:	f7fe ff1a 	bl	800d1e4 <_free_r>
 800e3b0:	2400      	movs	r4, #0
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3b8:	f000 f8c5 	bl	800e546 <_malloc_usable_size_r>
 800e3bc:	4285      	cmp	r5, r0
 800e3be:	4606      	mov	r6, r0
 800e3c0:	d802      	bhi.n	800e3c8 <_realloc_r+0x34>
 800e3c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e3c6:	d8f4      	bhi.n	800e3b2 <_realloc_r+0x1e>
 800e3c8:	4629      	mov	r1, r5
 800e3ca:	4640      	mov	r0, r8
 800e3cc:	f7fe ff7e 	bl	800d2cc <_malloc_r>
 800e3d0:	4607      	mov	r7, r0
 800e3d2:	2800      	cmp	r0, #0
 800e3d4:	d0ec      	beq.n	800e3b0 <_realloc_r+0x1c>
 800e3d6:	42b5      	cmp	r5, r6
 800e3d8:	462a      	mov	r2, r5
 800e3da:	4621      	mov	r1, r4
 800e3dc:	bf28      	it	cs
 800e3de:	4632      	movcs	r2, r6
 800e3e0:	f7ff ff86 	bl	800e2f0 <memcpy>
 800e3e4:	4621      	mov	r1, r4
 800e3e6:	4640      	mov	r0, r8
 800e3e8:	f7fe fefc 	bl	800d1e4 <_free_r>
 800e3ec:	463c      	mov	r4, r7
 800e3ee:	e7e0      	b.n	800e3b2 <_realloc_r+0x1e>

0800e3f0 <__ascii_wctomb>:
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	4608      	mov	r0, r1
 800e3f4:	b141      	cbz	r1, 800e408 <__ascii_wctomb+0x18>
 800e3f6:	2aff      	cmp	r2, #255	@ 0xff
 800e3f8:	d904      	bls.n	800e404 <__ascii_wctomb+0x14>
 800e3fa:	228a      	movs	r2, #138	@ 0x8a
 800e3fc:	601a      	str	r2, [r3, #0]
 800e3fe:	f04f 30ff 	mov.w	r0, #4294967295
 800e402:	4770      	bx	lr
 800e404:	700a      	strb	r2, [r1, #0]
 800e406:	2001      	movs	r0, #1
 800e408:	4770      	bx	lr
	...

0800e40c <fiprintf>:
 800e40c:	b40e      	push	{r1, r2, r3}
 800e40e:	b503      	push	{r0, r1, lr}
 800e410:	4601      	mov	r1, r0
 800e412:	ab03      	add	r3, sp, #12
 800e414:	4805      	ldr	r0, [pc, #20]	@ (800e42c <fiprintf+0x20>)
 800e416:	f853 2b04 	ldr.w	r2, [r3], #4
 800e41a:	6800      	ldr	r0, [r0, #0]
 800e41c:	9301      	str	r3, [sp, #4]
 800e41e:	f7ff fce5 	bl	800ddec <_vfiprintf_r>
 800e422:	b002      	add	sp, #8
 800e424:	f85d eb04 	ldr.w	lr, [sp], #4
 800e428:	b003      	add	sp, #12
 800e42a:	4770      	bx	lr
 800e42c:	24000020 	.word	0x24000020

0800e430 <__swhatbuf_r>:
 800e430:	b570      	push	{r4, r5, r6, lr}
 800e432:	460c      	mov	r4, r1
 800e434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e438:	2900      	cmp	r1, #0
 800e43a:	b096      	sub	sp, #88	@ 0x58
 800e43c:	4615      	mov	r5, r2
 800e43e:	461e      	mov	r6, r3
 800e440:	da0d      	bge.n	800e45e <__swhatbuf_r+0x2e>
 800e442:	89a3      	ldrh	r3, [r4, #12]
 800e444:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e448:	f04f 0100 	mov.w	r1, #0
 800e44c:	bf14      	ite	ne
 800e44e:	2340      	movne	r3, #64	@ 0x40
 800e450:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e454:	2000      	movs	r0, #0
 800e456:	6031      	str	r1, [r6, #0]
 800e458:	602b      	str	r3, [r5, #0]
 800e45a:	b016      	add	sp, #88	@ 0x58
 800e45c:	bd70      	pop	{r4, r5, r6, pc}
 800e45e:	466a      	mov	r2, sp
 800e460:	f000 f848 	bl	800e4f4 <_fstat_r>
 800e464:	2800      	cmp	r0, #0
 800e466:	dbec      	blt.n	800e442 <__swhatbuf_r+0x12>
 800e468:	9901      	ldr	r1, [sp, #4]
 800e46a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e46e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e472:	4259      	negs	r1, r3
 800e474:	4159      	adcs	r1, r3
 800e476:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e47a:	e7eb      	b.n	800e454 <__swhatbuf_r+0x24>

0800e47c <__smakebuf_r>:
 800e47c:	898b      	ldrh	r3, [r1, #12]
 800e47e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e480:	079d      	lsls	r5, r3, #30
 800e482:	4606      	mov	r6, r0
 800e484:	460c      	mov	r4, r1
 800e486:	d507      	bpl.n	800e498 <__smakebuf_r+0x1c>
 800e488:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e48c:	6023      	str	r3, [r4, #0]
 800e48e:	6123      	str	r3, [r4, #16]
 800e490:	2301      	movs	r3, #1
 800e492:	6163      	str	r3, [r4, #20]
 800e494:	b003      	add	sp, #12
 800e496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e498:	ab01      	add	r3, sp, #4
 800e49a:	466a      	mov	r2, sp
 800e49c:	f7ff ffc8 	bl	800e430 <__swhatbuf_r>
 800e4a0:	9f00      	ldr	r7, [sp, #0]
 800e4a2:	4605      	mov	r5, r0
 800e4a4:	4639      	mov	r1, r7
 800e4a6:	4630      	mov	r0, r6
 800e4a8:	f7fe ff10 	bl	800d2cc <_malloc_r>
 800e4ac:	b948      	cbnz	r0, 800e4c2 <__smakebuf_r+0x46>
 800e4ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4b2:	059a      	lsls	r2, r3, #22
 800e4b4:	d4ee      	bmi.n	800e494 <__smakebuf_r+0x18>
 800e4b6:	f023 0303 	bic.w	r3, r3, #3
 800e4ba:	f043 0302 	orr.w	r3, r3, #2
 800e4be:	81a3      	strh	r3, [r4, #12]
 800e4c0:	e7e2      	b.n	800e488 <__smakebuf_r+0xc>
 800e4c2:	89a3      	ldrh	r3, [r4, #12]
 800e4c4:	6020      	str	r0, [r4, #0]
 800e4c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4ca:	81a3      	strh	r3, [r4, #12]
 800e4cc:	9b01      	ldr	r3, [sp, #4]
 800e4ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e4d2:	b15b      	cbz	r3, 800e4ec <__smakebuf_r+0x70>
 800e4d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4d8:	4630      	mov	r0, r6
 800e4da:	f000 f81d 	bl	800e518 <_isatty_r>
 800e4de:	b128      	cbz	r0, 800e4ec <__smakebuf_r+0x70>
 800e4e0:	89a3      	ldrh	r3, [r4, #12]
 800e4e2:	f023 0303 	bic.w	r3, r3, #3
 800e4e6:	f043 0301 	orr.w	r3, r3, #1
 800e4ea:	81a3      	strh	r3, [r4, #12]
 800e4ec:	89a3      	ldrh	r3, [r4, #12]
 800e4ee:	431d      	orrs	r5, r3
 800e4f0:	81a5      	strh	r5, [r4, #12]
 800e4f2:	e7cf      	b.n	800e494 <__smakebuf_r+0x18>

0800e4f4 <_fstat_r>:
 800e4f4:	b538      	push	{r3, r4, r5, lr}
 800e4f6:	4d07      	ldr	r5, [pc, #28]	@ (800e514 <_fstat_r+0x20>)
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	4604      	mov	r4, r0
 800e4fc:	4608      	mov	r0, r1
 800e4fe:	4611      	mov	r1, r2
 800e500:	602b      	str	r3, [r5, #0]
 800e502:	f7f4 fbc7 	bl	8002c94 <_fstat>
 800e506:	1c43      	adds	r3, r0, #1
 800e508:	d102      	bne.n	800e510 <_fstat_r+0x1c>
 800e50a:	682b      	ldr	r3, [r5, #0]
 800e50c:	b103      	cbz	r3, 800e510 <_fstat_r+0x1c>
 800e50e:	6023      	str	r3, [r4, #0]
 800e510:	bd38      	pop	{r3, r4, r5, pc}
 800e512:	bf00      	nop
 800e514:	2400277c 	.word	0x2400277c

0800e518 <_isatty_r>:
 800e518:	b538      	push	{r3, r4, r5, lr}
 800e51a:	4d06      	ldr	r5, [pc, #24]	@ (800e534 <_isatty_r+0x1c>)
 800e51c:	2300      	movs	r3, #0
 800e51e:	4604      	mov	r4, r0
 800e520:	4608      	mov	r0, r1
 800e522:	602b      	str	r3, [r5, #0]
 800e524:	f7f4 fbc6 	bl	8002cb4 <_isatty>
 800e528:	1c43      	adds	r3, r0, #1
 800e52a:	d102      	bne.n	800e532 <_isatty_r+0x1a>
 800e52c:	682b      	ldr	r3, [r5, #0]
 800e52e:	b103      	cbz	r3, 800e532 <_isatty_r+0x1a>
 800e530:	6023      	str	r3, [r4, #0]
 800e532:	bd38      	pop	{r3, r4, r5, pc}
 800e534:	2400277c 	.word	0x2400277c

0800e538 <abort>:
 800e538:	b508      	push	{r3, lr}
 800e53a:	2006      	movs	r0, #6
 800e53c:	f000 f834 	bl	800e5a8 <raise>
 800e540:	2001      	movs	r0, #1
 800e542:	f7f4 fb57 	bl	8002bf4 <_exit>

0800e546 <_malloc_usable_size_r>:
 800e546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e54a:	1f18      	subs	r0, r3, #4
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	bfbc      	itt	lt
 800e550:	580b      	ldrlt	r3, [r1, r0]
 800e552:	18c0      	addlt	r0, r0, r3
 800e554:	4770      	bx	lr

0800e556 <_raise_r>:
 800e556:	291f      	cmp	r1, #31
 800e558:	b538      	push	{r3, r4, r5, lr}
 800e55a:	4605      	mov	r5, r0
 800e55c:	460c      	mov	r4, r1
 800e55e:	d904      	bls.n	800e56a <_raise_r+0x14>
 800e560:	2316      	movs	r3, #22
 800e562:	6003      	str	r3, [r0, #0]
 800e564:	f04f 30ff 	mov.w	r0, #4294967295
 800e568:	bd38      	pop	{r3, r4, r5, pc}
 800e56a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e56c:	b112      	cbz	r2, 800e574 <_raise_r+0x1e>
 800e56e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e572:	b94b      	cbnz	r3, 800e588 <_raise_r+0x32>
 800e574:	4628      	mov	r0, r5
 800e576:	f000 f831 	bl	800e5dc <_getpid_r>
 800e57a:	4622      	mov	r2, r4
 800e57c:	4601      	mov	r1, r0
 800e57e:	4628      	mov	r0, r5
 800e580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e584:	f000 b818 	b.w	800e5b8 <_kill_r>
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d00a      	beq.n	800e5a2 <_raise_r+0x4c>
 800e58c:	1c59      	adds	r1, r3, #1
 800e58e:	d103      	bne.n	800e598 <_raise_r+0x42>
 800e590:	2316      	movs	r3, #22
 800e592:	6003      	str	r3, [r0, #0]
 800e594:	2001      	movs	r0, #1
 800e596:	e7e7      	b.n	800e568 <_raise_r+0x12>
 800e598:	2100      	movs	r1, #0
 800e59a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e59e:	4620      	mov	r0, r4
 800e5a0:	4798      	blx	r3
 800e5a2:	2000      	movs	r0, #0
 800e5a4:	e7e0      	b.n	800e568 <_raise_r+0x12>
	...

0800e5a8 <raise>:
 800e5a8:	4b02      	ldr	r3, [pc, #8]	@ (800e5b4 <raise+0xc>)
 800e5aa:	4601      	mov	r1, r0
 800e5ac:	6818      	ldr	r0, [r3, #0]
 800e5ae:	f7ff bfd2 	b.w	800e556 <_raise_r>
 800e5b2:	bf00      	nop
 800e5b4:	24000020 	.word	0x24000020

0800e5b8 <_kill_r>:
 800e5b8:	b538      	push	{r3, r4, r5, lr}
 800e5ba:	4d07      	ldr	r5, [pc, #28]	@ (800e5d8 <_kill_r+0x20>)
 800e5bc:	2300      	movs	r3, #0
 800e5be:	4604      	mov	r4, r0
 800e5c0:	4608      	mov	r0, r1
 800e5c2:	4611      	mov	r1, r2
 800e5c4:	602b      	str	r3, [r5, #0]
 800e5c6:	f7f4 fb05 	bl	8002bd4 <_kill>
 800e5ca:	1c43      	adds	r3, r0, #1
 800e5cc:	d102      	bne.n	800e5d4 <_kill_r+0x1c>
 800e5ce:	682b      	ldr	r3, [r5, #0]
 800e5d0:	b103      	cbz	r3, 800e5d4 <_kill_r+0x1c>
 800e5d2:	6023      	str	r3, [r4, #0]
 800e5d4:	bd38      	pop	{r3, r4, r5, pc}
 800e5d6:	bf00      	nop
 800e5d8:	2400277c 	.word	0x2400277c

0800e5dc <_getpid_r>:
 800e5dc:	f7f4 baf2 	b.w	8002bc4 <_getpid>

0800e5e0 <sin>:
 800e5e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5e2:	eeb0 7b40 	vmov.f64	d7, d0
 800e5e6:	ee17 3a90 	vmov	r3, s15
 800e5ea:	4a21      	ldr	r2, [pc, #132]	@ (800e670 <sin+0x90>)
 800e5ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e5f0:	4293      	cmp	r3, r2
 800e5f2:	d807      	bhi.n	800e604 <sin+0x24>
 800e5f4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800e668 <sin+0x88>
 800e5f8:	2000      	movs	r0, #0
 800e5fa:	b005      	add	sp, #20
 800e5fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e600:	f000 b8a2 	b.w	800e748 <__kernel_sin>
 800e604:	4a1b      	ldr	r2, [pc, #108]	@ (800e674 <sin+0x94>)
 800e606:	4293      	cmp	r3, r2
 800e608:	d904      	bls.n	800e614 <sin+0x34>
 800e60a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e60e:	b005      	add	sp, #20
 800e610:	f85d fb04 	ldr.w	pc, [sp], #4
 800e614:	4668      	mov	r0, sp
 800e616:	f000 f8ef 	bl	800e7f8 <__ieee754_rem_pio2>
 800e61a:	f000 0003 	and.w	r0, r0, #3
 800e61e:	2801      	cmp	r0, #1
 800e620:	d00a      	beq.n	800e638 <sin+0x58>
 800e622:	2802      	cmp	r0, #2
 800e624:	d00f      	beq.n	800e646 <sin+0x66>
 800e626:	b9c0      	cbnz	r0, 800e65a <sin+0x7a>
 800e628:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e62c:	ed9d 0b00 	vldr	d0, [sp]
 800e630:	2001      	movs	r0, #1
 800e632:	f000 f889 	bl	800e748 <__kernel_sin>
 800e636:	e7ea      	b.n	800e60e <sin+0x2e>
 800e638:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e63c:	ed9d 0b00 	vldr	d0, [sp]
 800e640:	f000 f81a 	bl	800e678 <__kernel_cos>
 800e644:	e7e3      	b.n	800e60e <sin+0x2e>
 800e646:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e64a:	ed9d 0b00 	vldr	d0, [sp]
 800e64e:	2001      	movs	r0, #1
 800e650:	f000 f87a 	bl	800e748 <__kernel_sin>
 800e654:	eeb1 0b40 	vneg.f64	d0, d0
 800e658:	e7d9      	b.n	800e60e <sin+0x2e>
 800e65a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e65e:	ed9d 0b00 	vldr	d0, [sp]
 800e662:	f000 f809 	bl	800e678 <__kernel_cos>
 800e666:	e7f5      	b.n	800e654 <sin+0x74>
	...
 800e670:	3fe921fb 	.word	0x3fe921fb
 800e674:	7fefffff 	.word	0x7fefffff

0800e678 <__kernel_cos>:
 800e678:	eeb0 5b40 	vmov.f64	d5, d0
 800e67c:	ee15 1a90 	vmov	r1, s11
 800e680:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800e684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800e688:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800e68c:	d204      	bcs.n	800e698 <__kernel_cos+0x20>
 800e68e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800e692:	ee17 3a90 	vmov	r3, s15
 800e696:	b343      	cbz	r3, 800e6ea <__kernel_cos+0x72>
 800e698:	ee25 6b05 	vmul.f64	d6, d5, d5
 800e69c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800e6a0:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800e710 <__kernel_cos+0x98>
 800e6a4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800e718 <__kernel_cos+0xa0>
 800e6a8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e6ac:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800e720 <__kernel_cos+0xa8>
 800e6b0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e6b4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800e728 <__kernel_cos+0xb0>
 800e6b8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800e6bc:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800e730 <__kernel_cos+0xb8>
 800e6c0:	4b1f      	ldr	r3, [pc, #124]	@ (800e740 <__kernel_cos+0xc8>)
 800e6c2:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e6c6:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800e738 <__kernel_cos+0xc0>
 800e6ca:	4299      	cmp	r1, r3
 800e6cc:	eea7 4b06 	vfma.f64	d4, d7, d6
 800e6d0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800e6d4:	ee24 4b06 	vmul.f64	d4, d4, d6
 800e6d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e6dc:	eea6 1b04 	vfma.f64	d1, d6, d4
 800e6e0:	d804      	bhi.n	800e6ec <__kernel_cos+0x74>
 800e6e2:	ee37 7b41 	vsub.f64	d7, d7, d1
 800e6e6:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e6ea:	4770      	bx	lr
 800e6ec:	4b15      	ldr	r3, [pc, #84]	@ (800e744 <__kernel_cos+0xcc>)
 800e6ee:	4299      	cmp	r1, r3
 800e6f0:	d809      	bhi.n	800e706 <__kernel_cos+0x8e>
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800e6f8:	ec43 2b16 	vmov	d6, r2, r3
 800e6fc:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e700:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e704:	e7ed      	b.n	800e6e2 <__kernel_cos+0x6a>
 800e706:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800e70a:	e7f7      	b.n	800e6fc <__kernel_cos+0x84>
 800e70c:	f3af 8000 	nop.w
 800e710:	be8838d4 	.word	0xbe8838d4
 800e714:	bda8fae9 	.word	0xbda8fae9
 800e718:	bdb4b1c4 	.word	0xbdb4b1c4
 800e71c:	3e21ee9e 	.word	0x3e21ee9e
 800e720:	809c52ad 	.word	0x809c52ad
 800e724:	be927e4f 	.word	0xbe927e4f
 800e728:	19cb1590 	.word	0x19cb1590
 800e72c:	3efa01a0 	.word	0x3efa01a0
 800e730:	16c15177 	.word	0x16c15177
 800e734:	bf56c16c 	.word	0xbf56c16c
 800e738:	5555554c 	.word	0x5555554c
 800e73c:	3fa55555 	.word	0x3fa55555
 800e740:	3fd33332 	.word	0x3fd33332
 800e744:	3fe90000 	.word	0x3fe90000

0800e748 <__kernel_sin>:
 800e748:	ee10 3a90 	vmov	r3, s1
 800e74c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e750:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800e754:	d204      	bcs.n	800e760 <__kernel_sin+0x18>
 800e756:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800e75a:	ee17 3a90 	vmov	r3, s15
 800e75e:	b35b      	cbz	r3, 800e7b8 <__kernel_sin+0x70>
 800e760:	ee20 6b00 	vmul.f64	d6, d0, d0
 800e764:	ee20 5b06 	vmul.f64	d5, d0, d6
 800e768:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800e7c0 <__kernel_sin+0x78>
 800e76c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800e7c8 <__kernel_sin+0x80>
 800e770:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e774:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800e7d0 <__kernel_sin+0x88>
 800e778:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e77c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800e7d8 <__kernel_sin+0x90>
 800e780:	eea7 4b06 	vfma.f64	d4, d7, d6
 800e784:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800e7e0 <__kernel_sin+0x98>
 800e788:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e78c:	b930      	cbnz	r0, 800e79c <__kernel_sin+0x54>
 800e78e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800e7e8 <__kernel_sin+0xa0>
 800e792:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e796:	eea4 0b05 	vfma.f64	d0, d4, d5
 800e79a:	4770      	bx	lr
 800e79c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800e7a0:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800e7a4:	eea1 7b04 	vfma.f64	d7, d1, d4
 800e7a8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800e7ac:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800e7f0 <__kernel_sin+0xa8>
 800e7b0:	eea5 1b07 	vfma.f64	d1, d5, d7
 800e7b4:	ee30 0b41 	vsub.f64	d0, d0, d1
 800e7b8:	4770      	bx	lr
 800e7ba:	bf00      	nop
 800e7bc:	f3af 8000 	nop.w
 800e7c0:	5acfd57c 	.word	0x5acfd57c
 800e7c4:	3de5d93a 	.word	0x3de5d93a
 800e7c8:	8a2b9ceb 	.word	0x8a2b9ceb
 800e7cc:	be5ae5e6 	.word	0xbe5ae5e6
 800e7d0:	57b1fe7d 	.word	0x57b1fe7d
 800e7d4:	3ec71de3 	.word	0x3ec71de3
 800e7d8:	19c161d5 	.word	0x19c161d5
 800e7dc:	bf2a01a0 	.word	0xbf2a01a0
 800e7e0:	1110f8a6 	.word	0x1110f8a6
 800e7e4:	3f811111 	.word	0x3f811111
 800e7e8:	55555549 	.word	0x55555549
 800e7ec:	bfc55555 	.word	0xbfc55555
 800e7f0:	55555549 	.word	0x55555549
 800e7f4:	3fc55555 	.word	0x3fc55555

0800e7f8 <__ieee754_rem_pio2>:
 800e7f8:	b570      	push	{r4, r5, r6, lr}
 800e7fa:	eeb0 7b40 	vmov.f64	d7, d0
 800e7fe:	ee17 5a90 	vmov	r5, s15
 800e802:	4b99      	ldr	r3, [pc, #612]	@ (800ea68 <__ieee754_rem_pio2+0x270>)
 800e804:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800e808:	429e      	cmp	r6, r3
 800e80a:	b088      	sub	sp, #32
 800e80c:	4604      	mov	r4, r0
 800e80e:	d807      	bhi.n	800e820 <__ieee754_rem_pio2+0x28>
 800e810:	2200      	movs	r2, #0
 800e812:	2300      	movs	r3, #0
 800e814:	ed84 0b00 	vstr	d0, [r4]
 800e818:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e81c:	2000      	movs	r0, #0
 800e81e:	e01b      	b.n	800e858 <__ieee754_rem_pio2+0x60>
 800e820:	4b92      	ldr	r3, [pc, #584]	@ (800ea6c <__ieee754_rem_pio2+0x274>)
 800e822:	429e      	cmp	r6, r3
 800e824:	d83b      	bhi.n	800e89e <__ieee754_rem_pio2+0xa6>
 800e826:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800e82a:	2d00      	cmp	r5, #0
 800e82c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800ea28 <__ieee754_rem_pio2+0x230>
 800e830:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800e834:	dd19      	ble.n	800e86a <__ieee754_rem_pio2+0x72>
 800e836:	ee30 7b46 	vsub.f64	d7, d0, d6
 800e83a:	429e      	cmp	r6, r3
 800e83c:	d00e      	beq.n	800e85c <__ieee754_rem_pio2+0x64>
 800e83e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800ea30 <__ieee754_rem_pio2+0x238>
 800e842:	ee37 6b45 	vsub.f64	d6, d7, d5
 800e846:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e84a:	ed84 6b00 	vstr	d6, [r4]
 800e84e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e852:	ed84 7b02 	vstr	d7, [r4, #8]
 800e856:	2001      	movs	r0, #1
 800e858:	b008      	add	sp, #32
 800e85a:	bd70      	pop	{r4, r5, r6, pc}
 800e85c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800ea38 <__ieee754_rem_pio2+0x240>
 800e860:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800ea40 <__ieee754_rem_pio2+0x248>
 800e864:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e868:	e7eb      	b.n	800e842 <__ieee754_rem_pio2+0x4a>
 800e86a:	429e      	cmp	r6, r3
 800e86c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800e870:	d00e      	beq.n	800e890 <__ieee754_rem_pio2+0x98>
 800e872:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800ea30 <__ieee754_rem_pio2+0x238>
 800e876:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e87a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e87e:	ed84 6b00 	vstr	d6, [r4]
 800e882:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e886:	f04f 30ff 	mov.w	r0, #4294967295
 800e88a:	ed84 7b02 	vstr	d7, [r4, #8]
 800e88e:	e7e3      	b.n	800e858 <__ieee754_rem_pio2+0x60>
 800e890:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800ea38 <__ieee754_rem_pio2+0x240>
 800e894:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800ea40 <__ieee754_rem_pio2+0x248>
 800e898:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e89c:	e7eb      	b.n	800e876 <__ieee754_rem_pio2+0x7e>
 800e89e:	4b74      	ldr	r3, [pc, #464]	@ (800ea70 <__ieee754_rem_pio2+0x278>)
 800e8a0:	429e      	cmp	r6, r3
 800e8a2:	d870      	bhi.n	800e986 <__ieee754_rem_pio2+0x18e>
 800e8a4:	f000 f8ec 	bl	800ea80 <fabs>
 800e8a8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800e8ac:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ea48 <__ieee754_rem_pio2+0x250>
 800e8b0:	eea0 7b06 	vfma.f64	d7, d0, d6
 800e8b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800e8b8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800e8bc:	ee17 0a90 	vmov	r0, s15
 800e8c0:	eeb1 4b45 	vneg.f64	d4, d5
 800e8c4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800ea28 <__ieee754_rem_pio2+0x230>
 800e8c8:	eea5 0b47 	vfms.f64	d0, d5, d7
 800e8cc:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800ea30 <__ieee754_rem_pio2+0x238>
 800e8d0:	281f      	cmp	r0, #31
 800e8d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e8d6:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e8da:	dc05      	bgt.n	800e8e8 <__ieee754_rem_pio2+0xf0>
 800e8dc:	4b65      	ldr	r3, [pc, #404]	@ (800ea74 <__ieee754_rem_pio2+0x27c>)
 800e8de:	1e42      	subs	r2, r0, #1
 800e8e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8e4:	42b3      	cmp	r3, r6
 800e8e6:	d109      	bne.n	800e8fc <__ieee754_rem_pio2+0x104>
 800e8e8:	ee16 3a90 	vmov	r3, s13
 800e8ec:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e8f0:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800e8f4:	2b10      	cmp	r3, #16
 800e8f6:	ea4f 5226 	mov.w	r2, r6, asr #20
 800e8fa:	dc02      	bgt.n	800e902 <__ieee754_rem_pio2+0x10a>
 800e8fc:	ed84 6b00 	vstr	d6, [r4]
 800e900:	e01a      	b.n	800e938 <__ieee754_rem_pio2+0x140>
 800e902:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800ea38 <__ieee754_rem_pio2+0x240>
 800e906:	eeb0 6b40 	vmov.f64	d6, d0
 800e90a:	eea4 6b03 	vfma.f64	d6, d4, d3
 800e90e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800e912:	eea4 7b03 	vfma.f64	d7, d4, d3
 800e916:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800ea40 <__ieee754_rem_pio2+0x248>
 800e91a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800e91e:	ee36 3b47 	vsub.f64	d3, d6, d7
 800e922:	ee13 3a90 	vmov	r3, s7
 800e926:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e92a:	1ad3      	subs	r3, r2, r3
 800e92c:	2b31      	cmp	r3, #49	@ 0x31
 800e92e:	dc17      	bgt.n	800e960 <__ieee754_rem_pio2+0x168>
 800e930:	eeb0 0b46 	vmov.f64	d0, d6
 800e934:	ed84 3b00 	vstr	d3, [r4]
 800e938:	ed94 6b00 	vldr	d6, [r4]
 800e93c:	2d00      	cmp	r5, #0
 800e93e:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e942:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e946:	ed84 0b02 	vstr	d0, [r4, #8]
 800e94a:	da85      	bge.n	800e858 <__ieee754_rem_pio2+0x60>
 800e94c:	eeb1 6b46 	vneg.f64	d6, d6
 800e950:	eeb1 0b40 	vneg.f64	d0, d0
 800e954:	ed84 6b00 	vstr	d6, [r4]
 800e958:	ed84 0b02 	vstr	d0, [r4, #8]
 800e95c:	4240      	negs	r0, r0
 800e95e:	e77b      	b.n	800e858 <__ieee754_rem_pio2+0x60>
 800e960:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800ea50 <__ieee754_rem_pio2+0x258>
 800e964:	eeb0 0b46 	vmov.f64	d0, d6
 800e968:	eea4 0b07 	vfma.f64	d0, d4, d7
 800e96c:	ee36 6b40 	vsub.f64	d6, d6, d0
 800e970:	eea4 6b07 	vfma.f64	d6, d4, d7
 800e974:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800ea58 <__ieee754_rem_pio2+0x260>
 800e978:	eeb0 7b46 	vmov.f64	d7, d6
 800e97c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800e980:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e984:	e7ba      	b.n	800e8fc <__ieee754_rem_pio2+0x104>
 800e986:	4b3c      	ldr	r3, [pc, #240]	@ (800ea78 <__ieee754_rem_pio2+0x280>)
 800e988:	429e      	cmp	r6, r3
 800e98a:	d906      	bls.n	800e99a <__ieee754_rem_pio2+0x1a2>
 800e98c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800e990:	ed80 7b02 	vstr	d7, [r0, #8]
 800e994:	ed80 7b00 	vstr	d7, [r0]
 800e998:	e740      	b.n	800e81c <__ieee754_rem_pio2+0x24>
 800e99a:	ee10 3a10 	vmov	r3, s0
 800e99e:	1532      	asrs	r2, r6, #20
 800e9a0:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800e9aa:	ec41 0b17 	vmov	d7, r0, r1
 800e9ae:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e9b2:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800ea60 <__ieee754_rem_pio2+0x268>
 800e9b6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e9ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e9be:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e9c2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e9c6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e9ca:	a808      	add	r0, sp, #32
 800e9cc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e9d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e9d4:	ed8d 6b04 	vstr	d6, [sp, #16]
 800e9d8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e9dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e9e0:	2103      	movs	r1, #3
 800e9e2:	ed30 7b02 	vldmdb	r0!, {d7}
 800e9e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ee:	460b      	mov	r3, r1
 800e9f0:	f101 31ff 	add.w	r1, r1, #4294967295
 800e9f4:	d0f5      	beq.n	800e9e2 <__ieee754_rem_pio2+0x1ea>
 800e9f6:	4921      	ldr	r1, [pc, #132]	@ (800ea7c <__ieee754_rem_pio2+0x284>)
 800e9f8:	9101      	str	r1, [sp, #4]
 800e9fa:	2102      	movs	r1, #2
 800e9fc:	9100      	str	r1, [sp, #0]
 800e9fe:	a802      	add	r0, sp, #8
 800ea00:	4621      	mov	r1, r4
 800ea02:	f000 f845 	bl	800ea90 <__kernel_rem_pio2>
 800ea06:	2d00      	cmp	r5, #0
 800ea08:	f6bf af26 	bge.w	800e858 <__ieee754_rem_pio2+0x60>
 800ea0c:	ed94 7b00 	vldr	d7, [r4]
 800ea10:	eeb1 7b47 	vneg.f64	d7, d7
 800ea14:	ed84 7b00 	vstr	d7, [r4]
 800ea18:	ed94 7b02 	vldr	d7, [r4, #8]
 800ea1c:	eeb1 7b47 	vneg.f64	d7, d7
 800ea20:	ed84 7b02 	vstr	d7, [r4, #8]
 800ea24:	e79a      	b.n	800e95c <__ieee754_rem_pio2+0x164>
 800ea26:	bf00      	nop
 800ea28:	54400000 	.word	0x54400000
 800ea2c:	3ff921fb 	.word	0x3ff921fb
 800ea30:	1a626331 	.word	0x1a626331
 800ea34:	3dd0b461 	.word	0x3dd0b461
 800ea38:	1a600000 	.word	0x1a600000
 800ea3c:	3dd0b461 	.word	0x3dd0b461
 800ea40:	2e037073 	.word	0x2e037073
 800ea44:	3ba3198a 	.word	0x3ba3198a
 800ea48:	6dc9c883 	.word	0x6dc9c883
 800ea4c:	3fe45f30 	.word	0x3fe45f30
 800ea50:	2e000000 	.word	0x2e000000
 800ea54:	3ba3198a 	.word	0x3ba3198a
 800ea58:	252049c1 	.word	0x252049c1
 800ea5c:	397b839a 	.word	0x397b839a
 800ea60:	00000000 	.word	0x00000000
 800ea64:	41700000 	.word	0x41700000
 800ea68:	3fe921fb 	.word	0x3fe921fb
 800ea6c:	4002d97b 	.word	0x4002d97b
 800ea70:	413921fb 	.word	0x413921fb
 800ea74:	0800f578 	.word	0x0800f578
 800ea78:	7fefffff 	.word	0x7fefffff
 800ea7c:	0800f5f8 	.word	0x0800f5f8

0800ea80 <fabs>:
 800ea80:	ec51 0b10 	vmov	r0, r1, d0
 800ea84:	4602      	mov	r2, r0
 800ea86:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ea8a:	ec43 2b10 	vmov	d0, r2, r3
 800ea8e:	4770      	bx	lr

0800ea90 <__kernel_rem_pio2>:
 800ea90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea94:	ed2d 8b06 	vpush	{d8-d10}
 800ea98:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800ea9c:	469b      	mov	fp, r3
 800ea9e:	9001      	str	r0, [sp, #4]
 800eaa0:	4bbb      	ldr	r3, [pc, #748]	@ (800ed90 <__kernel_rem_pio2+0x300>)
 800eaa2:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800eaa4:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800eaa8:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800eaac:	f112 0f14 	cmn.w	r2, #20
 800eab0:	bfa8      	it	ge
 800eab2:	1ed3      	subge	r3, r2, #3
 800eab4:	f10b 3aff 	add.w	sl, fp, #4294967295
 800eab8:	bfb8      	it	lt
 800eaba:	2300      	movlt	r3, #0
 800eabc:	f06f 0517 	mvn.w	r5, #23
 800eac0:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800ed78 <__kernel_rem_pio2+0x2e8>
 800eac4:	bfa4      	itt	ge
 800eac6:	2018      	movge	r0, #24
 800eac8:	fb93 f3f0 	sdivge	r3, r3, r0
 800eacc:	fb03 5505 	mla	r5, r3, r5, r5
 800ead0:	eba3 040a 	sub.w	r4, r3, sl
 800ead4:	4415      	add	r5, r2
 800ead6:	460f      	mov	r7, r1
 800ead8:	eb09 060a 	add.w	r6, r9, sl
 800eadc:	a81a      	add	r0, sp, #104	@ 0x68
 800eade:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800eae2:	2200      	movs	r2, #0
 800eae4:	42b2      	cmp	r2, r6
 800eae6:	dd0e      	ble.n	800eb06 <__kernel_rem_pio2+0x76>
 800eae8:	aa1a      	add	r2, sp, #104	@ 0x68
 800eaea:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800eaee:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800eaf2:	2600      	movs	r6, #0
 800eaf4:	454e      	cmp	r6, r9
 800eaf6:	dc25      	bgt.n	800eb44 <__kernel_rem_pio2+0xb4>
 800eaf8:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800ed78 <__kernel_rem_pio2+0x2e8>
 800eafc:	f8dd c004 	ldr.w	ip, [sp, #4]
 800eb00:	4614      	mov	r4, r2
 800eb02:	2000      	movs	r0, #0
 800eb04:	e015      	b.n	800eb32 <__kernel_rem_pio2+0xa2>
 800eb06:	42d4      	cmn	r4, r2
 800eb08:	d409      	bmi.n	800eb1e <__kernel_rem_pio2+0x8e>
 800eb0a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800eb0e:	ee07 1a90 	vmov	s15, r1
 800eb12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800eb16:	eca0 7b02 	vstmia	r0!, {d7}
 800eb1a:	3201      	adds	r2, #1
 800eb1c:	e7e2      	b.n	800eae4 <__kernel_rem_pio2+0x54>
 800eb1e:	eeb0 7b46 	vmov.f64	d7, d6
 800eb22:	e7f8      	b.n	800eb16 <__kernel_rem_pio2+0x86>
 800eb24:	ecbc 5b02 	vldmia	ip!, {d5}
 800eb28:	ed94 6b00 	vldr	d6, [r4]
 800eb2c:	3001      	adds	r0, #1
 800eb2e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800eb32:	4550      	cmp	r0, sl
 800eb34:	f1a4 0408 	sub.w	r4, r4, #8
 800eb38:	ddf4      	ble.n	800eb24 <__kernel_rem_pio2+0x94>
 800eb3a:	ecae 7b02 	vstmia	lr!, {d7}
 800eb3e:	3601      	adds	r6, #1
 800eb40:	3208      	adds	r2, #8
 800eb42:	e7d7      	b.n	800eaf4 <__kernel_rem_pio2+0x64>
 800eb44:	aa06      	add	r2, sp, #24
 800eb46:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800ed80 <__kernel_rem_pio2+0x2f0>
 800eb4a:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800ed88 <__kernel_rem_pio2+0x2f8>
 800eb4e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800eb52:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800eb56:	9203      	str	r2, [sp, #12]
 800eb58:	9302      	str	r3, [sp, #8]
 800eb5a:	464c      	mov	r4, r9
 800eb5c:	00e3      	lsls	r3, r4, #3
 800eb5e:	9304      	str	r3, [sp, #16]
 800eb60:	ab92      	add	r3, sp, #584	@ 0x248
 800eb62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eb66:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800eb6a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800eb6c:	ab06      	add	r3, sp, #24
 800eb6e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800eb72:	461e      	mov	r6, r3
 800eb74:	4620      	mov	r0, r4
 800eb76:	2800      	cmp	r0, #0
 800eb78:	f1a2 0208 	sub.w	r2, r2, #8
 800eb7c:	dc4a      	bgt.n	800ec14 <__kernel_rem_pio2+0x184>
 800eb7e:	4628      	mov	r0, r5
 800eb80:	9305      	str	r3, [sp, #20]
 800eb82:	f000 fa01 	bl	800ef88 <scalbn>
 800eb86:	eeb0 8b40 	vmov.f64	d8, d0
 800eb8a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800eb8e:	ee28 0b00 	vmul.f64	d0, d8, d0
 800eb92:	f000 fa79 	bl	800f088 <floor>
 800eb96:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800eb9a:	eea0 8b47 	vfms.f64	d8, d0, d7
 800eb9e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800eba2:	2d00      	cmp	r5, #0
 800eba4:	ee17 8a90 	vmov	r8, s15
 800eba8:	9b05      	ldr	r3, [sp, #20]
 800ebaa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ebae:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ebb2:	dd41      	ble.n	800ec38 <__kernel_rem_pio2+0x1a8>
 800ebb4:	1e60      	subs	r0, r4, #1
 800ebb6:	aa06      	add	r2, sp, #24
 800ebb8:	f1c5 0c18 	rsb	ip, r5, #24
 800ebbc:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800ebc0:	fa46 f20c 	asr.w	r2, r6, ip
 800ebc4:	4490      	add	r8, r2
 800ebc6:	fa02 f20c 	lsl.w	r2, r2, ip
 800ebca:	1ab6      	subs	r6, r6, r2
 800ebcc:	aa06      	add	r2, sp, #24
 800ebce:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800ebd2:	f1c5 0217 	rsb	r2, r5, #23
 800ebd6:	4116      	asrs	r6, r2
 800ebd8:	2e00      	cmp	r6, #0
 800ebda:	dd3c      	ble.n	800ec56 <__kernel_rem_pio2+0x1c6>
 800ebdc:	f04f 0c00 	mov.w	ip, #0
 800ebe0:	f108 0801 	add.w	r8, r8, #1
 800ebe4:	4660      	mov	r0, ip
 800ebe6:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800ebea:	4564      	cmp	r4, ip
 800ebec:	dc66      	bgt.n	800ecbc <__kernel_rem_pio2+0x22c>
 800ebee:	2d00      	cmp	r5, #0
 800ebf0:	dd03      	ble.n	800ebfa <__kernel_rem_pio2+0x16a>
 800ebf2:	2d01      	cmp	r5, #1
 800ebf4:	d072      	beq.n	800ecdc <__kernel_rem_pio2+0x24c>
 800ebf6:	2d02      	cmp	r5, #2
 800ebf8:	d07a      	beq.n	800ecf0 <__kernel_rem_pio2+0x260>
 800ebfa:	2e02      	cmp	r6, #2
 800ebfc:	d12b      	bne.n	800ec56 <__kernel_rem_pio2+0x1c6>
 800ebfe:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ec02:	ee30 8b48 	vsub.f64	d8, d0, d8
 800ec06:	b330      	cbz	r0, 800ec56 <__kernel_rem_pio2+0x1c6>
 800ec08:	4628      	mov	r0, r5
 800ec0a:	f000 f9bd 	bl	800ef88 <scalbn>
 800ec0e:	ee38 8b40 	vsub.f64	d8, d8, d0
 800ec12:	e020      	b.n	800ec56 <__kernel_rem_pio2+0x1c6>
 800ec14:	ee20 7b09 	vmul.f64	d7, d0, d9
 800ec18:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ec1c:	3801      	subs	r0, #1
 800ec1e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800ec22:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800ec26:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ec2a:	eca6 0a01 	vstmia	r6!, {s0}
 800ec2e:	ed92 0b00 	vldr	d0, [r2]
 800ec32:	ee37 0b00 	vadd.f64	d0, d7, d0
 800ec36:	e79e      	b.n	800eb76 <__kernel_rem_pio2+0xe6>
 800ec38:	d105      	bne.n	800ec46 <__kernel_rem_pio2+0x1b6>
 800ec3a:	1e62      	subs	r2, r4, #1
 800ec3c:	a906      	add	r1, sp, #24
 800ec3e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800ec42:	15f6      	asrs	r6, r6, #23
 800ec44:	e7c8      	b.n	800ebd8 <__kernel_rem_pio2+0x148>
 800ec46:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800ec4a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ec4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec52:	da31      	bge.n	800ecb8 <__kernel_rem_pio2+0x228>
 800ec54:	2600      	movs	r6, #0
 800ec56:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ec5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec5e:	f040 809b 	bne.w	800ed98 <__kernel_rem_pio2+0x308>
 800ec62:	1e62      	subs	r2, r4, #1
 800ec64:	2000      	movs	r0, #0
 800ec66:	454a      	cmp	r2, r9
 800ec68:	da49      	bge.n	800ecfe <__kernel_rem_pio2+0x26e>
 800ec6a:	2800      	cmp	r0, #0
 800ec6c:	d062      	beq.n	800ed34 <__kernel_rem_pio2+0x2a4>
 800ec6e:	3c01      	subs	r4, #1
 800ec70:	ab06      	add	r3, sp, #24
 800ec72:	3d18      	subs	r5, #24
 800ec74:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d0f8      	beq.n	800ec6e <__kernel_rem_pio2+0x1de>
 800ec7c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ec80:	4628      	mov	r0, r5
 800ec82:	f000 f981 	bl	800ef88 <scalbn>
 800ec86:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800ed80 <__kernel_rem_pio2+0x2f0>
 800ec8a:	1c62      	adds	r2, r4, #1
 800ec8c:	a96a      	add	r1, sp, #424	@ 0x1a8
 800ec8e:	00d3      	lsls	r3, r2, #3
 800ec90:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ec94:	4622      	mov	r2, r4
 800ec96:	2a00      	cmp	r2, #0
 800ec98:	f280 80a8 	bge.w	800edec <__kernel_rem_pio2+0x35c>
 800ec9c:	4622      	mov	r2, r4
 800ec9e:	2a00      	cmp	r2, #0
 800eca0:	f2c0 80c6 	blt.w	800ee30 <__kernel_rem_pio2+0x3a0>
 800eca4:	a96a      	add	r1, sp, #424	@ 0x1a8
 800eca6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800ecaa:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800ed78 <__kernel_rem_pio2+0x2e8>
 800ecae:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800ed94 <__kernel_rem_pio2+0x304>
 800ecb2:	2000      	movs	r0, #0
 800ecb4:	1aa1      	subs	r1, r4, r2
 800ecb6:	e0b0      	b.n	800ee1a <__kernel_rem_pio2+0x38a>
 800ecb8:	2602      	movs	r6, #2
 800ecba:	e78f      	b.n	800ebdc <__kernel_rem_pio2+0x14c>
 800ecbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecc0:	b948      	cbnz	r0, 800ecd6 <__kernel_rem_pio2+0x246>
 800ecc2:	b122      	cbz	r2, 800ecce <__kernel_rem_pio2+0x23e>
 800ecc4:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800ecc8:	f843 2c04 	str.w	r2, [r3, #-4]
 800eccc:	2201      	movs	r2, #1
 800ecce:	f10c 0c01 	add.w	ip, ip, #1
 800ecd2:	4610      	mov	r0, r2
 800ecd4:	e789      	b.n	800ebea <__kernel_rem_pio2+0x15a>
 800ecd6:	ebae 0202 	sub.w	r2, lr, r2
 800ecda:	e7f5      	b.n	800ecc8 <__kernel_rem_pio2+0x238>
 800ecdc:	1e62      	subs	r2, r4, #1
 800ecde:	ab06      	add	r3, sp, #24
 800ece0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ece4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ece8:	a906      	add	r1, sp, #24
 800ecea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ecee:	e784      	b.n	800ebfa <__kernel_rem_pio2+0x16a>
 800ecf0:	1e62      	subs	r2, r4, #1
 800ecf2:	ab06      	add	r3, sp, #24
 800ecf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecf8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ecfc:	e7f4      	b.n	800ece8 <__kernel_rem_pio2+0x258>
 800ecfe:	ab06      	add	r3, sp, #24
 800ed00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed04:	3a01      	subs	r2, #1
 800ed06:	4318      	orrs	r0, r3
 800ed08:	e7ad      	b.n	800ec66 <__kernel_rem_pio2+0x1d6>
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800ed10:	2800      	cmp	r0, #0
 800ed12:	d0fa      	beq.n	800ed0a <__kernel_rem_pio2+0x27a>
 800ed14:	9a04      	ldr	r2, [sp, #16]
 800ed16:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800ed1a:	446a      	add	r2, sp
 800ed1c:	eb04 000b 	add.w	r0, r4, fp
 800ed20:	a91a      	add	r1, sp, #104	@ 0x68
 800ed22:	1c66      	adds	r6, r4, #1
 800ed24:	3a98      	subs	r2, #152	@ 0x98
 800ed26:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800ed2a:	4423      	add	r3, r4
 800ed2c:	42b3      	cmp	r3, r6
 800ed2e:	da04      	bge.n	800ed3a <__kernel_rem_pio2+0x2aa>
 800ed30:	461c      	mov	r4, r3
 800ed32:	e713      	b.n	800eb5c <__kernel_rem_pio2+0xcc>
 800ed34:	9a03      	ldr	r2, [sp, #12]
 800ed36:	2301      	movs	r3, #1
 800ed38:	e7e8      	b.n	800ed0c <__kernel_rem_pio2+0x27c>
 800ed3a:	9902      	ldr	r1, [sp, #8]
 800ed3c:	f8dd c004 	ldr.w	ip, [sp, #4]
 800ed40:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800ed44:	9104      	str	r1, [sp, #16]
 800ed46:	ee07 1a90 	vmov	s15, r1
 800ed4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ed4e:	2400      	movs	r4, #0
 800ed50:	eca0 7b02 	vstmia	r0!, {d7}
 800ed54:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800ed78 <__kernel_rem_pio2+0x2e8>
 800ed58:	4686      	mov	lr, r0
 800ed5a:	4554      	cmp	r4, sl
 800ed5c:	dd03      	ble.n	800ed66 <__kernel_rem_pio2+0x2d6>
 800ed5e:	eca2 7b02 	vstmia	r2!, {d7}
 800ed62:	3601      	adds	r6, #1
 800ed64:	e7e2      	b.n	800ed2c <__kernel_rem_pio2+0x29c>
 800ed66:	ecbc 5b02 	vldmia	ip!, {d5}
 800ed6a:	ed3e 6b02 	vldmdb	lr!, {d6}
 800ed6e:	3401      	adds	r4, #1
 800ed70:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ed74:	e7f1      	b.n	800ed5a <__kernel_rem_pio2+0x2ca>
 800ed76:	bf00      	nop
	...
 800ed84:	3e700000 	.word	0x3e700000
 800ed88:	00000000 	.word	0x00000000
 800ed8c:	41700000 	.word	0x41700000
 800ed90:	0800f740 	.word	0x0800f740
 800ed94:	0800f700 	.word	0x0800f700
 800ed98:	4268      	negs	r0, r5
 800ed9a:	eeb0 0b48 	vmov.f64	d0, d8
 800ed9e:	f000 f8f3 	bl	800ef88 <scalbn>
 800eda2:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800ef70 <__kernel_rem_pio2+0x4e0>
 800eda6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800edaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edae:	db17      	blt.n	800ede0 <__kernel_rem_pio2+0x350>
 800edb0:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 800ef78 <__kernel_rem_pio2+0x4e8>
 800edb4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800edb8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800edbc:	aa06      	add	r2, sp, #24
 800edbe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800edc2:	eea5 0b46 	vfms.f64	d0, d5, d6
 800edc6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800edca:	3518      	adds	r5, #24
 800edcc:	ee10 3a10 	vmov	r3, s0
 800edd0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800edd4:	ee17 3a10 	vmov	r3, s14
 800edd8:	3401      	adds	r4, #1
 800edda:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800edde:	e74d      	b.n	800ec7c <__kernel_rem_pio2+0x1ec>
 800ede0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ede4:	aa06      	add	r2, sp, #24
 800ede6:	ee10 3a10 	vmov	r3, s0
 800edea:	e7f6      	b.n	800edda <__kernel_rem_pio2+0x34a>
 800edec:	a806      	add	r0, sp, #24
 800edee:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800edf2:	9001      	str	r0, [sp, #4]
 800edf4:	ee07 0a90 	vmov	s15, r0
 800edf8:	3a01      	subs	r2, #1
 800edfa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800edfe:	ee27 7b00 	vmul.f64	d7, d7, d0
 800ee02:	ee20 0b06 	vmul.f64	d0, d0, d6
 800ee06:	ed21 7b02 	vstmdb	r1!, {d7}
 800ee0a:	e744      	b.n	800ec96 <__kernel_rem_pio2+0x206>
 800ee0c:	ecbc 5b02 	vldmia	ip!, {d5}
 800ee10:	ecb5 6b02 	vldmia	r5!, {d6}
 800ee14:	3001      	adds	r0, #1
 800ee16:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ee1a:	4548      	cmp	r0, r9
 800ee1c:	dc01      	bgt.n	800ee22 <__kernel_rem_pio2+0x392>
 800ee1e:	4281      	cmp	r1, r0
 800ee20:	daf4      	bge.n	800ee0c <__kernel_rem_pio2+0x37c>
 800ee22:	a842      	add	r0, sp, #264	@ 0x108
 800ee24:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ee28:	ed81 7b00 	vstr	d7, [r1]
 800ee2c:	3a01      	subs	r2, #1
 800ee2e:	e736      	b.n	800ec9e <__kernel_rem_pio2+0x20e>
 800ee30:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800ee32:	2a02      	cmp	r2, #2
 800ee34:	dc0a      	bgt.n	800ee4c <__kernel_rem_pio2+0x3bc>
 800ee36:	2a00      	cmp	r2, #0
 800ee38:	dc2d      	bgt.n	800ee96 <__kernel_rem_pio2+0x406>
 800ee3a:	d046      	beq.n	800eeca <__kernel_rem_pio2+0x43a>
 800ee3c:	f008 0007 	and.w	r0, r8, #7
 800ee40:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800ee44:	ecbd 8b06 	vpop	{d8-d10}
 800ee48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee4c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800ee4e:	2a03      	cmp	r2, #3
 800ee50:	d1f4      	bne.n	800ee3c <__kernel_rem_pio2+0x3ac>
 800ee52:	a942      	add	r1, sp, #264	@ 0x108
 800ee54:	f1a3 0208 	sub.w	r2, r3, #8
 800ee58:	440a      	add	r2, r1
 800ee5a:	4611      	mov	r1, r2
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	2800      	cmp	r0, #0
 800ee60:	f1a1 0108 	sub.w	r1, r1, #8
 800ee64:	dc52      	bgt.n	800ef0c <__kernel_rem_pio2+0x47c>
 800ee66:	4621      	mov	r1, r4
 800ee68:	2901      	cmp	r1, #1
 800ee6a:	f1a2 0208 	sub.w	r2, r2, #8
 800ee6e:	dc5d      	bgt.n	800ef2c <__kernel_rem_pio2+0x49c>
 800ee70:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800ef80 <__kernel_rem_pio2+0x4f0>
 800ee74:	aa42      	add	r2, sp, #264	@ 0x108
 800ee76:	4413      	add	r3, r2
 800ee78:	2c01      	cmp	r4, #1
 800ee7a:	dc67      	bgt.n	800ef4c <__kernel_rem_pio2+0x4bc>
 800ee7c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800ee80:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800ee84:	2e00      	cmp	r6, #0
 800ee86:	d167      	bne.n	800ef58 <__kernel_rem_pio2+0x4c8>
 800ee88:	ed87 5b00 	vstr	d5, [r7]
 800ee8c:	ed87 6b02 	vstr	d6, [r7, #8]
 800ee90:	ed87 7b04 	vstr	d7, [r7, #16]
 800ee94:	e7d2      	b.n	800ee3c <__kernel_rem_pio2+0x3ac>
 800ee96:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800ef80 <__kernel_rem_pio2+0x4f0>
 800ee9a:	aa42      	add	r2, sp, #264	@ 0x108
 800ee9c:	4413      	add	r3, r2
 800ee9e:	4622      	mov	r2, r4
 800eea0:	2a00      	cmp	r2, #0
 800eea2:	da24      	bge.n	800eeee <__kernel_rem_pio2+0x45e>
 800eea4:	b34e      	cbz	r6, 800eefa <__kernel_rem_pio2+0x46a>
 800eea6:	eeb1 7b46 	vneg.f64	d7, d6
 800eeaa:	ed87 7b00 	vstr	d7, [r7]
 800eeae:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800eeb2:	aa44      	add	r2, sp, #272	@ 0x110
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eeba:	429c      	cmp	r4, r3
 800eebc:	da20      	bge.n	800ef00 <__kernel_rem_pio2+0x470>
 800eebe:	b10e      	cbz	r6, 800eec4 <__kernel_rem_pio2+0x434>
 800eec0:	eeb1 7b47 	vneg.f64	d7, d7
 800eec4:	ed87 7b02 	vstr	d7, [r7, #8]
 800eec8:	e7b8      	b.n	800ee3c <__kernel_rem_pio2+0x3ac>
 800eeca:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800ef80 <__kernel_rem_pio2+0x4f0>
 800eece:	aa42      	add	r2, sp, #264	@ 0x108
 800eed0:	4413      	add	r3, r2
 800eed2:	2c00      	cmp	r4, #0
 800eed4:	da05      	bge.n	800eee2 <__kernel_rem_pio2+0x452>
 800eed6:	b10e      	cbz	r6, 800eedc <__kernel_rem_pio2+0x44c>
 800eed8:	eeb1 7b47 	vneg.f64	d7, d7
 800eedc:	ed87 7b00 	vstr	d7, [r7]
 800eee0:	e7ac      	b.n	800ee3c <__kernel_rem_pio2+0x3ac>
 800eee2:	ed33 6b02 	vldmdb	r3!, {d6}
 800eee6:	3c01      	subs	r4, #1
 800eee8:	ee37 7b06 	vadd.f64	d7, d7, d6
 800eeec:	e7f1      	b.n	800eed2 <__kernel_rem_pio2+0x442>
 800eeee:	ed33 7b02 	vldmdb	r3!, {d7}
 800eef2:	3a01      	subs	r2, #1
 800eef4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800eef8:	e7d2      	b.n	800eea0 <__kernel_rem_pio2+0x410>
 800eefa:	eeb0 7b46 	vmov.f64	d7, d6
 800eefe:	e7d4      	b.n	800eeaa <__kernel_rem_pio2+0x41a>
 800ef00:	ecb2 6b02 	vldmia	r2!, {d6}
 800ef04:	3301      	adds	r3, #1
 800ef06:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ef0a:	e7d6      	b.n	800eeba <__kernel_rem_pio2+0x42a>
 800ef0c:	ed91 7b00 	vldr	d7, [r1]
 800ef10:	ed91 5b02 	vldr	d5, [r1, #8]
 800ef14:	3801      	subs	r0, #1
 800ef16:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ef1a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ef1e:	ed81 6b00 	vstr	d6, [r1]
 800ef22:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ef26:	ed81 7b02 	vstr	d7, [r1, #8]
 800ef2a:	e798      	b.n	800ee5e <__kernel_rem_pio2+0x3ce>
 800ef2c:	ed92 7b00 	vldr	d7, [r2]
 800ef30:	ed92 5b02 	vldr	d5, [r2, #8]
 800ef34:	3901      	subs	r1, #1
 800ef36:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ef3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ef3e:	ed82 6b00 	vstr	d6, [r2]
 800ef42:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ef46:	ed82 7b02 	vstr	d7, [r2, #8]
 800ef4a:	e78d      	b.n	800ee68 <__kernel_rem_pio2+0x3d8>
 800ef4c:	ed33 6b02 	vldmdb	r3!, {d6}
 800ef50:	3c01      	subs	r4, #1
 800ef52:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ef56:	e78f      	b.n	800ee78 <__kernel_rem_pio2+0x3e8>
 800ef58:	eeb1 5b45 	vneg.f64	d5, d5
 800ef5c:	eeb1 6b46 	vneg.f64	d6, d6
 800ef60:	ed87 5b00 	vstr	d5, [r7]
 800ef64:	eeb1 7b47 	vneg.f64	d7, d7
 800ef68:	ed87 6b02 	vstr	d6, [r7, #8]
 800ef6c:	e790      	b.n	800ee90 <__kernel_rem_pio2+0x400>
 800ef6e:	bf00      	nop
 800ef70:	00000000 	.word	0x00000000
 800ef74:	41700000 	.word	0x41700000
 800ef78:	00000000 	.word	0x00000000
 800ef7c:	3e700000 	.word	0x3e700000
	...

0800ef88 <scalbn>:
 800ef88:	ee10 1a90 	vmov	r1, s1
 800ef8c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ef90:	b98b      	cbnz	r3, 800efb6 <scalbn+0x2e>
 800ef92:	ee10 3a10 	vmov	r3, s0
 800ef96:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800ef9a:	4319      	orrs	r1, r3
 800ef9c:	d00a      	beq.n	800efb4 <scalbn+0x2c>
 800ef9e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800f050 <scalbn+0xc8>
 800efa2:	4b37      	ldr	r3, [pc, #220]	@ (800f080 <scalbn+0xf8>)
 800efa4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800efa8:	4298      	cmp	r0, r3
 800efaa:	da0b      	bge.n	800efc4 <scalbn+0x3c>
 800efac:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800f058 <scalbn+0xd0>
 800efb0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800efb4:	4770      	bx	lr
 800efb6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800efba:	4293      	cmp	r3, r2
 800efbc:	d107      	bne.n	800efce <scalbn+0x46>
 800efbe:	ee30 0b00 	vadd.f64	d0, d0, d0
 800efc2:	4770      	bx	lr
 800efc4:	ee10 1a90 	vmov	r1, s1
 800efc8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800efcc:	3b36      	subs	r3, #54	@ 0x36
 800efce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800efd2:	4290      	cmp	r0, r2
 800efd4:	dd0d      	ble.n	800eff2 <scalbn+0x6a>
 800efd6:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800f060 <scalbn+0xd8>
 800efda:	ee10 3a90 	vmov	r3, s1
 800efde:	eeb0 6b47 	vmov.f64	d6, d7
 800efe2:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 800f068 <scalbn+0xe0>
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	fe27 7b05 	vselge.f64	d7, d7, d5
 800efec:	ee27 0b06 	vmul.f64	d0, d7, d6
 800eff0:	4770      	bx	lr
 800eff2:	4418      	add	r0, r3
 800eff4:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800eff8:	4298      	cmp	r0, r3
 800effa:	dcec      	bgt.n	800efd6 <scalbn+0x4e>
 800effc:	2800      	cmp	r0, #0
 800effe:	dd0a      	ble.n	800f016 <scalbn+0x8e>
 800f000:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800f004:	ec53 2b10 	vmov	r2, r3, d0
 800f008:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800f00c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800f010:	ec43 2b10 	vmov	d0, r2, r3
 800f014:	4770      	bx	lr
 800f016:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800f01a:	da09      	bge.n	800f030 <scalbn+0xa8>
 800f01c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800f058 <scalbn+0xd0>
 800f020:	ee10 3a90 	vmov	r3, s1
 800f024:	eeb0 6b47 	vmov.f64	d6, d7
 800f028:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 800f070 <scalbn+0xe8>
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	e7db      	b.n	800efe8 <scalbn+0x60>
 800f030:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800f034:	ec53 2b10 	vmov	r2, r3, d0
 800f038:	3036      	adds	r0, #54	@ 0x36
 800f03a:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800f03e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800f042:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800f078 <scalbn+0xf0>
 800f046:	ec43 2b10 	vmov	d0, r2, r3
 800f04a:	e7b1      	b.n	800efb0 <scalbn+0x28>
 800f04c:	f3af 8000 	nop.w
 800f050:	00000000 	.word	0x00000000
 800f054:	43500000 	.word	0x43500000
 800f058:	c2f8f359 	.word	0xc2f8f359
 800f05c:	01a56e1f 	.word	0x01a56e1f
 800f060:	8800759c 	.word	0x8800759c
 800f064:	7e37e43c 	.word	0x7e37e43c
 800f068:	8800759c 	.word	0x8800759c
 800f06c:	fe37e43c 	.word	0xfe37e43c
 800f070:	c2f8f359 	.word	0xc2f8f359
 800f074:	81a56e1f 	.word	0x81a56e1f
 800f078:	00000000 	.word	0x00000000
 800f07c:	3c900000 	.word	0x3c900000
 800f080:	ffff3cb0 	.word	0xffff3cb0
 800f084:	00000000 	.word	0x00000000

0800f088 <floor>:
 800f088:	ee10 3a90 	vmov	r3, s1
 800f08c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800f090:	ee10 2a10 	vmov	r2, s0
 800f094:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800f098:	2913      	cmp	r1, #19
 800f09a:	b530      	push	{r4, r5, lr}
 800f09c:	4615      	mov	r5, r2
 800f09e:	dc33      	bgt.n	800f108 <floor+0x80>
 800f0a0:	2900      	cmp	r1, #0
 800f0a2:	da18      	bge.n	800f0d6 <floor+0x4e>
 800f0a4:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800f168 <floor+0xe0>
 800f0a8:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f0ac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0b4:	dd0a      	ble.n	800f0cc <floor+0x44>
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	da50      	bge.n	800f15c <floor+0xd4>
 800f0ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f0be:	4313      	orrs	r3, r2
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	4b2a      	ldr	r3, [pc, #168]	@ (800f170 <floor+0xe8>)
 800f0c6:	bf08      	it	eq
 800f0c8:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800f0cc:	4619      	mov	r1, r3
 800f0ce:	4610      	mov	r0, r2
 800f0d0:	ec41 0b10 	vmov	d0, r0, r1
 800f0d4:	e01f      	b.n	800f116 <floor+0x8e>
 800f0d6:	4827      	ldr	r0, [pc, #156]	@ (800f174 <floor+0xec>)
 800f0d8:	4108      	asrs	r0, r1
 800f0da:	ea03 0400 	and.w	r4, r3, r0
 800f0de:	4314      	orrs	r4, r2
 800f0e0:	d019      	beq.n	800f116 <floor+0x8e>
 800f0e2:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f168 <floor+0xe0>
 800f0e6:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f0ea:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f0ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0f2:	ddeb      	ble.n	800f0cc <floor+0x44>
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	bfbe      	ittt	lt
 800f0f8:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800f0fc:	410a      	asrlt	r2, r1
 800f0fe:	189b      	addlt	r3, r3, r2
 800f100:	ea23 0300 	bic.w	r3, r3, r0
 800f104:	2200      	movs	r2, #0
 800f106:	e7e1      	b.n	800f0cc <floor+0x44>
 800f108:	2933      	cmp	r1, #51	@ 0x33
 800f10a:	dd05      	ble.n	800f118 <floor+0x90>
 800f10c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f110:	d101      	bne.n	800f116 <floor+0x8e>
 800f112:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f116:	bd30      	pop	{r4, r5, pc}
 800f118:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800f11c:	f04f 30ff 	mov.w	r0, #4294967295
 800f120:	40e0      	lsrs	r0, r4
 800f122:	4210      	tst	r0, r2
 800f124:	d0f7      	beq.n	800f116 <floor+0x8e>
 800f126:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800f168 <floor+0xe0>
 800f12a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f12e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f136:	ddc9      	ble.n	800f0cc <floor+0x44>
 800f138:	2b00      	cmp	r3, #0
 800f13a:	da02      	bge.n	800f142 <floor+0xba>
 800f13c:	2914      	cmp	r1, #20
 800f13e:	d103      	bne.n	800f148 <floor+0xc0>
 800f140:	3301      	adds	r3, #1
 800f142:	ea22 0200 	bic.w	r2, r2, r0
 800f146:	e7c1      	b.n	800f0cc <floor+0x44>
 800f148:	2401      	movs	r4, #1
 800f14a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800f14e:	fa04 f101 	lsl.w	r1, r4, r1
 800f152:	440a      	add	r2, r1
 800f154:	42aa      	cmp	r2, r5
 800f156:	bf38      	it	cc
 800f158:	191b      	addcc	r3, r3, r4
 800f15a:	e7f2      	b.n	800f142 <floor+0xba>
 800f15c:	2200      	movs	r2, #0
 800f15e:	4613      	mov	r3, r2
 800f160:	e7b4      	b.n	800f0cc <floor+0x44>
 800f162:	bf00      	nop
 800f164:	f3af 8000 	nop.w
 800f168:	8800759c 	.word	0x8800759c
 800f16c:	7e37e43c 	.word	0x7e37e43c
 800f170:	bff00000 	.word	0xbff00000
 800f174:	000fffff 	.word	0x000fffff

0800f178 <_init>:
 800f178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f17a:	bf00      	nop
 800f17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f17e:	bc08      	pop	{r3}
 800f180:	469e      	mov	lr, r3
 800f182:	4770      	bx	lr

0800f184 <_fini>:
 800f184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f186:	bf00      	nop
 800f188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f18a:	bc08      	pop	{r3}
 800f18c:	469e      	mov	lr, r3
 800f18e:	4770      	bx	lr
