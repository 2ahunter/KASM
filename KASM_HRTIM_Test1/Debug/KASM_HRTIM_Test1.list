
KASM_HRTIM_Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010128  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  080103c8  080103c8  000113c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010948  08010948  00011948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010950  08010950  00011950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010954  08010954  00011954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e8  24000000  08010958  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000035cc  240001e8  08010b40  000121e8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240037b4  08010b40  000127b4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000121e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d19d  00000000  00000000  00012216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e6e  00000000  00000000  0002f3b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017b8  00000000  00000000  00032228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012b6  00000000  00000000  000339e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a436  00000000  00000000  00034c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e323  00000000  00000000  0006f0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d97c  00000000  00000000  0008d3ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020ad6b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000076c0  00000000  00000000  0020adb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004e  00000000  00000000  00212470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080103b0 	.word	0x080103b0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	080103b0 	.word	0x080103b0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000684:	f002 fa7a 	bl	8002b7c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000688:	f003 f97a 	bl	8003980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068c:	f000 f98c 	bl	80009a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f001 f9d6 	bl	8001a40 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000694:	f000 fc3a 	bl	8000f0c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000698:	f000 fd08 	bl	80010ac <MX_TIM2_Init>
  MX_TIM4_Init();
 800069c:	f000 fd7c 	bl	8001198 <MX_TIM4_Init>
  MX_TIM5_Init();
 80006a0:	f000 fe12 	bl	80012c8 <MX_TIM5_Init>
  MX_TIM8_Init();
 80006a4:	f000 fe92 	bl	80013cc <MX_TIM8_Init>
  MX_TIM12_Init();
 80006a8:	f000 ff3a 	bl	8001520 <MX_TIM12_Init>
  MX_TIM13_Init();
 80006ac:	f000 ffb0 	bl	8001610 <MX_TIM13_Init>
  MX_TIM14_Init();
 80006b0:	f000 fffc 	bl	80016ac <MX_TIM14_Init>
  MX_TIM15_Init();
 80006b4:	f001 f848 	bl	8001748 <MX_TIM15_Init>
  MX_TIM16_Init();
 80006b8:	f001 f8f6 	bl	80018a8 <MX_TIM16_Init>
  MX_HRTIM_Init();
 80006bc:	f000 fa22 	bl	8000b04 <MX_HRTIM_Init>
  MX_LPTIM1_Init();
 80006c0:	f000 fbf6 	bl	8000eb0 <MX_LPTIM1_Init>
  MX_UART4_Init();
 80006c4:	f001 f96a 	bl	800199c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */


  //Timer 1
  HAL_TIM_Base_Start_IT(&htim1);
 80006c8:	4896      	ldr	r0, [pc, #600]	@ (8000924 <main+0x2a4>)
 80006ca:	f008 fe8f 	bl	80093ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);    //Starts the PWM on each of the desired channels
 80006ce:	2100      	movs	r1, #0
 80006d0:	4894      	ldr	r0, [pc, #592]	@ (8000924 <main+0x2a4>)
 80006d2:	f008 ff65 	bl	80095a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80006d6:	2104      	movs	r1, #4
 80006d8:	4892      	ldr	r0, [pc, #584]	@ (8000924 <main+0x2a4>)
 80006da:	f008 ff61 	bl	80095a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80006de:	2108      	movs	r1, #8
 80006e0:	4890      	ldr	r0, [pc, #576]	@ (8000924 <main+0x2a4>)
 80006e2:	f008 ff5d 	bl	80095a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80006e6:	210c      	movs	r1, #12
 80006e8:	488e      	ldr	r0, [pc, #568]	@ (8000924 <main+0x2a4>)
 80006ea:	f008 ff59 	bl	80095a0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, GPIO_PIN_SET);   //Sets the pin to 1
 80006ee:	2201      	movs	r2, #1
 80006f0:	2101      	movs	r1, #1
 80006f2:	488d      	ldr	r0, [pc, #564]	@ (8000928 <main+0x2a8>)
 80006f4:	f004 fa7e 	bl	8004bf4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2102      	movs	r1, #2
 80006fc:	488a      	ldr	r0, [pc, #552]	@ (8000928 <main+0x2a8>)
 80006fe:	f004 fa79 	bl	8004bf4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	2104      	movs	r1, #4
 8000706:	4888      	ldr	r0, [pc, #544]	@ (8000928 <main+0x2a8>)
 8000708:	f004 fa74 	bl	8004bf4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	2108      	movs	r1, #8
 8000710:	4885      	ldr	r0, [pc, #532]	@ (8000928 <main+0x2a8>)
 8000712:	f004 fa6f 	bl	8004bf4 <HAL_GPIO_WritePin>
  			 *
  			 */
  //End Timer 1

  //Timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 8000716:	4885      	ldr	r0, [pc, #532]	@ (800092c <main+0x2ac>)
 8000718:	f008 fe68 	bl	80093ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800071c:	2100      	movs	r1, #0
 800071e:	4883      	ldr	r0, [pc, #524]	@ (800092c <main+0x2ac>)
 8000720:	f008 ff3e 	bl	80095a0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM2_CH1_PH_GPIO_Port, TIM2_CH1_PH_Pin, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	2110      	movs	r1, #16
 8000728:	487f      	ldr	r0, [pc, #508]	@ (8000928 <main+0x2a8>)
 800072a:	f004 fa63 	bl	8004bf4 <HAL_GPIO_WritePin>
    		 *
    		 */
  //End Timer 2

  //Timer 4
  HAL_TIM_Base_Start_IT(&htim4);
 800072e:	4880      	ldr	r0, [pc, #512]	@ (8000930 <main+0x2b0>)
 8000730:	f008 fe5c 	bl	80093ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000734:	2100      	movs	r1, #0
 8000736:	487e      	ldr	r0, [pc, #504]	@ (8000930 <main+0x2b0>)
 8000738:	f008 ff32 	bl	80095a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800073c:	2104      	movs	r1, #4
 800073e:	487c      	ldr	r0, [pc, #496]	@ (8000930 <main+0x2b0>)
 8000740:	f008 ff2e 	bl	80095a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000744:	2108      	movs	r1, #8
 8000746:	487a      	ldr	r0, [pc, #488]	@ (8000930 <main+0x2b0>)
 8000748:	f008 ff2a 	bl	80095a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800074c:	210c      	movs	r1, #12
 800074e:	4878      	ldr	r0, [pc, #480]	@ (8000930 <main+0x2b0>)
 8000750:	f008 ff26 	bl	80095a0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM4_CH1_PH_GPIO_Port, TIM4_CH1_PH_Pin, GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800075a:	4876      	ldr	r0, [pc, #472]	@ (8000934 <main+0x2b4>)
 800075c:	f004 fa4a 	bl	8004bf4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH2_PH_GPIO_Port, TIM4_CH2_PH_Pin, GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000766:	4873      	ldr	r0, [pc, #460]	@ (8000934 <main+0x2b4>)
 8000768:	f004 fa44 	bl	8004bf4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH3_PH_GPIO_Port, TIM4_CH3_PH_Pin, GPIO_PIN_SET);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000772:	4871      	ldr	r0, [pc, #452]	@ (8000938 <main+0x2b8>)
 8000774:	f004 fa3e 	bl	8004bf4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH4_PH_GPIO_Port, TIM4_CH4_PH_Pin, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800077e:	486e      	ldr	r0, [pc, #440]	@ (8000938 <main+0x2b8>)
 8000780:	f004 fa38 	bl	8004bf4 <HAL_GPIO_WritePin>
      		   *
      		   */
  //End Timer 4

  //Timer 5
  HAL_TIM_Base_Start_IT(&htim5);
 8000784:	486d      	ldr	r0, [pc, #436]	@ (800093c <main+0x2bc>)
 8000786:	f008 fe31 	bl	80093ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800078a:	2104      	movs	r1, #4
 800078c:	486b      	ldr	r0, [pc, #428]	@ (800093c <main+0x2bc>)
 800078e:	f008 ff07 	bl	80095a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8000792:	2108      	movs	r1, #8
 8000794:	4869      	ldr	r0, [pc, #420]	@ (800093c <main+0x2bc>)
 8000796:	f008 ff03 	bl	80095a0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM5_CH2_PH_GPIO_Port, TIM5_CH2_PH_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007a0:	4865      	ldr	r0, [pc, #404]	@ (8000938 <main+0x2b8>)
 80007a2:	f004 fa27 	bl	8004bf4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM5_CH3_PH_GPIO_Port, TIM5_CH3_PH_Pin, GPIO_PIN_SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ac:	4862      	ldr	r0, [pc, #392]	@ (8000938 <main+0x2b8>)
 80007ae:	f004 fa21 	bl	8004bf4 <HAL_GPIO_WritePin>
        	   *
        	   */
  //End Timer 5

  //Timer 8
  HAL_TIM_Base_Start_IT(&htim8);
 80007b2:	4863      	ldr	r0, [pc, #396]	@ (8000940 <main+0x2c0>)
 80007b4:	f008 fe1a 	bl	80093ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80007b8:	210c      	movs	r1, #12
 80007ba:	4861      	ldr	r0, [pc, #388]	@ (8000940 <main+0x2c0>)
 80007bc:	f008 fef0 	bl	80095a0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM8_CH4_PH_GPIO_Port, TIM8_CH4_PH_Pin, GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	2180      	movs	r1, #128	@ 0x80
 80007c4:	4858      	ldr	r0, [pc, #352]	@ (8000928 <main+0x2a8>)
 80007c6:	f004 fa15 	bl	8004bf4 <HAL_GPIO_WritePin>
        	   *
        	   */
  //End Timer 8

  //Timer 12
  HAL_TIM_Base_Start_IT(&htim12);
 80007ca:	485e      	ldr	r0, [pc, #376]	@ (8000944 <main+0x2c4>)
 80007cc:	f008 fe0e 	bl	80093ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 80007d0:	2104      	movs	r1, #4
 80007d2:	485c      	ldr	r0, [pc, #368]	@ (8000944 <main+0x2c4>)
 80007d4:	f008 fee4 	bl	80095a0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM12_CH2_PH_GPIO_Port, TIM12_CH2_PH_Pin, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007de:	4852      	ldr	r0, [pc, #328]	@ (8000928 <main+0x2a8>)
 80007e0:	f004 fa08 	bl	8004bf4 <HAL_GPIO_WritePin>
         	   *
         	   */
  //End Timer 12

  //Timer 13
  HAL_TIM_Base_Start_IT(&htim13);
 80007e4:	4858      	ldr	r0, [pc, #352]	@ (8000948 <main+0x2c8>)
 80007e6:	f008 fe01 	bl	80093ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80007ea:	2100      	movs	r1, #0
 80007ec:	4856      	ldr	r0, [pc, #344]	@ (8000948 <main+0x2c8>)
 80007ee:	f008 fed7 	bl	80095a0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM13_CH1_PH_GPIO_Port, TIM13_CH1_PH_Pin, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007f8:	484b      	ldr	r0, [pc, #300]	@ (8000928 <main+0x2a8>)
 80007fa:	f004 f9fb 	bl	8004bf4 <HAL_GPIO_WritePin>
           	   *
           	   */
  //End Timer 13

  //Timer 14
  HAL_TIM_Base_Start_IT(&htim14);
 80007fe:	4853      	ldr	r0, [pc, #332]	@ (800094c <main+0x2cc>)
 8000800:	f008 fdf4 	bl	80093ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000804:	2100      	movs	r1, #0
 8000806:	4851      	ldr	r0, [pc, #324]	@ (800094c <main+0x2cc>)
 8000808:	f008 feca 	bl	80095a0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM14_CH1_PH_GPIO_Port, TIM14_CH1_PH_Pin, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000812:	4845      	ldr	r0, [pc, #276]	@ (8000928 <main+0x2a8>)
 8000814:	f004 f9ee 	bl	8004bf4 <HAL_GPIO_WritePin>
           	   *
           	   */
  //End Timer 14

  //Timer 15
  HAL_TIM_Base_Start_IT(&htim15);
 8000818:	484d      	ldr	r0, [pc, #308]	@ (8000950 <main+0x2d0>)
 800081a:	f008 fde7 	bl	80093ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800081e:	2100      	movs	r1, #0
 8000820:	484b      	ldr	r0, [pc, #300]	@ (8000950 <main+0x2d0>)
 8000822:	f008 febd 	bl	80095a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000826:	2104      	movs	r1, #4
 8000828:	4849      	ldr	r0, [pc, #292]	@ (8000950 <main+0x2d0>)
 800082a:	f008 feb9 	bl	80095a0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM15_CH1_PH_GPIO_Port, TIM15_CH1_PH_Pin, GPIO_PIN_SET);
 800082e:	2201      	movs	r2, #1
 8000830:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000834:	483c      	ldr	r0, [pc, #240]	@ (8000928 <main+0x2a8>)
 8000836:	f004 f9dd 	bl	8004bf4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM15_CH2_PH_GPIO_Port, TIM15_CH2_PH_Pin, GPIO_PIN_SET);
 800083a:	2201      	movs	r2, #1
 800083c:	2101      	movs	r1, #1
 800083e:	4845      	ldr	r0, [pc, #276]	@ (8000954 <main+0x2d4>)
 8000840:	f004 f9d8 	bl	8004bf4 <HAL_GPIO_WritePin>
           	   *
           	   */
  //End Timer 15

  //Timer 16
  HAL_TIM_Base_Start_IT(&htim16);
 8000844:	4844      	ldr	r0, [pc, #272]	@ (8000958 <main+0x2d8>)
 8000846:	f008 fdd1 	bl	80093ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800084a:	2100      	movs	r1, #0
 800084c:	4842      	ldr	r0, [pc, #264]	@ (8000958 <main+0x2d8>)
 800084e:	f008 fea7 	bl	80095a0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM16_CH1_PH_GPIO_Port, TIM16_CH1_PH_Pin, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2102      	movs	r1, #2
 8000856:	483f      	ldr	r0, [pc, #252]	@ (8000954 <main+0x2d4>)
 8000858:	f004 f9cc 	bl	8004bf4 <HAL_GPIO_WritePin>
               */
  //End Timer 16

  //HRTIM CODE GOES HERE *******
     // Enable output
     HRTIM1->sCommonRegs.OENR = HRTIM_OENR_TA1OEN + HRTIM_OENR_TA2OEN +
 800085c:	4b3f      	ldr	r3, [pc, #252]	@ (800095c <main+0x2dc>)
 800085e:	22ff      	movs	r2, #255	@ 0xff
 8000860:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
     	 	HRTIM_OENR_TB1OEN + HRTIM_OENR_TB2OEN + HRTIM_OENR_TC1OEN + HRTIM_OENR_TC2OEN + HRTIM_OENR_TD1OEN + HRTIM_OENR_TD2OEN;
     //Start Timer
     HRTIM1->sMasterRegs.MCR = HRTIM_MCR_TACEN + HRTIM_MCR_TBCEN + HRTIM_MCR_TCCEN + HRTIM_MCR_TDCEN;
 8000864:	4b3d      	ldr	r3, [pc, #244]	@ (800095c <main+0x2dc>)
 8000866:	f44f 12f0 	mov.w	r2, #1966080	@ 0x1e0000
 800086a:	601a      	str	r2, [r3, #0]
              *
              */
  //END HRTIM CODE

  //Low-Power Timer
     HAL_LPTIM_Counter_Start_IT(&hlptim1, LPTIM_ARR_ARR);
 800086c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000870:	483b      	ldr	r0, [pc, #236]	@ (8000960 <main+0x2e0>)
 8000872:	f005 fbbe 	bl	8005ff2 <HAL_LPTIM_Counter_Start_IT>
     HAL_LPTIM_PWM_Start(&hlptim1, LPTIM_ARR_ARR, LPTIM_CMP_CMP);
 8000876:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800087a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800087e:	4838      	ldr	r0, [pc, #224]	@ (8000960 <main+0x2e0>)
 8000880:	f005 fb6a 	bl	8005f58 <HAL_LPTIM_PWM_Start>
     HAL_GPIO_WritePin(LPTIM1_OUT_PH_GPIO_Port, LPTIM1_OUT_PH_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2104      	movs	r1, #4
 8000888:	4832      	ldr	r0, [pc, #200]	@ (8000954 <main+0x2d4>)
 800088a:	f004 f9b3 	bl	8004bf4 <HAL_GPIO_WritePin>
       	LPTIM1->ARR = (12000-1);
 800088e:	4b35      	ldr	r3, [pc, #212]	@ (8000964 <main+0x2e4>)
 8000890:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8000894:	619a      	str	r2, [r3, #24]
       	    //End UART Transmit
       	     */
  //End Low Power Timer

       	    //Timer Synchronization
       	    TIM1->CNT = 0;
 8000896:	4b34      	ldr	r3, [pc, #208]	@ (8000968 <main+0x2e8>)
 8000898:	2200      	movs	r2, #0
 800089a:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM2->CNT = 0;
 800089c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008a0:	2200      	movs	r2, #0
 80008a2:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM4->CNT = 0;
 80008a4:	4b31      	ldr	r3, [pc, #196]	@ (800096c <main+0x2ec>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM5->CNT = 0;
 80008aa:	4b31      	ldr	r3, [pc, #196]	@ (8000970 <main+0x2f0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM8->CNT = 0;
 80008b0:	4b30      	ldr	r3, [pc, #192]	@ (8000974 <main+0x2f4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM12->CNT = 0;
 80008b6:	4b30      	ldr	r3, [pc, #192]	@ (8000978 <main+0x2f8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM13->CNT = 0;
 80008bc:	4b2f      	ldr	r3, [pc, #188]	@ (800097c <main+0x2fc>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM14->CNT = 0;
 80008c2:	4b2f      	ldr	r3, [pc, #188]	@ (8000980 <main+0x300>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM15->CNT = 0;
 80008c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000984 <main+0x304>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	625a      	str	r2, [r3, #36]	@ 0x24
       	    TIM16->CNT = 0;
 80008ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000988 <main+0x308>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	@ 0x24
       	    LPTIM1->CNT = 0;
 80008d4:	4b23      	ldr	r3, [pc, #140]	@ (8000964 <main+0x2e4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]

   gen_sine();
 80008da:	f002 f919 	bl	8002b10 <gen_sine>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   init_buffer(rxp);
 80008de:	4b2b      	ldr	r3, [pc, #172]	@ (800098c <main+0x30c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 fae9 	bl	8001eba <init_buffer>
   HAL_UART_Receive_IT(&huart4, rx_buff, sizeof(rx_buff));
 80008e8:	2201      	movs	r2, #1
 80008ea:	4929      	ldr	r1, [pc, #164]	@ (8000990 <main+0x310>)
 80008ec:	4829      	ldr	r0, [pc, #164]	@ (8000994 <main+0x314>)
 80008ee:	f00a f85b 	bl	800a9a8 <HAL_UART_Receive_IT>

  while (1)
  {
	  if(ctrl_tmr_expired == TRUE) control_update(ref); 	//Sets flag for timer inturrupt
 80008f2:	4b29      	ldr	r3, [pc, #164]	@ (8000998 <main+0x318>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d106      	bne.n	8000908 <main+0x288>
 80008fa:	4b28      	ldr	r3, [pc, #160]	@ (800099c <main+0x31c>)
 80008fc:	ed93 7b00 	vldr	d7, [r3]
 8000900:	eeb0 0b47 	vmov.f64	d0, d7
 8000904:	f001 fb74 	bl	8001ff0 <control_update>
	  if(data_ready == TRUE) UART_update(); 	//Sets flag when a message is received
 8000908:	4b25      	ldr	r3, [pc, #148]	@ (80009a0 <main+0x320>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d101      	bne.n	8000914 <main+0x294>
 8000910:	f001 f9c6 	bl	8001ca0 <UART_update>
	  if(cmd_ready == TRUE) command_update(); 	//Sets flag once message is ready to send
 8000914:	4b23      	ldr	r3, [pc, #140]	@ (80009a4 <main+0x324>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d1ea      	bne.n	80008f2 <main+0x272>
 800091c:	f001 f9de 	bl	8001cdc <command_update>
	  if(ctrl_tmr_expired == TRUE) control_update(ref); 	//Sets flag for timer inturrupt
 8000920:	e7e7      	b.n	80008f2 <main+0x272>
 8000922:	bf00      	nop
 8000924:	24000318 	.word	0x24000318
 8000928:	58021000 	.word	0x58021000
 800092c:	24000364 	.word	0x24000364
 8000930:	240003b0 	.word	0x240003b0
 8000934:	58020400 	.word	0x58020400
 8000938:	58020800 	.word	0x58020800
 800093c:	240003fc 	.word	0x240003fc
 8000940:	24000448 	.word	0x24000448
 8000944:	24000494 	.word	0x24000494
 8000948:	240004e0 	.word	0x240004e0
 800094c:	2400052c 	.word	0x2400052c
 8000950:	24000578 	.word	0x24000578
 8000954:	58020c00 	.word	0x58020c00
 8000958:	240005c4 	.word	0x240005c4
 800095c:	40017400 	.word	0x40017400
 8000960:	240002e0 	.word	0x240002e0
 8000964:	40002400 	.word	0x40002400
 8000968:	40010000 	.word	0x40010000
 800096c:	40000800 	.word	0x40000800
 8000970:	40000c00 	.word	0x40000c00
 8000974:	40010400 	.word	0x40010400
 8000978:	40001800 	.word	0x40001800
 800097c:	40001c00 	.word	0x40001c00
 8000980:	40002000 	.word	0x40002000
 8000984:	40014000 	.word	0x40014000
 8000988:	40014400 	.word	0x40014400
 800098c:	24000000 	.word	0x24000000
 8000990:	24003648 	.word	0x24003648
 8000994:	24000610 	.word	0x24000610
 8000998:	240006a4 	.word	0x240006a4
 800099c:	240006a8 	.word	0x240006a8
 80009a0:	240025fc 	.word	0x240025fc
 80009a4:	2400360e 	.word	0x2400360e

080009a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b09e      	sub	sp, #120	@ 0x78
 80009ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009b2:	224c      	movs	r2, #76	@ 0x4c
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f00d f877 	bl	800daaa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	2220      	movs	r2, #32
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f00d f870 	bl	800daaa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009ca:	2002      	movs	r0, #2
 80009cc:	f005 fe6a 	bl	80066a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	4b48      	ldr	r3, [pc, #288]	@ (8000af8 <SystemClock_Config+0x150>)
 80009d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009d8:	4a47      	ldr	r2, [pc, #284]	@ (8000af8 <SystemClock_Config+0x150>)
 80009da:	f023 0301 	bic.w	r3, r3, #1
 80009de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009e0:	4b45      	ldr	r3, [pc, #276]	@ (8000af8 <SystemClock_Config+0x150>)
 80009e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b44      	ldr	r3, [pc, #272]	@ (8000afc <SystemClock_Config+0x154>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	4a43      	ldr	r2, [pc, #268]	@ (8000afc <SystemClock_Config+0x154>)
 80009f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009f4:	6193      	str	r3, [r2, #24]
 80009f6:	4b41      	ldr	r3, [pc, #260]	@ (8000afc <SystemClock_Config+0x154>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a02:	bf00      	nop
 8000a04:	4b3d      	ldr	r3, [pc, #244]	@ (8000afc <SystemClock_Config+0x154>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a10:	d1f8      	bne.n	8000a04 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b3b      	ldr	r3, [pc, #236]	@ (8000b00 <SystemClock_Config+0x158>)
 8000a14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a18:	4a39      	ldr	r2, [pc, #228]	@ (8000b00 <SystemClock_Config+0x158>)
 8000a1a:	f043 0302 	orr.w	r3, r3, #2
 8000a1e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a22:	4b37      	ldr	r3, [pc, #220]	@ (8000b00 <SystemClock_Config+0x158>)
 8000a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a30:	2300      	movs	r3, #0
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	4b31      	ldr	r3, [pc, #196]	@ (8000afc <SystemClock_Config+0x154>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a30      	ldr	r2, [pc, #192]	@ (8000afc <SystemClock_Config+0x154>)
 8000a3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b2e      	ldr	r3, [pc, #184]	@ (8000afc <SystemClock_Config+0x154>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000af8 <SystemClock_Config+0x150>)
 8000a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8000af8 <SystemClock_Config+0x150>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a56:	4b28      	ldr	r3, [pc, #160]	@ (8000af8 <SystemClock_Config+0x150>)
 8000a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a62:	bf00      	nop
 8000a64:	4b25      	ldr	r3, [pc, #148]	@ (8000afc <SystemClock_Config+0x154>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a70:	d1f8      	bne.n	8000a64 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a72:	2301      	movs	r3, #1
 8000a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a7a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a80:	2302      	movs	r3, #2
 8000a82:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000a88:	2350      	movs	r3, #80	@ 0x50
 8000a8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a94:	2302      	movs	r3, #2
 8000a96:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a98:	230c      	movs	r3, #12
 8000a9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f005 fe35 	bl	8006718 <HAL_RCC_OscConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000ab4:	f002 f88e 	bl	8002bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab8:	233f      	movs	r3, #63	@ 0x3f
 8000aba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abc:	2303      	movs	r3, #3
 8000abe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ac8:	2340      	movs	r3, #64	@ 0x40
 8000aca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000acc:	2340      	movs	r3, #64	@ 0x40
 8000ace:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ad0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ad6:	2340      	movs	r3, #64	@ 0x40
 8000ad8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	2104      	movs	r1, #4
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f006 fa73 	bl	8006fcc <HAL_RCC_ClockConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000aec:	f002 f872 	bl	8002bd4 <Error_Handler>
  }
}
 8000af0:	bf00      	nop
 8000af2:	3778      	adds	r7, #120	@ 0x78
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	58000400 	.word	0x58000400
 8000afc:	58024800 	.word	0x58024800
 8000b00:	58024400 	.word	0x58024400

08000b04 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0aa      	sub	sp, #168	@ 0xa8
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_EventCfgTypeDef pEventCfg = {0};
 8000b0a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000b1a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000b28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b2c:	2254      	movs	r2, #84	@ 0x54
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f00c ffba 	bl	800daaa <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8000b36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2220      	movs	r2, #32
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f00c ffae 	bl	800daaa <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */


  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8000b4e:	4bc4      	ldr	r3, [pc, #784]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000b50:	4ac4      	ldr	r2, [pc, #784]	@ (8000e64 <MX_HRTIM_Init+0x360>)
 8000b52:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000b54:	4bc2      	ldr	r3, [pc, #776]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000b5a:	4bc1      	ldr	r3, [pc, #772]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8000b60:	48bf      	ldr	r0, [pc, #764]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000b62:	f004 f861 	bl	8004c28 <HAL_HRTIM_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_HRTIM_Init+0x6c>
  {
    Error_Handler();
 8000b6c:	f002 f832 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_HRTIM_EventPrescalerConfig(&hhrtim, HRTIM_EVENTPRESCALER_DIV1) != HAL_OK)
 8000b70:	2100      	movs	r1, #0
 8000b72:	48bb      	ldr	r0, [pc, #748]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000b74:	f004 f97f 	bl	8004e76 <HAL_HRTIM_EventPrescalerConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_HRTIM_Init+0x7e>
  {
    Error_Handler();
 8000b7e:	f002 f829 	bl	8002bd4 <Error_Handler>
  }
  pEventCfg.Source = HRTIM_EVENTSRC_3;
 8000b82:	2302      	movs	r3, #2
 8000b84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  pEventCfg.Polarity = HRTIM_EVENTPOLARITY_HIGH;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pEventCfg.Sensitivity = HRTIM_EVENTSENSITIVITY_RISINGEDGE;
 8000b8e:	2308      	movs	r3, #8
 8000b90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  pEventCfg.FastMode = HRTIM_EVENTFASTMODE_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_HRTIM_EventConfig(&hhrtim, HRTIM_EVENT_1, &pEventCfg) != HAL_OK)
 8000b9a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	48af      	ldr	r0, [pc, #700]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000ba4:	f004 f938 	bl	8004e18 <HAL_HRTIM_EventConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_HRTIM_Init+0xae>
  {
    Error_Handler();
 8000bae:	f002 f811 	bl	8002bd4 <Error_Handler>
  }
  pTimeBaseCfg.Period = 24000-1;
 8000bb2:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 8000bb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000bc0:	2305      	movs	r3, #5
 8000bc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000bc6:	2308      	movs	r3, #8
 8000bc8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000bcc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	48a2      	ldr	r0, [pc, #648]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000bd6:	f004 f8f7 	bl	8004dc8 <HAL_HRTIM_TimeBaseConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_HRTIM_Init+0xe0>
  {
    Error_Handler();
 8000be0:	f001 fff8 	bl	8002bd4 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.DMASrcAddress = 0x0000;
 8000bec:	2300      	movs	r3, #0
 8000bee:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.DMADstAddress = 0x0000;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.DMASize = 0x1;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000c00:	2300      	movs	r3, #0
 8000c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8000c08:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c0c:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000c16:	2300      	movs	r3, #0
 8000c18:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8000c26:	2300      	movs	r3, #0
 8000c28:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_EEV_1;
 8000c32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c36:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 8000c38:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000c3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8000c40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c44:	461a      	mov	r2, r3
 8000c46:	2100      	movs	r1, #0
 8000c48:	4885      	ldr	r0, [pc, #532]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000c4a:	f004 f94d 	bl	8004ee8 <HAL_HRTIM_WaveformTimerConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_HRTIM_Init+0x154>
  {
    Error_Handler();
 8000c54:	f001 ffbe 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8000c58:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	2101      	movs	r1, #1
 8000c60:	487f      	ldr	r0, [pc, #508]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000c62:	f004 f941 	bl	8004ee8 <HAL_HRTIM_WaveformTimerConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_HRTIM_Init+0x16c>
  {
    Error_Handler();
 8000c6c:	f001 ffb2 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8000c70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c74:	461a      	mov	r2, r3
 8000c76:	2102      	movs	r1, #2
 8000c78:	4879      	ldr	r0, [pc, #484]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000c7a:	f004 f935 	bl	8004ee8 <HAL_HRTIM_WaveformTimerConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_HRTIM_Init+0x184>
  {
    Error_Handler();
 8000c84:	f001 ffa6 	bl	8002bd4 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 8000c8c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c90:	461a      	mov	r2, r3
 8000c92:	2103      	movs	r1, #3
 8000c94:	4872      	ldr	r0, [pc, #456]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000c96:	f004 f927 	bl	8004ee8 <HAL_HRTIM_WaveformTimerConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_HRTIM_Init+0x1a0>
  {
    Error_Handler();
 8000ca0:	f001 ff98 	bl	8002bd4 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x00005A00/2;
 8000ca4:	f44f 5334 	mov.w	r3, #11520	@ 0x2d00
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000caa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	486b      	ldr	r0, [pc, #428]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000cb4:	f004 f98a 	bl	8004fcc <HAL_HRTIM_WaveformCompareConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_HRTIM_Init+0x1be>
  {
    Error_Handler();
 8000cbe:	f001 ff89 	bl	8002bd4 <Error_Handler>
  }
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cce:	2202      	movs	r2, #2
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4863      	ldr	r0, [pc, #396]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000cd4:	f004 f97a 	bl	8004fcc <HAL_HRTIM_WaveformCompareConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_HRTIM_Init+0x1de>
  {
    Error_Handler();
 8000cde:	f001 ff79 	bl	8002bd4 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000ce2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	2101      	movs	r1, #1
 8000cea:	485d      	ldr	r0, [pc, #372]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000cec:	f004 f96e 	bl	8004fcc <HAL_HRTIM_WaveformCompareConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_HRTIM_Init+0x1f6>
  {
    Error_Handler();
 8000cf6:	f001 ff6d 	bl	8002bd4 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfe:	2202      	movs	r2, #2
 8000d00:	2102      	movs	r1, #2
 8000d02:	4857      	ldr	r0, [pc, #348]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000d04:	f004 f962 	bl	8004fcc <HAL_HRTIM_WaveformCompareConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_HRTIM_Init+0x20e>
  {
    Error_Handler();
 8000d0e:	f001 ff61 	bl	8002bd4 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d16:	2202      	movs	r2, #2
 8000d18:	2103      	movs	r1, #3
 8000d1a:	4851      	ldr	r0, [pc, #324]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000d1c:	f004 f956 	bl	8004fcc <HAL_HRTIM_WaveformCompareConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_HRTIM_Init+0x226>
  {
    Error_Handler();
 8000d26:	f001 ff55 	bl	8002bd4 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_EEV_1|HRTIM_OUTPUTSET_TIMPER;
 8000d2e:	4b4e      	ldr	r3, [pc, #312]	@ (8000e68 <MX_HRTIM_Init+0x364>)
 8000d30:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8000d32:	2308      	movs	r3, #8
 8000d34:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4843      	ldr	r0, [pc, #268]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000d52:	f004 faa9 	bl	80052a8 <HAL_HRTIM_WaveformOutputConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_HRTIM_Init+0x25c>
  {
    Error_Handler();
 8000d5c:	f001 ff3a 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2204      	movs	r2, #4
 8000d64:	2101      	movs	r1, #1
 8000d66:	483e      	ldr	r0, [pc, #248]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000d68:	f004 fa9e 	bl	80052a8 <HAL_HRTIM_WaveformOutputConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_HRTIM_Init+0x272>
  {
    Error_Handler();
 8000d72:	f001 ff2f 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2210      	movs	r2, #16
 8000d7a:	2102      	movs	r1, #2
 8000d7c:	4838      	ldr	r0, [pc, #224]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000d7e:	f004 fa93 	bl	80052a8 <HAL_HRTIM_WaveformOutputConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_HRTIM_Init+0x288>
  {
    Error_Handler();
 8000d88:	f001 ff24 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2240      	movs	r2, #64	@ 0x40
 8000d90:	2103      	movs	r1, #3
 8000d92:	4833      	ldr	r0, [pc, #204]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000d94:	f004 fa88 	bl	80052a8 <HAL_HRTIM_WaveformOutputConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_HRTIM_Init+0x29e>
  {
    Error_Handler();
 8000d9e:	f001 ff19 	bl	8002bd4 <Error_Handler>
  }
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8000da2:	2310      	movs	r3, #16
 8000da4:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2202      	movs	r2, #2
 8000daa:	2100      	movs	r1, #0
 8000dac:	482c      	ldr	r0, [pc, #176]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000dae:	f004 fa7b 	bl	80052a8 <HAL_HRTIM_WaveformOutputConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_HRTIM_Init+0x2b8>
  {
    Error_Handler();
 8000db8:	f001 ff0c 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2208      	movs	r2, #8
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	4827      	ldr	r0, [pc, #156]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000dc4:	f004 fa70 	bl	80052a8 <HAL_HRTIM_WaveformOutputConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_HRTIM_Init+0x2ce>
  {
    Error_Handler();
 8000dce:	f001 ff01 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2220      	movs	r2, #32
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	4821      	ldr	r0, [pc, #132]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000dda:	f004 fa65 	bl	80052a8 <HAL_HRTIM_WaveformOutputConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_HRTIM_Init+0x2e4>
  {
    Error_Handler();
 8000de4:	f001 fef6 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2280      	movs	r2, #128	@ 0x80
 8000dec:	2103      	movs	r1, #3
 8000dee:	481c      	ldr	r0, [pc, #112]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000df0:	f004 fa5a 	bl	80052a8 <HAL_HRTIM_WaveformOutputConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_HRTIM_Init+0x2fa>
  {
    Error_Handler();
 8000dfa:	f001 feeb 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8000dfe:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e02:	461a      	mov	r2, r3
 8000e04:	2101      	movs	r1, #1
 8000e06:	4816      	ldr	r0, [pc, #88]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000e08:	f003 ffde 	bl	8004dc8 <HAL_HRTIM_TimeBaseConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_HRTIM_Init+0x312>
  {
    Error_Handler();
 8000e12:	f001 fedf 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000e16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	4810      	ldr	r0, [pc, #64]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000e20:	f004 f8d4 	bl	8004fcc <HAL_HRTIM_WaveformCompareConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_HRTIM_Init+0x32a>
  {
    Error_Handler();
 8000e2a:	f001 fed3 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8000e2e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e32:	461a      	mov	r2, r3
 8000e34:	2102      	movs	r1, #2
 8000e36:	480a      	ldr	r0, [pc, #40]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000e38:	f003 ffc6 	bl	8004dc8 <HAL_HRTIM_TimeBaseConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_HRTIM_Init+0x342>
  {
    Error_Handler();
 8000e42:	f001 fec7 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000e46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	4804      	ldr	r0, [pc, #16]	@ (8000e60 <MX_HRTIM_Init+0x35c>)
 8000e50:	f004 f8bc 	bl	8004fcc <HAL_HRTIM_WaveformCompareConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d008      	beq.n	8000e6c <MX_HRTIM_Init+0x368>
  {
    Error_Handler();
 8000e5a:	f001 febb 	bl	8002bd4 <Error_Handler>
 8000e5e:	e005      	b.n	8000e6c <MX_HRTIM_Init+0x368>
 8000e60:	24000204 	.word	0x24000204
 8000e64:	40017400 	.word	0x40017400
 8000e68:	00200004 	.word	0x00200004
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000e6c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e70:	461a      	mov	r2, r3
 8000e72:	2103      	movs	r1, #3
 8000e74:	480d      	ldr	r0, [pc, #52]	@ (8000eac <MX_HRTIM_Init+0x3a8>)
 8000e76:	f003 ffa7 	bl	8004dc8 <HAL_HRTIM_TimeBaseConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_HRTIM_Init+0x380>
  {
    Error_Handler();
 8000e80:	f001 fea8 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000e84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2103      	movs	r1, #3
 8000e8c:	4807      	ldr	r0, [pc, #28]	@ (8000eac <MX_HRTIM_Init+0x3a8>)
 8000e8e:	f004 f89d 	bl	8004fcc <HAL_HRTIM_WaveformCompareConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_HRTIM_Init+0x398>
  {
    Error_Handler();
 8000e98:	f001 fe9c 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8000e9c:	4803      	ldr	r0, [pc, #12]	@ (8000eac <MX_HRTIM_Init+0x3a8>)
 8000e9e:	f001 fef3 	bl	8002c88 <HAL_HRTIM_MspPostInit>

}
 8000ea2:	bf00      	nop
 8000ea4:	37a8      	adds	r7, #168	@ 0xa8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	24000204 	.word	0x24000204

08000eb0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000eb4:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000eb6:	4a14      	ldr	r2, [pc, #80]	@ (8000f08 <MX_LPTIM1_Init+0x58>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000eba:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000ec0:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ec8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ecc:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_LOW;
 8000ece:	4b0d      	ldr	r3, [pc, #52]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ed0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000ed4:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000edc:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000eee:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <MX_LPTIM1_Init+0x54>)
 8000ef0:	f004 ff82 	bl	8005df8 <HAL_LPTIM_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8000efa:	f001 fe6b 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	240002e0 	.word	0x240002e0
 8000f08:	40002400 	.word	0x40002400

08000f0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b09a      	sub	sp, #104	@ 0x68
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f12:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f20:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
 8000f3c:	615a      	str	r2, [r3, #20]
 8000f3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	222c      	movs	r2, #44	@ 0x2c
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f00c fdaf 	bl	800daaa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f4c:	4b55      	ldr	r3, [pc, #340]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f4e:	4a56      	ldr	r2, [pc, #344]	@ (80010a8 <MX_TIM1_Init+0x19c>)
 8000f50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f52:	4b54      	ldr	r3, [pc, #336]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f58:	4b52      	ldr	r3, [pc, #328]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000-1;
 8000f5e:	4b51      	ldr	r3, [pc, #324]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f60:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000f64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f66:	4b4f      	ldr	r3, [pc, #316]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f6c:	4b4d      	ldr	r3, [pc, #308]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f72:	4b4c      	ldr	r3, [pc, #304]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f74:	2280      	movs	r2, #128	@ 0x80
 8000f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f78:	484a      	ldr	r0, [pc, #296]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f7a:	f008 f9df 	bl	800933c <HAL_TIM_Base_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f84:	f001 fe26 	bl	8002bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f8e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f92:	4619      	mov	r1, r3
 8000f94:	4843      	ldr	r0, [pc, #268]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000f96:	f008 fe2d 	bl	8009bf4 <HAL_TIM_ConfigClockSource>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000fa0:	f001 fe18 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fa4:	483f      	ldr	r0, [pc, #252]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000fa6:	f008 fa99 	bl	80094dc <HAL_TIM_PWM_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000fb0:	f001 fe10 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fb4:	2320      	movs	r3, #32
 8000fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fc0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4837      	ldr	r0, [pc, #220]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000fc8:	f009 fb74 	bl	800a6b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000fd2:	f001 fdff 	bl	8002bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd6:	2360      	movs	r3, #96	@ 0x60
 8000fd8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fea:	2300      	movs	r3, #0
 8000fec:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	482a      	ldr	r0, [pc, #168]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8000ffc:	f008 fce6 	bl	80099cc <HAL_TIM_PWM_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001006:	f001 fde5 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800100a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800100e:	2204      	movs	r2, #4
 8001010:	4619      	mov	r1, r3
 8001012:	4824      	ldr	r0, [pc, #144]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8001014:	f008 fcda 	bl	80099cc <HAL_TIM_PWM_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800101e:	f001 fdd9 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001022:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001026:	2208      	movs	r2, #8
 8001028:	4619      	mov	r1, r3
 800102a:	481e      	ldr	r0, [pc, #120]	@ (80010a4 <MX_TIM1_Init+0x198>)
 800102c:	f008 fcce 	bl	80099cc <HAL_TIM_PWM_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001036:	f001 fdcd 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800103a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800103e:	220c      	movs	r2, #12
 8001040:	4619      	mov	r1, r3
 8001042:	4818      	ldr	r0, [pc, #96]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8001044:	f008 fcc2 	bl	80099cc <HAL_TIM_PWM_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800104e:	f001 fdc1 	bl	8002bd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001066:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800106a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001074:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4619      	mov	r1, r3
 8001086:	4807      	ldr	r0, [pc, #28]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8001088:	f009 fba2 	bl	800a7d0 <HAL_TIMEx_ConfigBreakDeadTime>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8001092:	f001 fd9f 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001096:	4803      	ldr	r0, [pc, #12]	@ (80010a4 <MX_TIM1_Init+0x198>)
 8001098:	f002 f814 	bl	80030c4 <HAL_TIM_MspPostInit>

}
 800109c:	bf00      	nop
 800109e:	3768      	adds	r7, #104	@ 0x68
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	24000318 	.word	0x24000318
 80010a8:	40010000 	.word	0x40010000

080010ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08e      	sub	sp, #56	@ 0x38
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010cc:	463b      	mov	r3, r7
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]
 80010da:	615a      	str	r2, [r3, #20]
 80010dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010de:	4b2d      	ldr	r3, [pc, #180]	@ (8001194 <MX_TIM2_Init+0xe8>)
 80010e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001194 <MX_TIM2_Init+0xe8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ec:	4b29      	ldr	r3, [pc, #164]	@ (8001194 <MX_TIM2_Init+0xe8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000-1;
 80010f2:	4b28      	ldr	r3, [pc, #160]	@ (8001194 <MX_TIM2_Init+0xe8>)
 80010f4:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80010f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fa:	4b26      	ldr	r3, [pc, #152]	@ (8001194 <MX_TIM2_Init+0xe8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001100:	4b24      	ldr	r3, [pc, #144]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001102:	2280      	movs	r2, #128	@ 0x80
 8001104:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001106:	4823      	ldr	r0, [pc, #140]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001108:	f008 f918 	bl	800933c <HAL_TIM_Base_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001112:	f001 fd5f 	bl	8002bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001116:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800111a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800111c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001120:	4619      	mov	r1, r3
 8001122:	481c      	ldr	r0, [pc, #112]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001124:	f008 fd66 	bl	8009bf4 <HAL_TIM_ConfigClockSource>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800112e:	f001 fd51 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001132:	4818      	ldr	r0, [pc, #96]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001134:	f008 f9d2 	bl	80094dc <HAL_TIM_PWM_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800113e:	f001 fd49 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	4619      	mov	r1, r3
 8001150:	4810      	ldr	r0, [pc, #64]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001152:	f009 faaf 	bl	800a6b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800115c:	f001 fd3a 	bl	8002bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001160:	2360      	movs	r3, #96	@ 0x60
 8001162:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001170:	463b      	mov	r3, r7
 8001172:	2200      	movs	r2, #0
 8001174:	4619      	mov	r1, r3
 8001176:	4807      	ldr	r0, [pc, #28]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001178:	f008 fc28 	bl	80099cc <HAL_TIM_PWM_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001182:	f001 fd27 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001186:	4803      	ldr	r0, [pc, #12]	@ (8001194 <MX_TIM2_Init+0xe8>)
 8001188:	f001 ff9c 	bl	80030c4 <HAL_TIM_MspPostInit>

}
 800118c:	bf00      	nop
 800118e:	3738      	adds	r7, #56	@ 0x38
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	24000364 	.word	0x24000364

08001198 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08e      	sub	sp, #56	@ 0x38
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]
 80011c6:	615a      	str	r2, [r3, #20]
 80011c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011ca:	4b3d      	ldr	r3, [pc, #244]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011cc:	4a3d      	ldr	r2, [pc, #244]	@ (80012c4 <MX_TIM4_Init+0x12c>)
 80011ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011d0:	4b3b      	ldr	r3, [pc, #236]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d6:	4b3a      	ldr	r3, [pc, #232]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 24000-1;
 80011dc:	4b38      	ldr	r3, [pc, #224]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011de:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80011e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e4:	4b36      	ldr	r3, [pc, #216]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ea:	4b35      	ldr	r3, [pc, #212]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011ec:	2280      	movs	r2, #128	@ 0x80
 80011ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011f0:	4833      	ldr	r0, [pc, #204]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80011f2:	f008 f8a3 	bl	800933c <HAL_TIM_Base_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80011fc:	f001 fcea 	bl	8002bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001200:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001204:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001206:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800120a:	4619      	mov	r1, r3
 800120c:	482c      	ldr	r0, [pc, #176]	@ (80012c0 <MX_TIM4_Init+0x128>)
 800120e:	f008 fcf1 	bl	8009bf4 <HAL_TIM_ConfigClockSource>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001218:	f001 fcdc 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800121c:	4828      	ldr	r0, [pc, #160]	@ (80012c0 <MX_TIM4_Init+0x128>)
 800121e:	f008 f95d 	bl	80094dc <HAL_TIM_PWM_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001228:	f001 fcd4 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	4619      	mov	r1, r3
 800123a:	4821      	ldr	r0, [pc, #132]	@ (80012c0 <MX_TIM4_Init+0x128>)
 800123c:	f009 fa3a 	bl	800a6b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001246:	f001 fcc5 	bl	8002bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124a:	2360      	movs	r3, #96	@ 0x60
 800124c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	2200      	movs	r2, #0
 800125e:	4619      	mov	r1, r3
 8001260:	4817      	ldr	r0, [pc, #92]	@ (80012c0 <MX_TIM4_Init+0x128>)
 8001262:	f008 fbb3 	bl	80099cc <HAL_TIM_PWM_ConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800126c:	f001 fcb2 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	2204      	movs	r2, #4
 8001274:	4619      	mov	r1, r3
 8001276:	4812      	ldr	r0, [pc, #72]	@ (80012c0 <MX_TIM4_Init+0x128>)
 8001278:	f008 fba8 	bl	80099cc <HAL_TIM_PWM_ConfigChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001282:	f001 fca7 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001286:	463b      	mov	r3, r7
 8001288:	2208      	movs	r2, #8
 800128a:	4619      	mov	r1, r3
 800128c:	480c      	ldr	r0, [pc, #48]	@ (80012c0 <MX_TIM4_Init+0x128>)
 800128e:	f008 fb9d 	bl	80099cc <HAL_TIM_PWM_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001298:	f001 fc9c 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	220c      	movs	r2, #12
 80012a0:	4619      	mov	r1, r3
 80012a2:	4807      	ldr	r0, [pc, #28]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80012a4:	f008 fb92 	bl	80099cc <HAL_TIM_PWM_ConfigChannel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 80012ae:	f001 fc91 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80012b2:	4803      	ldr	r0, [pc, #12]	@ (80012c0 <MX_TIM4_Init+0x128>)
 80012b4:	f001 ff06 	bl	80030c4 <HAL_TIM_MspPostInit>

}
 80012b8:	bf00      	nop
 80012ba:	3738      	adds	r7, #56	@ 0x38
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	240003b0 	.word	0x240003b0
 80012c4:	40000800 	.word	0x40000800

080012c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08e      	sub	sp, #56	@ 0x38
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e8:	463b      	mov	r3, r7
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
 80012f6:	615a      	str	r2, [r3, #20]
 80012f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012fa:	4b32      	ldr	r3, [pc, #200]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 80012fc:	4a32      	ldr	r2, [pc, #200]	@ (80013c8 <MX_TIM5_Init+0x100>)
 80012fe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001300:	4b30      	ldr	r3, [pc, #192]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001302:	2200      	movs	r2, #0
 8001304:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001306:	4b2f      	ldr	r3, [pc, #188]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 24000-1;
 800130c:	4b2d      	ldr	r3, [pc, #180]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800130e:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001312:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001314:	4b2b      	ldr	r3, [pc, #172]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800131a:	4b2a      	ldr	r3, [pc, #168]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800131c:	2280      	movs	r2, #128	@ 0x80
 800131e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001320:	4828      	ldr	r0, [pc, #160]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001322:	f008 f80b 	bl	800933c <HAL_TIM_Base_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800132c:	f001 fc52 	bl	8002bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001330:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001334:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001336:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800133a:	4619      	mov	r1, r3
 800133c:	4821      	ldr	r0, [pc, #132]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800133e:	f008 fc59 	bl	8009bf4 <HAL_TIM_ConfigClockSource>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001348:	f001 fc44 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800134c:	481d      	ldr	r0, [pc, #116]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800134e:	f008 f8c5 	bl	80094dc <HAL_TIM_PWM_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001358:	f001 fc3c 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	4816      	ldr	r0, [pc, #88]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 800136c:	f009 f9a2 	bl	800a6b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001376:	f001 fc2d 	bl	8002bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137a:	2360      	movs	r3, #96	@ 0x60
 800137c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800138a:	463b      	mov	r3, r7
 800138c:	2204      	movs	r2, #4
 800138e:	4619      	mov	r1, r3
 8001390:	480c      	ldr	r0, [pc, #48]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 8001392:	f008 fb1b 	bl	80099cc <HAL_TIM_PWM_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800139c:	f001 fc1a 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013a0:	463b      	mov	r3, r7
 80013a2:	2208      	movs	r2, #8
 80013a4:	4619      	mov	r1, r3
 80013a6:	4807      	ldr	r0, [pc, #28]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 80013a8:	f008 fb10 	bl	80099cc <HAL_TIM_PWM_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 80013b2:	f001 fc0f 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80013b6:	4803      	ldr	r0, [pc, #12]	@ (80013c4 <MX_TIM5_Init+0xfc>)
 80013b8:	f001 fe84 	bl	80030c4 <HAL_TIM_MspPostInit>

}
 80013bc:	bf00      	nop
 80013be:	3738      	adds	r7, #56	@ 0x38
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	240003fc 	.word	0x240003fc
 80013c8:	40000c00 	.word	0x40000c00

080013cc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b09a      	sub	sp, #104	@ 0x68
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	615a      	str	r2, [r3, #20]
 80013fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	222c      	movs	r2, #44	@ 0x2c
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f00c fb4f 	bl	800daaa <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800140c:	4b42      	ldr	r3, [pc, #264]	@ (8001518 <MX_TIM8_Init+0x14c>)
 800140e:	4a43      	ldr	r2, [pc, #268]	@ (800151c <MX_TIM8_Init+0x150>)
 8001410:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001412:	4b41      	ldr	r3, [pc, #260]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001414:	2200      	movs	r2, #0
 8001416:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001418:	4b3f      	ldr	r3, [pc, #252]	@ (8001518 <MX_TIM8_Init+0x14c>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 24000-1;
 800141e:	4b3e      	ldr	r3, [pc, #248]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001420:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001424:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001426:	4b3c      	ldr	r3, [pc, #240]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800142c:	4b3a      	ldr	r3, [pc, #232]	@ (8001518 <MX_TIM8_Init+0x14c>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001432:	4b39      	ldr	r3, [pc, #228]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001438:	4837      	ldr	r0, [pc, #220]	@ (8001518 <MX_TIM8_Init+0x14c>)
 800143a:	f007 ff7f 	bl	800933c <HAL_TIM_Base_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001444:	f001 fbc6 	bl	8002bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001448:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800144c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800144e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001452:	4619      	mov	r1, r3
 8001454:	4830      	ldr	r0, [pc, #192]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001456:	f008 fbcd 	bl	8009bf4 <HAL_TIM_ConfigClockSource>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001460:	f001 fbb8 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001464:	482c      	ldr	r0, [pc, #176]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001466:	f008 f839 	bl	80094dc <HAL_TIM_PWM_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001470:	f001 fbb0 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001474:	2300      	movs	r3, #0
 8001476:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001480:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001484:	4619      	mov	r1, r3
 8001486:	4824      	ldr	r0, [pc, #144]	@ (8001518 <MX_TIM8_Init+0x14c>)
 8001488:	f009 f914 	bl	800a6b4 <HAL_TIMEx_MasterConfigSynchronization>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001492:	f001 fb9f 	bl	8002bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001496:	2360      	movs	r3, #96	@ 0x60
 8001498:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149e:	2300      	movs	r3, #0
 80014a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014b2:	220c      	movs	r2, #12
 80014b4:	4619      	mov	r1, r3
 80014b6:	4818      	ldr	r0, [pc, #96]	@ (8001518 <MX_TIM8_Init+0x14c>)
 80014b8:	f008 fa88 	bl	80099cc <HAL_TIM_PWM_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80014c2:	f001 fb87 	bl	8002bd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	4619      	mov	r1, r3
 80014fa:	4807      	ldr	r0, [pc, #28]	@ (8001518 <MX_TIM8_Init+0x14c>)
 80014fc:	f009 f968 	bl	800a7d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001506:	f001 fb65 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800150a:	4803      	ldr	r0, [pc, #12]	@ (8001518 <MX_TIM8_Init+0x14c>)
 800150c:	f001 fdda 	bl	80030c4 <HAL_TIM_MspPostInit>

}
 8001510:	bf00      	nop
 8001512:	3768      	adds	r7, #104	@ 0x68
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	24000448 	.word	0x24000448
 800151c:	40010400 	.word	0x40010400

08001520 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08e      	sub	sp, #56	@ 0x38
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001526:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001540:	463b      	mov	r3, r7
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
 800154c:	611a      	str	r2, [r3, #16]
 800154e:	615a      	str	r2, [r3, #20]
 8001550:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001552:	4b2d      	ldr	r3, [pc, #180]	@ (8001608 <MX_TIM12_Init+0xe8>)
 8001554:	4a2d      	ldr	r2, [pc, #180]	@ (800160c <MX_TIM12_Init+0xec>)
 8001556:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001558:	4b2b      	ldr	r3, [pc, #172]	@ (8001608 <MX_TIM12_Init+0xe8>)
 800155a:	2200      	movs	r2, #0
 800155c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155e:	4b2a      	ldr	r3, [pc, #168]	@ (8001608 <MX_TIM12_Init+0xe8>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 24000-1;
 8001564:	4b28      	ldr	r3, [pc, #160]	@ (8001608 <MX_TIM12_Init+0xe8>)
 8001566:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800156a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156c:	4b26      	ldr	r3, [pc, #152]	@ (8001608 <MX_TIM12_Init+0xe8>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001572:	4b25      	ldr	r3, [pc, #148]	@ (8001608 <MX_TIM12_Init+0xe8>)
 8001574:	2280      	movs	r2, #128	@ 0x80
 8001576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001578:	4823      	ldr	r0, [pc, #140]	@ (8001608 <MX_TIM12_Init+0xe8>)
 800157a:	f007 fedf 	bl	800933c <HAL_TIM_Base_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM12_Init+0x68>
  {
    Error_Handler();
 8001584:	f001 fb26 	bl	8002bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001588:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800158c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800158e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001592:	4619      	mov	r1, r3
 8001594:	481c      	ldr	r0, [pc, #112]	@ (8001608 <MX_TIM12_Init+0xe8>)
 8001596:	f008 fb2d 	bl	8009bf4 <HAL_TIM_ConfigClockSource>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM12_Init+0x84>
  {
    Error_Handler();
 80015a0:	f001 fb18 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80015a4:	4818      	ldr	r0, [pc, #96]	@ (8001608 <MX_TIM12_Init+0xe8>)
 80015a6:	f007 ff99 	bl	80094dc <HAL_TIM_PWM_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM12_Init+0x94>
  {
    Error_Handler();
 80015b0:	f001 fb10 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	4619      	mov	r1, r3
 80015c2:	4811      	ldr	r0, [pc, #68]	@ (8001608 <MX_TIM12_Init+0xe8>)
 80015c4:	f009 f876 	bl	800a6b4 <HAL_TIMEx_MasterConfigSynchronization>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 80015ce:	f001 fb01 	bl	8002bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d2:	2360      	movs	r3, #96	@ 0x60
 80015d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015e2:	463b      	mov	r3, r7
 80015e4:	2204      	movs	r2, #4
 80015e6:	4619      	mov	r1, r3
 80015e8:	4807      	ldr	r0, [pc, #28]	@ (8001608 <MX_TIM12_Init+0xe8>)
 80015ea:	f008 f9ef 	bl	80099cc <HAL_TIM_PWM_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM12_Init+0xd8>
  {
    Error_Handler();
 80015f4:	f001 faee 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80015f8:	4803      	ldr	r0, [pc, #12]	@ (8001608 <MX_TIM12_Init+0xe8>)
 80015fa:	f001 fd63 	bl	80030c4 <HAL_TIM_MspPostInit>

}
 80015fe:	bf00      	nop
 8001600:	3738      	adds	r7, #56	@ 0x38
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	24000494 	.word	0x24000494
 800160c:	40001800 	.word	0x40001800

08001610 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	615a      	str	r2, [r3, #20]
 8001626:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001628:	4b1e      	ldr	r3, [pc, #120]	@ (80016a4 <MX_TIM13_Init+0x94>)
 800162a:	4a1f      	ldr	r2, [pc, #124]	@ (80016a8 <MX_TIM13_Init+0x98>)
 800162c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800162e:	4b1d      	ldr	r3, [pc, #116]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001630:	2200      	movs	r2, #0
 8001632:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 24000-1;
 800163a:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <MX_TIM13_Init+0x94>)
 800163c:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001640:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001642:	4b18      	ldr	r3, [pc, #96]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001648:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <MX_TIM13_Init+0x94>)
 800164a:	2280      	movs	r2, #128	@ 0x80
 800164c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800164e:	4815      	ldr	r0, [pc, #84]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001650:	f007 fe74 	bl	800933c <HAL_TIM_Base_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800165a:	f001 fabb 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800165e:	4811      	ldr	r0, [pc, #68]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001660:	f007 ff3c 	bl	80094dc <HAL_TIM_PWM_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800166a:	f001 fab3 	bl	8002bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166e:	2360      	movs	r3, #96	@ 0x60
 8001670:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	4619      	mov	r1, r3
 8001684:	4807      	ldr	r0, [pc, #28]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001686:	f008 f9a1 	bl	80099cc <HAL_TIM_PWM_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001690:	f001 faa0 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001694:	4803      	ldr	r0, [pc, #12]	@ (80016a4 <MX_TIM13_Init+0x94>)
 8001696:	f001 fd15 	bl	80030c4 <HAL_TIM_MspPostInit>

}
 800169a:	bf00      	nop
 800169c:	3720      	adds	r7, #32
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	240004e0 	.word	0x240004e0
 80016a8:	40001c00 	.word	0x40001c00

080016ac <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
 80016c0:	615a      	str	r2, [r3, #20]
 80016c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80016c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001744 <MX_TIM14_Init+0x98>)
 80016c8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80016ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 24000-1;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016d8:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80016dc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016de:	4b18      	ldr	r3, [pc, #96]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016e4:	4b16      	ldr	r3, [pc, #88]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016e6:	2280      	movs	r2, #128	@ 0x80
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80016ea:	4815      	ldr	r0, [pc, #84]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016ec:	f007 fe26 	bl	800933c <HAL_TIM_Base_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80016f6:	f001 fa6d 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80016fa:	4811      	ldr	r0, [pc, #68]	@ (8001740 <MX_TIM14_Init+0x94>)
 80016fc:	f007 feee 	bl	80094dc <HAL_TIM_PWM_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001706:	f001 fa65 	bl	8002bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800170a:	2360      	movs	r3, #96	@ 0x60
 800170c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2200      	movs	r2, #0
 800171e:	4619      	mov	r1, r3
 8001720:	4807      	ldr	r0, [pc, #28]	@ (8001740 <MX_TIM14_Init+0x94>)
 8001722:	f008 f953 	bl	80099cc <HAL_TIM_PWM_ConfigChannel>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800172c:	f001 fa52 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001730:	4803      	ldr	r0, [pc, #12]	@ (8001740 <MX_TIM14_Init+0x94>)
 8001732:	f001 fcc7 	bl	80030c4 <HAL_TIM_MspPostInit>

}
 8001736:	bf00      	nop
 8001738:	3720      	adds	r7, #32
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2400052c 	.word	0x2400052c
 8001744:	40002000 	.word	0x40002000

08001748 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b09a      	sub	sp, #104	@ 0x68
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001768:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
 8001778:	615a      	str	r2, [r3, #20]
 800177a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	222c      	movs	r2, #44	@ 0x2c
 8001780:	2100      	movs	r1, #0
 8001782:	4618      	mov	r0, r3
 8001784:	f00c f991 	bl	800daaa <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001788:	4b45      	ldr	r3, [pc, #276]	@ (80018a0 <MX_TIM15_Init+0x158>)
 800178a:	4a46      	ldr	r2, [pc, #280]	@ (80018a4 <MX_TIM15_Init+0x15c>)
 800178c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800178e:	4b44      	ldr	r3, [pc, #272]	@ (80018a0 <MX_TIM15_Init+0x158>)
 8001790:	2200      	movs	r2, #0
 8001792:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001794:	4b42      	ldr	r3, [pc, #264]	@ (80018a0 <MX_TIM15_Init+0x158>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 24000-1;
 800179a:	4b41      	ldr	r3, [pc, #260]	@ (80018a0 <MX_TIM15_Init+0x158>)
 800179c:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80017a0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a2:	4b3f      	ldr	r3, [pc, #252]	@ (80018a0 <MX_TIM15_Init+0x158>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80017a8:	4b3d      	ldr	r3, [pc, #244]	@ (80018a0 <MX_TIM15_Init+0x158>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ae:	4b3c      	ldr	r3, [pc, #240]	@ (80018a0 <MX_TIM15_Init+0x158>)
 80017b0:	2280      	movs	r2, #128	@ 0x80
 80017b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80017b4:	483a      	ldr	r0, [pc, #232]	@ (80018a0 <MX_TIM15_Init+0x158>)
 80017b6:	f007 fdc1 	bl	800933c <HAL_TIM_Base_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80017c0:	f001 fa08 	bl	8002bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80017ca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80017ce:	4619      	mov	r1, r3
 80017d0:	4833      	ldr	r0, [pc, #204]	@ (80018a0 <MX_TIM15_Init+0x158>)
 80017d2:	f008 fa0f 	bl	8009bf4 <HAL_TIM_ConfigClockSource>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80017dc:	f001 f9fa 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80017e0:	482f      	ldr	r0, [pc, #188]	@ (80018a0 <MX_TIM15_Init+0x158>)
 80017e2:	f007 fe7b 	bl	80094dc <HAL_TIM_PWM_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80017ec:	f001 f9f2 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f0:	2300      	movs	r3, #0
 80017f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80017f8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80017fc:	4619      	mov	r1, r3
 80017fe:	4828      	ldr	r0, [pc, #160]	@ (80018a0 <MX_TIM15_Init+0x158>)
 8001800:	f008 ff58 	bl	800a6b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800180a:	f001 f9e3 	bl	8002bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800180e:	2360      	movs	r3, #96	@ 0x60
 8001810:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001816:	2300      	movs	r3, #0
 8001818:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800181a:	2300      	movs	r3, #0
 800181c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001826:	2300      	movs	r3, #0
 8001828:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800182a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800182e:	2200      	movs	r2, #0
 8001830:	4619      	mov	r1, r3
 8001832:	481b      	ldr	r0, [pc, #108]	@ (80018a0 <MX_TIM15_Init+0x158>)
 8001834:	f008 f8ca 	bl	80099cc <HAL_TIM_PWM_ConfigChannel>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 800183e:	f001 f9c9 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001842:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001846:	2204      	movs	r2, #4
 8001848:	4619      	mov	r1, r3
 800184a:	4815      	ldr	r0, [pc, #84]	@ (80018a0 <MX_TIM15_Init+0x158>)
 800184c:	f008 f8be 	bl	80099cc <HAL_TIM_PWM_ConfigChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM15_Init+0x112>
  {
    Error_Handler();
 8001856:	f001 f9bd 	bl	8002bd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800186e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001872:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	4619      	mov	r1, r3
 8001880:	4807      	ldr	r0, [pc, #28]	@ (80018a0 <MX_TIM15_Init+0x158>)
 8001882:	f008 ffa5 	bl	800a7d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM15_Init+0x148>
  {
    Error_Handler();
 800188c:	f001 f9a2 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001890:	4803      	ldr	r0, [pc, #12]	@ (80018a0 <MX_TIM15_Init+0x158>)
 8001892:	f001 fc17 	bl	80030c4 <HAL_TIM_MspPostInit>

}
 8001896:	bf00      	nop
 8001898:	3768      	adds	r7, #104	@ 0x68
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	24000578 	.word	0x24000578
 80018a4:	40014000 	.word	0x40014000

080018a8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b092      	sub	sp, #72	@ 0x48
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	611a      	str	r2, [r3, #16]
 80018be:	615a      	str	r2, [r3, #20]
 80018c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018c2:	463b      	mov	r3, r7
 80018c4:	222c      	movs	r2, #44	@ 0x2c
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f00c f8ee 	bl	800daaa <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80018ce:	4b31      	ldr	r3, [pc, #196]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018d0:	4a31      	ldr	r2, [pc, #196]	@ (8001998 <MX_TIM16_Init+0xf0>)
 80018d2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80018d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018da:	4b2e      	ldr	r3, [pc, #184]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 24000-1;
 80018e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018e2:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80018e6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018ee:	4b29      	ldr	r3, [pc, #164]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018f4:	4b27      	ldr	r3, [pc, #156]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018f6:	2280      	movs	r2, #128	@ 0x80
 80018f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018fa:	4826      	ldr	r0, [pc, #152]	@ (8001994 <MX_TIM16_Init+0xec>)
 80018fc:	f007 fd1e 	bl	800933c <HAL_TIM_Base_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001906:	f001 f965 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800190a:	4822      	ldr	r0, [pc, #136]	@ (8001994 <MX_TIM16_Init+0xec>)
 800190c:	f007 fde6 	bl	80094dc <HAL_TIM_PWM_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001916:	f001 f95d 	bl	8002bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800191a:	2360      	movs	r3, #96	@ 0x60
 800191c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001922:	2300      	movs	r3, #0
 8001924:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001926:	2300      	movs	r3, #0
 8001928:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800192e:	2300      	movs	r3, #0
 8001930:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001936:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800193a:	2200      	movs	r2, #0
 800193c:	4619      	mov	r1, r3
 800193e:	4815      	ldr	r0, [pc, #84]	@ (8001994 <MX_TIM16_Init+0xec>)
 8001940:	f008 f844 	bl	80099cc <HAL_TIM_PWM_ConfigChannel>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800194a:	f001 f943 	bl	8002bd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001962:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001966:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001970:	463b      	mov	r3, r7
 8001972:	4619      	mov	r1, r3
 8001974:	4807      	ldr	r0, [pc, #28]	@ (8001994 <MX_TIM16_Init+0xec>)
 8001976:	f008 ff2b 	bl	800a7d0 <HAL_TIMEx_ConfigBreakDeadTime>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001980:	f001 f928 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001984:	4803      	ldr	r0, [pc, #12]	@ (8001994 <MX_TIM16_Init+0xec>)
 8001986:	f001 fb9d 	bl	80030c4 <HAL_TIM_MspPostInit>

}
 800198a:	bf00      	nop
 800198c:	3748      	adds	r7, #72	@ 0x48
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	240005c4 	.word	0x240005c4
 8001998:	40014400 	.word	0x40014400

0800199c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019a0:	4b25      	ldr	r3, [pc, #148]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019a2:	4a26      	ldr	r2, [pc, #152]	@ (8001a3c <MX_UART4_Init+0xa0>)
 80019a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80019a6:	4b24      	ldr	r3, [pc, #144]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019ae:	4b22      	ldr	r3, [pc, #136]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019b4:	4b20      	ldr	r3, [pc, #128]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019c2:	220c      	movs	r2, #12
 80019c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019d2:	4b19      	ldr	r3, [pc, #100]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019d8:	4b17      	ldr	r3, [pc, #92]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019de:	4b16      	ldr	r3, [pc, #88]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019e4:	4814      	ldr	r0, [pc, #80]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019e6:	f008 ff8f 	bl	800a908 <HAL_UART_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80019f0:	f001 f8f0 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019f4:	2100      	movs	r1, #0
 80019f6:	4810      	ldr	r0, [pc, #64]	@ (8001a38 <MX_UART4_Init+0x9c>)
 80019f8:	f00b fa51 	bl	800ce9e <HAL_UARTEx_SetTxFifoThreshold>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001a02:	f001 f8e7 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a06:	2100      	movs	r1, #0
 8001a08:	480b      	ldr	r0, [pc, #44]	@ (8001a38 <MX_UART4_Init+0x9c>)
 8001a0a:	f00b fa86 	bl	800cf1a <HAL_UARTEx_SetRxFifoThreshold>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001a14:	f001 f8de 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001a18:	4807      	ldr	r0, [pc, #28]	@ (8001a38 <MX_UART4_Init+0x9c>)
 8001a1a:	f00b fa07 	bl	800ce2c <HAL_UARTEx_DisableFifoMode>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001a24:	f001 f8d6 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */
  UART4->CR1 |= (USART_CR1_TE|USART_CR1_RXNEIE|USART_CR1_RE|USART_CR1_UE);
 8001a28:	4b04      	ldr	r3, [pc, #16]	@ (8001a3c <MX_UART4_Init+0xa0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a03      	ldr	r2, [pc, #12]	@ (8001a3c <MX_UART4_Init+0xa0>)
 8001a2e:	f043 032d 	orr.w	r3, r3, #45	@ 0x2d
 8001a32:	6013      	str	r3, [r2, #0]
  /* USER CODE END UART4_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	24000610 	.word	0x24000610
 8001a3c:	40004c00 	.word	0x40004c00

08001a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	@ 0x30
 8001a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a46:	f107 031c 	add.w	r3, r7, #28
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
 8001a54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a56:	4b59      	ldr	r3, [pc, #356]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a5c:	4a57      	ldr	r2, [pc, #348]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a5e:	f043 0310 	orr.w	r3, r3, #16
 8001a62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a66:	4b55      	ldr	r3, [pc, #340]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a74:	4b51      	ldr	r3, [pc, #324]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a7a:	4a50      	ldr	r2, [pc, #320]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a7c:	f043 0304 	orr.w	r3, r3, #4
 8001a80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a84:	4b4d      	ldr	r3, [pc, #308]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a92:	4b4a      	ldr	r3, [pc, #296]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a98:	4a48      	ldr	r2, [pc, #288]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001a9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aa2:	4b46      	ldr	r3, [pc, #280]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab0:	4b42      	ldr	r3, [pc, #264]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab6:	4a41      	ldr	r2, [pc, #260]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ac0:	4b3e      	ldr	r3, [pc, #248]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	4b3b      	ldr	r3, [pc, #236]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ad4:	4a39      	ldr	r2, [pc, #228]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001ad6:	f043 0302 	orr.w	r3, r3, #2
 8001ada:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ade:	4b37      	ldr	r3, [pc, #220]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aec:	4b33      	ldr	r3, [pc, #204]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001af2:	4a32      	ldr	r2, [pc, #200]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001af4:	f043 0308 	orr.w	r3, r3, #8
 8001af8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001afc:	4b2f      	ldr	r3, [pc, #188]	@ (8001bbc <MX_GPIO_Init+0x17c>)
 8001afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f249 519f 	movw	r1, #38303	@ 0x959f
 8001b10:	482b      	ldr	r0, [pc, #172]	@ (8001bc0 <MX_GPIO_Init+0x180>)
 8001b12:	f003 f86f 	bl	8004bf4 <HAL_GPIO_WritePin>
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001b1c:	4829      	ldr	r0, [pc, #164]	@ (8001bc4 <MX_GPIO_Init+0x184>)
 8001b1e:	f003 f869 	bl	8004bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8001b28:	4827      	ldr	r0, [pc, #156]	@ (8001bc8 <MX_GPIO_Init+0x188>)
 8001b2a:	f003 f863 	bl	8004bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f640 71f7 	movw	r1, #4087	@ 0xff7
 8001b34:	4825      	ldr	r0, [pc, #148]	@ (8001bcc <MX_GPIO_Init+0x18c>)
 8001b36:	f003 f85d 	bl	8004bf4 <HAL_GPIO_WritePin>
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : TIM1_CH3_PH_Pin TIM1_CH4_PH_Pin TIM2_CH1_PH_Pin TIM8_CH4_PH_Pin
                           TIM12_CH2_PH_Pin TIM13_CH1_PH_Pin TIM14_CH1_PH_Pin TIM15_CH1_PH_Pin
                           TIM1_CH1_PH_Pin TIM1_CH2_PH_Pin */
  GPIO_InitStruct.Pin = TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 8001b3a:	f249 539f 	movw	r3, #38303	@ 0x959f
 8001b3e:	61fb      	str	r3, [r7, #28]
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b40:	2301      	movs	r3, #1
 8001b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	4619      	mov	r1, r3
 8001b52:	481b      	ldr	r0, [pc, #108]	@ (8001bc0 <MX_GPIO_Init+0x180>)
 8001b54:	f002 fe9e 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH4_PH_Pin TIM5_CH2_PH_Pin TIM5_CH3_PH_Pin TIM4_CH3_PH_Pin */
  GPIO_InitStruct.Pin = TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin;
 8001b58:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6a:	f107 031c 	add.w	r3, r7, #28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4814      	ldr	r0, [pc, #80]	@ (8001bc4 <MX_GPIO_Init+0x184>)
 8001b72:	f002 fe8f 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH1_PH_Pin TIM4_CH2_PH_Pin */
  GPIO_InitStruct.Pin = TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin;
 8001b76:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b88:	f107 031c 	add.w	r3, r7, #28
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	480e      	ldr	r0, [pc, #56]	@ (8001bc8 <MX_GPIO_Init+0x188>)
 8001b90:	f002 fe80 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pins : HRTIM_CHC1_PH_Pin HRTIM_CHC2_PH_Pin HRTIM_CHD1_PH_Pin HRTIM_CHD2_PH_Pin
                           TIM15_CH2_PH_Pin TIM16_CH1_PH_Pin LPTIM1_OUT_PH_Pin HRTIM_CHA1_PH_Pin
                           HRTIM_CHA2_PH_Pin HRTIM_CHB1_PH_Pin HRTIM_CHB2_PH_Pin */
  GPIO_InitStruct.Pin = HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 8001b94:	f640 73f7 	movw	r3, #4087	@ 0xff7
 8001b98:	61fb      	str	r3, [r7, #28]
                          |TIM15_CH2_PH_Pin|TIM16_CH1_PH_Pin|LPTIM1_OUT_PH_Pin|HRTIM_CHA1_PH_Pin
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	4619      	mov	r1, r3
 8001bac:	4807      	ldr	r0, [pc, #28]	@ (8001bcc <MX_GPIO_Init+0x18c>)
 8001bae:	f002 fe71 	bl	8004894 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bb2:	bf00      	nop
 8001bb4:	3730      	adds	r7, #48	@ 0x30
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	58024400 	.word	0x58024400
 8001bc0:	58021000 	.word	0x58021000
 8001bc4:	58020800 	.word	0x58020800
 8001bc8:	58020400 	.word	0x58020400
 8001bcc:	58020c00 	.word	0x58020c00

08001bd0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bd0:	b4b0      	push	{r4, r5, r7}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	static int i = 0;  // index for actuator update
	static int t = 0; // variable to track time
	const int period = 10; // number of timer rollovers between updates
 8001bd8:	230a      	movs	r3, #10
 8001bda:	617b      	str	r3, [r7, #20]
	const double step = 0.3;// max step size in volts
 8001bdc:	a32e      	add	r3, pc, #184	@ (adr r3, 8001c98 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	//Used to account for period in time clicks for UART Output
		sys_timer+= 24000;
 8001be6:	4b24      	ldr	r3, [pc, #144]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bec:	f645 51c0 	movw	r1, #24000	@ 0x5dc0
 8001bf0:	1854      	adds	r4, r2, r1
 8001bf2:	f143 0500 	adc.w	r5, r3, #0
 8001bf6:	4b20      	ldr	r3, [pc, #128]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001bf8:	e9c3 4500 	strd	r4, r5, [r3]

	//Used to account for period in time-scale for UART Output
		period_ticks ++;
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	3301      	adds	r3, #1
 8001c02:	4a1e      	ldr	r2, [pc, #120]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001c04:	6013      	str	r3, [r2, #0]


    if (htim==&htim1){
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a1d      	ldr	r2, [pc, #116]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d12d      	bne.n	8001c6a <HAL_TIM_PeriodElapsedCallback+0x9a>
    	t+=1;
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	4a1b      	ldr	r2, [pc, #108]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001c16:	6013      	str	r3, [r2, #0]
    	if(t%period == 0)
 8001c18:	4b1a      	ldr	r3, [pc, #104]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	fb93 f2f2 	sdiv	r2, r3, r2
 8001c22:	6979      	ldr	r1, [r7, #20]
 8001c24:	fb01 f202 	mul.w	r2, r1, r2
 8001c28:	1a9b      	subs	r3, r3, r2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d11d      	bne.n	8001c6a <HAL_TIM_PeriodElapsedCallback+0x9a>
    	{
    		if(i>=SIN_PERIOD) i = 0;
 8001c2e:	4b16      	ldr	r3, [pc, #88]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c36:	db02      	blt.n	8001c3e <HAL_TIM_PeriodElapsedCallback+0x6e>
 8001c38:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
    		//update the output
    		ref = sine_vals[i]*step;
 8001c3e:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a12      	ldr	r2, [pc, #72]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4413      	add	r3, r2
 8001c48:	ed93 6b00 	vldr	d6, [r3]
 8001c4c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001c50:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c54:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001c56:	ed83 7b00 	vstr	d7, [r3]
			// inform main that the actuators need an update
    		i+=1;
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	4a09      	ldr	r2, [pc, #36]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001c62:	6013      	str	r3, [r2, #0]
			ctrl_tmr_expired = TRUE;
 8001c64:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
    	}
	}

}
 8001c6a:	bf00      	nop
 8001c6c:	371c      	adds	r7, #28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bcb0      	pop	{r4, r5, r7}
 8001c72:	4770      	bx	lr
 8001c74:	f3af 8000 	nop.w
 8001c78:	240025f0 	.word	0x240025f0
 8001c7c:	240025f8 	.word	0x240025f8
 8001c80:	24000318 	.word	0x24000318
 8001c84:	2400364c 	.word	0x2400364c
 8001c88:	24003650 	.word	0x24003650
 8001c8c:	240006b0 	.word	0x240006b0
 8001c90:	240006a8 	.word	0x240006a8
 8001c94:	240006a4 	.word	0x240006a4
 8001c98:	33333333 	.word	0x33333333
 8001c9c:	3fd33333 	.word	0x3fd33333

08001ca0 <UART_update>:

/*Writes commands into the circular buffer as they are sent,
once the elements is equal to the command length, a flag is sent*/
void UART_update(){
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
			if(num == CMD_LENGTH){
				cmd_ready = TRUE;
			}
			*/
	uint8_t c;
	c = UART4->RDR;
 8001ca6:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <UART_update+0x2c>)
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001caa:	71fb      	strb	r3, [r7, #7]

	run_state_machine(c);
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 f86e 	bl	8001d90 <run_state_machine>

	HAL_UART_Receive_IT(&huart4, rx_buff, sizeof(rx_buff));
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	4906      	ldr	r1, [pc, #24]	@ (8001cd0 <UART_update+0x30>)
 8001cb8:	4806      	ldr	r0, [pc, #24]	@ (8001cd4 <UART_update+0x34>)
 8001cba:	f008 fe75 	bl	800a9a8 <HAL_UART_Receive_IT>
	data_ready = FALSE;
 8001cbe:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <UART_update+0x38>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40004c00 	.word	0x40004c00
 8001cd0:	24003648 	.word	0x24003648
 8001cd4:	24000610 	.word	0x24000610
 8001cd8:	240025fc 	.word	0x240025fc

08001cdc <command_update>:

/*Function that is called once the number of elements in the buffer
is equal to the command length. Fills elements into an array to print */
void command_update(){
 8001cdc:	b598      	push	{r3, r4, r7, lr}
 8001cde:	af00      	add	r7, sp, #0

	for(index = 0; index <= CMD_LENGTH ; index ++){
 8001ce0:	4b26      	ldr	r3, [pc, #152]	@ (8001d7c <command_update+0xa0>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	801a      	strh	r2, [r3, #0]
 8001ce6:	e015      	b.n	8001d14 <command_update+0x38>
		 circ_buff_message[index] = read_from_buffer(rxp);
 8001ce8:	4b25      	ldr	r3, [pc, #148]	@ (8001d80 <command_update+0xa4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a23      	ldr	r2, [pc, #140]	@ (8001d7c <command_update+0xa0>)
 8001cee:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001cf2:	4614      	mov	r4, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 f958 	bl	8001faa <read_from_buffer>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b21      	ldr	r3, [pc, #132]	@ (8001d84 <command_update+0xa8>)
 8001d00:	551a      	strb	r2, [r3, r4]
	for(index = 0; index <= CMD_LENGTH ; index ++){
 8001d02:	4b1e      	ldr	r3, [pc, #120]	@ (8001d7c <command_update+0xa0>)
 8001d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	b21a      	sxth	r2, r3
 8001d10:	4b1a      	ldr	r3, [pc, #104]	@ (8001d7c <command_update+0xa0>)
 8001d12:	801a      	strh	r2, [r3, #0]
 8001d14:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <command_update+0xa0>)
 8001d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d1a:	2b36      	cmp	r3, #54	@ 0x36
 8001d1c:	dde4      	ble.n	8001ce8 <command_update+0xc>
	 }

	for(index = 0; index <= NUM_ACTUATORS ; index ++){
 8001d1e:	4b17      	ldr	r3, [pc, #92]	@ (8001d7c <command_update+0xa0>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	801a      	strh	r2, [r3, #0]
 8001d24:	e020      	b.n	8001d68 <command_update+0x8c>
		cmd_ref[index] = (circ_buff_message[(2*index)+1]<<8|circ_buff_message[2*index]);
 8001d26:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <command_update+0xa0>)
 8001d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	3301      	adds	r3, #1
 8001d30:	4a14      	ldr	r2, [pc, #80]	@ (8001d84 <command_update+0xa8>)
 8001d32:	5cd3      	ldrb	r3, [r2, r3]
 8001d34:	021b      	lsls	r3, r3, #8
 8001d36:	b21a      	sxth	r2, r3
 8001d38:	4b10      	ldr	r3, [pc, #64]	@ (8001d7c <command_update+0xa0>)
 8001d3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4910      	ldr	r1, [pc, #64]	@ (8001d84 <command_update+0xa8>)
 8001d42:	5ccb      	ldrb	r3, [r1, r3]
 8001d44:	b21b      	sxth	r3, r3
 8001d46:	490d      	ldr	r1, [pc, #52]	@ (8001d7c <command_update+0xa0>)
 8001d48:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b21a      	sxth	r2, r3
 8001d50:	4b0d      	ldr	r3, [pc, #52]	@ (8001d88 <command_update+0xac>)
 8001d52:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	for(index = 0; index <= NUM_ACTUATORS ; index ++){
 8001d56:	4b09      	ldr	r3, [pc, #36]	@ (8001d7c <command_update+0xa0>)
 8001d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	b21a      	sxth	r2, r3
 8001d64:	4b05      	ldr	r3, [pc, #20]	@ (8001d7c <command_update+0xa0>)
 8001d66:	801a      	strh	r2, [r3, #0]
 8001d68:	4b04      	ldr	r3, [pc, #16]	@ (8001d7c <command_update+0xa0>)
 8001d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d6e:	2b1b      	cmp	r3, #27
 8001d70:	ddd9      	ble.n	8001d26 <command_update+0x4a>
	}

		//HAL_UART_Transmit(&huart4, (uint8_t*)cmd_ref, sizeof(cmd_ref), 10);

	cmd_ready = FALSE;
 8001d72:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <command_update+0xb0>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	bd98      	pop	{r3, r4, r7, pc}
 8001d7c:	2400360c 	.word	0x2400360c
 8001d80:	24000000 	.word	0x24000000
 8001d84:	24002e0c 	.word	0x24002e0c
 8001d88:	24003610 	.word	0x24003610
 8001d8c:	2400360e 	.word	0x2400360e

08001d90 <run_state_machine>:


static void run_state_machine(uint8_t byte)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
	static int current_state = startByte1;
	static int counter = 0;
	int next_state;

	switch(current_state){
 8001d9a:	4b34      	ldr	r3, [pc, #208]	@ (8001e6c <run_state_machine+0xdc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d85b      	bhi.n	8001e5a <run_state_machine+0xca>
 8001da2:	a201      	add	r2, pc, #4	@ (adr r2, 8001da8 <run_state_machine+0x18>)
 8001da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da8:	08001dbd 	.word	0x08001dbd
 8001dac:	08001dd5 	.word	0x08001dd5
 8001db0:	08001df1 	.word	0x08001df1
 8001db4:	08001e1d 	.word	0x08001e1d
 8001db8:	08001e33 	.word	0x08001e33
		case startByte1:
			if(byte == start_bytes[0]){
 8001dbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001e70 <run_state_machine+0xe0>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	79fa      	ldrb	r2, [r7, #7]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d102      	bne.n	8001dcc <run_state_machine+0x3c>
				next_state = startByte2;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	60fb      	str	r3, [r7, #12]
			} else{
				next_state = current_state;
			}
			break;
 8001dca:	e047      	b.n	8001e5c <run_state_machine+0xcc>
				next_state = current_state;
 8001dcc:	4b27      	ldr	r3, [pc, #156]	@ (8001e6c <run_state_machine+0xdc>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]
			break;
 8001dd2:	e043      	b.n	8001e5c <run_state_machine+0xcc>
		case(startByte2):
			if(byte == start_bytes[1]){
 8001dd4:	4b26      	ldr	r3, [pc, #152]	@ (8001e70 <run_state_machine+0xe0>)
 8001dd6:	785b      	ldrb	r3, [r3, #1]
 8001dd8:	79fa      	ldrb	r2, [r7, #7]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d105      	bne.n	8001dea <run_state_machine+0x5a>
				next_state = storeMessage;
 8001dde:	2302      	movs	r3, #2
 8001de0:	60fb      	str	r3, [r7, #12]
				counter = 0;
 8001de2:	4b24      	ldr	r3, [pc, #144]	@ (8001e74 <run_state_machine+0xe4>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
			} else{
				next_state = startByte1;
			}
			break;
 8001de8:	e038      	b.n	8001e5c <run_state_machine+0xcc>
				next_state = startByte1;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
			break;
 8001dee:	e035      	b.n	8001e5c <run_state_machine+0xcc>
		case(storeMessage):
			if(counter == CMD_LENGTH-1){
 8001df0:	4b20      	ldr	r3, [pc, #128]	@ (8001e74 <run_state_machine+0xe4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b35      	cmp	r3, #53	@ 0x35
 8001df6:	d102      	bne.n	8001dfe <run_state_machine+0x6e>
				next_state = endByte1;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	e001      	b.n	8001e02 <run_state_machine+0x72>
			}else{
				next_state = storeMessage;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	60fb      	str	r3, [r7, #12]
			}
			write_buffer(rxp, byte);
 8001e02:	4b1d      	ldr	r3, [pc, #116]	@ (8001e78 <run_state_machine+0xe8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	79fa      	ldrb	r2, [r7, #7]
 8001e08:	4611      	mov	r1, r2
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 f8a8 	bl	8001f60 <write_buffer>
			counter++;
 8001e10:	4b18      	ldr	r3, [pc, #96]	@ (8001e74 <run_state_machine+0xe4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	3301      	adds	r3, #1
 8001e16:	4a17      	ldr	r2, [pc, #92]	@ (8001e74 <run_state_machine+0xe4>)
 8001e18:	6013      	str	r3, [r2, #0]
			break;
 8001e1a:	e01f      	b.n	8001e5c <run_state_machine+0xcc>
		case(endByte1):
			if(byte == end_bytes[0]){
 8001e1c:	4b17      	ldr	r3, [pc, #92]	@ (8001e7c <run_state_machine+0xec>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	79fa      	ldrb	r2, [r7, #7]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d102      	bne.n	8001e2c <run_state_machine+0x9c>
				next_state = endByte2;
 8001e26:	2304      	movs	r3, #4
 8001e28:	60fb      	str	r3, [r7, #12]
			}else{
				next_state = startByte1;
			}
			break;
 8001e2a:	e017      	b.n	8001e5c <run_state_machine+0xcc>
				next_state = startByte1;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
			break;
 8001e30:	e014      	b.n	8001e5c <run_state_machine+0xcc>
		case(endByte2):
			if(byte == end_bytes[1]){
 8001e32:	4b12      	ldr	r3, [pc, #72]	@ (8001e7c <run_state_machine+0xec>)
 8001e34:	785b      	ldrb	r3, [r3, #1]
 8001e36:	79fa      	ldrb	r2, [r7, #7]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d103      	bne.n	8001e44 <run_state_machine+0xb4>
				cmd_ready = TRUE;
 8001e3c:	4b10      	ldr	r3, [pc, #64]	@ (8001e80 <run_state_machine+0xf0>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	e007      	b.n	8001e54 <run_state_machine+0xc4>
			}else{
			rxp->read_index = 0;
 8001e44:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <run_state_machine+0xe8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
			rxp->write_index = 0;
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e78 <run_state_machine+0xe8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2200      	movs	r2, #0
 8001e52:	605a      	str	r2, [r3, #4]
			}
			next_state = startByte1;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
			break;
 8001e58:	e000      	b.n	8001e5c <run_state_machine+0xcc>
		default:
			break;
 8001e5a:	bf00      	nop
	}
	current_state = next_state;
 8001e5c:	4a03      	ldr	r2, [pc, #12]	@ (8001e6c <run_state_machine+0xdc>)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6013      	str	r3, [r2, #0]
}
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	24003654 	.word	0x24003654
 8001e70:	24000004 	.word	0x24000004
 8001e74:	24003658 	.word	0x24003658
 8001e78:	24000000 	.word	0x24000000
 8001e7c:	24000008 	.word	0x24000008
 8001e80:	2400360e 	.word	0x2400360e

08001e84 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef*huart)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
	data_ready = TRUE;
 8001e8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ea0 <HAL_UART_RxCpltCallback+0x1c>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	701a      	strb	r2, [r3, #0]
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	240025fc 	.word	0x240025fc

08001ea4 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef*huart)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 __NOP();
 8001eac:	bf00      	nop
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <init_buffer>:
    }
    return 0; /*no data available*/
}


static void init_buffer(struct circular_buffer *buf) {
 8001eba:	b480      	push	{r7}
 8001ebc:	b085      	sub	sp, #20
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
    int i;
    buf->read_index = 0; /*initialize read index to 0 */
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
    buf->write_index = 0; /*initialize write index to 0 */
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	605a      	str	r2, [r3, #4]
    buf->size = BUFFER_LENGTH; /*Set size to buffer length const*/
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ed4:	609a      	str	r2, [r3, #8]
    for (i = 0; i < BUFFER_LENGTH; i++) { /*initialize data to zero*/
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	e008      	b.n	8001eee <init_buffer+0x34>
        buf->data[i] = 0;
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	330c      	adds	r3, #12
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < BUFFER_LENGTH; i++) { /*initialize data to zero*/
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3301      	adds	r3, #1
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ef4:	dbf2      	blt.n	8001edc <init_buffer+0x22>
    } /*end for */
}
 8001ef6:	bf00      	nop
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <is_buffer_empty>:

/* function int is_buffer_empty(struct circular_buffer *buf)
 * takes a pointer to a circular buffer and compares the read and write indices
 * if they are equal then the buffer is empty
 */
static int8_t is_buffer_empty(struct circular_buffer *buf) {
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
    if (buf->read_index == buf->write_index) { //if read = write then the buffer is empty
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d101      	bne.n	8001f1c <is_buffer_empty+0x18>
        return TRUE;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <is_buffer_empty+0x1a>
    }
    return FALSE;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <is_buffer_full>:

/*  bufFull(struct oBuffer *buf)
 * takes a pointer to a circular buffer and compares the read and write indices
 * if write+1 = read, then the buffer is full.
 */
static int8_t is_buffer_full(struct circular_buffer *buf) {
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
    /* write index +1 == read index is full,  the mod provides wrap around*/
    if ((buf->write_index + 1) % BUFFER_LENGTH == buf->read_index) {
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	3301      	adds	r3, #1
 8001f38:	425a      	negs	r2, r3
 8001f3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f3e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001f42:	bf58      	it	pl
 8001f44:	4253      	negpl	r3, r2
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d101      	bne.n	8001f52 <is_buffer_full+0x28>
        return TRUE;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <is_buffer_full+0x2a>
    }
    return FALSE;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <write_buffer>:

/* writeBuffer( (struct oBuffer *buf, unsigned char c)
 * takes a pointer to a circular buffer and a char to be written
 * returns SUCCESS or ERROR
 */
static int8_t write_buffer(struct circular_buffer *buf, unsigned char c) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	70fb      	strb	r3, [r7, #3]
    if (is_buffer_full(buf) == FALSE) {
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ffdc 	bl	8001f2a <is_buffer_full>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d113      	bne.n	8001fa0 <write_buffer+0x40>
        buf->data[buf->write_index] = c;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	4413      	add	r3, r2
 8001f80:	78fa      	ldrb	r2, [r7, #3]
 8001f82:	731a      	strb	r2, [r3, #12]
        /*increment the write index and wrap using modulus arithmetic */
        buf->write_index = (buf->write_index + 1) % BUFFER_LENGTH;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	425a      	negs	r2, r3
 8001f8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f90:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001f94:	bf58      	it	pl
 8001f96:	4253      	negpl	r3, r2
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6053      	str	r3, [r2, #4]
        return SUCCESS;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e000      	b.n	8001fa2 <write_buffer+0x42>
    }
    return ERROR; /*no data written*/
 8001fa0:	2301      	movs	r3, #1
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <read_from_buffer>:
 * takes a pointer to a circular buffer
 * returns the value from the buffer
 * the read index is incremented and wrapped using modulus arithmetic
 * Returns 0 if the buffer is empty or the pointer is invalid
 */
static unsigned char read_from_buffer(struct circular_buffer *buf) {
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
    unsigned char val;
    if (is_buffer_empty(buf) == FALSE) {
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ffa6 	bl	8001f04 <is_buffer_empty>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d113      	bne.n	8001fe6 <read_from_buffer+0x3c>
        val = buf->data[buf->read_index]; //get the char from the buffer
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	7b1b      	ldrb	r3, [r3, #12]
 8001fc8:	73fb      	strb	r3, [r7, #15]
        /*increment the read index and wrap using modulus arithmetic*/
        buf->read_index = (buf->read_index + 1) % BUFFER_LENGTH;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	425a      	negs	r2, r3
 8001fd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fd6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001fda:	bf58      	it	pl
 8001fdc:	4253      	negpl	r3, r2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6013      	str	r3, [r2, #0]
        return val;
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	e000      	b.n	8001fe8 <read_from_buffer+0x3e>
    }
    return 0;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <control_update>:
    return 0;
}


static void control_update(double ref)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	ed87 0b00 	vstr	d0, [r7]
	// sign bit of the command fed to phase input on the h-bridge
	static int phase=GPIO_PIN_SET;
	//int new_phase = {0};
	static uint16_t dutycycle=0;
	uint16_t new_dc;
	double absref = 0;
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	e9c7 2302 	strd	r2, r3, [r7, #8]


	//Timer 1
		// set the sign of the move (phase)
			if(cmd_ref[T1C1] < 0){
 8002006:	4b9f      	ldr	r3, [pc, #636]	@ (8002284 <control_update+0x294>)
 8002008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800200c:	2b00      	cmp	r3, #0
 800200e:	da03      	bge.n	8002018 <control_update+0x28>
				phase = GPIO_PIN_RESET; // reverse direction
 8002010:	4b9d      	ldr	r3, [pc, #628]	@ (8002288 <control_update+0x298>)
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	e002      	b.n	800201e <control_update+0x2e>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002018:	4b9b      	ldr	r3, [pc, #620]	@ (8002288 <control_update+0x298>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, phase);  //Starts the phase generation on each of the pins (Channels)
 800201e:	4b9a      	ldr	r3, [pc, #616]	@ (8002288 <control_update+0x298>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	2101      	movs	r1, #1
 8002028:	4898      	ldr	r0, [pc, #608]	@ (800228c <control_update+0x29c>)
 800202a:	f002 fde3 	bl	8004bf4 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[T1C2] < 0){
 800202e:	4b95      	ldr	r3, [pc, #596]	@ (8002284 <control_update+0x294>)
 8002030:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002034:	2b00      	cmp	r3, #0
 8002036:	da03      	bge.n	8002040 <control_update+0x50>
				phase = GPIO_PIN_RESET; // reverse direction
 8002038:	4b93      	ldr	r3, [pc, #588]	@ (8002288 <control_update+0x298>)
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	e002      	b.n	8002046 <control_update+0x56>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002040:	4b91      	ldr	r3, [pc, #580]	@ (8002288 <control_update+0x298>)
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, phase);
 8002046:	4b90      	ldr	r3, [pc, #576]	@ (8002288 <control_update+0x298>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	461a      	mov	r2, r3
 800204e:	2102      	movs	r1, #2
 8002050:	488e      	ldr	r0, [pc, #568]	@ (800228c <control_update+0x29c>)
 8002052:	f002 fdcf 	bl	8004bf4 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[T1C3] < 0){
 8002056:	4b8b      	ldr	r3, [pc, #556]	@ (8002284 <control_update+0x294>)
 8002058:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	da03      	bge.n	8002068 <control_update+0x78>
				phase = GPIO_PIN_RESET; // reverse direction
 8002060:	4b89      	ldr	r3, [pc, #548]	@ (8002288 <control_update+0x298>)
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	e002      	b.n	800206e <control_update+0x7e>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002068:	4b87      	ldr	r3, [pc, #540]	@ (8002288 <control_update+0x298>)
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, phase);
 800206e:	4b86      	ldr	r3, [pc, #536]	@ (8002288 <control_update+0x298>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	2104      	movs	r1, #4
 8002078:	4884      	ldr	r0, [pc, #528]	@ (800228c <control_update+0x29c>)
 800207a:	f002 fdbb 	bl	8004bf4 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[T1C4] < 0){
 800207e:	4b81      	ldr	r3, [pc, #516]	@ (8002284 <control_update+0x294>)
 8002080:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002084:	2b00      	cmp	r3, #0
 8002086:	da03      	bge.n	8002090 <control_update+0xa0>
				phase = GPIO_PIN_RESET; // reverse direction
 8002088:	4b7f      	ldr	r3, [pc, #508]	@ (8002288 <control_update+0x298>)
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	e002      	b.n	8002096 <control_update+0xa6>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002090:	4b7d      	ldr	r3, [pc, #500]	@ (8002288 <control_update+0x298>)
 8002092:	2201      	movs	r2, #1
 8002094:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, phase);
 8002096:	4b7c      	ldr	r3, [pc, #496]	@ (8002288 <control_update+0x298>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	461a      	mov	r2, r3
 800209e:	2108      	movs	r1, #8
 80020a0:	487a      	ldr	r0, [pc, #488]	@ (800228c <control_update+0x29c>)
 80020a2:	f002 fda7 	bl	8004bf4 <HAL_GPIO_WritePin>



	//Timer 2
		// set the sign of the move (phase)
			if(cmd_ref[T2C1] < 0){
 80020a6:	4b77      	ldr	r3, [pc, #476]	@ (8002284 <control_update+0x294>)
 80020a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	da03      	bge.n	80020b8 <control_update+0xc8>
				phase = GPIO_PIN_RESET; // reverse direction
 80020b0:	4b75      	ldr	r3, [pc, #468]	@ (8002288 <control_update+0x298>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	e002      	b.n	80020be <control_update+0xce>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80020b8:	4b73      	ldr	r3, [pc, #460]	@ (8002288 <control_update+0x298>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM2_CH1_PH_GPIO_Port, TIM2_CH1_PH_Pin, phase);
 80020be:	4b72      	ldr	r3, [pc, #456]	@ (8002288 <control_update+0x298>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	461a      	mov	r2, r3
 80020c6:	2110      	movs	r1, #16
 80020c8:	4870      	ldr	r0, [pc, #448]	@ (800228c <control_update+0x29c>)
 80020ca:	f002 fd93 	bl	8004bf4 <HAL_GPIO_WritePin>
	//End Timer 2

	//Timer 4
		// set the sign of the move (phase)
			if(cmd_ref[T4C1] < 0){
 80020ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002284 <control_update+0x294>)
 80020d0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	da03      	bge.n	80020e0 <control_update+0xf0>
				phase = GPIO_PIN_RESET; // reverse direction
 80020d8:	4b6b      	ldr	r3, [pc, #428]	@ (8002288 <control_update+0x298>)
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	e002      	b.n	80020e6 <control_update+0xf6>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80020e0:	4b69      	ldr	r3, [pc, #420]	@ (8002288 <control_update+0x298>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM4_CH1_PH_GPIO_Port, TIM4_CH1_PH_Pin, phase);
 80020e6:	4b68      	ldr	r3, [pc, #416]	@ (8002288 <control_update+0x298>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020f2:	4867      	ldr	r0, [pc, #412]	@ (8002290 <control_update+0x2a0>)
 80020f4:	f002 fd7e 	bl	8004bf4 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[T4C2] < 0){
 80020f8:	4b62      	ldr	r3, [pc, #392]	@ (8002284 <control_update+0x294>)
 80020fa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	da03      	bge.n	800210a <control_update+0x11a>
				phase = GPIO_PIN_RESET; // reverse direction
 8002102:	4b61      	ldr	r3, [pc, #388]	@ (8002288 <control_update+0x298>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	e002      	b.n	8002110 <control_update+0x120>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 800210a:	4b5f      	ldr	r3, [pc, #380]	@ (8002288 <control_update+0x298>)
 800210c:	2201      	movs	r2, #1
 800210e:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM4_CH2_PH_GPIO_Port, TIM4_CH2_PH_Pin, phase);
 8002110:	4b5d      	ldr	r3, [pc, #372]	@ (8002288 <control_update+0x298>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800211c:	485c      	ldr	r0, [pc, #368]	@ (8002290 <control_update+0x2a0>)
 800211e:	f002 fd69 	bl	8004bf4 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[T4C3] < 0){
 8002122:	4b58      	ldr	r3, [pc, #352]	@ (8002284 <control_update+0x294>)
 8002124:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002128:	2b00      	cmp	r3, #0
 800212a:	da03      	bge.n	8002134 <control_update+0x144>
				phase = GPIO_PIN_RESET; // reverse direction
 800212c:	4b56      	ldr	r3, [pc, #344]	@ (8002288 <control_update+0x298>)
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	e002      	b.n	800213a <control_update+0x14a>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002134:	4b54      	ldr	r3, [pc, #336]	@ (8002288 <control_update+0x298>)
 8002136:	2201      	movs	r2, #1
 8002138:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM4_CH3_PH_GPIO_Port, TIM4_CH3_PH_Pin, phase);
 800213a:	4b53      	ldr	r3, [pc, #332]	@ (8002288 <control_update+0x298>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002146:	4853      	ldr	r0, [pc, #332]	@ (8002294 <control_update+0x2a4>)
 8002148:	f002 fd54 	bl	8004bf4 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[T4C4] < 0){
 800214c:	4b4d      	ldr	r3, [pc, #308]	@ (8002284 <control_update+0x294>)
 800214e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002152:	2b00      	cmp	r3, #0
 8002154:	da03      	bge.n	800215e <control_update+0x16e>
				phase = GPIO_PIN_RESET; // reverse direction
 8002156:	4b4c      	ldr	r3, [pc, #304]	@ (8002288 <control_update+0x298>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	e002      	b.n	8002164 <control_update+0x174>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 800215e:	4b4a      	ldr	r3, [pc, #296]	@ (8002288 <control_update+0x298>)
 8002160:	2201      	movs	r2, #1
 8002162:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM4_CH4_PH_GPIO_Port, TIM4_CH4_PH_Pin, phase);
 8002164:	4b48      	ldr	r3, [pc, #288]	@ (8002288 <control_update+0x298>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002170:	4848      	ldr	r0, [pc, #288]	@ (8002294 <control_update+0x2a4>)
 8002172:	f002 fd3f 	bl	8004bf4 <HAL_GPIO_WritePin>
	//End Timer 4


	//Timer 5
		// set the sign of the move (phase)
			if(cmd_ref[T5C2] < 0){
 8002176:	4b43      	ldr	r3, [pc, #268]	@ (8002284 <control_update+0x294>)
 8002178:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800217c:	2b00      	cmp	r3, #0
 800217e:	da03      	bge.n	8002188 <control_update+0x198>
				phase = GPIO_PIN_RESET; // reverse direction
 8002180:	4b41      	ldr	r3, [pc, #260]	@ (8002288 <control_update+0x298>)
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	e002      	b.n	800218e <control_update+0x19e>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002188:	4b3f      	ldr	r3, [pc, #252]	@ (8002288 <control_update+0x298>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM5_CH2_PH_GPIO_Port, TIM5_CH2_PH_Pin, phase);
 800218e:	4b3e      	ldr	r3, [pc, #248]	@ (8002288 <control_update+0x298>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	461a      	mov	r2, r3
 8002196:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800219a:	483e      	ldr	r0, [pc, #248]	@ (8002294 <control_update+0x2a4>)
 800219c:	f002 fd2a 	bl	8004bf4 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[T5C3] < 0){
 80021a0:	4b38      	ldr	r3, [pc, #224]	@ (8002284 <control_update+0x294>)
 80021a2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	da03      	bge.n	80021b2 <control_update+0x1c2>
				phase = GPIO_PIN_RESET; // reverse direction
 80021aa:	4b37      	ldr	r3, [pc, #220]	@ (8002288 <control_update+0x298>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	e002      	b.n	80021b8 <control_update+0x1c8>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80021b2:	4b35      	ldr	r3, [pc, #212]	@ (8002288 <control_update+0x298>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM5_CH3_PH_GPIO_Port, TIM5_CH3_PH_Pin, phase);
 80021b8:	4b33      	ldr	r3, [pc, #204]	@ (8002288 <control_update+0x298>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021c4:	4833      	ldr	r0, [pc, #204]	@ (8002294 <control_update+0x2a4>)
 80021c6:	f002 fd15 	bl	8004bf4 <HAL_GPIO_WritePin>
    //End Timer 5


    //Timer 8
		// set the sign of the move (phase)
			if(cmd_ref[T8C4] < 0){
 80021ca:	4b2e      	ldr	r3, [pc, #184]	@ (8002284 <control_update+0x294>)
 80021cc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	da03      	bge.n	80021dc <control_update+0x1ec>
				phase = GPIO_PIN_RESET; // reverse direction
 80021d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002288 <control_update+0x298>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	e002      	b.n	80021e2 <control_update+0x1f2>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80021dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002288 <control_update+0x298>)
 80021de:	2201      	movs	r2, #1
 80021e0:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM8_CH4_PH_GPIO_Port, TIM8_CH4_PH_Pin, phase);
 80021e2:	4b29      	ldr	r3, [pc, #164]	@ (8002288 <control_update+0x298>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	2180      	movs	r1, #128	@ 0x80
 80021ec:	4827      	ldr	r0, [pc, #156]	@ (800228c <control_update+0x29c>)
 80021ee:	f002 fd01 	bl	8004bf4 <HAL_GPIO_WritePin>
	//End Timer 8


    //Timer 12
		// set the sign of the move (phase)
			if(cmd_ref[T12C2] < 0){
 80021f2:	4b24      	ldr	r3, [pc, #144]	@ (8002284 <control_update+0x294>)
 80021f4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	da03      	bge.n	8002204 <control_update+0x214>
				phase = GPIO_PIN_RESET; // reverse direction
 80021fc:	4b22      	ldr	r3, [pc, #136]	@ (8002288 <control_update+0x298>)
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	e002      	b.n	800220a <control_update+0x21a>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002204:	4b20      	ldr	r3, [pc, #128]	@ (8002288 <control_update+0x298>)
 8002206:	2201      	movs	r2, #1
 8002208:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM12_CH2_PH_GPIO_Port, TIM12_CH2_PH_Pin, phase);
 800220a:	4b1f      	ldr	r3, [pc, #124]	@ (8002288 <control_update+0x298>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002216:	481d      	ldr	r0, [pc, #116]	@ (800228c <control_update+0x29c>)
 8002218:	f002 fcec 	bl	8004bf4 <HAL_GPIO_WritePin>
    //End Timer 12


    //Timer 13
		// set the sign of the move (phase)
			if(cmd_ref[T13C1] < 0){
 800221c:	4b19      	ldr	r3, [pc, #100]	@ (8002284 <control_update+0x294>)
 800221e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002222:	2b00      	cmp	r3, #0
 8002224:	da03      	bge.n	800222e <control_update+0x23e>
				phase = GPIO_PIN_RESET; // reverse direction
 8002226:	4b18      	ldr	r3, [pc, #96]	@ (8002288 <control_update+0x298>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	e002      	b.n	8002234 <control_update+0x244>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 800222e:	4b16      	ldr	r3, [pc, #88]	@ (8002288 <control_update+0x298>)
 8002230:	2201      	movs	r2, #1
 8002232:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM13_CH1_PH_GPIO_Port, TIM13_CH1_PH_Pin, phase);
 8002234:	4b14      	ldr	r3, [pc, #80]	@ (8002288 <control_update+0x298>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	461a      	mov	r2, r3
 800223c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002240:	4812      	ldr	r0, [pc, #72]	@ (800228c <control_update+0x29c>)
 8002242:	f002 fcd7 	bl	8004bf4 <HAL_GPIO_WritePin>
    //End Timer 13


    //Timer 14
		// set the sign of the move (phase)
			if(cmd_ref[T14C1] < 0){
 8002246:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <control_update+0x294>)
 8002248:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800224c:	2b00      	cmp	r3, #0
 800224e:	da03      	bge.n	8002258 <control_update+0x268>
				phase = GPIO_PIN_RESET; // reverse direction
 8002250:	4b0d      	ldr	r3, [pc, #52]	@ (8002288 <control_update+0x298>)
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	e002      	b.n	800225e <control_update+0x26e>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002258:	4b0b      	ldr	r3, [pc, #44]	@ (8002288 <control_update+0x298>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM14_CH1_PH_GPIO_Port, TIM14_CH1_PH_Pin, phase);
 800225e:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <control_update+0x298>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	b2db      	uxtb	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800226a:	4808      	ldr	r0, [pc, #32]	@ (800228c <control_update+0x29c>)
 800226c:	f002 fcc2 	bl	8004bf4 <HAL_GPIO_WritePin>
    //End Timer 14


    //Timer 15
		// set the sign of the move (phase)
			if(cmd_ref[T15C1] < 0){
 8002270:	4b04      	ldr	r3, [pc, #16]	@ (8002284 <control_update+0x294>)
 8002272:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002276:	2b00      	cmp	r3, #0
 8002278:	da0e      	bge.n	8002298 <control_update+0x2a8>
				phase = GPIO_PIN_RESET; // reverse direction
 800227a:	4b03      	ldr	r3, [pc, #12]	@ (8002288 <control_update+0x298>)
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	e00d      	b.n	800229e <control_update+0x2ae>
 8002282:	bf00      	nop
 8002284:	24003610 	.word	0x24003610
 8002288:	2400000c 	.word	0x2400000c
 800228c:	58021000 	.word	0x58021000
 8002290:	58020400 	.word	0x58020400
 8002294:	58020800 	.word	0x58020800
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002298:	4b70      	ldr	r3, [pc, #448]	@ (800245c <control_update+0x46c>)
 800229a:	2201      	movs	r2, #1
 800229c:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM15_CH1_PH_GPIO_Port, TIM15_CH1_PH_Pin, phase);
 800229e:	4b6f      	ldr	r3, [pc, #444]	@ (800245c <control_update+0x46c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022aa:	486d      	ldr	r0, [pc, #436]	@ (8002460 <control_update+0x470>)
 80022ac:	f002 fca2 	bl	8004bf4 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[T15C2] < 0){
 80022b0:	4b6c      	ldr	r3, [pc, #432]	@ (8002464 <control_update+0x474>)
 80022b2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	da03      	bge.n	80022c2 <control_update+0x2d2>
				phase = GPIO_PIN_RESET; // reverse direction
 80022ba:	4b68      	ldr	r3, [pc, #416]	@ (800245c <control_update+0x46c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	e002      	b.n	80022c8 <control_update+0x2d8>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80022c2:	4b66      	ldr	r3, [pc, #408]	@ (800245c <control_update+0x46c>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM15_CH2_PH_GPIO_Port, TIM15_CH2_PH_Pin, phase);
 80022c8:	4b64      	ldr	r3, [pc, #400]	@ (800245c <control_update+0x46c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	461a      	mov	r2, r3
 80022d0:	2101      	movs	r1, #1
 80022d2:	4865      	ldr	r0, [pc, #404]	@ (8002468 <control_update+0x478>)
 80022d4:	f002 fc8e 	bl	8004bf4 <HAL_GPIO_WritePin>
   //End Timer 15


   //Timer 16
		// set the sign of the move (phase)
			if(cmd_ref[T16C1] < 0){
 80022d8:	4b62      	ldr	r3, [pc, #392]	@ (8002464 <control_update+0x474>)
 80022da:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80022de:	2b00      	cmp	r3, #0
 80022e0:	da03      	bge.n	80022ea <control_update+0x2fa>
				phase = GPIO_PIN_RESET; // reverse direction
 80022e2:	4b5e      	ldr	r3, [pc, #376]	@ (800245c <control_update+0x46c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	e002      	b.n	80022f0 <control_update+0x300>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80022ea:	4b5c      	ldr	r3, [pc, #368]	@ (800245c <control_update+0x46c>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(TIM16_CH1_PH_GPIO_Port, TIM16_CH1_PH_Pin, phase);
 80022f0:	4b5a      	ldr	r3, [pc, #360]	@ (800245c <control_update+0x46c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	2102      	movs	r1, #2
 80022fa:	485b      	ldr	r0, [pc, #364]	@ (8002468 <control_update+0x478>)
 80022fc:	f002 fc7a 	bl	8004bf4 <HAL_GPIO_WritePin>


    //HRTIM CODE HERE **************
    //High Resolution Timer CHA
		// set the sign of the move (phase)
			if(cmd_ref[HRA1] < 0){
 8002300:	4b58      	ldr	r3, [pc, #352]	@ (8002464 <control_update+0x474>)
 8002302:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8002306:	2b00      	cmp	r3, #0
 8002308:	da03      	bge.n	8002312 <control_update+0x322>
				phase = GPIO_PIN_RESET; // reverse direction
 800230a:	4b54      	ldr	r3, [pc, #336]	@ (800245c <control_update+0x46c>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	e002      	b.n	8002318 <control_update+0x328>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002312:	4b52      	ldr	r3, [pc, #328]	@ (800245c <control_update+0x46c>)
 8002314:	2201      	movs	r2, #1
 8002316:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(HRTIM_CHA1_PH_GPIO_Port, HRTIM_CHA1_PH_Pin, phase);
 8002318:	4b50      	ldr	r3, [pc, #320]	@ (800245c <control_update+0x46c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	461a      	mov	r2, r3
 8002320:	2110      	movs	r1, #16
 8002322:	4851      	ldr	r0, [pc, #324]	@ (8002468 <control_update+0x478>)
 8002324:	f002 fc66 	bl	8004bf4 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[HRA2] < 0){
 8002328:	4b4e      	ldr	r3, [pc, #312]	@ (8002464 <control_update+0x474>)
 800232a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800232e:	2b00      	cmp	r3, #0
 8002330:	da03      	bge.n	800233a <control_update+0x34a>
				phase = GPIO_PIN_RESET; // reverse direction
 8002332:	4b4a      	ldr	r3, [pc, #296]	@ (800245c <control_update+0x46c>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	e002      	b.n	8002340 <control_update+0x350>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 800233a:	4b48      	ldr	r3, [pc, #288]	@ (800245c <control_update+0x46c>)
 800233c:	2201      	movs	r2, #1
 800233e:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(HRTIM_CHA2_PH_GPIO_Port, HRTIM_CHA2_PH_Pin, phase);
 8002340:	4b46      	ldr	r3, [pc, #280]	@ (800245c <control_update+0x46c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	461a      	mov	r2, r3
 8002348:	2120      	movs	r1, #32
 800234a:	4847      	ldr	r0, [pc, #284]	@ (8002468 <control_update+0x478>)
 800234c:	f002 fc52 	bl	8004bf4 <HAL_GPIO_WritePin>
    //End High HRTIM CHA

    //High Resolution Timer CHB
		// set the sign of the move (phase)
			if(cmd_ref[HRB1] < 0){
 8002350:	4b44      	ldr	r3, [pc, #272]	@ (8002464 <control_update+0x474>)
 8002352:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8002356:	2b00      	cmp	r3, #0
 8002358:	da03      	bge.n	8002362 <control_update+0x372>
				phase = GPIO_PIN_RESET; // reverse direction
 800235a:	4b40      	ldr	r3, [pc, #256]	@ (800245c <control_update+0x46c>)
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e002      	b.n	8002368 <control_update+0x378>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002362:	4b3e      	ldr	r3, [pc, #248]	@ (800245c <control_update+0x46c>)
 8002364:	2201      	movs	r2, #1
 8002366:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(HRTIM_CHB1_PH_GPIO_Port, HRTIM_CHB1_PH_Pin, phase);
 8002368:	4b3c      	ldr	r3, [pc, #240]	@ (800245c <control_update+0x46c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	461a      	mov	r2, r3
 8002370:	2140      	movs	r1, #64	@ 0x40
 8002372:	483d      	ldr	r0, [pc, #244]	@ (8002468 <control_update+0x478>)
 8002374:	f002 fc3e 	bl	8004bf4 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[HRB2] < 0){
 8002378:	4b3a      	ldr	r3, [pc, #232]	@ (8002464 <control_update+0x474>)
 800237a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 800237e:	2b00      	cmp	r3, #0
 8002380:	da03      	bge.n	800238a <control_update+0x39a>
				phase = GPIO_PIN_RESET; // reverse direction
 8002382:	4b36      	ldr	r3, [pc, #216]	@ (800245c <control_update+0x46c>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	e002      	b.n	8002390 <control_update+0x3a0>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 800238a:	4b34      	ldr	r3, [pc, #208]	@ (800245c <control_update+0x46c>)
 800238c:	2201      	movs	r2, #1
 800238e:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(HRTIM_CHB2_PH_GPIO_Port, HRTIM_CHB2_PH_Pin, phase);
 8002390:	4b32      	ldr	r3, [pc, #200]	@ (800245c <control_update+0x46c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	461a      	mov	r2, r3
 8002398:	2180      	movs	r1, #128	@ 0x80
 800239a:	4833      	ldr	r0, [pc, #204]	@ (8002468 <control_update+0x478>)
 800239c:	f002 fc2a 	bl	8004bf4 <HAL_GPIO_WritePin>
    //End High HRTIM CHB

    //High Resolution Timer CHC
		// set the sign of the move (phase)
			if(cmd_ref[HRC1] < 0){
 80023a0:	4b30      	ldr	r3, [pc, #192]	@ (8002464 <control_update+0x474>)
 80023a2:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	da03      	bge.n	80023b2 <control_update+0x3c2>
				phase = GPIO_PIN_RESET; // reverse direction
 80023aa:	4b2c      	ldr	r3, [pc, #176]	@ (800245c <control_update+0x46c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	e002      	b.n	80023b8 <control_update+0x3c8>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80023b2:	4b2a      	ldr	r3, [pc, #168]	@ (800245c <control_update+0x46c>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(HRTIM_CHC1_PH_GPIO_Port, HRTIM_CHC1_PH_Pin, phase);
 80023b8:	4b28      	ldr	r3, [pc, #160]	@ (800245c <control_update+0x46c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023c4:	4828      	ldr	r0, [pc, #160]	@ (8002468 <control_update+0x478>)
 80023c6:	f002 fc15 	bl	8004bf4 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[HRC2] < 0){
 80023ca:	4b26      	ldr	r3, [pc, #152]	@ (8002464 <control_update+0x474>)
 80023cc:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	da03      	bge.n	80023dc <control_update+0x3ec>
				phase = GPIO_PIN_RESET; // reverse direction
 80023d4:	4b21      	ldr	r3, [pc, #132]	@ (800245c <control_update+0x46c>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	e002      	b.n	80023e2 <control_update+0x3f2>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 80023dc:	4b1f      	ldr	r3, [pc, #124]	@ (800245c <control_update+0x46c>)
 80023de:	2201      	movs	r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(HRTIM_CHC2_PH_GPIO_Port, HRTIM_CHC2_PH_Pin, phase);
 80023e2:	4b1e      	ldr	r3, [pc, #120]	@ (800245c <control_update+0x46c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023ee:	481e      	ldr	r0, [pc, #120]	@ (8002468 <control_update+0x478>)
 80023f0:	f002 fc00 	bl	8004bf4 <HAL_GPIO_WritePin>
    //End High HRTIM CHC

    //High Resolution Timer CHD
		// set the sign of the move (phase)
			if(cmd_ref[HRD1] < 0){
 80023f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002464 <control_update+0x474>)
 80023f6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	da03      	bge.n	8002406 <control_update+0x416>
				phase = GPIO_PIN_RESET; // reverse direction
 80023fe:	4b17      	ldr	r3, [pc, #92]	@ (800245c <control_update+0x46c>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	e002      	b.n	800240c <control_update+0x41c>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002406:	4b15      	ldr	r3, [pc, #84]	@ (800245c <control_update+0x46c>)
 8002408:	2201      	movs	r2, #1
 800240a:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(HRTIM_CHD1_PH_GPIO_Port, HRTIM_CHD1_PH_Pin, phase);
 800240c:	4b13      	ldr	r3, [pc, #76]	@ (800245c <control_update+0x46c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	b2db      	uxtb	r3, r3
 8002412:	461a      	mov	r2, r3
 8002414:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002418:	4813      	ldr	r0, [pc, #76]	@ (8002468 <control_update+0x478>)
 800241a:	f002 fbeb 	bl	8004bf4 <HAL_GPIO_WritePin>

		// set the sign of the move (phase)
			if(cmd_ref[HRD2] < 0){
 800241e:	4b11      	ldr	r3, [pc, #68]	@ (8002464 <control_update+0x474>)
 8002420:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8002424:	2b00      	cmp	r3, #0
 8002426:	da03      	bge.n	8002430 <control_update+0x440>
				phase = GPIO_PIN_RESET; // reverse direction
 8002428:	4b0c      	ldr	r3, [pc, #48]	@ (800245c <control_update+0x46c>)
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	e002      	b.n	8002436 <control_update+0x446>
			} else {
				phase = GPIO_PIN_SET; //forward direction
 8002430:	4b0a      	ldr	r3, [pc, #40]	@ (800245c <control_update+0x46c>)
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(HRTIM_CHD2_PH_GPIO_Port, HRTIM_CHD2_PH_Pin, phase);
 8002436:	4b09      	ldr	r3, [pc, #36]	@ (800245c <control_update+0x46c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002442:	4809      	ldr	r0, [pc, #36]	@ (8002468 <control_update+0x478>)
 8002444:	f002 fbd6 	bl	8004bf4 <HAL_GPIO_WritePin>
     //END HRTIM CODE


    //Low Power Timer
		// set the sign of the move (phase)
			if(cmd_ref[LPTIM] < 0){
 8002448:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <control_update+0x474>)
 800244a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 800244e:	2b00      	cmp	r3, #0
 8002450:	da0c      	bge.n	800246c <control_update+0x47c>
				phase = GPIO_PIN_RESET; // reverse direction
 8002452:	4b02      	ldr	r3, [pc, #8]	@ (800245c <control_update+0x46c>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	e00b      	b.n	8002472 <control_update+0x482>
 800245a:	bf00      	nop
 800245c:	2400000c 	.word	0x2400000c
 8002460:	58021000 	.word	0x58021000
 8002464:	24003610 	.word	0x24003610
 8002468:	58020c00 	.word	0x58020c00
			} else {
				phase = GPIO_PIN_SET; //forward direction
 800246c:	4bc8      	ldr	r3, [pc, #800]	@ (8002790 <control_update+0x7a0>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]
			}
				HAL_GPIO_WritePin(LPTIM1_OUT_PH_GPIO_Port, LPTIM1_OUT_PH_Pin, phase);
 8002472:	4bc7      	ldr	r3, [pc, #796]	@ (8002790 <control_update+0x7a0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	2104      	movs	r1, #4
 800247c:	48c5      	ldr	r0, [pc, #788]	@ (8002794 <control_update+0x7a4>)
 800247e:	f002 fbb9 	bl	8004bf4 <HAL_GPIO_WritePin>

//	}

	//Timer 1
	// calculate the dutycycle
	absref = fabs(cmd_ref[T1C1]); // duty cycle must be positive
 8002482:	4bc5      	ldr	r3, [pc, #788]	@ (8002798 <control_update+0x7a8>)
 8002484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002488:	ee07 3a90 	vmov	s15, r3
 800248c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002490:	eeb0 7bc7 	vabs.f64	d7, d7
 8002494:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002498:	ed9f 7bbb 	vldr	d7, [pc, #748]	@ 8002788 <control_update+0x798>
 800249c:	eeb0 1b47 	vmov.f64	d1, d7
 80024a0:	ed97 0b02 	vldr	d0, [r7, #8]
 80024a4:	f000 fb08 	bl	8002ab8 <calc_dutycycle>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	4bbb      	ldr	r3, [pc, #748]	@ (800279c <control_update+0x7ac>)
 80024ae:	801a      	strh	r2, [r3, #0]
		TIM1->CCR1 = dutycycle;   //Calls the duty cycle on the timers at the desired channel
 80024b0:	4bba      	ldr	r3, [pc, #744]	@ (800279c <control_update+0x7ac>)
 80024b2:	881a      	ldrh	r2, [r3, #0]
 80024b4:	4bba      	ldr	r3, [pc, #744]	@ (80027a0 <control_update+0x7b0>)
 80024b6:	635a      	str	r2, [r3, #52]	@ 0x34

	absref = fabs(cmd_ref[T1C2]); // duty cycle must be positive
 80024b8:	4bb7      	ldr	r3, [pc, #732]	@ (8002798 <control_update+0x7a8>)
 80024ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024be:	ee07 3a90 	vmov	s15, r3
 80024c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80024c6:	eeb0 7bc7 	vabs.f64	d7, d7
 80024ca:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80024ce:	ed9f 7bae 	vldr	d7, [pc, #696]	@ 8002788 <control_update+0x798>
 80024d2:	eeb0 1b47 	vmov.f64	d1, d7
 80024d6:	ed97 0b02 	vldr	d0, [r7, #8]
 80024da:	f000 faed 	bl	8002ab8 <calc_dutycycle>
 80024de:	4603      	mov	r3, r0
 80024e0:	461a      	mov	r2, r3
 80024e2:	4bae      	ldr	r3, [pc, #696]	@ (800279c <control_update+0x7ac>)
 80024e4:	801a      	strh	r2, [r3, #0]
		TIM1->CCR2 = dutycycle;
 80024e6:	4bad      	ldr	r3, [pc, #692]	@ (800279c <control_update+0x7ac>)
 80024e8:	881a      	ldrh	r2, [r3, #0]
 80024ea:	4bad      	ldr	r3, [pc, #692]	@ (80027a0 <control_update+0x7b0>)
 80024ec:	639a      	str	r2, [r3, #56]	@ 0x38

	absref = fabs(cmd_ref[T1C3]); // duty cycle must be positive
 80024ee:	4baa      	ldr	r3, [pc, #680]	@ (8002798 <control_update+0x7a8>)
 80024f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80024f4:	ee07 3a90 	vmov	s15, r3
 80024f8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80024fc:	eeb0 7bc7 	vabs.f64	d7, d7
 8002500:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002504:	ed9f 7ba0 	vldr	d7, [pc, #640]	@ 8002788 <control_update+0x798>
 8002508:	eeb0 1b47 	vmov.f64	d1, d7
 800250c:	ed97 0b02 	vldr	d0, [r7, #8]
 8002510:	f000 fad2 	bl	8002ab8 <calc_dutycycle>
 8002514:	4603      	mov	r3, r0
 8002516:	461a      	mov	r2, r3
 8002518:	4ba0      	ldr	r3, [pc, #640]	@ (800279c <control_update+0x7ac>)
 800251a:	801a      	strh	r2, [r3, #0]
		TIM1->CCR3 = dutycycle;
 800251c:	4b9f      	ldr	r3, [pc, #636]	@ (800279c <control_update+0x7ac>)
 800251e:	881a      	ldrh	r2, [r3, #0]
 8002520:	4b9f      	ldr	r3, [pc, #636]	@ (80027a0 <control_update+0x7b0>)
 8002522:	63da      	str	r2, [r3, #60]	@ 0x3c

	absref = fabs(cmd_ref[T1C4]); // duty cycle must be positive
 8002524:	4b9c      	ldr	r3, [pc, #624]	@ (8002798 <control_update+0x7a8>)
 8002526:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800252a:	ee07 3a90 	vmov	s15, r3
 800252e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002532:	eeb0 7bc7 	vabs.f64	d7, d7
 8002536:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 800253a:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 8002788 <control_update+0x798>
 800253e:	eeb0 1b47 	vmov.f64	d1, d7
 8002542:	ed97 0b02 	vldr	d0, [r7, #8]
 8002546:	f000 fab7 	bl	8002ab8 <calc_dutycycle>
 800254a:	4603      	mov	r3, r0
 800254c:	461a      	mov	r2, r3
 800254e:	4b93      	ldr	r3, [pc, #588]	@ (800279c <control_update+0x7ac>)
 8002550:	801a      	strh	r2, [r3, #0]
		TIM1->CCR4 = dutycycle;
 8002552:	4b92      	ldr	r3, [pc, #584]	@ (800279c <control_update+0x7ac>)
 8002554:	881a      	ldrh	r2, [r3, #0]
 8002556:	4b92      	ldr	r3, [pc, #584]	@ (80027a0 <control_update+0x7b0>)
 8002558:	641a      	str	r2, [r3, #64]	@ 0x40
	//End Timer 1


	//Timer 2
	absref = fabs(cmd_ref[T2C1]); // duty cycle must be positive
 800255a:	4b8f      	ldr	r3, [pc, #572]	@ (8002798 <control_update+0x7a8>)
 800255c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002560:	ee07 3a90 	vmov	s15, r3
 8002564:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002568:	eeb0 7bc7 	vabs.f64	d7, d7
 800256c:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002570:	ed9f 7b85 	vldr	d7, [pc, #532]	@ 8002788 <control_update+0x798>
 8002574:	eeb0 1b47 	vmov.f64	d1, d7
 8002578:	ed97 0b02 	vldr	d0, [r7, #8]
 800257c:	f000 fa9c 	bl	8002ab8 <calc_dutycycle>
 8002580:	4603      	mov	r3, r0
 8002582:	461a      	mov	r2, r3
 8002584:	4b85      	ldr	r3, [pc, #532]	@ (800279c <control_update+0x7ac>)
 8002586:	801a      	strh	r2, [r3, #0]
		TIM2->CCR1 = dutycycle;
 8002588:	4b84      	ldr	r3, [pc, #528]	@ (800279c <control_update+0x7ac>)
 800258a:	881a      	ldrh	r2, [r3, #0]
 800258c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002590:	635a      	str	r2, [r3, #52]	@ 0x34
	//End Timer 2

	//Timer 4
	absref = fabs(cmd_ref[T4C1]); // duty cycle must be positive
 8002592:	4b81      	ldr	r3, [pc, #516]	@ (8002798 <control_update+0x7a8>)
 8002594:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002598:	ee07 3a90 	vmov	s15, r3
 800259c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80025a0:	eeb0 7bc7 	vabs.f64	d7, d7
 80025a4:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80025a8:	ed9f 7b77 	vldr	d7, [pc, #476]	@ 8002788 <control_update+0x798>
 80025ac:	eeb0 1b47 	vmov.f64	d1, d7
 80025b0:	ed97 0b02 	vldr	d0, [r7, #8]
 80025b4:	f000 fa80 	bl	8002ab8 <calc_dutycycle>
 80025b8:	4603      	mov	r3, r0
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b77      	ldr	r3, [pc, #476]	@ (800279c <control_update+0x7ac>)
 80025be:	801a      	strh	r2, [r3, #0]
		TIM4->CCR1 = dutycycle;
 80025c0:	4b76      	ldr	r3, [pc, #472]	@ (800279c <control_update+0x7ac>)
 80025c2:	881a      	ldrh	r2, [r3, #0]
 80025c4:	4b77      	ldr	r3, [pc, #476]	@ (80027a4 <control_update+0x7b4>)
 80025c6:	635a      	str	r2, [r3, #52]	@ 0x34

	absref = fabs(cmd_ref[T4C2]); // duty cycle must be positive
 80025c8:	4b73      	ldr	r3, [pc, #460]	@ (8002798 <control_update+0x7a8>)
 80025ca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80025ce:	ee07 3a90 	vmov	s15, r3
 80025d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80025d6:	eeb0 7bc7 	vabs.f64	d7, d7
 80025da:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80025de:	ed9f 7b6a 	vldr	d7, [pc, #424]	@ 8002788 <control_update+0x798>
 80025e2:	eeb0 1b47 	vmov.f64	d1, d7
 80025e6:	ed97 0b02 	vldr	d0, [r7, #8]
 80025ea:	f000 fa65 	bl	8002ab8 <calc_dutycycle>
 80025ee:	4603      	mov	r3, r0
 80025f0:	461a      	mov	r2, r3
 80025f2:	4b6a      	ldr	r3, [pc, #424]	@ (800279c <control_update+0x7ac>)
 80025f4:	801a      	strh	r2, [r3, #0]
		TIM4->CCR2 = dutycycle;
 80025f6:	4b69      	ldr	r3, [pc, #420]	@ (800279c <control_update+0x7ac>)
 80025f8:	881a      	ldrh	r2, [r3, #0]
 80025fa:	4b6a      	ldr	r3, [pc, #424]	@ (80027a4 <control_update+0x7b4>)
 80025fc:	639a      	str	r2, [r3, #56]	@ 0x38

	absref = fabs(cmd_ref[T4C3]); // duty cycle must be positive
 80025fe:	4b66      	ldr	r3, [pc, #408]	@ (8002798 <control_update+0x7a8>)
 8002600:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002604:	ee07 3a90 	vmov	s15, r3
 8002608:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800260c:	eeb0 7bc7 	vabs.f64	d7, d7
 8002610:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002614:	ed9f 7b5c 	vldr	d7, [pc, #368]	@ 8002788 <control_update+0x798>
 8002618:	eeb0 1b47 	vmov.f64	d1, d7
 800261c:	ed97 0b02 	vldr	d0, [r7, #8]
 8002620:	f000 fa4a 	bl	8002ab8 <calc_dutycycle>
 8002624:	4603      	mov	r3, r0
 8002626:	461a      	mov	r2, r3
 8002628:	4b5c      	ldr	r3, [pc, #368]	@ (800279c <control_update+0x7ac>)
 800262a:	801a      	strh	r2, [r3, #0]
		TIM4->CCR3 = dutycycle;
 800262c:	4b5b      	ldr	r3, [pc, #364]	@ (800279c <control_update+0x7ac>)
 800262e:	881a      	ldrh	r2, [r3, #0]
 8002630:	4b5c      	ldr	r3, [pc, #368]	@ (80027a4 <control_update+0x7b4>)
 8002632:	63da      	str	r2, [r3, #60]	@ 0x3c

	absref = fabs(cmd_ref[T4C4]); // duty cycle must be positive
 8002634:	4b58      	ldr	r3, [pc, #352]	@ (8002798 <control_update+0x7a8>)
 8002636:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800263a:	ee07 3a90 	vmov	s15, r3
 800263e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002642:	eeb0 7bc7 	vabs.f64	d7, d7
 8002646:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 800264a:	ed9f 7b4f 	vldr	d7, [pc, #316]	@ 8002788 <control_update+0x798>
 800264e:	eeb0 1b47 	vmov.f64	d1, d7
 8002652:	ed97 0b02 	vldr	d0, [r7, #8]
 8002656:	f000 fa2f 	bl	8002ab8 <calc_dutycycle>
 800265a:	4603      	mov	r3, r0
 800265c:	461a      	mov	r2, r3
 800265e:	4b4f      	ldr	r3, [pc, #316]	@ (800279c <control_update+0x7ac>)
 8002660:	801a      	strh	r2, [r3, #0]
		TIM4->CCR4 = dutycycle;
 8002662:	4b4e      	ldr	r3, [pc, #312]	@ (800279c <control_update+0x7ac>)
 8002664:	881a      	ldrh	r2, [r3, #0]
 8002666:	4b4f      	ldr	r3, [pc, #316]	@ (80027a4 <control_update+0x7b4>)
 8002668:	641a      	str	r2, [r3, #64]	@ 0x40
	//End Timer 4


	//Timer 5
	absref = fabs(cmd_ref[T5C2]); // duty cycle must be positive
 800266a:	4b4b      	ldr	r3, [pc, #300]	@ (8002798 <control_update+0x7a8>)
 800266c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002670:	ee07 3a90 	vmov	s15, r3
 8002674:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002678:	eeb0 7bc7 	vabs.f64	d7, d7
 800267c:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002680:	ed9f 7b41 	vldr	d7, [pc, #260]	@ 8002788 <control_update+0x798>
 8002684:	eeb0 1b47 	vmov.f64	d1, d7
 8002688:	ed97 0b02 	vldr	d0, [r7, #8]
 800268c:	f000 fa14 	bl	8002ab8 <calc_dutycycle>
 8002690:	4603      	mov	r3, r0
 8002692:	461a      	mov	r2, r3
 8002694:	4b41      	ldr	r3, [pc, #260]	@ (800279c <control_update+0x7ac>)
 8002696:	801a      	strh	r2, [r3, #0]
		TIM5->CCR2 = dutycycle;
 8002698:	4b40      	ldr	r3, [pc, #256]	@ (800279c <control_update+0x7ac>)
 800269a:	881a      	ldrh	r2, [r3, #0]
 800269c:	4b42      	ldr	r3, [pc, #264]	@ (80027a8 <control_update+0x7b8>)
 800269e:	639a      	str	r2, [r3, #56]	@ 0x38

	absref = fabs(cmd_ref[T5C3]); // duty cycle must be positive
 80026a0:	4b3d      	ldr	r3, [pc, #244]	@ (8002798 <control_update+0x7a8>)
 80026a2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80026a6:	ee07 3a90 	vmov	s15, r3
 80026aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80026ae:	eeb0 7bc7 	vabs.f64	d7, d7
 80026b2:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80026b6:	ed9f 7b34 	vldr	d7, [pc, #208]	@ 8002788 <control_update+0x798>
 80026ba:	eeb0 1b47 	vmov.f64	d1, d7
 80026be:	ed97 0b02 	vldr	d0, [r7, #8]
 80026c2:	f000 f9f9 	bl	8002ab8 <calc_dutycycle>
 80026c6:	4603      	mov	r3, r0
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b34      	ldr	r3, [pc, #208]	@ (800279c <control_update+0x7ac>)
 80026cc:	801a      	strh	r2, [r3, #0]
		TIM5->CCR3 = dutycycle;
 80026ce:	4b33      	ldr	r3, [pc, #204]	@ (800279c <control_update+0x7ac>)
 80026d0:	881a      	ldrh	r2, [r3, #0]
 80026d2:	4b35      	ldr	r3, [pc, #212]	@ (80027a8 <control_update+0x7b8>)
 80026d4:	63da      	str	r2, [r3, #60]	@ 0x3c
	//End Timer 5


	//Timer 8
	absref = fabs(cmd_ref[T8C4]); // duty cycle must be positive
 80026d6:	4b30      	ldr	r3, [pc, #192]	@ (8002798 <control_update+0x7a8>)
 80026d8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80026dc:	ee07 3a90 	vmov	s15, r3
 80026e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80026e4:	eeb0 7bc7 	vabs.f64	d7, d7
 80026e8:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80026ec:	ed9f 7b26 	vldr	d7, [pc, #152]	@ 8002788 <control_update+0x798>
 80026f0:	eeb0 1b47 	vmov.f64	d1, d7
 80026f4:	ed97 0b02 	vldr	d0, [r7, #8]
 80026f8:	f000 f9de 	bl	8002ab8 <calc_dutycycle>
 80026fc:	4603      	mov	r3, r0
 80026fe:	461a      	mov	r2, r3
 8002700:	4b26      	ldr	r3, [pc, #152]	@ (800279c <control_update+0x7ac>)
 8002702:	801a      	strh	r2, [r3, #0]
		TIM8->CCR4 = dutycycle;
 8002704:	4b25      	ldr	r3, [pc, #148]	@ (800279c <control_update+0x7ac>)
 8002706:	881a      	ldrh	r2, [r3, #0]
 8002708:	4b28      	ldr	r3, [pc, #160]	@ (80027ac <control_update+0x7bc>)
 800270a:	641a      	str	r2, [r3, #64]	@ 0x40
	//End Timer 8


	//Timer 12
	absref = fabs(cmd_ref[T12C2]); // duty cycle must be positive
 800270c:	4b22      	ldr	r3, [pc, #136]	@ (8002798 <control_update+0x7a8>)
 800270e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002712:	ee07 3a90 	vmov	s15, r3
 8002716:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800271a:	eeb0 7bc7 	vabs.f64	d7, d7
 800271e:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002722:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8002788 <control_update+0x798>
 8002726:	eeb0 1b47 	vmov.f64	d1, d7
 800272a:	ed97 0b02 	vldr	d0, [r7, #8]
 800272e:	f000 f9c3 	bl	8002ab8 <calc_dutycycle>
 8002732:	4603      	mov	r3, r0
 8002734:	461a      	mov	r2, r3
 8002736:	4b19      	ldr	r3, [pc, #100]	@ (800279c <control_update+0x7ac>)
 8002738:	801a      	strh	r2, [r3, #0]
		TIM12->CCR2 = dutycycle;
 800273a:	4b18      	ldr	r3, [pc, #96]	@ (800279c <control_update+0x7ac>)
 800273c:	881a      	ldrh	r2, [r3, #0]
 800273e:	4b1c      	ldr	r3, [pc, #112]	@ (80027b0 <control_update+0x7c0>)
 8002740:	639a      	str	r2, [r3, #56]	@ 0x38
	//End Timer 12


	//Timer 13
	absref = fabs(cmd_ref[T13C1]); // duty cycle must be positive
 8002742:	4b15      	ldr	r3, [pc, #84]	@ (8002798 <control_update+0x7a8>)
 8002744:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002748:	ee07 3a90 	vmov	s15, r3
 800274c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002750:	eeb0 7bc7 	vabs.f64	d7, d7
 8002754:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002758:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8002788 <control_update+0x798>
 800275c:	eeb0 1b47 	vmov.f64	d1, d7
 8002760:	ed97 0b02 	vldr	d0, [r7, #8]
 8002764:	f000 f9a8 	bl	8002ab8 <calc_dutycycle>
 8002768:	4603      	mov	r3, r0
 800276a:	461a      	mov	r2, r3
 800276c:	4b0b      	ldr	r3, [pc, #44]	@ (800279c <control_update+0x7ac>)
 800276e:	801a      	strh	r2, [r3, #0]
		TIM13->CCR1 = dutycycle;
 8002770:	4b0a      	ldr	r3, [pc, #40]	@ (800279c <control_update+0x7ac>)
 8002772:	881a      	ldrh	r2, [r3, #0]
 8002774:	4b0f      	ldr	r3, [pc, #60]	@ (80027b4 <control_update+0x7c4>)
 8002776:	635a      	str	r2, [r3, #52]	@ 0x34
	//End Timer 13


	//Timer 14
	absref = fabs(cmd_ref[T14C1]); // duty cycle must be positive
 8002778:	4b07      	ldr	r3, [pc, #28]	@ (8002798 <control_update+0x7a8>)
 800277a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800277e:	ee07 3a90 	vmov	s15, r3
 8002782:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002786:	e017      	b.n	80027b8 <control_update+0x7c8>
 8002788:	cccccccd 	.word	0xcccccccd
 800278c:	3ffccccc 	.word	0x3ffccccc
 8002790:	2400000c 	.word	0x2400000c
 8002794:	58020c00 	.word	0x58020c00
 8002798:	24003610 	.word	0x24003610
 800279c:	2400365c 	.word	0x2400365c
 80027a0:	40010000 	.word	0x40010000
 80027a4:	40000800 	.word	0x40000800
 80027a8:	40000c00 	.word	0x40000c00
 80027ac:	40010400 	.word	0x40010400
 80027b0:	40001800 	.word	0x40001800
 80027b4:	40001c00 	.word	0x40001c00
 80027b8:	eeb0 7bc7 	vabs.f64	d7, d7
 80027bc:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80027c0:	ed9f 7bb3 	vldr	d7, [pc, #716]	@ 8002a90 <control_update+0xaa0>
 80027c4:	eeb0 1b47 	vmov.f64	d1, d7
 80027c8:	ed97 0b02 	vldr	d0, [r7, #8]
 80027cc:	f000 f974 	bl	8002ab8 <calc_dutycycle>
 80027d0:	4603      	mov	r3, r0
 80027d2:	461a      	mov	r2, r3
 80027d4:	4bb0      	ldr	r3, [pc, #704]	@ (8002a98 <control_update+0xaa8>)
 80027d6:	801a      	strh	r2, [r3, #0]
		TIM14->CCR1 = dutycycle;
 80027d8:	4baf      	ldr	r3, [pc, #700]	@ (8002a98 <control_update+0xaa8>)
 80027da:	881a      	ldrh	r2, [r3, #0]
 80027dc:	4baf      	ldr	r3, [pc, #700]	@ (8002a9c <control_update+0xaac>)
 80027de:	635a      	str	r2, [r3, #52]	@ 0x34
	//End Timer 14


	//Timer 15
	absref = fabs(cmd_ref[T15C1]); // duty cycle must be positive
 80027e0:	4baf      	ldr	r3, [pc, #700]	@ (8002aa0 <control_update+0xab0>)
 80027e2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80027e6:	ee07 3a90 	vmov	s15, r3
 80027ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80027ee:	eeb0 7bc7 	vabs.f64	d7, d7
 80027f2:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80027f6:	ed9f 7ba6 	vldr	d7, [pc, #664]	@ 8002a90 <control_update+0xaa0>
 80027fa:	eeb0 1b47 	vmov.f64	d1, d7
 80027fe:	ed97 0b02 	vldr	d0, [r7, #8]
 8002802:	f000 f959 	bl	8002ab8 <calc_dutycycle>
 8002806:	4603      	mov	r3, r0
 8002808:	461a      	mov	r2, r3
 800280a:	4ba3      	ldr	r3, [pc, #652]	@ (8002a98 <control_update+0xaa8>)
 800280c:	801a      	strh	r2, [r3, #0]
		TIM15->CCR1 = dutycycle;
 800280e:	4ba2      	ldr	r3, [pc, #648]	@ (8002a98 <control_update+0xaa8>)
 8002810:	881a      	ldrh	r2, [r3, #0]
 8002812:	4ba4      	ldr	r3, [pc, #656]	@ (8002aa4 <control_update+0xab4>)
 8002814:	635a      	str	r2, [r3, #52]	@ 0x34

	absref = fabs(cmd_ref[T15C2]); // duty cycle must be positive
 8002816:	4ba2      	ldr	r3, [pc, #648]	@ (8002aa0 <control_update+0xab0>)
 8002818:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800281c:	ee07 3a90 	vmov	s15, r3
 8002820:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002824:	eeb0 7bc7 	vabs.f64	d7, d7
 8002828:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 800282c:	ed9f 7b98 	vldr	d7, [pc, #608]	@ 8002a90 <control_update+0xaa0>
 8002830:	eeb0 1b47 	vmov.f64	d1, d7
 8002834:	ed97 0b02 	vldr	d0, [r7, #8]
 8002838:	f000 f93e 	bl	8002ab8 <calc_dutycycle>
 800283c:	4603      	mov	r3, r0
 800283e:	461a      	mov	r2, r3
 8002840:	4b95      	ldr	r3, [pc, #596]	@ (8002a98 <control_update+0xaa8>)
 8002842:	801a      	strh	r2, [r3, #0]
		TIM15->CCR2 = dutycycle;
 8002844:	4b94      	ldr	r3, [pc, #592]	@ (8002a98 <control_update+0xaa8>)
 8002846:	881a      	ldrh	r2, [r3, #0]
 8002848:	4b96      	ldr	r3, [pc, #600]	@ (8002aa4 <control_update+0xab4>)
 800284a:	639a      	str	r2, [r3, #56]	@ 0x38
	//End Timer 15


	//Timer 16
	absref = fabs(cmd_ref[T16C1]); // duty cycle must be positive
 800284c:	4b94      	ldr	r3, [pc, #592]	@ (8002aa0 <control_update+0xab0>)
 800284e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8002852:	ee07 3a90 	vmov	s15, r3
 8002856:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800285a:	eeb0 7bc7 	vabs.f64	d7, d7
 800285e:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002862:	ed9f 7b8b 	vldr	d7, [pc, #556]	@ 8002a90 <control_update+0xaa0>
 8002866:	eeb0 1b47 	vmov.f64	d1, d7
 800286a:	ed97 0b02 	vldr	d0, [r7, #8]
 800286e:	f000 f923 	bl	8002ab8 <calc_dutycycle>
 8002872:	4603      	mov	r3, r0
 8002874:	461a      	mov	r2, r3
 8002876:	4b88      	ldr	r3, [pc, #544]	@ (8002a98 <control_update+0xaa8>)
 8002878:	801a      	strh	r2, [r3, #0]
		TIM16->CCR1 = dutycycle;
 800287a:	4b87      	ldr	r3, [pc, #540]	@ (8002a98 <control_update+0xaa8>)
 800287c:	881a      	ldrh	r2, [r3, #0]
 800287e:	4b8a      	ldr	r3, [pc, #552]	@ (8002aa8 <control_update+0xab8>)
 8002880:	635a      	str	r2, [r3, #52]	@ 0x34
	//End Timer 16


	//HRTIM CODE GOES HERE ********
	//HRTIM CHA
	absref = fabs(cmd_ref[HRA1]); // duty cycle must be positive
 8002882:	4b87      	ldr	r3, [pc, #540]	@ (8002aa0 <control_update+0xab0>)
 8002884:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8002888:	ee07 3a90 	vmov	s15, r3
 800288c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002890:	eeb0 7bc7 	vabs.f64	d7, d7
 8002894:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002898:	ed9f 7b7d 	vldr	d7, [pc, #500]	@ 8002a90 <control_update+0xaa0>
 800289c:	eeb0 1b47 	vmov.f64	d1, d7
 80028a0:	ed97 0b02 	vldr	d0, [r7, #8]
 80028a4:	f000 f908 	bl	8002ab8 <calc_dutycycle>
 80028a8:	4603      	mov	r3, r0
 80028aa:	461a      	mov	r2, r3
 80028ac:	4b7a      	ldr	r3, [pc, #488]	@ (8002a98 <control_update+0xaa8>)
 80028ae:	801a      	strh	r2, [r3, #0]
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP1xR = dutycycle;
 80028b0:	4b79      	ldr	r3, [pc, #484]	@ (8002a98 <control_update+0xaa8>)
 80028b2:	881a      	ldrh	r2, [r3, #0]
 80028b4:	4b7d      	ldr	r3, [pc, #500]	@ (8002aac <control_update+0xabc>)
 80028b6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

	absref = fabs(cmd_ref[HRA2]); // duty cycle must be positive
 80028ba:	4b79      	ldr	r3, [pc, #484]	@ (8002aa0 <control_update+0xab0>)
 80028bc:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 80028c0:	ee07 3a90 	vmov	s15, r3
 80028c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80028c8:	eeb0 7bc7 	vabs.f64	d7, d7
 80028cc:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80028d0:	ed9f 7b6f 	vldr	d7, [pc, #444]	@ 8002a90 <control_update+0xaa0>
 80028d4:	eeb0 1b47 	vmov.f64	d1, d7
 80028d8:	ed97 0b02 	vldr	d0, [r7, #8]
 80028dc:	f000 f8ec 	bl	8002ab8 <calc_dutycycle>
 80028e0:	4603      	mov	r3, r0
 80028e2:	461a      	mov	r2, r3
 80028e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002a98 <control_update+0xaa8>)
 80028e6:	801a      	strh	r2, [r3, #0]
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP2xR = dutycycle;
 80028e8:	4b6b      	ldr	r3, [pc, #428]	@ (8002a98 <control_update+0xaa8>)
 80028ea:	881a      	ldrh	r2, [r3, #0]
 80028ec:	4b6f      	ldr	r3, [pc, #444]	@ (8002aac <control_update+0xabc>)
 80028ee:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	//End HRTIM CHA

	//HRTIM CHB
	absref = fabs(cmd_ref[HRB1]); // duty cycle must be positive
 80028f2:	4b6b      	ldr	r3, [pc, #428]	@ (8002aa0 <control_update+0xab0>)
 80028f4:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 80028f8:	ee07 3a90 	vmov	s15, r3
 80028fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002900:	eeb0 7bc7 	vabs.f64	d7, d7
 8002904:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002908:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8002a90 <control_update+0xaa0>
 800290c:	eeb0 1b47 	vmov.f64	d1, d7
 8002910:	ed97 0b02 	vldr	d0, [r7, #8]
 8002914:	f000 f8d0 	bl	8002ab8 <calc_dutycycle>
 8002918:	4603      	mov	r3, r0
 800291a:	461a      	mov	r2, r3
 800291c:	4b5e      	ldr	r3, [pc, #376]	@ (8002a98 <control_update+0xaa8>)
 800291e:	801a      	strh	r2, [r3, #0]
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP1xR = dutycycle;
 8002920:	4b5d      	ldr	r3, [pc, #372]	@ (8002a98 <control_update+0xaa8>)
 8002922:	881a      	ldrh	r2, [r3, #0]
 8002924:	4b61      	ldr	r3, [pc, #388]	@ (8002aac <control_update+0xabc>)
 8002926:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

	absref = fabs(cmd_ref[HRB2]); // duty cycle must be positive
 800292a:	4b5d      	ldr	r3, [pc, #372]	@ (8002aa0 <control_update+0xab0>)
 800292c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8002930:	ee07 3a90 	vmov	s15, r3
 8002934:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002938:	eeb0 7bc7 	vabs.f64	d7, d7
 800293c:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002940:	ed9f 7b53 	vldr	d7, [pc, #332]	@ 8002a90 <control_update+0xaa0>
 8002944:	eeb0 1b47 	vmov.f64	d1, d7
 8002948:	ed97 0b02 	vldr	d0, [r7, #8]
 800294c:	f000 f8b4 	bl	8002ab8 <calc_dutycycle>
 8002950:	4603      	mov	r3, r0
 8002952:	461a      	mov	r2, r3
 8002954:	4b50      	ldr	r3, [pc, #320]	@ (8002a98 <control_update+0xaa8>)
 8002956:	801a      	strh	r2, [r3, #0]
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP2xR = dutycycle;
 8002958:	4b4f      	ldr	r3, [pc, #316]	@ (8002a98 <control_update+0xaa8>)
 800295a:	881a      	ldrh	r2, [r3, #0]
 800295c:	4b53      	ldr	r3, [pc, #332]	@ (8002aac <control_update+0xabc>)
 800295e:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
	//End HRTIM CHB

	//HRTIM CHC
	absref = fabs(cmd_ref[HRC1]); // duty cycle must be positive
 8002962:	4b4f      	ldr	r3, [pc, #316]	@ (8002aa0 <control_update+0xab0>)
 8002964:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8002968:	ee07 3a90 	vmov	s15, r3
 800296c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002970:	eeb0 7bc7 	vabs.f64	d7, d7
 8002974:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002978:	ed9f 7b45 	vldr	d7, [pc, #276]	@ 8002a90 <control_update+0xaa0>
 800297c:	eeb0 1b47 	vmov.f64	d1, d7
 8002980:	ed97 0b02 	vldr	d0, [r7, #8]
 8002984:	f000 f898 	bl	8002ab8 <calc_dutycycle>
 8002988:	4603      	mov	r3, r0
 800298a:	461a      	mov	r2, r3
 800298c:	4b42      	ldr	r3, [pc, #264]	@ (8002a98 <control_update+0xaa8>)
 800298e:	801a      	strh	r2, [r3, #0]
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP1xR = dutycycle;
 8002990:	4b41      	ldr	r3, [pc, #260]	@ (8002a98 <control_update+0xaa8>)
 8002992:	881a      	ldrh	r2, [r3, #0]
 8002994:	4b45      	ldr	r3, [pc, #276]	@ (8002aac <control_update+0xabc>)
 8002996:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c

	absref = fabs(cmd_ref[HRC2]); // duty cycle must be positive
 800299a:	4b41      	ldr	r3, [pc, #260]	@ (8002aa0 <control_update+0xab0>)
 800299c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 80029a0:	ee07 3a90 	vmov	s15, r3
 80029a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80029a8:	eeb0 7bc7 	vabs.f64	d7, d7
 80029ac:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80029b0:	ed9f 7b37 	vldr	d7, [pc, #220]	@ 8002a90 <control_update+0xaa0>
 80029b4:	eeb0 1b47 	vmov.f64	d1, d7
 80029b8:	ed97 0b02 	vldr	d0, [r7, #8]
 80029bc:	f000 f87c 	bl	8002ab8 <calc_dutycycle>
 80029c0:	4603      	mov	r3, r0
 80029c2:	461a      	mov	r2, r3
 80029c4:	4b34      	ldr	r3, [pc, #208]	@ (8002a98 <control_update+0xaa8>)
 80029c6:	801a      	strh	r2, [r3, #0]
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP2xR = dutycycle;
 80029c8:	4b33      	ldr	r3, [pc, #204]	@ (8002a98 <control_update+0xaa8>)
 80029ca:	881a      	ldrh	r2, [r3, #0]
 80029cc:	4b37      	ldr	r3, [pc, #220]	@ (8002aac <control_update+0xabc>)
 80029ce:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
	//End HRTIM CHC

	//HRTIM CHD
	absref = fabs(cmd_ref[HRD1]); // duty cycle must be positive
 80029d2:	4b33      	ldr	r3, [pc, #204]	@ (8002aa0 <control_update+0xab0>)
 80029d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80029d8:	ee07 3a90 	vmov	s15, r3
 80029dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80029e0:	eeb0 7bc7 	vabs.f64	d7, d7
 80029e4:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 80029e8:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 8002a90 <control_update+0xaa0>
 80029ec:	eeb0 1b47 	vmov.f64	d1, d7
 80029f0:	ed97 0b02 	vldr	d0, [r7, #8]
 80029f4:	f000 f860 	bl	8002ab8 <calc_dutycycle>
 80029f8:	4603      	mov	r3, r0
 80029fa:	461a      	mov	r2, r3
 80029fc:	4b26      	ldr	r3, [pc, #152]	@ (8002a98 <control_update+0xaa8>)
 80029fe:	801a      	strh	r2, [r3, #0]
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = dutycycle;
 8002a00:	4b25      	ldr	r3, [pc, #148]	@ (8002a98 <control_update+0xaa8>)
 8002a02:	881a      	ldrh	r2, [r3, #0]
 8002a04:	4b29      	ldr	r3, [pc, #164]	@ (8002aac <control_update+0xabc>)
 8002a06:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

	absref = fabs(cmd_ref[HRD2]); // duty cycle must be positive
 8002a0a:	4b25      	ldr	r3, [pc, #148]	@ (8002aa0 <control_update+0xab0>)
 8002a0c:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8002a10:	ee07 3a90 	vmov	s15, r3
 8002a14:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a18:	eeb0 7bc7 	vabs.f64	d7, d7
 8002a1c:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002a20:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8002a90 <control_update+0xaa0>
 8002a24:	eeb0 1b47 	vmov.f64	d1, d7
 8002a28:	ed97 0b02 	vldr	d0, [r7, #8]
 8002a2c:	f000 f844 	bl	8002ab8 <calc_dutycycle>
 8002a30:	4603      	mov	r3, r0
 8002a32:	461a      	mov	r2, r3
 8002a34:	4b18      	ldr	r3, [pc, #96]	@ (8002a98 <control_update+0xaa8>)
 8002a36:	801a      	strh	r2, [r3, #0]
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP2xR = dutycycle;
 8002a38:	4b17      	ldr	r3, [pc, #92]	@ (8002a98 <control_update+0xaa8>)
 8002a3a:	881a      	ldrh	r2, [r3, #0]
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002aac <control_update+0xabc>)
 8002a3e:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
	//End HRTIM CHD
	//END HRTIM CODE HERE


	//LPTIM1
	absref = fabs(cmd_ref[LPTIM]); // duty cycle must be positive
 8002a42:	4b17      	ldr	r3, [pc, #92]	@ (8002aa0 <control_update+0xab0>)
 8002a44:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8002a48:	ee07 3a90 	vmov	s15, r3
 8002a4c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a50:	eeb0 7bc7 	vabs.f64	d7, d7
 8002a54:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8002a58:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8002a90 <control_update+0xaa0>
 8002a5c:	eeb0 1b47 	vmov.f64	d1, d7
 8002a60:	ed97 0b02 	vldr	d0, [r7, #8]
 8002a64:	f000 f828 	bl	8002ab8 <calc_dutycycle>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a98 <control_update+0xaa8>)
 8002a6e:	801a      	strh	r2, [r3, #0]
		LPTIM1->CMP = dutycycle/2;
 8002a70:	4b09      	ldr	r3, [pc, #36]	@ (8002a98 <control_update+0xaa8>)
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	085b      	lsrs	r3, r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab0 <control_update+0xac0>)
 8002a7a:	615a      	str	r2, [r3, #20]
	//End LPTIM1


	// reset timer flag
	ctrl_tmr_expired = FALSE;
 8002a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab4 <control_update+0xac4>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	701a      	strb	r2, [r3, #0]
}
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	f3af 8000 	nop.w
 8002a90:	cccccccd 	.word	0xcccccccd
 8002a94:	3ffccccc 	.word	0x3ffccccc
 8002a98:	2400365c 	.word	0x2400365c
 8002a9c:	40002000 	.word	0x40002000
 8002aa0:	24003610 	.word	0x24003610
 8002aa4:	40014000 	.word	0x40014000
 8002aa8:	40014400 	.word	0x40014400
 8002aac:	40017400 	.word	0x40017400
 8002ab0:	40002400 	.word	0x40002400
 8002ab4:	240006a4 	.word	0x240006a4

08002ab8 <calc_dutycycle>:


static uint16_t calc_dutycycle(double cmd, double vss)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	ed87 0b02 	vstr	d0, [r7, #8]
 8002ac2:	ed87 1b00 	vstr	d1, [r7]
	//	@ param cmd command voltage
	//	@ param vss supply voltage
	//	@ return dutycycle

	// duty cycle variable
	uint16_t dc={0};
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	82fb      	strh	r3, [r7, #22]

	dc = (uint16_t)(cmd/vss * (double)PERIOD);
 8002aca:	ed97 5b02 	vldr	d5, [r7, #8]
 8002ace:	ed97 6b00 	vldr	d6, [r7]
 8002ad2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002ad6:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8002b08 <calc_dutycycle+0x50>
 8002ada:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002ade:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002ae2:	ee17 3a90 	vmov	r3, s15
 8002ae6:	82fb      	strh	r3, [r7, #22]
	// keep the dutycycle within the period of the PWM signal
	if(dc>PERIOD) dc = PERIOD;
 8002ae8:	8afb      	ldrh	r3, [r7, #22]
 8002aea:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d902      	bls.n	8002af8 <calc_dutycycle+0x40>
 8002af2:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 8002af6:	82fb      	strh	r3, [r7, #22]

	return dc;
 8002af8:	8afb      	ldrh	r3, [r7, #22]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	00000000 	.word	0x00000000
 8002b0c:	40d76fc0 	.word	0x40d76fc0

08002b10 <gen_sine>:

static void gen_sine(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
	int i = 0;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
	double scale = TWO_PI/SIN_PERIOD;
 8002b1a:	a316      	add	r3, pc, #88	@ (adr r3, 8002b74 <gen_sine+0x64>)
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	e9c7 2300 	strd	r2, r3, [r7]
	for(i=0; i<SIN_PERIOD; i++ )
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	e017      	b.n	8002b5a <gen_sine+0x4a>
	{
		sine_vals[i] = sin(i*scale);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	ee07 3a90 	vmov	s15, r3
 8002b30:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002b34:	ed97 7b00 	vldr	d7, [r7]
 8002b38:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002b3c:	eeb0 0b47 	vmov.f64	d0, d7
 8002b40:	f00c fe6a 	bl	800f818 <sin>
 8002b44:	eeb0 7b40 	vmov.f64	d7, d0
 8002b48:	4a09      	ldr	r2, [pc, #36]	@ (8002b70 <gen_sine+0x60>)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4413      	add	r3, r2
 8002b50:	ed83 7b00 	vstr	d7, [r3]
	for(i=0; i<SIN_PERIOD; i++ )
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	3301      	adds	r3, #1
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b60:	dbe3      	blt.n	8002b2a <gen_sine+0x1a>
	}
}
 8002b62:	bf00      	nop
 8002b64:	bf00      	nop
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	f3af 8000 	nop.w
 8002b70:	240006b0 	.word	0x240006b0
 8002b74:	b68b71c3 	.word	0xb68b71c3
 8002b78:	3f79bc65 	.word	0x3f79bc65

08002b7c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002b82:	463b      	mov	r3, r7
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002b8e:	f001 f8a5 	bl	8003cdc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002b92:	2301      	movs	r3, #1
 8002b94:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002b9e:	231f      	movs	r3, #31
 8002ba0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002ba2:	2387      	movs	r3, #135	@ 0x87
 8002ba4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002baa:	2300      	movs	r3, #0
 8002bac:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002bbe:	463b      	mov	r3, r7
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f001 f8c3 	bl	8003d4c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002bc6:	2004      	movs	r0, #4
 8002bc8:	f001 f8a0 	bl	8003d0c <HAL_MPU_Enable>

}
 8002bcc:	bf00      	nop
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd8:	b672      	cpsid	i
}
 8002bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bdc:	bf00      	nop
 8002bde:	e7fd      	b.n	8002bdc <Error_Handler+0x8>

08002be0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c10 <HAL_MspInit+0x30>)
 8002be8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002bec:	4a08      	ldr	r2, [pc, #32]	@ (8002c10 <HAL_MspInit+0x30>)
 8002bee:	f043 0302 	orr.w	r3, r3, #2
 8002bf2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002bf6:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <HAL_MspInit+0x30>)
 8002bf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	607b      	str	r3, [r7, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	58024400 	.word	0x58024400

08002c14 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b0b4      	sub	sp, #208	@ 0xd0
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c1c:	f107 0310 	add.w	r3, r7, #16
 8002c20:	22c0      	movs	r2, #192	@ 0xc0
 8002c22:	2100      	movs	r1, #0
 8002c24:	4618      	mov	r0, r3
 8002c26:	f00a ff40 	bl	800daaa <memset>
  if(hhrtim->Instance==HRTIM1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a14      	ldr	r2, [pc, #80]	@ (8002c80 <HAL_HRTIM_MspInit+0x6c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d121      	bne.n	8002c78 <HAL_HRTIM_MspInit+0x64>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8002c34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c46:	f107 0310 	add.w	r3, r7, #16
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f004 fd4a 	bl	80076e4 <HAL_RCCEx_PeriphCLKConfig>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8002c56:	f7ff ffbd 	bl	8002bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c84 <HAL_HRTIM_MspInit+0x70>)
 8002c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c60:	4a08      	ldr	r2, [pc, #32]	@ (8002c84 <HAL_HRTIM_MspInit+0x70>)
 8002c62:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002c66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002c6a:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <HAL_HRTIM_MspInit+0x70>)
 8002c6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8002c78:	bf00      	nop
 8002c7a:	37d0      	adds	r7, #208	@ 0xd0
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40017400 	.word	0x40017400
 8002c84:	58024400 	.word	0x58024400

08002c88 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08a      	sub	sp, #40	@ 0x28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c90:	f107 0314 	add.w	r3, r7, #20
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a23      	ldr	r2, [pc, #140]	@ (8002d34 <HAL_HRTIM_MspPostInit+0xac>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d13f      	bne.n	8002d2a <HAL_HRTIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002caa:	4b23      	ldr	r3, [pc, #140]	@ (8002d38 <HAL_HRTIM_MspPostInit+0xb0>)
 8002cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cb0:	4a21      	ldr	r2, [pc, #132]	@ (8002d38 <HAL_HRTIM_MspPostInit+0xb0>)
 8002cb2:	f043 0304 	orr.w	r3, r3, #4
 8002cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002cba:	4b1f      	ldr	r3, [pc, #124]	@ (8002d38 <HAL_HRTIM_MspPostInit+0xb0>)
 8002cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d38 <HAL_HRTIM_MspPostInit+0xb0>)
 8002cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cce:	4a1a      	ldr	r2, [pc, #104]	@ (8002d38 <HAL_HRTIM_MspPostInit+0xb0>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002cd8:	4b17      	ldr	r3, [pc, #92]	@ (8002d38 <HAL_HRTIM_MspPostInit+0xb0>)
 8002cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> HRTIM_CHC1
    PA10     ------> HRTIM_CHC2
    PA11     ------> HRTIM_CHD1
    PA12     ------> HRTIM_CHD2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002ce6:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cec:	2302      	movs	r3, #2
 8002cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cfc:	f107 0314 	add.w	r3, r7, #20
 8002d00:	4619      	mov	r1, r3
 8002d02:	480e      	ldr	r0, [pc, #56]	@ (8002d3c <HAL_HRTIM_MspPostInit+0xb4>)
 8002d04:	f001 fdc6 	bl	8004894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002d08:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002d0c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d16:	2303      	movs	r3, #3
 8002d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1e:	f107 0314 	add.w	r3, r7, #20
 8002d22:	4619      	mov	r1, r3
 8002d24:	4806      	ldr	r0, [pc, #24]	@ (8002d40 <HAL_HRTIM_MspPostInit+0xb8>)
 8002d26:	f001 fdb5 	bl	8004894 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8002d2a:	bf00      	nop
 8002d2c:	3728      	adds	r7, #40	@ 0x28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40017400 	.word	0x40017400
 8002d38:	58024400 	.word	0x58024400
 8002d3c:	58020800 	.word	0x58020800
 8002d40:	58020000 	.word	0x58020000

08002d44 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b0ba      	sub	sp, #232	@ 0xe8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d5c:	f107 0310 	add.w	r3, r7, #16
 8002d60:	22c0      	movs	r2, #192	@ 0xc0
 8002d62:	2100      	movs	r1, #0
 8002d64:	4618      	mov	r0, r3
 8002d66:	f00a fea0 	bl	800daaa <memset>
  if(hlptim->Instance==LPTIM1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a2b      	ldr	r2, [pc, #172]	@ (8002e1c <HAL_LPTIM_MspInit+0xd8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d14e      	bne.n	8002e12 <HAL_LPTIM_MspInit+0xce>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002d74:	f04f 0220 	mov.w	r2, #32
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d86:	f107 0310 	add.w	r3, r7, #16
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f004 fcaa 	bl	80076e4 <HAL_RCCEx_PeriphCLKConfig>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_LPTIM_MspInit+0x56>
    {
      Error_Handler();
 8002d96:	f7ff ff1d 	bl	8002bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002d9a:	4b21      	ldr	r3, [pc, #132]	@ (8002e20 <HAL_LPTIM_MspInit+0xdc>)
 8002d9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002da0:	4a1f      	ldr	r2, [pc, #124]	@ (8002e20 <HAL_LPTIM_MspInit+0xdc>)
 8002da2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002da6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002daa:	4b1d      	ldr	r3, [pc, #116]	@ (8002e20 <HAL_LPTIM_MspInit+0xdc>)
 8002dac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002db0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002db8:	4b19      	ldr	r3, [pc, #100]	@ (8002e20 <HAL_LPTIM_MspInit+0xdc>)
 8002dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dbe:	4a18      	ldr	r2, [pc, #96]	@ (8002e20 <HAL_LPTIM_MspInit+0xdc>)
 8002dc0:	f043 0308 	orr.w	r3, r3, #8
 8002dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dc8:	4b15      	ldr	r3, [pc, #84]	@ (8002e20 <HAL_LPTIM_MspInit+0xdc>)
 8002dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration
    PD13     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002dd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002dda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dde:	2302      	movs	r3, #2
 8002de0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dea:	2300      	movs	r3, #0
 8002dec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8002df0:	2301      	movs	r3, #1
 8002df2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002df6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4809      	ldr	r0, [pc, #36]	@ (8002e24 <HAL_LPTIM_MspInit+0xe0>)
 8002dfe:	f001 fd49 	bl	8004894 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8002e02:	2200      	movs	r2, #0
 8002e04:	2100      	movs	r1, #0
 8002e06:	205d      	movs	r0, #93	@ 0x5d
 8002e08:	f000 ff33 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002e0c:	205d      	movs	r0, #93	@ 0x5d
 8002e0e:	f000 ff4a 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8002e12:	bf00      	nop
 8002e14:	37e8      	adds	r7, #232	@ 0xe8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40002400 	.word	0x40002400
 8002e20:	58024400 	.word	0x58024400
 8002e24:	58020c00 	.word	0x58020c00

08002e28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08c      	sub	sp, #48	@ 0x30
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a99      	ldr	r2, [pc, #612]	@ (800309c <HAL_TIM_Base_MspInit+0x274>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d117      	bne.n	8002e6a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e3a:	4b99      	ldr	r3, [pc, #612]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8002e3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e40:	4a97      	ldr	r2, [pc, #604]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e4a:	4b95      	ldr	r3, [pc, #596]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8002e4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	2019      	movs	r0, #25
 8002e5e:	f000 ff08 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002e62:	2019      	movs	r0, #25
 8002e64:	f000 ff1f 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002e68:	e113      	b.n	8003092 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM2)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e72:	d117      	bne.n	8002ea4 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e74:	4b8a      	ldr	r3, [pc, #552]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8002e76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e7a:	4a89      	ldr	r2, [pc, #548]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e84:	4b86      	ldr	r3, [pc, #536]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8002e86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e92:	2200      	movs	r2, #0
 8002e94:	2100      	movs	r1, #0
 8002e96:	201c      	movs	r0, #28
 8002e98:	f000 feeb 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e9c:	201c      	movs	r0, #28
 8002e9e:	f000 ff02 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
}
 8002ea2:	e0f6      	b.n	8003092 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM4)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a7e      	ldr	r2, [pc, #504]	@ (80030a4 <HAL_TIM_Base_MspInit+0x27c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d117      	bne.n	8002ede <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002eae:	4b7c      	ldr	r3, [pc, #496]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8002eb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002eb4:	4a7a      	ldr	r2, [pc, #488]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8002eb6:	f043 0304 	orr.w	r3, r3, #4
 8002eba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002ebe:	4b78      	ldr	r3, [pc, #480]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8002ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2100      	movs	r1, #0
 8002ed0:	201e      	movs	r0, #30
 8002ed2:	f000 fece 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002ed6:	201e      	movs	r0, #30
 8002ed8:	f000 fee5 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
}
 8002edc:	e0d9      	b.n	8003092 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM5)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a71      	ldr	r2, [pc, #452]	@ (80030a8 <HAL_TIM_Base_MspInit+0x280>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d117      	bne.n	8002f18 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ee8:	4b6d      	ldr	r3, [pc, #436]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8002eea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002eee:	4a6c      	ldr	r2, [pc, #432]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8002ef0:	f043 0308 	orr.w	r3, r3, #8
 8002ef4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002ef8:	4b69      	ldr	r3, [pc, #420]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8002efa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	623b      	str	r3, [r7, #32]
 8002f04:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002f06:	2200      	movs	r2, #0
 8002f08:	2100      	movs	r1, #0
 8002f0a:	2032      	movs	r0, #50	@ 0x32
 8002f0c:	f000 feb1 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002f10:	2032      	movs	r0, #50	@ 0x32
 8002f12:	f000 fec8 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
}
 8002f16:	e0bc      	b.n	8003092 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM8)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a63      	ldr	r2, [pc, #396]	@ (80030ac <HAL_TIM_Base_MspInit+0x284>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d127      	bne.n	8002f72 <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f22:	4b5f      	ldr	r3, [pc, #380]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8002f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f28:	4a5d      	ldr	r2, [pc, #372]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8002f2a:	f043 0302 	orr.w	r3, r3, #2
 8002f2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f32:	4b5b      	ldr	r3, [pc, #364]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8002f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	61fb      	str	r3, [r7, #28]
 8002f3e:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002f40:	2200      	movs	r2, #0
 8002f42:	2100      	movs	r1, #0
 8002f44:	202b      	movs	r0, #43	@ 0x2b
 8002f46:	f000 fe94 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002f4a:	202b      	movs	r0, #43	@ 0x2b
 8002f4c:	f000 feab 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002f50:	2200      	movs	r2, #0
 8002f52:	2100      	movs	r1, #0
 8002f54:	202c      	movs	r0, #44	@ 0x2c
 8002f56:	f000 fe8c 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002f5a:	202c      	movs	r0, #44	@ 0x2c
 8002f5c:	f000 fea3 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002f60:	2200      	movs	r2, #0
 8002f62:	2100      	movs	r1, #0
 8002f64:	202d      	movs	r0, #45	@ 0x2d
 8002f66:	f000 fe84 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002f6a:	202d      	movs	r0, #45	@ 0x2d
 8002f6c:	f000 fe9b 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
}
 8002f70:	e08f      	b.n	8003092 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM12)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a4e      	ldr	r2, [pc, #312]	@ (80030b0 <HAL_TIM_Base_MspInit+0x288>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d117      	bne.n	8002fac <HAL_TIM_Base_MspInit+0x184>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002f7c:	4b48      	ldr	r3, [pc, #288]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8002f7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f82:	4a47      	ldr	r2, [pc, #284]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8002f84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f88:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002f8c:	4b44      	ldr	r3, [pc, #272]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8002f8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f96:	61bb      	str	r3, [r7, #24]
 8002f98:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	202b      	movs	r0, #43	@ 0x2b
 8002fa0:	f000 fe67 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002fa4:	202b      	movs	r0, #43	@ 0x2b
 8002fa6:	f000 fe7e 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
}
 8002faa:	e072      	b.n	8003092 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM13)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a40      	ldr	r2, [pc, #256]	@ (80030b4 <HAL_TIM_Base_MspInit+0x28c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d117      	bne.n	8002fe6 <HAL_TIM_Base_MspInit+0x1be>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8002fb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fbc:	4a38      	ldr	r2, [pc, #224]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8002fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fc2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002fc6:	4b36      	ldr	r3, [pc, #216]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8002fc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	202c      	movs	r0, #44	@ 0x2c
 8002fda:	f000 fe4a 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002fde:	202c      	movs	r0, #44	@ 0x2c
 8002fe0:	f000 fe61 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
}
 8002fe4:	e055      	b.n	8003092 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM14)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a33      	ldr	r2, [pc, #204]	@ (80030b8 <HAL_TIM_Base_MspInit+0x290>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d117      	bne.n	8003020 <HAL_TIM_Base_MspInit+0x1f8>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8002ff2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ff6:	4a2a      	ldr	r2, [pc, #168]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8002ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ffc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003000:	4b27      	ldr	r3, [pc, #156]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8003002:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300a:	613b      	str	r3, [r7, #16]
 800300c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800300e:	2200      	movs	r2, #0
 8003010:	2100      	movs	r1, #0
 8003012:	202d      	movs	r0, #45	@ 0x2d
 8003014:	f000 fe2d 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003018:	202d      	movs	r0, #45	@ 0x2d
 800301a:	f000 fe44 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
}
 800301e:	e038      	b.n	8003092 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM15)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a25      	ldr	r2, [pc, #148]	@ (80030bc <HAL_TIM_Base_MspInit+0x294>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d117      	bne.n	800305a <HAL_TIM_Base_MspInit+0x232>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800302a:	4b1d      	ldr	r3, [pc, #116]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 800302c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003030:	4a1b      	ldr	r2, [pc, #108]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8003032:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003036:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800303a:	4b19      	ldr	r3, [pc, #100]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 800303c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8003048:	2200      	movs	r2, #0
 800304a:	2100      	movs	r1, #0
 800304c:	2074      	movs	r0, #116	@ 0x74
 800304e:	f000 fe10 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8003052:	2074      	movs	r0, #116	@ 0x74
 8003054:	f000 fe27 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
}
 8003058:	e01b      	b.n	8003092 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM16)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a18      	ldr	r2, [pc, #96]	@ (80030c0 <HAL_TIM_Base_MspInit+0x298>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d116      	bne.n	8003092 <HAL_TIM_Base_MspInit+0x26a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003064:	4b0e      	ldr	r3, [pc, #56]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8003066:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800306a:	4a0d      	ldr	r2, [pc, #52]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 800306c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003070:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003074:	4b0a      	ldr	r3, [pc, #40]	@ (80030a0 <HAL_TIM_Base_MspInit+0x278>)
 8003076:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800307a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003082:	2200      	movs	r2, #0
 8003084:	2100      	movs	r1, #0
 8003086:	2075      	movs	r0, #117	@ 0x75
 8003088:	f000 fdf3 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800308c:	2075      	movs	r0, #117	@ 0x75
 800308e:	f000 fe0a 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
}
 8003092:	bf00      	nop
 8003094:	3730      	adds	r7, #48	@ 0x30
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40010000 	.word	0x40010000
 80030a0:	58024400 	.word	0x58024400
 80030a4:	40000800 	.word	0x40000800
 80030a8:	40000c00 	.word	0x40000c00
 80030ac:	40010400 	.word	0x40010400
 80030b0:	40001800 	.word	0x40001800
 80030b4:	40001c00 	.word	0x40001c00
 80030b8:	40002000 	.word	0x40002000
 80030bc:	40014000 	.word	0x40014000
 80030c0:	40014400 	.word	0x40014400

080030c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b092      	sub	sp, #72	@ 0x48
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030cc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4aa4      	ldr	r2, [pc, #656]	@ (8003374 <HAL_TIM_MspPostInit+0x2b0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d120      	bne.n	8003128 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030e6:	4ba4      	ldr	r3, [pc, #656]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 80030e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030ec:	4aa2      	ldr	r2, [pc, #648]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 80030ee:	f043 0310 	orr.w	r3, r3, #16
 80030f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030f6:	4ba0      	ldr	r3, [pc, #640]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 80030f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030fc:	f003 0310 	and.w	r3, r3, #16
 8003100:	633b      	str	r3, [r7, #48]	@ 0x30
 8003102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8003104:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8003108:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310a:	2302      	movs	r3, #2
 800310c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	2300      	movs	r3, #0
 8003110:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003112:	2300      	movs	r3, #0
 8003114:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003116:	2301      	movs	r3, #1
 8003118:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800311a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800311e:	4619      	mov	r1, r3
 8003120:	4896      	ldr	r0, [pc, #600]	@ (800337c <HAL_TIM_MspPostInit+0x2b8>)
 8003122:	f001 fbb7 	bl	8004894 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8003126:	e189      	b.n	800343c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM2)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003130:	d11f      	bne.n	8003172 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003132:	4b91      	ldr	r3, [pc, #580]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 8003134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003138:	4a8f      	ldr	r2, [pc, #572]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003142:	4b8d      	ldr	r3, [pc, #564]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 8003144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800314e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003150:	2301      	movs	r3, #1
 8003152:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003154:	2302      	movs	r3, #2
 8003156:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003158:	2300      	movs	r3, #0
 800315a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315c:	2300      	movs	r3, #0
 800315e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003160:	2301      	movs	r3, #1
 8003162:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003164:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003168:	4619      	mov	r1, r3
 800316a:	4885      	ldr	r0, [pc, #532]	@ (8003380 <HAL_TIM_MspPostInit+0x2bc>)
 800316c:	f001 fb92 	bl	8004894 <HAL_GPIO_Init>
}
 8003170:	e164      	b.n	800343c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM4)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a83      	ldr	r2, [pc, #524]	@ (8003384 <HAL_TIM_MspPostInit+0x2c0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d13f      	bne.n	80031fc <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800317c:	4b7e      	ldr	r3, [pc, #504]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 800317e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003182:	4a7d      	ldr	r2, [pc, #500]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 8003184:	f043 0308 	orr.w	r3, r3, #8
 8003188:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800318c:	4b7a      	ldr	r3, [pc, #488]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 800318e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800319a:	4b77      	ldr	r3, [pc, #476]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 800319c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031a0:	4a75      	ldr	r2, [pc, #468]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 80031a2:	f043 0302 	orr.w	r3, r3, #2
 80031a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031aa:	4b73      	ldr	r3, [pc, #460]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 80031ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80031b8:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80031bc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031be:	2302      	movs	r3, #2
 80031c0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c6:	2300      	movs	r3, #0
 80031c8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80031ca:	2302      	movs	r3, #2
 80031cc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031ce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80031d2:	4619      	mov	r1, r3
 80031d4:	486c      	ldr	r0, [pc, #432]	@ (8003388 <HAL_TIM_MspPostInit+0x2c4>)
 80031d6:	f001 fb5d 	bl	8004894 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80031da:	2380      	movs	r3, #128	@ 0x80
 80031dc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031de:	2302      	movs	r3, #2
 80031e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e6:	2300      	movs	r3, #0
 80031e8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80031ea:	2302      	movs	r3, #2
 80031ec:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80031f2:	4619      	mov	r1, r3
 80031f4:	4865      	ldr	r0, [pc, #404]	@ (800338c <HAL_TIM_MspPostInit+0x2c8>)
 80031f6:	f001 fb4d 	bl	8004894 <HAL_GPIO_Init>
}
 80031fa:	e11f      	b.n	800343c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM5)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a63      	ldr	r2, [pc, #396]	@ (8003390 <HAL_TIM_MspPostInit+0x2cc>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d11f      	bne.n	8003246 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003206:	4b5c      	ldr	r3, [pc, #368]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 8003208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800320c:	4a5a      	ldr	r2, [pc, #360]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003216:	4b58      	ldr	r3, [pc, #352]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 8003218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	623b      	str	r3, [r7, #32]
 8003222:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003224:	2306      	movs	r3, #6
 8003226:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003228:	2302      	movs	r3, #2
 800322a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322c:	2300      	movs	r3, #0
 800322e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003230:	2300      	movs	r3, #0
 8003232:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003234:	2302      	movs	r3, #2
 8003236:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003238:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800323c:	4619      	mov	r1, r3
 800323e:	4850      	ldr	r0, [pc, #320]	@ (8003380 <HAL_TIM_MspPostInit+0x2bc>)
 8003240:	f001 fb28 	bl	8004894 <HAL_GPIO_Init>
}
 8003244:	e0fa      	b.n	800343c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM8)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a52      	ldr	r2, [pc, #328]	@ (8003394 <HAL_TIM_MspPostInit+0x2d0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d120      	bne.n	8003292 <HAL_TIM_MspPostInit+0x1ce>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003250:	4b49      	ldr	r3, [pc, #292]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 8003252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003256:	4a48      	ldr	r2, [pc, #288]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 8003258:	f043 0304 	orr.w	r3, r3, #4
 800325c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003260:	4b45      	ldr	r3, [pc, #276]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 8003262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	61fb      	str	r3, [r7, #28]
 800326c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800326e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003272:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003274:	2302      	movs	r3, #2
 8003276:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003278:	2300      	movs	r3, #0
 800327a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327c:	2300      	movs	r3, #0
 800327e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003280:	2303      	movs	r3, #3
 8003282:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003284:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003288:	4619      	mov	r1, r3
 800328a:	4843      	ldr	r0, [pc, #268]	@ (8003398 <HAL_TIM_MspPostInit+0x2d4>)
 800328c:	f001 fb02 	bl	8004894 <HAL_GPIO_Init>
}
 8003290:	e0d4      	b.n	800343c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM12)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a41      	ldr	r2, [pc, #260]	@ (800339c <HAL_TIM_MspPostInit+0x2d8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d120      	bne.n	80032de <HAL_TIM_MspPostInit+0x21a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800329c:	4b36      	ldr	r3, [pc, #216]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 800329e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032a2:	4a35      	ldr	r2, [pc, #212]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 80032a4:	f043 0302 	orr.w	r3, r3, #2
 80032a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032ac:	4b32      	ldr	r3, [pc, #200]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 80032ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	61bb      	str	r3, [r7, #24]
 80032b8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80032ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032be:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c0:	2302      	movs	r3, #2
 80032c2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c8:	2300      	movs	r3, #0
 80032ca:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80032cc:	2302      	movs	r3, #2
 80032ce:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80032d4:	4619      	mov	r1, r3
 80032d6:	482d      	ldr	r0, [pc, #180]	@ (800338c <HAL_TIM_MspPostInit+0x2c8>)
 80032d8:	f001 fadc 	bl	8004894 <HAL_GPIO_Init>
}
 80032dc:	e0ae      	b.n	800343c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM13)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a2f      	ldr	r2, [pc, #188]	@ (80033a0 <HAL_TIM_MspPostInit+0x2dc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d11f      	bne.n	8003328 <HAL_TIM_MspPostInit+0x264>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e8:	4b23      	ldr	r3, [pc, #140]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 80032ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032ee:	4a22      	ldr	r2, [pc, #136]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 80032fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003306:	2340      	movs	r3, #64	@ 0x40
 8003308:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330a:	2302      	movs	r3, #2
 800330c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330e:	2300      	movs	r3, #0
 8003310:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003312:	2300      	movs	r3, #0
 8003314:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003316:	2309      	movs	r3, #9
 8003318:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800331a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800331e:	4619      	mov	r1, r3
 8003320:	4817      	ldr	r0, [pc, #92]	@ (8003380 <HAL_TIM_MspPostInit+0x2bc>)
 8003322:	f001 fab7 	bl	8004894 <HAL_GPIO_Init>
}
 8003326:	e089      	b.n	800343c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM14)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1d      	ldr	r2, [pc, #116]	@ (80033a4 <HAL_TIM_MspPostInit+0x2e0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d13a      	bne.n	80033a8 <HAL_TIM_MspPostInit+0x2e4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003332:	4b11      	ldr	r3, [pc, #68]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 8003334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003338:	4a0f      	ldr	r2, [pc, #60]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003342:	4b0d      	ldr	r3, [pc, #52]	@ (8003378 <HAL_TIM_MspPostInit+0x2b4>)
 8003344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003350:	2380      	movs	r3, #128	@ 0x80
 8003352:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003354:	2302      	movs	r3, #2
 8003356:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003358:	2300      	movs	r3, #0
 800335a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335c:	2300      	movs	r3, #0
 800335e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003360:	2309      	movs	r3, #9
 8003362:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003364:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003368:	4619      	mov	r1, r3
 800336a:	4805      	ldr	r0, [pc, #20]	@ (8003380 <HAL_TIM_MspPostInit+0x2bc>)
 800336c:	f001 fa92 	bl	8004894 <HAL_GPIO_Init>
}
 8003370:	e064      	b.n	800343c <HAL_TIM_MspPostInit+0x378>
 8003372:	bf00      	nop
 8003374:	40010000 	.word	0x40010000
 8003378:	58024400 	.word	0x58024400
 800337c:	58021000 	.word	0x58021000
 8003380:	58020000 	.word	0x58020000
 8003384:	40000800 	.word	0x40000800
 8003388:	58020c00 	.word	0x58020c00
 800338c:	58020400 	.word	0x58020400
 8003390:	40000c00 	.word	0x40000c00
 8003394:	40010400 	.word	0x40010400
 8003398:	58020800 	.word	0x58020800
 800339c:	40001800 	.word	0x40001800
 80033a0:	40001c00 	.word	0x40001c00
 80033a4:	40002000 	.word	0x40002000
  else if(htim->Instance==TIM15)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a25      	ldr	r2, [pc, #148]	@ (8003444 <HAL_TIM_MspPostInit+0x380>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d11f      	bne.n	80033f2 <HAL_TIM_MspPostInit+0x32e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033b2:	4b25      	ldr	r3, [pc, #148]	@ (8003448 <HAL_TIM_MspPostInit+0x384>)
 80033b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033b8:	4a23      	ldr	r2, [pc, #140]	@ (8003448 <HAL_TIM_MspPostInit+0x384>)
 80033ba:	f043 0310 	orr.w	r3, r3, #16
 80033be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033c2:	4b21      	ldr	r3, [pc, #132]	@ (8003448 <HAL_TIM_MspPostInit+0x384>)
 80033c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80033d0:	2360      	movs	r3, #96	@ 0x60
 80033d2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d4:	2302      	movs	r3, #2
 80033d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033dc:	2300      	movs	r3, #0
 80033de:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80033e0:	2304      	movs	r3, #4
 80033e2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033e4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80033e8:	4619      	mov	r1, r3
 80033ea:	4818      	ldr	r0, [pc, #96]	@ (800344c <HAL_TIM_MspPostInit+0x388>)
 80033ec:	f001 fa52 	bl	8004894 <HAL_GPIO_Init>
}
 80033f0:	e024      	b.n	800343c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM16)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a16      	ldr	r2, [pc, #88]	@ (8003450 <HAL_TIM_MspPostInit+0x38c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d11f      	bne.n	800343c <HAL_TIM_MspPostInit+0x378>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033fc:	4b12      	ldr	r3, [pc, #72]	@ (8003448 <HAL_TIM_MspPostInit+0x384>)
 80033fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003402:	4a11      	ldr	r2, [pc, #68]	@ (8003448 <HAL_TIM_MspPostInit+0x384>)
 8003404:	f043 0302 	orr.w	r3, r3, #2
 8003408:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800340c:	4b0e      	ldr	r3, [pc, #56]	@ (8003448 <HAL_TIM_MspPostInit+0x384>)
 800340e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800341a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800341e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003420:	2302      	movs	r3, #2
 8003422:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003424:	2300      	movs	r3, #0
 8003426:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003428:	2300      	movs	r3, #0
 800342a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800342c:	2301      	movs	r3, #1
 800342e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003430:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003434:	4619      	mov	r1, r3
 8003436:	4807      	ldr	r0, [pc, #28]	@ (8003454 <HAL_TIM_MspPostInit+0x390>)
 8003438:	f001 fa2c 	bl	8004894 <HAL_GPIO_Init>
}
 800343c:	bf00      	nop
 800343e:	3748      	adds	r7, #72	@ 0x48
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40014000 	.word	0x40014000
 8003448:	58024400 	.word	0x58024400
 800344c:	58021000 	.word	0x58021000
 8003450:	40014400 	.word	0x40014400
 8003454:	58020400 	.word	0x58020400

08003458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b0ba      	sub	sp, #232	@ 0xe8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003460:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	60da      	str	r2, [r3, #12]
 800346e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003470:	f107 0310 	add.w	r3, r7, #16
 8003474:	22c0      	movs	r2, #192	@ 0xc0
 8003476:	2100      	movs	r1, #0
 8003478:	4618      	mov	r0, r3
 800347a:	f00a fb16 	bl	800daaa <memset>
  if(huart->Instance==UART4)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a2b      	ldr	r2, [pc, #172]	@ (8003530 <HAL_UART_MspInit+0xd8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d14e      	bne.n	8003526 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003488:	f04f 0202 	mov.w	r2, #2
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003494:	2300      	movs	r3, #0
 8003496:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800349a:	f107 0310 	add.w	r3, r7, #16
 800349e:	4618      	mov	r0, r3
 80034a0:	f004 f920 	bl	80076e4 <HAL_RCCEx_PeriphCLKConfig>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80034aa:	f7ff fb93 	bl	8002bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80034ae:	4b21      	ldr	r3, [pc, #132]	@ (8003534 <HAL_UART_MspInit+0xdc>)
 80034b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80034b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003534 <HAL_UART_MspInit+0xdc>)
 80034b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80034ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80034be:	4b1d      	ldr	r3, [pc, #116]	@ (8003534 <HAL_UART_MspInit+0xdc>)
 80034c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80034c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034cc:	4b19      	ldr	r3, [pc, #100]	@ (8003534 <HAL_UART_MspInit+0xdc>)
 80034ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034d2:	4a18      	ldr	r2, [pc, #96]	@ (8003534 <HAL_UART_MspInit+0xdc>)
 80034d4:	f043 0304 	orr.w	r3, r3, #4
 80034d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034dc:	4b15      	ldr	r3, [pc, #84]	@ (8003534 <HAL_UART_MspInit+0xdc>)
 80034de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80034ea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80034ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f2:	2302      	movs	r3, #2
 80034f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fe:	2300      	movs	r3, #0
 8003500:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003504:	2308      	movs	r3, #8
 8003506:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800350a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800350e:	4619      	mov	r1, r3
 8003510:	4809      	ldr	r0, [pc, #36]	@ (8003538 <HAL_UART_MspInit+0xe0>)
 8003512:	f001 f9bf 	bl	8004894 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003516:	2200      	movs	r2, #0
 8003518:	2100      	movs	r1, #0
 800351a:	2034      	movs	r0, #52	@ 0x34
 800351c:	f000 fba9 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003520:	2034      	movs	r0, #52	@ 0x34
 8003522:	f000 fbc0 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8003526:	bf00      	nop
 8003528:	37e8      	adds	r7, #232	@ 0xe8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40004c00 	.word	0x40004c00
 8003534:	58024400 	.word	0x58024400
 8003538:	58020800 	.word	0x58020800

0800353c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003540:	bf00      	nop
 8003542:	e7fd      	b.n	8003540 <NMI_Handler+0x4>

08003544 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003548:	bf00      	nop
 800354a:	e7fd      	b.n	8003548 <HardFault_Handler+0x4>

0800354c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003550:	bf00      	nop
 8003552:	e7fd      	b.n	8003550 <MemManage_Handler+0x4>

08003554 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003558:	bf00      	nop
 800355a:	e7fd      	b.n	8003558 <BusFault_Handler+0x4>

0800355c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003560:	bf00      	nop
 8003562:	e7fd      	b.n	8003560 <UsageFault_Handler+0x4>

08003564 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003568:	bf00      	nop
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003572:	b480      	push	{r7}
 8003574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003584:	bf00      	nop
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003592:	f000 fa67 	bl	8003a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035a0:	4802      	ldr	r0, [pc, #8]	@ (80035ac <TIM1_UP_IRQHandler+0x10>)
 80035a2:	f006 f90b 	bl	80097bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	24000318 	.word	0x24000318

080035b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80035b4:	4802      	ldr	r0, [pc, #8]	@ (80035c0 <TIM2_IRQHandler+0x10>)
 80035b6:	f006 f901 	bl	80097bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	24000364 	.word	0x24000364

080035c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80035c8:	4802      	ldr	r0, [pc, #8]	@ (80035d4 <TIM4_IRQHandler+0x10>)
 80035ca:	f006 f8f7 	bl	80097bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	240003b0 	.word	0x240003b0

080035d8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80035dc:	4803      	ldr	r0, [pc, #12]	@ (80035ec <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80035de:	f006 f8ed 	bl	80097bc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80035e2:	4803      	ldr	r0, [pc, #12]	@ (80035f0 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80035e4:	f006 f8ea 	bl	80097bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80035e8:	bf00      	nop
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	24000448 	.word	0x24000448
 80035f0:	24000494 	.word	0x24000494

080035f4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80035f8:	4803      	ldr	r0, [pc, #12]	@ (8003608 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80035fa:	f006 f8df 	bl	80097bc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80035fe:	4803      	ldr	r0, [pc, #12]	@ (800360c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8003600:	f006 f8dc 	bl	80097bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003604:	bf00      	nop
 8003606:	bd80      	pop	{r7, pc}
 8003608:	24000448 	.word	0x24000448
 800360c:	240004e0 	.word	0x240004e0

08003610 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003614:	4803      	ldr	r0, [pc, #12]	@ (8003624 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8003616:	f006 f8d1 	bl	80097bc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800361a:	4803      	ldr	r0, [pc, #12]	@ (8003628 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 800361c:	f006 f8ce 	bl	80097bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003620:	bf00      	nop
 8003622:	bd80      	pop	{r7, pc}
 8003624:	24000448 	.word	0x24000448
 8003628:	2400052c 	.word	0x2400052c

0800362c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003630:	4802      	ldr	r0, [pc, #8]	@ (800363c <TIM5_IRQHandler+0x10>)
 8003632:	f006 f8c3 	bl	80097bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003636:	bf00      	nop
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	240003fc 	.word	0x240003fc

08003640 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003644:	4802      	ldr	r0, [pc, #8]	@ (8003650 <UART4_IRQHandler+0x10>)
 8003646:	f007 f9fb 	bl	800aa40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800364a:	bf00      	nop
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	24000610 	.word	0x24000610

08003654 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003658:	4802      	ldr	r0, [pc, #8]	@ (8003664 <LPTIM1_IRQHandler+0x10>)
 800365a:	f002 fd31 	bl	80060c0 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800365e:	bf00      	nop
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	240002e0 	.word	0x240002e0

08003668 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800366c:	4802      	ldr	r0, [pc, #8]	@ (8003678 <TIM15_IRQHandler+0x10>)
 800366e:	f006 f8a5 	bl	80097bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8003672:	bf00      	nop
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	24000578 	.word	0x24000578

0800367c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003680:	4802      	ldr	r0, [pc, #8]	@ (800368c <TIM16_IRQHandler+0x10>)
 8003682:	f006 f89b 	bl	80097bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003686:	bf00      	nop
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	240005c4 	.word	0x240005c4

08003690 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  return 1;
 8003694:	2301      	movs	r3, #1
}
 8003696:	4618      	mov	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <_kill>:

int _kill(int pid, int sig)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80036aa:	f00a fa51 	bl	800db50 <__errno>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2216      	movs	r2, #22
 80036b2:	601a      	str	r2, [r3, #0]
  return -1;
 80036b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <_exit>:

void _exit (int status)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80036c8:	f04f 31ff 	mov.w	r1, #4294967295
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ffe7 	bl	80036a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80036d2:	bf00      	nop
 80036d4:	e7fd      	b.n	80036d2 <_exit+0x12>

080036d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b086      	sub	sp, #24
 80036da:	af00      	add	r7, sp, #0
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	e00a      	b.n	80036fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036e8:	f3af 8000 	nop.w
 80036ec:	4601      	mov	r1, r0
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	60ba      	str	r2, [r7, #8]
 80036f4:	b2ca      	uxtb	r2, r1
 80036f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	3301      	adds	r3, #1
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	429a      	cmp	r2, r3
 8003704:	dbf0      	blt.n	80036e8 <_read+0x12>
  }

  return len;
 8003706:	687b      	ldr	r3, [r7, #4]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	e009      	b.n	8003736 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	60ba      	str	r2, [r7, #8]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	3301      	adds	r3, #1
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	429a      	cmp	r2, r3
 800373c:	dbf1      	blt.n	8003722 <_write+0x12>
  }
  return len;
 800373e:	687b      	ldr	r3, [r7, #4]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <_close>:

int _close(int file)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003750:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003754:	4618      	mov	r0, r3
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003770:	605a      	str	r2, [r3, #4]
  return 0;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <_isatty>:

int _isatty(int file)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003788:	2301      	movs	r3, #1
}
 800378a:	4618      	mov	r0, r3
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003796:	b480      	push	{r7}
 8003798:	b085      	sub	sp, #20
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037b8:	4a14      	ldr	r2, [pc, #80]	@ (800380c <_sbrk+0x5c>)
 80037ba:	4b15      	ldr	r3, [pc, #84]	@ (8003810 <_sbrk+0x60>)
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037c4:	4b13      	ldr	r3, [pc, #76]	@ (8003814 <_sbrk+0x64>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d102      	bne.n	80037d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037cc:	4b11      	ldr	r3, [pc, #68]	@ (8003814 <_sbrk+0x64>)
 80037ce:	4a12      	ldr	r2, [pc, #72]	@ (8003818 <_sbrk+0x68>)
 80037d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037d2:	4b10      	ldr	r3, [pc, #64]	@ (8003814 <_sbrk+0x64>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4413      	add	r3, r2
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d207      	bcs.n	80037f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037e0:	f00a f9b6 	bl	800db50 <__errno>
 80037e4:	4603      	mov	r3, r0
 80037e6:	220c      	movs	r2, #12
 80037e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037ea:	f04f 33ff 	mov.w	r3, #4294967295
 80037ee:	e009      	b.n	8003804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037f0:	4b08      	ldr	r3, [pc, #32]	@ (8003814 <_sbrk+0x64>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037f6:	4b07      	ldr	r3, [pc, #28]	@ (8003814 <_sbrk+0x64>)
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4413      	add	r3, r2
 80037fe:	4a05      	ldr	r2, [pc, #20]	@ (8003814 <_sbrk+0x64>)
 8003800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003802:	68fb      	ldr	r3, [r7, #12]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	24080000 	.word	0x24080000
 8003810:	00000400 	.word	0x00000400
 8003814:	24003660 	.word	0x24003660
 8003818:	240037b8 	.word	0x240037b8

0800381c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003820:	4b37      	ldr	r3, [pc, #220]	@ (8003900 <SystemInit+0xe4>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003826:	4a36      	ldr	r2, [pc, #216]	@ (8003900 <SystemInit+0xe4>)
 8003828:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800382c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003830:	4b34      	ldr	r3, [pc, #208]	@ (8003904 <SystemInit+0xe8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 030f 	and.w	r3, r3, #15
 8003838:	2b06      	cmp	r3, #6
 800383a:	d807      	bhi.n	800384c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800383c:	4b31      	ldr	r3, [pc, #196]	@ (8003904 <SystemInit+0xe8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f023 030f 	bic.w	r3, r3, #15
 8003844:	4a2f      	ldr	r2, [pc, #188]	@ (8003904 <SystemInit+0xe8>)
 8003846:	f043 0307 	orr.w	r3, r3, #7
 800384a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800384c:	4b2e      	ldr	r3, [pc, #184]	@ (8003908 <SystemInit+0xec>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a2d      	ldr	r2, [pc, #180]	@ (8003908 <SystemInit+0xec>)
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003858:	4b2b      	ldr	r3, [pc, #172]	@ (8003908 <SystemInit+0xec>)
 800385a:	2200      	movs	r2, #0
 800385c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800385e:	4b2a      	ldr	r3, [pc, #168]	@ (8003908 <SystemInit+0xec>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	4929      	ldr	r1, [pc, #164]	@ (8003908 <SystemInit+0xec>)
 8003864:	4b29      	ldr	r3, [pc, #164]	@ (800390c <SystemInit+0xf0>)
 8003866:	4013      	ands	r3, r2
 8003868:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800386a:	4b26      	ldr	r3, [pc, #152]	@ (8003904 <SystemInit+0xe8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d007      	beq.n	8003886 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003876:	4b23      	ldr	r3, [pc, #140]	@ (8003904 <SystemInit+0xe8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f023 030f 	bic.w	r3, r3, #15
 800387e:	4a21      	ldr	r2, [pc, #132]	@ (8003904 <SystemInit+0xe8>)
 8003880:	f043 0307 	orr.w	r3, r3, #7
 8003884:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003886:	4b20      	ldr	r3, [pc, #128]	@ (8003908 <SystemInit+0xec>)
 8003888:	2200      	movs	r2, #0
 800388a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800388c:	4b1e      	ldr	r3, [pc, #120]	@ (8003908 <SystemInit+0xec>)
 800388e:	2200      	movs	r2, #0
 8003890:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003892:	4b1d      	ldr	r3, [pc, #116]	@ (8003908 <SystemInit+0xec>)
 8003894:	2200      	movs	r2, #0
 8003896:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003898:	4b1b      	ldr	r3, [pc, #108]	@ (8003908 <SystemInit+0xec>)
 800389a:	4a1d      	ldr	r2, [pc, #116]	@ (8003910 <SystemInit+0xf4>)
 800389c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800389e:	4b1a      	ldr	r3, [pc, #104]	@ (8003908 <SystemInit+0xec>)
 80038a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003914 <SystemInit+0xf8>)
 80038a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80038a4:	4b18      	ldr	r3, [pc, #96]	@ (8003908 <SystemInit+0xec>)
 80038a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003918 <SystemInit+0xfc>)
 80038a8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80038aa:	4b17      	ldr	r3, [pc, #92]	@ (8003908 <SystemInit+0xec>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80038b0:	4b15      	ldr	r3, [pc, #84]	@ (8003908 <SystemInit+0xec>)
 80038b2:	4a19      	ldr	r2, [pc, #100]	@ (8003918 <SystemInit+0xfc>)
 80038b4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80038b6:	4b14      	ldr	r3, [pc, #80]	@ (8003908 <SystemInit+0xec>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80038bc:	4b12      	ldr	r3, [pc, #72]	@ (8003908 <SystemInit+0xec>)
 80038be:	4a16      	ldr	r2, [pc, #88]	@ (8003918 <SystemInit+0xfc>)
 80038c0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80038c2:	4b11      	ldr	r3, [pc, #68]	@ (8003908 <SystemInit+0xec>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80038c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003908 <SystemInit+0xec>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a0e      	ldr	r2, [pc, #56]	@ (8003908 <SystemInit+0xec>)
 80038ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80038d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003908 <SystemInit+0xec>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80038da:	4b10      	ldr	r3, [pc, #64]	@ (800391c <SystemInit+0x100>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	4b10      	ldr	r3, [pc, #64]	@ (8003920 <SystemInit+0x104>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038e6:	d202      	bcs.n	80038ee <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80038e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003924 <SystemInit+0x108>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80038ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003928 <SystemInit+0x10c>)
 80038f0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80038f4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80038f6:	bf00      	nop
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	e000ed00 	.word	0xe000ed00
 8003904:	52002000 	.word	0x52002000
 8003908:	58024400 	.word	0x58024400
 800390c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003910:	02020200 	.word	0x02020200
 8003914:	01ff0000 	.word	0x01ff0000
 8003918:	01010280 	.word	0x01010280
 800391c:	5c001000 	.word	0x5c001000
 8003920:	ffff0000 	.word	0xffff0000
 8003924:	51008108 	.word	0x51008108
 8003928:	52004000 	.word	0x52004000

0800392c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800392c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003964 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003930:	f7ff ff74 	bl	800381c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003934:	480c      	ldr	r0, [pc, #48]	@ (8003968 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003936:	490d      	ldr	r1, [pc, #52]	@ (800396c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003938:	4a0d      	ldr	r2, [pc, #52]	@ (8003970 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800393a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800393c:	e002      	b.n	8003944 <LoopCopyDataInit>

0800393e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800393e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003942:	3304      	adds	r3, #4

08003944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003948:	d3f9      	bcc.n	800393e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800394a:	4a0a      	ldr	r2, [pc, #40]	@ (8003974 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800394c:	4c0a      	ldr	r4, [pc, #40]	@ (8003978 <LoopFillZerobss+0x22>)
  movs r3, #0
 800394e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003950:	e001      	b.n	8003956 <LoopFillZerobss>

08003952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003954:	3204      	adds	r2, #4

08003956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003958:	d3fb      	bcc.n	8003952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800395a:	f00a f8ff 	bl	800db5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800395e:	f7fc fe8f 	bl	8000680 <main>
  bx  lr
 8003962:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003964:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003968:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800396c:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8003970:	08010958 	.word	0x08010958
  ldr r2, =_sbss
 8003974:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8003978:	240037b4 	.word	0x240037b4

0800397c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800397c:	e7fe      	b.n	800397c <ADC3_IRQHandler>
	...

08003980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003986:	2003      	movs	r0, #3
 8003988:	f000 f968 	bl	8003c5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800398c:	f003 fcd4 	bl	8007338 <HAL_RCC_GetSysClockFreq>
 8003990:	4602      	mov	r2, r0
 8003992:	4b15      	ldr	r3, [pc, #84]	@ (80039e8 <HAL_Init+0x68>)
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	0a1b      	lsrs	r3, r3, #8
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	4913      	ldr	r1, [pc, #76]	@ (80039ec <HAL_Init+0x6c>)
 800399e:	5ccb      	ldrb	r3, [r1, r3]
 80039a0:	f003 031f 	and.w	r3, r3, #31
 80039a4:	fa22 f303 	lsr.w	r3, r2, r3
 80039a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039aa:	4b0f      	ldr	r3, [pc, #60]	@ (80039e8 <HAL_Init+0x68>)
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	4a0e      	ldr	r2, [pc, #56]	@ (80039ec <HAL_Init+0x6c>)
 80039b4:	5cd3      	ldrb	r3, [r2, r3]
 80039b6:	f003 031f 	and.w	r3, r3, #31
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
 80039c0:	4a0b      	ldr	r2, [pc, #44]	@ (80039f0 <HAL_Init+0x70>)
 80039c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039c4:	4a0b      	ldr	r2, [pc, #44]	@ (80039f4 <HAL_Init+0x74>)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039ca:	200f      	movs	r0, #15
 80039cc:	f000 f814 	bl	80039f8 <HAL_InitTick>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e002      	b.n	80039e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80039da:	f7ff f901 	bl	8002be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	58024400 	.word	0x58024400
 80039ec:	080103c8 	.word	0x080103c8
 80039f0:	24000014 	.word	0x24000014
 80039f4:	24000010 	.word	0x24000010

080039f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003a00:	4b15      	ldr	r3, [pc, #84]	@ (8003a58 <HAL_InitTick+0x60>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e021      	b.n	8003a50 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003a0c:	4b13      	ldr	r3, [pc, #76]	@ (8003a5c <HAL_InitTick+0x64>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	4b11      	ldr	r3, [pc, #68]	@ (8003a58 <HAL_InitTick+0x60>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	4619      	mov	r1, r3
 8003a16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 f94d 	bl	8003cc2 <HAL_SYSTICK_Config>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e00e      	b.n	8003a50 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b0f      	cmp	r3, #15
 8003a36:	d80a      	bhi.n	8003a4e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a38:	2200      	movs	r2, #0
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a40:	f000 f917 	bl	8003c72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a44:	4a06      	ldr	r2, [pc, #24]	@ (8003a60 <HAL_InitTick+0x68>)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e000      	b.n	8003a50 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	2400001c 	.word	0x2400001c
 8003a5c:	24000010 	.word	0x24000010
 8003a60:	24000018 	.word	0x24000018

08003a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a68:	4b06      	ldr	r3, [pc, #24]	@ (8003a84 <HAL_IncTick+0x20>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4b06      	ldr	r3, [pc, #24]	@ (8003a88 <HAL_IncTick+0x24>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4413      	add	r3, r2
 8003a74:	4a04      	ldr	r2, [pc, #16]	@ (8003a88 <HAL_IncTick+0x24>)
 8003a76:	6013      	str	r3, [r2, #0]
}
 8003a78:	bf00      	nop
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	2400001c 	.word	0x2400001c
 8003a88:	24003664 	.word	0x24003664

08003a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a90:	4b03      	ldr	r3, [pc, #12]	@ (8003aa0 <HAL_GetTick+0x14>)
 8003a92:	681b      	ldr	r3, [r3, #0]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	24003664 	.word	0x24003664

08003aa4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003aa8:	4b03      	ldr	r3, [pc, #12]	@ (8003ab8 <HAL_GetREVID+0x14>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	0c1b      	lsrs	r3, r3, #16
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	5c001000 	.word	0x5c001000

08003abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003acc:	4b0b      	ldr	r3, [pc, #44]	@ (8003afc <__NVIC_SetPriorityGrouping+0x40>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ad8:	4013      	ands	r3, r2
 8003ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ae4:	4b06      	ldr	r3, [pc, #24]	@ (8003b00 <__NVIC_SetPriorityGrouping+0x44>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aea:	4a04      	ldr	r2, [pc, #16]	@ (8003afc <__NVIC_SetPriorityGrouping+0x40>)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	60d3      	str	r3, [r2, #12]
}
 8003af0:	bf00      	nop
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	e000ed00 	.word	0xe000ed00
 8003b00:	05fa0000 	.word	0x05fa0000

08003b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b08:	4b04      	ldr	r3, [pc, #16]	@ (8003b1c <__NVIC_GetPriorityGrouping+0x18>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	0a1b      	lsrs	r3, r3, #8
 8003b0e:	f003 0307 	and.w	r3, r3, #7
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	e000ed00 	.word	0xe000ed00

08003b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	db0b      	blt.n	8003b4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b32:	88fb      	ldrh	r3, [r7, #6]
 8003b34:	f003 021f 	and.w	r2, r3, #31
 8003b38:	4907      	ldr	r1, [pc, #28]	@ (8003b58 <__NVIC_EnableIRQ+0x38>)
 8003b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	2001      	movs	r0, #1
 8003b42:	fa00 f202 	lsl.w	r2, r0, r2
 8003b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	e000e100 	.word	0xe000e100

08003b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	6039      	str	r1, [r7, #0]
 8003b66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	db0a      	blt.n	8003b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	490c      	ldr	r1, [pc, #48]	@ (8003ba8 <__NVIC_SetPriority+0x4c>)
 8003b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b7a:	0112      	lsls	r2, r2, #4
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	440b      	add	r3, r1
 8003b80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b84:	e00a      	b.n	8003b9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	4908      	ldr	r1, [pc, #32]	@ (8003bac <__NVIC_SetPriority+0x50>)
 8003b8c:	88fb      	ldrh	r3, [r7, #6]
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	3b04      	subs	r3, #4
 8003b94:	0112      	lsls	r2, r2, #4
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	440b      	add	r3, r1
 8003b9a:	761a      	strb	r2, [r3, #24]
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	e000e100 	.word	0xe000e100
 8003bac:	e000ed00 	.word	0xe000ed00

08003bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b089      	sub	sp, #36	@ 0x24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f1c3 0307 	rsb	r3, r3, #7
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	bf28      	it	cs
 8003bce:	2304      	movcs	r3, #4
 8003bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	2b06      	cmp	r3, #6
 8003bd8:	d902      	bls.n	8003be0 <NVIC_EncodePriority+0x30>
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	3b03      	subs	r3, #3
 8003bde:	e000      	b.n	8003be2 <NVIC_EncodePriority+0x32>
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be4:	f04f 32ff 	mov.w	r2, #4294967295
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	43da      	mvns	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	401a      	ands	r2, r3
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003c02:	43d9      	mvns	r1, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c08:	4313      	orrs	r3, r2
         );
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3724      	adds	r7, #36	@ 0x24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
	...

08003c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c28:	d301      	bcc.n	8003c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e00f      	b.n	8003c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003c58 <SysTick_Config+0x40>)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c36:	210f      	movs	r1, #15
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3c:	f7ff ff8e 	bl	8003b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c40:	4b05      	ldr	r3, [pc, #20]	@ (8003c58 <SysTick_Config+0x40>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c46:	4b04      	ldr	r3, [pc, #16]	@ (8003c58 <SysTick_Config+0x40>)
 8003c48:	2207      	movs	r2, #7
 8003c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	e000e010 	.word	0xe000e010

08003c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff ff29 	bl	8003abc <__NVIC_SetPriorityGrouping>
}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b086      	sub	sp, #24
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	4603      	mov	r3, r0
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
 8003c7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c80:	f7ff ff40 	bl	8003b04 <__NVIC_GetPriorityGrouping>
 8003c84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	68b9      	ldr	r1, [r7, #8]
 8003c8a:	6978      	ldr	r0, [r7, #20]
 8003c8c:	f7ff ff90 	bl	8003bb0 <NVIC_EncodePriority>
 8003c90:	4602      	mov	r2, r0
 8003c92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c96:	4611      	mov	r1, r2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff ff5f 	bl	8003b5c <__NVIC_SetPriority>
}
 8003c9e:	bf00      	nop
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	4603      	mov	r3, r0
 8003cae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff ff33 	bl	8003b20 <__NVIC_EnableIRQ>
}
 8003cba:	bf00      	nop
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7ff ffa4 	bl	8003c18 <SysTick_Config>
 8003cd0:	4603      	mov	r3, r0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003ce0:	f3bf 8f5f 	dmb	sy
}
 8003ce4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003ce6:	4b07      	ldr	r3, [pc, #28]	@ (8003d04 <HAL_MPU_Disable+0x28>)
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cea:	4a06      	ldr	r2, [pc, #24]	@ (8003d04 <HAL_MPU_Disable+0x28>)
 8003cec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cf0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003cf2:	4b05      	ldr	r3, [pc, #20]	@ (8003d08 <HAL_MPU_Disable+0x2c>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	605a      	str	r2, [r3, #4]
}
 8003cf8:	bf00      	nop
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	e000ed00 	.word	0xe000ed00
 8003d08:	e000ed90 	.word	0xe000ed90

08003d0c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003d14:	4a0b      	ldr	r2, [pc, #44]	@ (8003d44 <HAL_MPU_Enable+0x38>)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d48 <HAL_MPU_Enable+0x3c>)
 8003d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d22:	4a09      	ldr	r2, [pc, #36]	@ (8003d48 <HAL_MPU_Enable+0x3c>)
 8003d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d28:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003d2a:	f3bf 8f4f 	dsb	sy
}
 8003d2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d30:	f3bf 8f6f 	isb	sy
}
 8003d34:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	e000ed90 	.word	0xe000ed90
 8003d48:	e000ed00 	.word	0xe000ed00

08003d4c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	785a      	ldrb	r2, [r3, #1]
 8003d58:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc8 <HAL_MPU_ConfigRegion+0x7c>)
 8003d5a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8003dc8 <HAL_MPU_ConfigRegion+0x7c>)
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	4a19      	ldr	r2, [pc, #100]	@ (8003dc8 <HAL_MPU_ConfigRegion+0x7c>)
 8003d62:	f023 0301 	bic.w	r3, r3, #1
 8003d66:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003d68:	4a17      	ldr	r2, [pc, #92]	@ (8003dc8 <HAL_MPU_ConfigRegion+0x7c>)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	7b1b      	ldrb	r3, [r3, #12]
 8003d74:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	7adb      	ldrb	r3, [r3, #11]
 8003d7a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	7a9b      	ldrb	r3, [r3, #10]
 8003d82:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003d84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	7b5b      	ldrb	r3, [r3, #13]
 8003d8a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003d8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	7b9b      	ldrb	r3, [r3, #14]
 8003d92:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003d94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	7bdb      	ldrb	r3, [r3, #15]
 8003d9a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003d9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	7a5b      	ldrb	r3, [r3, #9]
 8003da2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003da4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	7a1b      	ldrb	r3, [r3, #8]
 8003daa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003dac:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	7812      	ldrb	r2, [r2, #0]
 8003db2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003db4:	4a04      	ldr	r2, [pc, #16]	@ (8003dc8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003db6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003db8:	6113      	str	r3, [r2, #16]
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	e000ed90 	.word	0xe000ed90

08003dcc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003dd4:	f7ff fe5a 	bl	8003a8c <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e2dc      	b.n	800439e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d008      	beq.n	8003e02 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2280      	movs	r2, #128	@ 0x80
 8003df4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e2cd      	b.n	800439e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a76      	ldr	r2, [pc, #472]	@ (8003fe0 <HAL_DMA_Abort+0x214>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d04a      	beq.n	8003ea2 <HAL_DMA_Abort+0xd6>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a74      	ldr	r2, [pc, #464]	@ (8003fe4 <HAL_DMA_Abort+0x218>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d045      	beq.n	8003ea2 <HAL_DMA_Abort+0xd6>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a73      	ldr	r2, [pc, #460]	@ (8003fe8 <HAL_DMA_Abort+0x21c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d040      	beq.n	8003ea2 <HAL_DMA_Abort+0xd6>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a71      	ldr	r2, [pc, #452]	@ (8003fec <HAL_DMA_Abort+0x220>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d03b      	beq.n	8003ea2 <HAL_DMA_Abort+0xd6>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a70      	ldr	r2, [pc, #448]	@ (8003ff0 <HAL_DMA_Abort+0x224>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d036      	beq.n	8003ea2 <HAL_DMA_Abort+0xd6>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a6e      	ldr	r2, [pc, #440]	@ (8003ff4 <HAL_DMA_Abort+0x228>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d031      	beq.n	8003ea2 <HAL_DMA_Abort+0xd6>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a6d      	ldr	r2, [pc, #436]	@ (8003ff8 <HAL_DMA_Abort+0x22c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d02c      	beq.n	8003ea2 <HAL_DMA_Abort+0xd6>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a6b      	ldr	r2, [pc, #428]	@ (8003ffc <HAL_DMA_Abort+0x230>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d027      	beq.n	8003ea2 <HAL_DMA_Abort+0xd6>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a6a      	ldr	r2, [pc, #424]	@ (8004000 <HAL_DMA_Abort+0x234>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d022      	beq.n	8003ea2 <HAL_DMA_Abort+0xd6>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a68      	ldr	r2, [pc, #416]	@ (8004004 <HAL_DMA_Abort+0x238>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d01d      	beq.n	8003ea2 <HAL_DMA_Abort+0xd6>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a67      	ldr	r2, [pc, #412]	@ (8004008 <HAL_DMA_Abort+0x23c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d018      	beq.n	8003ea2 <HAL_DMA_Abort+0xd6>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a65      	ldr	r2, [pc, #404]	@ (800400c <HAL_DMA_Abort+0x240>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d013      	beq.n	8003ea2 <HAL_DMA_Abort+0xd6>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a64      	ldr	r2, [pc, #400]	@ (8004010 <HAL_DMA_Abort+0x244>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d00e      	beq.n	8003ea2 <HAL_DMA_Abort+0xd6>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a62      	ldr	r2, [pc, #392]	@ (8004014 <HAL_DMA_Abort+0x248>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d009      	beq.n	8003ea2 <HAL_DMA_Abort+0xd6>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a61      	ldr	r2, [pc, #388]	@ (8004018 <HAL_DMA_Abort+0x24c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d004      	beq.n	8003ea2 <HAL_DMA_Abort+0xd6>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a5f      	ldr	r2, [pc, #380]	@ (800401c <HAL_DMA_Abort+0x250>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d101      	bne.n	8003ea6 <HAL_DMA_Abort+0xda>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <HAL_DMA_Abort+0xdc>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d013      	beq.n	8003ed4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 021e 	bic.w	r2, r2, #30
 8003eba:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695a      	ldr	r2, [r3, #20]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003eca:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	e00a      	b.n	8003eea <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 020e 	bic.w	r2, r2, #14
 8003ee2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a3c      	ldr	r2, [pc, #240]	@ (8003fe0 <HAL_DMA_Abort+0x214>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d072      	beq.n	8003fda <HAL_DMA_Abort+0x20e>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a3a      	ldr	r2, [pc, #232]	@ (8003fe4 <HAL_DMA_Abort+0x218>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d06d      	beq.n	8003fda <HAL_DMA_Abort+0x20e>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a39      	ldr	r2, [pc, #228]	@ (8003fe8 <HAL_DMA_Abort+0x21c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d068      	beq.n	8003fda <HAL_DMA_Abort+0x20e>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a37      	ldr	r2, [pc, #220]	@ (8003fec <HAL_DMA_Abort+0x220>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d063      	beq.n	8003fda <HAL_DMA_Abort+0x20e>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a36      	ldr	r2, [pc, #216]	@ (8003ff0 <HAL_DMA_Abort+0x224>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d05e      	beq.n	8003fda <HAL_DMA_Abort+0x20e>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a34      	ldr	r2, [pc, #208]	@ (8003ff4 <HAL_DMA_Abort+0x228>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d059      	beq.n	8003fda <HAL_DMA_Abort+0x20e>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a33      	ldr	r2, [pc, #204]	@ (8003ff8 <HAL_DMA_Abort+0x22c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d054      	beq.n	8003fda <HAL_DMA_Abort+0x20e>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a31      	ldr	r2, [pc, #196]	@ (8003ffc <HAL_DMA_Abort+0x230>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d04f      	beq.n	8003fda <HAL_DMA_Abort+0x20e>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a30      	ldr	r2, [pc, #192]	@ (8004000 <HAL_DMA_Abort+0x234>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d04a      	beq.n	8003fda <HAL_DMA_Abort+0x20e>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a2e      	ldr	r2, [pc, #184]	@ (8004004 <HAL_DMA_Abort+0x238>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d045      	beq.n	8003fda <HAL_DMA_Abort+0x20e>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a2d      	ldr	r2, [pc, #180]	@ (8004008 <HAL_DMA_Abort+0x23c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d040      	beq.n	8003fda <HAL_DMA_Abort+0x20e>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800400c <HAL_DMA_Abort+0x240>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d03b      	beq.n	8003fda <HAL_DMA_Abort+0x20e>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a2a      	ldr	r2, [pc, #168]	@ (8004010 <HAL_DMA_Abort+0x244>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d036      	beq.n	8003fda <HAL_DMA_Abort+0x20e>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a28      	ldr	r2, [pc, #160]	@ (8004014 <HAL_DMA_Abort+0x248>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d031      	beq.n	8003fda <HAL_DMA_Abort+0x20e>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a27      	ldr	r2, [pc, #156]	@ (8004018 <HAL_DMA_Abort+0x24c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d02c      	beq.n	8003fda <HAL_DMA_Abort+0x20e>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a25      	ldr	r2, [pc, #148]	@ (800401c <HAL_DMA_Abort+0x250>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d027      	beq.n	8003fda <HAL_DMA_Abort+0x20e>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a24      	ldr	r2, [pc, #144]	@ (8004020 <HAL_DMA_Abort+0x254>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d022      	beq.n	8003fda <HAL_DMA_Abort+0x20e>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a22      	ldr	r2, [pc, #136]	@ (8004024 <HAL_DMA_Abort+0x258>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d01d      	beq.n	8003fda <HAL_DMA_Abort+0x20e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a21      	ldr	r2, [pc, #132]	@ (8004028 <HAL_DMA_Abort+0x25c>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d018      	beq.n	8003fda <HAL_DMA_Abort+0x20e>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a1f      	ldr	r2, [pc, #124]	@ (800402c <HAL_DMA_Abort+0x260>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d013      	beq.n	8003fda <HAL_DMA_Abort+0x20e>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a1e      	ldr	r2, [pc, #120]	@ (8004030 <HAL_DMA_Abort+0x264>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00e      	beq.n	8003fda <HAL_DMA_Abort+0x20e>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8004034 <HAL_DMA_Abort+0x268>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d009      	beq.n	8003fda <HAL_DMA_Abort+0x20e>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a1b      	ldr	r2, [pc, #108]	@ (8004038 <HAL_DMA_Abort+0x26c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d004      	beq.n	8003fda <HAL_DMA_Abort+0x20e>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a19      	ldr	r2, [pc, #100]	@ (800403c <HAL_DMA_Abort+0x270>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d132      	bne.n	8004040 <HAL_DMA_Abort+0x274>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e031      	b.n	8004042 <HAL_DMA_Abort+0x276>
 8003fde:	bf00      	nop
 8003fe0:	40020010 	.word	0x40020010
 8003fe4:	40020028 	.word	0x40020028
 8003fe8:	40020040 	.word	0x40020040
 8003fec:	40020058 	.word	0x40020058
 8003ff0:	40020070 	.word	0x40020070
 8003ff4:	40020088 	.word	0x40020088
 8003ff8:	400200a0 	.word	0x400200a0
 8003ffc:	400200b8 	.word	0x400200b8
 8004000:	40020410 	.word	0x40020410
 8004004:	40020428 	.word	0x40020428
 8004008:	40020440 	.word	0x40020440
 800400c:	40020458 	.word	0x40020458
 8004010:	40020470 	.word	0x40020470
 8004014:	40020488 	.word	0x40020488
 8004018:	400204a0 	.word	0x400204a0
 800401c:	400204b8 	.word	0x400204b8
 8004020:	58025408 	.word	0x58025408
 8004024:	5802541c 	.word	0x5802541c
 8004028:	58025430 	.word	0x58025430
 800402c:	58025444 	.word	0x58025444
 8004030:	58025458 	.word	0x58025458
 8004034:	5802546c 	.word	0x5802546c
 8004038:	58025480 	.word	0x58025480
 800403c:	58025494 	.word	0x58025494
 8004040:	2300      	movs	r3, #0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d007      	beq.n	8004056 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004050:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004054:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a6d      	ldr	r2, [pc, #436]	@ (8004210 <HAL_DMA_Abort+0x444>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d04a      	beq.n	80040f6 <HAL_DMA_Abort+0x32a>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a6b      	ldr	r2, [pc, #428]	@ (8004214 <HAL_DMA_Abort+0x448>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d045      	beq.n	80040f6 <HAL_DMA_Abort+0x32a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a6a      	ldr	r2, [pc, #424]	@ (8004218 <HAL_DMA_Abort+0x44c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d040      	beq.n	80040f6 <HAL_DMA_Abort+0x32a>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a68      	ldr	r2, [pc, #416]	@ (800421c <HAL_DMA_Abort+0x450>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d03b      	beq.n	80040f6 <HAL_DMA_Abort+0x32a>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a67      	ldr	r2, [pc, #412]	@ (8004220 <HAL_DMA_Abort+0x454>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d036      	beq.n	80040f6 <HAL_DMA_Abort+0x32a>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a65      	ldr	r2, [pc, #404]	@ (8004224 <HAL_DMA_Abort+0x458>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d031      	beq.n	80040f6 <HAL_DMA_Abort+0x32a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a64      	ldr	r2, [pc, #400]	@ (8004228 <HAL_DMA_Abort+0x45c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d02c      	beq.n	80040f6 <HAL_DMA_Abort+0x32a>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a62      	ldr	r2, [pc, #392]	@ (800422c <HAL_DMA_Abort+0x460>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d027      	beq.n	80040f6 <HAL_DMA_Abort+0x32a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a61      	ldr	r2, [pc, #388]	@ (8004230 <HAL_DMA_Abort+0x464>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d022      	beq.n	80040f6 <HAL_DMA_Abort+0x32a>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a5f      	ldr	r2, [pc, #380]	@ (8004234 <HAL_DMA_Abort+0x468>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d01d      	beq.n	80040f6 <HAL_DMA_Abort+0x32a>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a5e      	ldr	r2, [pc, #376]	@ (8004238 <HAL_DMA_Abort+0x46c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d018      	beq.n	80040f6 <HAL_DMA_Abort+0x32a>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a5c      	ldr	r2, [pc, #368]	@ (800423c <HAL_DMA_Abort+0x470>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d013      	beq.n	80040f6 <HAL_DMA_Abort+0x32a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a5b      	ldr	r2, [pc, #364]	@ (8004240 <HAL_DMA_Abort+0x474>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00e      	beq.n	80040f6 <HAL_DMA_Abort+0x32a>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a59      	ldr	r2, [pc, #356]	@ (8004244 <HAL_DMA_Abort+0x478>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d009      	beq.n	80040f6 <HAL_DMA_Abort+0x32a>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a58      	ldr	r2, [pc, #352]	@ (8004248 <HAL_DMA_Abort+0x47c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d004      	beq.n	80040f6 <HAL_DMA_Abort+0x32a>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a56      	ldr	r2, [pc, #344]	@ (800424c <HAL_DMA_Abort+0x480>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d108      	bne.n	8004108 <HAL_DMA_Abort+0x33c>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0201 	bic.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	e007      	b.n	8004118 <HAL_DMA_Abort+0x34c>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0201 	bic.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004118:	e013      	b.n	8004142 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800411a:	f7ff fcb7 	bl	8003a8c <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b05      	cmp	r3, #5
 8004126:	d90c      	bls.n	8004142 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2220      	movs	r2, #32
 800412c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2203      	movs	r2, #3
 8004132:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e12d      	b.n	800439e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1e5      	bne.n	800411a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a2f      	ldr	r2, [pc, #188]	@ (8004210 <HAL_DMA_Abort+0x444>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d04a      	beq.n	80041ee <HAL_DMA_Abort+0x422>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a2d      	ldr	r2, [pc, #180]	@ (8004214 <HAL_DMA_Abort+0x448>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d045      	beq.n	80041ee <HAL_DMA_Abort+0x422>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a2c      	ldr	r2, [pc, #176]	@ (8004218 <HAL_DMA_Abort+0x44c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d040      	beq.n	80041ee <HAL_DMA_Abort+0x422>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a2a      	ldr	r2, [pc, #168]	@ (800421c <HAL_DMA_Abort+0x450>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d03b      	beq.n	80041ee <HAL_DMA_Abort+0x422>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a29      	ldr	r2, [pc, #164]	@ (8004220 <HAL_DMA_Abort+0x454>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d036      	beq.n	80041ee <HAL_DMA_Abort+0x422>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a27      	ldr	r2, [pc, #156]	@ (8004224 <HAL_DMA_Abort+0x458>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d031      	beq.n	80041ee <HAL_DMA_Abort+0x422>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a26      	ldr	r2, [pc, #152]	@ (8004228 <HAL_DMA_Abort+0x45c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d02c      	beq.n	80041ee <HAL_DMA_Abort+0x422>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a24      	ldr	r2, [pc, #144]	@ (800422c <HAL_DMA_Abort+0x460>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d027      	beq.n	80041ee <HAL_DMA_Abort+0x422>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a23      	ldr	r2, [pc, #140]	@ (8004230 <HAL_DMA_Abort+0x464>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d022      	beq.n	80041ee <HAL_DMA_Abort+0x422>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a21      	ldr	r2, [pc, #132]	@ (8004234 <HAL_DMA_Abort+0x468>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d01d      	beq.n	80041ee <HAL_DMA_Abort+0x422>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a20      	ldr	r2, [pc, #128]	@ (8004238 <HAL_DMA_Abort+0x46c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d018      	beq.n	80041ee <HAL_DMA_Abort+0x422>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a1e      	ldr	r2, [pc, #120]	@ (800423c <HAL_DMA_Abort+0x470>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d013      	beq.n	80041ee <HAL_DMA_Abort+0x422>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004240 <HAL_DMA_Abort+0x474>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00e      	beq.n	80041ee <HAL_DMA_Abort+0x422>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004244 <HAL_DMA_Abort+0x478>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d009      	beq.n	80041ee <HAL_DMA_Abort+0x422>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a1a      	ldr	r2, [pc, #104]	@ (8004248 <HAL_DMA_Abort+0x47c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d004      	beq.n	80041ee <HAL_DMA_Abort+0x422>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a18      	ldr	r2, [pc, #96]	@ (800424c <HAL_DMA_Abort+0x480>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d101      	bne.n	80041f2 <HAL_DMA_Abort+0x426>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <HAL_DMA_Abort+0x428>
 80041f2:	2300      	movs	r3, #0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d02b      	beq.n	8004250 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004202:	f003 031f 	and.w	r3, r3, #31
 8004206:	223f      	movs	r2, #63	@ 0x3f
 8004208:	409a      	lsls	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	609a      	str	r2, [r3, #8]
 800420e:	e02a      	b.n	8004266 <HAL_DMA_Abort+0x49a>
 8004210:	40020010 	.word	0x40020010
 8004214:	40020028 	.word	0x40020028
 8004218:	40020040 	.word	0x40020040
 800421c:	40020058 	.word	0x40020058
 8004220:	40020070 	.word	0x40020070
 8004224:	40020088 	.word	0x40020088
 8004228:	400200a0 	.word	0x400200a0
 800422c:	400200b8 	.word	0x400200b8
 8004230:	40020410 	.word	0x40020410
 8004234:	40020428 	.word	0x40020428
 8004238:	40020440 	.word	0x40020440
 800423c:	40020458 	.word	0x40020458
 8004240:	40020470 	.word	0x40020470
 8004244:	40020488 	.word	0x40020488
 8004248:	400204a0 	.word	0x400204a0
 800424c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004254:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425a:	f003 031f 	and.w	r3, r3, #31
 800425e:	2201      	movs	r2, #1
 8004260:	409a      	lsls	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a4f      	ldr	r2, [pc, #316]	@ (80043a8 <HAL_DMA_Abort+0x5dc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d072      	beq.n	8004356 <HAL_DMA_Abort+0x58a>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a4d      	ldr	r2, [pc, #308]	@ (80043ac <HAL_DMA_Abort+0x5e0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d06d      	beq.n	8004356 <HAL_DMA_Abort+0x58a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a4c      	ldr	r2, [pc, #304]	@ (80043b0 <HAL_DMA_Abort+0x5e4>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d068      	beq.n	8004356 <HAL_DMA_Abort+0x58a>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a4a      	ldr	r2, [pc, #296]	@ (80043b4 <HAL_DMA_Abort+0x5e8>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d063      	beq.n	8004356 <HAL_DMA_Abort+0x58a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a49      	ldr	r2, [pc, #292]	@ (80043b8 <HAL_DMA_Abort+0x5ec>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d05e      	beq.n	8004356 <HAL_DMA_Abort+0x58a>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a47      	ldr	r2, [pc, #284]	@ (80043bc <HAL_DMA_Abort+0x5f0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d059      	beq.n	8004356 <HAL_DMA_Abort+0x58a>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a46      	ldr	r2, [pc, #280]	@ (80043c0 <HAL_DMA_Abort+0x5f4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d054      	beq.n	8004356 <HAL_DMA_Abort+0x58a>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a44      	ldr	r2, [pc, #272]	@ (80043c4 <HAL_DMA_Abort+0x5f8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d04f      	beq.n	8004356 <HAL_DMA_Abort+0x58a>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a43      	ldr	r2, [pc, #268]	@ (80043c8 <HAL_DMA_Abort+0x5fc>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d04a      	beq.n	8004356 <HAL_DMA_Abort+0x58a>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a41      	ldr	r2, [pc, #260]	@ (80043cc <HAL_DMA_Abort+0x600>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d045      	beq.n	8004356 <HAL_DMA_Abort+0x58a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a40      	ldr	r2, [pc, #256]	@ (80043d0 <HAL_DMA_Abort+0x604>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d040      	beq.n	8004356 <HAL_DMA_Abort+0x58a>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a3e      	ldr	r2, [pc, #248]	@ (80043d4 <HAL_DMA_Abort+0x608>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d03b      	beq.n	8004356 <HAL_DMA_Abort+0x58a>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a3d      	ldr	r2, [pc, #244]	@ (80043d8 <HAL_DMA_Abort+0x60c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d036      	beq.n	8004356 <HAL_DMA_Abort+0x58a>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a3b      	ldr	r2, [pc, #236]	@ (80043dc <HAL_DMA_Abort+0x610>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d031      	beq.n	8004356 <HAL_DMA_Abort+0x58a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a3a      	ldr	r2, [pc, #232]	@ (80043e0 <HAL_DMA_Abort+0x614>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d02c      	beq.n	8004356 <HAL_DMA_Abort+0x58a>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a38      	ldr	r2, [pc, #224]	@ (80043e4 <HAL_DMA_Abort+0x618>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d027      	beq.n	8004356 <HAL_DMA_Abort+0x58a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a37      	ldr	r2, [pc, #220]	@ (80043e8 <HAL_DMA_Abort+0x61c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d022      	beq.n	8004356 <HAL_DMA_Abort+0x58a>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a35      	ldr	r2, [pc, #212]	@ (80043ec <HAL_DMA_Abort+0x620>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d01d      	beq.n	8004356 <HAL_DMA_Abort+0x58a>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a34      	ldr	r2, [pc, #208]	@ (80043f0 <HAL_DMA_Abort+0x624>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d018      	beq.n	8004356 <HAL_DMA_Abort+0x58a>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a32      	ldr	r2, [pc, #200]	@ (80043f4 <HAL_DMA_Abort+0x628>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <HAL_DMA_Abort+0x58a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a31      	ldr	r2, [pc, #196]	@ (80043f8 <HAL_DMA_Abort+0x62c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00e      	beq.n	8004356 <HAL_DMA_Abort+0x58a>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a2f      	ldr	r2, [pc, #188]	@ (80043fc <HAL_DMA_Abort+0x630>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d009      	beq.n	8004356 <HAL_DMA_Abort+0x58a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a2e      	ldr	r2, [pc, #184]	@ (8004400 <HAL_DMA_Abort+0x634>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d004      	beq.n	8004356 <HAL_DMA_Abort+0x58a>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a2c      	ldr	r2, [pc, #176]	@ (8004404 <HAL_DMA_Abort+0x638>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d101      	bne.n	800435a <HAL_DMA_Abort+0x58e>
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <HAL_DMA_Abort+0x590>
 800435a:	2300      	movs	r3, #0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d015      	beq.n	800438c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004368:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00c      	beq.n	800438c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800437c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004380:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800438a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40020010 	.word	0x40020010
 80043ac:	40020028 	.word	0x40020028
 80043b0:	40020040 	.word	0x40020040
 80043b4:	40020058 	.word	0x40020058
 80043b8:	40020070 	.word	0x40020070
 80043bc:	40020088 	.word	0x40020088
 80043c0:	400200a0 	.word	0x400200a0
 80043c4:	400200b8 	.word	0x400200b8
 80043c8:	40020410 	.word	0x40020410
 80043cc:	40020428 	.word	0x40020428
 80043d0:	40020440 	.word	0x40020440
 80043d4:	40020458 	.word	0x40020458
 80043d8:	40020470 	.word	0x40020470
 80043dc:	40020488 	.word	0x40020488
 80043e0:	400204a0 	.word	0x400204a0
 80043e4:	400204b8 	.word	0x400204b8
 80043e8:	58025408 	.word	0x58025408
 80043ec:	5802541c 	.word	0x5802541c
 80043f0:	58025430 	.word	0x58025430
 80043f4:	58025444 	.word	0x58025444
 80043f8:	58025458 	.word	0x58025458
 80043fc:	5802546c 	.word	0x5802546c
 8004400:	58025480 	.word	0x58025480
 8004404:	58025494 	.word	0x58025494

08004408 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e237      	b.n	800488a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d004      	beq.n	8004430 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2280      	movs	r2, #128	@ 0x80
 800442a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e22c      	b.n	800488a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a5c      	ldr	r2, [pc, #368]	@ (80045a8 <HAL_DMA_Abort_IT+0x1a0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d04a      	beq.n	80044d0 <HAL_DMA_Abort_IT+0xc8>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a5b      	ldr	r2, [pc, #364]	@ (80045ac <HAL_DMA_Abort_IT+0x1a4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d045      	beq.n	80044d0 <HAL_DMA_Abort_IT+0xc8>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a59      	ldr	r2, [pc, #356]	@ (80045b0 <HAL_DMA_Abort_IT+0x1a8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d040      	beq.n	80044d0 <HAL_DMA_Abort_IT+0xc8>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a58      	ldr	r2, [pc, #352]	@ (80045b4 <HAL_DMA_Abort_IT+0x1ac>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d03b      	beq.n	80044d0 <HAL_DMA_Abort_IT+0xc8>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a56      	ldr	r2, [pc, #344]	@ (80045b8 <HAL_DMA_Abort_IT+0x1b0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d036      	beq.n	80044d0 <HAL_DMA_Abort_IT+0xc8>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a55      	ldr	r2, [pc, #340]	@ (80045bc <HAL_DMA_Abort_IT+0x1b4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d031      	beq.n	80044d0 <HAL_DMA_Abort_IT+0xc8>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a53      	ldr	r2, [pc, #332]	@ (80045c0 <HAL_DMA_Abort_IT+0x1b8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d02c      	beq.n	80044d0 <HAL_DMA_Abort_IT+0xc8>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a52      	ldr	r2, [pc, #328]	@ (80045c4 <HAL_DMA_Abort_IT+0x1bc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d027      	beq.n	80044d0 <HAL_DMA_Abort_IT+0xc8>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a50      	ldr	r2, [pc, #320]	@ (80045c8 <HAL_DMA_Abort_IT+0x1c0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d022      	beq.n	80044d0 <HAL_DMA_Abort_IT+0xc8>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a4f      	ldr	r2, [pc, #316]	@ (80045cc <HAL_DMA_Abort_IT+0x1c4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d01d      	beq.n	80044d0 <HAL_DMA_Abort_IT+0xc8>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a4d      	ldr	r2, [pc, #308]	@ (80045d0 <HAL_DMA_Abort_IT+0x1c8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d018      	beq.n	80044d0 <HAL_DMA_Abort_IT+0xc8>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a4c      	ldr	r2, [pc, #304]	@ (80045d4 <HAL_DMA_Abort_IT+0x1cc>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d013      	beq.n	80044d0 <HAL_DMA_Abort_IT+0xc8>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a4a      	ldr	r2, [pc, #296]	@ (80045d8 <HAL_DMA_Abort_IT+0x1d0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00e      	beq.n	80044d0 <HAL_DMA_Abort_IT+0xc8>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a49      	ldr	r2, [pc, #292]	@ (80045dc <HAL_DMA_Abort_IT+0x1d4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d009      	beq.n	80044d0 <HAL_DMA_Abort_IT+0xc8>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a47      	ldr	r2, [pc, #284]	@ (80045e0 <HAL_DMA_Abort_IT+0x1d8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d004      	beq.n	80044d0 <HAL_DMA_Abort_IT+0xc8>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a46      	ldr	r2, [pc, #280]	@ (80045e4 <HAL_DMA_Abort_IT+0x1dc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d101      	bne.n	80044d4 <HAL_DMA_Abort_IT+0xcc>
 80044d0:	2301      	movs	r3, #1
 80044d2:	e000      	b.n	80044d6 <HAL_DMA_Abort_IT+0xce>
 80044d4:	2300      	movs	r3, #0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 8086 	beq.w	80045e8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2204      	movs	r2, #4
 80044e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a2f      	ldr	r2, [pc, #188]	@ (80045a8 <HAL_DMA_Abort_IT+0x1a0>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d04a      	beq.n	8004584 <HAL_DMA_Abort_IT+0x17c>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a2e      	ldr	r2, [pc, #184]	@ (80045ac <HAL_DMA_Abort_IT+0x1a4>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d045      	beq.n	8004584 <HAL_DMA_Abort_IT+0x17c>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a2c      	ldr	r2, [pc, #176]	@ (80045b0 <HAL_DMA_Abort_IT+0x1a8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d040      	beq.n	8004584 <HAL_DMA_Abort_IT+0x17c>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a2b      	ldr	r2, [pc, #172]	@ (80045b4 <HAL_DMA_Abort_IT+0x1ac>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d03b      	beq.n	8004584 <HAL_DMA_Abort_IT+0x17c>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a29      	ldr	r2, [pc, #164]	@ (80045b8 <HAL_DMA_Abort_IT+0x1b0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d036      	beq.n	8004584 <HAL_DMA_Abort_IT+0x17c>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a28      	ldr	r2, [pc, #160]	@ (80045bc <HAL_DMA_Abort_IT+0x1b4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d031      	beq.n	8004584 <HAL_DMA_Abort_IT+0x17c>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a26      	ldr	r2, [pc, #152]	@ (80045c0 <HAL_DMA_Abort_IT+0x1b8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d02c      	beq.n	8004584 <HAL_DMA_Abort_IT+0x17c>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a25      	ldr	r2, [pc, #148]	@ (80045c4 <HAL_DMA_Abort_IT+0x1bc>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d027      	beq.n	8004584 <HAL_DMA_Abort_IT+0x17c>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a23      	ldr	r2, [pc, #140]	@ (80045c8 <HAL_DMA_Abort_IT+0x1c0>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d022      	beq.n	8004584 <HAL_DMA_Abort_IT+0x17c>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a22      	ldr	r2, [pc, #136]	@ (80045cc <HAL_DMA_Abort_IT+0x1c4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d01d      	beq.n	8004584 <HAL_DMA_Abort_IT+0x17c>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a20      	ldr	r2, [pc, #128]	@ (80045d0 <HAL_DMA_Abort_IT+0x1c8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d018      	beq.n	8004584 <HAL_DMA_Abort_IT+0x17c>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1f      	ldr	r2, [pc, #124]	@ (80045d4 <HAL_DMA_Abort_IT+0x1cc>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d013      	beq.n	8004584 <HAL_DMA_Abort_IT+0x17c>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1d      	ldr	r2, [pc, #116]	@ (80045d8 <HAL_DMA_Abort_IT+0x1d0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d00e      	beq.n	8004584 <HAL_DMA_Abort_IT+0x17c>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a1c      	ldr	r2, [pc, #112]	@ (80045dc <HAL_DMA_Abort_IT+0x1d4>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d009      	beq.n	8004584 <HAL_DMA_Abort_IT+0x17c>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a1a      	ldr	r2, [pc, #104]	@ (80045e0 <HAL_DMA_Abort_IT+0x1d8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d004      	beq.n	8004584 <HAL_DMA_Abort_IT+0x17c>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a19      	ldr	r2, [pc, #100]	@ (80045e4 <HAL_DMA_Abort_IT+0x1dc>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d108      	bne.n	8004596 <HAL_DMA_Abort_IT+0x18e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0201 	bic.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e178      	b.n	8004888 <HAL_DMA_Abort_IT+0x480>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0201 	bic.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	e16f      	b.n	8004888 <HAL_DMA_Abort_IT+0x480>
 80045a8:	40020010 	.word	0x40020010
 80045ac:	40020028 	.word	0x40020028
 80045b0:	40020040 	.word	0x40020040
 80045b4:	40020058 	.word	0x40020058
 80045b8:	40020070 	.word	0x40020070
 80045bc:	40020088 	.word	0x40020088
 80045c0:	400200a0 	.word	0x400200a0
 80045c4:	400200b8 	.word	0x400200b8
 80045c8:	40020410 	.word	0x40020410
 80045cc:	40020428 	.word	0x40020428
 80045d0:	40020440 	.word	0x40020440
 80045d4:	40020458 	.word	0x40020458
 80045d8:	40020470 	.word	0x40020470
 80045dc:	40020488 	.word	0x40020488
 80045e0:	400204a0 	.word	0x400204a0
 80045e4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 020e 	bic.w	r2, r2, #14
 80045f6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a6c      	ldr	r2, [pc, #432]	@ (80047b0 <HAL_DMA_Abort_IT+0x3a8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d04a      	beq.n	8004698 <HAL_DMA_Abort_IT+0x290>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a6b      	ldr	r2, [pc, #428]	@ (80047b4 <HAL_DMA_Abort_IT+0x3ac>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d045      	beq.n	8004698 <HAL_DMA_Abort_IT+0x290>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a69      	ldr	r2, [pc, #420]	@ (80047b8 <HAL_DMA_Abort_IT+0x3b0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d040      	beq.n	8004698 <HAL_DMA_Abort_IT+0x290>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a68      	ldr	r2, [pc, #416]	@ (80047bc <HAL_DMA_Abort_IT+0x3b4>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d03b      	beq.n	8004698 <HAL_DMA_Abort_IT+0x290>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a66      	ldr	r2, [pc, #408]	@ (80047c0 <HAL_DMA_Abort_IT+0x3b8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d036      	beq.n	8004698 <HAL_DMA_Abort_IT+0x290>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a65      	ldr	r2, [pc, #404]	@ (80047c4 <HAL_DMA_Abort_IT+0x3bc>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d031      	beq.n	8004698 <HAL_DMA_Abort_IT+0x290>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a63      	ldr	r2, [pc, #396]	@ (80047c8 <HAL_DMA_Abort_IT+0x3c0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d02c      	beq.n	8004698 <HAL_DMA_Abort_IT+0x290>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a62      	ldr	r2, [pc, #392]	@ (80047cc <HAL_DMA_Abort_IT+0x3c4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d027      	beq.n	8004698 <HAL_DMA_Abort_IT+0x290>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a60      	ldr	r2, [pc, #384]	@ (80047d0 <HAL_DMA_Abort_IT+0x3c8>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d022      	beq.n	8004698 <HAL_DMA_Abort_IT+0x290>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a5f      	ldr	r2, [pc, #380]	@ (80047d4 <HAL_DMA_Abort_IT+0x3cc>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d01d      	beq.n	8004698 <HAL_DMA_Abort_IT+0x290>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a5d      	ldr	r2, [pc, #372]	@ (80047d8 <HAL_DMA_Abort_IT+0x3d0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d018      	beq.n	8004698 <HAL_DMA_Abort_IT+0x290>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a5c      	ldr	r2, [pc, #368]	@ (80047dc <HAL_DMA_Abort_IT+0x3d4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d013      	beq.n	8004698 <HAL_DMA_Abort_IT+0x290>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a5a      	ldr	r2, [pc, #360]	@ (80047e0 <HAL_DMA_Abort_IT+0x3d8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d00e      	beq.n	8004698 <HAL_DMA_Abort_IT+0x290>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a59      	ldr	r2, [pc, #356]	@ (80047e4 <HAL_DMA_Abort_IT+0x3dc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d009      	beq.n	8004698 <HAL_DMA_Abort_IT+0x290>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a57      	ldr	r2, [pc, #348]	@ (80047e8 <HAL_DMA_Abort_IT+0x3e0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d004      	beq.n	8004698 <HAL_DMA_Abort_IT+0x290>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a56      	ldr	r2, [pc, #344]	@ (80047ec <HAL_DMA_Abort_IT+0x3e4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d108      	bne.n	80046aa <HAL_DMA_Abort_IT+0x2a2>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0201 	bic.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	e007      	b.n	80046ba <HAL_DMA_Abort_IT+0x2b2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0201 	bic.w	r2, r2, #1
 80046b8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a3c      	ldr	r2, [pc, #240]	@ (80047b0 <HAL_DMA_Abort_IT+0x3a8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d072      	beq.n	80047aa <HAL_DMA_Abort_IT+0x3a2>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a3a      	ldr	r2, [pc, #232]	@ (80047b4 <HAL_DMA_Abort_IT+0x3ac>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d06d      	beq.n	80047aa <HAL_DMA_Abort_IT+0x3a2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a39      	ldr	r2, [pc, #228]	@ (80047b8 <HAL_DMA_Abort_IT+0x3b0>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d068      	beq.n	80047aa <HAL_DMA_Abort_IT+0x3a2>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a37      	ldr	r2, [pc, #220]	@ (80047bc <HAL_DMA_Abort_IT+0x3b4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d063      	beq.n	80047aa <HAL_DMA_Abort_IT+0x3a2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a36      	ldr	r2, [pc, #216]	@ (80047c0 <HAL_DMA_Abort_IT+0x3b8>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d05e      	beq.n	80047aa <HAL_DMA_Abort_IT+0x3a2>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a34      	ldr	r2, [pc, #208]	@ (80047c4 <HAL_DMA_Abort_IT+0x3bc>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d059      	beq.n	80047aa <HAL_DMA_Abort_IT+0x3a2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a33      	ldr	r2, [pc, #204]	@ (80047c8 <HAL_DMA_Abort_IT+0x3c0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d054      	beq.n	80047aa <HAL_DMA_Abort_IT+0x3a2>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a31      	ldr	r2, [pc, #196]	@ (80047cc <HAL_DMA_Abort_IT+0x3c4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d04f      	beq.n	80047aa <HAL_DMA_Abort_IT+0x3a2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a30      	ldr	r2, [pc, #192]	@ (80047d0 <HAL_DMA_Abort_IT+0x3c8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d04a      	beq.n	80047aa <HAL_DMA_Abort_IT+0x3a2>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a2e      	ldr	r2, [pc, #184]	@ (80047d4 <HAL_DMA_Abort_IT+0x3cc>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d045      	beq.n	80047aa <HAL_DMA_Abort_IT+0x3a2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a2d      	ldr	r2, [pc, #180]	@ (80047d8 <HAL_DMA_Abort_IT+0x3d0>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d040      	beq.n	80047aa <HAL_DMA_Abort_IT+0x3a2>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a2b      	ldr	r2, [pc, #172]	@ (80047dc <HAL_DMA_Abort_IT+0x3d4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d03b      	beq.n	80047aa <HAL_DMA_Abort_IT+0x3a2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a2a      	ldr	r2, [pc, #168]	@ (80047e0 <HAL_DMA_Abort_IT+0x3d8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d036      	beq.n	80047aa <HAL_DMA_Abort_IT+0x3a2>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a28      	ldr	r2, [pc, #160]	@ (80047e4 <HAL_DMA_Abort_IT+0x3dc>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d031      	beq.n	80047aa <HAL_DMA_Abort_IT+0x3a2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a27      	ldr	r2, [pc, #156]	@ (80047e8 <HAL_DMA_Abort_IT+0x3e0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d02c      	beq.n	80047aa <HAL_DMA_Abort_IT+0x3a2>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a25      	ldr	r2, [pc, #148]	@ (80047ec <HAL_DMA_Abort_IT+0x3e4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d027      	beq.n	80047aa <HAL_DMA_Abort_IT+0x3a2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a24      	ldr	r2, [pc, #144]	@ (80047f0 <HAL_DMA_Abort_IT+0x3e8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d022      	beq.n	80047aa <HAL_DMA_Abort_IT+0x3a2>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a22      	ldr	r2, [pc, #136]	@ (80047f4 <HAL_DMA_Abort_IT+0x3ec>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d01d      	beq.n	80047aa <HAL_DMA_Abort_IT+0x3a2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a21      	ldr	r2, [pc, #132]	@ (80047f8 <HAL_DMA_Abort_IT+0x3f0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d018      	beq.n	80047aa <HAL_DMA_Abort_IT+0x3a2>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1f      	ldr	r2, [pc, #124]	@ (80047fc <HAL_DMA_Abort_IT+0x3f4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d013      	beq.n	80047aa <HAL_DMA_Abort_IT+0x3a2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1e      	ldr	r2, [pc, #120]	@ (8004800 <HAL_DMA_Abort_IT+0x3f8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00e      	beq.n	80047aa <HAL_DMA_Abort_IT+0x3a2>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1c      	ldr	r2, [pc, #112]	@ (8004804 <HAL_DMA_Abort_IT+0x3fc>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d009      	beq.n	80047aa <HAL_DMA_Abort_IT+0x3a2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1b      	ldr	r2, [pc, #108]	@ (8004808 <HAL_DMA_Abort_IT+0x400>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d004      	beq.n	80047aa <HAL_DMA_Abort_IT+0x3a2>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a19      	ldr	r2, [pc, #100]	@ (800480c <HAL_DMA_Abort_IT+0x404>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d132      	bne.n	8004810 <HAL_DMA_Abort_IT+0x408>
 80047aa:	2301      	movs	r3, #1
 80047ac:	e031      	b.n	8004812 <HAL_DMA_Abort_IT+0x40a>
 80047ae:	bf00      	nop
 80047b0:	40020010 	.word	0x40020010
 80047b4:	40020028 	.word	0x40020028
 80047b8:	40020040 	.word	0x40020040
 80047bc:	40020058 	.word	0x40020058
 80047c0:	40020070 	.word	0x40020070
 80047c4:	40020088 	.word	0x40020088
 80047c8:	400200a0 	.word	0x400200a0
 80047cc:	400200b8 	.word	0x400200b8
 80047d0:	40020410 	.word	0x40020410
 80047d4:	40020428 	.word	0x40020428
 80047d8:	40020440 	.word	0x40020440
 80047dc:	40020458 	.word	0x40020458
 80047e0:	40020470 	.word	0x40020470
 80047e4:	40020488 	.word	0x40020488
 80047e8:	400204a0 	.word	0x400204a0
 80047ec:	400204b8 	.word	0x400204b8
 80047f0:	58025408 	.word	0x58025408
 80047f4:	5802541c 	.word	0x5802541c
 80047f8:	58025430 	.word	0x58025430
 80047fc:	58025444 	.word	0x58025444
 8004800:	58025458 	.word	0x58025458
 8004804:	5802546c 	.word	0x5802546c
 8004808:	58025480 	.word	0x58025480
 800480c:	58025494 	.word	0x58025494
 8004810:	2300      	movs	r3, #0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d028      	beq.n	8004868 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004820:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004824:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800482a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004830:	f003 031f 	and.w	r3, r3, #31
 8004834:	2201      	movs	r2, #1
 8004836:	409a      	lsls	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004844:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00c      	beq.n	8004868 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004858:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800485c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004866:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop

08004894 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004894:	b480      	push	{r7}
 8004896:	b089      	sub	sp, #36	@ 0x24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800489e:	2300      	movs	r3, #0
 80048a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80048a2:	4b89      	ldr	r3, [pc, #548]	@ (8004ac8 <HAL_GPIO_Init+0x234>)
 80048a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048a6:	e194      	b.n	8004bd2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	2101      	movs	r1, #1
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	fa01 f303 	lsl.w	r3, r1, r3
 80048b4:	4013      	ands	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 8186 	beq.w	8004bcc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d005      	beq.n	80048d8 <HAL_GPIO_Init+0x44>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f003 0303 	and.w	r3, r3, #3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d130      	bne.n	800493a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	2203      	movs	r2, #3
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	43db      	mvns	r3, r3
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	4013      	ands	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	4313      	orrs	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800490e:	2201      	movs	r2, #1
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	fa02 f303 	lsl.w	r3, r2, r3
 8004916:	43db      	mvns	r3, r3
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	4013      	ands	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	091b      	lsrs	r3, r3, #4
 8004924:	f003 0201 	and.w	r2, r3, #1
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	4313      	orrs	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	2b03      	cmp	r3, #3
 8004944:	d017      	beq.n	8004976 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	2203      	movs	r2, #3
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	43db      	mvns	r3, r3
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	4013      	ands	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	4313      	orrs	r3, r2
 800496e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d123      	bne.n	80049ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	08da      	lsrs	r2, r3, #3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3208      	adds	r2, #8
 800498a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800498e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	220f      	movs	r2, #15
 800499a:	fa02 f303 	lsl.w	r3, r2, r3
 800499e:	43db      	mvns	r3, r3
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	4013      	ands	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	691a      	ldr	r2, [r3, #16]
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	fa02 f303 	lsl.w	r3, r2, r3
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	08da      	lsrs	r2, r3, #3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3208      	adds	r2, #8
 80049c4:	69b9      	ldr	r1, [r7, #24]
 80049c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	2203      	movs	r2, #3
 80049d6:	fa02 f303 	lsl.w	r3, r2, r3
 80049da:	43db      	mvns	r3, r3
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	4013      	ands	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f003 0203 	and.w	r2, r3, #3
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 80e0 	beq.w	8004bcc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a0c:	4b2f      	ldr	r3, [pc, #188]	@ (8004acc <HAL_GPIO_Init+0x238>)
 8004a0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a12:	4a2e      	ldr	r2, [pc, #184]	@ (8004acc <HAL_GPIO_Init+0x238>)
 8004a14:	f043 0302 	orr.w	r3, r3, #2
 8004a18:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004acc <HAL_GPIO_Init+0x238>)
 8004a1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a2a:	4a29      	ldr	r2, [pc, #164]	@ (8004ad0 <HAL_GPIO_Init+0x23c>)
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	089b      	lsrs	r3, r3, #2
 8004a30:	3302      	adds	r3, #2
 8004a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	220f      	movs	r2, #15
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	43db      	mvns	r3, r3
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a20      	ldr	r2, [pc, #128]	@ (8004ad4 <HAL_GPIO_Init+0x240>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d052      	beq.n	8004afc <HAL_GPIO_Init+0x268>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad8 <HAL_GPIO_Init+0x244>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d031      	beq.n	8004ac2 <HAL_GPIO_Init+0x22e>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a1e      	ldr	r2, [pc, #120]	@ (8004adc <HAL_GPIO_Init+0x248>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d02b      	beq.n	8004abe <HAL_GPIO_Init+0x22a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a1d      	ldr	r2, [pc, #116]	@ (8004ae0 <HAL_GPIO_Init+0x24c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d025      	beq.n	8004aba <HAL_GPIO_Init+0x226>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a1c      	ldr	r2, [pc, #112]	@ (8004ae4 <HAL_GPIO_Init+0x250>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d01f      	beq.n	8004ab6 <HAL_GPIO_Init+0x222>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae8 <HAL_GPIO_Init+0x254>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d019      	beq.n	8004ab2 <HAL_GPIO_Init+0x21e>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a1a      	ldr	r2, [pc, #104]	@ (8004aec <HAL_GPIO_Init+0x258>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d013      	beq.n	8004aae <HAL_GPIO_Init+0x21a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a19      	ldr	r2, [pc, #100]	@ (8004af0 <HAL_GPIO_Init+0x25c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00d      	beq.n	8004aaa <HAL_GPIO_Init+0x216>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a18      	ldr	r2, [pc, #96]	@ (8004af4 <HAL_GPIO_Init+0x260>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d007      	beq.n	8004aa6 <HAL_GPIO_Init+0x212>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a17      	ldr	r2, [pc, #92]	@ (8004af8 <HAL_GPIO_Init+0x264>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d101      	bne.n	8004aa2 <HAL_GPIO_Init+0x20e>
 8004a9e:	2309      	movs	r3, #9
 8004aa0:	e02d      	b.n	8004afe <HAL_GPIO_Init+0x26a>
 8004aa2:	230a      	movs	r3, #10
 8004aa4:	e02b      	b.n	8004afe <HAL_GPIO_Init+0x26a>
 8004aa6:	2308      	movs	r3, #8
 8004aa8:	e029      	b.n	8004afe <HAL_GPIO_Init+0x26a>
 8004aaa:	2307      	movs	r3, #7
 8004aac:	e027      	b.n	8004afe <HAL_GPIO_Init+0x26a>
 8004aae:	2306      	movs	r3, #6
 8004ab0:	e025      	b.n	8004afe <HAL_GPIO_Init+0x26a>
 8004ab2:	2305      	movs	r3, #5
 8004ab4:	e023      	b.n	8004afe <HAL_GPIO_Init+0x26a>
 8004ab6:	2304      	movs	r3, #4
 8004ab8:	e021      	b.n	8004afe <HAL_GPIO_Init+0x26a>
 8004aba:	2303      	movs	r3, #3
 8004abc:	e01f      	b.n	8004afe <HAL_GPIO_Init+0x26a>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	e01d      	b.n	8004afe <HAL_GPIO_Init+0x26a>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e01b      	b.n	8004afe <HAL_GPIO_Init+0x26a>
 8004ac6:	bf00      	nop
 8004ac8:	58000080 	.word	0x58000080
 8004acc:	58024400 	.word	0x58024400
 8004ad0:	58000400 	.word	0x58000400
 8004ad4:	58020000 	.word	0x58020000
 8004ad8:	58020400 	.word	0x58020400
 8004adc:	58020800 	.word	0x58020800
 8004ae0:	58020c00 	.word	0x58020c00
 8004ae4:	58021000 	.word	0x58021000
 8004ae8:	58021400 	.word	0x58021400
 8004aec:	58021800 	.word	0x58021800
 8004af0:	58021c00 	.word	0x58021c00
 8004af4:	58022000 	.word	0x58022000
 8004af8:	58022400 	.word	0x58022400
 8004afc:	2300      	movs	r3, #0
 8004afe:	69fa      	ldr	r2, [r7, #28]
 8004b00:	f002 0203 	and.w	r2, r2, #3
 8004b04:	0092      	lsls	r2, r2, #2
 8004b06:	4093      	lsls	r3, r2
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b0e:	4938      	ldr	r1, [pc, #224]	@ (8004bf0 <HAL_GPIO_Init+0x35c>)
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	089b      	lsrs	r3, r3, #2
 8004b14:	3302      	adds	r3, #2
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	43db      	mvns	r3, r3
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	43db      	mvns	r3, r3
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	43db      	mvns	r3, r3
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	4013      	ands	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	43db      	mvns	r3, r3
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f47f ae63 	bne.w	80048a8 <HAL_GPIO_Init+0x14>
  }
}
 8004be2:	bf00      	nop
 8004be4:	bf00      	nop
 8004be6:	3724      	adds	r7, #36	@ 0x24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	58000400 	.word	0x58000400

08004bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	807b      	strh	r3, [r7, #2]
 8004c00:	4613      	mov	r3, r2
 8004c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c04:	787b      	ldrb	r3, [r7, #1]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c0a:	887a      	ldrh	r2, [r7, #2]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004c10:	e003      	b.n	8004c1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c12:	887b      	ldrh	r3, [r7, #2]
 8004c14:	041a      	lsls	r2, r3, #16
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	619a      	str	r2, [r3, #24]
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
	...

08004c28 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e0bd      	b.n	8004db6 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d031      	beq.n	8004ce2 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a4f      	ldr	r2, [pc, #316]	@ (8004dc0 <HAL_HRTIM_Init+0x198>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d10e      	bne.n	8004ca6 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8004c88:	4b4e      	ldr	r3, [pc, #312]	@ (8004dc4 <HAL_HRTIM_Init+0x19c>)
 8004c8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c8e:	4a4d      	ldr	r2, [pc, #308]	@ (8004dc4 <HAL_HRTIM_Init+0x19c>)
 8004c90:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c98:	4b4a      	ldr	r3, [pc, #296]	@ (8004dc4 <HAL_HRTIM_Init+0x19c>)
 8004c9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004cb4:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004cca:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fd ff96 	bl	8002c14 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d012      	beq.n	8004d1a <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d02:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	75fb      	strb	r3, [r7, #23]
 8004d2e:	e03e      	b.n	8004dae <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8004d30:	7dfa      	ldrb	r2, [r7, #23]
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	4613      	mov	r3, r2
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	1a9b      	subs	r3, r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	3318      	adds	r3, #24
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8004d44:	7dfa      	ldrb	r2, [r7, #23]
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	1a9b      	subs	r3, r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	331c      	adds	r3, #28
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8004d58:	7dfa      	ldrb	r2, [r7, #23]
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	1a9b      	subs	r3, r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	3320      	adds	r3, #32
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8004d6c:	7dfa      	ldrb	r2, [r7, #23]
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	4613      	mov	r3, r2
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	1a9b      	subs	r3, r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	3324      	adds	r3, #36	@ 0x24
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8004d80:	7dfa      	ldrb	r2, [r7, #23]
 8004d82:	6879      	ldr	r1, [r7, #4]
 8004d84:	4613      	mov	r3, r2
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	1a9b      	subs	r3, r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	3328      	adds	r3, #40	@ 0x28
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8004d94:	7dfa      	ldrb	r2, [r7, #23]
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	1a9b      	subs	r3, r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	3330      	adds	r3, #48	@ 0x30
 8004da4:	2200      	movs	r2, #0
 8004da6:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8004da8:	7dfb      	ldrb	r3, [r7, #23]
 8004daa:	3301      	adds	r3, #1
 8004dac:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8004dae:	7dfb      	ldrb	r3, [r7, #23]
 8004db0:	2b05      	cmp	r3, #5
 8004db2:	d9bd      	bls.n	8004d30 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40017400 	.word	0x40017400
 8004dc4:	58024400 	.word	0x58024400

08004dc8 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d101      	bne.n	8004de4 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8004de0:	2302      	movs	r3, #2
 8004de2:	e015      	b.n	8004e10 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2b05      	cmp	r3, #5
 8004df0:	d104      	bne.n	8004dfc <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 fa88 	bl	800530a <HRTIM_MasterBase_Config>
 8004dfa:	e004      	b.n	8004e06 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 fab1 	bl	8005368 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_HRTIM_EventConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Event,
                                        const HRTIM_EventCfgTypeDef* pEventCfg)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_EVENTPOLARITY(pEventCfg->Sensitivity, pEventCfg->Polarity));
  assert_param(IS_HRTIM_EVENTSENSITIVITY(pEventCfg->Sensitivity));
  assert_param(IS_HRTIM_EVENTFASTMODE(Event, pEventCfg->FastMode));
  assert_param(IS_HRTIM_EVENTFILTER(Event, pEventCfg->Filter));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d101      	bne.n	8004e34 <HAL_HRTIM_EventConfig+0x1c>
  {
     return HAL_BUSY;
 8004e30:	2302      	movs	r3, #2
 8004e32:	e01c      	b.n	8004e6e <HAL_HRTIM_EventConfig+0x56>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d101      	bne.n	8004e42 <HAL_HRTIM_EventConfig+0x2a>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e015      	b.n	8004e6e <HAL_HRTIM_EventConfig+0x56>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the event channel */
  HRTIM_EventConfig(hhrtim, Event, pEventCfg);
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	68b9      	ldr	r1, [r7, #8]
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 fd44 	bl	80058e4 <HRTIM_EventConfig>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_HRTIM_EventPrescalerConfig>:
  * @note This function must be called before starting the timer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
 8004e7e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_EVENTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d101      	bne.n	8004e90 <HAL_HRTIM_EventPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	e025      	b.n	8004edc <HAL_HRTIM_EventPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <HAL_HRTIM_EventPrescalerConfig+0x28>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e01e      	b.n	8004edc <HAL_HRTIM_EventPrescalerConfig+0x66>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 8004eb6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d101      	bne.n	8004f04 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8004f00:	2302      	movs	r3, #2
 8004f02:	e05f      	b.n	8004fc4 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d101      	bne.n	8004f12 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8004f0e:	2302      	movs	r3, #2
 8004f10:	e058      	b.n	8004fc4 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b05      	cmp	r3, #5
 8004f26:	d104      	bne.n	8004f32 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 fa5c 	bl	80053e8 <HRTIM_MasterWaveform_Config>
 8004f30:	e004      	b.n	8004f3c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 fabc 	bl	80054b4 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6819      	ldr	r1, [r3, #0]
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	4613      	mov	r3, r2
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	1a9b      	subs	r3, r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4403      	add	r3, r0
 8004f4e:	3320      	adds	r3, #32
 8004f50:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6859      	ldr	r1, [r3, #4]
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	1a9b      	subs	r3, r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4403      	add	r3, r0
 8004f64:	3324      	adds	r3, #36	@ 0x24
 8004f66:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6899      	ldr	r1, [r3, #8]
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	4613      	mov	r3, r2
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	1a9b      	subs	r3, r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4403      	add	r3, r0
 8004f7a:	3328      	adds	r3, #40	@ 0x28
 8004f7c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68d9      	ldr	r1, [r3, #12]
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	4613      	mov	r3, r2
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	1a9b      	subs	r3, r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4403      	add	r3, r0
 8004f90:	332c      	adds	r3, #44	@ 0x2c
 8004f92:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6919      	ldr	r1, [r3, #16]
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	1a9b      	subs	r3, r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4403      	add	r3, r0
 8004fa6:	3330      	adds	r3, #48	@ 0x30
 8004fa8:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8004faa:	68b9      	ldr	r1, [r7, #8]
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 fec1 	bl	8005d34 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d101      	bne.n	8004fea <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e157      	b.n	800529a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e150      	b.n	800529a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b05      	cmp	r3, #5
 800500c:	d140      	bne.n	8005090 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3b01      	subs	r3, #1
 8005012:	2b07      	cmp	r3, #7
 8005014:	d82a      	bhi.n	800506c <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8005016:	a201      	add	r2, pc, #4	@ (adr r2, 800501c <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8005018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501c:	0800503d 	.word	0x0800503d
 8005020:	08005049 	.word	0x08005049
 8005024:	0800506d 	.word	0x0800506d
 8005028:	08005055 	.word	0x08005055
 800502c:	0800506d 	.word	0x0800506d
 8005030:	0800506d 	.word	0x0800506d
 8005034:	0800506d 	.word	0x0800506d
 8005038:	08005061 	.word	0x08005061
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	61da      	str	r2, [r3, #28]
        break;
 8005046:	e01a      	b.n	800507e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	6812      	ldr	r2, [r2, #0]
 8005050:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 8005052:	e014      	b.n	800507e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	6812      	ldr	r2, [r2, #0]
 800505c:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 800505e:	e00e      	b.n	800507e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	6812      	ldr	r2, [r2, #0]
 8005068:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 800506a:	e008      	b.n	800507e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2207      	movs	r2, #7
 8005070:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

        break;
 800507c:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b07      	cmp	r3, #7
 8005088:	f040 80fe 	bne.w	8005288 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e104      	b.n	800529a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3b01      	subs	r3, #1
 8005094:	2b07      	cmp	r3, #7
 8005096:	f200 80e3 	bhi.w	8005260 <HAL_HRTIM_WaveformCompareConfig+0x294>
 800509a:	a201      	add	r2, pc, #4	@ (adr r2, 80050a0 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 800509c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a0:	080050c1 	.word	0x080050c1
 80050a4:	080050d5 	.word	0x080050d5
 80050a8:	08005261 	.word	0x08005261
 80050ac:	08005191 	.word	0x08005191
 80050b0:	08005261 	.word	0x08005261
 80050b4:	08005261 	.word	0x08005261
 80050b8:	08005261 	.word	0x08005261
 80050bc:	080051a5 	.word	0x080051a5
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6819      	ldr	r1, [r3, #0]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	01db      	lsls	r3, r3, #7
 80050cc:	440b      	add	r3, r1
 80050ce:	339c      	adds	r3, #156	@ 0x9c
 80050d0:	601a      	str	r2, [r3, #0]
        break;
 80050d2:	e0d1      	b.n	8005278 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6819      	ldr	r1, [r3, #0]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	01db      	lsls	r3, r3, #7
 80050e0:	440b      	add	r3, r1
 80050e2:	33a4      	adds	r3, #164	@ 0xa4
 80050e4:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d03f      	beq.n	800516e <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	3301      	adds	r3, #1
 80050f6:	01db      	lsls	r3, r3, #7
 80050f8:	4413      	add	r3, r2
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	6811      	ldr	r1, [r2, #0]
 8005100:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	3301      	adds	r3, #1
 8005108:	01db      	lsls	r3, r3, #7
 800510a:	440b      	add	r3, r1
 800510c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	3301      	adds	r3, #1
 8005116:	01db      	lsls	r3, r3, #7
 8005118:	4413      	add	r3, r2
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	68f9      	ldr	r1, [r7, #12]
 8005122:	6809      	ldr	r1, [r1, #0]
 8005124:	431a      	orrs	r2, r3
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	3301      	adds	r3, #1
 800512a:	01db      	lsls	r3, r3, #7
 800512c:	440b      	add	r3, r1
 800512e:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005138:	d109      	bne.n	800514e <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6819      	ldr	r1, [r3, #0]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	01db      	lsls	r3, r3, #7
 8005146:	440b      	add	r3, r1
 8005148:	339c      	adds	r3, #156	@ 0x9c
 800514a:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 800514c:	e091      	b.n	8005272 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005156:	f040 808c 	bne.w	8005272 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6819      	ldr	r1, [r3, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	01db      	lsls	r3, r3, #7
 8005166:	440b      	add	r3, r1
 8005168:	33a8      	adds	r3, #168	@ 0xa8
 800516a:	601a      	str	r2, [r3, #0]
         break;
 800516c:	e081      	b.n	8005272 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	3301      	adds	r3, #1
 8005176:	01db      	lsls	r3, r3, #7
 8005178:	4413      	add	r3, r2
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	6811      	ldr	r1, [r2, #0]
 8005180:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	3301      	adds	r3, #1
 8005188:	01db      	lsls	r3, r3, #7
 800518a:	440b      	add	r3, r1
 800518c:	601a      	str	r2, [r3, #0]
         break;
 800518e:	e070      	b.n	8005272 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6819      	ldr	r1, [r3, #0]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	01db      	lsls	r3, r3, #7
 800519c:	440b      	add	r3, r1
 800519e:	33a8      	adds	r3, #168	@ 0xa8
 80051a0:	601a      	str	r2, [r3, #0]
        break;
 80051a2:	e069      	b.n	8005278 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6819      	ldr	r1, [r3, #0]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	01db      	lsls	r3, r3, #7
 80051b0:	440b      	add	r3, r1
 80051b2:	33ac      	adds	r3, #172	@ 0xac
 80051b4:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d03f      	beq.n	800523e <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	3301      	adds	r3, #1
 80051c6:	01db      	lsls	r3, r3, #7
 80051c8:	4413      	add	r3, r2
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	6811      	ldr	r1, [r2, #0]
 80051d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	3301      	adds	r3, #1
 80051d8:	01db      	lsls	r3, r3, #7
 80051da:	440b      	add	r3, r1
 80051dc:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	3301      	adds	r3, #1
 80051e6:	01db      	lsls	r3, r3, #7
 80051e8:	4413      	add	r3, r2
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	68f9      	ldr	r1, [r7, #12]
 80051f4:	6809      	ldr	r1, [r1, #0]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	3301      	adds	r3, #1
 80051fc:	01db      	lsls	r3, r3, #7
 80051fe:	440b      	add	r3, r1
 8005200:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800520a:	d109      	bne.n	8005220 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6819      	ldr	r1, [r3, #0]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	01db      	lsls	r3, r3, #7
 8005218:	440b      	add	r3, r1
 800521a:	339c      	adds	r3, #156	@ 0x9c
 800521c:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 800521e:	e02a      	b.n	8005276 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005228:	d125      	bne.n	8005276 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6819      	ldr	r1, [r3, #0]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	01db      	lsls	r3, r3, #7
 8005236:	440b      	add	r3, r1
 8005238:	33a8      	adds	r3, #168	@ 0xa8
 800523a:	601a      	str	r2, [r3, #0]
         break;
 800523c:	e01b      	b.n	8005276 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	3301      	adds	r3, #1
 8005246:	01db      	lsls	r3, r3, #7
 8005248:	4413      	add	r3, r2
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	6811      	ldr	r1, [r2, #0]
 8005250:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	3301      	adds	r3, #1
 8005258:	01db      	lsls	r3, r3, #7
 800525a:	440b      	add	r3, r1
 800525c:	601a      	str	r2, [r3, #0]
         break;
 800525e:	e00a      	b.n	8005276 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2207      	movs	r2, #7
 8005264:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

      break;
 8005270:	e002      	b.n	8005278 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8005272:	bf00      	nop
 8005274:	e000      	b.n	8005278 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8005276:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b07      	cmp	r3, #7
 8005282:	d101      	bne.n	8005288 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e008      	b.n	800529a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop

080052a8 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d101      	bne.n	80052c6 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 80052c2:	2302      	movs	r3, #2
 80052c4:	e01d      	b.n	8005302 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e016      	b.n	8005302 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	68b9      	ldr	r1, [r7, #8]
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 fa22 	bl	8005734 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800530a:	b480      	push	{r7}
 800530c:	b085      	sub	sp, #20
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0307 	bic.w	r3, r3, #7
 8005322:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f023 0318 	bic.w	r3, r3, #24
 8005334:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4313      	orrs	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	6812      	ldr	r2, [r2, #0]
 8005350:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	6852      	ldr	r2, [r2, #4]
 800535a:	619a      	str	r2, [r3, #24]
}
 800535c:	bf00      	nop
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	3301      	adds	r3, #1
 800537c:	01db      	lsls	r3, r3, #7
 800537e:	4413      	add	r3, r2
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f023 0307 	bic.w	r3, r3, #7
 800538a:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	4313      	orrs	r3, r2
 8005394:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f023 0318 	bic.w	r3, r3, #24
 800539c:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	3301      	adds	r3, #1
 80053b0:	01db      	lsls	r3, r3, #7
 80053b2:	4413      	add	r3, r2
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6819      	ldr	r1, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	01db      	lsls	r3, r3, #7
 80053c4:	440b      	add	r3, r1
 80053c6:	3394      	adds	r3, #148	@ 0x94
 80053c8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6819      	ldr	r1, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	01db      	lsls	r3, r3, #7
 80053d6:	440b      	add	r3, r1
 80053d8:	3398      	adds	r3, #152	@ 0x98
 80053da:	601a      	str	r2, [r3, #0]
}
 80053dc:	bf00      	nop
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8005402:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0320 	bic.w	r3, r3, #32
 800540a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800541c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800542e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005440:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	4313      	orrs	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8005452:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005464:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005478:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4313      	orrs	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800548a:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	4313      	orrs	r3, r2
 8005494:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 80054a8:	bf00      	nop
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b08b      	sub	sp, #44	@ 0x2c
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	3301      	adds	r3, #1
 80054c8:	01db      	lsls	r3, r3, #7
 80054ca:	4413      	add	r3, r2
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	6811      	ldr	r1, [r2, #0]
 80054d2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	3301      	adds	r3, #1
 80054da:	01db      	lsls	r3, r3, #7
 80054dc:	440b      	add	r3, r1
 80054de:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	3301      	adds	r3, #1
 80054e8:	01db      	lsls	r3, r3, #7
 80054ea:	4413      	add	r3, r2
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	01db      	lsls	r3, r3, #7
 80054f8:	4413      	add	r3, r2
 80054fa:	33e8      	adds	r3, #232	@ 0xe8
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	01db      	lsls	r3, r3, #7
 8005508:	4413      	add	r3, r2
 800550a:	33e4      	adds	r3, #228	@ 0xe4
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8005518:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800551a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551c:	f023 0320 	bic.w	r3, r3, #32
 8005520:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005528:	4313      	orrs	r3, r2
 800552a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 800552c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005532:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800553a:	4313      	orrs	r3, r2
 800553c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 800553e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005540:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005544:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800554c:	4313      	orrs	r3, r2
 800554e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8005550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005552:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005556:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800555e:	4313      	orrs	r3, r2
 8005560:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8005562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005564:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8005568:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005570:	4313      	orrs	r3, r2
 8005572:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8005574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005576:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800557a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005582:	4313      	orrs	r3, r2
 8005584:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8005586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005588:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800558c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005592:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005596:	d103      	bne.n	80055a0 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8005598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800559e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80055a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055a6:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ae:	4313      	orrs	r3, r2
 80055b0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80055b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055b8:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c0:	4313      	orrs	r3, r2
 80055c2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80055c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c6:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 80055ca:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055d2:	4313      	orrs	r3, r2
 80055d4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	f023 031f 	bic.w	r3, r3, #31
 80055dc:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e2:	f003 031f 	and.w	r3, r3, #31
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80055f2:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005602:	2b00      	cmp	r3, #0
 8005604:	d108      	bne.n	8005618 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800560c:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005612:	6a3a      	ldr	r2, [r7, #32]
 8005614:	4313      	orrs	r3, r2
 8005616:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561c:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8005620:	d004      	beq.n	800562c <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005626:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 800562a:	d103      	bne.n	8005634 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005630:	2b40      	cmp	r3, #64	@ 0x40
 8005632:	d108      	bne.n	8005646 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 800563a:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005640:	6a3a      	ldr	r2, [r7, #32]
 8005642:	4313      	orrs	r3, r2
 8005644:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800564a:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b04      	cmp	r3, #4
 8005650:	d843      	bhi.n	80056da <HRTIM_TimingUnitWaveform_Config+0x226>
 8005652:	a201      	add	r2, pc, #4	@ (adr r2, 8005658 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8005654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005658:	0800566d 	.word	0x0800566d
 800565c:	08005683 	.word	0x08005683
 8005660:	08005699 	.word	0x08005699
 8005664:	080056af 	.word	0x080056af
 8005668:	080056c5 	.word	0x080056c5
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005672:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	4313      	orrs	r3, r2
 800567e:	61fb      	str	r3, [r7, #28]
      break;
 8005680:	e02c      	b.n	80056dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005688:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	69fa      	ldr	r2, [r7, #28]
 8005692:	4313      	orrs	r3, r2
 8005694:	61fb      	str	r3, [r7, #28]
      break;
 8005696:	e021      	b.n	80056dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800569e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	69fa      	ldr	r2, [r7, #28]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	61fb      	str	r3, [r7, #28]
      break;
 80056ac:	e016      	b.n	80056dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80056b4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	69fa      	ldr	r2, [r7, #28]
 80056be:	4313      	orrs	r3, r2
 80056c0:	61fb      	str	r3, [r7, #28]
      break;
 80056c2:	e00b      	b.n	80056dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80056ca:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d0:	015b      	lsls	r3, r3, #5
 80056d2:	69fa      	ldr	r2, [r7, #28]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	61fb      	str	r3, [r7, #28]
      break;
 80056d8:	e000      	b.n	80056dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 80056da:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	3301      	adds	r3, #1
 80056e4:	01db      	lsls	r3, r3, #7
 80056e6:	4413      	add	r3, r2
 80056e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ea:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	01db      	lsls	r3, r3, #7
 80056f4:	4413      	add	r3, r2
 80056f6:	33e8      	adds	r3, #232	@ 0xe8
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	01db      	lsls	r3, r3, #7
 8005704:	4413      	add	r3, r2
 8005706:	33e4      	adds	r3, #228	@ 0xe4
 8005708:	6a3a      	ldr	r2, [r7, #32]
 800570a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	01db      	lsls	r3, r3, #7
 8005714:	4413      	add	r3, r2
 8005716:	33d4      	adds	r3, #212	@ 0xd4
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	69fa      	ldr	r2, [r7, #28]
 8005722:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8005726:	bf00      	nop
 8005728:	372c      	adds	r7, #44	@ 0x2c
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop

08005734 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8005734:	b480      	push	{r7}
 8005736:	b089      	sub	sp, #36	@ 0x24
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
 8005740:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	01db      	lsls	r3, r3, #7
 800574e:	4413      	add	r3, r2
 8005750:	33e4      	adds	r3, #228	@ 0xe4
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	01db      	lsls	r3, r3, #7
 800575e:	4413      	add	r3, r2
 8005760:	33b8      	adds	r3, #184	@ 0xb8
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	617b      	str	r3, [r7, #20]

  switch (Output)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800576c:	d04d      	beq.n	800580a <HRTIM_OutputConfig+0xd6>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005774:	d85e      	bhi.n	8005834 <HRTIM_OutputConfig+0x100>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800577c:	d032      	beq.n	80057e4 <HRTIM_OutputConfig+0xb0>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005784:	d856      	bhi.n	8005834 <HRTIM_OutputConfig+0x100>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b80      	cmp	r3, #128	@ 0x80
 800578a:	d03e      	beq.n	800580a <HRTIM_OutputConfig+0xd6>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b80      	cmp	r3, #128	@ 0x80
 8005790:	d850      	bhi.n	8005834 <HRTIM_OutputConfig+0x100>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b40      	cmp	r3, #64	@ 0x40
 8005796:	d025      	beq.n	80057e4 <HRTIM_OutputConfig+0xb0>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b40      	cmp	r3, #64	@ 0x40
 800579c:	d84a      	bhi.n	8005834 <HRTIM_OutputConfig+0x100>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d01f      	beq.n	80057e4 <HRTIM_OutputConfig+0xb0>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d044      	beq.n	8005834 <HRTIM_OutputConfig+0x100>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b20      	cmp	r3, #32
 80057ae:	d841      	bhi.n	8005834 <HRTIM_OutputConfig+0x100>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d33e      	bcc.n	8005834 <HRTIM_OutputConfig+0x100>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3b02      	subs	r3, #2
 80057ba:	2201      	movs	r2, #1
 80057bc:	409a      	lsls	r2, r3
 80057be:	4b48      	ldr	r3, [pc, #288]	@ (80058e0 <HRTIM_OutputConfig+0x1ac>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	bf14      	ite	ne
 80057c6:	2301      	movne	r3, #1
 80057c8:	2300      	moveq	r3, #0
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d11c      	bne.n	800580a <HRTIM_OutputConfig+0xd6>
 80057d0:	f244 0304 	movw	r3, #16388	@ 0x4004
 80057d4:	4013      	ands	r3, r2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	bf14      	ite	ne
 80057da:	2301      	movne	r3, #1
 80057dc:	2300      	moveq	r3, #0
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d027      	beq.n	8005834 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6819      	ldr	r1, [r3, #0]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	01db      	lsls	r3, r3, #7
 80057f0:	440b      	add	r3, r1
 80057f2:	33bc      	adds	r3, #188	@ 0xbc
 80057f4:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6819      	ldr	r1, [r3, #0]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	01db      	lsls	r3, r3, #7
 8005802:	440b      	add	r3, r1
 8005804:	33c0      	adds	r3, #192	@ 0xc0
 8005806:	601a      	str	r2, [r3, #0]
      break;
 8005808:	e015      	b.n	8005836 <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6819      	ldr	r1, [r3, #0]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	01db      	lsls	r3, r3, #7
 8005816:	440b      	add	r3, r1
 8005818:	33c4      	adds	r3, #196	@ 0xc4
 800581a:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6819      	ldr	r1, [r3, #0]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	01db      	lsls	r3, r3, #7
 8005828:	440b      	add	r3, r1
 800582a:	33c8      	adds	r3, #200	@ 0xc8
 800582c:	601a      	str	r2, [r3, #0]
      shift = 16U;
 800582e:	2310      	movs	r3, #16
 8005830:	61bb      	str	r3, [r7, #24]
      break;
 8005832:	e000      	b.n	8005836 <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8005834:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8005836:	22fe      	movs	r2, #254	@ 0xfe
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 800583e:	43db      	mvns	r3, r3
 8005840:	69fa      	ldr	r2, [r7, #28]
 8005842:	4013      	ands	r3, r2
 8005844:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	fa02 f303 	lsl.w	r3, r2, r3
 8005850:	69fa      	ldr	r2, [r7, #28]
 8005852:	4313      	orrs	r3, r2
 8005854:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68da      	ldr	r2, [r3, #12]
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	69fa      	ldr	r2, [r7, #28]
 8005862:	4313      	orrs	r3, r2
 8005864:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	691a      	ldr	r2, [r3, #16]
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	69fa      	ldr	r2, [r7, #28]
 8005872:	4313      	orrs	r3, r2
 8005874:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	695a      	ldr	r2, [r3, #20]
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	fa02 f303 	lsl.w	r3, r2, r3
 8005880:	69fa      	ldr	r2, [r7, #28]
 8005882:	4313      	orrs	r3, r2
 8005884:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	699a      	ldr	r2, [r3, #24]
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	fa02 f303 	lsl.w	r3, r2, r3
 8005890:	69fa      	ldr	r2, [r7, #28]
 8005892:	4313      	orrs	r3, r2
 8005894:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	2b08      	cmp	r3, #8
 800589c:	d111      	bne.n	80058c2 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10c      	bne.n	80058c2 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d107      	bne.n	80058c2 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	69da      	ldr	r2, [r3, #28]
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	fa02 f303 	lsl.w	r3, r2, r3
 80058bc:	69fa      	ldr	r2, [r7, #28]
 80058be:	4313      	orrs	r3, r2
 80058c0:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	01db      	lsls	r3, r3, #7
 80058ca:	4413      	add	r3, r2
 80058cc:	33e4      	adds	r3, #228	@ 0xe4
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	601a      	str	r2, [r3, #0]
}
 80058d2:	bf00      	nop
 80058d4:	3724      	adds	r7, #36	@ 0x24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	40000041 	.word	0x40000041

080058e4 <HRTIM_EventConfig>:
  * @retval None
  */
static void HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                              uint32_t Event,
                              const HRTIM_EventCfgTypeDef *pEventCfg)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b089      	sub	sp, #36	@ 0x24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_eecr1;
  uint32_t hrtim_eecr2;
  uint32_t hrtim_eecr3;

  /* Configure external event channel */
  hrtim_eecr1 = hhrtim->Instance->sCommonRegs.EECR1;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 80058f8:	61fb      	str	r3, [r7, #28]
  hrtim_eecr2 = hhrtim->Instance->sCommonRegs.EECR2;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 8005902:	61bb      	str	r3, [r7, #24]
  hrtim_eecr3 = hhrtim->Instance->sCommonRegs.EECR3;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 800590c:	617b      	str	r3, [r7, #20]

  switch (Event)
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2b0a      	cmp	r3, #10
 8005912:	f200 8208 	bhi.w	8005d26 <HRTIM_EventConfig+0x442>
 8005916:	a201      	add	r2, pc, #4	@ (adr r2, 800591c <HRTIM_EventConfig+0x38>)
 8005918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591c:	08005949 	.word	0x08005949
 8005920:	08005969 	.word	0x08005969
 8005924:	080059bf 	.word	0x080059bf
 8005928:	08005a1b 	.word	0x08005a1b
 800592c:	08005a79 	.word	0x08005a79
 8005930:	08005ad7 	.word	0x08005ad7
 8005934:	08005b35 	.word	0x08005b35
 8005938:	08005b93 	.word	0x08005b93
 800593c:	08005bf7 	.word	0x08005bf7
 8005940:	08005c5b 	.word	0x08005c5b
 8005944:	08005cc1 	.word	0x08005cc1
  {
  case HRTIM_EVENT_NONE:
    {
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR1 = 0U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2200      	movs	r2, #0
 800594e:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      hhrtim->Instance->sCommonRegs.EECR2 = 0U;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2200      	movs	r2, #0
 8005958:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = 0U;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2200      	movs	r2, #0
 8005962:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005966:	e1df      	b.n	8005d28 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_1:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE1SRC | HRTIM_EECR1_EE1POL | HRTIM_EECR1_EE1SNS | HRTIM_EECR1_EE1FAST);
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800596e:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Source & HRTIM_EECR1_EE1SRC);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0303 	and.w	r3, r3, #3
 8005978:	69fa      	ldr	r2, [r7, #28]
 800597a:	4313      	orrs	r3, r2
 800597c:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Polarity & HRTIM_EECR1_EE1POL);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f003 0304 	and.w	r3, r3, #4
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	4313      	orrs	r3, r2
 800598a:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f003 0318 	and.w	r3, r3, #24
 8005994:	69fa      	ldr	r2, [r7, #28]
 8005996:	4313      	orrs	r3, r2
 8005998:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE1FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE1FAST bit) */
      hrtim_eecr1 |= (pEventCfg->FastMode  & HRTIM_EECR1_EE1FAST);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	f003 0320 	and.w	r3, r3, #32
 80059ac:	69fa      	ldr	r2, [r7, #28]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69fa      	ldr	r2, [r7, #28]
 80059b8:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 80059bc:	e1b4      	b.n	8005d28 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_2:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE2SRC | HRTIM_EECR1_EE2POL | HRTIM_EECR1_EE2SNS | HRTIM_EECR1_EE2FAST);
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 80059c4:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 6U) & HRTIM_EECR1_EE2SRC);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	019b      	lsls	r3, r3, #6
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	69fa      	ldr	r2, [r7, #28]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR1_EE2POL);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	019b      	lsls	r3, r3, #6
 80059da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059de:	69fa      	ldr	r2, [r7, #28]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	019b      	lsls	r3, r3, #6
 80059ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE2FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69fa      	ldr	r2, [r7, #28]
 80059fa:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE2FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	019b      	lsls	r3, r3, #6
 8005a04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69fa      	ldr	r2, [r7, #28]
 8005a14:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8005a18:	e186      	b.n	8005d28 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_3:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE3SRC | HRTIM_EECR1_EE3POL | HRTIM_EECR1_EE3SNS | HRTIM_EECR1_EE3FAST);
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005a20:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 12U) & HRTIM_EECR1_EE3SRC);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	031b      	lsls	r3, r3, #12
 8005a28:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR1_EE3POL);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	031b      	lsls	r3, r3, #12
 8005a38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a3c:	69fa      	ldr	r2, [r7, #28]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	031b      	lsls	r3, r3, #12
 8005a48:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE3FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69fa      	ldr	r2, [r7, #28]
 8005a58:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE3FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	031b      	lsls	r3, r3, #12
 8005a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a66:	69fa      	ldr	r2, [r7, #28]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	69fa      	ldr	r2, [r7, #28]
 8005a72:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8005a76:	e157      	b.n	8005d28 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_4:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE4SRC | HRTIM_EECR1_EE4POL | HRTIM_EECR1_EE4SNS | HRTIM_EECR1_EE4FAST);
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	f423 037c 	bic.w	r3, r3, #16515072	@ 0xfc0000
 8005a7e:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 18U) & HRTIM_EECR1_EE4SRC);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	049b      	lsls	r3, r3, #18
 8005a86:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005a8a:	69fa      	ldr	r2, [r7, #28]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR1_EE4POL);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	049b      	lsls	r3, r3, #18
 8005a96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	049b      	lsls	r3, r3, #18
 8005aa6:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 8005aaa:	69fa      	ldr	r2, [r7, #28]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE4FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	69fa      	ldr	r2, [r7, #28]
 8005ab6:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE4FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	049b      	lsls	r3, r3, #18
 8005ac0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ac4:	69fa      	ldr	r2, [r7, #28]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69fa      	ldr	r2, [r7, #28]
 8005ad0:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8005ad4:	e128      	b.n	8005d28 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_5:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE5SRC | HRTIM_EECR1_EE5POL | HRTIM_EECR1_EE5SNS | HRTIM_EECR1_EE5FAST);
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8005adc:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 24U) & HRTIM_EECR1_EE5SRC);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	061b      	lsls	r3, r3, #24
 8005ae4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005ae8:	69fa      	ldr	r2, [r7, #28]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR1_EE5POL);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	061b      	lsls	r3, r3, #24
 8005af4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005af8:	69fa      	ldr	r2, [r7, #28]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	061b      	lsls	r3, r3, #24
 8005b04:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8005b08:	69fa      	ldr	r2, [r7, #28]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE5FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE5FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	061b      	lsls	r3, r3, #24
 8005b1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b22:	69fa      	ldr	r2, [r7, #28]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	69fa      	ldr	r2, [r7, #28]
 8005b2e:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8005b32:	e0f9      	b.n	8005d28 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_6:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE6SRC | HRTIM_EECR2_EE6POL | HRTIM_EECR2_EE6SNS);
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	f023 031f 	bic.w	r3, r3, #31
 8005b3a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Source & HRTIM_EECR2_EE6SRC);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0303 	and.w	r3, r3, #3
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Polarity & HRTIM_EECR2_EE6POL);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f003 0304 	and.w	r3, r3, #4
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f003 0318 	and.w	r3, r3, #24
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE6F);
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f023 030f 	bic.w	r3, r3, #15
 8005b6c:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005b90:	e0ca      	b.n	8005d28 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_7:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE7SRC | HRTIM_EECR2_EE7POL | HRTIM_EECR2_EE7SNS);
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 8005b98:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	019b      	lsls	r3, r3, #6
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR2_EE7POL);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	019b      	lsls	r3, r3, #6
 8005bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	019b      	lsls	r3, r3, #6
 8005bbe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE7F);
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f423 7370 	bic.w	r3, r3, #960	@ 0x3c0
 8005bce:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	019b      	lsls	r3, r3, #6
 8005bd6:	f403 7370 	and.w	r3, r3, #960	@ 0x3c0
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005bf4:	e098      	b.n	8005d28 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_8:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE8SRC | HRTIM_EECR2_EE8POL | HRTIM_EECR2_EE8SNS);
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	f423 33f8 	bic.w	r3, r3, #126976	@ 0x1f000
 8005bfc:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	031b      	lsls	r3, r3, #12
 8005c04:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR2_EE8POL);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	031b      	lsls	r3, r3, #12
 8005c14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	031b      	lsls	r3, r3, #12
 8005c24:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE8F);
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c34:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	031b      	lsls	r3, r3, #12
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005c58:	e066      	b.n	8005d28 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_9:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE9SRC | HRTIM_EECR2_EE9POL | HRTIM_EECR2_EE9SNS);
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	f423 03f8 	bic.w	r3, r3, #8126464	@ 0x7c0000
 8005c60:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	049b      	lsls	r3, r3, #18
 8005c68:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR2_EE9POL);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	049b      	lsls	r3, r3, #18
 8005c78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	049b      	lsls	r3, r3, #18
 8005c88:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE9F);
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8005c98:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	049b      	lsls	r3, r3, #18
 8005ca0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005cbe:	e033      	b.n	8005d28 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_10:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE10SRC | HRTIM_EECR2_EE10POL | HRTIM_EECR2_EE10SNS);
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8005cc6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	061b      	lsls	r3, r3, #24
 8005cce:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	061b      	lsls	r3, r3, #24
 8005cde:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	061b      	lsls	r3, r3, #24
 8005cee:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE10F);
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8005cfe:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	061b      	lsls	r3, r3, #24
 8005d06:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8005d24:	e000      	b.n	8005d28 <HRTIM_EventConfig+0x444>
    }

  default:
    break;
 8005d26:	bf00      	nop
  }
}
 8005d28:	bf00      	nop
 8005d2a:	3724      	adds	r7, #36	@ 0x24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b05      	cmp	r3, #5
 8005d42:	d851      	bhi.n	8005de8 <HRTIM_ForceRegistersUpdate+0xb4>
 8005d44:	a201      	add	r2, pc, #4	@ (adr r2, 8005d4c <HRTIM_ForceRegistersUpdate+0x18>)
 8005d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4a:	bf00      	nop
 8005d4c:	08005d7b 	.word	0x08005d7b
 8005d50:	08005d91 	.word	0x08005d91
 8005d54:	08005da7 	.word	0x08005da7
 8005d58:	08005dbd 	.word	0x08005dbd
 8005d5c:	08005dd3 	.word	0x08005dd3
 8005d60:	08005d65 	.word	0x08005d65
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f042 0201 	orr.w	r2, r2, #1
 8005d74:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005d78:	e037      	b.n	8005dea <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0202 	orr.w	r2, r2, #2
 8005d8a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005d8e:	e02c      	b.n	8005dea <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f042 0204 	orr.w	r2, r2, #4
 8005da0:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005da4:	e021      	b.n	8005dea <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0208 	orr.w	r2, r2, #8
 8005db6:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005dba:	e016      	b.n	8005dea <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f042 0210 	orr.w	r2, r2, #16
 8005dcc:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005dd0:	e00b      	b.n	8005dea <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 0220 	orr.w	r2, r2, #32
 8005de2:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005de6:	e000      	b.n	8005dea <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8005de8:	bf00      	nop
  }
}
 8005dea:	bf00      	nop
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop

08005df8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e097      	b.n	8005f3a <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d106      	bne.n	8005e2a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7fc ff8d 	bl	8002d44 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2202      	movs	r2, #2
 8005e2e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d004      	beq.n	8005e4c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e4a:	d103      	bne.n	8005e54 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 031e 	bic.w	r3, r3, #30
 8005e52:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d003      	beq.n	8005e68 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4b38      	ldr	r3, [pc, #224]	@ (8005f44 <HAL_LPTIM_Init+0x14c>)
 8005e64:	4013      	ands	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	4b37      	ldr	r3, [pc, #220]	@ (8005f48 <HAL_LPTIM_Init+0x150>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005e78:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8005e7e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8005e84:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8005e8a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d107      	bne.n	8005eaa <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d004      	beq.n	8005ebc <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005eba:	d107      	bne.n	8005ecc <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d00a      	beq.n	8005eee <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005ee0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8005ee6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a14      	ldr	r2, [pc, #80]	@ (8005f4c <HAL_LPTIM_Init+0x154>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d004      	beq.n	8005f0a <HAL_LPTIM_Init+0x112>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a12      	ldr	r2, [pc, #72]	@ (8005f50 <HAL_LPTIM_Init+0x158>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d108      	bne.n	8005f1c <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	625a      	str	r2, [r3, #36]	@ 0x24
 8005f1a:	e009      	b.n	8005f30 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a0c      	ldr	r2, [pc, #48]	@ (8005f54 <HAL_LPTIM_Init+0x15c>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d104      	bne.n	8005f30 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005f2e:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	ffff1f3f 	.word	0xffff1f3f
 8005f48:	ff19f1fe 	.word	0xff19f1fe
 8005f4c:	40002400 	.word	0x40002400
 8005f50:	58002400 	.word	0x58002400
 8005f54:	58002800 	.word	0x58002800

08005f58 <HAL_LPTIM_PWM_Start>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Reset WAVE bit to set PWM mode */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8005f7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691a      	ldr	r2, [r3, #16]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0201 	orr.w	r2, r2, #1
 8005f8a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2210      	movs	r2, #16
 8005f92:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005f9c:	2110      	movs	r1, #16
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 f97e 	bl	80062a0 <LPTIM_WaitForFlag>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b03      	cmp	r3, #3
 8005fa8:	d101      	bne.n	8005fae <HAL_LPTIM_PWM_Start+0x56>
  {
    return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e01d      	b.n	8005fea <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2208      	movs	r2, #8
 8005fb4:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8005fbe:	2108      	movs	r1, #8
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 f96d 	bl	80062a0 <LPTIM_WaitForFlag>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d101      	bne.n	8005fd0 <HAL_LPTIM_PWM_Start+0x78>
  {
    return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e00c      	b.n	8005fea <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	691a      	ldr	r2, [r3, #16]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0204 	orr.w	r2, r2, #4
 8005fde:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b082      	sub	sp, #8
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2202      	movs	r2, #2
 8006000:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d00c      	beq.n	8006026 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006010:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006014:	d107      	bne.n	8006026 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 8006024:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	691a      	ldr	r2, [r3, #16]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f042 0201 	orr.w	r2, r2, #1
 8006034:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2210      	movs	r2, #16
 800603c:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8006046:	2110      	movs	r1, #16
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f929 	bl	80062a0 <LPTIM_WaitForFlag>
 800604e:	4603      	mov	r3, r0
 8006050:	2b03      	cmp	r3, #3
 8006052:	d101      	bne.n	8006058 <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e02f      	b.n	80060b8 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f951 	bl	8006300 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f90f 	bl	8006282 <HAL_LPTIM_GetState>
 8006064:	4603      	mov	r3, r0
 8006066:	2b03      	cmp	r3, #3
 8006068:	d101      	bne.n	800606e <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e024      	b.n	80060b8 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f042 0210 	orr.w	r2, r2, #16
 800607c:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f042 0202 	orr.w	r2, r2, #2
 800608c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	691a      	ldr	r2, [r3, #16]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f042 0201 	orr.w	r2, r2, #1
 800609c:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	691a      	ldr	r2, [r3, #16]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f042 0204 	orr.w	r2, r2, #4
 80060ac:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d10d      	bne.n	80060f2 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d106      	bne.n	80060f2 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2201      	movs	r2, #1
 80060ea:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f882 	bl	80061f6 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d10d      	bne.n	800611c <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b02      	cmp	r3, #2
 800610c:	d106      	bne.n	800611c <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2202      	movs	r2, #2
 8006114:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f877 	bl	800620a <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0304 	and.w	r3, r3, #4
 8006126:	2b04      	cmp	r3, #4
 8006128:	d10d      	bne.n	8006146 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f003 0304 	and.w	r3, r3, #4
 8006134:	2b04      	cmp	r3, #4
 8006136:	d106      	bne.n	8006146 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2204      	movs	r2, #4
 800613e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f86c 	bl	800621e <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0308 	and.w	r3, r3, #8
 8006150:	2b08      	cmp	r3, #8
 8006152:	d10d      	bne.n	8006170 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 0308 	and.w	r3, r3, #8
 800615e:	2b08      	cmp	r3, #8
 8006160:	d106      	bne.n	8006170 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2208      	movs	r2, #8
 8006168:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f861 	bl	8006232 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0310 	and.w	r3, r3, #16
 800617a:	2b10      	cmp	r3, #16
 800617c:	d10d      	bne.n	800619a <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f003 0310 	and.w	r3, r3, #16
 8006188:	2b10      	cmp	r3, #16
 800618a:	d106      	bne.n	800619a <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2210      	movs	r2, #16
 8006192:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 f856 	bl	8006246 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0320 	and.w	r3, r3, #32
 80061a4:	2b20      	cmp	r3, #32
 80061a6:	d10d      	bne.n	80061c4 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 0320 	and.w	r3, r3, #32
 80061b2:	2b20      	cmp	r3, #32
 80061b4:	d106      	bne.n	80061c4 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2220      	movs	r2, #32
 80061bc:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f84b 	bl	800625a <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ce:	2b40      	cmp	r3, #64	@ 0x40
 80061d0:	d10d      	bne.n	80061ee <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061dc:	2b40      	cmp	r3, #64	@ 0x40
 80061de:	d106      	bne.n	80061ee <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2240      	movs	r2, #64	@ 0x40
 80061e6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f840 	bl	800626e <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80061ee:	bf00      	nop
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b083      	sub	sp, #12
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80061fe:	bf00      	nop
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8006226:	bf00      	nop
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006290:	b2db      	uxtb	r3, r3
}
 8006292:	4618      	mov	r0, r3
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
	...

080062a0 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80062ae:	4b12      	ldr	r3, [pc, #72]	@ (80062f8 <LPTIM_WaitForFlag+0x58>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a12      	ldr	r2, [pc, #72]	@ (80062fc <LPTIM_WaitForFlag+0x5c>)
 80062b4:	fba2 2303 	umull	r2, r3, r2, r3
 80062b8:	0b9b      	lsrs	r3, r3, #14
 80062ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80062be:	fb02 f303 	mul.w	r3, r2, r3
 80062c2:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	3b01      	subs	r3, #1
 80062c8:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	4013      	ands	r3, r2
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d002      	beq.n	80062ea <LPTIM_WaitForFlag+0x4a>
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1ec      	bne.n	80062c4 <LPTIM_WaitForFlag+0x24>

  return result;
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3714      	adds	r7, #20
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	24000010 	.word	0x24000010
 80062fc:	d1b71759 	.word	0xd1b71759

08006300 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b08c      	sub	sp, #48	@ 0x30
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8006308:	2300      	movs	r3, #0
 800630a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800630c:	f3ef 8310 	mrs	r3, PRIMASK
 8006310:	60fb      	str	r3, [r7, #12]
  return(result);
 8006312:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8006314:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006316:	2301      	movs	r3, #1
 8006318:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f383 8810 	msr	PRIMASK, r3
}
 8006320:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a81      	ldr	r2, [pc, #516]	@ (800652c <LPTIM_Disable+0x22c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d02d      	beq.n	8006388 <LPTIM_Disable+0x88>
 800632c:	4a7f      	ldr	r2, [pc, #508]	@ (800652c <LPTIM_Disable+0x22c>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d830      	bhi.n	8006394 <LPTIM_Disable+0x94>
 8006332:	4a7f      	ldr	r2, [pc, #508]	@ (8006530 <LPTIM_Disable+0x230>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d021      	beq.n	800637c <LPTIM_Disable+0x7c>
 8006338:	4a7d      	ldr	r2, [pc, #500]	@ (8006530 <LPTIM_Disable+0x230>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d82a      	bhi.n	8006394 <LPTIM_Disable+0x94>
 800633e:	4a7d      	ldr	r2, [pc, #500]	@ (8006534 <LPTIM_Disable+0x234>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d015      	beq.n	8006370 <LPTIM_Disable+0x70>
 8006344:	4a7b      	ldr	r2, [pc, #492]	@ (8006534 <LPTIM_Disable+0x234>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d824      	bhi.n	8006394 <LPTIM_Disable+0x94>
 800634a:	4a7b      	ldr	r2, [pc, #492]	@ (8006538 <LPTIM_Disable+0x238>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d003      	beq.n	8006358 <LPTIM_Disable+0x58>
 8006350:	4a7a      	ldr	r2, [pc, #488]	@ (800653c <LPTIM_Disable+0x23c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d006      	beq.n	8006364 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8006356:	e01d      	b.n	8006394 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006358:	4b79      	ldr	r3, [pc, #484]	@ (8006540 <LPTIM_Disable+0x240>)
 800635a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800635c:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006360:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006362:	e018      	b.n	8006396 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006364:	4b76      	ldr	r3, [pc, #472]	@ (8006540 <LPTIM_Disable+0x240>)
 8006366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006368:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800636c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800636e:	e012      	b.n	8006396 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8006370:	4b73      	ldr	r3, [pc, #460]	@ (8006540 <LPTIM_Disable+0x240>)
 8006372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006374:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006378:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800637a:	e00c      	b.n	8006396 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 800637c:	4b70      	ldr	r3, [pc, #448]	@ (8006540 <LPTIM_Disable+0x240>)
 800637e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006380:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006384:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006386:	e006      	b.n	8006396 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8006388:	4b6d      	ldr	r3, [pc, #436]	@ (8006540 <LPTIM_Disable+0x240>)
 800638a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800638c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006390:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006392:	e000      	b.n	8006396 <LPTIM_Disable+0x96>
      break;
 8006394:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063bc:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a5a      	ldr	r2, [pc, #360]	@ (800652c <LPTIM_Disable+0x22c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d059      	beq.n	800647c <LPTIM_Disable+0x17c>
 80063c8:	4a58      	ldr	r2, [pc, #352]	@ (800652c <LPTIM_Disable+0x22c>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d867      	bhi.n	800649e <LPTIM_Disable+0x19e>
 80063ce:	4a58      	ldr	r2, [pc, #352]	@ (8006530 <LPTIM_Disable+0x230>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d042      	beq.n	800645a <LPTIM_Disable+0x15a>
 80063d4:	4a56      	ldr	r2, [pc, #344]	@ (8006530 <LPTIM_Disable+0x230>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d861      	bhi.n	800649e <LPTIM_Disable+0x19e>
 80063da:	4a56      	ldr	r2, [pc, #344]	@ (8006534 <LPTIM_Disable+0x234>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d02b      	beq.n	8006438 <LPTIM_Disable+0x138>
 80063e0:	4a54      	ldr	r2, [pc, #336]	@ (8006534 <LPTIM_Disable+0x234>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d85b      	bhi.n	800649e <LPTIM_Disable+0x19e>
 80063e6:	4a54      	ldr	r2, [pc, #336]	@ (8006538 <LPTIM_Disable+0x238>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d003      	beq.n	80063f4 <LPTIM_Disable+0xf4>
 80063ec:	4a53      	ldr	r2, [pc, #332]	@ (800653c <LPTIM_Disable+0x23c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d011      	beq.n	8006416 <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 80063f2:	e054      	b.n	800649e <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80063f4:	4b52      	ldr	r3, [pc, #328]	@ (8006540 <LPTIM_Disable+0x240>)
 80063f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063fa:	4a51      	ldr	r2, [pc, #324]	@ (8006540 <LPTIM_Disable+0x240>)
 80063fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006400:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8006404:	4b4e      	ldr	r3, [pc, #312]	@ (8006540 <LPTIM_Disable+0x240>)
 8006406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800640a:	4a4d      	ldr	r2, [pc, #308]	@ (8006540 <LPTIM_Disable+0x240>)
 800640c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006410:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      break;
 8006414:	e044      	b.n	80064a0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8006416:	4b4a      	ldr	r3, [pc, #296]	@ (8006540 <LPTIM_Disable+0x240>)
 8006418:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800641c:	4a48      	ldr	r2, [pc, #288]	@ (8006540 <LPTIM_Disable+0x240>)
 800641e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006422:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8006426:	4b46      	ldr	r3, [pc, #280]	@ (8006540 <LPTIM_Disable+0x240>)
 8006428:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800642c:	4a44      	ldr	r2, [pc, #272]	@ (8006540 <LPTIM_Disable+0x240>)
 800642e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006432:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8006436:	e033      	b.n	80064a0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8006438:	4b41      	ldr	r3, [pc, #260]	@ (8006540 <LPTIM_Disable+0x240>)
 800643a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800643e:	4a40      	ldr	r2, [pc, #256]	@ (8006540 <LPTIM_Disable+0x240>)
 8006440:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006444:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8006448:	4b3d      	ldr	r3, [pc, #244]	@ (8006540 <LPTIM_Disable+0x240>)
 800644a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800644e:	4a3c      	ldr	r2, [pc, #240]	@ (8006540 <LPTIM_Disable+0x240>)
 8006450:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006454:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8006458:	e022      	b.n	80064a0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 800645a:	4b39      	ldr	r3, [pc, #228]	@ (8006540 <LPTIM_Disable+0x240>)
 800645c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006460:	4a37      	ldr	r2, [pc, #220]	@ (8006540 <LPTIM_Disable+0x240>)
 8006462:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006466:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 800646a:	4b35      	ldr	r3, [pc, #212]	@ (8006540 <LPTIM_Disable+0x240>)
 800646c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006470:	4a33      	ldr	r2, [pc, #204]	@ (8006540 <LPTIM_Disable+0x240>)
 8006472:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006476:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 800647a:	e011      	b.n	80064a0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 800647c:	4b30      	ldr	r3, [pc, #192]	@ (8006540 <LPTIM_Disable+0x240>)
 800647e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006482:	4a2f      	ldr	r2, [pc, #188]	@ (8006540 <LPTIM_Disable+0x240>)
 8006484:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006488:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 800648c:	4b2c      	ldr	r3, [pc, #176]	@ (8006540 <LPTIM_Disable+0x240>)
 800648e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006492:	4a2b      	ldr	r2, [pc, #172]	@ (8006540 <LPTIM_Disable+0x240>)
 8006494:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006498:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 800649c:	e000      	b.n	80064a0 <LPTIM_Disable+0x1a0>
      break;
 800649e:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d103      	bne.n	80064ae <LPTIM_Disable+0x1ae>
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 80d1 	beq.w	8006650 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a1e      	ldr	r2, [pc, #120]	@ (800652c <LPTIM_Disable+0x22c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d031      	beq.n	800651c <LPTIM_Disable+0x21c>
 80064b8:	4a1c      	ldr	r2, [pc, #112]	@ (800652c <LPTIM_Disable+0x22c>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d842      	bhi.n	8006544 <LPTIM_Disable+0x244>
 80064be:	4a1c      	ldr	r2, [pc, #112]	@ (8006530 <LPTIM_Disable+0x230>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d024      	beq.n	800650e <LPTIM_Disable+0x20e>
 80064c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006530 <LPTIM_Disable+0x230>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d83c      	bhi.n	8006544 <LPTIM_Disable+0x244>
 80064ca:	4a1a      	ldr	r2, [pc, #104]	@ (8006534 <LPTIM_Disable+0x234>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d017      	beq.n	8006500 <LPTIM_Disable+0x200>
 80064d0:	4a18      	ldr	r2, [pc, #96]	@ (8006534 <LPTIM_Disable+0x234>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d836      	bhi.n	8006544 <LPTIM_Disable+0x244>
 80064d6:	4a18      	ldr	r2, [pc, #96]	@ (8006538 <LPTIM_Disable+0x238>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d003      	beq.n	80064e4 <LPTIM_Disable+0x1e4>
 80064dc:	4a17      	ldr	r2, [pc, #92]	@ (800653c <LPTIM_Disable+0x23c>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d007      	beq.n	80064f2 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 80064e2:	e02f      	b.n	8006544 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 80064e4:	4b16      	ldr	r3, [pc, #88]	@ (8006540 <LPTIM_Disable+0x240>)
 80064e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064e8:	4a15      	ldr	r2, [pc, #84]	@ (8006540 <LPTIM_Disable+0x240>)
 80064ea:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 80064ee:	6553      	str	r3, [r2, #84]	@ 0x54
        break;
 80064f0:	e029      	b.n	8006546 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 80064f2:	4b13      	ldr	r3, [pc, #76]	@ (8006540 <LPTIM_Disable+0x240>)
 80064f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064f6:	4a12      	ldr	r2, [pc, #72]	@ (8006540 <LPTIM_Disable+0x240>)
 80064f8:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80064fc:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 80064fe:	e022      	b.n	8006546 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8006500:	4b0f      	ldr	r3, [pc, #60]	@ (8006540 <LPTIM_Disable+0x240>)
 8006502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006504:	4a0e      	ldr	r2, [pc, #56]	@ (8006540 <LPTIM_Disable+0x240>)
 8006506:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800650a:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 800650c:	e01b      	b.n	8006546 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 800650e:	4b0c      	ldr	r3, [pc, #48]	@ (8006540 <LPTIM_Disable+0x240>)
 8006510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006512:	4a0b      	ldr	r2, [pc, #44]	@ (8006540 <LPTIM_Disable+0x240>)
 8006514:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8006518:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 800651a:	e014      	b.n	8006546 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 800651c:	4b08      	ldr	r3, [pc, #32]	@ (8006540 <LPTIM_Disable+0x240>)
 800651e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006520:	4a07      	ldr	r2, [pc, #28]	@ (8006540 <LPTIM_Disable+0x240>)
 8006522:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8006526:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8006528:	e00d      	b.n	8006546 <LPTIM_Disable+0x246>
 800652a:	bf00      	nop
 800652c:	58003000 	.word	0x58003000
 8006530:	58002c00 	.word	0x58002c00
 8006534:	58002800 	.word	0x58002800
 8006538:	40002400 	.word	0x40002400
 800653c:	58002400 	.word	0x58002400
 8006540:	58024400 	.word	0x58024400
        break;
 8006544:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d01a      	beq.n	8006582 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	691a      	ldr	r2, [r3, #16]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0201 	orr.w	r2, r2, #1
 800655a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	69fa      	ldr	r2, [r7, #28]
 8006562:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8006564:	2108      	movs	r1, #8
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7ff fe9a 	bl	80062a0 <LPTIM_WaitForFlag>
 800656c:	4603      	mov	r3, r0
 800656e:	2b03      	cmp	r3, #3
 8006570:	d103      	bne.n	800657a <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2203      	movs	r2, #3
 8006576:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2208      	movs	r2, #8
 8006580:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d01a      	beq.n	80065be <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	691a      	ldr	r2, [r3, #16]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f042 0201 	orr.w	r2, r2, #1
 8006596:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80065a0:	2110      	movs	r1, #16
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7ff fe7c 	bl	80062a0 <LPTIM_WaitForFlag>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	d103      	bne.n	80065b6 <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2203      	movs	r2, #3
 80065b2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2210      	movs	r2, #16
 80065bc:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a32      	ldr	r2, [pc, #200]	@ (800668c <LPTIM_Disable+0x38c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d039      	beq.n	800663c <LPTIM_Disable+0x33c>
 80065c8:	4a30      	ldr	r2, [pc, #192]	@ (800668c <LPTIM_Disable+0x38c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d83f      	bhi.n	800664e <LPTIM_Disable+0x34e>
 80065ce:	4a30      	ldr	r2, [pc, #192]	@ (8006690 <LPTIM_Disable+0x390>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d02a      	beq.n	800662a <LPTIM_Disable+0x32a>
 80065d4:	4a2e      	ldr	r2, [pc, #184]	@ (8006690 <LPTIM_Disable+0x390>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d839      	bhi.n	800664e <LPTIM_Disable+0x34e>
 80065da:	4a2e      	ldr	r2, [pc, #184]	@ (8006694 <LPTIM_Disable+0x394>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d01b      	beq.n	8006618 <LPTIM_Disable+0x318>
 80065e0:	4a2c      	ldr	r2, [pc, #176]	@ (8006694 <LPTIM_Disable+0x394>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d833      	bhi.n	800664e <LPTIM_Disable+0x34e>
 80065e6:	4a2c      	ldr	r2, [pc, #176]	@ (8006698 <LPTIM_Disable+0x398>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d003      	beq.n	80065f4 <LPTIM_Disable+0x2f4>
 80065ec:	4a2b      	ldr	r2, [pc, #172]	@ (800669c <LPTIM_Disable+0x39c>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d009      	beq.n	8006606 <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 80065f2:	e02c      	b.n	800664e <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80065f4:	4b2a      	ldr	r3, [pc, #168]	@ (80066a0 <LPTIM_Disable+0x3a0>)
 80065f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065f8:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 80065fc:	4928      	ldr	r1, [pc, #160]	@ (80066a0 <LPTIM_Disable+0x3a0>)
 80065fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006600:	4313      	orrs	r3, r2
 8006602:	654b      	str	r3, [r1, #84]	@ 0x54
        break;
 8006604:	e024      	b.n	8006650 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8006606:	4b26      	ldr	r3, [pc, #152]	@ (80066a0 <LPTIM_Disable+0x3a0>)
 8006608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800660a:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800660e:	4924      	ldr	r1, [pc, #144]	@ (80066a0 <LPTIM_Disable+0x3a0>)
 8006610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006612:	4313      	orrs	r3, r2
 8006614:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8006616:	e01b      	b.n	8006650 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8006618:	4b21      	ldr	r3, [pc, #132]	@ (80066a0 <LPTIM_Disable+0x3a0>)
 800661a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800661c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006620:	491f      	ldr	r1, [pc, #124]	@ (80066a0 <LPTIM_Disable+0x3a0>)
 8006622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006624:	4313      	orrs	r3, r2
 8006626:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8006628:	e012      	b.n	8006650 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 800662a:	4b1d      	ldr	r3, [pc, #116]	@ (80066a0 <LPTIM_Disable+0x3a0>)
 800662c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800662e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006632:	491b      	ldr	r1, [pc, #108]	@ (80066a0 <LPTIM_Disable+0x3a0>)
 8006634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006636:	4313      	orrs	r3, r2
 8006638:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 800663a:	e009      	b.n	8006650 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 800663c:	4b18      	ldr	r3, [pc, #96]	@ (80066a0 <LPTIM_Disable+0x3a0>)
 800663e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006640:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006644:	4916      	ldr	r1, [pc, #88]	@ (80066a0 <LPTIM_Disable+0x3a0>)
 8006646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006648:	4313      	orrs	r3, r2
 800664a:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 800664c:	e000      	b.n	8006650 <LPTIM_Disable+0x350>
        break;
 800664e:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	691a      	ldr	r2, [r3, #16]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0201 	bic.w	r2, r2, #1
 800665e:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006666:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6a3a      	ldr	r2, [r7, #32]
 800666e:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	625a      	str	r2, [r3, #36]	@ 0x24
 8006678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f383 8810 	msr	PRIMASK, r3
}
 8006682:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006684:	bf00      	nop
 8006686:	3730      	adds	r7, #48	@ 0x30
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	58003000 	.word	0x58003000
 8006690:	58002c00 	.word	0x58002c00
 8006694:	58002800 	.word	0x58002800
 8006698:	40002400 	.word	0x40002400
 800669c:	58002400 	.word	0x58002400
 80066a0:	58024400 	.word	0x58024400

080066a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80066ac:	4b19      	ldr	r3, [pc, #100]	@ (8006714 <HAL_PWREx_ConfigSupply+0x70>)
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f003 0304 	and.w	r3, r3, #4
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d00a      	beq.n	80066ce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80066b8:	4b16      	ldr	r3, [pc, #88]	@ (8006714 <HAL_PWREx_ConfigSupply+0x70>)
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f003 0307 	and.w	r3, r3, #7
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d001      	beq.n	80066ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e01f      	b.n	800670a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	e01d      	b.n	800670a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80066ce:	4b11      	ldr	r3, [pc, #68]	@ (8006714 <HAL_PWREx_ConfigSupply+0x70>)
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f023 0207 	bic.w	r2, r3, #7
 80066d6:	490f      	ldr	r1, [pc, #60]	@ (8006714 <HAL_PWREx_ConfigSupply+0x70>)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80066de:	f7fd f9d5 	bl	8003a8c <HAL_GetTick>
 80066e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80066e4:	e009      	b.n	80066fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80066e6:	f7fd f9d1 	bl	8003a8c <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80066f4:	d901      	bls.n	80066fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e007      	b.n	800670a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80066fa:	4b06      	ldr	r3, [pc, #24]	@ (8006714 <HAL_PWREx_ConfigSupply+0x70>)
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006702:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006706:	d1ee      	bne.n	80066e6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	58024800 	.word	0x58024800

08006718 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b08c      	sub	sp, #48	@ 0x30
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d102      	bne.n	800672c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	f000 bc48 	b.w	8006fbc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 8088 	beq.w	800684a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800673a:	4b99      	ldr	r3, [pc, #612]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006742:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006744:	4b96      	ldr	r3, [pc, #600]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 8006746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006748:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800674a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800674c:	2b10      	cmp	r3, #16
 800674e:	d007      	beq.n	8006760 <HAL_RCC_OscConfig+0x48>
 8006750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006752:	2b18      	cmp	r3, #24
 8006754:	d111      	bne.n	800677a <HAL_RCC_OscConfig+0x62>
 8006756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006758:	f003 0303 	and.w	r3, r3, #3
 800675c:	2b02      	cmp	r3, #2
 800675e:	d10c      	bne.n	800677a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006760:	4b8f      	ldr	r3, [pc, #572]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d06d      	beq.n	8006848 <HAL_RCC_OscConfig+0x130>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d169      	bne.n	8006848 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	f000 bc21 	b.w	8006fbc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006782:	d106      	bne.n	8006792 <HAL_RCC_OscConfig+0x7a>
 8006784:	4b86      	ldr	r3, [pc, #536]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a85      	ldr	r2, [pc, #532]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 800678a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800678e:	6013      	str	r3, [r2, #0]
 8006790:	e02e      	b.n	80067f0 <HAL_RCC_OscConfig+0xd8>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10c      	bne.n	80067b4 <HAL_RCC_OscConfig+0x9c>
 800679a:	4b81      	ldr	r3, [pc, #516]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a80      	ldr	r2, [pc, #512]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 80067a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067a4:	6013      	str	r3, [r2, #0]
 80067a6:	4b7e      	ldr	r3, [pc, #504]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a7d      	ldr	r2, [pc, #500]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 80067ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067b0:	6013      	str	r3, [r2, #0]
 80067b2:	e01d      	b.n	80067f0 <HAL_RCC_OscConfig+0xd8>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067bc:	d10c      	bne.n	80067d8 <HAL_RCC_OscConfig+0xc0>
 80067be:	4b78      	ldr	r3, [pc, #480]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a77      	ldr	r2, [pc, #476]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 80067c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067c8:	6013      	str	r3, [r2, #0]
 80067ca:	4b75      	ldr	r3, [pc, #468]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a74      	ldr	r2, [pc, #464]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 80067d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	e00b      	b.n	80067f0 <HAL_RCC_OscConfig+0xd8>
 80067d8:	4b71      	ldr	r3, [pc, #452]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a70      	ldr	r2, [pc, #448]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 80067de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	4b6e      	ldr	r3, [pc, #440]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a6d      	ldr	r2, [pc, #436]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 80067ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d013      	beq.n	8006820 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f8:	f7fd f948 	bl	8003a8c <HAL_GetTick>
 80067fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80067fe:	e008      	b.n	8006812 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006800:	f7fd f944 	bl	8003a8c <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	2b64      	cmp	r3, #100	@ 0x64
 800680c:	d901      	bls.n	8006812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e3d4      	b.n	8006fbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006812:	4b63      	ldr	r3, [pc, #396]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0f0      	beq.n	8006800 <HAL_RCC_OscConfig+0xe8>
 800681e:	e014      	b.n	800684a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006820:	f7fd f934 	bl	8003a8c <HAL_GetTick>
 8006824:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006826:	e008      	b.n	800683a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006828:	f7fd f930 	bl	8003a8c <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b64      	cmp	r3, #100	@ 0x64
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e3c0      	b.n	8006fbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800683a:	4b59      	ldr	r3, [pc, #356]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1f0      	bne.n	8006828 <HAL_RCC_OscConfig+0x110>
 8006846:	e000      	b.n	800684a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 80ca 	beq.w	80069ec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006858:	4b51      	ldr	r3, [pc, #324]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006860:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006862:	4b4f      	ldr	r3, [pc, #316]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 8006864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006866:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d007      	beq.n	800687e <HAL_RCC_OscConfig+0x166>
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	2b18      	cmp	r3, #24
 8006872:	d156      	bne.n	8006922 <HAL_RCC_OscConfig+0x20a>
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	f003 0303 	and.w	r3, r3, #3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d151      	bne.n	8006922 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800687e:	4b48      	ldr	r3, [pc, #288]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0304 	and.w	r3, r3, #4
 8006886:	2b00      	cmp	r3, #0
 8006888:	d005      	beq.n	8006896 <HAL_RCC_OscConfig+0x17e>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e392      	b.n	8006fbc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006896:	4b42      	ldr	r3, [pc, #264]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f023 0219 	bic.w	r2, r3, #25
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	493f      	ldr	r1, [pc, #252]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a8:	f7fd f8f0 	bl	8003a8c <HAL_GetTick>
 80068ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068ae:	e008      	b.n	80068c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068b0:	f7fd f8ec 	bl	8003a8c <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d901      	bls.n	80068c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e37c      	b.n	8006fbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068c2:	4b37      	ldr	r3, [pc, #220]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0f0      	beq.n	80068b0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068ce:	f7fd f8e9 	bl	8003aa4 <HAL_GetREVID>
 80068d2:	4603      	mov	r3, r0
 80068d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80068d8:	4293      	cmp	r3, r2
 80068da:	d817      	bhi.n	800690c <HAL_RCC_OscConfig+0x1f4>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	2b40      	cmp	r3, #64	@ 0x40
 80068e2:	d108      	bne.n	80068f6 <HAL_RCC_OscConfig+0x1de>
 80068e4:	4b2e      	ldr	r3, [pc, #184]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80068ec:	4a2c      	ldr	r2, [pc, #176]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 80068ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068f2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068f4:	e07a      	b.n	80069ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068f6:	4b2a      	ldr	r3, [pc, #168]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	031b      	lsls	r3, r3, #12
 8006904:	4926      	ldr	r1, [pc, #152]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 8006906:	4313      	orrs	r3, r2
 8006908:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800690a:	e06f      	b.n	80069ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800690c:	4b24      	ldr	r3, [pc, #144]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	061b      	lsls	r3, r3, #24
 800691a:	4921      	ldr	r1, [pc, #132]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 800691c:	4313      	orrs	r3, r2
 800691e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006920:	e064      	b.n	80069ec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d047      	beq.n	80069ba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800692a:	4b1d      	ldr	r3, [pc, #116]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f023 0219 	bic.w	r2, r3, #25
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	491a      	ldr	r1, [pc, #104]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 8006938:	4313      	orrs	r3, r2
 800693a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800693c:	f7fd f8a6 	bl	8003a8c <HAL_GetTick>
 8006940:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006942:	e008      	b.n	8006956 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006944:	f7fd f8a2 	bl	8003a8c <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	2b02      	cmp	r3, #2
 8006950:	d901      	bls.n	8006956 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e332      	b.n	8006fbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006956:	4b12      	ldr	r3, [pc, #72]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0304 	and.w	r3, r3, #4
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0f0      	beq.n	8006944 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006962:	f7fd f89f 	bl	8003aa4 <HAL_GetREVID>
 8006966:	4603      	mov	r3, r0
 8006968:	f241 0203 	movw	r2, #4099	@ 0x1003
 800696c:	4293      	cmp	r3, r2
 800696e:	d819      	bhi.n	80069a4 <HAL_RCC_OscConfig+0x28c>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	2b40      	cmp	r3, #64	@ 0x40
 8006976:	d108      	bne.n	800698a <HAL_RCC_OscConfig+0x272>
 8006978:	4b09      	ldr	r3, [pc, #36]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006980:	4a07      	ldr	r2, [pc, #28]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 8006982:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006986:	6053      	str	r3, [r2, #4]
 8006988:	e030      	b.n	80069ec <HAL_RCC_OscConfig+0x2d4>
 800698a:	4b05      	ldr	r3, [pc, #20]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	031b      	lsls	r3, r3, #12
 8006998:	4901      	ldr	r1, [pc, #4]	@ (80069a0 <HAL_RCC_OscConfig+0x288>)
 800699a:	4313      	orrs	r3, r2
 800699c:	604b      	str	r3, [r1, #4]
 800699e:	e025      	b.n	80069ec <HAL_RCC_OscConfig+0x2d4>
 80069a0:	58024400 	.word	0x58024400
 80069a4:	4b9a      	ldr	r3, [pc, #616]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	061b      	lsls	r3, r3, #24
 80069b2:	4997      	ldr	r1, [pc, #604]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	604b      	str	r3, [r1, #4]
 80069b8:	e018      	b.n	80069ec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069ba:	4b95      	ldr	r3, [pc, #596]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a94      	ldr	r2, [pc, #592]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 80069c0:	f023 0301 	bic.w	r3, r3, #1
 80069c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c6:	f7fd f861 	bl	8003a8c <HAL_GetTick>
 80069ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80069cc:	e008      	b.n	80069e0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069ce:	f7fd f85d 	bl	8003a8c <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d901      	bls.n	80069e0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e2ed      	b.n	8006fbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80069e0:	4b8b      	ldr	r3, [pc, #556]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0304 	and.w	r3, r3, #4
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1f0      	bne.n	80069ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0310 	and.w	r3, r3, #16
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 80a9 	beq.w	8006b4c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069fa:	4b85      	ldr	r3, [pc, #532]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a02:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a04:	4b82      	ldr	r3, [pc, #520]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a08:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d007      	beq.n	8006a20 <HAL_RCC_OscConfig+0x308>
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	2b18      	cmp	r3, #24
 8006a14:	d13a      	bne.n	8006a8c <HAL_RCC_OscConfig+0x374>
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f003 0303 	and.w	r3, r3, #3
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d135      	bne.n	8006a8c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a20:	4b7b      	ldr	r3, [pc, #492]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d005      	beq.n	8006a38 <HAL_RCC_OscConfig+0x320>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	2b80      	cmp	r3, #128	@ 0x80
 8006a32:	d001      	beq.n	8006a38 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e2c1      	b.n	8006fbc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a38:	f7fd f834 	bl	8003aa4 <HAL_GetREVID>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d817      	bhi.n	8006a76 <HAL_RCC_OscConfig+0x35e>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	2b20      	cmp	r3, #32
 8006a4c:	d108      	bne.n	8006a60 <HAL_RCC_OscConfig+0x348>
 8006a4e:	4b70      	ldr	r3, [pc, #448]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006a56:	4a6e      	ldr	r2, [pc, #440]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006a58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a5c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a5e:	e075      	b.n	8006b4c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a60:	4b6b      	ldr	r3, [pc, #428]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	069b      	lsls	r3, r3, #26
 8006a6e:	4968      	ldr	r1, [pc, #416]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006a70:	4313      	orrs	r3, r2
 8006a72:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a74:	e06a      	b.n	8006b4c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a76:	4b66      	ldr	r3, [pc, #408]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	061b      	lsls	r3, r3, #24
 8006a84:	4962      	ldr	r1, [pc, #392]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a8a:	e05f      	b.n	8006b4c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	69db      	ldr	r3, [r3, #28]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d042      	beq.n	8006b1a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006a94:	4b5e      	ldr	r3, [pc, #376]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a5d      	ldr	r2, [pc, #372]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006a9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa0:	f7fc fff4 	bl	8003a8c <HAL_GetTick>
 8006aa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006aa6:	e008      	b.n	8006aba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006aa8:	f7fc fff0 	bl	8003a8c <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d901      	bls.n	8006aba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e280      	b.n	8006fbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006aba:	4b55      	ldr	r3, [pc, #340]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d0f0      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ac6:	f7fc ffed 	bl	8003aa4 <HAL_GetREVID>
 8006aca:	4603      	mov	r3, r0
 8006acc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d817      	bhi.n	8006b04 <HAL_RCC_OscConfig+0x3ec>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	2b20      	cmp	r3, #32
 8006ada:	d108      	bne.n	8006aee <HAL_RCC_OscConfig+0x3d6>
 8006adc:	4b4c      	ldr	r3, [pc, #304]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006ae4:	4a4a      	ldr	r2, [pc, #296]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006ae6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006aea:	6053      	str	r3, [r2, #4]
 8006aec:	e02e      	b.n	8006b4c <HAL_RCC_OscConfig+0x434>
 8006aee:	4b48      	ldr	r3, [pc, #288]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	069b      	lsls	r3, r3, #26
 8006afc:	4944      	ldr	r1, [pc, #272]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	604b      	str	r3, [r1, #4]
 8006b02:	e023      	b.n	8006b4c <HAL_RCC_OscConfig+0x434>
 8006b04:	4b42      	ldr	r3, [pc, #264]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	061b      	lsls	r3, r3, #24
 8006b12:	493f      	ldr	r1, [pc, #252]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60cb      	str	r3, [r1, #12]
 8006b18:	e018      	b.n	8006b4c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a3c      	ldr	r2, [pc, #240]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006b20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b26:	f7fc ffb1 	bl	8003a8c <HAL_GetTick>
 8006b2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b2c:	e008      	b.n	8006b40 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006b2e:	f7fc ffad 	bl	8003a8c <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d901      	bls.n	8006b40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e23d      	b.n	8006fbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b40:	4b33      	ldr	r3, [pc, #204]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1f0      	bne.n	8006b2e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0308 	and.w	r3, r3, #8
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d036      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d019      	beq.n	8006b94 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b60:	4b2b      	ldr	r3, [pc, #172]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006b62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b64:	4a2a      	ldr	r2, [pc, #168]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006b66:	f043 0301 	orr.w	r3, r3, #1
 8006b6a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b6c:	f7fc ff8e 	bl	8003a8c <HAL_GetTick>
 8006b70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b72:	e008      	b.n	8006b86 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b74:	f7fc ff8a 	bl	8003a8c <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d901      	bls.n	8006b86 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e21a      	b.n	8006fbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b86:	4b22      	ldr	r3, [pc, #136]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d0f0      	beq.n	8006b74 <HAL_RCC_OscConfig+0x45c>
 8006b92:	e018      	b.n	8006bc6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b94:	4b1e      	ldr	r3, [pc, #120]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006b96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b98:	4a1d      	ldr	r2, [pc, #116]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006b9a:	f023 0301 	bic.w	r3, r3, #1
 8006b9e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ba0:	f7fc ff74 	bl	8003a8c <HAL_GetTick>
 8006ba4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ba6:	e008      	b.n	8006bba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ba8:	f7fc ff70 	bl	8003a8c <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e200      	b.n	8006fbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006bba:	4b15      	ldr	r3, [pc, #84]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1f0      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d039      	beq.n	8006c46 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d01c      	beq.n	8006c14 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006bda:	4b0d      	ldr	r3, [pc, #52]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a0c      	ldr	r2, [pc, #48]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006be0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006be4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006be6:	f7fc ff51 	bl	8003a8c <HAL_GetTick>
 8006bea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006bec:	e008      	b.n	8006c00 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bee:	f7fc ff4d 	bl	8003a8c <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d901      	bls.n	8006c00 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e1dd      	b.n	8006fbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c00:	4b03      	ldr	r3, [pc, #12]	@ (8006c10 <HAL_RCC_OscConfig+0x4f8>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d0f0      	beq.n	8006bee <HAL_RCC_OscConfig+0x4d6>
 8006c0c:	e01b      	b.n	8006c46 <HAL_RCC_OscConfig+0x52e>
 8006c0e:	bf00      	nop
 8006c10:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c14:	4b9b      	ldr	r3, [pc, #620]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a9a      	ldr	r2, [pc, #616]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006c1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c1e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c20:	f7fc ff34 	bl	8003a8c <HAL_GetTick>
 8006c24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c26:	e008      	b.n	8006c3a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c28:	f7fc ff30 	bl	8003a8c <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e1c0      	b.n	8006fbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c3a:	4b92      	ldr	r3, [pc, #584]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1f0      	bne.n	8006c28 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0304 	and.w	r3, r3, #4
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 8081 	beq.w	8006d56 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006c54:	4b8c      	ldr	r3, [pc, #560]	@ (8006e88 <HAL_RCC_OscConfig+0x770>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a8b      	ldr	r2, [pc, #556]	@ (8006e88 <HAL_RCC_OscConfig+0x770>)
 8006c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c60:	f7fc ff14 	bl	8003a8c <HAL_GetTick>
 8006c64:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c66:	e008      	b.n	8006c7a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c68:	f7fc ff10 	bl	8003a8c <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b64      	cmp	r3, #100	@ 0x64
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e1a0      	b.n	8006fbc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c7a:	4b83      	ldr	r3, [pc, #524]	@ (8006e88 <HAL_RCC_OscConfig+0x770>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d0f0      	beq.n	8006c68 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d106      	bne.n	8006c9c <HAL_RCC_OscConfig+0x584>
 8006c8e:	4b7d      	ldr	r3, [pc, #500]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c92:	4a7c      	ldr	r2, [pc, #496]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006c94:	f043 0301 	orr.w	r3, r3, #1
 8006c98:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c9a:	e02d      	b.n	8006cf8 <HAL_RCC_OscConfig+0x5e0>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10c      	bne.n	8006cbe <HAL_RCC_OscConfig+0x5a6>
 8006ca4:	4b77      	ldr	r3, [pc, #476]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ca8:	4a76      	ldr	r2, [pc, #472]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006caa:	f023 0301 	bic.w	r3, r3, #1
 8006cae:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cb0:	4b74      	ldr	r3, [pc, #464]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cb4:	4a73      	ldr	r2, [pc, #460]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006cb6:	f023 0304 	bic.w	r3, r3, #4
 8006cba:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cbc:	e01c      	b.n	8006cf8 <HAL_RCC_OscConfig+0x5e0>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	2b05      	cmp	r3, #5
 8006cc4:	d10c      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x5c8>
 8006cc6:	4b6f      	ldr	r3, [pc, #444]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cca:	4a6e      	ldr	r2, [pc, #440]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006ccc:	f043 0304 	orr.w	r3, r3, #4
 8006cd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cd2:	4b6c      	ldr	r3, [pc, #432]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cd6:	4a6b      	ldr	r2, [pc, #428]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006cd8:	f043 0301 	orr.w	r3, r3, #1
 8006cdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cde:	e00b      	b.n	8006cf8 <HAL_RCC_OscConfig+0x5e0>
 8006ce0:	4b68      	ldr	r3, [pc, #416]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ce4:	4a67      	ldr	r2, [pc, #412]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006ce6:	f023 0301 	bic.w	r3, r3, #1
 8006cea:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cec:	4b65      	ldr	r3, [pc, #404]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cf0:	4a64      	ldr	r2, [pc, #400]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006cf2:	f023 0304 	bic.w	r3, r3, #4
 8006cf6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d015      	beq.n	8006d2c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d00:	f7fc fec4 	bl	8003a8c <HAL_GetTick>
 8006d04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d06:	e00a      	b.n	8006d1e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d08:	f7fc fec0 	bl	8003a8c <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e14e      	b.n	8006fbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d1e:	4b59      	ldr	r3, [pc, #356]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d22:	f003 0302 	and.w	r3, r3, #2
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d0ee      	beq.n	8006d08 <HAL_RCC_OscConfig+0x5f0>
 8006d2a:	e014      	b.n	8006d56 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d2c:	f7fc feae 	bl	8003a8c <HAL_GetTick>
 8006d30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d32:	e00a      	b.n	8006d4a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d34:	f7fc feaa 	bl	8003a8c <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d901      	bls.n	8006d4a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e138      	b.n	8006fbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d4a:	4b4e      	ldr	r3, [pc, #312]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1ee      	bne.n	8006d34 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 812d 	beq.w	8006fba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006d60:	4b48      	ldr	r3, [pc, #288]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d68:	2b18      	cmp	r3, #24
 8006d6a:	f000 80bd 	beq.w	8006ee8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	f040 809e 	bne.w	8006eb4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d78:	4b42      	ldr	r3, [pc, #264]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a41      	ldr	r2, [pc, #260]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006d7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d84:	f7fc fe82 	bl	8003a8c <HAL_GetTick>
 8006d88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d8a:	e008      	b.n	8006d9e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d8c:	f7fc fe7e 	bl	8003a8c <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e10e      	b.n	8006fbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d9e:	4b39      	ldr	r3, [pc, #228]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1f0      	bne.n	8006d8c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006daa:	4b36      	ldr	r3, [pc, #216]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006dac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006dae:	4b37      	ldr	r3, [pc, #220]	@ (8006e8c <HAL_RCC_OscConfig+0x774>)
 8006db0:	4013      	ands	r3, r2
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006dba:	0112      	lsls	r2, r2, #4
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	4931      	ldr	r1, [pc, #196]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	628b      	str	r3, [r1, #40]	@ 0x28
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	025b      	lsls	r3, r3, #9
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dde:	3b01      	subs	r3, #1
 8006de0:	041b      	lsls	r3, r3, #16
 8006de2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006de6:	431a      	orrs	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dec:	3b01      	subs	r3, #1
 8006dee:	061b      	lsls	r3, r3, #24
 8006df0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006df4:	4923      	ldr	r1, [pc, #140]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006dfa:	4b22      	ldr	r3, [pc, #136]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfe:	4a21      	ldr	r2, [pc, #132]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006e00:	f023 0301 	bic.w	r3, r3, #1
 8006e04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006e06:	4b1f      	ldr	r3, [pc, #124]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006e08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e0a:	4b21      	ldr	r3, [pc, #132]	@ (8006e90 <HAL_RCC_OscConfig+0x778>)
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006e12:	00d2      	lsls	r2, r2, #3
 8006e14:	491b      	ldr	r1, [pc, #108]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e1e:	f023 020c 	bic.w	r2, r3, #12
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e26:	4917      	ldr	r1, [pc, #92]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006e2c:	4b15      	ldr	r3, [pc, #84]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e30:	f023 0202 	bic.w	r2, r3, #2
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e38:	4912      	ldr	r1, [pc, #72]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006e3e:	4b11      	ldr	r3, [pc, #68]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e42:	4a10      	ldr	r2, [pc, #64]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e4e:	4a0d      	ldr	r2, [pc, #52]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006e56:	4b0b      	ldr	r3, [pc, #44]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006e5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006e62:	4b08      	ldr	r3, [pc, #32]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e66:	4a07      	ldr	r2, [pc, #28]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006e68:	f043 0301 	orr.w	r3, r3, #1
 8006e6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e6e:	4b05      	ldr	r3, [pc, #20]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a04      	ldr	r2, [pc, #16]	@ (8006e84 <HAL_RCC_OscConfig+0x76c>)
 8006e74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e7a:	f7fc fe07 	bl	8003a8c <HAL_GetTick>
 8006e7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e80:	e011      	b.n	8006ea6 <HAL_RCC_OscConfig+0x78e>
 8006e82:	bf00      	nop
 8006e84:	58024400 	.word	0x58024400
 8006e88:	58024800 	.word	0x58024800
 8006e8c:	fffffc0c 	.word	0xfffffc0c
 8006e90:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e94:	f7fc fdfa 	bl	8003a8c <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e08a      	b.n	8006fbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ea6:	4b47      	ldr	r3, [pc, #284]	@ (8006fc4 <HAL_RCC_OscConfig+0x8ac>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d0f0      	beq.n	8006e94 <HAL_RCC_OscConfig+0x77c>
 8006eb2:	e082      	b.n	8006fba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eb4:	4b43      	ldr	r3, [pc, #268]	@ (8006fc4 <HAL_RCC_OscConfig+0x8ac>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a42      	ldr	r2, [pc, #264]	@ (8006fc4 <HAL_RCC_OscConfig+0x8ac>)
 8006eba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec0:	f7fc fde4 	bl	8003a8c <HAL_GetTick>
 8006ec4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ec6:	e008      	b.n	8006eda <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ec8:	f7fc fde0 	bl	8003a8c <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e070      	b.n	8006fbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006eda:	4b3a      	ldr	r3, [pc, #232]	@ (8006fc4 <HAL_RCC_OscConfig+0x8ac>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1f0      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x7b0>
 8006ee6:	e068      	b.n	8006fba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006ee8:	4b36      	ldr	r3, [pc, #216]	@ (8006fc4 <HAL_RCC_OscConfig+0x8ac>)
 8006eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006eee:	4b35      	ldr	r3, [pc, #212]	@ (8006fc4 <HAL_RCC_OscConfig+0x8ac>)
 8006ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ef2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d031      	beq.n	8006f60 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f003 0203 	and.w	r2, r3, #3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d12a      	bne.n	8006f60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	091b      	lsrs	r3, r3, #4
 8006f0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d122      	bne.n	8006f60 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f24:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d11a      	bne.n	8006f60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	0a5b      	lsrs	r3, r3, #9
 8006f2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f36:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d111      	bne.n	8006f60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	0c1b      	lsrs	r3, r3, #16
 8006f40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f48:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d108      	bne.n	8006f60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	0e1b      	lsrs	r3, r3, #24
 8006f52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f5a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d001      	beq.n	8006f64 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e02b      	b.n	8006fbc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006f64:	4b17      	ldr	r3, [pc, #92]	@ (8006fc4 <HAL_RCC_OscConfig+0x8ac>)
 8006f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f68:	08db      	lsrs	r3, r3, #3
 8006f6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f6e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d01f      	beq.n	8006fba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006f7a:	4b12      	ldr	r3, [pc, #72]	@ (8006fc4 <HAL_RCC_OscConfig+0x8ac>)
 8006f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7e:	4a11      	ldr	r2, [pc, #68]	@ (8006fc4 <HAL_RCC_OscConfig+0x8ac>)
 8006f80:	f023 0301 	bic.w	r3, r3, #1
 8006f84:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f86:	f7fc fd81 	bl	8003a8c <HAL_GetTick>
 8006f8a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006f8c:	bf00      	nop
 8006f8e:	f7fc fd7d 	bl	8003a8c <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d0f9      	beq.n	8006f8e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc4 <HAL_RCC_OscConfig+0x8ac>)
 8006f9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc8 <HAL_RCC_OscConfig+0x8b0>)
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006fa6:	00d2      	lsls	r2, r2, #3
 8006fa8:	4906      	ldr	r1, [pc, #24]	@ (8006fc4 <HAL_RCC_OscConfig+0x8ac>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006fae:	4b05      	ldr	r3, [pc, #20]	@ (8006fc4 <HAL_RCC_OscConfig+0x8ac>)
 8006fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb2:	4a04      	ldr	r2, [pc, #16]	@ (8006fc4 <HAL_RCC_OscConfig+0x8ac>)
 8006fb4:	f043 0301 	orr.w	r3, r3, #1
 8006fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3730      	adds	r7, #48	@ 0x30
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	58024400 	.word	0x58024400
 8006fc8:	ffff0007 	.word	0xffff0007

08006fcc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e19c      	b.n	800731a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006fe0:	4b8a      	ldr	r3, [pc, #552]	@ (800720c <HAL_RCC_ClockConfig+0x240>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 030f 	and.w	r3, r3, #15
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d910      	bls.n	8007010 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fee:	4b87      	ldr	r3, [pc, #540]	@ (800720c <HAL_RCC_ClockConfig+0x240>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f023 020f 	bic.w	r2, r3, #15
 8006ff6:	4985      	ldr	r1, [pc, #532]	@ (800720c <HAL_RCC_ClockConfig+0x240>)
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ffe:	4b83      	ldr	r3, [pc, #524]	@ (800720c <HAL_RCC_ClockConfig+0x240>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 030f 	and.w	r3, r3, #15
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	429a      	cmp	r2, r3
 800700a:	d001      	beq.n	8007010 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e184      	b.n	800731a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0304 	and.w	r3, r3, #4
 8007018:	2b00      	cmp	r3, #0
 800701a:	d010      	beq.n	800703e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	691a      	ldr	r2, [r3, #16]
 8007020:	4b7b      	ldr	r3, [pc, #492]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007028:	429a      	cmp	r2, r3
 800702a:	d908      	bls.n	800703e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800702c:	4b78      	ldr	r3, [pc, #480]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	4975      	ldr	r1, [pc, #468]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 800703a:	4313      	orrs	r3, r2
 800703c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0308 	and.w	r3, r3, #8
 8007046:	2b00      	cmp	r3, #0
 8007048:	d010      	beq.n	800706c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	695a      	ldr	r2, [r3, #20]
 800704e:	4b70      	ldr	r3, [pc, #448]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007056:	429a      	cmp	r2, r3
 8007058:	d908      	bls.n	800706c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800705a:	4b6d      	ldr	r3, [pc, #436]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	496a      	ldr	r1, [pc, #424]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 8007068:	4313      	orrs	r3, r2
 800706a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0310 	and.w	r3, r3, #16
 8007074:	2b00      	cmp	r3, #0
 8007076:	d010      	beq.n	800709a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699a      	ldr	r2, [r3, #24]
 800707c:	4b64      	ldr	r3, [pc, #400]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007084:	429a      	cmp	r2, r3
 8007086:	d908      	bls.n	800709a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007088:	4b61      	ldr	r3, [pc, #388]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 800708a:	69db      	ldr	r3, [r3, #28]
 800708c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	495e      	ldr	r1, [pc, #376]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 8007096:	4313      	orrs	r3, r2
 8007098:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0320 	and.w	r3, r3, #32
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d010      	beq.n	80070c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	69da      	ldr	r2, [r3, #28]
 80070aa:	4b59      	ldr	r3, [pc, #356]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d908      	bls.n	80070c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80070b6:	4b56      	ldr	r3, [pc, #344]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	69db      	ldr	r3, [r3, #28]
 80070c2:	4953      	ldr	r1, [pc, #332]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 80070c4:	4313      	orrs	r3, r2
 80070c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0302 	and.w	r3, r3, #2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d010      	beq.n	80070f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68da      	ldr	r2, [r3, #12]
 80070d8:	4b4d      	ldr	r3, [pc, #308]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	f003 030f 	and.w	r3, r3, #15
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d908      	bls.n	80070f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070e4:	4b4a      	ldr	r3, [pc, #296]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	f023 020f 	bic.w	r2, r3, #15
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	4947      	ldr	r1, [pc, #284]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d055      	beq.n	80071ae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007102:	4b43      	ldr	r3, [pc, #268]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	4940      	ldr	r1, [pc, #256]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 8007110:	4313      	orrs	r3, r2
 8007112:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	2b02      	cmp	r3, #2
 800711a:	d107      	bne.n	800712c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800711c:	4b3c      	ldr	r3, [pc, #240]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d121      	bne.n	800716c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e0f6      	b.n	800731a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	2b03      	cmp	r3, #3
 8007132:	d107      	bne.n	8007144 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007134:	4b36      	ldr	r3, [pc, #216]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d115      	bne.n	800716c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e0ea      	b.n	800731a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d107      	bne.n	800715c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800714c:	4b30      	ldr	r3, [pc, #192]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007154:	2b00      	cmp	r3, #0
 8007156:	d109      	bne.n	800716c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e0de      	b.n	800731a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800715c:	4b2c      	ldr	r3, [pc, #176]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0304 	and.w	r3, r3, #4
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e0d6      	b.n	800731a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800716c:	4b28      	ldr	r3, [pc, #160]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	f023 0207 	bic.w	r2, r3, #7
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	4925      	ldr	r1, [pc, #148]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 800717a:	4313      	orrs	r3, r2
 800717c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800717e:	f7fc fc85 	bl	8003a8c <HAL_GetTick>
 8007182:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007184:	e00a      	b.n	800719c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007186:	f7fc fc81 	bl	8003a8c <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007194:	4293      	cmp	r3, r2
 8007196:	d901      	bls.n	800719c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e0be      	b.n	800731a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800719c:	4b1c      	ldr	r3, [pc, #112]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	00db      	lsls	r3, r3, #3
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d1eb      	bne.n	8007186 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d010      	beq.n	80071dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	4b14      	ldr	r3, [pc, #80]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	f003 030f 	and.w	r3, r3, #15
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d208      	bcs.n	80071dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071ca:	4b11      	ldr	r3, [pc, #68]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	f023 020f 	bic.w	r2, r3, #15
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	490e      	ldr	r1, [pc, #56]	@ (8007210 <HAL_RCC_ClockConfig+0x244>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071dc:	4b0b      	ldr	r3, [pc, #44]	@ (800720c <HAL_RCC_ClockConfig+0x240>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 030f 	and.w	r3, r3, #15
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d214      	bcs.n	8007214 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ea:	4b08      	ldr	r3, [pc, #32]	@ (800720c <HAL_RCC_ClockConfig+0x240>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f023 020f 	bic.w	r2, r3, #15
 80071f2:	4906      	ldr	r1, [pc, #24]	@ (800720c <HAL_RCC_ClockConfig+0x240>)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071fa:	4b04      	ldr	r3, [pc, #16]	@ (800720c <HAL_RCC_ClockConfig+0x240>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 030f 	and.w	r3, r3, #15
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	429a      	cmp	r2, r3
 8007206:	d005      	beq.n	8007214 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e086      	b.n	800731a <HAL_RCC_ClockConfig+0x34e>
 800720c:	52002000 	.word	0x52002000
 8007210:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0304 	and.w	r3, r3, #4
 800721c:	2b00      	cmp	r3, #0
 800721e:	d010      	beq.n	8007242 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	691a      	ldr	r2, [r3, #16]
 8007224:	4b3f      	ldr	r3, [pc, #252]	@ (8007324 <HAL_RCC_ClockConfig+0x358>)
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800722c:	429a      	cmp	r2, r3
 800722e:	d208      	bcs.n	8007242 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007230:	4b3c      	ldr	r3, [pc, #240]	@ (8007324 <HAL_RCC_ClockConfig+0x358>)
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	4939      	ldr	r1, [pc, #228]	@ (8007324 <HAL_RCC_ClockConfig+0x358>)
 800723e:	4313      	orrs	r3, r2
 8007240:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0308 	and.w	r3, r3, #8
 800724a:	2b00      	cmp	r3, #0
 800724c:	d010      	beq.n	8007270 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	695a      	ldr	r2, [r3, #20]
 8007252:	4b34      	ldr	r3, [pc, #208]	@ (8007324 <HAL_RCC_ClockConfig+0x358>)
 8007254:	69db      	ldr	r3, [r3, #28]
 8007256:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800725a:	429a      	cmp	r2, r3
 800725c:	d208      	bcs.n	8007270 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800725e:	4b31      	ldr	r3, [pc, #196]	@ (8007324 <HAL_RCC_ClockConfig+0x358>)
 8007260:	69db      	ldr	r3, [r3, #28]
 8007262:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	492e      	ldr	r1, [pc, #184]	@ (8007324 <HAL_RCC_ClockConfig+0x358>)
 800726c:	4313      	orrs	r3, r2
 800726e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0310 	and.w	r3, r3, #16
 8007278:	2b00      	cmp	r3, #0
 800727a:	d010      	beq.n	800729e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	699a      	ldr	r2, [r3, #24]
 8007280:	4b28      	ldr	r3, [pc, #160]	@ (8007324 <HAL_RCC_ClockConfig+0x358>)
 8007282:	69db      	ldr	r3, [r3, #28]
 8007284:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007288:	429a      	cmp	r2, r3
 800728a:	d208      	bcs.n	800729e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800728c:	4b25      	ldr	r3, [pc, #148]	@ (8007324 <HAL_RCC_ClockConfig+0x358>)
 800728e:	69db      	ldr	r3, [r3, #28]
 8007290:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	4922      	ldr	r1, [pc, #136]	@ (8007324 <HAL_RCC_ClockConfig+0x358>)
 800729a:	4313      	orrs	r3, r2
 800729c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0320 	and.w	r3, r3, #32
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d010      	beq.n	80072cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	69da      	ldr	r2, [r3, #28]
 80072ae:	4b1d      	ldr	r3, [pc, #116]	@ (8007324 <HAL_RCC_ClockConfig+0x358>)
 80072b0:	6a1b      	ldr	r3, [r3, #32]
 80072b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d208      	bcs.n	80072cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80072ba:	4b1a      	ldr	r3, [pc, #104]	@ (8007324 <HAL_RCC_ClockConfig+0x358>)
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	69db      	ldr	r3, [r3, #28]
 80072c6:	4917      	ldr	r1, [pc, #92]	@ (8007324 <HAL_RCC_ClockConfig+0x358>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80072cc:	f000 f834 	bl	8007338 <HAL_RCC_GetSysClockFreq>
 80072d0:	4602      	mov	r2, r0
 80072d2:	4b14      	ldr	r3, [pc, #80]	@ (8007324 <HAL_RCC_ClockConfig+0x358>)
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	0a1b      	lsrs	r3, r3, #8
 80072d8:	f003 030f 	and.w	r3, r3, #15
 80072dc:	4912      	ldr	r1, [pc, #72]	@ (8007328 <HAL_RCC_ClockConfig+0x35c>)
 80072de:	5ccb      	ldrb	r3, [r1, r3]
 80072e0:	f003 031f 	and.w	r3, r3, #31
 80072e4:	fa22 f303 	lsr.w	r3, r2, r3
 80072e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007324 <HAL_RCC_ClockConfig+0x358>)
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	f003 030f 	and.w	r3, r3, #15
 80072f2:	4a0d      	ldr	r2, [pc, #52]	@ (8007328 <HAL_RCC_ClockConfig+0x35c>)
 80072f4:	5cd3      	ldrb	r3, [r2, r3]
 80072f6:	f003 031f 	and.w	r3, r3, #31
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007300:	4a0a      	ldr	r2, [pc, #40]	@ (800732c <HAL_RCC_ClockConfig+0x360>)
 8007302:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007304:	4a0a      	ldr	r2, [pc, #40]	@ (8007330 <HAL_RCC_ClockConfig+0x364>)
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800730a:	4b0a      	ldr	r3, [pc, #40]	@ (8007334 <HAL_RCC_ClockConfig+0x368>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4618      	mov	r0, r3
 8007310:	f7fc fb72 	bl	80039f8 <HAL_InitTick>
 8007314:	4603      	mov	r3, r0
 8007316:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007318:	7bfb      	ldrb	r3, [r7, #15]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3718      	adds	r7, #24
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	58024400 	.word	0x58024400
 8007328:	080103c8 	.word	0x080103c8
 800732c:	24000014 	.word	0x24000014
 8007330:	24000010 	.word	0x24000010
 8007334:	24000018 	.word	0x24000018

08007338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007338:	b480      	push	{r7}
 800733a:	b089      	sub	sp, #36	@ 0x24
 800733c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800733e:	4bb3      	ldr	r3, [pc, #716]	@ (800760c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007346:	2b18      	cmp	r3, #24
 8007348:	f200 8155 	bhi.w	80075f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800734c:	a201      	add	r2, pc, #4	@ (adr r2, 8007354 <HAL_RCC_GetSysClockFreq+0x1c>)
 800734e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007352:	bf00      	nop
 8007354:	080073b9 	.word	0x080073b9
 8007358:	080075f7 	.word	0x080075f7
 800735c:	080075f7 	.word	0x080075f7
 8007360:	080075f7 	.word	0x080075f7
 8007364:	080075f7 	.word	0x080075f7
 8007368:	080075f7 	.word	0x080075f7
 800736c:	080075f7 	.word	0x080075f7
 8007370:	080075f7 	.word	0x080075f7
 8007374:	080073df 	.word	0x080073df
 8007378:	080075f7 	.word	0x080075f7
 800737c:	080075f7 	.word	0x080075f7
 8007380:	080075f7 	.word	0x080075f7
 8007384:	080075f7 	.word	0x080075f7
 8007388:	080075f7 	.word	0x080075f7
 800738c:	080075f7 	.word	0x080075f7
 8007390:	080075f7 	.word	0x080075f7
 8007394:	080073e5 	.word	0x080073e5
 8007398:	080075f7 	.word	0x080075f7
 800739c:	080075f7 	.word	0x080075f7
 80073a0:	080075f7 	.word	0x080075f7
 80073a4:	080075f7 	.word	0x080075f7
 80073a8:	080075f7 	.word	0x080075f7
 80073ac:	080075f7 	.word	0x080075f7
 80073b0:	080075f7 	.word	0x080075f7
 80073b4:	080073eb 	.word	0x080073eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073b8:	4b94      	ldr	r3, [pc, #592]	@ (800760c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0320 	and.w	r3, r3, #32
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d009      	beq.n	80073d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073c4:	4b91      	ldr	r3, [pc, #580]	@ (800760c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	08db      	lsrs	r3, r3, #3
 80073ca:	f003 0303 	and.w	r3, r3, #3
 80073ce:	4a90      	ldr	r2, [pc, #576]	@ (8007610 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80073d0:	fa22 f303 	lsr.w	r3, r2, r3
 80073d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80073d6:	e111      	b.n	80075fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80073d8:	4b8d      	ldr	r3, [pc, #564]	@ (8007610 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80073da:	61bb      	str	r3, [r7, #24]
      break;
 80073dc:	e10e      	b.n	80075fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80073de:	4b8d      	ldr	r3, [pc, #564]	@ (8007614 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80073e0:	61bb      	str	r3, [r7, #24]
      break;
 80073e2:	e10b      	b.n	80075fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80073e4:	4b8c      	ldr	r3, [pc, #560]	@ (8007618 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80073e6:	61bb      	str	r3, [r7, #24]
      break;
 80073e8:	e108      	b.n	80075fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073ea:	4b88      	ldr	r3, [pc, #544]	@ (800760c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ee:	f003 0303 	and.w	r3, r3, #3
 80073f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80073f4:	4b85      	ldr	r3, [pc, #532]	@ (800760c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f8:	091b      	lsrs	r3, r3, #4
 80073fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007400:	4b82      	ldr	r3, [pc, #520]	@ (800760c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800740a:	4b80      	ldr	r3, [pc, #512]	@ (800760c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800740c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800740e:	08db      	lsrs	r3, r3, #3
 8007410:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	fb02 f303 	mul.w	r3, r2, r3
 800741a:	ee07 3a90 	vmov	s15, r3
 800741e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007422:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 80e1 	beq.w	80075f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b02      	cmp	r3, #2
 8007432:	f000 8083 	beq.w	800753c <HAL_RCC_GetSysClockFreq+0x204>
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	2b02      	cmp	r3, #2
 800743a:	f200 80a1 	bhi.w	8007580 <HAL_RCC_GetSysClockFreq+0x248>
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d003      	beq.n	800744c <HAL_RCC_GetSysClockFreq+0x114>
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d056      	beq.n	80074f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800744a:	e099      	b.n	8007580 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800744c:	4b6f      	ldr	r3, [pc, #444]	@ (800760c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0320 	and.w	r3, r3, #32
 8007454:	2b00      	cmp	r3, #0
 8007456:	d02d      	beq.n	80074b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007458:	4b6c      	ldr	r3, [pc, #432]	@ (800760c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	08db      	lsrs	r3, r3, #3
 800745e:	f003 0303 	and.w	r3, r3, #3
 8007462:	4a6b      	ldr	r2, [pc, #428]	@ (8007610 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007464:	fa22 f303 	lsr.w	r3, r2, r3
 8007468:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	ee07 3a90 	vmov	s15, r3
 8007470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	ee07 3a90 	vmov	s15, r3
 800747a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007482:	4b62      	ldr	r3, [pc, #392]	@ (800760c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007492:	ed97 6a02 	vldr	s12, [r7, #8]
 8007496:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800761c <HAL_RCC_GetSysClockFreq+0x2e4>
 800749a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800749e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80074b2:	e087      	b.n	80075c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	ee07 3a90 	vmov	s15, r3
 80074ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074be:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007620 <HAL_RCC_GetSysClockFreq+0x2e8>
 80074c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074c6:	4b51      	ldr	r3, [pc, #324]	@ (800760c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ce:	ee07 3a90 	vmov	s15, r3
 80074d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80074da:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800761c <HAL_RCC_GetSysClockFreq+0x2e4>
 80074de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80074f6:	e065      	b.n	80075c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	ee07 3a90 	vmov	s15, r3
 80074fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007502:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007624 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800750a:	4b40      	ldr	r3, [pc, #256]	@ (800760c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800750c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800750e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751a:	ed97 6a02 	vldr	s12, [r7, #8]
 800751e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800761c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800752e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007536:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800753a:	e043      	b.n	80075c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	ee07 3a90 	vmov	s15, r3
 8007542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007546:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007628 <HAL_RCC_GetSysClockFreq+0x2f0>
 800754a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800754e:	4b2f      	ldr	r3, [pc, #188]	@ (800760c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007556:	ee07 3a90 	vmov	s15, r3
 800755a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800755e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007562:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800761c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800756a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800756e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800757a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800757e:	e021      	b.n	80075c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	ee07 3a90 	vmov	s15, r3
 8007586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007624 <HAL_RCC_GetSysClockFreq+0x2ec>
 800758e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007592:	4b1e      	ldr	r3, [pc, #120]	@ (800760c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759a:	ee07 3a90 	vmov	s15, r3
 800759e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80075a6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800761c <HAL_RCC_GetSysClockFreq+0x2e4>
 80075aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80075c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80075c4:	4b11      	ldr	r3, [pc, #68]	@ (800760c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c8:	0a5b      	lsrs	r3, r3, #9
 80075ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075ce:	3301      	adds	r3, #1
 80075d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	ee07 3a90 	vmov	s15, r3
 80075d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80075dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80075e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075e8:	ee17 3a90 	vmov	r3, s15
 80075ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80075ee:	e005      	b.n	80075fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	61bb      	str	r3, [r7, #24]
      break;
 80075f4:	e002      	b.n	80075fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80075f6:	4b07      	ldr	r3, [pc, #28]	@ (8007614 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80075f8:	61bb      	str	r3, [r7, #24]
      break;
 80075fa:	bf00      	nop
  }

  return sysclockfreq;
 80075fc:	69bb      	ldr	r3, [r7, #24]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3724      	adds	r7, #36	@ 0x24
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	58024400 	.word	0x58024400
 8007610:	03d09000 	.word	0x03d09000
 8007614:	003d0900 	.word	0x003d0900
 8007618:	016e3600 	.word	0x016e3600
 800761c:	46000000 	.word	0x46000000
 8007620:	4c742400 	.word	0x4c742400
 8007624:	4a742400 	.word	0x4a742400
 8007628:	4bb71b00 	.word	0x4bb71b00

0800762c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007632:	f7ff fe81 	bl	8007338 <HAL_RCC_GetSysClockFreq>
 8007636:	4602      	mov	r2, r0
 8007638:	4b10      	ldr	r3, [pc, #64]	@ (800767c <HAL_RCC_GetHCLKFreq+0x50>)
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	0a1b      	lsrs	r3, r3, #8
 800763e:	f003 030f 	and.w	r3, r3, #15
 8007642:	490f      	ldr	r1, [pc, #60]	@ (8007680 <HAL_RCC_GetHCLKFreq+0x54>)
 8007644:	5ccb      	ldrb	r3, [r1, r3]
 8007646:	f003 031f 	and.w	r3, r3, #31
 800764a:	fa22 f303 	lsr.w	r3, r2, r3
 800764e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007650:	4b0a      	ldr	r3, [pc, #40]	@ (800767c <HAL_RCC_GetHCLKFreq+0x50>)
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	f003 030f 	and.w	r3, r3, #15
 8007658:	4a09      	ldr	r2, [pc, #36]	@ (8007680 <HAL_RCC_GetHCLKFreq+0x54>)
 800765a:	5cd3      	ldrb	r3, [r2, r3]
 800765c:	f003 031f 	and.w	r3, r3, #31
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	fa22 f303 	lsr.w	r3, r2, r3
 8007666:	4a07      	ldr	r2, [pc, #28]	@ (8007684 <HAL_RCC_GetHCLKFreq+0x58>)
 8007668:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800766a:	4a07      	ldr	r2, [pc, #28]	@ (8007688 <HAL_RCC_GetHCLKFreq+0x5c>)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007670:	4b04      	ldr	r3, [pc, #16]	@ (8007684 <HAL_RCC_GetHCLKFreq+0x58>)
 8007672:	681b      	ldr	r3, [r3, #0]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	58024400 	.word	0x58024400
 8007680:	080103c8 	.word	0x080103c8
 8007684:	24000014 	.word	0x24000014
 8007688:	24000010 	.word	0x24000010

0800768c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007690:	f7ff ffcc 	bl	800762c <HAL_RCC_GetHCLKFreq>
 8007694:	4602      	mov	r2, r0
 8007696:	4b06      	ldr	r3, [pc, #24]	@ (80076b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	091b      	lsrs	r3, r3, #4
 800769c:	f003 0307 	and.w	r3, r3, #7
 80076a0:	4904      	ldr	r1, [pc, #16]	@ (80076b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80076a2:	5ccb      	ldrb	r3, [r1, r3]
 80076a4:	f003 031f 	and.w	r3, r3, #31
 80076a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	58024400 	.word	0x58024400
 80076b4:	080103c8 	.word	0x080103c8

080076b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80076bc:	f7ff ffb6 	bl	800762c <HAL_RCC_GetHCLKFreq>
 80076c0:	4602      	mov	r2, r0
 80076c2:	4b06      	ldr	r3, [pc, #24]	@ (80076dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80076c4:	69db      	ldr	r3, [r3, #28]
 80076c6:	0a1b      	lsrs	r3, r3, #8
 80076c8:	f003 0307 	and.w	r3, r3, #7
 80076cc:	4904      	ldr	r1, [pc, #16]	@ (80076e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80076ce:	5ccb      	ldrb	r3, [r1, r3]
 80076d0:	f003 031f 	and.w	r3, r3, #31
 80076d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80076d8:	4618      	mov	r0, r3
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	58024400 	.word	0x58024400
 80076e0:	080103c8 	.word	0x080103c8

080076e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076e8:	b0ca      	sub	sp, #296	@ 0x128
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80076f0:	2300      	movs	r3, #0
 80076f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80076f6:	2300      	movs	r3, #0
 80076f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80076fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007704:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007708:	2500      	movs	r5, #0
 800770a:	ea54 0305 	orrs.w	r3, r4, r5
 800770e:	d049      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007714:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007716:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800771a:	d02f      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800771c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007720:	d828      	bhi.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007722:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007726:	d01a      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007728:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800772c:	d822      	bhi.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007732:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007736:	d007      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007738:	e01c      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800773a:	4bb8      	ldr	r3, [pc, #736]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800773c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773e:	4ab7      	ldr	r2, [pc, #732]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007744:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007746:	e01a      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800774c:	3308      	adds	r3, #8
 800774e:	2102      	movs	r1, #2
 8007750:	4618      	mov	r0, r3
 8007752:	f001 fc8f 	bl	8009074 <RCCEx_PLL2_Config>
 8007756:	4603      	mov	r3, r0
 8007758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800775c:	e00f      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800775e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007762:	3328      	adds	r3, #40	@ 0x28
 8007764:	2102      	movs	r1, #2
 8007766:	4618      	mov	r0, r3
 8007768:	f001 fd36 	bl	80091d8 <RCCEx_PLL3_Config>
 800776c:	4603      	mov	r3, r0
 800776e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007772:	e004      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800777a:	e000      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800777c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800777e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10a      	bne.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007786:	4ba5      	ldr	r3, [pc, #660]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800778a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800778e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007792:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007794:	4aa1      	ldr	r2, [pc, #644]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007796:	430b      	orrs	r3, r1
 8007798:	6513      	str	r3, [r2, #80]	@ 0x50
 800779a:	e003      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800779c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80077a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80077b0:	f04f 0900 	mov.w	r9, #0
 80077b4:	ea58 0309 	orrs.w	r3, r8, r9
 80077b8:	d047      	beq.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80077ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077c0:	2b04      	cmp	r3, #4
 80077c2:	d82a      	bhi.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80077c4:	a201      	add	r2, pc, #4	@ (adr r2, 80077cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80077c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ca:	bf00      	nop
 80077cc:	080077e1 	.word	0x080077e1
 80077d0:	080077ef 	.word	0x080077ef
 80077d4:	08007805 	.word	0x08007805
 80077d8:	08007823 	.word	0x08007823
 80077dc:	08007823 	.word	0x08007823
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077e0:	4b8e      	ldr	r3, [pc, #568]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e4:	4a8d      	ldr	r2, [pc, #564]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077ec:	e01a      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f2:	3308      	adds	r3, #8
 80077f4:	2100      	movs	r1, #0
 80077f6:	4618      	mov	r0, r3
 80077f8:	f001 fc3c 	bl	8009074 <RCCEx_PLL2_Config>
 80077fc:	4603      	mov	r3, r0
 80077fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007802:	e00f      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007808:	3328      	adds	r3, #40	@ 0x28
 800780a:	2100      	movs	r1, #0
 800780c:	4618      	mov	r0, r3
 800780e:	f001 fce3 	bl	80091d8 <RCCEx_PLL3_Config>
 8007812:	4603      	mov	r3, r0
 8007814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007818:	e004      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007820:	e000      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007822:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10a      	bne.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800782c:	4b7b      	ldr	r3, [pc, #492]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800782e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007830:	f023 0107 	bic.w	r1, r3, #7
 8007834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800783a:	4a78      	ldr	r2, [pc, #480]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800783c:	430b      	orrs	r3, r1
 800783e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007840:	e003      	b.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007846:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800784a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800784e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007852:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007856:	f04f 0b00 	mov.w	fp, #0
 800785a:	ea5a 030b 	orrs.w	r3, sl, fp
 800785e:	d04c      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800786a:	d030      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800786c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007870:	d829      	bhi.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007872:	2bc0      	cmp	r3, #192	@ 0xc0
 8007874:	d02d      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007876:	2bc0      	cmp	r3, #192	@ 0xc0
 8007878:	d825      	bhi.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800787a:	2b80      	cmp	r3, #128	@ 0x80
 800787c:	d018      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800787e:	2b80      	cmp	r3, #128	@ 0x80
 8007880:	d821      	bhi.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007882:	2b00      	cmp	r3, #0
 8007884:	d002      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007886:	2b40      	cmp	r3, #64	@ 0x40
 8007888:	d007      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800788a:	e01c      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800788c:	4b63      	ldr	r3, [pc, #396]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800788e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007890:	4a62      	ldr	r2, [pc, #392]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007896:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007898:	e01c      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800789a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800789e:	3308      	adds	r3, #8
 80078a0:	2100      	movs	r1, #0
 80078a2:	4618      	mov	r0, r3
 80078a4:	f001 fbe6 	bl	8009074 <RCCEx_PLL2_Config>
 80078a8:	4603      	mov	r3, r0
 80078aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80078ae:	e011      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80078b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b4:	3328      	adds	r3, #40	@ 0x28
 80078b6:	2100      	movs	r1, #0
 80078b8:	4618      	mov	r0, r3
 80078ba:	f001 fc8d 	bl	80091d8 <RCCEx_PLL3_Config>
 80078be:	4603      	mov	r3, r0
 80078c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80078c4:	e006      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078cc:	e002      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80078ce:	bf00      	nop
 80078d0:	e000      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80078d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10a      	bne.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80078dc:	4b4f      	ldr	r3, [pc, #316]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078e0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80078e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078ea:	4a4c      	ldr	r2, [pc, #304]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078ec:	430b      	orrs	r3, r1
 80078ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80078f0:	e003      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80078fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007902:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007906:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800790a:	2300      	movs	r3, #0
 800790c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007910:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007914:	460b      	mov	r3, r1
 8007916:	4313      	orrs	r3, r2
 8007918:	d053      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800791a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800791e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007922:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007926:	d035      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007928:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800792c:	d82e      	bhi.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800792e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007932:	d031      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007934:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007938:	d828      	bhi.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800793a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800793e:	d01a      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007940:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007944:	d822      	bhi.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007946:	2b00      	cmp	r3, #0
 8007948:	d003      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800794a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800794e:	d007      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007950:	e01c      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007952:	4b32      	ldr	r3, [pc, #200]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007956:	4a31      	ldr	r2, [pc, #196]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007958:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800795c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800795e:	e01c      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007964:	3308      	adds	r3, #8
 8007966:	2100      	movs	r1, #0
 8007968:	4618      	mov	r0, r3
 800796a:	f001 fb83 	bl	8009074 <RCCEx_PLL2_Config>
 800796e:	4603      	mov	r3, r0
 8007970:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007974:	e011      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800797a:	3328      	adds	r3, #40	@ 0x28
 800797c:	2100      	movs	r1, #0
 800797e:	4618      	mov	r0, r3
 8007980:	f001 fc2a 	bl	80091d8 <RCCEx_PLL3_Config>
 8007984:	4603      	mov	r3, r0
 8007986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800798a:	e006      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007992:	e002      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007994:	bf00      	nop
 8007996:	e000      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007998:	bf00      	nop
    }

    if (ret == HAL_OK)
 800799a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10b      	bne.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80079a2:	4b1e      	ldr	r3, [pc, #120]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079a6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80079aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80079b2:	4a1a      	ldr	r2, [pc, #104]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079b4:	430b      	orrs	r3, r1
 80079b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80079b8:	e003      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80079c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ca:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80079ce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80079d2:	2300      	movs	r3, #0
 80079d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80079d8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80079dc:	460b      	mov	r3, r1
 80079de:	4313      	orrs	r3, r2
 80079e0:	d056      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80079e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80079ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80079ee:	d038      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80079f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80079f4:	d831      	bhi.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80079f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80079fa:	d034      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80079fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007a00:	d82b      	bhi.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a06:	d01d      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007a08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a0c:	d825      	bhi.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d006      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007a12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a16:	d00a      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007a18:	e01f      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a1a:	bf00      	nop
 8007a1c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a20:	4ba2      	ldr	r3, [pc, #648]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a24:	4aa1      	ldr	r2, [pc, #644]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a2c:	e01c      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a32:	3308      	adds	r3, #8
 8007a34:	2100      	movs	r1, #0
 8007a36:	4618      	mov	r0, r3
 8007a38:	f001 fb1c 	bl	8009074 <RCCEx_PLL2_Config>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007a42:	e011      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a48:	3328      	adds	r3, #40	@ 0x28
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f001 fbc3 	bl	80091d8 <RCCEx_PLL3_Config>
 8007a52:	4603      	mov	r3, r0
 8007a54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a58:	e006      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a60:	e002      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007a62:	bf00      	nop
 8007a64:	e000      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10b      	bne.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007a70:	4b8e      	ldr	r3, [pc, #568]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a74:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007a80:	4a8a      	ldr	r2, [pc, #552]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a82:	430b      	orrs	r3, r1
 8007a84:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a86:	e003      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a98:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007a9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007aa6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007aaa:	460b      	mov	r3, r1
 8007aac:	4313      	orrs	r3, r2
 8007aae:	d03a      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ab6:	2b30      	cmp	r3, #48	@ 0x30
 8007ab8:	d01f      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007aba:	2b30      	cmp	r3, #48	@ 0x30
 8007abc:	d819      	bhi.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007abe:	2b20      	cmp	r3, #32
 8007ac0:	d00c      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007ac2:	2b20      	cmp	r3, #32
 8007ac4:	d815      	bhi.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d019      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007aca:	2b10      	cmp	r3, #16
 8007acc:	d111      	bne.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ace:	4b77      	ldr	r3, [pc, #476]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad2:	4a76      	ldr	r2, [pc, #472]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007ada:	e011      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	2102      	movs	r1, #2
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f001 fac5 	bl	8009074 <RCCEx_PLL2_Config>
 8007aea:	4603      	mov	r3, r0
 8007aec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007af0:	e006      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007af8:	e002      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007afa:	bf00      	nop
 8007afc:	e000      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10a      	bne.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007b08:	4b68      	ldr	r3, [pc, #416]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b0c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b16:	4a65      	ldr	r2, [pc, #404]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b18:	430b      	orrs	r3, r1
 8007b1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007b1c:	e003      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007b32:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b36:	2300      	movs	r3, #0
 8007b38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007b3c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007b40:	460b      	mov	r3, r1
 8007b42:	4313      	orrs	r3, r2
 8007b44:	d051      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b50:	d035      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007b52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b56:	d82e      	bhi.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007b58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b5c:	d031      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007b5e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b62:	d828      	bhi.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007b64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b68:	d01a      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007b6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b6e:	d822      	bhi.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d003      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007b74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b78:	d007      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007b7a:	e01c      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b7c:	4b4b      	ldr	r3, [pc, #300]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b80:	4a4a      	ldr	r2, [pc, #296]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007b88:	e01c      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b8e:	3308      	adds	r3, #8
 8007b90:	2100      	movs	r1, #0
 8007b92:	4618      	mov	r0, r3
 8007b94:	f001 fa6e 	bl	8009074 <RCCEx_PLL2_Config>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007b9e:	e011      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba4:	3328      	adds	r3, #40	@ 0x28
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f001 fb15 	bl	80091d8 <RCCEx_PLL3_Config>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007bb4:	e006      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bbc:	e002      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007bbe:	bf00      	nop
 8007bc0:	e000      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10a      	bne.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007bcc:	4b37      	ldr	r3, [pc, #220]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bd0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bda:	4a34      	ldr	r2, [pc, #208]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bdc:	430b      	orrs	r3, r1
 8007bde:	6513      	str	r3, [r2, #80]	@ 0x50
 8007be0:	e003      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007be6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007bf6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007c00:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007c04:	460b      	mov	r3, r1
 8007c06:	4313      	orrs	r3, r2
 8007c08:	d056      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c14:	d033      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007c16:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c1a:	d82c      	bhi.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007c1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c20:	d02f      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007c22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c26:	d826      	bhi.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007c28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c2c:	d02b      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007c2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c32:	d820      	bhi.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007c34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c38:	d012      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007c3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c3e:	d81a      	bhi.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d022      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c48:	d115      	bne.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c4e:	3308      	adds	r3, #8
 8007c50:	2101      	movs	r1, #1
 8007c52:	4618      	mov	r0, r3
 8007c54:	f001 fa0e 	bl	8009074 <RCCEx_PLL2_Config>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007c5e:	e015      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c64:	3328      	adds	r3, #40	@ 0x28
 8007c66:	2101      	movs	r1, #1
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f001 fab5 	bl	80091d8 <RCCEx_PLL3_Config>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007c74:	e00a      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c7c:	e006      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007c7e:	bf00      	nop
 8007c80:	e004      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007c82:	bf00      	nop
 8007c84:	e002      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007c86:	bf00      	nop
 8007c88:	e000      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10d      	bne.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007c94:	4b05      	ldr	r3, [pc, #20]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c98:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ca2:	4a02      	ldr	r2, [pc, #8]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ca4:	430b      	orrs	r3, r1
 8007ca6:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ca8:	e006      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007caa:	bf00      	nop
 8007cac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007cc8:	2300      	movs	r3, #0
 8007cca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007cce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	d055      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ce4:	d033      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007ce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007cea:	d82c      	bhi.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cf0:	d02f      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cf6:	d826      	bhi.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007cf8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007cfc:	d02b      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007cfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d02:	d820      	bhi.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007d04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d08:	d012      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007d0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d0e:	d81a      	bhi.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d022      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007d14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d18:	d115      	bne.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1e:	3308      	adds	r3, #8
 8007d20:	2101      	movs	r1, #1
 8007d22:	4618      	mov	r0, r3
 8007d24:	f001 f9a6 	bl	8009074 <RCCEx_PLL2_Config>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007d2e:	e015      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d34:	3328      	adds	r3, #40	@ 0x28
 8007d36:	2101      	movs	r1, #1
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f001 fa4d 	bl	80091d8 <RCCEx_PLL3_Config>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007d44:	e00a      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d4c:	e006      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d4e:	bf00      	nop
 8007d50:	e004      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d52:	bf00      	nop
 8007d54:	e002      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d56:	bf00      	nop
 8007d58:	e000      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10b      	bne.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007d64:	4ba3      	ldr	r3, [pc, #652]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d68:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d74:	4a9f      	ldr	r2, [pc, #636]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d76:	430b      	orrs	r3, r1
 8007d78:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d7a:	e003      	b.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007d90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d94:	2300      	movs	r3, #0
 8007d96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007d9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007d9e:	460b      	mov	r3, r1
 8007da0:	4313      	orrs	r3, r2
 8007da2:	d037      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007daa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dae:	d00e      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007db0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007db4:	d816      	bhi.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d018      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007dba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dbe:	d111      	bne.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dc0:	4b8c      	ldr	r3, [pc, #560]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc4:	4a8b      	ldr	r2, [pc, #556]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007dcc:	e00f      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd2:	3308      	adds	r3, #8
 8007dd4:	2101      	movs	r1, #1
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f001 f94c 	bl	8009074 <RCCEx_PLL2_Config>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007de2:	e004      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dea:	e000      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10a      	bne.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007df6:	4b7f      	ldr	r3, [pc, #508]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dfa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e04:	4a7b      	ldr	r2, [pc, #492]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e06:	430b      	orrs	r3, r1
 8007e08:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e0a:	e003      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007e20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e24:	2300      	movs	r3, #0
 8007e26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007e2a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007e2e:	460b      	mov	r3, r1
 8007e30:	4313      	orrs	r3, r2
 8007e32:	d039      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e3a:	2b03      	cmp	r3, #3
 8007e3c:	d81c      	bhi.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e44 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e44:	08007e81 	.word	0x08007e81
 8007e48:	08007e55 	.word	0x08007e55
 8007e4c:	08007e63 	.word	0x08007e63
 8007e50:	08007e81 	.word	0x08007e81
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e54:	4b67      	ldr	r3, [pc, #412]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e58:	4a66      	ldr	r2, [pc, #408]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007e60:	e00f      	b.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e66:	3308      	adds	r3, #8
 8007e68:	2102      	movs	r1, #2
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f001 f902 	bl	8009074 <RCCEx_PLL2_Config>
 8007e70:	4603      	mov	r3, r0
 8007e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007e76:	e004      	b.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e7e:	e000      	b.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10a      	bne.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007e8a:	4b5a      	ldr	r3, [pc, #360]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e8e:	f023 0103 	bic.w	r1, r3, #3
 8007e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e98:	4a56      	ldr	r2, [pc, #344]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e9a:	430b      	orrs	r3, r1
 8007e9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007e9e:	e003      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ea4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007eb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007eb8:	2300      	movs	r3, #0
 8007eba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007ebe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	f000 809f 	beq.w	8008008 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007eca:	4b4b      	ldr	r3, [pc, #300]	@ (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a4a      	ldr	r2, [pc, #296]	@ (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ed4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ed6:	f7fb fdd9 	bl	8003a8c <HAL_GetTick>
 8007eda:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ede:	e00b      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ee0:	f7fb fdd4 	bl	8003a8c <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	2b64      	cmp	r3, #100	@ 0x64
 8007eee:	d903      	bls.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ef6:	e005      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ef8:	4b3f      	ldr	r3, [pc, #252]	@ (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d0ed      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007f04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d179      	bne.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007f0c:	4b39      	ldr	r3, [pc, #228]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f0e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007f18:	4053      	eors	r3, r2
 8007f1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d015      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f22:	4b34      	ldr	r3, [pc, #208]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f2a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f2e:	4b31      	ldr	r3, [pc, #196]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f32:	4a30      	ldr	r2, [pc, #192]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f38:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f3a:	4b2e      	ldr	r3, [pc, #184]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f3e:	4a2d      	ldr	r2, [pc, #180]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f44:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007f46:	4a2b      	ldr	r2, [pc, #172]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007f4c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007f56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f5a:	d118      	bne.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f5c:	f7fb fd96 	bl	8003a8c <HAL_GetTick>
 8007f60:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f64:	e00d      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f66:	f7fb fd91 	bl	8003a8c <HAL_GetTick>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007f70:	1ad2      	subs	r2, r2, r3
 8007f72:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d903      	bls.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007f80:	e005      	b.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f82:	4b1c      	ldr	r3, [pc, #112]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f86:	f003 0302 	and.w	r3, r3, #2
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d0eb      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d129      	bne.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fa2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fa6:	d10e      	bne.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007fa8:	4b12      	ldr	r3, [pc, #72]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007fb8:	091a      	lsrs	r2, r3, #4
 8007fba:	4b10      	ldr	r3, [pc, #64]	@ (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	4a0d      	ldr	r2, [pc, #52]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fc0:	430b      	orrs	r3, r1
 8007fc2:	6113      	str	r3, [r2, #16]
 8007fc4:	e005      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	4a0a      	ldr	r2, [pc, #40]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fcc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007fd0:	6113      	str	r3, [r2, #16]
 8007fd2:	4b08      	ldr	r3, [pc, #32]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fd4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fe2:	4a04      	ldr	r2, [pc, #16]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fe4:	430b      	orrs	r3, r1
 8007fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fe8:	e00e      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007ff2:	e009      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007ff4:	58024400 	.word	0x58024400
 8007ff8:	58024800 	.word	0x58024800
 8007ffc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008000:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008004:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800800c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008010:	f002 0301 	and.w	r3, r2, #1
 8008014:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008018:	2300      	movs	r3, #0
 800801a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800801e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008022:	460b      	mov	r3, r1
 8008024:	4313      	orrs	r3, r2
 8008026:	f000 8089 	beq.w	800813c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800802a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800802e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008030:	2b28      	cmp	r3, #40	@ 0x28
 8008032:	d86b      	bhi.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008034:	a201      	add	r2, pc, #4	@ (adr r2, 800803c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803a:	bf00      	nop
 800803c:	08008115 	.word	0x08008115
 8008040:	0800810d 	.word	0x0800810d
 8008044:	0800810d 	.word	0x0800810d
 8008048:	0800810d 	.word	0x0800810d
 800804c:	0800810d 	.word	0x0800810d
 8008050:	0800810d 	.word	0x0800810d
 8008054:	0800810d 	.word	0x0800810d
 8008058:	0800810d 	.word	0x0800810d
 800805c:	080080e1 	.word	0x080080e1
 8008060:	0800810d 	.word	0x0800810d
 8008064:	0800810d 	.word	0x0800810d
 8008068:	0800810d 	.word	0x0800810d
 800806c:	0800810d 	.word	0x0800810d
 8008070:	0800810d 	.word	0x0800810d
 8008074:	0800810d 	.word	0x0800810d
 8008078:	0800810d 	.word	0x0800810d
 800807c:	080080f7 	.word	0x080080f7
 8008080:	0800810d 	.word	0x0800810d
 8008084:	0800810d 	.word	0x0800810d
 8008088:	0800810d 	.word	0x0800810d
 800808c:	0800810d 	.word	0x0800810d
 8008090:	0800810d 	.word	0x0800810d
 8008094:	0800810d 	.word	0x0800810d
 8008098:	0800810d 	.word	0x0800810d
 800809c:	08008115 	.word	0x08008115
 80080a0:	0800810d 	.word	0x0800810d
 80080a4:	0800810d 	.word	0x0800810d
 80080a8:	0800810d 	.word	0x0800810d
 80080ac:	0800810d 	.word	0x0800810d
 80080b0:	0800810d 	.word	0x0800810d
 80080b4:	0800810d 	.word	0x0800810d
 80080b8:	0800810d 	.word	0x0800810d
 80080bc:	08008115 	.word	0x08008115
 80080c0:	0800810d 	.word	0x0800810d
 80080c4:	0800810d 	.word	0x0800810d
 80080c8:	0800810d 	.word	0x0800810d
 80080cc:	0800810d 	.word	0x0800810d
 80080d0:	0800810d 	.word	0x0800810d
 80080d4:	0800810d 	.word	0x0800810d
 80080d8:	0800810d 	.word	0x0800810d
 80080dc:	08008115 	.word	0x08008115
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e4:	3308      	adds	r3, #8
 80080e6:	2101      	movs	r1, #1
 80080e8:	4618      	mov	r0, r3
 80080ea:	f000 ffc3 	bl	8009074 <RCCEx_PLL2_Config>
 80080ee:	4603      	mov	r3, r0
 80080f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80080f4:	e00f      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080fa:	3328      	adds	r3, #40	@ 0x28
 80080fc:	2101      	movs	r1, #1
 80080fe:	4618      	mov	r0, r3
 8008100:	f001 f86a 	bl	80091d8 <RCCEx_PLL3_Config>
 8008104:	4603      	mov	r3, r0
 8008106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800810a:	e004      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008112:	e000      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008114:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800811a:	2b00      	cmp	r3, #0
 800811c:	d10a      	bne.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800811e:	4bbf      	ldr	r3, [pc, #764]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008122:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800812a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800812c:	4abb      	ldr	r2, [pc, #748]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800812e:	430b      	orrs	r3, r1
 8008130:	6553      	str	r3, [r2, #84]	@ 0x54
 8008132:	e003      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008134:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008138:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800813c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008144:	f002 0302 	and.w	r3, r2, #2
 8008148:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800814c:	2300      	movs	r3, #0
 800814e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008152:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008156:	460b      	mov	r3, r1
 8008158:	4313      	orrs	r3, r2
 800815a:	d041      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800815c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008160:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008162:	2b05      	cmp	r3, #5
 8008164:	d824      	bhi.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008166:	a201      	add	r2, pc, #4	@ (adr r2, 800816c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816c:	080081b9 	.word	0x080081b9
 8008170:	08008185 	.word	0x08008185
 8008174:	0800819b 	.word	0x0800819b
 8008178:	080081b9 	.word	0x080081b9
 800817c:	080081b9 	.word	0x080081b9
 8008180:	080081b9 	.word	0x080081b9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008188:	3308      	adds	r3, #8
 800818a:	2101      	movs	r1, #1
 800818c:	4618      	mov	r0, r3
 800818e:	f000 ff71 	bl	8009074 <RCCEx_PLL2_Config>
 8008192:	4603      	mov	r3, r0
 8008194:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008198:	e00f      	b.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800819a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819e:	3328      	adds	r3, #40	@ 0x28
 80081a0:	2101      	movs	r1, #1
 80081a2:	4618      	mov	r0, r3
 80081a4:	f001 f818 	bl	80091d8 <RCCEx_PLL3_Config>
 80081a8:	4603      	mov	r3, r0
 80081aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80081ae:	e004      	b.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081b6:	e000      	b.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80081b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10a      	bne.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80081c2:	4b96      	ldr	r3, [pc, #600]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80081c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081c6:	f023 0107 	bic.w	r1, r3, #7
 80081ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80081d0:	4a92      	ldr	r2, [pc, #584]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80081d2:	430b      	orrs	r3, r1
 80081d4:	6553      	str	r3, [r2, #84]	@ 0x54
 80081d6:	e003      	b.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80081e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e8:	f002 0304 	and.w	r3, r2, #4
 80081ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80081f0:	2300      	movs	r3, #0
 80081f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80081f6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80081fa:	460b      	mov	r3, r1
 80081fc:	4313      	orrs	r3, r2
 80081fe:	d044      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008204:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008208:	2b05      	cmp	r3, #5
 800820a:	d825      	bhi.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800820c:	a201      	add	r2, pc, #4	@ (adr r2, 8008214 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800820e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008212:	bf00      	nop
 8008214:	08008261 	.word	0x08008261
 8008218:	0800822d 	.word	0x0800822d
 800821c:	08008243 	.word	0x08008243
 8008220:	08008261 	.word	0x08008261
 8008224:	08008261 	.word	0x08008261
 8008228:	08008261 	.word	0x08008261
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800822c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008230:	3308      	adds	r3, #8
 8008232:	2101      	movs	r1, #1
 8008234:	4618      	mov	r0, r3
 8008236:	f000 ff1d 	bl	8009074 <RCCEx_PLL2_Config>
 800823a:	4603      	mov	r3, r0
 800823c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008240:	e00f      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008246:	3328      	adds	r3, #40	@ 0x28
 8008248:	2101      	movs	r1, #1
 800824a:	4618      	mov	r0, r3
 800824c:	f000 ffc4 	bl	80091d8 <RCCEx_PLL3_Config>
 8008250:	4603      	mov	r3, r0
 8008252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008256:	e004      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800825e:	e000      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10b      	bne.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800826a:	4b6c      	ldr	r3, [pc, #432]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800826c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800826e:	f023 0107 	bic.w	r1, r3, #7
 8008272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008276:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800827a:	4a68      	ldr	r2, [pc, #416]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800827c:	430b      	orrs	r3, r1
 800827e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008280:	e003      	b.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008286:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800828a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800828e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008292:	f002 0320 	and.w	r3, r2, #32
 8008296:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800829a:	2300      	movs	r3, #0
 800829c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80082a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80082a4:	460b      	mov	r3, r1
 80082a6:	4313      	orrs	r3, r2
 80082a8:	d055      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80082aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80082b6:	d033      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80082b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80082bc:	d82c      	bhi.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80082be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082c2:	d02f      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80082c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082c8:	d826      	bhi.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80082ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80082ce:	d02b      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80082d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80082d4:	d820      	bhi.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80082d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082da:	d012      	beq.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80082dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082e0:	d81a      	bhi.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d022      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80082e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082ea:	d115      	bne.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082f0:	3308      	adds	r3, #8
 80082f2:	2100      	movs	r1, #0
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 febd 	bl	8009074 <RCCEx_PLL2_Config>
 80082fa:	4603      	mov	r3, r0
 80082fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008300:	e015      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008306:	3328      	adds	r3, #40	@ 0x28
 8008308:	2102      	movs	r1, #2
 800830a:	4618      	mov	r0, r3
 800830c:	f000 ff64 	bl	80091d8 <RCCEx_PLL3_Config>
 8008310:	4603      	mov	r3, r0
 8008312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008316:	e00a      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800831e:	e006      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008320:	bf00      	nop
 8008322:	e004      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008324:	bf00      	nop
 8008326:	e002      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008328:	bf00      	nop
 800832a:	e000      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800832c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800832e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10b      	bne.n	800834e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008336:	4b39      	ldr	r3, [pc, #228]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800833a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800833e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008346:	4a35      	ldr	r2, [pc, #212]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008348:	430b      	orrs	r3, r1
 800834a:	6553      	str	r3, [r2, #84]	@ 0x54
 800834c:	e003      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800834e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008352:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800835a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008362:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008366:	2300      	movs	r3, #0
 8008368:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800836c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008370:	460b      	mov	r3, r1
 8008372:	4313      	orrs	r3, r2
 8008374:	d058      	beq.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800837a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800837e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008382:	d033      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008384:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008388:	d82c      	bhi.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800838a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800838e:	d02f      	beq.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008394:	d826      	bhi.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008396:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800839a:	d02b      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800839c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80083a0:	d820      	bhi.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80083a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083a6:	d012      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80083a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083ac:	d81a      	bhi.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d022      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80083b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083b6:	d115      	bne.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083bc:	3308      	adds	r3, #8
 80083be:	2100      	movs	r1, #0
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 fe57 	bl	8009074 <RCCEx_PLL2_Config>
 80083c6:	4603      	mov	r3, r0
 80083c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80083cc:	e015      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80083ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083d2:	3328      	adds	r3, #40	@ 0x28
 80083d4:	2102      	movs	r1, #2
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 fefe 	bl	80091d8 <RCCEx_PLL3_Config>
 80083dc:	4603      	mov	r3, r0
 80083de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80083e2:	e00a      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083ea:	e006      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80083ec:	bf00      	nop
 80083ee:	e004      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80083f0:	bf00      	nop
 80083f2:	e002      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80083f4:	bf00      	nop
 80083f6:	e000      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80083f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10e      	bne.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008402:	4b06      	ldr	r3, [pc, #24]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008406:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800840a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800840e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008412:	4a02      	ldr	r2, [pc, #8]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008414:	430b      	orrs	r3, r1
 8008416:	6593      	str	r3, [r2, #88]	@ 0x58
 8008418:	e006      	b.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800841a:	bf00      	nop
 800841c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008420:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008424:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800842c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008430:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008434:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008438:	2300      	movs	r3, #0
 800843a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800843e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008442:	460b      	mov	r3, r1
 8008444:	4313      	orrs	r3, r2
 8008446:	d055      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800844c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008450:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008454:	d033      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008456:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800845a:	d82c      	bhi.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800845c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008460:	d02f      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008462:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008466:	d826      	bhi.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008468:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800846c:	d02b      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800846e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008472:	d820      	bhi.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008474:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008478:	d012      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800847a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800847e:	d81a      	bhi.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008480:	2b00      	cmp	r3, #0
 8008482:	d022      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008484:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008488:	d115      	bne.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800848a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800848e:	3308      	adds	r3, #8
 8008490:	2100      	movs	r1, #0
 8008492:	4618      	mov	r0, r3
 8008494:	f000 fdee 	bl	8009074 <RCCEx_PLL2_Config>
 8008498:	4603      	mov	r3, r0
 800849a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800849e:	e015      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084a4:	3328      	adds	r3, #40	@ 0x28
 80084a6:	2102      	movs	r1, #2
 80084a8:	4618      	mov	r0, r3
 80084aa:	f000 fe95 	bl	80091d8 <RCCEx_PLL3_Config>
 80084ae:	4603      	mov	r3, r0
 80084b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80084b4:	e00a      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084bc:	e006      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80084be:	bf00      	nop
 80084c0:	e004      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80084c2:	bf00      	nop
 80084c4:	e002      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80084c6:	bf00      	nop
 80084c8:	e000      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80084ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10b      	bne.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80084d4:	4ba1      	ldr	r3, [pc, #644]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084d8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80084dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80084e4:	4a9d      	ldr	r2, [pc, #628]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084e6:	430b      	orrs	r3, r1
 80084e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80084ea:	e003      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80084f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fc:	f002 0308 	and.w	r3, r2, #8
 8008500:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008504:	2300      	movs	r3, #0
 8008506:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800850a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800850e:	460b      	mov	r3, r1
 8008510:	4313      	orrs	r3, r2
 8008512:	d01e      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008518:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800851c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008520:	d10c      	bne.n	800853c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008526:	3328      	adds	r3, #40	@ 0x28
 8008528:	2102      	movs	r1, #2
 800852a:	4618      	mov	r0, r3
 800852c:	f000 fe54 	bl	80091d8 <RCCEx_PLL3_Config>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d002      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800853c:	4b87      	ldr	r3, [pc, #540]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800853e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008540:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008548:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800854c:	4a83      	ldr	r2, [pc, #524]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800854e:	430b      	orrs	r3, r1
 8008550:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855a:	f002 0310 	and.w	r3, r2, #16
 800855e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008562:	2300      	movs	r3, #0
 8008564:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008568:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800856c:	460b      	mov	r3, r1
 800856e:	4313      	orrs	r3, r2
 8008570:	d01e      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008576:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800857a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800857e:	d10c      	bne.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008584:	3328      	adds	r3, #40	@ 0x28
 8008586:	2102      	movs	r1, #2
 8008588:	4618      	mov	r0, r3
 800858a:	f000 fe25 	bl	80091d8 <RCCEx_PLL3_Config>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d002      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800859a:	4b70      	ldr	r3, [pc, #448]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800859c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800859e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80085a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80085aa:	4a6c      	ldr	r2, [pc, #432]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085ac:	430b      	orrs	r3, r1
 80085ae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80085b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80085bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80085c0:	2300      	movs	r3, #0
 80085c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80085c6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80085ca:	460b      	mov	r3, r1
 80085cc:	4313      	orrs	r3, r2
 80085ce:	d03e      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80085d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80085d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085dc:	d022      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80085de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085e2:	d81b      	bhi.n	800861c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d003      	beq.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80085e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085ec:	d00b      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80085ee:	e015      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085f4:	3308      	adds	r3, #8
 80085f6:	2100      	movs	r1, #0
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 fd3b 	bl	8009074 <RCCEx_PLL2_Config>
 80085fe:	4603      	mov	r3, r0
 8008600:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008604:	e00f      	b.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800860a:	3328      	adds	r3, #40	@ 0x28
 800860c:	2102      	movs	r1, #2
 800860e:	4618      	mov	r0, r3
 8008610:	f000 fde2 	bl	80091d8 <RCCEx_PLL3_Config>
 8008614:	4603      	mov	r3, r0
 8008616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800861a:	e004      	b.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008622:	e000      	b.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008624:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800862a:	2b00      	cmp	r3, #0
 800862c:	d10b      	bne.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800862e:	4b4b      	ldr	r3, [pc, #300]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008632:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800863a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800863e:	4a47      	ldr	r2, [pc, #284]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008640:	430b      	orrs	r3, r1
 8008642:	6593      	str	r3, [r2, #88]	@ 0x58
 8008644:	e003      	b.n	800864e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008646:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800864a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800864e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008656:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800865a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800865c:	2300      	movs	r3, #0
 800865e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008660:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008664:	460b      	mov	r3, r1
 8008666:	4313      	orrs	r3, r2
 8008668:	d03b      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800866a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800866e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008672:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008676:	d01f      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008678:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800867c:	d818      	bhi.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800867e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008682:	d003      	beq.n	800868c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008684:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008688:	d007      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800868a:	e011      	b.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800868c:	4b33      	ldr	r3, [pc, #204]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800868e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008690:	4a32      	ldr	r2, [pc, #200]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008692:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008696:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008698:	e00f      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800869a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800869e:	3328      	adds	r3, #40	@ 0x28
 80086a0:	2101      	movs	r1, #1
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 fd98 	bl	80091d8 <RCCEx_PLL3_Config>
 80086a8:	4603      	mov	r3, r0
 80086aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80086ae:	e004      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086b6:	e000      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80086b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10b      	bne.n	80086da <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80086c2:	4b26      	ldr	r3, [pc, #152]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80086ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086d2:	4a22      	ldr	r2, [pc, #136]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086d4:	430b      	orrs	r3, r1
 80086d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80086d8:	e003      	b.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80086e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ea:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80086ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80086f0:	2300      	movs	r3, #0
 80086f2:	677b      	str	r3, [r7, #116]	@ 0x74
 80086f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80086f8:	460b      	mov	r3, r1
 80086fa:	4313      	orrs	r3, r2
 80086fc:	d034      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80086fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008704:	2b00      	cmp	r3, #0
 8008706:	d003      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800870c:	d007      	beq.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800870e:	e011      	b.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008710:	4b12      	ldr	r3, [pc, #72]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008714:	4a11      	ldr	r2, [pc, #68]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800871a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800871c:	e00e      	b.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800871e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008722:	3308      	adds	r3, #8
 8008724:	2102      	movs	r1, #2
 8008726:	4618      	mov	r0, r3
 8008728:	f000 fca4 	bl	8009074 <RCCEx_PLL2_Config>
 800872c:	4603      	mov	r3, r0
 800872e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008732:	e003      	b.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800873a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800873c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10d      	bne.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008744:	4b05      	ldr	r3, [pc, #20]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008748:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800874c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008750:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008752:	4a02      	ldr	r2, [pc, #8]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008754:	430b      	orrs	r3, r1
 8008756:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008758:	e006      	b.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800875a:	bf00      	nop
 800875c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008760:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008764:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800876c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008770:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008774:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008776:	2300      	movs	r3, #0
 8008778:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800877a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800877e:	460b      	mov	r3, r1
 8008780:	4313      	orrs	r3, r2
 8008782:	d00c      	beq.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008788:	3328      	adds	r3, #40	@ 0x28
 800878a:	2102      	movs	r1, #2
 800878c:	4618      	mov	r0, r3
 800878e:	f000 fd23 	bl	80091d8 <RCCEx_PLL3_Config>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d002      	beq.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800879e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80087aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80087ac:	2300      	movs	r3, #0
 80087ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80087b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80087b4:	460b      	mov	r3, r1
 80087b6:	4313      	orrs	r3, r2
 80087b8:	d038      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80087ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087c6:	d018      	beq.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80087c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087cc:	d811      	bhi.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80087ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087d2:	d014      	beq.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80087d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087d8:	d80b      	bhi.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d011      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80087de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087e2:	d106      	bne.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087e4:	4bc3      	ldr	r3, [pc, #780]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e8:	4ac2      	ldr	r2, [pc, #776]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80087f0:	e008      	b.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087f8:	e004      	b.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80087fa:	bf00      	nop
 80087fc:	e002      	b.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80087fe:	bf00      	nop
 8008800:	e000      	b.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008804:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008808:	2b00      	cmp	r3, #0
 800880a:	d10b      	bne.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800880c:	4bb9      	ldr	r3, [pc, #740]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800880e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008810:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008818:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800881c:	4ab5      	ldr	r2, [pc, #724]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800881e:	430b      	orrs	r3, r1
 8008820:	6553      	str	r3, [r2, #84]	@ 0x54
 8008822:	e003      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008828:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800882c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008834:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008838:	65bb      	str	r3, [r7, #88]	@ 0x58
 800883a:	2300      	movs	r3, #0
 800883c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800883e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008842:	460b      	mov	r3, r1
 8008844:	4313      	orrs	r3, r2
 8008846:	d009      	beq.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008848:	4baa      	ldr	r3, [pc, #680]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800884a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800884c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008856:	4aa7      	ldr	r2, [pc, #668]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008858:	430b      	orrs	r3, r1
 800885a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800885c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008864:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008868:	653b      	str	r3, [r7, #80]	@ 0x50
 800886a:	2300      	movs	r3, #0
 800886c:	657b      	str	r3, [r7, #84]	@ 0x54
 800886e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008872:	460b      	mov	r3, r1
 8008874:	4313      	orrs	r3, r2
 8008876:	d00a      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008878:	4b9e      	ldr	r3, [pc, #632]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008884:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008888:	4a9a      	ldr	r2, [pc, #616]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800888a:	430b      	orrs	r3, r1
 800888c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800888e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008896:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800889a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800889c:	2300      	movs	r3, #0
 800889e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088a0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80088a4:	460b      	mov	r3, r1
 80088a6:	4313      	orrs	r3, r2
 80088a8:	d009      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80088aa:	4b92      	ldr	r3, [pc, #584]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088ae:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80088b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088b8:	4a8e      	ldr	r2, [pc, #568]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088ba:	430b      	orrs	r3, r1
 80088bc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80088be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80088ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80088cc:	2300      	movs	r3, #0
 80088ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80088d0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80088d4:	460b      	mov	r3, r1
 80088d6:	4313      	orrs	r3, r2
 80088d8:	d00e      	beq.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80088da:	4b86      	ldr	r3, [pc, #536]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	4a85      	ldr	r2, [pc, #532]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80088e4:	6113      	str	r3, [r2, #16]
 80088e6:	4b83      	ldr	r3, [pc, #524]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088e8:	6919      	ldr	r1, [r3, #16]
 80088ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80088f2:	4a80      	ldr	r2, [pc, #512]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088f4:	430b      	orrs	r3, r1
 80088f6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80088f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008900:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008904:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008906:	2300      	movs	r3, #0
 8008908:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800890a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800890e:	460b      	mov	r3, r1
 8008910:	4313      	orrs	r3, r2
 8008912:	d009      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008914:	4b77      	ldr	r3, [pc, #476]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008918:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800891c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008922:	4a74      	ldr	r2, [pc, #464]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008924:	430b      	orrs	r3, r1
 8008926:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800892c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008930:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008934:	633b      	str	r3, [r7, #48]	@ 0x30
 8008936:	2300      	movs	r3, #0
 8008938:	637b      	str	r3, [r7, #52]	@ 0x34
 800893a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800893e:	460b      	mov	r3, r1
 8008940:	4313      	orrs	r3, r2
 8008942:	d00a      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008944:	4b6b      	ldr	r3, [pc, #428]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008948:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800894c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008950:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008954:	4a67      	ldr	r2, [pc, #412]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008956:	430b      	orrs	r3, r1
 8008958:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800895a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800895e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008962:	2100      	movs	r1, #0
 8008964:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008966:	f003 0301 	and.w	r3, r3, #1
 800896a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800896c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008970:	460b      	mov	r3, r1
 8008972:	4313      	orrs	r3, r2
 8008974:	d011      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800897a:	3308      	adds	r3, #8
 800897c:	2100      	movs	r1, #0
 800897e:	4618      	mov	r0, r3
 8008980:	f000 fb78 	bl	8009074 <RCCEx_PLL2_Config>
 8008984:	4603      	mov	r3, r0
 8008986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800898a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800898e:	2b00      	cmp	r3, #0
 8008990:	d003      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008996:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800899a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800899e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a2:	2100      	movs	r1, #0
 80089a4:	6239      	str	r1, [r7, #32]
 80089a6:	f003 0302 	and.w	r3, r3, #2
 80089aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80089ac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80089b0:	460b      	mov	r3, r1
 80089b2:	4313      	orrs	r3, r2
 80089b4:	d011      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ba:	3308      	adds	r3, #8
 80089bc:	2101      	movs	r1, #1
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 fb58 	bl	8009074 <RCCEx_PLL2_Config>
 80089c4:	4603      	mov	r3, r0
 80089c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80089ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d003      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80089da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e2:	2100      	movs	r1, #0
 80089e4:	61b9      	str	r1, [r7, #24]
 80089e6:	f003 0304 	and.w	r3, r3, #4
 80089ea:	61fb      	str	r3, [r7, #28]
 80089ec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80089f0:	460b      	mov	r3, r1
 80089f2:	4313      	orrs	r3, r2
 80089f4:	d011      	beq.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80089f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089fa:	3308      	adds	r3, #8
 80089fc:	2102      	movs	r1, #2
 80089fe:	4618      	mov	r0, r3
 8008a00:	f000 fb38 	bl	8009074 <RCCEx_PLL2_Config>
 8008a04:	4603      	mov	r3, r0
 8008a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d003      	beq.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a22:	2100      	movs	r1, #0
 8008a24:	6139      	str	r1, [r7, #16]
 8008a26:	f003 0308 	and.w	r3, r3, #8
 8008a2a:	617b      	str	r3, [r7, #20]
 8008a2c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008a30:	460b      	mov	r3, r1
 8008a32:	4313      	orrs	r3, r2
 8008a34:	d011      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a3a:	3328      	adds	r3, #40	@ 0x28
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 fbca 	bl	80091d8 <RCCEx_PLL3_Config>
 8008a44:	4603      	mov	r3, r0
 8008a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d003      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a62:	2100      	movs	r1, #0
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	f003 0310 	and.w	r3, r3, #16
 8008a6a:	60fb      	str	r3, [r7, #12]
 8008a6c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008a70:	460b      	mov	r3, r1
 8008a72:	4313      	orrs	r3, r2
 8008a74:	d011      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a7a:	3328      	adds	r3, #40	@ 0x28
 8008a7c:	2101      	movs	r1, #1
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f000 fbaa 	bl	80091d8 <RCCEx_PLL3_Config>
 8008a84:	4603      	mov	r3, r0
 8008a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d003      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	6039      	str	r1, [r7, #0]
 8008aa6:	f003 0320 	and.w	r3, r3, #32
 8008aaa:	607b      	str	r3, [r7, #4]
 8008aac:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	d011      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aba:	3328      	adds	r3, #40	@ 0x28
 8008abc:	2102      	movs	r1, #2
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 fb8a 	bl	80091d8 <RCCEx_PLL3_Config>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d003      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ad6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008ada:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d101      	bne.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	e000      	b.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008aee:	46bd      	mov	sp, r7
 8008af0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008af4:	58024400 	.word	0x58024400

08008af8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008afc:	f7fe fd96 	bl	800762c <HAL_RCC_GetHCLKFreq>
 8008b00:	4602      	mov	r2, r0
 8008b02:	4b06      	ldr	r3, [pc, #24]	@ (8008b1c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	091b      	lsrs	r3, r3, #4
 8008b08:	f003 0307 	and.w	r3, r3, #7
 8008b0c:	4904      	ldr	r1, [pc, #16]	@ (8008b20 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008b0e:	5ccb      	ldrb	r3, [r1, r3]
 8008b10:	f003 031f 	and.w	r3, r3, #31
 8008b14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	58024400 	.word	0x58024400
 8008b20:	080103c8 	.word	0x080103c8

08008b24 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b089      	sub	sp, #36	@ 0x24
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b2c:	4ba1      	ldr	r3, [pc, #644]	@ (8008db4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b30:	f003 0303 	and.w	r3, r3, #3
 8008b34:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008b36:	4b9f      	ldr	r3, [pc, #636]	@ (8008db4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b3a:	0b1b      	lsrs	r3, r3, #12
 8008b3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b40:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008b42:	4b9c      	ldr	r3, [pc, #624]	@ (8008db4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b46:	091b      	lsrs	r3, r3, #4
 8008b48:	f003 0301 	and.w	r3, r3, #1
 8008b4c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008b4e:	4b99      	ldr	r3, [pc, #612]	@ (8008db4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b52:	08db      	lsrs	r3, r3, #3
 8008b54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b58:	693a      	ldr	r2, [r7, #16]
 8008b5a:	fb02 f303 	mul.w	r3, r2, r3
 8008b5e:	ee07 3a90 	vmov	s15, r3
 8008b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f000 8111 	beq.w	8008d94 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	f000 8083 	beq.w	8008c80 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	f200 80a1 	bhi.w	8008cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d003      	beq.n	8008b90 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d056      	beq.n	8008c3c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008b8e:	e099      	b.n	8008cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b90:	4b88      	ldr	r3, [pc, #544]	@ (8008db4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 0320 	and.w	r3, r3, #32
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d02d      	beq.n	8008bf8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b9c:	4b85      	ldr	r3, [pc, #532]	@ (8008db4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	08db      	lsrs	r3, r3, #3
 8008ba2:	f003 0303 	and.w	r3, r3, #3
 8008ba6:	4a84      	ldr	r2, [pc, #528]	@ (8008db8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	ee07 3a90 	vmov	s15, r3
 8008bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	ee07 3a90 	vmov	s15, r3
 8008bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bc6:	4b7b      	ldr	r3, [pc, #492]	@ (8008db4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bce:	ee07 3a90 	vmov	s15, r3
 8008bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bda:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008dbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008be6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bf2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008bf6:	e087      	b.n	8008d08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	ee07 3a90 	vmov	s15, r3
 8008bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c02:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c0a:	4b6a      	ldr	r3, [pc, #424]	@ (8008db4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c12:	ee07 3a90 	vmov	s15, r3
 8008c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c1e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008dbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c3a:	e065      	b.n	8008d08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	ee07 3a90 	vmov	s15, r3
 8008c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c46:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c4e:	4b59      	ldr	r3, [pc, #356]	@ (8008db4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c56:	ee07 3a90 	vmov	s15, r3
 8008c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c62:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008dbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c7e:	e043      	b.n	8008d08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	ee07 3a90 	vmov	s15, r3
 8008c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c8a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c92:	4b48      	ldr	r3, [pc, #288]	@ (8008db4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c9a:	ee07 3a90 	vmov	s15, r3
 8008c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ca6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008dbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cc2:	e021      	b.n	8008d08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	ee07 3a90 	vmov	s15, r3
 8008cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cd6:	4b37      	ldr	r3, [pc, #220]	@ (8008db4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cde:	ee07 3a90 	vmov	s15, r3
 8008ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008dbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d06:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008d08:	4b2a      	ldr	r3, [pc, #168]	@ (8008db4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d0c:	0a5b      	lsrs	r3, r3, #9
 8008d0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d12:	ee07 3a90 	vmov	s15, r3
 8008d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d22:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d2e:	ee17 2a90 	vmov	r2, s15
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008d36:	4b1f      	ldr	r3, [pc, #124]	@ (8008db4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d3a:	0c1b      	lsrs	r3, r3, #16
 8008d3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d40:	ee07 3a90 	vmov	s15, r3
 8008d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d50:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d5c:	ee17 2a90 	vmov	r2, s15
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008d64:	4b13      	ldr	r3, [pc, #76]	@ (8008db4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d68:	0e1b      	lsrs	r3, r3, #24
 8008d6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d6e:	ee07 3a90 	vmov	s15, r3
 8008d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d8a:	ee17 2a90 	vmov	r2, s15
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008d92:	e008      	b.n	8008da6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	609a      	str	r2, [r3, #8]
}
 8008da6:	bf00      	nop
 8008da8:	3724      	adds	r7, #36	@ 0x24
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	58024400 	.word	0x58024400
 8008db8:	03d09000 	.word	0x03d09000
 8008dbc:	46000000 	.word	0x46000000
 8008dc0:	4c742400 	.word	0x4c742400
 8008dc4:	4a742400 	.word	0x4a742400
 8008dc8:	4bb71b00 	.word	0x4bb71b00

08008dcc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b089      	sub	sp, #36	@ 0x24
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008dd4:	4ba1      	ldr	r3, [pc, #644]	@ (800905c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd8:	f003 0303 	and.w	r3, r3, #3
 8008ddc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008dde:	4b9f      	ldr	r3, [pc, #636]	@ (800905c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008de2:	0d1b      	lsrs	r3, r3, #20
 8008de4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008de8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008dea:	4b9c      	ldr	r3, [pc, #624]	@ (800905c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dee:	0a1b      	lsrs	r3, r3, #8
 8008df0:	f003 0301 	and.w	r3, r3, #1
 8008df4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008df6:	4b99      	ldr	r3, [pc, #612]	@ (800905c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dfa:	08db      	lsrs	r3, r3, #3
 8008dfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	fb02 f303 	mul.w	r3, r2, r3
 8008e06:	ee07 3a90 	vmov	s15, r3
 8008e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f000 8111 	beq.w	800903c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	f000 8083 	beq.w	8008f28 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	f200 80a1 	bhi.w	8008f6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d003      	beq.n	8008e38 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d056      	beq.n	8008ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008e36:	e099      	b.n	8008f6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e38:	4b88      	ldr	r3, [pc, #544]	@ (800905c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0320 	and.w	r3, r3, #32
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d02d      	beq.n	8008ea0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e44:	4b85      	ldr	r3, [pc, #532]	@ (800905c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	08db      	lsrs	r3, r3, #3
 8008e4a:	f003 0303 	and.w	r3, r3, #3
 8008e4e:	4a84      	ldr	r2, [pc, #528]	@ (8009060 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008e50:	fa22 f303 	lsr.w	r3, r2, r3
 8008e54:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	ee07 3a90 	vmov	s15, r3
 8008e5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	ee07 3a90 	vmov	s15, r3
 8008e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e6e:	4b7b      	ldr	r3, [pc, #492]	@ (800905c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e76:	ee07 3a90 	vmov	s15, r3
 8008e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e82:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009064 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008e9e:	e087      	b.n	8008fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	ee07 3a90 	vmov	s15, r3
 8008ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eaa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009068 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eb2:	4b6a      	ldr	r3, [pc, #424]	@ (800905c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eba:	ee07 3a90 	vmov	s15, r3
 8008ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ec6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009064 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ed2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ede:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ee2:	e065      	b.n	8008fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	ee07 3a90 	vmov	s15, r3
 8008eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800906c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ef6:	4b59      	ldr	r3, [pc, #356]	@ (800905c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008efe:	ee07 3a90 	vmov	s15, r3
 8008f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f0a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009064 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f26:	e043      	b.n	8008fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	ee07 3a90 	vmov	s15, r3
 8008f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f32:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009070 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f3a:	4b48      	ldr	r3, [pc, #288]	@ (800905c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f42:	ee07 3a90 	vmov	s15, r3
 8008f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f4e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009064 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f6a:	e021      	b.n	8008fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	ee07 3a90 	vmov	s15, r3
 8008f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f76:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800906c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f7e:	4b37      	ldr	r3, [pc, #220]	@ (800905c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f86:	ee07 3a90 	vmov	s15, r3
 8008f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f92:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009064 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008faa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008fb0:	4b2a      	ldr	r3, [pc, #168]	@ (800905c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fb4:	0a5b      	lsrs	r3, r3, #9
 8008fb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fba:	ee07 3a90 	vmov	s15, r3
 8008fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008fc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fca:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fd6:	ee17 2a90 	vmov	r2, s15
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008fde:	4b1f      	ldr	r3, [pc, #124]	@ (800905c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fe2:	0c1b      	lsrs	r3, r3, #16
 8008fe4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fe8:	ee07 3a90 	vmov	s15, r3
 8008fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ff0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ff4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ff8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ffc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009000:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009004:	ee17 2a90 	vmov	r2, s15
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800900c:	4b13      	ldr	r3, [pc, #76]	@ (800905c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800900e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009010:	0e1b      	lsrs	r3, r3, #24
 8009012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009016:	ee07 3a90 	vmov	s15, r3
 800901a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800901e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009022:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009026:	edd7 6a07 	vldr	s13, [r7, #28]
 800902a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800902e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009032:	ee17 2a90 	vmov	r2, s15
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800903a:	e008      	b.n	800904e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	609a      	str	r2, [r3, #8]
}
 800904e:	bf00      	nop
 8009050:	3724      	adds	r7, #36	@ 0x24
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	58024400 	.word	0x58024400
 8009060:	03d09000 	.word	0x03d09000
 8009064:	46000000 	.word	0x46000000
 8009068:	4c742400 	.word	0x4c742400
 800906c:	4a742400 	.word	0x4a742400
 8009070:	4bb71b00 	.word	0x4bb71b00

08009074 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009082:	4b53      	ldr	r3, [pc, #332]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 8009084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009086:	f003 0303 	and.w	r3, r3, #3
 800908a:	2b03      	cmp	r3, #3
 800908c:	d101      	bne.n	8009092 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e099      	b.n	80091c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009092:	4b4f      	ldr	r3, [pc, #316]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a4e      	ldr	r2, [pc, #312]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 8009098:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800909c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800909e:	f7fa fcf5 	bl	8003a8c <HAL_GetTick>
 80090a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80090a4:	e008      	b.n	80090b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80090a6:	f7fa fcf1 	bl	8003a8c <HAL_GetTick>
 80090aa:	4602      	mov	r2, r0
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	1ad3      	subs	r3, r2, r3
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d901      	bls.n	80090b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80090b4:	2303      	movs	r3, #3
 80090b6:	e086      	b.n	80091c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80090b8:	4b45      	ldr	r3, [pc, #276]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1f0      	bne.n	80090a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80090c4:	4b42      	ldr	r3, [pc, #264]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 80090c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090c8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	031b      	lsls	r3, r3, #12
 80090d2:	493f      	ldr	r1, [pc, #252]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 80090d4:	4313      	orrs	r3, r2
 80090d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	3b01      	subs	r3, #1
 80090de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	3b01      	subs	r3, #1
 80090e8:	025b      	lsls	r3, r3, #9
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	431a      	orrs	r2, r3
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	3b01      	subs	r3, #1
 80090f4:	041b      	lsls	r3, r3, #16
 80090f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80090fa:	431a      	orrs	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	3b01      	subs	r3, #1
 8009102:	061b      	lsls	r3, r3, #24
 8009104:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009108:	4931      	ldr	r1, [pc, #196]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 800910a:	4313      	orrs	r3, r2
 800910c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800910e:	4b30      	ldr	r3, [pc, #192]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 8009110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009112:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	492d      	ldr	r1, [pc, #180]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 800911c:	4313      	orrs	r3, r2
 800911e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009120:	4b2b      	ldr	r3, [pc, #172]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 8009122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009124:	f023 0220 	bic.w	r2, r3, #32
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	4928      	ldr	r1, [pc, #160]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 800912e:	4313      	orrs	r3, r2
 8009130:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009132:	4b27      	ldr	r3, [pc, #156]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 8009134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009136:	4a26      	ldr	r2, [pc, #152]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 8009138:	f023 0310 	bic.w	r3, r3, #16
 800913c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800913e:	4b24      	ldr	r3, [pc, #144]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 8009140:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009142:	4b24      	ldr	r3, [pc, #144]	@ (80091d4 <RCCEx_PLL2_Config+0x160>)
 8009144:	4013      	ands	r3, r2
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	69d2      	ldr	r2, [r2, #28]
 800914a:	00d2      	lsls	r2, r2, #3
 800914c:	4920      	ldr	r1, [pc, #128]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 800914e:	4313      	orrs	r3, r2
 8009150:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009152:	4b1f      	ldr	r3, [pc, #124]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 8009154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009156:	4a1e      	ldr	r2, [pc, #120]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 8009158:	f043 0310 	orr.w	r3, r3, #16
 800915c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d106      	bne.n	8009172 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009164:	4b1a      	ldr	r3, [pc, #104]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 8009166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009168:	4a19      	ldr	r2, [pc, #100]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 800916a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800916e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009170:	e00f      	b.n	8009192 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	2b01      	cmp	r3, #1
 8009176:	d106      	bne.n	8009186 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009178:	4b15      	ldr	r3, [pc, #84]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 800917a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800917c:	4a14      	ldr	r2, [pc, #80]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 800917e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009182:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009184:	e005      	b.n	8009192 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009186:	4b12      	ldr	r3, [pc, #72]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 8009188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800918a:	4a11      	ldr	r2, [pc, #68]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 800918c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009190:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009192:	4b0f      	ldr	r3, [pc, #60]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a0e      	ldr	r2, [pc, #56]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 8009198:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800919c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800919e:	f7fa fc75 	bl	8003a8c <HAL_GetTick>
 80091a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80091a4:	e008      	b.n	80091b8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80091a6:	f7fa fc71 	bl	8003a8c <HAL_GetTick>
 80091aa:	4602      	mov	r2, r0
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	1ad3      	subs	r3, r2, r3
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d901      	bls.n	80091b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80091b4:	2303      	movs	r3, #3
 80091b6:	e006      	b.n	80091c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80091b8:	4b05      	ldr	r3, [pc, #20]	@ (80091d0 <RCCEx_PLL2_Config+0x15c>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d0f0      	beq.n	80091a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80091c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	58024400 	.word	0x58024400
 80091d4:	ffff0007 	.word	0xffff0007

080091d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091e2:	2300      	movs	r3, #0
 80091e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091e6:	4b53      	ldr	r3, [pc, #332]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 80091e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ea:	f003 0303 	and.w	r3, r3, #3
 80091ee:	2b03      	cmp	r3, #3
 80091f0:	d101      	bne.n	80091f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e099      	b.n	800932a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80091f6:	4b4f      	ldr	r3, [pc, #316]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a4e      	ldr	r2, [pc, #312]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 80091fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009200:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009202:	f7fa fc43 	bl	8003a8c <HAL_GetTick>
 8009206:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009208:	e008      	b.n	800921c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800920a:	f7fa fc3f 	bl	8003a8c <HAL_GetTick>
 800920e:	4602      	mov	r2, r0
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	2b02      	cmp	r3, #2
 8009216:	d901      	bls.n	800921c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009218:	2303      	movs	r3, #3
 800921a:	e086      	b.n	800932a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800921c:	4b45      	ldr	r3, [pc, #276]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1f0      	bne.n	800920a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009228:	4b42      	ldr	r3, [pc, #264]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 800922a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800922c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	051b      	lsls	r3, r3, #20
 8009236:	493f      	ldr	r1, [pc, #252]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 8009238:	4313      	orrs	r3, r2
 800923a:	628b      	str	r3, [r1, #40]	@ 0x28
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	3b01      	subs	r3, #1
 8009242:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	3b01      	subs	r3, #1
 800924c:	025b      	lsls	r3, r3, #9
 800924e:	b29b      	uxth	r3, r3
 8009250:	431a      	orrs	r2, r3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	3b01      	subs	r3, #1
 8009258:	041b      	lsls	r3, r3, #16
 800925a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800925e:	431a      	orrs	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	3b01      	subs	r3, #1
 8009266:	061b      	lsls	r3, r3, #24
 8009268:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800926c:	4931      	ldr	r1, [pc, #196]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 800926e:	4313      	orrs	r3, r2
 8009270:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009272:	4b30      	ldr	r3, [pc, #192]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 8009274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009276:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	492d      	ldr	r1, [pc, #180]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 8009280:	4313      	orrs	r3, r2
 8009282:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009284:	4b2b      	ldr	r3, [pc, #172]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 8009286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009288:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	4928      	ldr	r1, [pc, #160]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 8009292:	4313      	orrs	r3, r2
 8009294:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009296:	4b27      	ldr	r3, [pc, #156]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 8009298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800929a:	4a26      	ldr	r2, [pc, #152]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 800929c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80092a2:	4b24      	ldr	r3, [pc, #144]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 80092a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092a6:	4b24      	ldr	r3, [pc, #144]	@ (8009338 <RCCEx_PLL3_Config+0x160>)
 80092a8:	4013      	ands	r3, r2
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	69d2      	ldr	r2, [r2, #28]
 80092ae:	00d2      	lsls	r2, r2, #3
 80092b0:	4920      	ldr	r1, [pc, #128]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 80092b2:	4313      	orrs	r3, r2
 80092b4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80092b6:	4b1f      	ldr	r3, [pc, #124]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 80092b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ba:	4a1e      	ldr	r2, [pc, #120]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 80092bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d106      	bne.n	80092d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80092c8:	4b1a      	ldr	r3, [pc, #104]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 80092ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092cc:	4a19      	ldr	r2, [pc, #100]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 80092ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80092d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80092d4:	e00f      	b.n	80092f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d106      	bne.n	80092ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80092dc:	4b15      	ldr	r3, [pc, #84]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 80092de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e0:	4a14      	ldr	r2, [pc, #80]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 80092e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80092e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80092e8:	e005      	b.n	80092f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80092ea:	4b12      	ldr	r3, [pc, #72]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 80092ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ee:	4a11      	ldr	r2, [pc, #68]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 80092f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80092f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80092f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a0e      	ldr	r2, [pc, #56]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 80092fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009302:	f7fa fbc3 	bl	8003a8c <HAL_GetTick>
 8009306:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009308:	e008      	b.n	800931c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800930a:	f7fa fbbf 	bl	8003a8c <HAL_GetTick>
 800930e:	4602      	mov	r2, r0
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	1ad3      	subs	r3, r2, r3
 8009314:	2b02      	cmp	r3, #2
 8009316:	d901      	bls.n	800931c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009318:	2303      	movs	r3, #3
 800931a:	e006      	b.n	800932a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800931c:	4b05      	ldr	r3, [pc, #20]	@ (8009334 <RCCEx_PLL3_Config+0x15c>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009324:	2b00      	cmp	r3, #0
 8009326:	d0f0      	beq.n	800930a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009328:	7bfb      	ldrb	r3, [r7, #15]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	58024400 	.word	0x58024400
 8009338:	ffff0007 	.word	0xffff0007

0800933c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d101      	bne.n	800934e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	e049      	b.n	80093e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009354:	b2db      	uxtb	r3, r3
 8009356:	2b00      	cmp	r3, #0
 8009358:	d106      	bne.n	8009368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f7f9 fd60 	bl	8002e28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2202      	movs	r2, #2
 800936c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	3304      	adds	r3, #4
 8009378:	4619      	mov	r1, r3
 800937a:	4610      	mov	r0, r2
 800937c:	f000 fd5a 	bl	8009e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
	...

080093ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b085      	sub	sp, #20
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d001      	beq.n	8009404 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e054      	b.n	80094ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2202      	movs	r2, #2
 8009408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68da      	ldr	r2, [r3, #12]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f042 0201 	orr.w	r2, r2, #1
 800941a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a26      	ldr	r2, [pc, #152]	@ (80094bc <HAL_TIM_Base_Start_IT+0xd0>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d022      	beq.n	800946c <HAL_TIM_Base_Start_IT+0x80>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800942e:	d01d      	beq.n	800946c <HAL_TIM_Base_Start_IT+0x80>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a22      	ldr	r2, [pc, #136]	@ (80094c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d018      	beq.n	800946c <HAL_TIM_Base_Start_IT+0x80>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a21      	ldr	r2, [pc, #132]	@ (80094c4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d013      	beq.n	800946c <HAL_TIM_Base_Start_IT+0x80>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a1f      	ldr	r2, [pc, #124]	@ (80094c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d00e      	beq.n	800946c <HAL_TIM_Base_Start_IT+0x80>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a1e      	ldr	r2, [pc, #120]	@ (80094cc <HAL_TIM_Base_Start_IT+0xe0>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d009      	beq.n	800946c <HAL_TIM_Base_Start_IT+0x80>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a1c      	ldr	r2, [pc, #112]	@ (80094d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d004      	beq.n	800946c <HAL_TIM_Base_Start_IT+0x80>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a1b      	ldr	r2, [pc, #108]	@ (80094d4 <HAL_TIM_Base_Start_IT+0xe8>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d115      	bne.n	8009498 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	689a      	ldr	r2, [r3, #8]
 8009472:	4b19      	ldr	r3, [pc, #100]	@ (80094d8 <HAL_TIM_Base_Start_IT+0xec>)
 8009474:	4013      	ands	r3, r2
 8009476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2b06      	cmp	r3, #6
 800947c:	d015      	beq.n	80094aa <HAL_TIM_Base_Start_IT+0xbe>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009484:	d011      	beq.n	80094aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f042 0201 	orr.w	r2, r2, #1
 8009494:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009496:	e008      	b.n	80094aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f042 0201 	orr.w	r2, r2, #1
 80094a6:	601a      	str	r2, [r3, #0]
 80094a8:	e000      	b.n	80094ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3714      	adds	r7, #20
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	40010000 	.word	0x40010000
 80094c0:	40000400 	.word	0x40000400
 80094c4:	40000800 	.word	0x40000800
 80094c8:	40000c00 	.word	0x40000c00
 80094cc:	40010400 	.word	0x40010400
 80094d0:	40001800 	.word	0x40001800
 80094d4:	40014000 	.word	0x40014000
 80094d8:	00010007 	.word	0x00010007

080094dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d101      	bne.n	80094ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e049      	b.n	8009582 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d106      	bne.n	8009508 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f841 	bl	800958a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2202      	movs	r2, #2
 800950c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	3304      	adds	r3, #4
 8009518:	4619      	mov	r1, r3
 800951a:	4610      	mov	r0, r2
 800951c:	f000 fc8a 	bl	8009e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3708      	adds	r7, #8
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800958a:	b480      	push	{r7}
 800958c:	b083      	sub	sp, #12
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009592:	bf00      	nop
 8009594:	370c      	adds	r7, #12
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
	...

080095a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d109      	bne.n	80095c4 <HAL_TIM_PWM_Start+0x24>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	bf14      	ite	ne
 80095bc:	2301      	movne	r3, #1
 80095be:	2300      	moveq	r3, #0
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	e03c      	b.n	800963e <HAL_TIM_PWM_Start+0x9e>
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	2b04      	cmp	r3, #4
 80095c8:	d109      	bne.n	80095de <HAL_TIM_PWM_Start+0x3e>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	bf14      	ite	ne
 80095d6:	2301      	movne	r3, #1
 80095d8:	2300      	moveq	r3, #0
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	e02f      	b.n	800963e <HAL_TIM_PWM_Start+0x9e>
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	2b08      	cmp	r3, #8
 80095e2:	d109      	bne.n	80095f8 <HAL_TIM_PWM_Start+0x58>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	bf14      	ite	ne
 80095f0:	2301      	movne	r3, #1
 80095f2:	2300      	moveq	r3, #0
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	e022      	b.n	800963e <HAL_TIM_PWM_Start+0x9e>
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	2b0c      	cmp	r3, #12
 80095fc:	d109      	bne.n	8009612 <HAL_TIM_PWM_Start+0x72>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009604:	b2db      	uxtb	r3, r3
 8009606:	2b01      	cmp	r3, #1
 8009608:	bf14      	ite	ne
 800960a:	2301      	movne	r3, #1
 800960c:	2300      	moveq	r3, #0
 800960e:	b2db      	uxtb	r3, r3
 8009610:	e015      	b.n	800963e <HAL_TIM_PWM_Start+0x9e>
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	2b10      	cmp	r3, #16
 8009616:	d109      	bne.n	800962c <HAL_TIM_PWM_Start+0x8c>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800961e:	b2db      	uxtb	r3, r3
 8009620:	2b01      	cmp	r3, #1
 8009622:	bf14      	ite	ne
 8009624:	2301      	movne	r3, #1
 8009626:	2300      	moveq	r3, #0
 8009628:	b2db      	uxtb	r3, r3
 800962a:	e008      	b.n	800963e <HAL_TIM_PWM_Start+0x9e>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2b01      	cmp	r3, #1
 8009636:	bf14      	ite	ne
 8009638:	2301      	movne	r3, #1
 800963a:	2300      	moveq	r3, #0
 800963c:	b2db      	uxtb	r3, r3
 800963e:	2b00      	cmp	r3, #0
 8009640:	d001      	beq.n	8009646 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e0a1      	b.n	800978a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d104      	bne.n	8009656 <HAL_TIM_PWM_Start+0xb6>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2202      	movs	r2, #2
 8009650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009654:	e023      	b.n	800969e <HAL_TIM_PWM_Start+0xfe>
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	2b04      	cmp	r3, #4
 800965a:	d104      	bne.n	8009666 <HAL_TIM_PWM_Start+0xc6>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2202      	movs	r2, #2
 8009660:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009664:	e01b      	b.n	800969e <HAL_TIM_PWM_Start+0xfe>
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	2b08      	cmp	r3, #8
 800966a:	d104      	bne.n	8009676 <HAL_TIM_PWM_Start+0xd6>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2202      	movs	r2, #2
 8009670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009674:	e013      	b.n	800969e <HAL_TIM_PWM_Start+0xfe>
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2b0c      	cmp	r3, #12
 800967a:	d104      	bne.n	8009686 <HAL_TIM_PWM_Start+0xe6>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2202      	movs	r2, #2
 8009680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009684:	e00b      	b.n	800969e <HAL_TIM_PWM_Start+0xfe>
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	2b10      	cmp	r3, #16
 800968a:	d104      	bne.n	8009696 <HAL_TIM_PWM_Start+0xf6>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2202      	movs	r2, #2
 8009690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009694:	e003      	b.n	800969e <HAL_TIM_PWM_Start+0xfe>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2202      	movs	r2, #2
 800969a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2201      	movs	r2, #1
 80096a4:	6839      	ldr	r1, [r7, #0]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f000 ffde 	bl	800a668 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a38      	ldr	r2, [pc, #224]	@ (8009794 <HAL_TIM_PWM_Start+0x1f4>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d013      	beq.n	80096de <HAL_TIM_PWM_Start+0x13e>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a37      	ldr	r2, [pc, #220]	@ (8009798 <HAL_TIM_PWM_Start+0x1f8>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d00e      	beq.n	80096de <HAL_TIM_PWM_Start+0x13e>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a35      	ldr	r2, [pc, #212]	@ (800979c <HAL_TIM_PWM_Start+0x1fc>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d009      	beq.n	80096de <HAL_TIM_PWM_Start+0x13e>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a34      	ldr	r2, [pc, #208]	@ (80097a0 <HAL_TIM_PWM_Start+0x200>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d004      	beq.n	80096de <HAL_TIM_PWM_Start+0x13e>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a32      	ldr	r2, [pc, #200]	@ (80097a4 <HAL_TIM_PWM_Start+0x204>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d101      	bne.n	80096e2 <HAL_TIM_PWM_Start+0x142>
 80096de:	2301      	movs	r3, #1
 80096e0:	e000      	b.n	80096e4 <HAL_TIM_PWM_Start+0x144>
 80096e2:	2300      	movs	r3, #0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d007      	beq.n	80096f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80096f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a25      	ldr	r2, [pc, #148]	@ (8009794 <HAL_TIM_PWM_Start+0x1f4>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d022      	beq.n	8009748 <HAL_TIM_PWM_Start+0x1a8>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800970a:	d01d      	beq.n	8009748 <HAL_TIM_PWM_Start+0x1a8>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a25      	ldr	r2, [pc, #148]	@ (80097a8 <HAL_TIM_PWM_Start+0x208>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d018      	beq.n	8009748 <HAL_TIM_PWM_Start+0x1a8>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a24      	ldr	r2, [pc, #144]	@ (80097ac <HAL_TIM_PWM_Start+0x20c>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d013      	beq.n	8009748 <HAL_TIM_PWM_Start+0x1a8>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a22      	ldr	r2, [pc, #136]	@ (80097b0 <HAL_TIM_PWM_Start+0x210>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d00e      	beq.n	8009748 <HAL_TIM_PWM_Start+0x1a8>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a1a      	ldr	r2, [pc, #104]	@ (8009798 <HAL_TIM_PWM_Start+0x1f8>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d009      	beq.n	8009748 <HAL_TIM_PWM_Start+0x1a8>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a1e      	ldr	r2, [pc, #120]	@ (80097b4 <HAL_TIM_PWM_Start+0x214>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d004      	beq.n	8009748 <HAL_TIM_PWM_Start+0x1a8>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a16      	ldr	r2, [pc, #88]	@ (800979c <HAL_TIM_PWM_Start+0x1fc>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d115      	bne.n	8009774 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	689a      	ldr	r2, [r3, #8]
 800974e:	4b1a      	ldr	r3, [pc, #104]	@ (80097b8 <HAL_TIM_PWM_Start+0x218>)
 8009750:	4013      	ands	r3, r2
 8009752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2b06      	cmp	r3, #6
 8009758:	d015      	beq.n	8009786 <HAL_TIM_PWM_Start+0x1e6>
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009760:	d011      	beq.n	8009786 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f042 0201 	orr.w	r2, r2, #1
 8009770:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009772:	e008      	b.n	8009786 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f042 0201 	orr.w	r2, r2, #1
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	e000      	b.n	8009788 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009786:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	40010000 	.word	0x40010000
 8009798:	40010400 	.word	0x40010400
 800979c:	40014000 	.word	0x40014000
 80097a0:	40014400 	.word	0x40014400
 80097a4:	40014800 	.word	0x40014800
 80097a8:	40000400 	.word	0x40000400
 80097ac:	40000800 	.word	0x40000800
 80097b0:	40000c00 	.word	0x40000c00
 80097b4:	40001800 	.word	0x40001800
 80097b8:	00010007 	.word	0x00010007

080097bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	f003 0302 	and.w	r3, r3, #2
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d020      	beq.n	8009820 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f003 0302 	and.w	r3, r3, #2
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d01b      	beq.n	8009820 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f06f 0202 	mvn.w	r2, #2
 80097f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2201      	movs	r2, #1
 80097f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	699b      	ldr	r3, [r3, #24]
 80097fe:	f003 0303 	and.w	r3, r3, #3
 8009802:	2b00      	cmp	r3, #0
 8009804:	d003      	beq.n	800980e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 faf6 	bl	8009df8 <HAL_TIM_IC_CaptureCallback>
 800980c:	e005      	b.n	800981a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 fae8 	bl	8009de4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 faf9 	bl	8009e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	f003 0304 	and.w	r3, r3, #4
 8009826:	2b00      	cmp	r3, #0
 8009828:	d020      	beq.n	800986c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f003 0304 	and.w	r3, r3, #4
 8009830:	2b00      	cmp	r3, #0
 8009832:	d01b      	beq.n	800986c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f06f 0204 	mvn.w	r2, #4
 800983c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2202      	movs	r2, #2
 8009842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	699b      	ldr	r3, [r3, #24]
 800984a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800984e:	2b00      	cmp	r3, #0
 8009850:	d003      	beq.n	800985a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 fad0 	bl	8009df8 <HAL_TIM_IC_CaptureCallback>
 8009858:	e005      	b.n	8009866 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 fac2 	bl	8009de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fad3 	bl	8009e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	f003 0308 	and.w	r3, r3, #8
 8009872:	2b00      	cmp	r3, #0
 8009874:	d020      	beq.n	80098b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f003 0308 	and.w	r3, r3, #8
 800987c:	2b00      	cmp	r3, #0
 800987e:	d01b      	beq.n	80098b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f06f 0208 	mvn.w	r2, #8
 8009888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2204      	movs	r2, #4
 800988e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	69db      	ldr	r3, [r3, #28]
 8009896:	f003 0303 	and.w	r3, r3, #3
 800989a:	2b00      	cmp	r3, #0
 800989c:	d003      	beq.n	80098a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 faaa 	bl	8009df8 <HAL_TIM_IC_CaptureCallback>
 80098a4:	e005      	b.n	80098b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fa9c 	bl	8009de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 faad 	bl	8009e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	f003 0310 	and.w	r3, r3, #16
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d020      	beq.n	8009904 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f003 0310 	and.w	r3, r3, #16
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d01b      	beq.n	8009904 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f06f 0210 	mvn.w	r2, #16
 80098d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2208      	movs	r2, #8
 80098da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	69db      	ldr	r3, [r3, #28]
 80098e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d003      	beq.n	80098f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 fa84 	bl	8009df8 <HAL_TIM_IC_CaptureCallback>
 80098f0:	e005      	b.n	80098fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fa76 	bl	8009de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 fa87 	bl	8009e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	f003 0301 	and.w	r3, r3, #1
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00c      	beq.n	8009928 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f003 0301 	and.w	r3, r3, #1
 8009914:	2b00      	cmp	r3, #0
 8009916:	d007      	beq.n	8009928 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f06f 0201 	mvn.w	r2, #1
 8009920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7f8 f954 	bl	8001bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800992e:	2b00      	cmp	r3, #0
 8009930:	d104      	bne.n	800993c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009938:	2b00      	cmp	r3, #0
 800993a:	d00c      	beq.n	8009956 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009942:	2b00      	cmp	r3, #0
 8009944:	d007      	beq.n	8009956 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800994e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 ffc5 	bl	800a8e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800995c:	2b00      	cmp	r3, #0
 800995e:	d00c      	beq.n	800997a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009966:	2b00      	cmp	r3, #0
 8009968:	d007      	beq.n	800997a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 ffbd 	bl	800a8f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00c      	beq.n	800999e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800998a:	2b00      	cmp	r3, #0
 800998c:	d007      	beq.n	800999e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fa41 	bl	8009e20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	f003 0320 	and.w	r3, r3, #32
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00c      	beq.n	80099c2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f003 0320 	and.w	r3, r3, #32
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d007      	beq.n	80099c2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f06f 0220 	mvn.w	r2, #32
 80099ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 ff85 	bl	800a8cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099c2:	bf00      	nop
 80099c4:	3710      	adds	r7, #16
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
	...

080099cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b086      	sub	sp, #24
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d101      	bne.n	80099ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80099e6:	2302      	movs	r3, #2
 80099e8:	e0ff      	b.n	8009bea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2b14      	cmp	r3, #20
 80099f6:	f200 80f0 	bhi.w	8009bda <HAL_TIM_PWM_ConfigChannel+0x20e>
 80099fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009a00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80099fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a00:	08009a55 	.word	0x08009a55
 8009a04:	08009bdb 	.word	0x08009bdb
 8009a08:	08009bdb 	.word	0x08009bdb
 8009a0c:	08009bdb 	.word	0x08009bdb
 8009a10:	08009a95 	.word	0x08009a95
 8009a14:	08009bdb 	.word	0x08009bdb
 8009a18:	08009bdb 	.word	0x08009bdb
 8009a1c:	08009bdb 	.word	0x08009bdb
 8009a20:	08009ad7 	.word	0x08009ad7
 8009a24:	08009bdb 	.word	0x08009bdb
 8009a28:	08009bdb 	.word	0x08009bdb
 8009a2c:	08009bdb 	.word	0x08009bdb
 8009a30:	08009b17 	.word	0x08009b17
 8009a34:	08009bdb 	.word	0x08009bdb
 8009a38:	08009bdb 	.word	0x08009bdb
 8009a3c:	08009bdb 	.word	0x08009bdb
 8009a40:	08009b59 	.word	0x08009b59
 8009a44:	08009bdb 	.word	0x08009bdb
 8009a48:	08009bdb 	.word	0x08009bdb
 8009a4c:	08009bdb 	.word	0x08009bdb
 8009a50:	08009b99 	.word	0x08009b99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	68b9      	ldr	r1, [r7, #8]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 fa90 	bl	8009f80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	699a      	ldr	r2, [r3, #24]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f042 0208 	orr.w	r2, r2, #8
 8009a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	699a      	ldr	r2, [r3, #24]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f022 0204 	bic.w	r2, r2, #4
 8009a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	6999      	ldr	r1, [r3, #24]
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	691a      	ldr	r2, [r3, #16]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	430a      	orrs	r2, r1
 8009a90:	619a      	str	r2, [r3, #24]
      break;
 8009a92:	e0a5      	b.n	8009be0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	68b9      	ldr	r1, [r7, #8]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f000 fb00 	bl	800a0a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	699a      	ldr	r2, [r3, #24]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	699a      	ldr	r2, [r3, #24]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	6999      	ldr	r1, [r3, #24]
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	021a      	lsls	r2, r3, #8
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	430a      	orrs	r2, r1
 8009ad2:	619a      	str	r2, [r3, #24]
      break;
 8009ad4:	e084      	b.n	8009be0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	68b9      	ldr	r1, [r7, #8]
 8009adc:	4618      	mov	r0, r3
 8009ade:	f000 fb69 	bl	800a1b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	69da      	ldr	r2, [r3, #28]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f042 0208 	orr.w	r2, r2, #8
 8009af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	69da      	ldr	r2, [r3, #28]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f022 0204 	bic.w	r2, r2, #4
 8009b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	69d9      	ldr	r1, [r3, #28]
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	691a      	ldr	r2, [r3, #16]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	430a      	orrs	r2, r1
 8009b12:	61da      	str	r2, [r3, #28]
      break;
 8009b14:	e064      	b.n	8009be0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68b9      	ldr	r1, [r7, #8]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 fbd1 	bl	800a2c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	69da      	ldr	r2, [r3, #28]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	69da      	ldr	r2, [r3, #28]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	69d9      	ldr	r1, [r3, #28]
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	021a      	lsls	r2, r3, #8
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	430a      	orrs	r2, r1
 8009b54:	61da      	str	r2, [r3, #28]
      break;
 8009b56:	e043      	b.n	8009be0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68b9      	ldr	r1, [r7, #8]
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f000 fc1a 	bl	800a398 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f042 0208 	orr.w	r2, r2, #8
 8009b72:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f022 0204 	bic.w	r2, r2, #4
 8009b82:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	691a      	ldr	r2, [r3, #16]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	430a      	orrs	r2, r1
 8009b94:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009b96:	e023      	b.n	8009be0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68b9      	ldr	r1, [r7, #8]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 fc5e 	bl	800a460 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009bb2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009bc2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	021a      	lsls	r2, r3, #8
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	430a      	orrs	r2, r1
 8009bd6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009bd8:	e002      	b.n	8009be0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	75fb      	strb	r3, [r7, #23]
      break;
 8009bde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3718      	adds	r7, #24
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop

08009bf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d101      	bne.n	8009c10 <HAL_TIM_ConfigClockSource+0x1c>
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	e0dc      	b.n	8009dca <HAL_TIM_ConfigClockSource+0x1d6>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2201      	movs	r2, #1
 8009c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2202      	movs	r2, #2
 8009c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c28:	68ba      	ldr	r2, [r7, #8]
 8009c2a:	4b6a      	ldr	r3, [pc, #424]	@ (8009dd4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68ba      	ldr	r2, [r7, #8]
 8009c3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a64      	ldr	r2, [pc, #400]	@ (8009dd8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	f000 80a9 	beq.w	8009d9e <HAL_TIM_ConfigClockSource+0x1aa>
 8009c4c:	4a62      	ldr	r2, [pc, #392]	@ (8009dd8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	f200 80ae 	bhi.w	8009db0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c54:	4a61      	ldr	r2, [pc, #388]	@ (8009ddc <HAL_TIM_ConfigClockSource+0x1e8>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	f000 80a1 	beq.w	8009d9e <HAL_TIM_ConfigClockSource+0x1aa>
 8009c5c:	4a5f      	ldr	r2, [pc, #380]	@ (8009ddc <HAL_TIM_ConfigClockSource+0x1e8>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	f200 80a6 	bhi.w	8009db0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c64:	4a5e      	ldr	r2, [pc, #376]	@ (8009de0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	f000 8099 	beq.w	8009d9e <HAL_TIM_ConfigClockSource+0x1aa>
 8009c6c:	4a5c      	ldr	r2, [pc, #368]	@ (8009de0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	f200 809e 	bhi.w	8009db0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c74:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009c78:	f000 8091 	beq.w	8009d9e <HAL_TIM_ConfigClockSource+0x1aa>
 8009c7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009c80:	f200 8096 	bhi.w	8009db0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c88:	f000 8089 	beq.w	8009d9e <HAL_TIM_ConfigClockSource+0x1aa>
 8009c8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c90:	f200 808e 	bhi.w	8009db0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c98:	d03e      	beq.n	8009d18 <HAL_TIM_ConfigClockSource+0x124>
 8009c9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c9e:	f200 8087 	bhi.w	8009db0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ca6:	f000 8086 	beq.w	8009db6 <HAL_TIM_ConfigClockSource+0x1c2>
 8009caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cae:	d87f      	bhi.n	8009db0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cb0:	2b70      	cmp	r3, #112	@ 0x70
 8009cb2:	d01a      	beq.n	8009cea <HAL_TIM_ConfigClockSource+0xf6>
 8009cb4:	2b70      	cmp	r3, #112	@ 0x70
 8009cb6:	d87b      	bhi.n	8009db0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cb8:	2b60      	cmp	r3, #96	@ 0x60
 8009cba:	d050      	beq.n	8009d5e <HAL_TIM_ConfigClockSource+0x16a>
 8009cbc:	2b60      	cmp	r3, #96	@ 0x60
 8009cbe:	d877      	bhi.n	8009db0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cc0:	2b50      	cmp	r3, #80	@ 0x50
 8009cc2:	d03c      	beq.n	8009d3e <HAL_TIM_ConfigClockSource+0x14a>
 8009cc4:	2b50      	cmp	r3, #80	@ 0x50
 8009cc6:	d873      	bhi.n	8009db0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cc8:	2b40      	cmp	r3, #64	@ 0x40
 8009cca:	d058      	beq.n	8009d7e <HAL_TIM_ConfigClockSource+0x18a>
 8009ccc:	2b40      	cmp	r3, #64	@ 0x40
 8009cce:	d86f      	bhi.n	8009db0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cd0:	2b30      	cmp	r3, #48	@ 0x30
 8009cd2:	d064      	beq.n	8009d9e <HAL_TIM_ConfigClockSource+0x1aa>
 8009cd4:	2b30      	cmp	r3, #48	@ 0x30
 8009cd6:	d86b      	bhi.n	8009db0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cd8:	2b20      	cmp	r3, #32
 8009cda:	d060      	beq.n	8009d9e <HAL_TIM_ConfigClockSource+0x1aa>
 8009cdc:	2b20      	cmp	r3, #32
 8009cde:	d867      	bhi.n	8009db0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d05c      	beq.n	8009d9e <HAL_TIM_ConfigClockSource+0x1aa>
 8009ce4:	2b10      	cmp	r3, #16
 8009ce6:	d05a      	beq.n	8009d9e <HAL_TIM_ConfigClockSource+0x1aa>
 8009ce8:	e062      	b.n	8009db0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009cfa:	f000 fc95 	bl	800a628 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009d0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	609a      	str	r2, [r3, #8]
      break;
 8009d16:	e04f      	b.n	8009db8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009d28:	f000 fc7e 	bl	800a628 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	689a      	ldr	r2, [r3, #8]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d3a:	609a      	str	r2, [r3, #8]
      break;
 8009d3c:	e03c      	b.n	8009db8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	f000 fbee 	bl	800a52c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2150      	movs	r1, #80	@ 0x50
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 fc48 	bl	800a5ec <TIM_ITRx_SetConfig>
      break;
 8009d5c:	e02c      	b.n	8009db8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	f000 fc0d 	bl	800a58a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2160      	movs	r1, #96	@ 0x60
 8009d76:	4618      	mov	r0, r3
 8009d78:	f000 fc38 	bl	800a5ec <TIM_ITRx_SetConfig>
      break;
 8009d7c:	e01c      	b.n	8009db8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	f000 fbce 	bl	800a52c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2140      	movs	r1, #64	@ 0x40
 8009d96:	4618      	mov	r0, r3
 8009d98:	f000 fc28 	bl	800a5ec <TIM_ITRx_SetConfig>
      break;
 8009d9c:	e00c      	b.n	8009db8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4619      	mov	r1, r3
 8009da8:	4610      	mov	r0, r2
 8009daa:	f000 fc1f 	bl	800a5ec <TIM_ITRx_SetConfig>
      break;
 8009dae:	e003      	b.n	8009db8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	73fb      	strb	r3, [r7, #15]
      break;
 8009db4:	e000      	b.n	8009db8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009db6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	ffceff88 	.word	0xffceff88
 8009dd8:	00100040 	.word	0x00100040
 8009ddc:	00100030 	.word	0x00100030
 8009de0:	00100020 	.word	0x00100020

08009de4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009dec:	bf00      	nop
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e00:	bf00      	nop
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e14:	bf00      	nop
 8009e16:	370c      	adds	r7, #12
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e28:	bf00      	nop
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4a46      	ldr	r2, [pc, #280]	@ (8009f60 <TIM_Base_SetConfig+0x12c>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d013      	beq.n	8009e74 <TIM_Base_SetConfig+0x40>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e52:	d00f      	beq.n	8009e74 <TIM_Base_SetConfig+0x40>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4a43      	ldr	r2, [pc, #268]	@ (8009f64 <TIM_Base_SetConfig+0x130>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d00b      	beq.n	8009e74 <TIM_Base_SetConfig+0x40>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a42      	ldr	r2, [pc, #264]	@ (8009f68 <TIM_Base_SetConfig+0x134>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d007      	beq.n	8009e74 <TIM_Base_SetConfig+0x40>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a41      	ldr	r2, [pc, #260]	@ (8009f6c <TIM_Base_SetConfig+0x138>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d003      	beq.n	8009e74 <TIM_Base_SetConfig+0x40>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a40      	ldr	r2, [pc, #256]	@ (8009f70 <TIM_Base_SetConfig+0x13c>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d108      	bne.n	8009e86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	4a35      	ldr	r2, [pc, #212]	@ (8009f60 <TIM_Base_SetConfig+0x12c>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d01f      	beq.n	8009ece <TIM_Base_SetConfig+0x9a>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e94:	d01b      	beq.n	8009ece <TIM_Base_SetConfig+0x9a>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4a32      	ldr	r2, [pc, #200]	@ (8009f64 <TIM_Base_SetConfig+0x130>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d017      	beq.n	8009ece <TIM_Base_SetConfig+0x9a>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a31      	ldr	r2, [pc, #196]	@ (8009f68 <TIM_Base_SetConfig+0x134>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d013      	beq.n	8009ece <TIM_Base_SetConfig+0x9a>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a30      	ldr	r2, [pc, #192]	@ (8009f6c <TIM_Base_SetConfig+0x138>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d00f      	beq.n	8009ece <TIM_Base_SetConfig+0x9a>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a2f      	ldr	r2, [pc, #188]	@ (8009f70 <TIM_Base_SetConfig+0x13c>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d00b      	beq.n	8009ece <TIM_Base_SetConfig+0x9a>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	4a2e      	ldr	r2, [pc, #184]	@ (8009f74 <TIM_Base_SetConfig+0x140>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d007      	beq.n	8009ece <TIM_Base_SetConfig+0x9a>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4a2d      	ldr	r2, [pc, #180]	@ (8009f78 <TIM_Base_SetConfig+0x144>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d003      	beq.n	8009ece <TIM_Base_SetConfig+0x9a>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4a2c      	ldr	r2, [pc, #176]	@ (8009f7c <TIM_Base_SetConfig+0x148>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d108      	bne.n	8009ee0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	689a      	ldr	r2, [r3, #8]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4a16      	ldr	r2, [pc, #88]	@ (8009f60 <TIM_Base_SetConfig+0x12c>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d00f      	beq.n	8009f2c <TIM_Base_SetConfig+0xf8>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a18      	ldr	r2, [pc, #96]	@ (8009f70 <TIM_Base_SetConfig+0x13c>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d00b      	beq.n	8009f2c <TIM_Base_SetConfig+0xf8>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a17      	ldr	r2, [pc, #92]	@ (8009f74 <TIM_Base_SetConfig+0x140>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d007      	beq.n	8009f2c <TIM_Base_SetConfig+0xf8>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a16      	ldr	r2, [pc, #88]	@ (8009f78 <TIM_Base_SetConfig+0x144>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d003      	beq.n	8009f2c <TIM_Base_SetConfig+0xf8>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	4a15      	ldr	r2, [pc, #84]	@ (8009f7c <TIM_Base_SetConfig+0x148>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d103      	bne.n	8009f34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	691a      	ldr	r2, [r3, #16]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	691b      	ldr	r3, [r3, #16]
 8009f3e:	f003 0301 	and.w	r3, r3, #1
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d105      	bne.n	8009f52 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	f023 0201 	bic.w	r2, r3, #1
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	611a      	str	r2, [r3, #16]
  }
}
 8009f52:	bf00      	nop
 8009f54:	3714      	adds	r7, #20
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	40010000 	.word	0x40010000
 8009f64:	40000400 	.word	0x40000400
 8009f68:	40000800 	.word	0x40000800
 8009f6c:	40000c00 	.word	0x40000c00
 8009f70:	40010400 	.word	0x40010400
 8009f74:	40014000 	.word	0x40014000
 8009f78:	40014400 	.word	0x40014400
 8009f7c:	40014800 	.word	0x40014800

08009f80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b087      	sub	sp, #28
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6a1b      	ldr	r3, [r3, #32]
 8009f8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6a1b      	ldr	r3, [r3, #32]
 8009f94:	f023 0201 	bic.w	r2, r3, #1
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	699b      	ldr	r3, [r3, #24]
 8009fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	4b37      	ldr	r3, [pc, #220]	@ (800a088 <TIM_OC1_SetConfig+0x108>)
 8009fac:	4013      	ands	r3, r2
 8009fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f023 0303 	bic.w	r3, r3, #3
 8009fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	f023 0302 	bic.w	r3, r3, #2
 8009fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	689b      	ldr	r3, [r3, #8]
 8009fce:	697a      	ldr	r2, [r7, #20]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a2d      	ldr	r2, [pc, #180]	@ (800a08c <TIM_OC1_SetConfig+0x10c>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d00f      	beq.n	8009ffc <TIM_OC1_SetConfig+0x7c>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a2c      	ldr	r2, [pc, #176]	@ (800a090 <TIM_OC1_SetConfig+0x110>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d00b      	beq.n	8009ffc <TIM_OC1_SetConfig+0x7c>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a2b      	ldr	r2, [pc, #172]	@ (800a094 <TIM_OC1_SetConfig+0x114>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d007      	beq.n	8009ffc <TIM_OC1_SetConfig+0x7c>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a2a      	ldr	r2, [pc, #168]	@ (800a098 <TIM_OC1_SetConfig+0x118>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d003      	beq.n	8009ffc <TIM_OC1_SetConfig+0x7c>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a29      	ldr	r2, [pc, #164]	@ (800a09c <TIM_OC1_SetConfig+0x11c>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d10c      	bne.n	800a016 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	f023 0308 	bic.w	r3, r3, #8
 800a002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	697a      	ldr	r2, [r7, #20]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	f023 0304 	bic.w	r3, r3, #4
 800a014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	4a1c      	ldr	r2, [pc, #112]	@ (800a08c <TIM_OC1_SetConfig+0x10c>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d00f      	beq.n	800a03e <TIM_OC1_SetConfig+0xbe>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a1b      	ldr	r2, [pc, #108]	@ (800a090 <TIM_OC1_SetConfig+0x110>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d00b      	beq.n	800a03e <TIM_OC1_SetConfig+0xbe>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a1a      	ldr	r2, [pc, #104]	@ (800a094 <TIM_OC1_SetConfig+0x114>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d007      	beq.n	800a03e <TIM_OC1_SetConfig+0xbe>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a19      	ldr	r2, [pc, #100]	@ (800a098 <TIM_OC1_SetConfig+0x118>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d003      	beq.n	800a03e <TIM_OC1_SetConfig+0xbe>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a18      	ldr	r2, [pc, #96]	@ (800a09c <TIM_OC1_SetConfig+0x11c>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d111      	bne.n	800a062 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a04c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	695b      	ldr	r3, [r3, #20]
 800a052:	693a      	ldr	r2, [r7, #16]
 800a054:	4313      	orrs	r3, r2
 800a056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	699b      	ldr	r3, [r3, #24]
 800a05c:	693a      	ldr	r2, [r7, #16]
 800a05e:	4313      	orrs	r3, r2
 800a060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	693a      	ldr	r2, [r7, #16]
 800a066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	685a      	ldr	r2, [r3, #4]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	697a      	ldr	r2, [r7, #20]
 800a07a:	621a      	str	r2, [r3, #32]
}
 800a07c:	bf00      	nop
 800a07e:	371c      	adds	r7, #28
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr
 800a088:	fffeff8f 	.word	0xfffeff8f
 800a08c:	40010000 	.word	0x40010000
 800a090:	40010400 	.word	0x40010400
 800a094:	40014000 	.word	0x40014000
 800a098:	40014400 	.word	0x40014400
 800a09c:	40014800 	.word	0x40014800

0800a0a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b087      	sub	sp, #28
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a1b      	ldr	r3, [r3, #32]
 800a0ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a1b      	ldr	r3, [r3, #32]
 800a0b4:	f023 0210 	bic.w	r2, r3, #16
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	4b34      	ldr	r3, [pc, #208]	@ (800a19c <TIM_OC2_SetConfig+0xfc>)
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a0d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	021b      	lsls	r3, r3, #8
 800a0de:	68fa      	ldr	r2, [r7, #12]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	f023 0320 	bic.w	r3, r3, #32
 800a0ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	011b      	lsls	r3, r3, #4
 800a0f2:	697a      	ldr	r2, [r7, #20]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a29      	ldr	r2, [pc, #164]	@ (800a1a0 <TIM_OC2_SetConfig+0x100>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d003      	beq.n	800a108 <TIM_OC2_SetConfig+0x68>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a28      	ldr	r2, [pc, #160]	@ (800a1a4 <TIM_OC2_SetConfig+0x104>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d10d      	bne.n	800a124 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a10e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	011b      	lsls	r3, r3, #4
 800a116:	697a      	ldr	r2, [r7, #20]
 800a118:	4313      	orrs	r3, r2
 800a11a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a122:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4a1e      	ldr	r2, [pc, #120]	@ (800a1a0 <TIM_OC2_SetConfig+0x100>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d00f      	beq.n	800a14c <TIM_OC2_SetConfig+0xac>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a1d      	ldr	r2, [pc, #116]	@ (800a1a4 <TIM_OC2_SetConfig+0x104>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d00b      	beq.n	800a14c <TIM_OC2_SetConfig+0xac>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a1c      	ldr	r2, [pc, #112]	@ (800a1a8 <TIM_OC2_SetConfig+0x108>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d007      	beq.n	800a14c <TIM_OC2_SetConfig+0xac>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a1b      	ldr	r2, [pc, #108]	@ (800a1ac <TIM_OC2_SetConfig+0x10c>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d003      	beq.n	800a14c <TIM_OC2_SetConfig+0xac>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	4a1a      	ldr	r2, [pc, #104]	@ (800a1b0 <TIM_OC2_SetConfig+0x110>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d113      	bne.n	800a174 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a152:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a15a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	695b      	ldr	r3, [r3, #20]
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	693a      	ldr	r2, [r7, #16]
 800a164:	4313      	orrs	r3, r2
 800a166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	699b      	ldr	r3, [r3, #24]
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	693a      	ldr	r2, [r7, #16]
 800a170:	4313      	orrs	r3, r2
 800a172:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	693a      	ldr	r2, [r7, #16]
 800a178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	685a      	ldr	r2, [r3, #4]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	697a      	ldr	r2, [r7, #20]
 800a18c:	621a      	str	r2, [r3, #32]
}
 800a18e:	bf00      	nop
 800a190:	371c      	adds	r7, #28
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	feff8fff 	.word	0xfeff8fff
 800a1a0:	40010000 	.word	0x40010000
 800a1a4:	40010400 	.word	0x40010400
 800a1a8:	40014000 	.word	0x40014000
 800a1ac:	40014400 	.word	0x40014400
 800a1b0:	40014800 	.word	0x40014800

0800a1b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b087      	sub	sp, #28
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a1b      	ldr	r3, [r3, #32]
 800a1c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6a1b      	ldr	r3, [r3, #32]
 800a1c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	69db      	ldr	r3, [r3, #28]
 800a1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	4b33      	ldr	r3, [pc, #204]	@ (800a2ac <TIM_OC3_SetConfig+0xf8>)
 800a1e0:	4013      	ands	r3, r2
 800a1e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f023 0303 	bic.w	r3, r3, #3
 800a1ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a1fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	021b      	lsls	r3, r3, #8
 800a204:	697a      	ldr	r2, [r7, #20]
 800a206:	4313      	orrs	r3, r2
 800a208:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	4a28      	ldr	r2, [pc, #160]	@ (800a2b0 <TIM_OC3_SetConfig+0xfc>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d003      	beq.n	800a21a <TIM_OC3_SetConfig+0x66>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4a27      	ldr	r2, [pc, #156]	@ (800a2b4 <TIM_OC3_SetConfig+0x100>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d10d      	bne.n	800a236 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a220:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	021b      	lsls	r3, r3, #8
 800a228:	697a      	ldr	r2, [r7, #20]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a1d      	ldr	r2, [pc, #116]	@ (800a2b0 <TIM_OC3_SetConfig+0xfc>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d00f      	beq.n	800a25e <TIM_OC3_SetConfig+0xaa>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a1c      	ldr	r2, [pc, #112]	@ (800a2b4 <TIM_OC3_SetConfig+0x100>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d00b      	beq.n	800a25e <TIM_OC3_SetConfig+0xaa>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4a1b      	ldr	r2, [pc, #108]	@ (800a2b8 <TIM_OC3_SetConfig+0x104>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d007      	beq.n	800a25e <TIM_OC3_SetConfig+0xaa>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	4a1a      	ldr	r2, [pc, #104]	@ (800a2bc <TIM_OC3_SetConfig+0x108>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d003      	beq.n	800a25e <TIM_OC3_SetConfig+0xaa>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	4a19      	ldr	r2, [pc, #100]	@ (800a2c0 <TIM_OC3_SetConfig+0x10c>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d113      	bne.n	800a286 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a26c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	695b      	ldr	r3, [r3, #20]
 800a272:	011b      	lsls	r3, r3, #4
 800a274:	693a      	ldr	r2, [r7, #16]
 800a276:	4313      	orrs	r3, r2
 800a278:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	699b      	ldr	r3, [r3, #24]
 800a27e:	011b      	lsls	r3, r3, #4
 800a280:	693a      	ldr	r2, [r7, #16]
 800a282:	4313      	orrs	r3, r2
 800a284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	693a      	ldr	r2, [r7, #16]
 800a28a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	685a      	ldr	r2, [r3, #4]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	697a      	ldr	r2, [r7, #20]
 800a29e:	621a      	str	r2, [r3, #32]
}
 800a2a0:	bf00      	nop
 800a2a2:	371c      	adds	r7, #28
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr
 800a2ac:	fffeff8f 	.word	0xfffeff8f
 800a2b0:	40010000 	.word	0x40010000
 800a2b4:	40010400 	.word	0x40010400
 800a2b8:	40014000 	.word	0x40014000
 800a2bc:	40014400 	.word	0x40014400
 800a2c0:	40014800 	.word	0x40014800

0800a2c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b087      	sub	sp, #28
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a1b      	ldr	r3, [r3, #32]
 800a2d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6a1b      	ldr	r3, [r3, #32]
 800a2d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	69db      	ldr	r3, [r3, #28]
 800a2ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	4b24      	ldr	r3, [pc, #144]	@ (800a380 <TIM_OC4_SetConfig+0xbc>)
 800a2f0:	4013      	ands	r3, r2
 800a2f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a2fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	021b      	lsls	r3, r3, #8
 800a302:	68fa      	ldr	r2, [r7, #12]
 800a304:	4313      	orrs	r3, r2
 800a306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a30e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	031b      	lsls	r3, r3, #12
 800a316:	693a      	ldr	r2, [r7, #16]
 800a318:	4313      	orrs	r3, r2
 800a31a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4a19      	ldr	r2, [pc, #100]	@ (800a384 <TIM_OC4_SetConfig+0xc0>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d00f      	beq.n	800a344 <TIM_OC4_SetConfig+0x80>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4a18      	ldr	r2, [pc, #96]	@ (800a388 <TIM_OC4_SetConfig+0xc4>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d00b      	beq.n	800a344 <TIM_OC4_SetConfig+0x80>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a17      	ldr	r2, [pc, #92]	@ (800a38c <TIM_OC4_SetConfig+0xc8>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d007      	beq.n	800a344 <TIM_OC4_SetConfig+0x80>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4a16      	ldr	r2, [pc, #88]	@ (800a390 <TIM_OC4_SetConfig+0xcc>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d003      	beq.n	800a344 <TIM_OC4_SetConfig+0x80>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a15      	ldr	r2, [pc, #84]	@ (800a394 <TIM_OC4_SetConfig+0xd0>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d109      	bne.n	800a358 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a34a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	695b      	ldr	r3, [r3, #20]
 800a350:	019b      	lsls	r3, r3, #6
 800a352:	697a      	ldr	r2, [r7, #20]
 800a354:	4313      	orrs	r3, r2
 800a356:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	697a      	ldr	r2, [r7, #20]
 800a35c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	685a      	ldr	r2, [r3, #4]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	693a      	ldr	r2, [r7, #16]
 800a370:	621a      	str	r2, [r3, #32]
}
 800a372:	bf00      	nop
 800a374:	371c      	adds	r7, #28
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
 800a37e:	bf00      	nop
 800a380:	feff8fff 	.word	0xfeff8fff
 800a384:	40010000 	.word	0x40010000
 800a388:	40010400 	.word	0x40010400
 800a38c:	40014000 	.word	0x40014000
 800a390:	40014400 	.word	0x40014400
 800a394:	40014800 	.word	0x40014800

0800a398 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a398:	b480      	push	{r7}
 800a39a:	b087      	sub	sp, #28
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a1b      	ldr	r3, [r3, #32]
 800a3a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6a1b      	ldr	r3, [r3, #32]
 800a3ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	4b21      	ldr	r3, [pc, #132]	@ (800a448 <TIM_OC5_SetConfig+0xb0>)
 800a3c4:	4013      	ands	r3, r2
 800a3c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	68fa      	ldr	r2, [r7, #12]
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a3d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	041b      	lsls	r3, r3, #16
 800a3e0:	693a      	ldr	r2, [r7, #16]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a18      	ldr	r2, [pc, #96]	@ (800a44c <TIM_OC5_SetConfig+0xb4>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d00f      	beq.n	800a40e <TIM_OC5_SetConfig+0x76>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a17      	ldr	r2, [pc, #92]	@ (800a450 <TIM_OC5_SetConfig+0xb8>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d00b      	beq.n	800a40e <TIM_OC5_SetConfig+0x76>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a16      	ldr	r2, [pc, #88]	@ (800a454 <TIM_OC5_SetConfig+0xbc>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d007      	beq.n	800a40e <TIM_OC5_SetConfig+0x76>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a15      	ldr	r2, [pc, #84]	@ (800a458 <TIM_OC5_SetConfig+0xc0>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d003      	beq.n	800a40e <TIM_OC5_SetConfig+0x76>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a14      	ldr	r2, [pc, #80]	@ (800a45c <TIM_OC5_SetConfig+0xc4>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d109      	bne.n	800a422 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a414:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	021b      	lsls	r3, r3, #8
 800a41c:	697a      	ldr	r2, [r7, #20]
 800a41e:	4313      	orrs	r3, r2
 800a420:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	697a      	ldr	r2, [r7, #20]
 800a426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	685a      	ldr	r2, [r3, #4]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	693a      	ldr	r2, [r7, #16]
 800a43a:	621a      	str	r2, [r3, #32]
}
 800a43c:	bf00      	nop
 800a43e:	371c      	adds	r7, #28
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr
 800a448:	fffeff8f 	.word	0xfffeff8f
 800a44c:	40010000 	.word	0x40010000
 800a450:	40010400 	.word	0x40010400
 800a454:	40014000 	.word	0x40014000
 800a458:	40014400 	.word	0x40014400
 800a45c:	40014800 	.word	0x40014800

0800a460 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a460:	b480      	push	{r7}
 800a462:	b087      	sub	sp, #28
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a1b      	ldr	r3, [r3, #32]
 800a46e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6a1b      	ldr	r3, [r3, #32]
 800a474:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a488:	68fa      	ldr	r2, [r7, #12]
 800a48a:	4b22      	ldr	r3, [pc, #136]	@ (800a514 <TIM_OC6_SetConfig+0xb4>)
 800a48c:	4013      	ands	r3, r2
 800a48e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	021b      	lsls	r3, r3, #8
 800a496:	68fa      	ldr	r2, [r7, #12]
 800a498:	4313      	orrs	r3, r2
 800a49a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a4a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	051b      	lsls	r3, r3, #20
 800a4aa:	693a      	ldr	r2, [r7, #16]
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a19      	ldr	r2, [pc, #100]	@ (800a518 <TIM_OC6_SetConfig+0xb8>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d00f      	beq.n	800a4d8 <TIM_OC6_SetConfig+0x78>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a18      	ldr	r2, [pc, #96]	@ (800a51c <TIM_OC6_SetConfig+0xbc>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d00b      	beq.n	800a4d8 <TIM_OC6_SetConfig+0x78>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a17      	ldr	r2, [pc, #92]	@ (800a520 <TIM_OC6_SetConfig+0xc0>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d007      	beq.n	800a4d8 <TIM_OC6_SetConfig+0x78>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a16      	ldr	r2, [pc, #88]	@ (800a524 <TIM_OC6_SetConfig+0xc4>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d003      	beq.n	800a4d8 <TIM_OC6_SetConfig+0x78>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a15      	ldr	r2, [pc, #84]	@ (800a528 <TIM_OC6_SetConfig+0xc8>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d109      	bne.n	800a4ec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a4de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	695b      	ldr	r3, [r3, #20]
 800a4e4:	029b      	lsls	r3, r3, #10
 800a4e6:	697a      	ldr	r2, [r7, #20]
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	697a      	ldr	r2, [r7, #20]
 800a4f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	685a      	ldr	r2, [r3, #4]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	693a      	ldr	r2, [r7, #16]
 800a504:	621a      	str	r2, [r3, #32]
}
 800a506:	bf00      	nop
 800a508:	371c      	adds	r7, #28
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	feff8fff 	.word	0xfeff8fff
 800a518:	40010000 	.word	0x40010000
 800a51c:	40010400 	.word	0x40010400
 800a520:	40014000 	.word	0x40014000
 800a524:	40014400 	.word	0x40014400
 800a528:	40014800 	.word	0x40014800

0800a52c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b087      	sub	sp, #28
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6a1b      	ldr	r3, [r3, #32]
 800a53c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6a1b      	ldr	r3, [r3, #32]
 800a542:	f023 0201 	bic.w	r2, r3, #1
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	699b      	ldr	r3, [r3, #24]
 800a54e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	011b      	lsls	r3, r3, #4
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	4313      	orrs	r3, r2
 800a560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	f023 030a 	bic.w	r3, r3, #10
 800a568:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a56a:	697a      	ldr	r2, [r7, #20]
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	4313      	orrs	r3, r2
 800a570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	693a      	ldr	r2, [r7, #16]
 800a576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	697a      	ldr	r2, [r7, #20]
 800a57c:	621a      	str	r2, [r3, #32]
}
 800a57e:	bf00      	nop
 800a580:	371c      	adds	r7, #28
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr

0800a58a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a58a:	b480      	push	{r7}
 800a58c:	b087      	sub	sp, #28
 800a58e:	af00      	add	r7, sp, #0
 800a590:	60f8      	str	r0, [r7, #12]
 800a592:	60b9      	str	r1, [r7, #8]
 800a594:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	6a1b      	ldr	r3, [r3, #32]
 800a59a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	6a1b      	ldr	r3, [r3, #32]
 800a5a0:	f023 0210 	bic.w	r2, r3, #16
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	699b      	ldr	r3, [r3, #24]
 800a5ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a5b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	031b      	lsls	r3, r3, #12
 800a5ba:	693a      	ldr	r2, [r7, #16]
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a5c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	011b      	lsls	r3, r3, #4
 800a5cc:	697a      	ldr	r2, [r7, #20]
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	693a      	ldr	r2, [r7, #16]
 800a5d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	697a      	ldr	r2, [r7, #20]
 800a5dc:	621a      	str	r2, [r3, #32]
}
 800a5de:	bf00      	nop
 800a5e0:	371c      	adds	r7, #28
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr
	...

0800a5ec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	4b09      	ldr	r3, [pc, #36]	@ (800a624 <TIM_ITRx_SetConfig+0x38>)
 800a600:	4013      	ands	r3, r2
 800a602:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a604:	683a      	ldr	r2, [r7, #0]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	4313      	orrs	r3, r2
 800a60a:	f043 0307 	orr.w	r3, r3, #7
 800a60e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	609a      	str	r2, [r3, #8]
}
 800a616:	bf00      	nop
 800a618:	3714      	adds	r7, #20
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	ffcfff8f 	.word	0xffcfff8f

0800a628 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a628:	b480      	push	{r7}
 800a62a:	b087      	sub	sp, #28
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
 800a634:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a642:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	021a      	lsls	r2, r3, #8
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	431a      	orrs	r2, r3
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	4313      	orrs	r3, r2
 800a650:	697a      	ldr	r2, [r7, #20]
 800a652:	4313      	orrs	r3, r2
 800a654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	697a      	ldr	r2, [r7, #20]
 800a65a:	609a      	str	r2, [r3, #8]
}
 800a65c:	bf00      	nop
 800a65e:	371c      	adds	r7, #28
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a668:	b480      	push	{r7}
 800a66a:	b087      	sub	sp, #28
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	f003 031f 	and.w	r3, r3, #31
 800a67a:	2201      	movs	r2, #1
 800a67c:	fa02 f303 	lsl.w	r3, r2, r3
 800a680:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6a1a      	ldr	r2, [r3, #32]
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	43db      	mvns	r3, r3
 800a68a:	401a      	ands	r2, r3
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6a1a      	ldr	r2, [r3, #32]
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	f003 031f 	and.w	r3, r3, #31
 800a69a:	6879      	ldr	r1, [r7, #4]
 800a69c:	fa01 f303 	lsl.w	r3, r1, r3
 800a6a0:	431a      	orrs	r2, r3
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	621a      	str	r2, [r3, #32]
}
 800a6a6:	bf00      	nop
 800a6a8:	371c      	adds	r7, #28
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
	...

0800a6b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d101      	bne.n	800a6cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6c8:	2302      	movs	r3, #2
 800a6ca:	e06d      	b.n	800a7a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2202      	movs	r2, #2
 800a6d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a30      	ldr	r2, [pc, #192]	@ (800a7b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d004      	beq.n	800a700 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a2f      	ldr	r2, [pc, #188]	@ (800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d108      	bne.n	800a712 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a706:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	4313      	orrs	r3, r2
 800a710:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a718:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	4313      	orrs	r3, r2
 800a722:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	68fa      	ldr	r2, [r7, #12]
 800a72a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a20      	ldr	r2, [pc, #128]	@ (800a7b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d022      	beq.n	800a77c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a73e:	d01d      	beq.n	800a77c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a1d      	ldr	r2, [pc, #116]	@ (800a7bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d018      	beq.n	800a77c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a1c      	ldr	r2, [pc, #112]	@ (800a7c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d013      	beq.n	800a77c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a1a      	ldr	r2, [pc, #104]	@ (800a7c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d00e      	beq.n	800a77c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a15      	ldr	r2, [pc, #84]	@ (800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d009      	beq.n	800a77c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a16      	ldr	r2, [pc, #88]	@ (800a7c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d004      	beq.n	800a77c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a15      	ldr	r2, [pc, #84]	@ (800a7cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d10c      	bne.n	800a796 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a782:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	68ba      	ldr	r2, [r7, #8]
 800a794:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2201      	movs	r2, #1
 800a79a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3714      	adds	r7, #20
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr
 800a7b4:	40010000 	.word	0x40010000
 800a7b8:	40010400 	.word	0x40010400
 800a7bc:	40000400 	.word	0x40000400
 800a7c0:	40000800 	.word	0x40000800
 800a7c4:	40000c00 	.word	0x40000c00
 800a7c8:	40001800 	.word	0x40001800
 800a7cc:	40014000 	.word	0x40014000

0800a7d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b085      	sub	sp, #20
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d101      	bne.n	800a7ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a7e8:	2302      	movs	r3, #2
 800a7ea:	e065      	b.n	800a8b8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	4313      	orrs	r3, r2
 800a800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	4313      	orrs	r3, r2
 800a80e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4313      	orrs	r3, r2
 800a82a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	4313      	orrs	r3, r2
 800a838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	695b      	ldr	r3, [r3, #20]
 800a844:	4313      	orrs	r3, r2
 800a846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a852:	4313      	orrs	r3, r2
 800a854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	699b      	ldr	r3, [r3, #24]
 800a860:	041b      	lsls	r3, r3, #16
 800a862:	4313      	orrs	r3, r2
 800a864:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a16      	ldr	r2, [pc, #88]	@ (800a8c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d004      	beq.n	800a87a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a14      	ldr	r2, [pc, #80]	@ (800a8c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d115      	bne.n	800a8a6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a884:	051b      	lsls	r3, r3, #20
 800a886:	4313      	orrs	r3, r2
 800a888:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	69db      	ldr	r3, [r3, #28]
 800a894:	4313      	orrs	r3, r2
 800a896:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	6a1b      	ldr	r3, [r3, #32]
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3714      	adds	r7, #20
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr
 800a8c4:	40010000 	.word	0x40010000
 800a8c8:	40010400 	.word	0x40010400

0800a8cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a8d4:	bf00      	nop
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a8e8:	bf00      	nop
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a8fc:	bf00      	nop
 800a8fe:	370c      	adds	r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d101      	bne.n	800a91a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	e042      	b.n	800a9a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a920:	2b00      	cmp	r3, #0
 800a922:	d106      	bne.n	800a932 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f7f8 fd93 	bl	8003458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2224      	movs	r2, #36	@ 0x24
 800a936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f022 0201 	bic.w	r2, r2, #1
 800a948:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d002      	beq.n	800a958 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f001 f9ac 	bl	800bcb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 fc41 	bl	800b1e0 <UART_SetConfig>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b01      	cmp	r3, #1
 800a962:	d101      	bne.n	800a968 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	e01b      	b.n	800a9a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	685a      	ldr	r2, [r3, #4]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a976:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	689a      	ldr	r2, [r3, #8]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a986:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f042 0201 	orr.w	r2, r2, #1
 800a996:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f001 fa2b 	bl	800bdf4 <UART_CheckIdleState>
 800a99e:	4603      	mov	r3, r0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3708      	adds	r7, #8
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b08a      	sub	sp, #40	@ 0x28
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9bc:	2b20      	cmp	r3, #32
 800a9be:	d137      	bne.n	800aa30 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d002      	beq.n	800a9cc <HAL_UART_Receive_IT+0x24>
 800a9c6:	88fb      	ldrh	r3, [r7, #6]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d101      	bne.n	800a9d0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	e030      	b.n	800aa32 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a18      	ldr	r2, [pc, #96]	@ (800aa3c <HAL_UART_Receive_IT+0x94>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d01f      	beq.n	800aa20 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d018      	beq.n	800aa20 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	e853 3f00 	ldrex	r3, [r3]
 800a9fa:	613b      	str	r3, [r7, #16]
   return(result);
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800aa02:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	461a      	mov	r2, r3
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa0c:	623b      	str	r3, [r7, #32]
 800aa0e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa10:	69f9      	ldr	r1, [r7, #28]
 800aa12:	6a3a      	ldr	r2, [r7, #32]
 800aa14:	e841 2300 	strex	r3, r2, [r1]
 800aa18:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1e6      	bne.n	800a9ee <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800aa20:	88fb      	ldrh	r3, [r7, #6]
 800aa22:	461a      	mov	r2, r3
 800aa24:	68b9      	ldr	r1, [r7, #8]
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	f001 fafc 	bl	800c024 <UART_Start_Receive_IT>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	e000      	b.n	800aa32 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800aa30:	2302      	movs	r3, #2
  }
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3728      	adds	r7, #40	@ 0x28
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	58000c00 	.word	0x58000c00

0800aa40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b0ba      	sub	sp, #232	@ 0xe8
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	69db      	ldr	r3, [r3, #28]
 800aa4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aa66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800aa6a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800aa6e:	4013      	ands	r3, r2
 800aa70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800aa74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d11b      	bne.n	800aab4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aa7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa80:	f003 0320 	and.w	r3, r3, #32
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d015      	beq.n	800aab4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aa88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa8c:	f003 0320 	and.w	r3, r3, #32
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d105      	bne.n	800aaa0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aa94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d009      	beq.n	800aab4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f000 8377 	beq.w	800b198 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	4798      	blx	r3
      }
      return;
 800aab2:	e371      	b.n	800b198 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aab4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f000 8123 	beq.w	800ad04 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aabe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800aac2:	4b8d      	ldr	r3, [pc, #564]	@ (800acf8 <HAL_UART_IRQHandler+0x2b8>)
 800aac4:	4013      	ands	r3, r2
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d106      	bne.n	800aad8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800aaca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800aace:	4b8b      	ldr	r3, [pc, #556]	@ (800acfc <HAL_UART_IRQHandler+0x2bc>)
 800aad0:	4013      	ands	r3, r2
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	f000 8116 	beq.w	800ad04 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aadc:	f003 0301 	and.w	r3, r3, #1
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d011      	beq.n	800ab08 <HAL_UART_IRQHandler+0xc8>
 800aae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00b      	beq.n	800ab08 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aafe:	f043 0201 	orr.w	r2, r3, #1
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab0c:	f003 0302 	and.w	r3, r3, #2
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d011      	beq.n	800ab38 <HAL_UART_IRQHandler+0xf8>
 800ab14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab18:	f003 0301 	and.w	r3, r3, #1
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00b      	beq.n	800ab38 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2202      	movs	r2, #2
 800ab26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab2e:	f043 0204 	orr.w	r2, r3, #4
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab3c:	f003 0304 	and.w	r3, r3, #4
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d011      	beq.n	800ab68 <HAL_UART_IRQHandler+0x128>
 800ab44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab48:	f003 0301 	and.w	r3, r3, #1
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00b      	beq.n	800ab68 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2204      	movs	r2, #4
 800ab56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab5e:	f043 0202 	orr.w	r2, r3, #2
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ab68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab6c:	f003 0308 	and.w	r3, r3, #8
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d017      	beq.n	800aba4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab78:	f003 0320 	and.w	r3, r3, #32
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d105      	bne.n	800ab8c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ab80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ab84:	4b5c      	ldr	r3, [pc, #368]	@ (800acf8 <HAL_UART_IRQHandler+0x2b8>)
 800ab86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00b      	beq.n	800aba4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2208      	movs	r2, #8
 800ab92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab9a:	f043 0208 	orr.w	r2, r3, #8
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aba8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800abac:	2b00      	cmp	r3, #0
 800abae:	d012      	beq.n	800abd6 <HAL_UART_IRQHandler+0x196>
 800abb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d00c      	beq.n	800abd6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800abc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abcc:	f043 0220 	orr.w	r2, r3, #32
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abdc:	2b00      	cmp	r3, #0
 800abde:	f000 82dd 	beq.w	800b19c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800abe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abe6:	f003 0320 	and.w	r3, r3, #32
 800abea:	2b00      	cmp	r3, #0
 800abec:	d013      	beq.n	800ac16 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800abee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abf2:	f003 0320 	and.w	r3, r3, #32
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d105      	bne.n	800ac06 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800abfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d007      	beq.n	800ac16 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d003      	beq.n	800ac16 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac2a:	2b40      	cmp	r3, #64	@ 0x40
 800ac2c:	d005      	beq.n	800ac3a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ac2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac32:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d054      	beq.n	800ace4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f001 fb14 	bl	800c268 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	689b      	ldr	r3, [r3, #8]
 800ac46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac4a:	2b40      	cmp	r3, #64	@ 0x40
 800ac4c:	d146      	bne.n	800acdc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	3308      	adds	r3, #8
 800ac54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ac5c:	e853 3f00 	ldrex	r3, [r3]
 800ac60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ac64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	3308      	adds	r3, #8
 800ac76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ac7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ac7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ac86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ac8a:	e841 2300 	strex	r3, r2, [r1]
 800ac8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ac92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1d9      	bne.n	800ac4e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d017      	beq.n	800acd4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acaa:	4a15      	ldr	r2, [pc, #84]	@ (800ad00 <HAL_UART_IRQHandler+0x2c0>)
 800acac:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7f9 fba7 	bl	8004408 <HAL_DMA_Abort_IT>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d019      	beq.n	800acf4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800acce:	4610      	mov	r0, r2
 800acd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acd2:	e00f      	b.n	800acf4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 fa6d 	bl	800b1b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acda:	e00b      	b.n	800acf4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 fa69 	bl	800b1b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ace2:	e007      	b.n	800acf4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 fa65 	bl	800b1b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800acf2:	e253      	b.n	800b19c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acf4:	bf00      	nop
    return;
 800acf6:	e251      	b.n	800b19c <HAL_UART_IRQHandler+0x75c>
 800acf8:	10000001 	.word	0x10000001
 800acfc:	04000120 	.word	0x04000120
 800ad00:	0800c335 	.word	0x0800c335

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	f040 81e7 	bne.w	800b0dc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ad0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad12:	f003 0310 	and.w	r3, r3, #16
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	f000 81e0 	beq.w	800b0dc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ad1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad20:	f003 0310 	and.w	r3, r3, #16
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f000 81d9 	beq.w	800b0dc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2210      	movs	r2, #16
 800ad30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad3c:	2b40      	cmp	r3, #64	@ 0x40
 800ad3e:	f040 8151 	bne.w	800afe4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4a96      	ldr	r2, [pc, #600]	@ (800afa4 <HAL_UART_IRQHandler+0x564>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d068      	beq.n	800ae22 <HAL_UART_IRQHandler+0x3e2>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a93      	ldr	r2, [pc, #588]	@ (800afa8 <HAL_UART_IRQHandler+0x568>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d061      	beq.n	800ae22 <HAL_UART_IRQHandler+0x3e2>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a91      	ldr	r2, [pc, #580]	@ (800afac <HAL_UART_IRQHandler+0x56c>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d05a      	beq.n	800ae22 <HAL_UART_IRQHandler+0x3e2>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a8e      	ldr	r2, [pc, #568]	@ (800afb0 <HAL_UART_IRQHandler+0x570>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d053      	beq.n	800ae22 <HAL_UART_IRQHandler+0x3e2>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a8c      	ldr	r2, [pc, #560]	@ (800afb4 <HAL_UART_IRQHandler+0x574>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d04c      	beq.n	800ae22 <HAL_UART_IRQHandler+0x3e2>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a89      	ldr	r2, [pc, #548]	@ (800afb8 <HAL_UART_IRQHandler+0x578>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d045      	beq.n	800ae22 <HAL_UART_IRQHandler+0x3e2>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a87      	ldr	r2, [pc, #540]	@ (800afbc <HAL_UART_IRQHandler+0x57c>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d03e      	beq.n	800ae22 <HAL_UART_IRQHandler+0x3e2>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a84      	ldr	r2, [pc, #528]	@ (800afc0 <HAL_UART_IRQHandler+0x580>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d037      	beq.n	800ae22 <HAL_UART_IRQHandler+0x3e2>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a82      	ldr	r2, [pc, #520]	@ (800afc4 <HAL_UART_IRQHandler+0x584>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d030      	beq.n	800ae22 <HAL_UART_IRQHandler+0x3e2>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a7f      	ldr	r2, [pc, #508]	@ (800afc8 <HAL_UART_IRQHandler+0x588>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d029      	beq.n	800ae22 <HAL_UART_IRQHandler+0x3e2>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a7d      	ldr	r2, [pc, #500]	@ (800afcc <HAL_UART_IRQHandler+0x58c>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d022      	beq.n	800ae22 <HAL_UART_IRQHandler+0x3e2>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a7a      	ldr	r2, [pc, #488]	@ (800afd0 <HAL_UART_IRQHandler+0x590>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d01b      	beq.n	800ae22 <HAL_UART_IRQHandler+0x3e2>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a78      	ldr	r2, [pc, #480]	@ (800afd4 <HAL_UART_IRQHandler+0x594>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d014      	beq.n	800ae22 <HAL_UART_IRQHandler+0x3e2>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a75      	ldr	r2, [pc, #468]	@ (800afd8 <HAL_UART_IRQHandler+0x598>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d00d      	beq.n	800ae22 <HAL_UART_IRQHandler+0x3e2>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a73      	ldr	r2, [pc, #460]	@ (800afdc <HAL_UART_IRQHandler+0x59c>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d006      	beq.n	800ae22 <HAL_UART_IRQHandler+0x3e2>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4a70      	ldr	r2, [pc, #448]	@ (800afe0 <HAL_UART_IRQHandler+0x5a0>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d106      	bne.n	800ae30 <HAL_UART_IRQHandler+0x3f0>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	e005      	b.n	800ae3c <HAL_UART_IRQHandler+0x3fc>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ae40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	f000 81ab 	beq.w	800b1a0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ae50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ae54:	429a      	cmp	r2, r3
 800ae56:	f080 81a3 	bcs.w	800b1a0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ae60:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae6a:	69db      	ldr	r3, [r3, #28]
 800ae6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae70:	f000 8087 	beq.w	800af82 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ae80:	e853 3f00 	ldrex	r3, [r3]
 800ae84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ae88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ae8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	461a      	mov	r2, r3
 800ae9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ae9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aea2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800aeaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800aeae:	e841 2300 	strex	r3, r2, [r1]
 800aeb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800aeb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1da      	bne.n	800ae74 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	3308      	adds	r3, #8
 800aec4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aec8:	e853 3f00 	ldrex	r3, [r3]
 800aecc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800aece:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aed0:	f023 0301 	bic.w	r3, r3, #1
 800aed4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	3308      	adds	r3, #8
 800aede:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800aee2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800aee6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800aeea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800aeee:	e841 2300 	strex	r3, r2, [r1]
 800aef2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800aef4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d1e1      	bne.n	800aebe <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	3308      	adds	r3, #8
 800af00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af04:	e853 3f00 	ldrex	r3, [r3]
 800af08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800af0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	3308      	adds	r3, #8
 800af1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800af1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800af20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800af24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800af26:	e841 2300 	strex	r3, r2, [r1]
 800af2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800af2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d1e3      	bne.n	800aefa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2220      	movs	r2, #32
 800af36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2200      	movs	r2, #0
 800af3e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af48:	e853 3f00 	ldrex	r3, [r3]
 800af4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800af4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af50:	f023 0310 	bic.w	r3, r3, #16
 800af54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	461a      	mov	r2, r3
 800af5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af62:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800af68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800af6a:	e841 2300 	strex	r3, r2, [r1]
 800af6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800af70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af72:	2b00      	cmp	r3, #0
 800af74:	d1e4      	bne.n	800af40 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7f8 ff25 	bl	8003dcc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2202      	movs	r2, #2
 800af86:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af94:	b29b      	uxth	r3, r3
 800af96:	1ad3      	subs	r3, r2, r3
 800af98:	b29b      	uxth	r3, r3
 800af9a:	4619      	mov	r1, r3
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 f913 	bl	800b1c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800afa2:	e0fd      	b.n	800b1a0 <HAL_UART_IRQHandler+0x760>
 800afa4:	40020010 	.word	0x40020010
 800afa8:	40020028 	.word	0x40020028
 800afac:	40020040 	.word	0x40020040
 800afb0:	40020058 	.word	0x40020058
 800afb4:	40020070 	.word	0x40020070
 800afb8:	40020088 	.word	0x40020088
 800afbc:	400200a0 	.word	0x400200a0
 800afc0:	400200b8 	.word	0x400200b8
 800afc4:	40020410 	.word	0x40020410
 800afc8:	40020428 	.word	0x40020428
 800afcc:	40020440 	.word	0x40020440
 800afd0:	40020458 	.word	0x40020458
 800afd4:	40020470 	.word	0x40020470
 800afd8:	40020488 	.word	0x40020488
 800afdc:	400204a0 	.word	0x400204a0
 800afe0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	1ad3      	subs	r3, r2, r3
 800aff4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800affe:	b29b      	uxth	r3, r3
 800b000:	2b00      	cmp	r3, #0
 800b002:	f000 80cf 	beq.w	800b1a4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b006:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	f000 80ca 	beq.w	800b1a4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b018:	e853 3f00 	ldrex	r3, [r3]
 800b01c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b01e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b020:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b024:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	461a      	mov	r2, r3
 800b02e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b032:	647b      	str	r3, [r7, #68]	@ 0x44
 800b034:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b036:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b038:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b03a:	e841 2300 	strex	r3, r2, [r1]
 800b03e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b042:	2b00      	cmp	r3, #0
 800b044:	d1e4      	bne.n	800b010 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	3308      	adds	r3, #8
 800b04c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b050:	e853 3f00 	ldrex	r3, [r3]
 800b054:	623b      	str	r3, [r7, #32]
   return(result);
 800b056:	6a3a      	ldr	r2, [r7, #32]
 800b058:	4b55      	ldr	r3, [pc, #340]	@ (800b1b0 <HAL_UART_IRQHandler+0x770>)
 800b05a:	4013      	ands	r3, r2
 800b05c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	3308      	adds	r3, #8
 800b066:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b06a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b06c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b06e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b072:	e841 2300 	strex	r3, r2, [r1]
 800b076:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d1e3      	bne.n	800b046 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2220      	movs	r2, #32
 800b082:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	e853 3f00 	ldrex	r3, [r3]
 800b09e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f023 0310 	bic.w	r3, r3, #16
 800b0a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b0b4:	61fb      	str	r3, [r7, #28]
 800b0b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b8:	69b9      	ldr	r1, [r7, #24]
 800b0ba:	69fa      	ldr	r2, [r7, #28]
 800b0bc:	e841 2300 	strex	r3, r2, [r1]
 800b0c0:	617b      	str	r3, [r7, #20]
   return(result);
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d1e4      	bne.n	800b092 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2202      	movs	r2, #2
 800b0cc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b0ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 f877 	bl	800b1c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b0da:	e063      	b.n	800b1a4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b0dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00e      	beq.n	800b106 <HAL_UART_IRQHandler+0x6c6>
 800b0e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d008      	beq.n	800b106 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b0fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f001 fe76 	bl	800cdf0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b104:	e051      	b.n	800b1aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b10a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d014      	beq.n	800b13c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d105      	bne.n	800b12a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b11e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b122:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b126:	2b00      	cmp	r3, #0
 800b128:	d008      	beq.n	800b13c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d03a      	beq.n	800b1a8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	4798      	blx	r3
    }
    return;
 800b13a:	e035      	b.n	800b1a8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b13c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b144:	2b00      	cmp	r3, #0
 800b146:	d009      	beq.n	800b15c <HAL_UART_IRQHandler+0x71c>
 800b148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b14c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b150:	2b00      	cmp	r3, #0
 800b152:	d003      	beq.n	800b15c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f001 f903 	bl	800c360 <UART_EndTransmit_IT>
    return;
 800b15a:	e026      	b.n	800b1aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b15c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b160:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b164:	2b00      	cmp	r3, #0
 800b166:	d009      	beq.n	800b17c <HAL_UART_IRQHandler+0x73c>
 800b168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b16c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b170:	2b00      	cmp	r3, #0
 800b172:	d003      	beq.n	800b17c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f001 fe4f 	bl	800ce18 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b17a:	e016      	b.n	800b1aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b17c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b180:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b184:	2b00      	cmp	r3, #0
 800b186:	d010      	beq.n	800b1aa <HAL_UART_IRQHandler+0x76a>
 800b188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	da0c      	bge.n	800b1aa <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f001 fe37 	bl	800ce04 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b196:	e008      	b.n	800b1aa <HAL_UART_IRQHandler+0x76a>
      return;
 800b198:	bf00      	nop
 800b19a:	e006      	b.n	800b1aa <HAL_UART_IRQHandler+0x76a>
    return;
 800b19c:	bf00      	nop
 800b19e:	e004      	b.n	800b1aa <HAL_UART_IRQHandler+0x76a>
      return;
 800b1a0:	bf00      	nop
 800b1a2:	e002      	b.n	800b1aa <HAL_UART_IRQHandler+0x76a>
      return;
 800b1a4:	bf00      	nop
 800b1a6:	e000      	b.n	800b1aa <HAL_UART_IRQHandler+0x76a>
    return;
 800b1a8:	bf00      	nop
  }
}
 800b1aa:	37e8      	adds	r7, #232	@ 0xe8
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	effffffe 	.word	0xeffffffe

0800b1b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b1bc:	bf00      	nop
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b1d4:	bf00      	nop
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1e4:	b092      	sub	sp, #72	@ 0x48
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	689a      	ldr	r2, [r3, #8]
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	691b      	ldr	r3, [r3, #16]
 800b1f8:	431a      	orrs	r2, r3
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	695b      	ldr	r3, [r3, #20]
 800b1fe:	431a      	orrs	r2, r3
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	69db      	ldr	r3, [r3, #28]
 800b204:	4313      	orrs	r3, r2
 800b206:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	4bbe      	ldr	r3, [pc, #760]	@ (800b508 <UART_SetConfig+0x328>)
 800b210:	4013      	ands	r3, r2
 800b212:	697a      	ldr	r2, [r7, #20]
 800b214:	6812      	ldr	r2, [r2, #0]
 800b216:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b218:	430b      	orrs	r3, r1
 800b21a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	68da      	ldr	r2, [r3, #12]
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	430a      	orrs	r2, r1
 800b230:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	699b      	ldr	r3, [r3, #24]
 800b236:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4ab3      	ldr	r2, [pc, #716]	@ (800b50c <UART_SetConfig+0x32c>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d004      	beq.n	800b24c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	6a1b      	ldr	r3, [r3, #32]
 800b246:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b248:	4313      	orrs	r3, r2
 800b24a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	689a      	ldr	r2, [r3, #8]
 800b252:	4baf      	ldr	r3, [pc, #700]	@ (800b510 <UART_SetConfig+0x330>)
 800b254:	4013      	ands	r3, r2
 800b256:	697a      	ldr	r2, [r7, #20]
 800b258:	6812      	ldr	r2, [r2, #0]
 800b25a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b25c:	430b      	orrs	r3, r1
 800b25e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b266:	f023 010f 	bic.w	r1, r3, #15
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	430a      	orrs	r2, r1
 800b274:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4aa6      	ldr	r2, [pc, #664]	@ (800b514 <UART_SetConfig+0x334>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d177      	bne.n	800b370 <UART_SetConfig+0x190>
 800b280:	4ba5      	ldr	r3, [pc, #660]	@ (800b518 <UART_SetConfig+0x338>)
 800b282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b284:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b288:	2b28      	cmp	r3, #40	@ 0x28
 800b28a:	d86d      	bhi.n	800b368 <UART_SetConfig+0x188>
 800b28c:	a201      	add	r2, pc, #4	@ (adr r2, 800b294 <UART_SetConfig+0xb4>)
 800b28e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b292:	bf00      	nop
 800b294:	0800b339 	.word	0x0800b339
 800b298:	0800b369 	.word	0x0800b369
 800b29c:	0800b369 	.word	0x0800b369
 800b2a0:	0800b369 	.word	0x0800b369
 800b2a4:	0800b369 	.word	0x0800b369
 800b2a8:	0800b369 	.word	0x0800b369
 800b2ac:	0800b369 	.word	0x0800b369
 800b2b0:	0800b369 	.word	0x0800b369
 800b2b4:	0800b341 	.word	0x0800b341
 800b2b8:	0800b369 	.word	0x0800b369
 800b2bc:	0800b369 	.word	0x0800b369
 800b2c0:	0800b369 	.word	0x0800b369
 800b2c4:	0800b369 	.word	0x0800b369
 800b2c8:	0800b369 	.word	0x0800b369
 800b2cc:	0800b369 	.word	0x0800b369
 800b2d0:	0800b369 	.word	0x0800b369
 800b2d4:	0800b349 	.word	0x0800b349
 800b2d8:	0800b369 	.word	0x0800b369
 800b2dc:	0800b369 	.word	0x0800b369
 800b2e0:	0800b369 	.word	0x0800b369
 800b2e4:	0800b369 	.word	0x0800b369
 800b2e8:	0800b369 	.word	0x0800b369
 800b2ec:	0800b369 	.word	0x0800b369
 800b2f0:	0800b369 	.word	0x0800b369
 800b2f4:	0800b351 	.word	0x0800b351
 800b2f8:	0800b369 	.word	0x0800b369
 800b2fc:	0800b369 	.word	0x0800b369
 800b300:	0800b369 	.word	0x0800b369
 800b304:	0800b369 	.word	0x0800b369
 800b308:	0800b369 	.word	0x0800b369
 800b30c:	0800b369 	.word	0x0800b369
 800b310:	0800b369 	.word	0x0800b369
 800b314:	0800b359 	.word	0x0800b359
 800b318:	0800b369 	.word	0x0800b369
 800b31c:	0800b369 	.word	0x0800b369
 800b320:	0800b369 	.word	0x0800b369
 800b324:	0800b369 	.word	0x0800b369
 800b328:	0800b369 	.word	0x0800b369
 800b32c:	0800b369 	.word	0x0800b369
 800b330:	0800b369 	.word	0x0800b369
 800b334:	0800b361 	.word	0x0800b361
 800b338:	2301      	movs	r3, #1
 800b33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b33e:	e222      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b340:	2304      	movs	r3, #4
 800b342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b346:	e21e      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b348:	2308      	movs	r3, #8
 800b34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b34e:	e21a      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b350:	2310      	movs	r3, #16
 800b352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b356:	e216      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b358:	2320      	movs	r3, #32
 800b35a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b35e:	e212      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b360:	2340      	movs	r3, #64	@ 0x40
 800b362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b366:	e20e      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b368:	2380      	movs	r3, #128	@ 0x80
 800b36a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b36e:	e20a      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a69      	ldr	r2, [pc, #420]	@ (800b51c <UART_SetConfig+0x33c>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d130      	bne.n	800b3dc <UART_SetConfig+0x1fc>
 800b37a:	4b67      	ldr	r3, [pc, #412]	@ (800b518 <UART_SetConfig+0x338>)
 800b37c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b37e:	f003 0307 	and.w	r3, r3, #7
 800b382:	2b05      	cmp	r3, #5
 800b384:	d826      	bhi.n	800b3d4 <UART_SetConfig+0x1f4>
 800b386:	a201      	add	r2, pc, #4	@ (adr r2, 800b38c <UART_SetConfig+0x1ac>)
 800b388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b38c:	0800b3a5 	.word	0x0800b3a5
 800b390:	0800b3ad 	.word	0x0800b3ad
 800b394:	0800b3b5 	.word	0x0800b3b5
 800b398:	0800b3bd 	.word	0x0800b3bd
 800b39c:	0800b3c5 	.word	0x0800b3c5
 800b3a0:	0800b3cd 	.word	0x0800b3cd
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3aa:	e1ec      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b3ac:	2304      	movs	r3, #4
 800b3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3b2:	e1e8      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b3b4:	2308      	movs	r3, #8
 800b3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3ba:	e1e4      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b3bc:	2310      	movs	r3, #16
 800b3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3c2:	e1e0      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b3c4:	2320      	movs	r3, #32
 800b3c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3ca:	e1dc      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b3cc:	2340      	movs	r3, #64	@ 0x40
 800b3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3d2:	e1d8      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b3d4:	2380      	movs	r3, #128	@ 0x80
 800b3d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3da:	e1d4      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a4f      	ldr	r2, [pc, #316]	@ (800b520 <UART_SetConfig+0x340>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d130      	bne.n	800b448 <UART_SetConfig+0x268>
 800b3e6:	4b4c      	ldr	r3, [pc, #304]	@ (800b518 <UART_SetConfig+0x338>)
 800b3e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3ea:	f003 0307 	and.w	r3, r3, #7
 800b3ee:	2b05      	cmp	r3, #5
 800b3f0:	d826      	bhi.n	800b440 <UART_SetConfig+0x260>
 800b3f2:	a201      	add	r2, pc, #4	@ (adr r2, 800b3f8 <UART_SetConfig+0x218>)
 800b3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f8:	0800b411 	.word	0x0800b411
 800b3fc:	0800b419 	.word	0x0800b419
 800b400:	0800b421 	.word	0x0800b421
 800b404:	0800b429 	.word	0x0800b429
 800b408:	0800b431 	.word	0x0800b431
 800b40c:	0800b439 	.word	0x0800b439
 800b410:	2300      	movs	r3, #0
 800b412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b416:	e1b6      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b418:	2304      	movs	r3, #4
 800b41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b41e:	e1b2      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b420:	2308      	movs	r3, #8
 800b422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b426:	e1ae      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b428:	2310      	movs	r3, #16
 800b42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b42e:	e1aa      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b430:	2320      	movs	r3, #32
 800b432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b436:	e1a6      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b438:	2340      	movs	r3, #64	@ 0x40
 800b43a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b43e:	e1a2      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b440:	2380      	movs	r3, #128	@ 0x80
 800b442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b446:	e19e      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4a35      	ldr	r2, [pc, #212]	@ (800b524 <UART_SetConfig+0x344>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d130      	bne.n	800b4b4 <UART_SetConfig+0x2d4>
 800b452:	4b31      	ldr	r3, [pc, #196]	@ (800b518 <UART_SetConfig+0x338>)
 800b454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b456:	f003 0307 	and.w	r3, r3, #7
 800b45a:	2b05      	cmp	r3, #5
 800b45c:	d826      	bhi.n	800b4ac <UART_SetConfig+0x2cc>
 800b45e:	a201      	add	r2, pc, #4	@ (adr r2, 800b464 <UART_SetConfig+0x284>)
 800b460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b464:	0800b47d 	.word	0x0800b47d
 800b468:	0800b485 	.word	0x0800b485
 800b46c:	0800b48d 	.word	0x0800b48d
 800b470:	0800b495 	.word	0x0800b495
 800b474:	0800b49d 	.word	0x0800b49d
 800b478:	0800b4a5 	.word	0x0800b4a5
 800b47c:	2300      	movs	r3, #0
 800b47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b482:	e180      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b484:	2304      	movs	r3, #4
 800b486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b48a:	e17c      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b48c:	2308      	movs	r3, #8
 800b48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b492:	e178      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b494:	2310      	movs	r3, #16
 800b496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b49a:	e174      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b49c:	2320      	movs	r3, #32
 800b49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4a2:	e170      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b4a4:	2340      	movs	r3, #64	@ 0x40
 800b4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4aa:	e16c      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b4ac:	2380      	movs	r3, #128	@ 0x80
 800b4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4b2:	e168      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a1b      	ldr	r2, [pc, #108]	@ (800b528 <UART_SetConfig+0x348>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d142      	bne.n	800b544 <UART_SetConfig+0x364>
 800b4be:	4b16      	ldr	r3, [pc, #88]	@ (800b518 <UART_SetConfig+0x338>)
 800b4c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4c2:	f003 0307 	and.w	r3, r3, #7
 800b4c6:	2b05      	cmp	r3, #5
 800b4c8:	d838      	bhi.n	800b53c <UART_SetConfig+0x35c>
 800b4ca:	a201      	add	r2, pc, #4	@ (adr r2, 800b4d0 <UART_SetConfig+0x2f0>)
 800b4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d0:	0800b4e9 	.word	0x0800b4e9
 800b4d4:	0800b4f1 	.word	0x0800b4f1
 800b4d8:	0800b4f9 	.word	0x0800b4f9
 800b4dc:	0800b501 	.word	0x0800b501
 800b4e0:	0800b52d 	.word	0x0800b52d
 800b4e4:	0800b535 	.word	0x0800b535
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4ee:	e14a      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b4f0:	2304      	movs	r3, #4
 800b4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4f6:	e146      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b4f8:	2308      	movs	r3, #8
 800b4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4fe:	e142      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b500:	2310      	movs	r3, #16
 800b502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b506:	e13e      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b508:	cfff69f3 	.word	0xcfff69f3
 800b50c:	58000c00 	.word	0x58000c00
 800b510:	11fff4ff 	.word	0x11fff4ff
 800b514:	40011000 	.word	0x40011000
 800b518:	58024400 	.word	0x58024400
 800b51c:	40004400 	.word	0x40004400
 800b520:	40004800 	.word	0x40004800
 800b524:	40004c00 	.word	0x40004c00
 800b528:	40005000 	.word	0x40005000
 800b52c:	2320      	movs	r3, #32
 800b52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b532:	e128      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b534:	2340      	movs	r3, #64	@ 0x40
 800b536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b53a:	e124      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b53c:	2380      	movs	r3, #128	@ 0x80
 800b53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b542:	e120      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4acb      	ldr	r2, [pc, #812]	@ (800b878 <UART_SetConfig+0x698>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d176      	bne.n	800b63c <UART_SetConfig+0x45c>
 800b54e:	4bcb      	ldr	r3, [pc, #812]	@ (800b87c <UART_SetConfig+0x69c>)
 800b550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b552:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b556:	2b28      	cmp	r3, #40	@ 0x28
 800b558:	d86c      	bhi.n	800b634 <UART_SetConfig+0x454>
 800b55a:	a201      	add	r2, pc, #4	@ (adr r2, 800b560 <UART_SetConfig+0x380>)
 800b55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b560:	0800b605 	.word	0x0800b605
 800b564:	0800b635 	.word	0x0800b635
 800b568:	0800b635 	.word	0x0800b635
 800b56c:	0800b635 	.word	0x0800b635
 800b570:	0800b635 	.word	0x0800b635
 800b574:	0800b635 	.word	0x0800b635
 800b578:	0800b635 	.word	0x0800b635
 800b57c:	0800b635 	.word	0x0800b635
 800b580:	0800b60d 	.word	0x0800b60d
 800b584:	0800b635 	.word	0x0800b635
 800b588:	0800b635 	.word	0x0800b635
 800b58c:	0800b635 	.word	0x0800b635
 800b590:	0800b635 	.word	0x0800b635
 800b594:	0800b635 	.word	0x0800b635
 800b598:	0800b635 	.word	0x0800b635
 800b59c:	0800b635 	.word	0x0800b635
 800b5a0:	0800b615 	.word	0x0800b615
 800b5a4:	0800b635 	.word	0x0800b635
 800b5a8:	0800b635 	.word	0x0800b635
 800b5ac:	0800b635 	.word	0x0800b635
 800b5b0:	0800b635 	.word	0x0800b635
 800b5b4:	0800b635 	.word	0x0800b635
 800b5b8:	0800b635 	.word	0x0800b635
 800b5bc:	0800b635 	.word	0x0800b635
 800b5c0:	0800b61d 	.word	0x0800b61d
 800b5c4:	0800b635 	.word	0x0800b635
 800b5c8:	0800b635 	.word	0x0800b635
 800b5cc:	0800b635 	.word	0x0800b635
 800b5d0:	0800b635 	.word	0x0800b635
 800b5d4:	0800b635 	.word	0x0800b635
 800b5d8:	0800b635 	.word	0x0800b635
 800b5dc:	0800b635 	.word	0x0800b635
 800b5e0:	0800b625 	.word	0x0800b625
 800b5e4:	0800b635 	.word	0x0800b635
 800b5e8:	0800b635 	.word	0x0800b635
 800b5ec:	0800b635 	.word	0x0800b635
 800b5f0:	0800b635 	.word	0x0800b635
 800b5f4:	0800b635 	.word	0x0800b635
 800b5f8:	0800b635 	.word	0x0800b635
 800b5fc:	0800b635 	.word	0x0800b635
 800b600:	0800b62d 	.word	0x0800b62d
 800b604:	2301      	movs	r3, #1
 800b606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b60a:	e0bc      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b60c:	2304      	movs	r3, #4
 800b60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b612:	e0b8      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b614:	2308      	movs	r3, #8
 800b616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b61a:	e0b4      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b61c:	2310      	movs	r3, #16
 800b61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b622:	e0b0      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b624:	2320      	movs	r3, #32
 800b626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b62a:	e0ac      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b62c:	2340      	movs	r3, #64	@ 0x40
 800b62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b632:	e0a8      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b634:	2380      	movs	r3, #128	@ 0x80
 800b636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b63a:	e0a4      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4a8f      	ldr	r2, [pc, #572]	@ (800b880 <UART_SetConfig+0x6a0>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d130      	bne.n	800b6a8 <UART_SetConfig+0x4c8>
 800b646:	4b8d      	ldr	r3, [pc, #564]	@ (800b87c <UART_SetConfig+0x69c>)
 800b648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b64a:	f003 0307 	and.w	r3, r3, #7
 800b64e:	2b05      	cmp	r3, #5
 800b650:	d826      	bhi.n	800b6a0 <UART_SetConfig+0x4c0>
 800b652:	a201      	add	r2, pc, #4	@ (adr r2, 800b658 <UART_SetConfig+0x478>)
 800b654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b658:	0800b671 	.word	0x0800b671
 800b65c:	0800b679 	.word	0x0800b679
 800b660:	0800b681 	.word	0x0800b681
 800b664:	0800b689 	.word	0x0800b689
 800b668:	0800b691 	.word	0x0800b691
 800b66c:	0800b699 	.word	0x0800b699
 800b670:	2300      	movs	r3, #0
 800b672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b676:	e086      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b678:	2304      	movs	r3, #4
 800b67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b67e:	e082      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b680:	2308      	movs	r3, #8
 800b682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b686:	e07e      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b688:	2310      	movs	r3, #16
 800b68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b68e:	e07a      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b690:	2320      	movs	r3, #32
 800b692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b696:	e076      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b698:	2340      	movs	r3, #64	@ 0x40
 800b69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b69e:	e072      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b6a0:	2380      	movs	r3, #128	@ 0x80
 800b6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6a6:	e06e      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a75      	ldr	r2, [pc, #468]	@ (800b884 <UART_SetConfig+0x6a4>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d130      	bne.n	800b714 <UART_SetConfig+0x534>
 800b6b2:	4b72      	ldr	r3, [pc, #456]	@ (800b87c <UART_SetConfig+0x69c>)
 800b6b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6b6:	f003 0307 	and.w	r3, r3, #7
 800b6ba:	2b05      	cmp	r3, #5
 800b6bc:	d826      	bhi.n	800b70c <UART_SetConfig+0x52c>
 800b6be:	a201      	add	r2, pc, #4	@ (adr r2, 800b6c4 <UART_SetConfig+0x4e4>)
 800b6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c4:	0800b6dd 	.word	0x0800b6dd
 800b6c8:	0800b6e5 	.word	0x0800b6e5
 800b6cc:	0800b6ed 	.word	0x0800b6ed
 800b6d0:	0800b6f5 	.word	0x0800b6f5
 800b6d4:	0800b6fd 	.word	0x0800b6fd
 800b6d8:	0800b705 	.word	0x0800b705
 800b6dc:	2300      	movs	r3, #0
 800b6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6e2:	e050      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b6e4:	2304      	movs	r3, #4
 800b6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ea:	e04c      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b6ec:	2308      	movs	r3, #8
 800b6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6f2:	e048      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b6f4:	2310      	movs	r3, #16
 800b6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6fa:	e044      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b6fc:	2320      	movs	r3, #32
 800b6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b702:	e040      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b704:	2340      	movs	r3, #64	@ 0x40
 800b706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b70a:	e03c      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b70c:	2380      	movs	r3, #128	@ 0x80
 800b70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b712:	e038      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4a5b      	ldr	r2, [pc, #364]	@ (800b888 <UART_SetConfig+0x6a8>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d130      	bne.n	800b780 <UART_SetConfig+0x5a0>
 800b71e:	4b57      	ldr	r3, [pc, #348]	@ (800b87c <UART_SetConfig+0x69c>)
 800b720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b722:	f003 0307 	and.w	r3, r3, #7
 800b726:	2b05      	cmp	r3, #5
 800b728:	d826      	bhi.n	800b778 <UART_SetConfig+0x598>
 800b72a:	a201      	add	r2, pc, #4	@ (adr r2, 800b730 <UART_SetConfig+0x550>)
 800b72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b730:	0800b749 	.word	0x0800b749
 800b734:	0800b751 	.word	0x0800b751
 800b738:	0800b759 	.word	0x0800b759
 800b73c:	0800b761 	.word	0x0800b761
 800b740:	0800b769 	.word	0x0800b769
 800b744:	0800b771 	.word	0x0800b771
 800b748:	2302      	movs	r3, #2
 800b74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b74e:	e01a      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b750:	2304      	movs	r3, #4
 800b752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b756:	e016      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b758:	2308      	movs	r3, #8
 800b75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b75e:	e012      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b760:	2310      	movs	r3, #16
 800b762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b766:	e00e      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b768:	2320      	movs	r3, #32
 800b76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b76e:	e00a      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b770:	2340      	movs	r3, #64	@ 0x40
 800b772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b776:	e006      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b778:	2380      	movs	r3, #128	@ 0x80
 800b77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b77e:	e002      	b.n	800b786 <UART_SetConfig+0x5a6>
 800b780:	2380      	movs	r3, #128	@ 0x80
 800b782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4a3f      	ldr	r2, [pc, #252]	@ (800b888 <UART_SetConfig+0x6a8>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	f040 80f8 	bne.w	800b982 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b792:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b796:	2b20      	cmp	r3, #32
 800b798:	dc46      	bgt.n	800b828 <UART_SetConfig+0x648>
 800b79a:	2b02      	cmp	r3, #2
 800b79c:	f2c0 8082 	blt.w	800b8a4 <UART_SetConfig+0x6c4>
 800b7a0:	3b02      	subs	r3, #2
 800b7a2:	2b1e      	cmp	r3, #30
 800b7a4:	d87e      	bhi.n	800b8a4 <UART_SetConfig+0x6c4>
 800b7a6:	a201      	add	r2, pc, #4	@ (adr r2, 800b7ac <UART_SetConfig+0x5cc>)
 800b7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ac:	0800b82f 	.word	0x0800b82f
 800b7b0:	0800b8a5 	.word	0x0800b8a5
 800b7b4:	0800b837 	.word	0x0800b837
 800b7b8:	0800b8a5 	.word	0x0800b8a5
 800b7bc:	0800b8a5 	.word	0x0800b8a5
 800b7c0:	0800b8a5 	.word	0x0800b8a5
 800b7c4:	0800b847 	.word	0x0800b847
 800b7c8:	0800b8a5 	.word	0x0800b8a5
 800b7cc:	0800b8a5 	.word	0x0800b8a5
 800b7d0:	0800b8a5 	.word	0x0800b8a5
 800b7d4:	0800b8a5 	.word	0x0800b8a5
 800b7d8:	0800b8a5 	.word	0x0800b8a5
 800b7dc:	0800b8a5 	.word	0x0800b8a5
 800b7e0:	0800b8a5 	.word	0x0800b8a5
 800b7e4:	0800b857 	.word	0x0800b857
 800b7e8:	0800b8a5 	.word	0x0800b8a5
 800b7ec:	0800b8a5 	.word	0x0800b8a5
 800b7f0:	0800b8a5 	.word	0x0800b8a5
 800b7f4:	0800b8a5 	.word	0x0800b8a5
 800b7f8:	0800b8a5 	.word	0x0800b8a5
 800b7fc:	0800b8a5 	.word	0x0800b8a5
 800b800:	0800b8a5 	.word	0x0800b8a5
 800b804:	0800b8a5 	.word	0x0800b8a5
 800b808:	0800b8a5 	.word	0x0800b8a5
 800b80c:	0800b8a5 	.word	0x0800b8a5
 800b810:	0800b8a5 	.word	0x0800b8a5
 800b814:	0800b8a5 	.word	0x0800b8a5
 800b818:	0800b8a5 	.word	0x0800b8a5
 800b81c:	0800b8a5 	.word	0x0800b8a5
 800b820:	0800b8a5 	.word	0x0800b8a5
 800b824:	0800b897 	.word	0x0800b897
 800b828:	2b40      	cmp	r3, #64	@ 0x40
 800b82a:	d037      	beq.n	800b89c <UART_SetConfig+0x6bc>
 800b82c:	e03a      	b.n	800b8a4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b82e:	f7fd f963 	bl	8008af8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b832:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b834:	e03c      	b.n	800b8b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7fd f972 	bl	8008b24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b844:	e034      	b.n	800b8b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b846:	f107 0318 	add.w	r3, r7, #24
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7fd fabe 	bl	8008dcc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b850:	69fb      	ldr	r3, [r7, #28]
 800b852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b854:	e02c      	b.n	800b8b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b856:	4b09      	ldr	r3, [pc, #36]	@ (800b87c <UART_SetConfig+0x69c>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f003 0320 	and.w	r3, r3, #32
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d016      	beq.n	800b890 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b862:	4b06      	ldr	r3, [pc, #24]	@ (800b87c <UART_SetConfig+0x69c>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	08db      	lsrs	r3, r3, #3
 800b868:	f003 0303 	and.w	r3, r3, #3
 800b86c:	4a07      	ldr	r2, [pc, #28]	@ (800b88c <UART_SetConfig+0x6ac>)
 800b86e:	fa22 f303 	lsr.w	r3, r2, r3
 800b872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b874:	e01c      	b.n	800b8b0 <UART_SetConfig+0x6d0>
 800b876:	bf00      	nop
 800b878:	40011400 	.word	0x40011400
 800b87c:	58024400 	.word	0x58024400
 800b880:	40007800 	.word	0x40007800
 800b884:	40007c00 	.word	0x40007c00
 800b888:	58000c00 	.word	0x58000c00
 800b88c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b890:	4b9d      	ldr	r3, [pc, #628]	@ (800bb08 <UART_SetConfig+0x928>)
 800b892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b894:	e00c      	b.n	800b8b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b896:	4b9d      	ldr	r3, [pc, #628]	@ (800bb0c <UART_SetConfig+0x92c>)
 800b898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b89a:	e009      	b.n	800b8b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b89c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b8a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8a2:	e005      	b.n	800b8b0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b8ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b8b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	f000 81de 	beq.w	800bc74 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8bc:	4a94      	ldr	r2, [pc, #592]	@ (800bb10 <UART_SetConfig+0x930>)
 800b8be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8ca:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	685a      	ldr	r2, [r3, #4]
 800b8d0:	4613      	mov	r3, r2
 800b8d2:	005b      	lsls	r3, r3, #1
 800b8d4:	4413      	add	r3, r2
 800b8d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d305      	bcc.n	800b8e8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b8e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d903      	bls.n	800b8f0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b8ee:	e1c1      	b.n	800bc74 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	60bb      	str	r3, [r7, #8]
 800b8f6:	60fa      	str	r2, [r7, #12]
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8fc:	4a84      	ldr	r2, [pc, #528]	@ (800bb10 <UART_SetConfig+0x930>)
 800b8fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b902:	b29b      	uxth	r3, r3
 800b904:	2200      	movs	r2, #0
 800b906:	603b      	str	r3, [r7, #0]
 800b908:	607a      	str	r2, [r7, #4]
 800b90a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b90e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b912:	f7f4 fd3d 	bl	8000390 <__aeabi_uldivmod>
 800b916:	4602      	mov	r2, r0
 800b918:	460b      	mov	r3, r1
 800b91a:	4610      	mov	r0, r2
 800b91c:	4619      	mov	r1, r3
 800b91e:	f04f 0200 	mov.w	r2, #0
 800b922:	f04f 0300 	mov.w	r3, #0
 800b926:	020b      	lsls	r3, r1, #8
 800b928:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b92c:	0202      	lsls	r2, r0, #8
 800b92e:	6979      	ldr	r1, [r7, #20]
 800b930:	6849      	ldr	r1, [r1, #4]
 800b932:	0849      	lsrs	r1, r1, #1
 800b934:	2000      	movs	r0, #0
 800b936:	460c      	mov	r4, r1
 800b938:	4605      	mov	r5, r0
 800b93a:	eb12 0804 	adds.w	r8, r2, r4
 800b93e:	eb43 0905 	adc.w	r9, r3, r5
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	469a      	mov	sl, r3
 800b94a:	4693      	mov	fp, r2
 800b94c:	4652      	mov	r2, sl
 800b94e:	465b      	mov	r3, fp
 800b950:	4640      	mov	r0, r8
 800b952:	4649      	mov	r1, r9
 800b954:	f7f4 fd1c 	bl	8000390 <__aeabi_uldivmod>
 800b958:	4602      	mov	r2, r0
 800b95a:	460b      	mov	r3, r1
 800b95c:	4613      	mov	r3, r2
 800b95e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b962:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b966:	d308      	bcc.n	800b97a <UART_SetConfig+0x79a>
 800b968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b96a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b96e:	d204      	bcs.n	800b97a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b976:	60da      	str	r2, [r3, #12]
 800b978:	e17c      	b.n	800bc74 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b97a:	2301      	movs	r3, #1
 800b97c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b980:	e178      	b.n	800bc74 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	69db      	ldr	r3, [r3, #28]
 800b986:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b98a:	f040 80c5 	bne.w	800bb18 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b98e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b992:	2b20      	cmp	r3, #32
 800b994:	dc48      	bgt.n	800ba28 <UART_SetConfig+0x848>
 800b996:	2b00      	cmp	r3, #0
 800b998:	db7b      	blt.n	800ba92 <UART_SetConfig+0x8b2>
 800b99a:	2b20      	cmp	r3, #32
 800b99c:	d879      	bhi.n	800ba92 <UART_SetConfig+0x8b2>
 800b99e:	a201      	add	r2, pc, #4	@ (adr r2, 800b9a4 <UART_SetConfig+0x7c4>)
 800b9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a4:	0800ba2f 	.word	0x0800ba2f
 800b9a8:	0800ba37 	.word	0x0800ba37
 800b9ac:	0800ba93 	.word	0x0800ba93
 800b9b0:	0800ba93 	.word	0x0800ba93
 800b9b4:	0800ba3f 	.word	0x0800ba3f
 800b9b8:	0800ba93 	.word	0x0800ba93
 800b9bc:	0800ba93 	.word	0x0800ba93
 800b9c0:	0800ba93 	.word	0x0800ba93
 800b9c4:	0800ba4f 	.word	0x0800ba4f
 800b9c8:	0800ba93 	.word	0x0800ba93
 800b9cc:	0800ba93 	.word	0x0800ba93
 800b9d0:	0800ba93 	.word	0x0800ba93
 800b9d4:	0800ba93 	.word	0x0800ba93
 800b9d8:	0800ba93 	.word	0x0800ba93
 800b9dc:	0800ba93 	.word	0x0800ba93
 800b9e0:	0800ba93 	.word	0x0800ba93
 800b9e4:	0800ba5f 	.word	0x0800ba5f
 800b9e8:	0800ba93 	.word	0x0800ba93
 800b9ec:	0800ba93 	.word	0x0800ba93
 800b9f0:	0800ba93 	.word	0x0800ba93
 800b9f4:	0800ba93 	.word	0x0800ba93
 800b9f8:	0800ba93 	.word	0x0800ba93
 800b9fc:	0800ba93 	.word	0x0800ba93
 800ba00:	0800ba93 	.word	0x0800ba93
 800ba04:	0800ba93 	.word	0x0800ba93
 800ba08:	0800ba93 	.word	0x0800ba93
 800ba0c:	0800ba93 	.word	0x0800ba93
 800ba10:	0800ba93 	.word	0x0800ba93
 800ba14:	0800ba93 	.word	0x0800ba93
 800ba18:	0800ba93 	.word	0x0800ba93
 800ba1c:	0800ba93 	.word	0x0800ba93
 800ba20:	0800ba93 	.word	0x0800ba93
 800ba24:	0800ba85 	.word	0x0800ba85
 800ba28:	2b40      	cmp	r3, #64	@ 0x40
 800ba2a:	d02e      	beq.n	800ba8a <UART_SetConfig+0x8aa>
 800ba2c:	e031      	b.n	800ba92 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba2e:	f7fb fe2d 	bl	800768c <HAL_RCC_GetPCLK1Freq>
 800ba32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ba34:	e033      	b.n	800ba9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba36:	f7fb fe3f 	bl	80076b8 <HAL_RCC_GetPCLK2Freq>
 800ba3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ba3c:	e02f      	b.n	800ba9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7fd f86e 	bl	8008b24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba4c:	e027      	b.n	800ba9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba4e:	f107 0318 	add.w	r3, r7, #24
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fd f9ba 	bl	8008dcc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba58:	69fb      	ldr	r3, [r7, #28]
 800ba5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba5c:	e01f      	b.n	800ba9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba5e:	4b2d      	ldr	r3, [pc, #180]	@ (800bb14 <UART_SetConfig+0x934>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f003 0320 	and.w	r3, r3, #32
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d009      	beq.n	800ba7e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba6a:	4b2a      	ldr	r3, [pc, #168]	@ (800bb14 <UART_SetConfig+0x934>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	08db      	lsrs	r3, r3, #3
 800ba70:	f003 0303 	and.w	r3, r3, #3
 800ba74:	4a24      	ldr	r2, [pc, #144]	@ (800bb08 <UART_SetConfig+0x928>)
 800ba76:	fa22 f303 	lsr.w	r3, r2, r3
 800ba7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba7c:	e00f      	b.n	800ba9e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ba7e:	4b22      	ldr	r3, [pc, #136]	@ (800bb08 <UART_SetConfig+0x928>)
 800ba80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba82:	e00c      	b.n	800ba9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba84:	4b21      	ldr	r3, [pc, #132]	@ (800bb0c <UART_SetConfig+0x92c>)
 800ba86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba88:	e009      	b.n	800ba9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba90:	e005      	b.n	800ba9e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ba92:	2300      	movs	r3, #0
 800ba94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ba96:	2301      	movs	r3, #1
 800ba98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ba9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ba9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f000 80e7 	beq.w	800bc74 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baaa:	4a19      	ldr	r2, [pc, #100]	@ (800bb10 <UART_SetConfig+0x930>)
 800baac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bab0:	461a      	mov	r2, r3
 800bab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bab4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bab8:	005a      	lsls	r2, r3, #1
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	085b      	lsrs	r3, r3, #1
 800bac0:	441a      	add	r2, r3
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	fbb2 f3f3 	udiv	r3, r2, r3
 800baca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bacc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bace:	2b0f      	cmp	r3, #15
 800bad0:	d916      	bls.n	800bb00 <UART_SetConfig+0x920>
 800bad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bad8:	d212      	bcs.n	800bb00 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800badc:	b29b      	uxth	r3, r3
 800bade:	f023 030f 	bic.w	r3, r3, #15
 800bae2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae6:	085b      	lsrs	r3, r3, #1
 800bae8:	b29b      	uxth	r3, r3
 800baea:	f003 0307 	and.w	r3, r3, #7
 800baee:	b29a      	uxth	r2, r3
 800baf0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800baf2:	4313      	orrs	r3, r2
 800baf4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bafc:	60da      	str	r2, [r3, #12]
 800bafe:	e0b9      	b.n	800bc74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bb00:	2301      	movs	r3, #1
 800bb02:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bb06:	e0b5      	b.n	800bc74 <UART_SetConfig+0xa94>
 800bb08:	03d09000 	.word	0x03d09000
 800bb0c:	003d0900 	.word	0x003d0900
 800bb10:	080103d8 	.word	0x080103d8
 800bb14:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bb18:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bb1c:	2b20      	cmp	r3, #32
 800bb1e:	dc49      	bgt.n	800bbb4 <UART_SetConfig+0x9d4>
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	db7c      	blt.n	800bc1e <UART_SetConfig+0xa3e>
 800bb24:	2b20      	cmp	r3, #32
 800bb26:	d87a      	bhi.n	800bc1e <UART_SetConfig+0xa3e>
 800bb28:	a201      	add	r2, pc, #4	@ (adr r2, 800bb30 <UART_SetConfig+0x950>)
 800bb2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2e:	bf00      	nop
 800bb30:	0800bbbb 	.word	0x0800bbbb
 800bb34:	0800bbc3 	.word	0x0800bbc3
 800bb38:	0800bc1f 	.word	0x0800bc1f
 800bb3c:	0800bc1f 	.word	0x0800bc1f
 800bb40:	0800bbcb 	.word	0x0800bbcb
 800bb44:	0800bc1f 	.word	0x0800bc1f
 800bb48:	0800bc1f 	.word	0x0800bc1f
 800bb4c:	0800bc1f 	.word	0x0800bc1f
 800bb50:	0800bbdb 	.word	0x0800bbdb
 800bb54:	0800bc1f 	.word	0x0800bc1f
 800bb58:	0800bc1f 	.word	0x0800bc1f
 800bb5c:	0800bc1f 	.word	0x0800bc1f
 800bb60:	0800bc1f 	.word	0x0800bc1f
 800bb64:	0800bc1f 	.word	0x0800bc1f
 800bb68:	0800bc1f 	.word	0x0800bc1f
 800bb6c:	0800bc1f 	.word	0x0800bc1f
 800bb70:	0800bbeb 	.word	0x0800bbeb
 800bb74:	0800bc1f 	.word	0x0800bc1f
 800bb78:	0800bc1f 	.word	0x0800bc1f
 800bb7c:	0800bc1f 	.word	0x0800bc1f
 800bb80:	0800bc1f 	.word	0x0800bc1f
 800bb84:	0800bc1f 	.word	0x0800bc1f
 800bb88:	0800bc1f 	.word	0x0800bc1f
 800bb8c:	0800bc1f 	.word	0x0800bc1f
 800bb90:	0800bc1f 	.word	0x0800bc1f
 800bb94:	0800bc1f 	.word	0x0800bc1f
 800bb98:	0800bc1f 	.word	0x0800bc1f
 800bb9c:	0800bc1f 	.word	0x0800bc1f
 800bba0:	0800bc1f 	.word	0x0800bc1f
 800bba4:	0800bc1f 	.word	0x0800bc1f
 800bba8:	0800bc1f 	.word	0x0800bc1f
 800bbac:	0800bc1f 	.word	0x0800bc1f
 800bbb0:	0800bc11 	.word	0x0800bc11
 800bbb4:	2b40      	cmp	r3, #64	@ 0x40
 800bbb6:	d02e      	beq.n	800bc16 <UART_SetConfig+0xa36>
 800bbb8:	e031      	b.n	800bc1e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbba:	f7fb fd67 	bl	800768c <HAL_RCC_GetPCLK1Freq>
 800bbbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bbc0:	e033      	b.n	800bc2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bbc2:	f7fb fd79 	bl	80076b8 <HAL_RCC_GetPCLK2Freq>
 800bbc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bbc8:	e02f      	b.n	800bc2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7fc ffa8 	bl	8008b24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bbd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbd8:	e027      	b.n	800bc2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbda:	f107 0318 	add.w	r3, r7, #24
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7fd f8f4 	bl	8008dcc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bbe4:	69fb      	ldr	r3, [r7, #28]
 800bbe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbe8:	e01f      	b.n	800bc2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbea:	4b2d      	ldr	r3, [pc, #180]	@ (800bca0 <UART_SetConfig+0xac0>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f003 0320 	and.w	r3, r3, #32
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d009      	beq.n	800bc0a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bbf6:	4b2a      	ldr	r3, [pc, #168]	@ (800bca0 <UART_SetConfig+0xac0>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	08db      	lsrs	r3, r3, #3
 800bbfc:	f003 0303 	and.w	r3, r3, #3
 800bc00:	4a28      	ldr	r2, [pc, #160]	@ (800bca4 <UART_SetConfig+0xac4>)
 800bc02:	fa22 f303 	lsr.w	r3, r2, r3
 800bc06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc08:	e00f      	b.n	800bc2a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bc0a:	4b26      	ldr	r3, [pc, #152]	@ (800bca4 <UART_SetConfig+0xac4>)
 800bc0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc0e:	e00c      	b.n	800bc2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc10:	4b25      	ldr	r3, [pc, #148]	@ (800bca8 <UART_SetConfig+0xac8>)
 800bc12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc14:	e009      	b.n	800bc2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc1c:	e005      	b.n	800bc2a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bc22:	2301      	movs	r3, #1
 800bc24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bc28:	bf00      	nop
    }

    if (pclk != 0U)
 800bc2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d021      	beq.n	800bc74 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc34:	4a1d      	ldr	r2, [pc, #116]	@ (800bcac <UART_SetConfig+0xacc>)
 800bc36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc3e:	fbb3 f2f2 	udiv	r2, r3, r2
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	085b      	lsrs	r3, r3, #1
 800bc48:	441a      	add	r2, r3
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc52:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc56:	2b0f      	cmp	r3, #15
 800bc58:	d909      	bls.n	800bc6e <UART_SetConfig+0xa8e>
 800bc5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc60:	d205      	bcs.n	800bc6e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc64:	b29a      	uxth	r2, r3
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	60da      	str	r2, [r3, #12]
 800bc6c:	e002      	b.n	800bc74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	2200      	movs	r2, #0
 800bc88:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bc90:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3748      	adds	r7, #72	@ 0x48
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc9e:	bf00      	nop
 800bca0:	58024400 	.word	0x58024400
 800bca4:	03d09000 	.word	0x03d09000
 800bca8:	003d0900 	.word	0x003d0900
 800bcac:	080103d8 	.word	0x080103d8

0800bcb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b083      	sub	sp, #12
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcbc:	f003 0308 	and.w	r3, r3, #8
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d00a      	beq.n	800bcda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	430a      	orrs	r2, r1
 800bcd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcde:	f003 0301 	and.w	r3, r3, #1
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d00a      	beq.n	800bcfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	430a      	orrs	r2, r1
 800bcfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd00:	f003 0302 	and.w	r3, r3, #2
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d00a      	beq.n	800bd1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	430a      	orrs	r2, r1
 800bd1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd22:	f003 0304 	and.w	r3, r3, #4
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00a      	beq.n	800bd40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	430a      	orrs	r2, r1
 800bd3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd44:	f003 0310 	and.w	r3, r3, #16
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d00a      	beq.n	800bd62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	430a      	orrs	r2, r1
 800bd60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd66:	f003 0320 	and.w	r3, r3, #32
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00a      	beq.n	800bd84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	430a      	orrs	r2, r1
 800bd82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d01a      	beq.n	800bdc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	430a      	orrs	r2, r1
 800bda4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bdae:	d10a      	bne.n	800bdc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	430a      	orrs	r2, r1
 800bdc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d00a      	beq.n	800bde8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	430a      	orrs	r2, r1
 800bde6:	605a      	str	r2, [r3, #4]
  }
}
 800bde8:	bf00      	nop
 800bdea:	370c      	adds	r7, #12
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr

0800bdf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b098      	sub	sp, #96	@ 0x60
 800bdf8:	af02      	add	r7, sp, #8
 800bdfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2200      	movs	r2, #0
 800be00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be04:	f7f7 fe42 	bl	8003a8c <HAL_GetTick>
 800be08:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f003 0308 	and.w	r3, r3, #8
 800be14:	2b08      	cmp	r3, #8
 800be16:	d12f      	bne.n	800be78 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800be1c:	9300      	str	r3, [sp, #0]
 800be1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be20:	2200      	movs	r2, #0
 800be22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 f88e 	bl	800bf48 <UART_WaitOnFlagUntilTimeout>
 800be2c:	4603      	mov	r3, r0
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d022      	beq.n	800be78 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be3a:	e853 3f00 	ldrex	r3, [r3]
 800be3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800be40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be46:	653b      	str	r3, [r7, #80]	@ 0x50
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	461a      	mov	r2, r3
 800be4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be50:	647b      	str	r3, [r7, #68]	@ 0x44
 800be52:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be58:	e841 2300 	strex	r3, r2, [r1]
 800be5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800be5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be60:	2b00      	cmp	r3, #0
 800be62:	d1e6      	bne.n	800be32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2220      	movs	r2, #32
 800be68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be74:	2303      	movs	r3, #3
 800be76:	e063      	b.n	800bf40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f003 0304 	and.w	r3, r3, #4
 800be82:	2b04      	cmp	r3, #4
 800be84:	d149      	bne.n	800bf1a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be86:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be8e:	2200      	movs	r2, #0
 800be90:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f000 f857 	bl	800bf48 <UART_WaitOnFlagUntilTimeout>
 800be9a:	4603      	mov	r3, r0
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d03c      	beq.n	800bf1a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bea8:	e853 3f00 	ldrex	r3, [r3]
 800beac:	623b      	str	r3, [r7, #32]
   return(result);
 800beae:	6a3b      	ldr	r3, [r7, #32]
 800beb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800beb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	461a      	mov	r2, r3
 800bebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bebe:	633b      	str	r3, [r7, #48]	@ 0x30
 800bec0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bec4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bec6:	e841 2300 	strex	r3, r2, [r1]
 800beca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800becc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d1e6      	bne.n	800bea0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	3308      	adds	r3, #8
 800bed8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	e853 3f00 	ldrex	r3, [r3]
 800bee0:	60fb      	str	r3, [r7, #12]
   return(result);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f023 0301 	bic.w	r3, r3, #1
 800bee8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	3308      	adds	r3, #8
 800bef0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bef2:	61fa      	str	r2, [r7, #28]
 800bef4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef6:	69b9      	ldr	r1, [r7, #24]
 800bef8:	69fa      	ldr	r2, [r7, #28]
 800befa:	e841 2300 	strex	r3, r2, [r1]
 800befe:	617b      	str	r3, [r7, #20]
   return(result);
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d1e5      	bne.n	800bed2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2220      	movs	r2, #32
 800bf0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2200      	movs	r2, #0
 800bf12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf16:	2303      	movs	r3, #3
 800bf18:	e012      	b.n	800bf40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2220      	movs	r2, #32
 800bf1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2220      	movs	r2, #32
 800bf26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf3e:	2300      	movs	r3, #0
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3758      	adds	r7, #88	@ 0x58
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	603b      	str	r3, [r7, #0]
 800bf54:	4613      	mov	r3, r2
 800bf56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf58:	e04f      	b.n	800bffa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf60:	d04b      	beq.n	800bffa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf62:	f7f7 fd93 	bl	8003a8c <HAL_GetTick>
 800bf66:	4602      	mov	r2, r0
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	1ad3      	subs	r3, r2, r3
 800bf6c:	69ba      	ldr	r2, [r7, #24]
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d302      	bcc.n	800bf78 <UART_WaitOnFlagUntilTimeout+0x30>
 800bf72:	69bb      	ldr	r3, [r7, #24]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d101      	bne.n	800bf7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bf78:	2303      	movs	r3, #3
 800bf7a:	e04e      	b.n	800c01a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f003 0304 	and.w	r3, r3, #4
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d037      	beq.n	800bffa <UART_WaitOnFlagUntilTimeout+0xb2>
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	2b80      	cmp	r3, #128	@ 0x80
 800bf8e:	d034      	beq.n	800bffa <UART_WaitOnFlagUntilTimeout+0xb2>
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	2b40      	cmp	r3, #64	@ 0x40
 800bf94:	d031      	beq.n	800bffa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	69db      	ldr	r3, [r3, #28]
 800bf9c:	f003 0308 	and.w	r3, r3, #8
 800bfa0:	2b08      	cmp	r3, #8
 800bfa2:	d110      	bne.n	800bfc6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	2208      	movs	r2, #8
 800bfaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bfac:	68f8      	ldr	r0, [r7, #12]
 800bfae:	f000 f95b 	bl	800c268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2208      	movs	r2, #8
 800bfb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e029      	b.n	800c01a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	69db      	ldr	r3, [r3, #28]
 800bfcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bfd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bfd4:	d111      	bne.n	800bffa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bfde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bfe0:	68f8      	ldr	r0, [r7, #12]
 800bfe2:	f000 f941 	bl	800c268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2220      	movs	r2, #32
 800bfea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2200      	movs	r2, #0
 800bff2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bff6:	2303      	movs	r3, #3
 800bff8:	e00f      	b.n	800c01a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	69da      	ldr	r2, [r3, #28]
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	4013      	ands	r3, r2
 800c004:	68ba      	ldr	r2, [r7, #8]
 800c006:	429a      	cmp	r2, r3
 800c008:	bf0c      	ite	eq
 800c00a:	2301      	moveq	r3, #1
 800c00c:	2300      	movne	r3, #0
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	461a      	mov	r2, r3
 800c012:	79fb      	ldrb	r3, [r7, #7]
 800c014:	429a      	cmp	r2, r3
 800c016:	d0a0      	beq.n	800bf5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c018:	2300      	movs	r3, #0
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3710      	adds	r7, #16
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
	...

0800c024 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c024:	b480      	push	{r7}
 800c026:	b0a3      	sub	sp, #140	@ 0x8c
 800c028:	af00      	add	r7, sp, #0
 800c02a:	60f8      	str	r0, [r7, #12]
 800c02c:	60b9      	str	r1, [r7, #8]
 800c02e:	4613      	mov	r3, r2
 800c030:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	68ba      	ldr	r2, [r7, #8]
 800c036:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	88fa      	ldrh	r2, [r7, #6]
 800c03c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	88fa      	ldrh	r2, [r7, #6]
 800c044:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2200      	movs	r2, #0
 800c04c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c056:	d10e      	bne.n	800c076 <UART_Start_Receive_IT+0x52>
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	691b      	ldr	r3, [r3, #16]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d105      	bne.n	800c06c <UART_Start_Receive_IT+0x48>
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c066:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c06a:	e02d      	b.n	800c0c8 <UART_Start_Receive_IT+0xa4>
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	22ff      	movs	r2, #255	@ 0xff
 800c070:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c074:	e028      	b.n	800c0c8 <UART_Start_Receive_IT+0xa4>
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	689b      	ldr	r3, [r3, #8]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d10d      	bne.n	800c09a <UART_Start_Receive_IT+0x76>
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	691b      	ldr	r3, [r3, #16]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d104      	bne.n	800c090 <UART_Start_Receive_IT+0x6c>
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	22ff      	movs	r2, #255	@ 0xff
 800c08a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c08e:	e01b      	b.n	800c0c8 <UART_Start_Receive_IT+0xa4>
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	227f      	movs	r2, #127	@ 0x7f
 800c094:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c098:	e016      	b.n	800c0c8 <UART_Start_Receive_IT+0xa4>
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c0a2:	d10d      	bne.n	800c0c0 <UART_Start_Receive_IT+0x9c>
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	691b      	ldr	r3, [r3, #16]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d104      	bne.n	800c0b6 <UART_Start_Receive_IT+0x92>
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	227f      	movs	r2, #127	@ 0x7f
 800c0b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c0b4:	e008      	b.n	800c0c8 <UART_Start_Receive_IT+0xa4>
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	223f      	movs	r2, #63	@ 0x3f
 800c0ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c0be:	e003      	b.n	800c0c8 <UART_Start_Receive_IT+0xa4>
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2222      	movs	r2, #34	@ 0x22
 800c0d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	3308      	adds	r3, #8
 800c0de:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c0e2:	e853 3f00 	ldrex	r3, [r3]
 800c0e6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c0e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c0ea:	f043 0301 	orr.w	r3, r3, #1
 800c0ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	3308      	adds	r3, #8
 800c0f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c0fc:	673a      	str	r2, [r7, #112]	@ 0x70
 800c0fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c100:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c102:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c104:	e841 2300 	strex	r3, r2, [r1]
 800c108:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800c10a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d1e3      	bne.n	800c0d8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c114:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c118:	d14f      	bne.n	800c1ba <UART_Start_Receive_IT+0x196>
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c120:	88fa      	ldrh	r2, [r7, #6]
 800c122:	429a      	cmp	r2, r3
 800c124:	d349      	bcc.n	800c1ba <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c12e:	d107      	bne.n	800c140 <UART_Start_Receive_IT+0x11c>
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	691b      	ldr	r3, [r3, #16]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d103      	bne.n	800c140 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	4a47      	ldr	r2, [pc, #284]	@ (800c258 <UART_Start_Receive_IT+0x234>)
 800c13c:	675a      	str	r2, [r3, #116]	@ 0x74
 800c13e:	e002      	b.n	800c146 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	4a46      	ldr	r2, [pc, #280]	@ (800c25c <UART_Start_Receive_IT+0x238>)
 800c144:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	691b      	ldr	r3, [r3, #16]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d01a      	beq.n	800c184 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c154:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c156:	e853 3f00 	ldrex	r3, [r3]
 800c15a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c15c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c15e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c162:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	461a      	mov	r2, r3
 800c16c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c170:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c172:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c174:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c176:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c178:	e841 2300 	strex	r3, r2, [r1]
 800c17c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800c17e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c180:	2b00      	cmp	r3, #0
 800c182:	d1e4      	bne.n	800c14e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	3308      	adds	r3, #8
 800c18a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c18c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c18e:	e853 3f00 	ldrex	r3, [r3]
 800c192:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c196:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c19a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	3308      	adds	r3, #8
 800c1a2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c1a4:	64ba      	str	r2, [r7, #72]	@ 0x48
 800c1a6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c1aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c1ac:	e841 2300 	strex	r3, r2, [r1]
 800c1b0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c1b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d1e5      	bne.n	800c184 <UART_Start_Receive_IT+0x160>
 800c1b8:	e046      	b.n	800c248 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	689b      	ldr	r3, [r3, #8]
 800c1be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1c2:	d107      	bne.n	800c1d4 <UART_Start_Receive_IT+0x1b0>
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	691b      	ldr	r3, [r3, #16]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d103      	bne.n	800c1d4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	4a24      	ldr	r2, [pc, #144]	@ (800c260 <UART_Start_Receive_IT+0x23c>)
 800c1d0:	675a      	str	r2, [r3, #116]	@ 0x74
 800c1d2:	e002      	b.n	800c1da <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	4a23      	ldr	r2, [pc, #140]	@ (800c264 <UART_Start_Receive_IT+0x240>)
 800c1d8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	691b      	ldr	r3, [r3, #16]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d019      	beq.n	800c216 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ea:	e853 3f00 	ldrex	r3, [r3]
 800c1ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800c1f6:	677b      	str	r3, [r7, #116]	@ 0x74
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c200:	637b      	str	r3, [r7, #52]	@ 0x34
 800c202:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c204:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c206:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c208:	e841 2300 	strex	r3, r2, [r1]
 800c20c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c20e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c210:	2b00      	cmp	r3, #0
 800c212:	d1e6      	bne.n	800c1e2 <UART_Start_Receive_IT+0x1be>
 800c214:	e018      	b.n	800c248 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	e853 3f00 	ldrex	r3, [r3]
 800c222:	613b      	str	r3, [r7, #16]
   return(result);
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	f043 0320 	orr.w	r3, r3, #32
 800c22a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	461a      	mov	r2, r3
 800c232:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c234:	623b      	str	r3, [r7, #32]
 800c236:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c238:	69f9      	ldr	r1, [r7, #28]
 800c23a:	6a3a      	ldr	r2, [r7, #32]
 800c23c:	e841 2300 	strex	r3, r2, [r1]
 800c240:	61bb      	str	r3, [r7, #24]
   return(result);
 800c242:	69bb      	ldr	r3, [r7, #24]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d1e6      	bne.n	800c216 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800c248:	2300      	movs	r3, #0
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	378c      	adds	r7, #140	@ 0x8c
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr
 800c256:	bf00      	nop
 800c258:	0800ca89 	.word	0x0800ca89
 800c25c:	0800c729 	.word	0x0800c729
 800c260:	0800c571 	.word	0x0800c571
 800c264:	0800c3b9 	.word	0x0800c3b9

0800c268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c268:	b480      	push	{r7}
 800c26a:	b095      	sub	sp, #84	@ 0x54
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c278:	e853 3f00 	ldrex	r3, [r3]
 800c27c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c280:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c284:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	461a      	mov	r2, r3
 800c28c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c28e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c290:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c292:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c294:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c296:	e841 2300 	strex	r3, r2, [r1]
 800c29a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d1e6      	bne.n	800c270 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	3308      	adds	r3, #8
 800c2a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2aa:	6a3b      	ldr	r3, [r7, #32]
 800c2ac:	e853 3f00 	ldrex	r3, [r3]
 800c2b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2b2:	69fa      	ldr	r2, [r7, #28]
 800c2b4:	4b1e      	ldr	r3, [pc, #120]	@ (800c330 <UART_EndRxTransfer+0xc8>)
 800c2b6:	4013      	ands	r3, r2
 800c2b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	3308      	adds	r3, #8
 800c2c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c2c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c2c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c2c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2ca:	e841 2300 	strex	r3, r2, [r1]
 800c2ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d1e5      	bne.n	800c2a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d118      	bne.n	800c310 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	e853 3f00 	ldrex	r3, [r3]
 800c2ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	f023 0310 	bic.w	r3, r3, #16
 800c2f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2fc:	61bb      	str	r3, [r7, #24]
 800c2fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c300:	6979      	ldr	r1, [r7, #20]
 800c302:	69ba      	ldr	r2, [r7, #24]
 800c304:	e841 2300 	strex	r3, r2, [r1]
 800c308:	613b      	str	r3, [r7, #16]
   return(result);
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d1e6      	bne.n	800c2de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2220      	movs	r2, #32
 800c314:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2200      	movs	r2, #0
 800c31c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2200      	movs	r2, #0
 800c322:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c324:	bf00      	nop
 800c326:	3754      	adds	r7, #84	@ 0x54
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr
 800c330:	effffffe 	.word	0xeffffffe

0800c334 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c340:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2200      	movs	r2, #0
 800c346:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2200      	movs	r2, #0
 800c34e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c352:	68f8      	ldr	r0, [r7, #12]
 800c354:	f7fe ff2e 	bl	800b1b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c358:	bf00      	nop
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b088      	sub	sp, #32
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	e853 3f00 	ldrex	r3, [r3]
 800c374:	60bb      	str	r3, [r7, #8]
   return(result);
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c37c:	61fb      	str	r3, [r7, #28]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	461a      	mov	r2, r3
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	61bb      	str	r3, [r7, #24]
 800c388:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c38a:	6979      	ldr	r1, [r7, #20]
 800c38c:	69ba      	ldr	r2, [r7, #24]
 800c38e:	e841 2300 	strex	r3, r2, [r1]
 800c392:	613b      	str	r3, [r7, #16]
   return(result);
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d1e6      	bne.n	800c368 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2220      	movs	r2, #32
 800c39e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f7f5 fd7b 	bl	8001ea4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3ae:	bf00      	nop
 800c3b0:	3720      	adds	r7, #32
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
	...

0800c3b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b09c      	sub	sp, #112	@ 0x70
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c3c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c3d0:	2b22      	cmp	r3, #34	@ 0x22
 800c3d2:	f040 80be 	bne.w	800c552 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c3e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c3e4:	b2d9      	uxtb	r1, r3
 800c3e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c3ea:	b2da      	uxtb	r2, r3
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3f0:	400a      	ands	r2, r1
 800c3f2:	b2d2      	uxtb	r2, r2
 800c3f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3fa:	1c5a      	adds	r2, r3, #1
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c406:	b29b      	uxth	r3, r3
 800c408:	3b01      	subs	r3, #1
 800c40a:	b29a      	uxth	r2, r3
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c418:	b29b      	uxth	r3, r3
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	f040 80a1 	bne.w	800c562 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c428:	e853 3f00 	ldrex	r3, [r3]
 800c42c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c42e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c430:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c434:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	461a      	mov	r2, r3
 800c43c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c43e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c440:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c442:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c444:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c446:	e841 2300 	strex	r3, r2, [r1]
 800c44a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c44c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d1e6      	bne.n	800c420 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	3308      	adds	r3, #8
 800c458:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c45c:	e853 3f00 	ldrex	r3, [r3]
 800c460:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c464:	f023 0301 	bic.w	r3, r3, #1
 800c468:	667b      	str	r3, [r7, #100]	@ 0x64
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	3308      	adds	r3, #8
 800c470:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c472:	647a      	str	r2, [r7, #68]	@ 0x44
 800c474:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c476:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c478:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c47a:	e841 2300 	strex	r3, r2, [r1]
 800c47e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c482:	2b00      	cmp	r3, #0
 800c484:	d1e5      	bne.n	800c452 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2220      	movs	r2, #32
 800c48a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2200      	movs	r2, #0
 800c498:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a33      	ldr	r2, [pc, #204]	@ (800c56c <UART_RxISR_8BIT+0x1b4>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d01f      	beq.n	800c4e4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d018      	beq.n	800c4e4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ba:	e853 3f00 	ldrex	r3, [r3]
 800c4be:	623b      	str	r3, [r7, #32]
   return(result);
 800c4c0:	6a3b      	ldr	r3, [r7, #32]
 800c4c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c4c6:	663b      	str	r3, [r7, #96]	@ 0x60
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c4d0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c4d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4d8:	e841 2300 	strex	r3, r2, [r1]
 800c4dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c4de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d1e6      	bne.n	800c4b2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d12e      	bne.n	800c54a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	e853 3f00 	ldrex	r3, [r3]
 800c4fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f023 0310 	bic.w	r3, r3, #16
 800c506:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	461a      	mov	r2, r3
 800c50e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c510:	61fb      	str	r3, [r7, #28]
 800c512:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c514:	69b9      	ldr	r1, [r7, #24]
 800c516:	69fa      	ldr	r2, [r7, #28]
 800c518:	e841 2300 	strex	r3, r2, [r1]
 800c51c:	617b      	str	r3, [r7, #20]
   return(result);
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d1e6      	bne.n	800c4f2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	69db      	ldr	r3, [r3, #28]
 800c52a:	f003 0310 	and.w	r3, r3, #16
 800c52e:	2b10      	cmp	r3, #16
 800c530:	d103      	bne.n	800c53a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	2210      	movs	r2, #16
 800c538:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c540:	4619      	mov	r1, r3
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f7fe fe40 	bl	800b1c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c548:	e00b      	b.n	800c562 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f7f5 fc9a 	bl	8001e84 <HAL_UART_RxCpltCallback>
}
 800c550:	e007      	b.n	800c562 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	699a      	ldr	r2, [r3, #24]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f042 0208 	orr.w	r2, r2, #8
 800c560:	619a      	str	r2, [r3, #24]
}
 800c562:	bf00      	nop
 800c564:	3770      	adds	r7, #112	@ 0x70
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	58000c00 	.word	0x58000c00

0800c570 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b09c      	sub	sp, #112	@ 0x70
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c57e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c588:	2b22      	cmp	r3, #34	@ 0x22
 800c58a:	f040 80be 	bne.w	800c70a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c594:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c59c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c59e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800c5a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c5a6:	4013      	ands	r3, r2
 800c5a8:	b29a      	uxth	r2, r3
 800c5aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c5ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5b2:	1c9a      	adds	r2, r3, #2
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	3b01      	subs	r3, #1
 800c5c2:	b29a      	uxth	r2, r3
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	f040 80a1 	bne.w	800c71a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5e0:	e853 3f00 	ldrex	r3, [r3]
 800c5e4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c5e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c5ec:	667b      	str	r3, [r7, #100]	@ 0x64
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c5f6:	657b      	str	r3, [r7, #84]	@ 0x54
 800c5f8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c5fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c5fe:	e841 2300 	strex	r3, r2, [r1]
 800c602:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c604:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c606:	2b00      	cmp	r3, #0
 800c608:	d1e6      	bne.n	800c5d8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	3308      	adds	r3, #8
 800c610:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c614:	e853 3f00 	ldrex	r3, [r3]
 800c618:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c61c:	f023 0301 	bic.w	r3, r3, #1
 800c620:	663b      	str	r3, [r7, #96]	@ 0x60
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	3308      	adds	r3, #8
 800c628:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c62a:	643a      	str	r2, [r7, #64]	@ 0x40
 800c62c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c62e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c630:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c632:	e841 2300 	strex	r3, r2, [r1]
 800c636:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d1e5      	bne.n	800c60a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2220      	movs	r2, #32
 800c642:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2200      	movs	r2, #0
 800c64a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2200      	movs	r2, #0
 800c650:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4a33      	ldr	r2, [pc, #204]	@ (800c724 <UART_RxISR_16BIT+0x1b4>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d01f      	beq.n	800c69c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c666:	2b00      	cmp	r3, #0
 800c668:	d018      	beq.n	800c69c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c670:	6a3b      	ldr	r3, [r7, #32]
 800c672:	e853 3f00 	ldrex	r3, [r3]
 800c676:	61fb      	str	r3, [r7, #28]
   return(result);
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c67e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	461a      	mov	r2, r3
 800c686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c688:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c68a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c68c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c68e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c690:	e841 2300 	strex	r3, r2, [r1]
 800c694:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d1e6      	bne.n	800c66a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d12e      	bne.n	800c702 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	e853 3f00 	ldrex	r3, [r3]
 800c6b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	f023 0310 	bic.w	r3, r3, #16
 800c6be:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c6c8:	61bb      	str	r3, [r7, #24]
 800c6ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6cc:	6979      	ldr	r1, [r7, #20]
 800c6ce:	69ba      	ldr	r2, [r7, #24]
 800c6d0:	e841 2300 	strex	r3, r2, [r1]
 800c6d4:	613b      	str	r3, [r7, #16]
   return(result);
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d1e6      	bne.n	800c6aa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	69db      	ldr	r3, [r3, #28]
 800c6e2:	f003 0310 	and.w	r3, r3, #16
 800c6e6:	2b10      	cmp	r3, #16
 800c6e8:	d103      	bne.n	800c6f2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2210      	movs	r2, #16
 800c6f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f7fe fd64 	bl	800b1c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c700:	e00b      	b.n	800c71a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f7f5 fbbe 	bl	8001e84 <HAL_UART_RxCpltCallback>
}
 800c708:	e007      	b.n	800c71a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	699a      	ldr	r2, [r3, #24]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f042 0208 	orr.w	r2, r2, #8
 800c718:	619a      	str	r2, [r3, #24]
}
 800c71a:	bf00      	nop
 800c71c:	3770      	adds	r7, #112	@ 0x70
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop
 800c724:	58000c00 	.word	0x58000c00

0800c728 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b0ac      	sub	sp, #176	@ 0xb0
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c736:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	69db      	ldr	r3, [r3, #28]
 800c740:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c75e:	2b22      	cmp	r3, #34	@ 0x22
 800c760:	f040 8180 	bne.w	800ca64 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c76a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c76e:	e123      	b.n	800c9b8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c776:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c77a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800c77e:	b2d9      	uxtb	r1, r3
 800c780:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800c784:	b2da      	uxtb	r2, r3
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c78a:	400a      	ands	r2, r1
 800c78c:	b2d2      	uxtb	r2, r2
 800c78e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c794:	1c5a      	adds	r2, r3, #1
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	b29a      	uxth	r2, r3
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	69db      	ldr	r3, [r3, #28]
 800c7b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c7b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7ba:	f003 0307 	and.w	r3, r3, #7
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d053      	beq.n	800c86a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c7c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7c6:	f003 0301 	and.w	r3, r3, #1
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d011      	beq.n	800c7f2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800c7ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c7d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00b      	beq.n	800c7f2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	2201      	movs	r2, #1
 800c7e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7e8:	f043 0201 	orr.w	r2, r3, #1
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c7f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7f6:	f003 0302 	and.w	r3, r3, #2
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d011      	beq.n	800c822 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c7fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c802:	f003 0301 	and.w	r3, r3, #1
 800c806:	2b00      	cmp	r3, #0
 800c808:	d00b      	beq.n	800c822 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2202      	movs	r2, #2
 800c810:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c818:	f043 0204 	orr.w	r2, r3, #4
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c826:	f003 0304 	and.w	r3, r3, #4
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d011      	beq.n	800c852 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c82e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c832:	f003 0301 	and.w	r3, r3, #1
 800c836:	2b00      	cmp	r3, #0
 800c838:	d00b      	beq.n	800c852 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	2204      	movs	r2, #4
 800c840:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c848:	f043 0202 	orr.w	r2, r3, #2
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d006      	beq.n	800c86a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f7fe fca9 	bl	800b1b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c870:	b29b      	uxth	r3, r3
 800c872:	2b00      	cmp	r3, #0
 800c874:	f040 80a0 	bne.w	800c9b8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c87e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c880:	e853 3f00 	ldrex	r3, [r3]
 800c884:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800c886:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c888:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c88c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	461a      	mov	r2, r3
 800c896:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c89a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c89c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c89e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800c8a0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c8a2:	e841 2300 	strex	r3, r2, [r1]
 800c8a6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800c8a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d1e4      	bne.n	800c878 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	3308      	adds	r3, #8
 800c8b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8b8:	e853 3f00 	ldrex	r3, [r3]
 800c8bc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c8be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c8c0:	4b6e      	ldr	r3, [pc, #440]	@ (800ca7c <UART_RxISR_8BIT_FIFOEN+0x354>)
 800c8c2:	4013      	ands	r3, r2
 800c8c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	3308      	adds	r3, #8
 800c8ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c8d2:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c8d4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c8d8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c8da:	e841 2300 	strex	r3, r2, [r1]
 800c8de:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c8e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d1e3      	bne.n	800c8ae <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2220      	movs	r2, #32
 800c8ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	4a60      	ldr	r2, [pc, #384]	@ (800ca80 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d021      	beq.n	800c948 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	685b      	ldr	r3, [r3, #4]
 800c90a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d01a      	beq.n	800c948 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c918:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c91a:	e853 3f00 	ldrex	r3, [r3]
 800c91e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c922:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c926:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	461a      	mov	r2, r3
 800c930:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c934:	657b      	str	r3, [r7, #84]	@ 0x54
 800c936:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c938:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c93a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c93c:	e841 2300 	strex	r3, r2, [r1]
 800c940:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c942:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c944:	2b00      	cmp	r3, #0
 800c946:	d1e4      	bne.n	800c912 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	d130      	bne.n	800c9b2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2200      	movs	r2, #0
 800c954:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c95c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c95e:	e853 3f00 	ldrex	r3, [r3]
 800c962:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c966:	f023 0310 	bic.w	r3, r3, #16
 800c96a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	461a      	mov	r2, r3
 800c974:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c978:	643b      	str	r3, [r7, #64]	@ 0x40
 800c97a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c97c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c97e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c980:	e841 2300 	strex	r3, r2, [r1]
 800c984:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d1e4      	bne.n	800c956 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	69db      	ldr	r3, [r3, #28]
 800c992:	f003 0310 	and.w	r3, r3, #16
 800c996:	2b10      	cmp	r3, #16
 800c998:	d103      	bne.n	800c9a2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	2210      	movs	r2, #16
 800c9a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c9a8:	4619      	mov	r1, r3
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f7fe fc0c 	bl	800b1c8 <HAL_UARTEx_RxEventCallback>
 800c9b0:	e002      	b.n	800c9b8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f7f5 fa66 	bl	8001e84 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c9b8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d006      	beq.n	800c9ce <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800c9c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9c4:	f003 0320 	and.w	r3, r3, #32
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	f47f aed1 	bne.w	800c770 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c9d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c9d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d049      	beq.n	800ca74 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c9e6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d242      	bcs.n	800ca74 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	3308      	adds	r3, #8
 800c9f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9f6:	6a3b      	ldr	r3, [r7, #32]
 800c9f8:	e853 3f00 	ldrex	r3, [r3]
 800c9fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800c9fe:	69fb      	ldr	r3, [r7, #28]
 800ca00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ca04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	3308      	adds	r3, #8
 800ca0e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ca12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ca14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca1a:	e841 2300 	strex	r3, r2, [r1]
 800ca1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ca20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d1e3      	bne.n	800c9ee <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	4a16      	ldr	r2, [pc, #88]	@ (800ca84 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ca2a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	e853 3f00 	ldrex	r3, [r3]
 800ca38:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	f043 0320 	orr.w	r3, r3, #32
 800ca40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	461a      	mov	r2, r3
 800ca4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ca4e:	61bb      	str	r3, [r7, #24]
 800ca50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca52:	6979      	ldr	r1, [r7, #20]
 800ca54:	69ba      	ldr	r2, [r7, #24]
 800ca56:	e841 2300 	strex	r3, r2, [r1]
 800ca5a:	613b      	str	r3, [r7, #16]
   return(result);
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d1e4      	bne.n	800ca2c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca62:	e007      	b.n	800ca74 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	699a      	ldr	r2, [r3, #24]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f042 0208 	orr.w	r2, r2, #8
 800ca72:	619a      	str	r2, [r3, #24]
}
 800ca74:	bf00      	nop
 800ca76:	37b0      	adds	r7, #176	@ 0xb0
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	effffffe 	.word	0xeffffffe
 800ca80:	58000c00 	.word	0x58000c00
 800ca84:	0800c3b9 	.word	0x0800c3b9

0800ca88 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b0ae      	sub	sp, #184	@ 0xb8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ca96:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	69db      	ldr	r3, [r3, #28]
 800caa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	689b      	ldr	r3, [r3, #8]
 800cab4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cabe:	2b22      	cmp	r3, #34	@ 0x22
 800cac0:	f040 8184 	bne.w	800cdcc <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800caca:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cace:	e127      	b.n	800cd20 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cad6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cade:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800cae2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800cae6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800caea:	4013      	ands	r3, r2
 800caec:	b29a      	uxth	r2, r3
 800caee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800caf2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800caf8:	1c9a      	adds	r2, r3, #2
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cb04:	b29b      	uxth	r3, r3
 800cb06:	3b01      	subs	r3, #1
 800cb08:	b29a      	uxth	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	69db      	ldr	r3, [r3, #28]
 800cb16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cb1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cb1e:	f003 0307 	and.w	r3, r3, #7
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d053      	beq.n	800cbce <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cb26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cb2a:	f003 0301 	and.w	r3, r3, #1
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d011      	beq.n	800cb56 <UART_RxISR_16BIT_FIFOEN+0xce>
 800cb32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d00b      	beq.n	800cb56 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	2201      	movs	r2, #1
 800cb44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb4c:	f043 0201 	orr.w	r2, r3, #1
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cb5a:	f003 0302 	and.w	r3, r3, #2
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d011      	beq.n	800cb86 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800cb62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cb66:	f003 0301 	and.w	r3, r3, #1
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d00b      	beq.n	800cb86 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	2202      	movs	r2, #2
 800cb74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb7c:	f043 0204 	orr.w	r2, r3, #4
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cb8a:	f003 0304 	and.w	r3, r3, #4
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d011      	beq.n	800cbb6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800cb92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cb96:	f003 0301 	and.w	r3, r3, #1
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d00b      	beq.n	800cbb6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	2204      	movs	r2, #4
 800cba4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbac:	f043 0202 	orr.w	r2, r3, #2
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d006      	beq.n	800cbce <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f7fe faf7 	bl	800b1b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cbd4:	b29b      	uxth	r3, r3
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	f040 80a2 	bne.w	800cd20 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cbe4:	e853 3f00 	ldrex	r3, [r3]
 800cbe8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cbea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cbec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cbf0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cbfe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cc02:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cc06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cc0a:	e841 2300 	strex	r3, r2, [r1]
 800cc0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cc10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d1e2      	bne.n	800cbdc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	3308      	adds	r3, #8
 800cc1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc20:	e853 3f00 	ldrex	r3, [r3]
 800cc24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cc26:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cc28:	4b6e      	ldr	r3, [pc, #440]	@ (800cde4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800cc2a:	4013      	ands	r3, r2
 800cc2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	3308      	adds	r3, #8
 800cc36:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800cc3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cc3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cc40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cc42:	e841 2300 	strex	r3, r2, [r1]
 800cc46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cc48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d1e3      	bne.n	800cc16 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2220      	movs	r2, #32
 800cc52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4a60      	ldr	r2, [pc, #384]	@ (800cde8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d021      	beq.n	800ccb0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d01a      	beq.n	800ccb0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc82:	e853 3f00 	ldrex	r3, [r3]
 800cc86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cc88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cc8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	461a      	mov	r2, r3
 800cc98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cc9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cc9e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cca2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cca4:	e841 2300 	strex	r3, r2, [r1]
 800cca8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ccaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d1e4      	bne.n	800cc7a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d130      	bne.n	800cd1a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccc6:	e853 3f00 	ldrex	r3, [r3]
 800ccca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccce:	f023 0310 	bic.w	r3, r3, #16
 800ccd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	461a      	mov	r2, r3
 800ccdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cce0:	647b      	str	r3, [r7, #68]	@ 0x44
 800cce2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cce4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cce6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cce8:	e841 2300 	strex	r3, r2, [r1]
 800ccec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ccee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d1e4      	bne.n	800ccbe <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	69db      	ldr	r3, [r3, #28]
 800ccfa:	f003 0310 	and.w	r3, r3, #16
 800ccfe:	2b10      	cmp	r3, #16
 800cd00:	d103      	bne.n	800cd0a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	2210      	movs	r2, #16
 800cd08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cd10:	4619      	mov	r1, r3
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f7fe fa58 	bl	800b1c8 <HAL_UARTEx_RxEventCallback>
 800cd18:	e002      	b.n	800cd20 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f7f5 f8b2 	bl	8001e84 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cd20:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d006      	beq.n	800cd36 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800cd28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cd2c:	f003 0320 	and.w	r3, r3, #32
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	f47f aecd 	bne.w	800cad0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd3c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cd40:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d049      	beq.n	800cddc <UART_RxISR_16BIT_FIFOEN+0x354>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cd4e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d242      	bcs.n	800cddc <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	3308      	adds	r3, #8
 800cd5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd60:	e853 3f00 	ldrex	r3, [r3]
 800cd64:	623b      	str	r3, [r7, #32]
   return(result);
 800cd66:	6a3b      	ldr	r3, [r7, #32]
 800cd68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cd6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	3308      	adds	r3, #8
 800cd76:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800cd7a:	633a      	str	r2, [r7, #48]	@ 0x30
 800cd7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd82:	e841 2300 	strex	r3, r2, [r1]
 800cd86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d1e3      	bne.n	800cd56 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	4a16      	ldr	r2, [pc, #88]	@ (800cdec <UART_RxISR_16BIT_FIFOEN+0x364>)
 800cd92:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	e853 3f00 	ldrex	r3, [r3]
 800cda0:	60fb      	str	r3, [r7, #12]
   return(result);
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	f043 0320 	orr.w	r3, r3, #32
 800cda8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	461a      	mov	r2, r3
 800cdb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cdb6:	61fb      	str	r3, [r7, #28]
 800cdb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdba:	69b9      	ldr	r1, [r7, #24]
 800cdbc:	69fa      	ldr	r2, [r7, #28]
 800cdbe:	e841 2300 	strex	r3, r2, [r1]
 800cdc2:	617b      	str	r3, [r7, #20]
   return(result);
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d1e4      	bne.n	800cd94 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cdca:	e007      	b.n	800cddc <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	699a      	ldr	r2, [r3, #24]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f042 0208 	orr.w	r2, r2, #8
 800cdda:	619a      	str	r2, [r3, #24]
}
 800cddc:	bf00      	nop
 800cdde:	37b8      	adds	r7, #184	@ 0xb8
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	effffffe 	.word	0xeffffffe
 800cde8:	58000c00 	.word	0x58000c00
 800cdec:	0800c571 	.word	0x0800c571

0800cdf0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b083      	sub	sp, #12
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cdf8:	bf00      	nop
 800cdfa:	370c      	adds	r7, #12
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr

0800ce04 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b083      	sub	sp, #12
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ce0c:	bf00      	nop
 800ce0e:	370c      	adds	r7, #12
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr

0800ce18 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b083      	sub	sp, #12
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ce20:	bf00      	nop
 800ce22:	370c      	adds	r7, #12
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr

0800ce2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b085      	sub	sp, #20
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ce3a:	2b01      	cmp	r3, #1
 800ce3c:	d101      	bne.n	800ce42 <HAL_UARTEx_DisableFifoMode+0x16>
 800ce3e:	2302      	movs	r3, #2
 800ce40:	e027      	b.n	800ce92 <HAL_UARTEx_DisableFifoMode+0x66>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2201      	movs	r2, #1
 800ce46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2224      	movs	r2, #36	@ 0x24
 800ce4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	681a      	ldr	r2, [r3, #0]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f022 0201 	bic.w	r2, r2, #1
 800ce68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ce70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2200      	movs	r2, #0
 800ce76:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	68fa      	ldr	r2, [r7, #12]
 800ce7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2220      	movs	r2, #32
 800ce84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ce90:	2300      	movs	r3, #0
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3714      	adds	r7, #20
 800ce96:	46bd      	mov	sp, r7
 800ce98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9c:	4770      	bx	lr

0800ce9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce9e:	b580      	push	{r7, lr}
 800cea0:	b084      	sub	sp, #16
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
 800cea6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ceae:	2b01      	cmp	r3, #1
 800ceb0:	d101      	bne.n	800ceb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ceb2:	2302      	movs	r3, #2
 800ceb4:	e02d      	b.n	800cf12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2201      	movs	r2, #1
 800ceba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2224      	movs	r2, #36	@ 0x24
 800cec2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f022 0201 	bic.w	r2, r2, #1
 800cedc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	689b      	ldr	r3, [r3, #8]
 800cee4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	683a      	ldr	r2, [r7, #0]
 800ceee:	430a      	orrs	r2, r1
 800cef0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f000 f850 	bl	800cf98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	68fa      	ldr	r2, [r7, #12]
 800cefe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2220      	movs	r2, #32
 800cf04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf10:	2300      	movs	r3, #0
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3710      	adds	r7, #16
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}

0800cf1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf1a:	b580      	push	{r7, lr}
 800cf1c:	b084      	sub	sp, #16
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
 800cf22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cf2a:	2b01      	cmp	r3, #1
 800cf2c:	d101      	bne.n	800cf32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cf2e:	2302      	movs	r3, #2
 800cf30:	e02d      	b.n	800cf8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2201      	movs	r2, #1
 800cf36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2224      	movs	r2, #36	@ 0x24
 800cf3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	681a      	ldr	r2, [r3, #0]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	f022 0201 	bic.w	r2, r2, #1
 800cf58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	683a      	ldr	r2, [r7, #0]
 800cf6a:	430a      	orrs	r2, r1
 800cf6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f000 f812 	bl	800cf98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	68fa      	ldr	r2, [r7, #12]
 800cf7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2220      	movs	r2, #32
 800cf80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2200      	movs	r2, #0
 800cf88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf8c:	2300      	movs	r3, #0
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3710      	adds	r7, #16
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
	...

0800cf98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b085      	sub	sp, #20
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d108      	bne.n	800cfba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2201      	movs	r2, #1
 800cfac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cfb8:	e031      	b.n	800d01e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cfba:	2310      	movs	r3, #16
 800cfbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cfbe:	2310      	movs	r3, #16
 800cfc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	689b      	ldr	r3, [r3, #8]
 800cfc8:	0e5b      	lsrs	r3, r3, #25
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	f003 0307 	and.w	r3, r3, #7
 800cfd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	689b      	ldr	r3, [r3, #8]
 800cfd8:	0f5b      	lsrs	r3, r3, #29
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	f003 0307 	and.w	r3, r3, #7
 800cfe0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cfe2:	7bbb      	ldrb	r3, [r7, #14]
 800cfe4:	7b3a      	ldrb	r2, [r7, #12]
 800cfe6:	4911      	ldr	r1, [pc, #68]	@ (800d02c <UARTEx_SetNbDataToProcess+0x94>)
 800cfe8:	5c8a      	ldrb	r2, [r1, r2]
 800cfea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cfee:	7b3a      	ldrb	r2, [r7, #12]
 800cff0:	490f      	ldr	r1, [pc, #60]	@ (800d030 <UARTEx_SetNbDataToProcess+0x98>)
 800cff2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cff4:	fb93 f3f2 	sdiv	r3, r3, r2
 800cff8:	b29a      	uxth	r2, r3
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d000:	7bfb      	ldrb	r3, [r7, #15]
 800d002:	7b7a      	ldrb	r2, [r7, #13]
 800d004:	4909      	ldr	r1, [pc, #36]	@ (800d02c <UARTEx_SetNbDataToProcess+0x94>)
 800d006:	5c8a      	ldrb	r2, [r1, r2]
 800d008:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d00c:	7b7a      	ldrb	r2, [r7, #13]
 800d00e:	4908      	ldr	r1, [pc, #32]	@ (800d030 <UARTEx_SetNbDataToProcess+0x98>)
 800d010:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d012:	fb93 f3f2 	sdiv	r3, r3, r2
 800d016:	b29a      	uxth	r2, r3
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d01e:	bf00      	nop
 800d020:	3714      	adds	r7, #20
 800d022:	46bd      	mov	sp, r7
 800d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d028:	4770      	bx	lr
 800d02a:	bf00      	nop
 800d02c:	080103f0 	.word	0x080103f0
 800d030:	080103f8 	.word	0x080103f8

0800d034 <__cvt>:
 800d034:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d036:	ed2d 8b02 	vpush	{d8}
 800d03a:	eeb0 8b40 	vmov.f64	d8, d0
 800d03e:	b085      	sub	sp, #20
 800d040:	4617      	mov	r7, r2
 800d042:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800d044:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d046:	ee18 2a90 	vmov	r2, s17
 800d04a:	f025 0520 	bic.w	r5, r5, #32
 800d04e:	2a00      	cmp	r2, #0
 800d050:	bfb6      	itet	lt
 800d052:	222d      	movlt	r2, #45	@ 0x2d
 800d054:	2200      	movge	r2, #0
 800d056:	eeb1 8b40 	vneglt.f64	d8, d0
 800d05a:	2d46      	cmp	r5, #70	@ 0x46
 800d05c:	460c      	mov	r4, r1
 800d05e:	701a      	strb	r2, [r3, #0]
 800d060:	d004      	beq.n	800d06c <__cvt+0x38>
 800d062:	2d45      	cmp	r5, #69	@ 0x45
 800d064:	d100      	bne.n	800d068 <__cvt+0x34>
 800d066:	3401      	adds	r4, #1
 800d068:	2102      	movs	r1, #2
 800d06a:	e000      	b.n	800d06e <__cvt+0x3a>
 800d06c:	2103      	movs	r1, #3
 800d06e:	ab03      	add	r3, sp, #12
 800d070:	9301      	str	r3, [sp, #4]
 800d072:	ab02      	add	r3, sp, #8
 800d074:	9300      	str	r3, [sp, #0]
 800d076:	4622      	mov	r2, r4
 800d078:	4633      	mov	r3, r6
 800d07a:	eeb0 0b48 	vmov.f64	d0, d8
 800d07e:	f000 fe1f 	bl	800dcc0 <_dtoa_r>
 800d082:	2d47      	cmp	r5, #71	@ 0x47
 800d084:	d114      	bne.n	800d0b0 <__cvt+0x7c>
 800d086:	07fb      	lsls	r3, r7, #31
 800d088:	d50a      	bpl.n	800d0a0 <__cvt+0x6c>
 800d08a:	1902      	adds	r2, r0, r4
 800d08c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d094:	bf08      	it	eq
 800d096:	9203      	streq	r2, [sp, #12]
 800d098:	2130      	movs	r1, #48	@ 0x30
 800d09a:	9b03      	ldr	r3, [sp, #12]
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d319      	bcc.n	800d0d4 <__cvt+0xa0>
 800d0a0:	9b03      	ldr	r3, [sp, #12]
 800d0a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0a4:	1a1b      	subs	r3, r3, r0
 800d0a6:	6013      	str	r3, [r2, #0]
 800d0a8:	b005      	add	sp, #20
 800d0aa:	ecbd 8b02 	vpop	{d8}
 800d0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0b0:	2d46      	cmp	r5, #70	@ 0x46
 800d0b2:	eb00 0204 	add.w	r2, r0, r4
 800d0b6:	d1e9      	bne.n	800d08c <__cvt+0x58>
 800d0b8:	7803      	ldrb	r3, [r0, #0]
 800d0ba:	2b30      	cmp	r3, #48	@ 0x30
 800d0bc:	d107      	bne.n	800d0ce <__cvt+0x9a>
 800d0be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0c6:	bf1c      	itt	ne
 800d0c8:	f1c4 0401 	rsbne	r4, r4, #1
 800d0cc:	6034      	strne	r4, [r6, #0]
 800d0ce:	6833      	ldr	r3, [r6, #0]
 800d0d0:	441a      	add	r2, r3
 800d0d2:	e7db      	b.n	800d08c <__cvt+0x58>
 800d0d4:	1c5c      	adds	r4, r3, #1
 800d0d6:	9403      	str	r4, [sp, #12]
 800d0d8:	7019      	strb	r1, [r3, #0]
 800d0da:	e7de      	b.n	800d09a <__cvt+0x66>

0800d0dc <__exponent>:
 800d0dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0de:	2900      	cmp	r1, #0
 800d0e0:	bfba      	itte	lt
 800d0e2:	4249      	neglt	r1, r1
 800d0e4:	232d      	movlt	r3, #45	@ 0x2d
 800d0e6:	232b      	movge	r3, #43	@ 0x2b
 800d0e8:	2909      	cmp	r1, #9
 800d0ea:	7002      	strb	r2, [r0, #0]
 800d0ec:	7043      	strb	r3, [r0, #1]
 800d0ee:	dd29      	ble.n	800d144 <__exponent+0x68>
 800d0f0:	f10d 0307 	add.w	r3, sp, #7
 800d0f4:	461d      	mov	r5, r3
 800d0f6:	270a      	movs	r7, #10
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	fbb1 f6f7 	udiv	r6, r1, r7
 800d0fe:	fb07 1416 	mls	r4, r7, r6, r1
 800d102:	3430      	adds	r4, #48	@ 0x30
 800d104:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d108:	460c      	mov	r4, r1
 800d10a:	2c63      	cmp	r4, #99	@ 0x63
 800d10c:	f103 33ff 	add.w	r3, r3, #4294967295
 800d110:	4631      	mov	r1, r6
 800d112:	dcf1      	bgt.n	800d0f8 <__exponent+0x1c>
 800d114:	3130      	adds	r1, #48	@ 0x30
 800d116:	1e94      	subs	r4, r2, #2
 800d118:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d11c:	1c41      	adds	r1, r0, #1
 800d11e:	4623      	mov	r3, r4
 800d120:	42ab      	cmp	r3, r5
 800d122:	d30a      	bcc.n	800d13a <__exponent+0x5e>
 800d124:	f10d 0309 	add.w	r3, sp, #9
 800d128:	1a9b      	subs	r3, r3, r2
 800d12a:	42ac      	cmp	r4, r5
 800d12c:	bf88      	it	hi
 800d12e:	2300      	movhi	r3, #0
 800d130:	3302      	adds	r3, #2
 800d132:	4403      	add	r3, r0
 800d134:	1a18      	subs	r0, r3, r0
 800d136:	b003      	add	sp, #12
 800d138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d13a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d13e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d142:	e7ed      	b.n	800d120 <__exponent+0x44>
 800d144:	2330      	movs	r3, #48	@ 0x30
 800d146:	3130      	adds	r1, #48	@ 0x30
 800d148:	7083      	strb	r3, [r0, #2]
 800d14a:	70c1      	strb	r1, [r0, #3]
 800d14c:	1d03      	adds	r3, r0, #4
 800d14e:	e7f1      	b.n	800d134 <__exponent+0x58>

0800d150 <_printf_float>:
 800d150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d154:	b08d      	sub	sp, #52	@ 0x34
 800d156:	460c      	mov	r4, r1
 800d158:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d15c:	4616      	mov	r6, r2
 800d15e:	461f      	mov	r7, r3
 800d160:	4605      	mov	r5, r0
 800d162:	f000 fcab 	bl	800dabc <_localeconv_r>
 800d166:	f8d0 b000 	ldr.w	fp, [r0]
 800d16a:	4658      	mov	r0, fp
 800d16c:	f7f3 f908 	bl	8000380 <strlen>
 800d170:	2300      	movs	r3, #0
 800d172:	930a      	str	r3, [sp, #40]	@ 0x28
 800d174:	f8d8 3000 	ldr.w	r3, [r8]
 800d178:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d17c:	6822      	ldr	r2, [r4, #0]
 800d17e:	9005      	str	r0, [sp, #20]
 800d180:	3307      	adds	r3, #7
 800d182:	f023 0307 	bic.w	r3, r3, #7
 800d186:	f103 0108 	add.w	r1, r3, #8
 800d18a:	f8c8 1000 	str.w	r1, [r8]
 800d18e:	ed93 0b00 	vldr	d0, [r3]
 800d192:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800d3f0 <_printf_float+0x2a0>
 800d196:	eeb0 7bc0 	vabs.f64	d7, d0
 800d19a:	eeb4 7b46 	vcmp.f64	d7, d6
 800d19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1a2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800d1a6:	dd24      	ble.n	800d1f2 <_printf_float+0xa2>
 800d1a8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d1ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1b0:	d502      	bpl.n	800d1b8 <_printf_float+0x68>
 800d1b2:	232d      	movs	r3, #45	@ 0x2d
 800d1b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d1b8:	498f      	ldr	r1, [pc, #572]	@ (800d3f8 <_printf_float+0x2a8>)
 800d1ba:	4b90      	ldr	r3, [pc, #576]	@ (800d3fc <_printf_float+0x2ac>)
 800d1bc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800d1c0:	bf94      	ite	ls
 800d1c2:	4688      	movls	r8, r1
 800d1c4:	4698      	movhi	r8, r3
 800d1c6:	f022 0204 	bic.w	r2, r2, #4
 800d1ca:	2303      	movs	r3, #3
 800d1cc:	6123      	str	r3, [r4, #16]
 800d1ce:	6022      	str	r2, [r4, #0]
 800d1d0:	f04f 0a00 	mov.w	sl, #0
 800d1d4:	9700      	str	r7, [sp, #0]
 800d1d6:	4633      	mov	r3, r6
 800d1d8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d1da:	4621      	mov	r1, r4
 800d1dc:	4628      	mov	r0, r5
 800d1de:	f000 f9d1 	bl	800d584 <_printf_common>
 800d1e2:	3001      	adds	r0, #1
 800d1e4:	f040 8089 	bne.w	800d2fa <_printf_float+0x1aa>
 800d1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ec:	b00d      	add	sp, #52	@ 0x34
 800d1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1f2:	eeb4 0b40 	vcmp.f64	d0, d0
 800d1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1fa:	d709      	bvc.n	800d210 <_printf_float+0xc0>
 800d1fc:	ee10 3a90 	vmov	r3, s1
 800d200:	2b00      	cmp	r3, #0
 800d202:	bfbc      	itt	lt
 800d204:	232d      	movlt	r3, #45	@ 0x2d
 800d206:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d20a:	497d      	ldr	r1, [pc, #500]	@ (800d400 <_printf_float+0x2b0>)
 800d20c:	4b7d      	ldr	r3, [pc, #500]	@ (800d404 <_printf_float+0x2b4>)
 800d20e:	e7d5      	b.n	800d1bc <_printf_float+0x6c>
 800d210:	6863      	ldr	r3, [r4, #4]
 800d212:	1c59      	adds	r1, r3, #1
 800d214:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800d218:	d139      	bne.n	800d28e <_printf_float+0x13e>
 800d21a:	2306      	movs	r3, #6
 800d21c:	6063      	str	r3, [r4, #4]
 800d21e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d222:	2300      	movs	r3, #0
 800d224:	6022      	str	r2, [r4, #0]
 800d226:	9303      	str	r3, [sp, #12]
 800d228:	ab0a      	add	r3, sp, #40	@ 0x28
 800d22a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d22e:	ab09      	add	r3, sp, #36	@ 0x24
 800d230:	9300      	str	r3, [sp, #0]
 800d232:	6861      	ldr	r1, [r4, #4]
 800d234:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d238:	4628      	mov	r0, r5
 800d23a:	f7ff fefb 	bl	800d034 <__cvt>
 800d23e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d242:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d244:	4680      	mov	r8, r0
 800d246:	d129      	bne.n	800d29c <_printf_float+0x14c>
 800d248:	1cc8      	adds	r0, r1, #3
 800d24a:	db02      	blt.n	800d252 <_printf_float+0x102>
 800d24c:	6863      	ldr	r3, [r4, #4]
 800d24e:	4299      	cmp	r1, r3
 800d250:	dd41      	ble.n	800d2d6 <_printf_float+0x186>
 800d252:	f1a9 0902 	sub.w	r9, r9, #2
 800d256:	fa5f f989 	uxtb.w	r9, r9
 800d25a:	3901      	subs	r1, #1
 800d25c:	464a      	mov	r2, r9
 800d25e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d262:	9109      	str	r1, [sp, #36]	@ 0x24
 800d264:	f7ff ff3a 	bl	800d0dc <__exponent>
 800d268:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d26a:	1813      	adds	r3, r2, r0
 800d26c:	2a01      	cmp	r2, #1
 800d26e:	4682      	mov	sl, r0
 800d270:	6123      	str	r3, [r4, #16]
 800d272:	dc02      	bgt.n	800d27a <_printf_float+0x12a>
 800d274:	6822      	ldr	r2, [r4, #0]
 800d276:	07d2      	lsls	r2, r2, #31
 800d278:	d501      	bpl.n	800d27e <_printf_float+0x12e>
 800d27a:	3301      	adds	r3, #1
 800d27c:	6123      	str	r3, [r4, #16]
 800d27e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d282:	2b00      	cmp	r3, #0
 800d284:	d0a6      	beq.n	800d1d4 <_printf_float+0x84>
 800d286:	232d      	movs	r3, #45	@ 0x2d
 800d288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d28c:	e7a2      	b.n	800d1d4 <_printf_float+0x84>
 800d28e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d292:	d1c4      	bne.n	800d21e <_printf_float+0xce>
 800d294:	2b00      	cmp	r3, #0
 800d296:	d1c2      	bne.n	800d21e <_printf_float+0xce>
 800d298:	2301      	movs	r3, #1
 800d29a:	e7bf      	b.n	800d21c <_printf_float+0xcc>
 800d29c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800d2a0:	d9db      	bls.n	800d25a <_printf_float+0x10a>
 800d2a2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800d2a6:	d118      	bne.n	800d2da <_printf_float+0x18a>
 800d2a8:	2900      	cmp	r1, #0
 800d2aa:	6863      	ldr	r3, [r4, #4]
 800d2ac:	dd0b      	ble.n	800d2c6 <_printf_float+0x176>
 800d2ae:	6121      	str	r1, [r4, #16]
 800d2b0:	b913      	cbnz	r3, 800d2b8 <_printf_float+0x168>
 800d2b2:	6822      	ldr	r2, [r4, #0]
 800d2b4:	07d0      	lsls	r0, r2, #31
 800d2b6:	d502      	bpl.n	800d2be <_printf_float+0x16e>
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	440b      	add	r3, r1
 800d2bc:	6123      	str	r3, [r4, #16]
 800d2be:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d2c0:	f04f 0a00 	mov.w	sl, #0
 800d2c4:	e7db      	b.n	800d27e <_printf_float+0x12e>
 800d2c6:	b913      	cbnz	r3, 800d2ce <_printf_float+0x17e>
 800d2c8:	6822      	ldr	r2, [r4, #0]
 800d2ca:	07d2      	lsls	r2, r2, #31
 800d2cc:	d501      	bpl.n	800d2d2 <_printf_float+0x182>
 800d2ce:	3302      	adds	r3, #2
 800d2d0:	e7f4      	b.n	800d2bc <_printf_float+0x16c>
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	e7f2      	b.n	800d2bc <_printf_float+0x16c>
 800d2d6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800d2da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2dc:	4299      	cmp	r1, r3
 800d2de:	db05      	blt.n	800d2ec <_printf_float+0x19c>
 800d2e0:	6823      	ldr	r3, [r4, #0]
 800d2e2:	6121      	str	r1, [r4, #16]
 800d2e4:	07d8      	lsls	r0, r3, #31
 800d2e6:	d5ea      	bpl.n	800d2be <_printf_float+0x16e>
 800d2e8:	1c4b      	adds	r3, r1, #1
 800d2ea:	e7e7      	b.n	800d2bc <_printf_float+0x16c>
 800d2ec:	2900      	cmp	r1, #0
 800d2ee:	bfd4      	ite	le
 800d2f0:	f1c1 0202 	rsble	r2, r1, #2
 800d2f4:	2201      	movgt	r2, #1
 800d2f6:	4413      	add	r3, r2
 800d2f8:	e7e0      	b.n	800d2bc <_printf_float+0x16c>
 800d2fa:	6823      	ldr	r3, [r4, #0]
 800d2fc:	055a      	lsls	r2, r3, #21
 800d2fe:	d407      	bmi.n	800d310 <_printf_float+0x1c0>
 800d300:	6923      	ldr	r3, [r4, #16]
 800d302:	4642      	mov	r2, r8
 800d304:	4631      	mov	r1, r6
 800d306:	4628      	mov	r0, r5
 800d308:	47b8      	blx	r7
 800d30a:	3001      	adds	r0, #1
 800d30c:	d12a      	bne.n	800d364 <_printf_float+0x214>
 800d30e:	e76b      	b.n	800d1e8 <_printf_float+0x98>
 800d310:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800d314:	f240 80e0 	bls.w	800d4d8 <_printf_float+0x388>
 800d318:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800d31c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d324:	d133      	bne.n	800d38e <_printf_float+0x23e>
 800d326:	4a38      	ldr	r2, [pc, #224]	@ (800d408 <_printf_float+0x2b8>)
 800d328:	2301      	movs	r3, #1
 800d32a:	4631      	mov	r1, r6
 800d32c:	4628      	mov	r0, r5
 800d32e:	47b8      	blx	r7
 800d330:	3001      	adds	r0, #1
 800d332:	f43f af59 	beq.w	800d1e8 <_printf_float+0x98>
 800d336:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d33a:	4543      	cmp	r3, r8
 800d33c:	db02      	blt.n	800d344 <_printf_float+0x1f4>
 800d33e:	6823      	ldr	r3, [r4, #0]
 800d340:	07d8      	lsls	r0, r3, #31
 800d342:	d50f      	bpl.n	800d364 <_printf_float+0x214>
 800d344:	9b05      	ldr	r3, [sp, #20]
 800d346:	465a      	mov	r2, fp
 800d348:	4631      	mov	r1, r6
 800d34a:	4628      	mov	r0, r5
 800d34c:	47b8      	blx	r7
 800d34e:	3001      	adds	r0, #1
 800d350:	f43f af4a 	beq.w	800d1e8 <_printf_float+0x98>
 800d354:	f04f 0900 	mov.w	r9, #0
 800d358:	f108 38ff 	add.w	r8, r8, #4294967295
 800d35c:	f104 0a1a 	add.w	sl, r4, #26
 800d360:	45c8      	cmp	r8, r9
 800d362:	dc09      	bgt.n	800d378 <_printf_float+0x228>
 800d364:	6823      	ldr	r3, [r4, #0]
 800d366:	079b      	lsls	r3, r3, #30
 800d368:	f100 8107 	bmi.w	800d57a <_printf_float+0x42a>
 800d36c:	68e0      	ldr	r0, [r4, #12]
 800d36e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d370:	4298      	cmp	r0, r3
 800d372:	bfb8      	it	lt
 800d374:	4618      	movlt	r0, r3
 800d376:	e739      	b.n	800d1ec <_printf_float+0x9c>
 800d378:	2301      	movs	r3, #1
 800d37a:	4652      	mov	r2, sl
 800d37c:	4631      	mov	r1, r6
 800d37e:	4628      	mov	r0, r5
 800d380:	47b8      	blx	r7
 800d382:	3001      	adds	r0, #1
 800d384:	f43f af30 	beq.w	800d1e8 <_printf_float+0x98>
 800d388:	f109 0901 	add.w	r9, r9, #1
 800d38c:	e7e8      	b.n	800d360 <_printf_float+0x210>
 800d38e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d390:	2b00      	cmp	r3, #0
 800d392:	dc3b      	bgt.n	800d40c <_printf_float+0x2bc>
 800d394:	4a1c      	ldr	r2, [pc, #112]	@ (800d408 <_printf_float+0x2b8>)
 800d396:	2301      	movs	r3, #1
 800d398:	4631      	mov	r1, r6
 800d39a:	4628      	mov	r0, r5
 800d39c:	47b8      	blx	r7
 800d39e:	3001      	adds	r0, #1
 800d3a0:	f43f af22 	beq.w	800d1e8 <_printf_float+0x98>
 800d3a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d3a8:	ea59 0303 	orrs.w	r3, r9, r3
 800d3ac:	d102      	bne.n	800d3b4 <_printf_float+0x264>
 800d3ae:	6823      	ldr	r3, [r4, #0]
 800d3b0:	07d9      	lsls	r1, r3, #31
 800d3b2:	d5d7      	bpl.n	800d364 <_printf_float+0x214>
 800d3b4:	9b05      	ldr	r3, [sp, #20]
 800d3b6:	465a      	mov	r2, fp
 800d3b8:	4631      	mov	r1, r6
 800d3ba:	4628      	mov	r0, r5
 800d3bc:	47b8      	blx	r7
 800d3be:	3001      	adds	r0, #1
 800d3c0:	f43f af12 	beq.w	800d1e8 <_printf_float+0x98>
 800d3c4:	f04f 0a00 	mov.w	sl, #0
 800d3c8:	f104 0b1a 	add.w	fp, r4, #26
 800d3cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3ce:	425b      	negs	r3, r3
 800d3d0:	4553      	cmp	r3, sl
 800d3d2:	dc01      	bgt.n	800d3d8 <_printf_float+0x288>
 800d3d4:	464b      	mov	r3, r9
 800d3d6:	e794      	b.n	800d302 <_printf_float+0x1b2>
 800d3d8:	2301      	movs	r3, #1
 800d3da:	465a      	mov	r2, fp
 800d3dc:	4631      	mov	r1, r6
 800d3de:	4628      	mov	r0, r5
 800d3e0:	47b8      	blx	r7
 800d3e2:	3001      	adds	r0, #1
 800d3e4:	f43f af00 	beq.w	800d1e8 <_printf_float+0x98>
 800d3e8:	f10a 0a01 	add.w	sl, sl, #1
 800d3ec:	e7ee      	b.n	800d3cc <_printf_float+0x27c>
 800d3ee:	bf00      	nop
 800d3f0:	ffffffff 	.word	0xffffffff
 800d3f4:	7fefffff 	.word	0x7fefffff
 800d3f8:	08010400 	.word	0x08010400
 800d3fc:	08010404 	.word	0x08010404
 800d400:	08010408 	.word	0x08010408
 800d404:	0801040c 	.word	0x0801040c
 800d408:	08010410 	.word	0x08010410
 800d40c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d40e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d412:	4553      	cmp	r3, sl
 800d414:	bfa8      	it	ge
 800d416:	4653      	movge	r3, sl
 800d418:	2b00      	cmp	r3, #0
 800d41a:	4699      	mov	r9, r3
 800d41c:	dc37      	bgt.n	800d48e <_printf_float+0x33e>
 800d41e:	2300      	movs	r3, #0
 800d420:	9307      	str	r3, [sp, #28]
 800d422:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d426:	f104 021a 	add.w	r2, r4, #26
 800d42a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d42c:	9907      	ldr	r1, [sp, #28]
 800d42e:	9306      	str	r3, [sp, #24]
 800d430:	eba3 0309 	sub.w	r3, r3, r9
 800d434:	428b      	cmp	r3, r1
 800d436:	dc31      	bgt.n	800d49c <_printf_float+0x34c>
 800d438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d43a:	459a      	cmp	sl, r3
 800d43c:	dc3b      	bgt.n	800d4b6 <_printf_float+0x366>
 800d43e:	6823      	ldr	r3, [r4, #0]
 800d440:	07da      	lsls	r2, r3, #31
 800d442:	d438      	bmi.n	800d4b6 <_printf_float+0x366>
 800d444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d446:	ebaa 0903 	sub.w	r9, sl, r3
 800d44a:	9b06      	ldr	r3, [sp, #24]
 800d44c:	ebaa 0303 	sub.w	r3, sl, r3
 800d450:	4599      	cmp	r9, r3
 800d452:	bfa8      	it	ge
 800d454:	4699      	movge	r9, r3
 800d456:	f1b9 0f00 	cmp.w	r9, #0
 800d45a:	dc34      	bgt.n	800d4c6 <_printf_float+0x376>
 800d45c:	f04f 0800 	mov.w	r8, #0
 800d460:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d464:	f104 0b1a 	add.w	fp, r4, #26
 800d468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d46a:	ebaa 0303 	sub.w	r3, sl, r3
 800d46e:	eba3 0309 	sub.w	r3, r3, r9
 800d472:	4543      	cmp	r3, r8
 800d474:	f77f af76 	ble.w	800d364 <_printf_float+0x214>
 800d478:	2301      	movs	r3, #1
 800d47a:	465a      	mov	r2, fp
 800d47c:	4631      	mov	r1, r6
 800d47e:	4628      	mov	r0, r5
 800d480:	47b8      	blx	r7
 800d482:	3001      	adds	r0, #1
 800d484:	f43f aeb0 	beq.w	800d1e8 <_printf_float+0x98>
 800d488:	f108 0801 	add.w	r8, r8, #1
 800d48c:	e7ec      	b.n	800d468 <_printf_float+0x318>
 800d48e:	4642      	mov	r2, r8
 800d490:	4631      	mov	r1, r6
 800d492:	4628      	mov	r0, r5
 800d494:	47b8      	blx	r7
 800d496:	3001      	adds	r0, #1
 800d498:	d1c1      	bne.n	800d41e <_printf_float+0x2ce>
 800d49a:	e6a5      	b.n	800d1e8 <_printf_float+0x98>
 800d49c:	2301      	movs	r3, #1
 800d49e:	4631      	mov	r1, r6
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	9206      	str	r2, [sp, #24]
 800d4a4:	47b8      	blx	r7
 800d4a6:	3001      	adds	r0, #1
 800d4a8:	f43f ae9e 	beq.w	800d1e8 <_printf_float+0x98>
 800d4ac:	9b07      	ldr	r3, [sp, #28]
 800d4ae:	9a06      	ldr	r2, [sp, #24]
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	9307      	str	r3, [sp, #28]
 800d4b4:	e7b9      	b.n	800d42a <_printf_float+0x2da>
 800d4b6:	9b05      	ldr	r3, [sp, #20]
 800d4b8:	465a      	mov	r2, fp
 800d4ba:	4631      	mov	r1, r6
 800d4bc:	4628      	mov	r0, r5
 800d4be:	47b8      	blx	r7
 800d4c0:	3001      	adds	r0, #1
 800d4c2:	d1bf      	bne.n	800d444 <_printf_float+0x2f4>
 800d4c4:	e690      	b.n	800d1e8 <_printf_float+0x98>
 800d4c6:	9a06      	ldr	r2, [sp, #24]
 800d4c8:	464b      	mov	r3, r9
 800d4ca:	4442      	add	r2, r8
 800d4cc:	4631      	mov	r1, r6
 800d4ce:	4628      	mov	r0, r5
 800d4d0:	47b8      	blx	r7
 800d4d2:	3001      	adds	r0, #1
 800d4d4:	d1c2      	bne.n	800d45c <_printf_float+0x30c>
 800d4d6:	e687      	b.n	800d1e8 <_printf_float+0x98>
 800d4d8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800d4dc:	f1b9 0f01 	cmp.w	r9, #1
 800d4e0:	dc01      	bgt.n	800d4e6 <_printf_float+0x396>
 800d4e2:	07db      	lsls	r3, r3, #31
 800d4e4:	d536      	bpl.n	800d554 <_printf_float+0x404>
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	4642      	mov	r2, r8
 800d4ea:	4631      	mov	r1, r6
 800d4ec:	4628      	mov	r0, r5
 800d4ee:	47b8      	blx	r7
 800d4f0:	3001      	adds	r0, #1
 800d4f2:	f43f ae79 	beq.w	800d1e8 <_printf_float+0x98>
 800d4f6:	9b05      	ldr	r3, [sp, #20]
 800d4f8:	465a      	mov	r2, fp
 800d4fa:	4631      	mov	r1, r6
 800d4fc:	4628      	mov	r0, r5
 800d4fe:	47b8      	blx	r7
 800d500:	3001      	adds	r0, #1
 800d502:	f43f ae71 	beq.w	800d1e8 <_printf_float+0x98>
 800d506:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800d50a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d50e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d512:	f109 39ff 	add.w	r9, r9, #4294967295
 800d516:	d018      	beq.n	800d54a <_printf_float+0x3fa>
 800d518:	464b      	mov	r3, r9
 800d51a:	f108 0201 	add.w	r2, r8, #1
 800d51e:	4631      	mov	r1, r6
 800d520:	4628      	mov	r0, r5
 800d522:	47b8      	blx	r7
 800d524:	3001      	adds	r0, #1
 800d526:	d10c      	bne.n	800d542 <_printf_float+0x3f2>
 800d528:	e65e      	b.n	800d1e8 <_printf_float+0x98>
 800d52a:	2301      	movs	r3, #1
 800d52c:	465a      	mov	r2, fp
 800d52e:	4631      	mov	r1, r6
 800d530:	4628      	mov	r0, r5
 800d532:	47b8      	blx	r7
 800d534:	3001      	adds	r0, #1
 800d536:	f43f ae57 	beq.w	800d1e8 <_printf_float+0x98>
 800d53a:	f108 0801 	add.w	r8, r8, #1
 800d53e:	45c8      	cmp	r8, r9
 800d540:	dbf3      	blt.n	800d52a <_printf_float+0x3da>
 800d542:	4653      	mov	r3, sl
 800d544:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d548:	e6dc      	b.n	800d304 <_printf_float+0x1b4>
 800d54a:	f04f 0800 	mov.w	r8, #0
 800d54e:	f104 0b1a 	add.w	fp, r4, #26
 800d552:	e7f4      	b.n	800d53e <_printf_float+0x3ee>
 800d554:	2301      	movs	r3, #1
 800d556:	4642      	mov	r2, r8
 800d558:	e7e1      	b.n	800d51e <_printf_float+0x3ce>
 800d55a:	2301      	movs	r3, #1
 800d55c:	464a      	mov	r2, r9
 800d55e:	4631      	mov	r1, r6
 800d560:	4628      	mov	r0, r5
 800d562:	47b8      	blx	r7
 800d564:	3001      	adds	r0, #1
 800d566:	f43f ae3f 	beq.w	800d1e8 <_printf_float+0x98>
 800d56a:	f108 0801 	add.w	r8, r8, #1
 800d56e:	68e3      	ldr	r3, [r4, #12]
 800d570:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d572:	1a5b      	subs	r3, r3, r1
 800d574:	4543      	cmp	r3, r8
 800d576:	dcf0      	bgt.n	800d55a <_printf_float+0x40a>
 800d578:	e6f8      	b.n	800d36c <_printf_float+0x21c>
 800d57a:	f04f 0800 	mov.w	r8, #0
 800d57e:	f104 0919 	add.w	r9, r4, #25
 800d582:	e7f4      	b.n	800d56e <_printf_float+0x41e>

0800d584 <_printf_common>:
 800d584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d588:	4616      	mov	r6, r2
 800d58a:	4698      	mov	r8, r3
 800d58c:	688a      	ldr	r2, [r1, #8]
 800d58e:	690b      	ldr	r3, [r1, #16]
 800d590:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d594:	4293      	cmp	r3, r2
 800d596:	bfb8      	it	lt
 800d598:	4613      	movlt	r3, r2
 800d59a:	6033      	str	r3, [r6, #0]
 800d59c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d5a0:	4607      	mov	r7, r0
 800d5a2:	460c      	mov	r4, r1
 800d5a4:	b10a      	cbz	r2, 800d5aa <_printf_common+0x26>
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	6033      	str	r3, [r6, #0]
 800d5aa:	6823      	ldr	r3, [r4, #0]
 800d5ac:	0699      	lsls	r1, r3, #26
 800d5ae:	bf42      	ittt	mi
 800d5b0:	6833      	ldrmi	r3, [r6, #0]
 800d5b2:	3302      	addmi	r3, #2
 800d5b4:	6033      	strmi	r3, [r6, #0]
 800d5b6:	6825      	ldr	r5, [r4, #0]
 800d5b8:	f015 0506 	ands.w	r5, r5, #6
 800d5bc:	d106      	bne.n	800d5cc <_printf_common+0x48>
 800d5be:	f104 0a19 	add.w	sl, r4, #25
 800d5c2:	68e3      	ldr	r3, [r4, #12]
 800d5c4:	6832      	ldr	r2, [r6, #0]
 800d5c6:	1a9b      	subs	r3, r3, r2
 800d5c8:	42ab      	cmp	r3, r5
 800d5ca:	dc26      	bgt.n	800d61a <_printf_common+0x96>
 800d5cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d5d0:	6822      	ldr	r2, [r4, #0]
 800d5d2:	3b00      	subs	r3, #0
 800d5d4:	bf18      	it	ne
 800d5d6:	2301      	movne	r3, #1
 800d5d8:	0692      	lsls	r2, r2, #26
 800d5da:	d42b      	bmi.n	800d634 <_printf_common+0xb0>
 800d5dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d5e0:	4641      	mov	r1, r8
 800d5e2:	4638      	mov	r0, r7
 800d5e4:	47c8      	blx	r9
 800d5e6:	3001      	adds	r0, #1
 800d5e8:	d01e      	beq.n	800d628 <_printf_common+0xa4>
 800d5ea:	6823      	ldr	r3, [r4, #0]
 800d5ec:	6922      	ldr	r2, [r4, #16]
 800d5ee:	f003 0306 	and.w	r3, r3, #6
 800d5f2:	2b04      	cmp	r3, #4
 800d5f4:	bf02      	ittt	eq
 800d5f6:	68e5      	ldreq	r5, [r4, #12]
 800d5f8:	6833      	ldreq	r3, [r6, #0]
 800d5fa:	1aed      	subeq	r5, r5, r3
 800d5fc:	68a3      	ldr	r3, [r4, #8]
 800d5fe:	bf0c      	ite	eq
 800d600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d604:	2500      	movne	r5, #0
 800d606:	4293      	cmp	r3, r2
 800d608:	bfc4      	itt	gt
 800d60a:	1a9b      	subgt	r3, r3, r2
 800d60c:	18ed      	addgt	r5, r5, r3
 800d60e:	2600      	movs	r6, #0
 800d610:	341a      	adds	r4, #26
 800d612:	42b5      	cmp	r5, r6
 800d614:	d11a      	bne.n	800d64c <_printf_common+0xc8>
 800d616:	2000      	movs	r0, #0
 800d618:	e008      	b.n	800d62c <_printf_common+0xa8>
 800d61a:	2301      	movs	r3, #1
 800d61c:	4652      	mov	r2, sl
 800d61e:	4641      	mov	r1, r8
 800d620:	4638      	mov	r0, r7
 800d622:	47c8      	blx	r9
 800d624:	3001      	adds	r0, #1
 800d626:	d103      	bne.n	800d630 <_printf_common+0xac>
 800d628:	f04f 30ff 	mov.w	r0, #4294967295
 800d62c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d630:	3501      	adds	r5, #1
 800d632:	e7c6      	b.n	800d5c2 <_printf_common+0x3e>
 800d634:	18e1      	adds	r1, r4, r3
 800d636:	1c5a      	adds	r2, r3, #1
 800d638:	2030      	movs	r0, #48	@ 0x30
 800d63a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d63e:	4422      	add	r2, r4
 800d640:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d644:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d648:	3302      	adds	r3, #2
 800d64a:	e7c7      	b.n	800d5dc <_printf_common+0x58>
 800d64c:	2301      	movs	r3, #1
 800d64e:	4622      	mov	r2, r4
 800d650:	4641      	mov	r1, r8
 800d652:	4638      	mov	r0, r7
 800d654:	47c8      	blx	r9
 800d656:	3001      	adds	r0, #1
 800d658:	d0e6      	beq.n	800d628 <_printf_common+0xa4>
 800d65a:	3601      	adds	r6, #1
 800d65c:	e7d9      	b.n	800d612 <_printf_common+0x8e>
	...

0800d660 <_printf_i>:
 800d660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d664:	7e0f      	ldrb	r7, [r1, #24]
 800d666:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d668:	2f78      	cmp	r7, #120	@ 0x78
 800d66a:	4691      	mov	r9, r2
 800d66c:	4680      	mov	r8, r0
 800d66e:	460c      	mov	r4, r1
 800d670:	469a      	mov	sl, r3
 800d672:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d676:	d807      	bhi.n	800d688 <_printf_i+0x28>
 800d678:	2f62      	cmp	r7, #98	@ 0x62
 800d67a:	d80a      	bhi.n	800d692 <_printf_i+0x32>
 800d67c:	2f00      	cmp	r7, #0
 800d67e:	f000 80d2 	beq.w	800d826 <_printf_i+0x1c6>
 800d682:	2f58      	cmp	r7, #88	@ 0x58
 800d684:	f000 80b9 	beq.w	800d7fa <_printf_i+0x19a>
 800d688:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d68c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d690:	e03a      	b.n	800d708 <_printf_i+0xa8>
 800d692:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d696:	2b15      	cmp	r3, #21
 800d698:	d8f6      	bhi.n	800d688 <_printf_i+0x28>
 800d69a:	a101      	add	r1, pc, #4	@ (adr r1, 800d6a0 <_printf_i+0x40>)
 800d69c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d6a0:	0800d6f9 	.word	0x0800d6f9
 800d6a4:	0800d70d 	.word	0x0800d70d
 800d6a8:	0800d689 	.word	0x0800d689
 800d6ac:	0800d689 	.word	0x0800d689
 800d6b0:	0800d689 	.word	0x0800d689
 800d6b4:	0800d689 	.word	0x0800d689
 800d6b8:	0800d70d 	.word	0x0800d70d
 800d6bc:	0800d689 	.word	0x0800d689
 800d6c0:	0800d689 	.word	0x0800d689
 800d6c4:	0800d689 	.word	0x0800d689
 800d6c8:	0800d689 	.word	0x0800d689
 800d6cc:	0800d80d 	.word	0x0800d80d
 800d6d0:	0800d737 	.word	0x0800d737
 800d6d4:	0800d7c7 	.word	0x0800d7c7
 800d6d8:	0800d689 	.word	0x0800d689
 800d6dc:	0800d689 	.word	0x0800d689
 800d6e0:	0800d82f 	.word	0x0800d82f
 800d6e4:	0800d689 	.word	0x0800d689
 800d6e8:	0800d737 	.word	0x0800d737
 800d6ec:	0800d689 	.word	0x0800d689
 800d6f0:	0800d689 	.word	0x0800d689
 800d6f4:	0800d7cf 	.word	0x0800d7cf
 800d6f8:	6833      	ldr	r3, [r6, #0]
 800d6fa:	1d1a      	adds	r2, r3, #4
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	6032      	str	r2, [r6, #0]
 800d700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d704:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d708:	2301      	movs	r3, #1
 800d70a:	e09d      	b.n	800d848 <_printf_i+0x1e8>
 800d70c:	6833      	ldr	r3, [r6, #0]
 800d70e:	6820      	ldr	r0, [r4, #0]
 800d710:	1d19      	adds	r1, r3, #4
 800d712:	6031      	str	r1, [r6, #0]
 800d714:	0606      	lsls	r6, r0, #24
 800d716:	d501      	bpl.n	800d71c <_printf_i+0xbc>
 800d718:	681d      	ldr	r5, [r3, #0]
 800d71a:	e003      	b.n	800d724 <_printf_i+0xc4>
 800d71c:	0645      	lsls	r5, r0, #25
 800d71e:	d5fb      	bpl.n	800d718 <_printf_i+0xb8>
 800d720:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d724:	2d00      	cmp	r5, #0
 800d726:	da03      	bge.n	800d730 <_printf_i+0xd0>
 800d728:	232d      	movs	r3, #45	@ 0x2d
 800d72a:	426d      	negs	r5, r5
 800d72c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d730:	4859      	ldr	r0, [pc, #356]	@ (800d898 <_printf_i+0x238>)
 800d732:	230a      	movs	r3, #10
 800d734:	e011      	b.n	800d75a <_printf_i+0xfa>
 800d736:	6821      	ldr	r1, [r4, #0]
 800d738:	6833      	ldr	r3, [r6, #0]
 800d73a:	0608      	lsls	r0, r1, #24
 800d73c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d740:	d402      	bmi.n	800d748 <_printf_i+0xe8>
 800d742:	0649      	lsls	r1, r1, #25
 800d744:	bf48      	it	mi
 800d746:	b2ad      	uxthmi	r5, r5
 800d748:	2f6f      	cmp	r7, #111	@ 0x6f
 800d74a:	4853      	ldr	r0, [pc, #332]	@ (800d898 <_printf_i+0x238>)
 800d74c:	6033      	str	r3, [r6, #0]
 800d74e:	bf14      	ite	ne
 800d750:	230a      	movne	r3, #10
 800d752:	2308      	moveq	r3, #8
 800d754:	2100      	movs	r1, #0
 800d756:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d75a:	6866      	ldr	r6, [r4, #4]
 800d75c:	60a6      	str	r6, [r4, #8]
 800d75e:	2e00      	cmp	r6, #0
 800d760:	bfa2      	ittt	ge
 800d762:	6821      	ldrge	r1, [r4, #0]
 800d764:	f021 0104 	bicge.w	r1, r1, #4
 800d768:	6021      	strge	r1, [r4, #0]
 800d76a:	b90d      	cbnz	r5, 800d770 <_printf_i+0x110>
 800d76c:	2e00      	cmp	r6, #0
 800d76e:	d04b      	beq.n	800d808 <_printf_i+0x1a8>
 800d770:	4616      	mov	r6, r2
 800d772:	fbb5 f1f3 	udiv	r1, r5, r3
 800d776:	fb03 5711 	mls	r7, r3, r1, r5
 800d77a:	5dc7      	ldrb	r7, [r0, r7]
 800d77c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d780:	462f      	mov	r7, r5
 800d782:	42bb      	cmp	r3, r7
 800d784:	460d      	mov	r5, r1
 800d786:	d9f4      	bls.n	800d772 <_printf_i+0x112>
 800d788:	2b08      	cmp	r3, #8
 800d78a:	d10b      	bne.n	800d7a4 <_printf_i+0x144>
 800d78c:	6823      	ldr	r3, [r4, #0]
 800d78e:	07df      	lsls	r7, r3, #31
 800d790:	d508      	bpl.n	800d7a4 <_printf_i+0x144>
 800d792:	6923      	ldr	r3, [r4, #16]
 800d794:	6861      	ldr	r1, [r4, #4]
 800d796:	4299      	cmp	r1, r3
 800d798:	bfde      	ittt	le
 800d79a:	2330      	movle	r3, #48	@ 0x30
 800d79c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d7a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d7a4:	1b92      	subs	r2, r2, r6
 800d7a6:	6122      	str	r2, [r4, #16]
 800d7a8:	f8cd a000 	str.w	sl, [sp]
 800d7ac:	464b      	mov	r3, r9
 800d7ae:	aa03      	add	r2, sp, #12
 800d7b0:	4621      	mov	r1, r4
 800d7b2:	4640      	mov	r0, r8
 800d7b4:	f7ff fee6 	bl	800d584 <_printf_common>
 800d7b8:	3001      	adds	r0, #1
 800d7ba:	d14a      	bne.n	800d852 <_printf_i+0x1f2>
 800d7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7c0:	b004      	add	sp, #16
 800d7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7c6:	6823      	ldr	r3, [r4, #0]
 800d7c8:	f043 0320 	orr.w	r3, r3, #32
 800d7cc:	6023      	str	r3, [r4, #0]
 800d7ce:	4833      	ldr	r0, [pc, #204]	@ (800d89c <_printf_i+0x23c>)
 800d7d0:	2778      	movs	r7, #120	@ 0x78
 800d7d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d7d6:	6823      	ldr	r3, [r4, #0]
 800d7d8:	6831      	ldr	r1, [r6, #0]
 800d7da:	061f      	lsls	r7, r3, #24
 800d7dc:	f851 5b04 	ldr.w	r5, [r1], #4
 800d7e0:	d402      	bmi.n	800d7e8 <_printf_i+0x188>
 800d7e2:	065f      	lsls	r7, r3, #25
 800d7e4:	bf48      	it	mi
 800d7e6:	b2ad      	uxthmi	r5, r5
 800d7e8:	6031      	str	r1, [r6, #0]
 800d7ea:	07d9      	lsls	r1, r3, #31
 800d7ec:	bf44      	itt	mi
 800d7ee:	f043 0320 	orrmi.w	r3, r3, #32
 800d7f2:	6023      	strmi	r3, [r4, #0]
 800d7f4:	b11d      	cbz	r5, 800d7fe <_printf_i+0x19e>
 800d7f6:	2310      	movs	r3, #16
 800d7f8:	e7ac      	b.n	800d754 <_printf_i+0xf4>
 800d7fa:	4827      	ldr	r0, [pc, #156]	@ (800d898 <_printf_i+0x238>)
 800d7fc:	e7e9      	b.n	800d7d2 <_printf_i+0x172>
 800d7fe:	6823      	ldr	r3, [r4, #0]
 800d800:	f023 0320 	bic.w	r3, r3, #32
 800d804:	6023      	str	r3, [r4, #0]
 800d806:	e7f6      	b.n	800d7f6 <_printf_i+0x196>
 800d808:	4616      	mov	r6, r2
 800d80a:	e7bd      	b.n	800d788 <_printf_i+0x128>
 800d80c:	6833      	ldr	r3, [r6, #0]
 800d80e:	6825      	ldr	r5, [r4, #0]
 800d810:	6961      	ldr	r1, [r4, #20]
 800d812:	1d18      	adds	r0, r3, #4
 800d814:	6030      	str	r0, [r6, #0]
 800d816:	062e      	lsls	r6, r5, #24
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	d501      	bpl.n	800d820 <_printf_i+0x1c0>
 800d81c:	6019      	str	r1, [r3, #0]
 800d81e:	e002      	b.n	800d826 <_printf_i+0x1c6>
 800d820:	0668      	lsls	r0, r5, #25
 800d822:	d5fb      	bpl.n	800d81c <_printf_i+0x1bc>
 800d824:	8019      	strh	r1, [r3, #0]
 800d826:	2300      	movs	r3, #0
 800d828:	6123      	str	r3, [r4, #16]
 800d82a:	4616      	mov	r6, r2
 800d82c:	e7bc      	b.n	800d7a8 <_printf_i+0x148>
 800d82e:	6833      	ldr	r3, [r6, #0]
 800d830:	1d1a      	adds	r2, r3, #4
 800d832:	6032      	str	r2, [r6, #0]
 800d834:	681e      	ldr	r6, [r3, #0]
 800d836:	6862      	ldr	r2, [r4, #4]
 800d838:	2100      	movs	r1, #0
 800d83a:	4630      	mov	r0, r6
 800d83c:	f7f2 fd50 	bl	80002e0 <memchr>
 800d840:	b108      	cbz	r0, 800d846 <_printf_i+0x1e6>
 800d842:	1b80      	subs	r0, r0, r6
 800d844:	6060      	str	r0, [r4, #4]
 800d846:	6863      	ldr	r3, [r4, #4]
 800d848:	6123      	str	r3, [r4, #16]
 800d84a:	2300      	movs	r3, #0
 800d84c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d850:	e7aa      	b.n	800d7a8 <_printf_i+0x148>
 800d852:	6923      	ldr	r3, [r4, #16]
 800d854:	4632      	mov	r2, r6
 800d856:	4649      	mov	r1, r9
 800d858:	4640      	mov	r0, r8
 800d85a:	47d0      	blx	sl
 800d85c:	3001      	adds	r0, #1
 800d85e:	d0ad      	beq.n	800d7bc <_printf_i+0x15c>
 800d860:	6823      	ldr	r3, [r4, #0]
 800d862:	079b      	lsls	r3, r3, #30
 800d864:	d413      	bmi.n	800d88e <_printf_i+0x22e>
 800d866:	68e0      	ldr	r0, [r4, #12]
 800d868:	9b03      	ldr	r3, [sp, #12]
 800d86a:	4298      	cmp	r0, r3
 800d86c:	bfb8      	it	lt
 800d86e:	4618      	movlt	r0, r3
 800d870:	e7a6      	b.n	800d7c0 <_printf_i+0x160>
 800d872:	2301      	movs	r3, #1
 800d874:	4632      	mov	r2, r6
 800d876:	4649      	mov	r1, r9
 800d878:	4640      	mov	r0, r8
 800d87a:	47d0      	blx	sl
 800d87c:	3001      	adds	r0, #1
 800d87e:	d09d      	beq.n	800d7bc <_printf_i+0x15c>
 800d880:	3501      	adds	r5, #1
 800d882:	68e3      	ldr	r3, [r4, #12]
 800d884:	9903      	ldr	r1, [sp, #12]
 800d886:	1a5b      	subs	r3, r3, r1
 800d888:	42ab      	cmp	r3, r5
 800d88a:	dcf2      	bgt.n	800d872 <_printf_i+0x212>
 800d88c:	e7eb      	b.n	800d866 <_printf_i+0x206>
 800d88e:	2500      	movs	r5, #0
 800d890:	f104 0619 	add.w	r6, r4, #25
 800d894:	e7f5      	b.n	800d882 <_printf_i+0x222>
 800d896:	bf00      	nop
 800d898:	08010412 	.word	0x08010412
 800d89c:	08010423 	.word	0x08010423

0800d8a0 <std>:
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	b510      	push	{r4, lr}
 800d8a4:	4604      	mov	r4, r0
 800d8a6:	e9c0 3300 	strd	r3, r3, [r0]
 800d8aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d8ae:	6083      	str	r3, [r0, #8]
 800d8b0:	8181      	strh	r1, [r0, #12]
 800d8b2:	6643      	str	r3, [r0, #100]	@ 0x64
 800d8b4:	81c2      	strh	r2, [r0, #14]
 800d8b6:	6183      	str	r3, [r0, #24]
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	2208      	movs	r2, #8
 800d8bc:	305c      	adds	r0, #92	@ 0x5c
 800d8be:	f000 f8f4 	bl	800daaa <memset>
 800d8c2:	4b0d      	ldr	r3, [pc, #52]	@ (800d8f8 <std+0x58>)
 800d8c4:	6263      	str	r3, [r4, #36]	@ 0x24
 800d8c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d8fc <std+0x5c>)
 800d8c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d8ca:	4b0d      	ldr	r3, [pc, #52]	@ (800d900 <std+0x60>)
 800d8cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d8ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d904 <std+0x64>)
 800d8d0:	6323      	str	r3, [r4, #48]	@ 0x30
 800d8d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d908 <std+0x68>)
 800d8d4:	6224      	str	r4, [r4, #32]
 800d8d6:	429c      	cmp	r4, r3
 800d8d8:	d006      	beq.n	800d8e8 <std+0x48>
 800d8da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d8de:	4294      	cmp	r4, r2
 800d8e0:	d002      	beq.n	800d8e8 <std+0x48>
 800d8e2:	33d0      	adds	r3, #208	@ 0xd0
 800d8e4:	429c      	cmp	r4, r3
 800d8e6:	d105      	bne.n	800d8f4 <std+0x54>
 800d8e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8f0:	f000 b958 	b.w	800dba4 <__retarget_lock_init_recursive>
 800d8f4:	bd10      	pop	{r4, pc}
 800d8f6:	bf00      	nop
 800d8f8:	0800da25 	.word	0x0800da25
 800d8fc:	0800da47 	.word	0x0800da47
 800d900:	0800da7f 	.word	0x0800da7f
 800d904:	0800daa3 	.word	0x0800daa3
 800d908:	24003668 	.word	0x24003668

0800d90c <stdio_exit_handler>:
 800d90c:	4a02      	ldr	r2, [pc, #8]	@ (800d918 <stdio_exit_handler+0xc>)
 800d90e:	4903      	ldr	r1, [pc, #12]	@ (800d91c <stdio_exit_handler+0x10>)
 800d910:	4803      	ldr	r0, [pc, #12]	@ (800d920 <stdio_exit_handler+0x14>)
 800d912:	f000 b869 	b.w	800d9e8 <_fwalk_sglue>
 800d916:	bf00      	nop
 800d918:	24000020 	.word	0x24000020
 800d91c:	0800f179 	.word	0x0800f179
 800d920:	24000030 	.word	0x24000030

0800d924 <cleanup_stdio>:
 800d924:	6841      	ldr	r1, [r0, #4]
 800d926:	4b0c      	ldr	r3, [pc, #48]	@ (800d958 <cleanup_stdio+0x34>)
 800d928:	4299      	cmp	r1, r3
 800d92a:	b510      	push	{r4, lr}
 800d92c:	4604      	mov	r4, r0
 800d92e:	d001      	beq.n	800d934 <cleanup_stdio+0x10>
 800d930:	f001 fc22 	bl	800f178 <_fflush_r>
 800d934:	68a1      	ldr	r1, [r4, #8]
 800d936:	4b09      	ldr	r3, [pc, #36]	@ (800d95c <cleanup_stdio+0x38>)
 800d938:	4299      	cmp	r1, r3
 800d93a:	d002      	beq.n	800d942 <cleanup_stdio+0x1e>
 800d93c:	4620      	mov	r0, r4
 800d93e:	f001 fc1b 	bl	800f178 <_fflush_r>
 800d942:	68e1      	ldr	r1, [r4, #12]
 800d944:	4b06      	ldr	r3, [pc, #24]	@ (800d960 <cleanup_stdio+0x3c>)
 800d946:	4299      	cmp	r1, r3
 800d948:	d004      	beq.n	800d954 <cleanup_stdio+0x30>
 800d94a:	4620      	mov	r0, r4
 800d94c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d950:	f001 bc12 	b.w	800f178 <_fflush_r>
 800d954:	bd10      	pop	{r4, pc}
 800d956:	bf00      	nop
 800d958:	24003668 	.word	0x24003668
 800d95c:	240036d0 	.word	0x240036d0
 800d960:	24003738 	.word	0x24003738

0800d964 <global_stdio_init.part.0>:
 800d964:	b510      	push	{r4, lr}
 800d966:	4b0b      	ldr	r3, [pc, #44]	@ (800d994 <global_stdio_init.part.0+0x30>)
 800d968:	4c0b      	ldr	r4, [pc, #44]	@ (800d998 <global_stdio_init.part.0+0x34>)
 800d96a:	4a0c      	ldr	r2, [pc, #48]	@ (800d99c <global_stdio_init.part.0+0x38>)
 800d96c:	601a      	str	r2, [r3, #0]
 800d96e:	4620      	mov	r0, r4
 800d970:	2200      	movs	r2, #0
 800d972:	2104      	movs	r1, #4
 800d974:	f7ff ff94 	bl	800d8a0 <std>
 800d978:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d97c:	2201      	movs	r2, #1
 800d97e:	2109      	movs	r1, #9
 800d980:	f7ff ff8e 	bl	800d8a0 <std>
 800d984:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d988:	2202      	movs	r2, #2
 800d98a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d98e:	2112      	movs	r1, #18
 800d990:	f7ff bf86 	b.w	800d8a0 <std>
 800d994:	240037a0 	.word	0x240037a0
 800d998:	24003668 	.word	0x24003668
 800d99c:	0800d90d 	.word	0x0800d90d

0800d9a0 <__sfp_lock_acquire>:
 800d9a0:	4801      	ldr	r0, [pc, #4]	@ (800d9a8 <__sfp_lock_acquire+0x8>)
 800d9a2:	f000 b900 	b.w	800dba6 <__retarget_lock_acquire_recursive>
 800d9a6:	bf00      	nop
 800d9a8:	240037a9 	.word	0x240037a9

0800d9ac <__sfp_lock_release>:
 800d9ac:	4801      	ldr	r0, [pc, #4]	@ (800d9b4 <__sfp_lock_release+0x8>)
 800d9ae:	f000 b8fb 	b.w	800dba8 <__retarget_lock_release_recursive>
 800d9b2:	bf00      	nop
 800d9b4:	240037a9 	.word	0x240037a9

0800d9b8 <__sinit>:
 800d9b8:	b510      	push	{r4, lr}
 800d9ba:	4604      	mov	r4, r0
 800d9bc:	f7ff fff0 	bl	800d9a0 <__sfp_lock_acquire>
 800d9c0:	6a23      	ldr	r3, [r4, #32]
 800d9c2:	b11b      	cbz	r3, 800d9cc <__sinit+0x14>
 800d9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9c8:	f7ff bff0 	b.w	800d9ac <__sfp_lock_release>
 800d9cc:	4b04      	ldr	r3, [pc, #16]	@ (800d9e0 <__sinit+0x28>)
 800d9ce:	6223      	str	r3, [r4, #32]
 800d9d0:	4b04      	ldr	r3, [pc, #16]	@ (800d9e4 <__sinit+0x2c>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d1f5      	bne.n	800d9c4 <__sinit+0xc>
 800d9d8:	f7ff ffc4 	bl	800d964 <global_stdio_init.part.0>
 800d9dc:	e7f2      	b.n	800d9c4 <__sinit+0xc>
 800d9de:	bf00      	nop
 800d9e0:	0800d925 	.word	0x0800d925
 800d9e4:	240037a0 	.word	0x240037a0

0800d9e8 <_fwalk_sglue>:
 800d9e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9ec:	4607      	mov	r7, r0
 800d9ee:	4688      	mov	r8, r1
 800d9f0:	4614      	mov	r4, r2
 800d9f2:	2600      	movs	r6, #0
 800d9f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d9f8:	f1b9 0901 	subs.w	r9, r9, #1
 800d9fc:	d505      	bpl.n	800da0a <_fwalk_sglue+0x22>
 800d9fe:	6824      	ldr	r4, [r4, #0]
 800da00:	2c00      	cmp	r4, #0
 800da02:	d1f7      	bne.n	800d9f4 <_fwalk_sglue+0xc>
 800da04:	4630      	mov	r0, r6
 800da06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da0a:	89ab      	ldrh	r3, [r5, #12]
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	d907      	bls.n	800da20 <_fwalk_sglue+0x38>
 800da10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da14:	3301      	adds	r3, #1
 800da16:	d003      	beq.n	800da20 <_fwalk_sglue+0x38>
 800da18:	4629      	mov	r1, r5
 800da1a:	4638      	mov	r0, r7
 800da1c:	47c0      	blx	r8
 800da1e:	4306      	orrs	r6, r0
 800da20:	3568      	adds	r5, #104	@ 0x68
 800da22:	e7e9      	b.n	800d9f8 <_fwalk_sglue+0x10>

0800da24 <__sread>:
 800da24:	b510      	push	{r4, lr}
 800da26:	460c      	mov	r4, r1
 800da28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da2c:	f000 f86c 	bl	800db08 <_read_r>
 800da30:	2800      	cmp	r0, #0
 800da32:	bfab      	itete	ge
 800da34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800da36:	89a3      	ldrhlt	r3, [r4, #12]
 800da38:	181b      	addge	r3, r3, r0
 800da3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800da3e:	bfac      	ite	ge
 800da40:	6563      	strge	r3, [r4, #84]	@ 0x54
 800da42:	81a3      	strhlt	r3, [r4, #12]
 800da44:	bd10      	pop	{r4, pc}

0800da46 <__swrite>:
 800da46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da4a:	461f      	mov	r7, r3
 800da4c:	898b      	ldrh	r3, [r1, #12]
 800da4e:	05db      	lsls	r3, r3, #23
 800da50:	4605      	mov	r5, r0
 800da52:	460c      	mov	r4, r1
 800da54:	4616      	mov	r6, r2
 800da56:	d505      	bpl.n	800da64 <__swrite+0x1e>
 800da58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da5c:	2302      	movs	r3, #2
 800da5e:	2200      	movs	r2, #0
 800da60:	f000 f840 	bl	800dae4 <_lseek_r>
 800da64:	89a3      	ldrh	r3, [r4, #12]
 800da66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800da6e:	81a3      	strh	r3, [r4, #12]
 800da70:	4632      	mov	r2, r6
 800da72:	463b      	mov	r3, r7
 800da74:	4628      	mov	r0, r5
 800da76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da7a:	f000 b857 	b.w	800db2c <_write_r>

0800da7e <__sseek>:
 800da7e:	b510      	push	{r4, lr}
 800da80:	460c      	mov	r4, r1
 800da82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da86:	f000 f82d 	bl	800dae4 <_lseek_r>
 800da8a:	1c43      	adds	r3, r0, #1
 800da8c:	89a3      	ldrh	r3, [r4, #12]
 800da8e:	bf15      	itete	ne
 800da90:	6560      	strne	r0, [r4, #84]	@ 0x54
 800da92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800da96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800da9a:	81a3      	strheq	r3, [r4, #12]
 800da9c:	bf18      	it	ne
 800da9e:	81a3      	strhne	r3, [r4, #12]
 800daa0:	bd10      	pop	{r4, pc}

0800daa2 <__sclose>:
 800daa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daa6:	f000 b80d 	b.w	800dac4 <_close_r>

0800daaa <memset>:
 800daaa:	4402      	add	r2, r0
 800daac:	4603      	mov	r3, r0
 800daae:	4293      	cmp	r3, r2
 800dab0:	d100      	bne.n	800dab4 <memset+0xa>
 800dab2:	4770      	bx	lr
 800dab4:	f803 1b01 	strb.w	r1, [r3], #1
 800dab8:	e7f9      	b.n	800daae <memset+0x4>
	...

0800dabc <_localeconv_r>:
 800dabc:	4800      	ldr	r0, [pc, #0]	@ (800dac0 <_localeconv_r+0x4>)
 800dabe:	4770      	bx	lr
 800dac0:	2400016c 	.word	0x2400016c

0800dac4 <_close_r>:
 800dac4:	b538      	push	{r3, r4, r5, lr}
 800dac6:	4d06      	ldr	r5, [pc, #24]	@ (800dae0 <_close_r+0x1c>)
 800dac8:	2300      	movs	r3, #0
 800daca:	4604      	mov	r4, r0
 800dacc:	4608      	mov	r0, r1
 800dace:	602b      	str	r3, [r5, #0]
 800dad0:	f7f5 fe3a 	bl	8003748 <_close>
 800dad4:	1c43      	adds	r3, r0, #1
 800dad6:	d102      	bne.n	800dade <_close_r+0x1a>
 800dad8:	682b      	ldr	r3, [r5, #0]
 800dada:	b103      	cbz	r3, 800dade <_close_r+0x1a>
 800dadc:	6023      	str	r3, [r4, #0]
 800dade:	bd38      	pop	{r3, r4, r5, pc}
 800dae0:	240037a4 	.word	0x240037a4

0800dae4 <_lseek_r>:
 800dae4:	b538      	push	{r3, r4, r5, lr}
 800dae6:	4d07      	ldr	r5, [pc, #28]	@ (800db04 <_lseek_r+0x20>)
 800dae8:	4604      	mov	r4, r0
 800daea:	4608      	mov	r0, r1
 800daec:	4611      	mov	r1, r2
 800daee:	2200      	movs	r2, #0
 800daf0:	602a      	str	r2, [r5, #0]
 800daf2:	461a      	mov	r2, r3
 800daf4:	f7f5 fe4f 	bl	8003796 <_lseek>
 800daf8:	1c43      	adds	r3, r0, #1
 800dafa:	d102      	bne.n	800db02 <_lseek_r+0x1e>
 800dafc:	682b      	ldr	r3, [r5, #0]
 800dafe:	b103      	cbz	r3, 800db02 <_lseek_r+0x1e>
 800db00:	6023      	str	r3, [r4, #0]
 800db02:	bd38      	pop	{r3, r4, r5, pc}
 800db04:	240037a4 	.word	0x240037a4

0800db08 <_read_r>:
 800db08:	b538      	push	{r3, r4, r5, lr}
 800db0a:	4d07      	ldr	r5, [pc, #28]	@ (800db28 <_read_r+0x20>)
 800db0c:	4604      	mov	r4, r0
 800db0e:	4608      	mov	r0, r1
 800db10:	4611      	mov	r1, r2
 800db12:	2200      	movs	r2, #0
 800db14:	602a      	str	r2, [r5, #0]
 800db16:	461a      	mov	r2, r3
 800db18:	f7f5 fddd 	bl	80036d6 <_read>
 800db1c:	1c43      	adds	r3, r0, #1
 800db1e:	d102      	bne.n	800db26 <_read_r+0x1e>
 800db20:	682b      	ldr	r3, [r5, #0]
 800db22:	b103      	cbz	r3, 800db26 <_read_r+0x1e>
 800db24:	6023      	str	r3, [r4, #0]
 800db26:	bd38      	pop	{r3, r4, r5, pc}
 800db28:	240037a4 	.word	0x240037a4

0800db2c <_write_r>:
 800db2c:	b538      	push	{r3, r4, r5, lr}
 800db2e:	4d07      	ldr	r5, [pc, #28]	@ (800db4c <_write_r+0x20>)
 800db30:	4604      	mov	r4, r0
 800db32:	4608      	mov	r0, r1
 800db34:	4611      	mov	r1, r2
 800db36:	2200      	movs	r2, #0
 800db38:	602a      	str	r2, [r5, #0]
 800db3a:	461a      	mov	r2, r3
 800db3c:	f7f5 fde8 	bl	8003710 <_write>
 800db40:	1c43      	adds	r3, r0, #1
 800db42:	d102      	bne.n	800db4a <_write_r+0x1e>
 800db44:	682b      	ldr	r3, [r5, #0]
 800db46:	b103      	cbz	r3, 800db4a <_write_r+0x1e>
 800db48:	6023      	str	r3, [r4, #0]
 800db4a:	bd38      	pop	{r3, r4, r5, pc}
 800db4c:	240037a4 	.word	0x240037a4

0800db50 <__errno>:
 800db50:	4b01      	ldr	r3, [pc, #4]	@ (800db58 <__errno+0x8>)
 800db52:	6818      	ldr	r0, [r3, #0]
 800db54:	4770      	bx	lr
 800db56:	bf00      	nop
 800db58:	2400002c 	.word	0x2400002c

0800db5c <__libc_init_array>:
 800db5c:	b570      	push	{r4, r5, r6, lr}
 800db5e:	4d0d      	ldr	r5, [pc, #52]	@ (800db94 <__libc_init_array+0x38>)
 800db60:	4c0d      	ldr	r4, [pc, #52]	@ (800db98 <__libc_init_array+0x3c>)
 800db62:	1b64      	subs	r4, r4, r5
 800db64:	10a4      	asrs	r4, r4, #2
 800db66:	2600      	movs	r6, #0
 800db68:	42a6      	cmp	r6, r4
 800db6a:	d109      	bne.n	800db80 <__libc_init_array+0x24>
 800db6c:	4d0b      	ldr	r5, [pc, #44]	@ (800db9c <__libc_init_array+0x40>)
 800db6e:	4c0c      	ldr	r4, [pc, #48]	@ (800dba0 <__libc_init_array+0x44>)
 800db70:	f002 fc1e 	bl	80103b0 <_init>
 800db74:	1b64      	subs	r4, r4, r5
 800db76:	10a4      	asrs	r4, r4, #2
 800db78:	2600      	movs	r6, #0
 800db7a:	42a6      	cmp	r6, r4
 800db7c:	d105      	bne.n	800db8a <__libc_init_array+0x2e>
 800db7e:	bd70      	pop	{r4, r5, r6, pc}
 800db80:	f855 3b04 	ldr.w	r3, [r5], #4
 800db84:	4798      	blx	r3
 800db86:	3601      	adds	r6, #1
 800db88:	e7ee      	b.n	800db68 <__libc_init_array+0xc>
 800db8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800db8e:	4798      	blx	r3
 800db90:	3601      	adds	r6, #1
 800db92:	e7f2      	b.n	800db7a <__libc_init_array+0x1e>
 800db94:	08010950 	.word	0x08010950
 800db98:	08010950 	.word	0x08010950
 800db9c:	08010950 	.word	0x08010950
 800dba0:	08010954 	.word	0x08010954

0800dba4 <__retarget_lock_init_recursive>:
 800dba4:	4770      	bx	lr

0800dba6 <__retarget_lock_acquire_recursive>:
 800dba6:	4770      	bx	lr

0800dba8 <__retarget_lock_release_recursive>:
 800dba8:	4770      	bx	lr

0800dbaa <quorem>:
 800dbaa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbae:	6903      	ldr	r3, [r0, #16]
 800dbb0:	690c      	ldr	r4, [r1, #16]
 800dbb2:	42a3      	cmp	r3, r4
 800dbb4:	4607      	mov	r7, r0
 800dbb6:	db7e      	blt.n	800dcb6 <quorem+0x10c>
 800dbb8:	3c01      	subs	r4, #1
 800dbba:	f101 0814 	add.w	r8, r1, #20
 800dbbe:	00a3      	lsls	r3, r4, #2
 800dbc0:	f100 0514 	add.w	r5, r0, #20
 800dbc4:	9300      	str	r3, [sp, #0]
 800dbc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dbca:	9301      	str	r3, [sp, #4]
 800dbcc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dbd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dbd4:	3301      	adds	r3, #1
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dbdc:	fbb2 f6f3 	udiv	r6, r2, r3
 800dbe0:	d32e      	bcc.n	800dc40 <quorem+0x96>
 800dbe2:	f04f 0a00 	mov.w	sl, #0
 800dbe6:	46c4      	mov	ip, r8
 800dbe8:	46ae      	mov	lr, r5
 800dbea:	46d3      	mov	fp, sl
 800dbec:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dbf0:	b298      	uxth	r0, r3
 800dbf2:	fb06 a000 	mla	r0, r6, r0, sl
 800dbf6:	0c02      	lsrs	r2, r0, #16
 800dbf8:	0c1b      	lsrs	r3, r3, #16
 800dbfa:	fb06 2303 	mla	r3, r6, r3, r2
 800dbfe:	f8de 2000 	ldr.w	r2, [lr]
 800dc02:	b280      	uxth	r0, r0
 800dc04:	b292      	uxth	r2, r2
 800dc06:	1a12      	subs	r2, r2, r0
 800dc08:	445a      	add	r2, fp
 800dc0a:	f8de 0000 	ldr.w	r0, [lr]
 800dc0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dc12:	b29b      	uxth	r3, r3
 800dc14:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dc18:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dc1c:	b292      	uxth	r2, r2
 800dc1e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dc22:	45e1      	cmp	r9, ip
 800dc24:	f84e 2b04 	str.w	r2, [lr], #4
 800dc28:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dc2c:	d2de      	bcs.n	800dbec <quorem+0x42>
 800dc2e:	9b00      	ldr	r3, [sp, #0]
 800dc30:	58eb      	ldr	r3, [r5, r3]
 800dc32:	b92b      	cbnz	r3, 800dc40 <quorem+0x96>
 800dc34:	9b01      	ldr	r3, [sp, #4]
 800dc36:	3b04      	subs	r3, #4
 800dc38:	429d      	cmp	r5, r3
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	d32f      	bcc.n	800dc9e <quorem+0xf4>
 800dc3e:	613c      	str	r4, [r7, #16]
 800dc40:	4638      	mov	r0, r7
 800dc42:	f001 f90d 	bl	800ee60 <__mcmp>
 800dc46:	2800      	cmp	r0, #0
 800dc48:	db25      	blt.n	800dc96 <quorem+0xec>
 800dc4a:	4629      	mov	r1, r5
 800dc4c:	2000      	movs	r0, #0
 800dc4e:	f858 2b04 	ldr.w	r2, [r8], #4
 800dc52:	f8d1 c000 	ldr.w	ip, [r1]
 800dc56:	fa1f fe82 	uxth.w	lr, r2
 800dc5a:	fa1f f38c 	uxth.w	r3, ip
 800dc5e:	eba3 030e 	sub.w	r3, r3, lr
 800dc62:	4403      	add	r3, r0
 800dc64:	0c12      	lsrs	r2, r2, #16
 800dc66:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dc6a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dc6e:	b29b      	uxth	r3, r3
 800dc70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc74:	45c1      	cmp	r9, r8
 800dc76:	f841 3b04 	str.w	r3, [r1], #4
 800dc7a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dc7e:	d2e6      	bcs.n	800dc4e <quorem+0xa4>
 800dc80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc88:	b922      	cbnz	r2, 800dc94 <quorem+0xea>
 800dc8a:	3b04      	subs	r3, #4
 800dc8c:	429d      	cmp	r5, r3
 800dc8e:	461a      	mov	r2, r3
 800dc90:	d30b      	bcc.n	800dcaa <quorem+0x100>
 800dc92:	613c      	str	r4, [r7, #16]
 800dc94:	3601      	adds	r6, #1
 800dc96:	4630      	mov	r0, r6
 800dc98:	b003      	add	sp, #12
 800dc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc9e:	6812      	ldr	r2, [r2, #0]
 800dca0:	3b04      	subs	r3, #4
 800dca2:	2a00      	cmp	r2, #0
 800dca4:	d1cb      	bne.n	800dc3e <quorem+0x94>
 800dca6:	3c01      	subs	r4, #1
 800dca8:	e7c6      	b.n	800dc38 <quorem+0x8e>
 800dcaa:	6812      	ldr	r2, [r2, #0]
 800dcac:	3b04      	subs	r3, #4
 800dcae:	2a00      	cmp	r2, #0
 800dcb0:	d1ef      	bne.n	800dc92 <quorem+0xe8>
 800dcb2:	3c01      	subs	r4, #1
 800dcb4:	e7ea      	b.n	800dc8c <quorem+0xe2>
 800dcb6:	2000      	movs	r0, #0
 800dcb8:	e7ee      	b.n	800dc98 <quorem+0xee>
 800dcba:	0000      	movs	r0, r0
 800dcbc:	0000      	movs	r0, r0
	...

0800dcc0 <_dtoa_r>:
 800dcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc4:	ed2d 8b02 	vpush	{d8}
 800dcc8:	69c7      	ldr	r7, [r0, #28]
 800dcca:	b091      	sub	sp, #68	@ 0x44
 800dccc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dcd0:	ec55 4b10 	vmov	r4, r5, d0
 800dcd4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800dcd6:	9107      	str	r1, [sp, #28]
 800dcd8:	4681      	mov	r9, r0
 800dcda:	9209      	str	r2, [sp, #36]	@ 0x24
 800dcdc:	930d      	str	r3, [sp, #52]	@ 0x34
 800dcde:	b97f      	cbnz	r7, 800dd00 <_dtoa_r+0x40>
 800dce0:	2010      	movs	r0, #16
 800dce2:	f000 fd8d 	bl	800e800 <malloc>
 800dce6:	4602      	mov	r2, r0
 800dce8:	f8c9 001c 	str.w	r0, [r9, #28]
 800dcec:	b920      	cbnz	r0, 800dcf8 <_dtoa_r+0x38>
 800dcee:	4ba0      	ldr	r3, [pc, #640]	@ (800df70 <_dtoa_r+0x2b0>)
 800dcf0:	21ef      	movs	r1, #239	@ 0xef
 800dcf2:	48a0      	ldr	r0, [pc, #640]	@ (800df74 <_dtoa_r+0x2b4>)
 800dcf4:	f001 fa86 	bl	800f204 <__assert_func>
 800dcf8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dcfc:	6007      	str	r7, [r0, #0]
 800dcfe:	60c7      	str	r7, [r0, #12]
 800dd00:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dd04:	6819      	ldr	r1, [r3, #0]
 800dd06:	b159      	cbz	r1, 800dd20 <_dtoa_r+0x60>
 800dd08:	685a      	ldr	r2, [r3, #4]
 800dd0a:	604a      	str	r2, [r1, #4]
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	4093      	lsls	r3, r2
 800dd10:	608b      	str	r3, [r1, #8]
 800dd12:	4648      	mov	r0, r9
 800dd14:	f000 fe6a 	bl	800e9ec <_Bfree>
 800dd18:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	601a      	str	r2, [r3, #0]
 800dd20:	1e2b      	subs	r3, r5, #0
 800dd22:	bfbb      	ittet	lt
 800dd24:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dd28:	9303      	strlt	r3, [sp, #12]
 800dd2a:	2300      	movge	r3, #0
 800dd2c:	2201      	movlt	r2, #1
 800dd2e:	bfac      	ite	ge
 800dd30:	6033      	strge	r3, [r6, #0]
 800dd32:	6032      	strlt	r2, [r6, #0]
 800dd34:	4b90      	ldr	r3, [pc, #576]	@ (800df78 <_dtoa_r+0x2b8>)
 800dd36:	9e03      	ldr	r6, [sp, #12]
 800dd38:	43b3      	bics	r3, r6
 800dd3a:	d110      	bne.n	800dd5e <_dtoa_r+0x9e>
 800dd3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dd3e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dd42:	6013      	str	r3, [r2, #0]
 800dd44:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800dd48:	4323      	orrs	r3, r4
 800dd4a:	f000 84de 	beq.w	800e70a <_dtoa_r+0xa4a>
 800dd4e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dd50:	4f8a      	ldr	r7, [pc, #552]	@ (800df7c <_dtoa_r+0x2bc>)
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	f000 84e0 	beq.w	800e718 <_dtoa_r+0xa58>
 800dd58:	1cfb      	adds	r3, r7, #3
 800dd5a:	f000 bcdb 	b.w	800e714 <_dtoa_r+0xa54>
 800dd5e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800dd62:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dd66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd6a:	d10a      	bne.n	800dd82 <_dtoa_r+0xc2>
 800dd6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dd6e:	2301      	movs	r3, #1
 800dd70:	6013      	str	r3, [r2, #0]
 800dd72:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dd74:	b113      	cbz	r3, 800dd7c <_dtoa_r+0xbc>
 800dd76:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800dd78:	4b81      	ldr	r3, [pc, #516]	@ (800df80 <_dtoa_r+0x2c0>)
 800dd7a:	6013      	str	r3, [r2, #0]
 800dd7c:	4f81      	ldr	r7, [pc, #516]	@ (800df84 <_dtoa_r+0x2c4>)
 800dd7e:	f000 bccb 	b.w	800e718 <_dtoa_r+0xa58>
 800dd82:	aa0e      	add	r2, sp, #56	@ 0x38
 800dd84:	a90f      	add	r1, sp, #60	@ 0x3c
 800dd86:	4648      	mov	r0, r9
 800dd88:	eeb0 0b48 	vmov.f64	d0, d8
 800dd8c:	f001 f918 	bl	800efc0 <__d2b>
 800dd90:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800dd94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd96:	9001      	str	r0, [sp, #4]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d045      	beq.n	800de28 <_dtoa_r+0x168>
 800dd9c:	eeb0 7b48 	vmov.f64	d7, d8
 800dda0:	ee18 1a90 	vmov	r1, s17
 800dda4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800dda8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800ddac:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800ddb0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ddb4:	2500      	movs	r5, #0
 800ddb6:	ee07 1a90 	vmov	s15, r1
 800ddba:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800ddbe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800df58 <_dtoa_r+0x298>
 800ddc2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ddc6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800df60 <_dtoa_r+0x2a0>
 800ddca:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ddce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800df68 <_dtoa_r+0x2a8>
 800ddd2:	ee07 3a90 	vmov	s15, r3
 800ddd6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ddda:	eeb0 7b46 	vmov.f64	d7, d6
 800ddde:	eea4 7b05 	vfma.f64	d7, d4, d5
 800dde2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800dde6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ddea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddee:	ee16 8a90 	vmov	r8, s13
 800ddf2:	d508      	bpl.n	800de06 <_dtoa_r+0x146>
 800ddf4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ddf8:	eeb4 6b47 	vcmp.f64	d6, d7
 800ddfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de00:	bf18      	it	ne
 800de02:	f108 38ff 	addne.w	r8, r8, #4294967295
 800de06:	f1b8 0f16 	cmp.w	r8, #22
 800de0a:	d82b      	bhi.n	800de64 <_dtoa_r+0x1a4>
 800de0c:	495e      	ldr	r1, [pc, #376]	@ (800df88 <_dtoa_r+0x2c8>)
 800de0e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800de12:	ed91 7b00 	vldr	d7, [r1]
 800de16:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800de1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de1e:	d501      	bpl.n	800de24 <_dtoa_r+0x164>
 800de20:	f108 38ff 	add.w	r8, r8, #4294967295
 800de24:	2100      	movs	r1, #0
 800de26:	e01e      	b.n	800de66 <_dtoa_r+0x1a6>
 800de28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de2a:	4413      	add	r3, r2
 800de2c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800de30:	2920      	cmp	r1, #32
 800de32:	bfc1      	itttt	gt
 800de34:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800de38:	408e      	lslgt	r6, r1
 800de3a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800de3e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800de42:	bfd6      	itet	le
 800de44:	f1c1 0120 	rsble	r1, r1, #32
 800de48:	4331      	orrgt	r1, r6
 800de4a:	fa04 f101 	lslle.w	r1, r4, r1
 800de4e:	ee07 1a90 	vmov	s15, r1
 800de52:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800de56:	3b01      	subs	r3, #1
 800de58:	ee17 1a90 	vmov	r1, s15
 800de5c:	2501      	movs	r5, #1
 800de5e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800de62:	e7a8      	b.n	800ddb6 <_dtoa_r+0xf6>
 800de64:	2101      	movs	r1, #1
 800de66:	1ad2      	subs	r2, r2, r3
 800de68:	1e53      	subs	r3, r2, #1
 800de6a:	9306      	str	r3, [sp, #24]
 800de6c:	bf45      	ittet	mi
 800de6e:	f1c2 0301 	rsbmi	r3, r2, #1
 800de72:	9305      	strmi	r3, [sp, #20]
 800de74:	2300      	movpl	r3, #0
 800de76:	2300      	movmi	r3, #0
 800de78:	bf4c      	ite	mi
 800de7a:	9306      	strmi	r3, [sp, #24]
 800de7c:	9305      	strpl	r3, [sp, #20]
 800de7e:	f1b8 0f00 	cmp.w	r8, #0
 800de82:	910c      	str	r1, [sp, #48]	@ 0x30
 800de84:	db18      	blt.n	800deb8 <_dtoa_r+0x1f8>
 800de86:	9b06      	ldr	r3, [sp, #24]
 800de88:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800de8c:	4443      	add	r3, r8
 800de8e:	9306      	str	r3, [sp, #24]
 800de90:	2300      	movs	r3, #0
 800de92:	9a07      	ldr	r2, [sp, #28]
 800de94:	2a09      	cmp	r2, #9
 800de96:	d849      	bhi.n	800df2c <_dtoa_r+0x26c>
 800de98:	2a05      	cmp	r2, #5
 800de9a:	bfc4      	itt	gt
 800de9c:	3a04      	subgt	r2, #4
 800de9e:	9207      	strgt	r2, [sp, #28]
 800dea0:	9a07      	ldr	r2, [sp, #28]
 800dea2:	f1a2 0202 	sub.w	r2, r2, #2
 800dea6:	bfcc      	ite	gt
 800dea8:	2400      	movgt	r4, #0
 800deaa:	2401      	movle	r4, #1
 800deac:	2a03      	cmp	r2, #3
 800deae:	d848      	bhi.n	800df42 <_dtoa_r+0x282>
 800deb0:	e8df f002 	tbb	[pc, r2]
 800deb4:	3a2c2e0b 	.word	0x3a2c2e0b
 800deb8:	9b05      	ldr	r3, [sp, #20]
 800deba:	2200      	movs	r2, #0
 800debc:	eba3 0308 	sub.w	r3, r3, r8
 800dec0:	9305      	str	r3, [sp, #20]
 800dec2:	920a      	str	r2, [sp, #40]	@ 0x28
 800dec4:	f1c8 0300 	rsb	r3, r8, #0
 800dec8:	e7e3      	b.n	800de92 <_dtoa_r+0x1d2>
 800deca:	2200      	movs	r2, #0
 800decc:	9208      	str	r2, [sp, #32]
 800dece:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ded0:	2a00      	cmp	r2, #0
 800ded2:	dc39      	bgt.n	800df48 <_dtoa_r+0x288>
 800ded4:	f04f 0b01 	mov.w	fp, #1
 800ded8:	46da      	mov	sl, fp
 800deda:	465a      	mov	r2, fp
 800dedc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800dee0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800dee4:	2100      	movs	r1, #0
 800dee6:	2004      	movs	r0, #4
 800dee8:	f100 0614 	add.w	r6, r0, #20
 800deec:	4296      	cmp	r6, r2
 800deee:	d930      	bls.n	800df52 <_dtoa_r+0x292>
 800def0:	6079      	str	r1, [r7, #4]
 800def2:	4648      	mov	r0, r9
 800def4:	9304      	str	r3, [sp, #16]
 800def6:	f000 fd39 	bl	800e96c <_Balloc>
 800defa:	9b04      	ldr	r3, [sp, #16]
 800defc:	4607      	mov	r7, r0
 800defe:	2800      	cmp	r0, #0
 800df00:	d146      	bne.n	800df90 <_dtoa_r+0x2d0>
 800df02:	4b22      	ldr	r3, [pc, #136]	@ (800df8c <_dtoa_r+0x2cc>)
 800df04:	4602      	mov	r2, r0
 800df06:	f240 11af 	movw	r1, #431	@ 0x1af
 800df0a:	e6f2      	b.n	800dcf2 <_dtoa_r+0x32>
 800df0c:	2201      	movs	r2, #1
 800df0e:	e7dd      	b.n	800decc <_dtoa_r+0x20c>
 800df10:	2200      	movs	r2, #0
 800df12:	9208      	str	r2, [sp, #32]
 800df14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df16:	eb08 0b02 	add.w	fp, r8, r2
 800df1a:	f10b 0a01 	add.w	sl, fp, #1
 800df1e:	4652      	mov	r2, sl
 800df20:	2a01      	cmp	r2, #1
 800df22:	bfb8      	it	lt
 800df24:	2201      	movlt	r2, #1
 800df26:	e7db      	b.n	800dee0 <_dtoa_r+0x220>
 800df28:	2201      	movs	r2, #1
 800df2a:	e7f2      	b.n	800df12 <_dtoa_r+0x252>
 800df2c:	2401      	movs	r4, #1
 800df2e:	2200      	movs	r2, #0
 800df30:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800df34:	f04f 3bff 	mov.w	fp, #4294967295
 800df38:	2100      	movs	r1, #0
 800df3a:	46da      	mov	sl, fp
 800df3c:	2212      	movs	r2, #18
 800df3e:	9109      	str	r1, [sp, #36]	@ 0x24
 800df40:	e7ce      	b.n	800dee0 <_dtoa_r+0x220>
 800df42:	2201      	movs	r2, #1
 800df44:	9208      	str	r2, [sp, #32]
 800df46:	e7f5      	b.n	800df34 <_dtoa_r+0x274>
 800df48:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800df4c:	46da      	mov	sl, fp
 800df4e:	465a      	mov	r2, fp
 800df50:	e7c6      	b.n	800dee0 <_dtoa_r+0x220>
 800df52:	3101      	adds	r1, #1
 800df54:	0040      	lsls	r0, r0, #1
 800df56:	e7c7      	b.n	800dee8 <_dtoa_r+0x228>
 800df58:	636f4361 	.word	0x636f4361
 800df5c:	3fd287a7 	.word	0x3fd287a7
 800df60:	8b60c8b3 	.word	0x8b60c8b3
 800df64:	3fc68a28 	.word	0x3fc68a28
 800df68:	509f79fb 	.word	0x509f79fb
 800df6c:	3fd34413 	.word	0x3fd34413
 800df70:	08010441 	.word	0x08010441
 800df74:	08010458 	.word	0x08010458
 800df78:	7ff00000 	.word	0x7ff00000
 800df7c:	0801043d 	.word	0x0801043d
 800df80:	08010411 	.word	0x08010411
 800df84:	08010410 	.word	0x08010410
 800df88:	08010550 	.word	0x08010550
 800df8c:	080104b0 	.word	0x080104b0
 800df90:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800df94:	f1ba 0f0e 	cmp.w	sl, #14
 800df98:	6010      	str	r0, [r2, #0]
 800df9a:	d86f      	bhi.n	800e07c <_dtoa_r+0x3bc>
 800df9c:	2c00      	cmp	r4, #0
 800df9e:	d06d      	beq.n	800e07c <_dtoa_r+0x3bc>
 800dfa0:	f1b8 0f00 	cmp.w	r8, #0
 800dfa4:	f340 80c2 	ble.w	800e12c <_dtoa_r+0x46c>
 800dfa8:	4aca      	ldr	r2, [pc, #808]	@ (800e2d4 <_dtoa_r+0x614>)
 800dfaa:	f008 010f 	and.w	r1, r8, #15
 800dfae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800dfb2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800dfb6:	ed92 7b00 	vldr	d7, [r2]
 800dfba:	ea4f 1128 	mov.w	r1, r8, asr #4
 800dfbe:	f000 80a9 	beq.w	800e114 <_dtoa_r+0x454>
 800dfc2:	4ac5      	ldr	r2, [pc, #788]	@ (800e2d8 <_dtoa_r+0x618>)
 800dfc4:	ed92 6b08 	vldr	d6, [r2, #32]
 800dfc8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800dfcc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800dfd0:	f001 010f 	and.w	r1, r1, #15
 800dfd4:	2203      	movs	r2, #3
 800dfd6:	48c0      	ldr	r0, [pc, #768]	@ (800e2d8 <_dtoa_r+0x618>)
 800dfd8:	2900      	cmp	r1, #0
 800dfda:	f040 809d 	bne.w	800e118 <_dtoa_r+0x458>
 800dfde:	ed9d 6b02 	vldr	d6, [sp, #8]
 800dfe2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800dfe6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dfea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800dfec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dff0:	2900      	cmp	r1, #0
 800dff2:	f000 80c1 	beq.w	800e178 <_dtoa_r+0x4b8>
 800dff6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800dffa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e002:	f140 80b9 	bpl.w	800e178 <_dtoa_r+0x4b8>
 800e006:	f1ba 0f00 	cmp.w	sl, #0
 800e00a:	f000 80b5 	beq.w	800e178 <_dtoa_r+0x4b8>
 800e00e:	f1bb 0f00 	cmp.w	fp, #0
 800e012:	dd31      	ble.n	800e078 <_dtoa_r+0x3b8>
 800e014:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800e018:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e01c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e020:	f108 31ff 	add.w	r1, r8, #4294967295
 800e024:	9104      	str	r1, [sp, #16]
 800e026:	3201      	adds	r2, #1
 800e028:	465c      	mov	r4, fp
 800e02a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e02e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800e032:	ee07 2a90 	vmov	s15, r2
 800e036:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e03a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e03e:	ee15 2a90 	vmov	r2, s11
 800e042:	ec51 0b15 	vmov	r0, r1, d5
 800e046:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800e04a:	2c00      	cmp	r4, #0
 800e04c:	f040 8098 	bne.w	800e180 <_dtoa_r+0x4c0>
 800e050:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800e054:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e058:	ec41 0b17 	vmov	d7, r0, r1
 800e05c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e064:	f300 8261 	bgt.w	800e52a <_dtoa_r+0x86a>
 800e068:	eeb1 7b47 	vneg.f64	d7, d7
 800e06c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e074:	f100 80f5 	bmi.w	800e262 <_dtoa_r+0x5a2>
 800e078:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e07c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e07e:	2a00      	cmp	r2, #0
 800e080:	f2c0 812c 	blt.w	800e2dc <_dtoa_r+0x61c>
 800e084:	f1b8 0f0e 	cmp.w	r8, #14
 800e088:	f300 8128 	bgt.w	800e2dc <_dtoa_r+0x61c>
 800e08c:	4b91      	ldr	r3, [pc, #580]	@ (800e2d4 <_dtoa_r+0x614>)
 800e08e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e092:	ed93 6b00 	vldr	d6, [r3]
 800e096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e098:	2b00      	cmp	r3, #0
 800e09a:	da03      	bge.n	800e0a4 <_dtoa_r+0x3e4>
 800e09c:	f1ba 0f00 	cmp.w	sl, #0
 800e0a0:	f340 80d2 	ble.w	800e248 <_dtoa_r+0x588>
 800e0a4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800e0a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e0ac:	463e      	mov	r6, r7
 800e0ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e0b2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e0b6:	ee15 3a10 	vmov	r3, s10
 800e0ba:	3330      	adds	r3, #48	@ 0x30
 800e0bc:	f806 3b01 	strb.w	r3, [r6], #1
 800e0c0:	1bf3      	subs	r3, r6, r7
 800e0c2:	459a      	cmp	sl, r3
 800e0c4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e0c8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e0cc:	f040 80f8 	bne.w	800e2c0 <_dtoa_r+0x600>
 800e0d0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e0d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e0d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0dc:	f300 80dd 	bgt.w	800e29a <_dtoa_r+0x5da>
 800e0e0:	eeb4 7b46 	vcmp.f64	d7, d6
 800e0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0e8:	d104      	bne.n	800e0f4 <_dtoa_r+0x434>
 800e0ea:	ee15 3a10 	vmov	r3, s10
 800e0ee:	07db      	lsls	r3, r3, #31
 800e0f0:	f100 80d3 	bmi.w	800e29a <_dtoa_r+0x5da>
 800e0f4:	9901      	ldr	r1, [sp, #4]
 800e0f6:	4648      	mov	r0, r9
 800e0f8:	f000 fc78 	bl	800e9ec <_Bfree>
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e100:	7033      	strb	r3, [r6, #0]
 800e102:	f108 0301 	add.w	r3, r8, #1
 800e106:	6013      	str	r3, [r2, #0]
 800e108:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	f000 8304 	beq.w	800e718 <_dtoa_r+0xa58>
 800e110:	601e      	str	r6, [r3, #0]
 800e112:	e301      	b.n	800e718 <_dtoa_r+0xa58>
 800e114:	2202      	movs	r2, #2
 800e116:	e75e      	b.n	800dfd6 <_dtoa_r+0x316>
 800e118:	07cc      	lsls	r4, r1, #31
 800e11a:	d504      	bpl.n	800e126 <_dtoa_r+0x466>
 800e11c:	ed90 6b00 	vldr	d6, [r0]
 800e120:	3201      	adds	r2, #1
 800e122:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e126:	1049      	asrs	r1, r1, #1
 800e128:	3008      	adds	r0, #8
 800e12a:	e755      	b.n	800dfd8 <_dtoa_r+0x318>
 800e12c:	d022      	beq.n	800e174 <_dtoa_r+0x4b4>
 800e12e:	f1c8 0100 	rsb	r1, r8, #0
 800e132:	4a68      	ldr	r2, [pc, #416]	@ (800e2d4 <_dtoa_r+0x614>)
 800e134:	f001 000f 	and.w	r0, r1, #15
 800e138:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e13c:	ed92 7b00 	vldr	d7, [r2]
 800e140:	ee28 7b07 	vmul.f64	d7, d8, d7
 800e144:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e148:	4863      	ldr	r0, [pc, #396]	@ (800e2d8 <_dtoa_r+0x618>)
 800e14a:	1109      	asrs	r1, r1, #4
 800e14c:	2400      	movs	r4, #0
 800e14e:	2202      	movs	r2, #2
 800e150:	b929      	cbnz	r1, 800e15e <_dtoa_r+0x49e>
 800e152:	2c00      	cmp	r4, #0
 800e154:	f43f af49 	beq.w	800dfea <_dtoa_r+0x32a>
 800e158:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e15c:	e745      	b.n	800dfea <_dtoa_r+0x32a>
 800e15e:	07ce      	lsls	r6, r1, #31
 800e160:	d505      	bpl.n	800e16e <_dtoa_r+0x4ae>
 800e162:	ed90 6b00 	vldr	d6, [r0]
 800e166:	3201      	adds	r2, #1
 800e168:	2401      	movs	r4, #1
 800e16a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e16e:	1049      	asrs	r1, r1, #1
 800e170:	3008      	adds	r0, #8
 800e172:	e7ed      	b.n	800e150 <_dtoa_r+0x490>
 800e174:	2202      	movs	r2, #2
 800e176:	e738      	b.n	800dfea <_dtoa_r+0x32a>
 800e178:	f8cd 8010 	str.w	r8, [sp, #16]
 800e17c:	4654      	mov	r4, sl
 800e17e:	e754      	b.n	800e02a <_dtoa_r+0x36a>
 800e180:	4a54      	ldr	r2, [pc, #336]	@ (800e2d4 <_dtoa_r+0x614>)
 800e182:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800e186:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e18a:	9a08      	ldr	r2, [sp, #32]
 800e18c:	ec41 0b17 	vmov	d7, r0, r1
 800e190:	443c      	add	r4, r7
 800e192:	b34a      	cbz	r2, 800e1e8 <_dtoa_r+0x528>
 800e194:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800e198:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800e19c:	463e      	mov	r6, r7
 800e19e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e1a2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800e1a6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e1aa:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e1ae:	ee14 2a90 	vmov	r2, s9
 800e1b2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e1b6:	3230      	adds	r2, #48	@ 0x30
 800e1b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e1bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e1c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1c4:	f806 2b01 	strb.w	r2, [r6], #1
 800e1c8:	d438      	bmi.n	800e23c <_dtoa_r+0x57c>
 800e1ca:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e1ce:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1d6:	d462      	bmi.n	800e29e <_dtoa_r+0x5de>
 800e1d8:	42a6      	cmp	r6, r4
 800e1da:	f43f af4d 	beq.w	800e078 <_dtoa_r+0x3b8>
 800e1de:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e1e2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e1e6:	e7e0      	b.n	800e1aa <_dtoa_r+0x4ea>
 800e1e8:	4621      	mov	r1, r4
 800e1ea:	463e      	mov	r6, r7
 800e1ec:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e1f0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800e1f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e1f8:	ee14 2a90 	vmov	r2, s9
 800e1fc:	3230      	adds	r2, #48	@ 0x30
 800e1fe:	f806 2b01 	strb.w	r2, [r6], #1
 800e202:	42a6      	cmp	r6, r4
 800e204:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e208:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e20c:	d119      	bne.n	800e242 <_dtoa_r+0x582>
 800e20e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800e212:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e216:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e21e:	dc3e      	bgt.n	800e29e <_dtoa_r+0x5de>
 800e220:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e224:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800e228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e22c:	f57f af24 	bpl.w	800e078 <_dtoa_r+0x3b8>
 800e230:	460e      	mov	r6, r1
 800e232:	3901      	subs	r1, #1
 800e234:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e238:	2b30      	cmp	r3, #48	@ 0x30
 800e23a:	d0f9      	beq.n	800e230 <_dtoa_r+0x570>
 800e23c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e240:	e758      	b.n	800e0f4 <_dtoa_r+0x434>
 800e242:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e246:	e7d5      	b.n	800e1f4 <_dtoa_r+0x534>
 800e248:	d10b      	bne.n	800e262 <_dtoa_r+0x5a2>
 800e24a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800e24e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e252:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e256:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e25e:	f2c0 8161 	blt.w	800e524 <_dtoa_r+0x864>
 800e262:	2400      	movs	r4, #0
 800e264:	4625      	mov	r5, r4
 800e266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e268:	43db      	mvns	r3, r3
 800e26a:	9304      	str	r3, [sp, #16]
 800e26c:	463e      	mov	r6, r7
 800e26e:	f04f 0800 	mov.w	r8, #0
 800e272:	4621      	mov	r1, r4
 800e274:	4648      	mov	r0, r9
 800e276:	f000 fbb9 	bl	800e9ec <_Bfree>
 800e27a:	2d00      	cmp	r5, #0
 800e27c:	d0de      	beq.n	800e23c <_dtoa_r+0x57c>
 800e27e:	f1b8 0f00 	cmp.w	r8, #0
 800e282:	d005      	beq.n	800e290 <_dtoa_r+0x5d0>
 800e284:	45a8      	cmp	r8, r5
 800e286:	d003      	beq.n	800e290 <_dtoa_r+0x5d0>
 800e288:	4641      	mov	r1, r8
 800e28a:	4648      	mov	r0, r9
 800e28c:	f000 fbae 	bl	800e9ec <_Bfree>
 800e290:	4629      	mov	r1, r5
 800e292:	4648      	mov	r0, r9
 800e294:	f000 fbaa 	bl	800e9ec <_Bfree>
 800e298:	e7d0      	b.n	800e23c <_dtoa_r+0x57c>
 800e29a:	f8cd 8010 	str.w	r8, [sp, #16]
 800e29e:	4633      	mov	r3, r6
 800e2a0:	461e      	mov	r6, r3
 800e2a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e2a6:	2a39      	cmp	r2, #57	@ 0x39
 800e2a8:	d106      	bne.n	800e2b8 <_dtoa_r+0x5f8>
 800e2aa:	429f      	cmp	r7, r3
 800e2ac:	d1f8      	bne.n	800e2a0 <_dtoa_r+0x5e0>
 800e2ae:	9a04      	ldr	r2, [sp, #16]
 800e2b0:	3201      	adds	r2, #1
 800e2b2:	9204      	str	r2, [sp, #16]
 800e2b4:	2230      	movs	r2, #48	@ 0x30
 800e2b6:	703a      	strb	r2, [r7, #0]
 800e2b8:	781a      	ldrb	r2, [r3, #0]
 800e2ba:	3201      	adds	r2, #1
 800e2bc:	701a      	strb	r2, [r3, #0]
 800e2be:	e7bd      	b.n	800e23c <_dtoa_r+0x57c>
 800e2c0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e2c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e2c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2cc:	f47f aeef 	bne.w	800e0ae <_dtoa_r+0x3ee>
 800e2d0:	e710      	b.n	800e0f4 <_dtoa_r+0x434>
 800e2d2:	bf00      	nop
 800e2d4:	08010550 	.word	0x08010550
 800e2d8:	08010528 	.word	0x08010528
 800e2dc:	9908      	ldr	r1, [sp, #32]
 800e2de:	2900      	cmp	r1, #0
 800e2e0:	f000 80e3 	beq.w	800e4aa <_dtoa_r+0x7ea>
 800e2e4:	9907      	ldr	r1, [sp, #28]
 800e2e6:	2901      	cmp	r1, #1
 800e2e8:	f300 80c8 	bgt.w	800e47c <_dtoa_r+0x7bc>
 800e2ec:	2d00      	cmp	r5, #0
 800e2ee:	f000 80c1 	beq.w	800e474 <_dtoa_r+0x7b4>
 800e2f2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e2f6:	9e05      	ldr	r6, [sp, #20]
 800e2f8:	461c      	mov	r4, r3
 800e2fa:	9304      	str	r3, [sp, #16]
 800e2fc:	9b05      	ldr	r3, [sp, #20]
 800e2fe:	4413      	add	r3, r2
 800e300:	9305      	str	r3, [sp, #20]
 800e302:	9b06      	ldr	r3, [sp, #24]
 800e304:	2101      	movs	r1, #1
 800e306:	4413      	add	r3, r2
 800e308:	4648      	mov	r0, r9
 800e30a:	9306      	str	r3, [sp, #24]
 800e30c:	f000 fc22 	bl	800eb54 <__i2b>
 800e310:	9b04      	ldr	r3, [sp, #16]
 800e312:	4605      	mov	r5, r0
 800e314:	b166      	cbz	r6, 800e330 <_dtoa_r+0x670>
 800e316:	9a06      	ldr	r2, [sp, #24]
 800e318:	2a00      	cmp	r2, #0
 800e31a:	dd09      	ble.n	800e330 <_dtoa_r+0x670>
 800e31c:	42b2      	cmp	r2, r6
 800e31e:	9905      	ldr	r1, [sp, #20]
 800e320:	bfa8      	it	ge
 800e322:	4632      	movge	r2, r6
 800e324:	1a89      	subs	r1, r1, r2
 800e326:	9105      	str	r1, [sp, #20]
 800e328:	9906      	ldr	r1, [sp, #24]
 800e32a:	1ab6      	subs	r6, r6, r2
 800e32c:	1a8a      	subs	r2, r1, r2
 800e32e:	9206      	str	r2, [sp, #24]
 800e330:	b1fb      	cbz	r3, 800e372 <_dtoa_r+0x6b2>
 800e332:	9a08      	ldr	r2, [sp, #32]
 800e334:	2a00      	cmp	r2, #0
 800e336:	f000 80bc 	beq.w	800e4b2 <_dtoa_r+0x7f2>
 800e33a:	b19c      	cbz	r4, 800e364 <_dtoa_r+0x6a4>
 800e33c:	4629      	mov	r1, r5
 800e33e:	4622      	mov	r2, r4
 800e340:	4648      	mov	r0, r9
 800e342:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e344:	f000 fcc6 	bl	800ecd4 <__pow5mult>
 800e348:	9a01      	ldr	r2, [sp, #4]
 800e34a:	4601      	mov	r1, r0
 800e34c:	4605      	mov	r5, r0
 800e34e:	4648      	mov	r0, r9
 800e350:	f000 fc16 	bl	800eb80 <__multiply>
 800e354:	9901      	ldr	r1, [sp, #4]
 800e356:	9004      	str	r0, [sp, #16]
 800e358:	4648      	mov	r0, r9
 800e35a:	f000 fb47 	bl	800e9ec <_Bfree>
 800e35e:	9a04      	ldr	r2, [sp, #16]
 800e360:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e362:	9201      	str	r2, [sp, #4]
 800e364:	1b1a      	subs	r2, r3, r4
 800e366:	d004      	beq.n	800e372 <_dtoa_r+0x6b2>
 800e368:	9901      	ldr	r1, [sp, #4]
 800e36a:	4648      	mov	r0, r9
 800e36c:	f000 fcb2 	bl	800ecd4 <__pow5mult>
 800e370:	9001      	str	r0, [sp, #4]
 800e372:	2101      	movs	r1, #1
 800e374:	4648      	mov	r0, r9
 800e376:	f000 fbed 	bl	800eb54 <__i2b>
 800e37a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e37c:	4604      	mov	r4, r0
 800e37e:	2b00      	cmp	r3, #0
 800e380:	f000 81d0 	beq.w	800e724 <_dtoa_r+0xa64>
 800e384:	461a      	mov	r2, r3
 800e386:	4601      	mov	r1, r0
 800e388:	4648      	mov	r0, r9
 800e38a:	f000 fca3 	bl	800ecd4 <__pow5mult>
 800e38e:	9b07      	ldr	r3, [sp, #28]
 800e390:	2b01      	cmp	r3, #1
 800e392:	4604      	mov	r4, r0
 800e394:	f300 8095 	bgt.w	800e4c2 <_dtoa_r+0x802>
 800e398:	9b02      	ldr	r3, [sp, #8]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	f040 808b 	bne.w	800e4b6 <_dtoa_r+0x7f6>
 800e3a0:	9b03      	ldr	r3, [sp, #12]
 800e3a2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e3a6:	2a00      	cmp	r2, #0
 800e3a8:	f040 8087 	bne.w	800e4ba <_dtoa_r+0x7fa>
 800e3ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800e3b0:	0d12      	lsrs	r2, r2, #20
 800e3b2:	0512      	lsls	r2, r2, #20
 800e3b4:	2a00      	cmp	r2, #0
 800e3b6:	f000 8082 	beq.w	800e4be <_dtoa_r+0x7fe>
 800e3ba:	9b05      	ldr	r3, [sp, #20]
 800e3bc:	3301      	adds	r3, #1
 800e3be:	9305      	str	r3, [sp, #20]
 800e3c0:	9b06      	ldr	r3, [sp, #24]
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	9306      	str	r3, [sp, #24]
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	f000 81af 	beq.w	800e730 <_dtoa_r+0xa70>
 800e3d2:	6922      	ldr	r2, [r4, #16]
 800e3d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e3d8:	6910      	ldr	r0, [r2, #16]
 800e3da:	f000 fb6f 	bl	800eabc <__hi0bits>
 800e3de:	f1c0 0020 	rsb	r0, r0, #32
 800e3e2:	9b06      	ldr	r3, [sp, #24]
 800e3e4:	4418      	add	r0, r3
 800e3e6:	f010 001f 	ands.w	r0, r0, #31
 800e3ea:	d076      	beq.n	800e4da <_dtoa_r+0x81a>
 800e3ec:	f1c0 0220 	rsb	r2, r0, #32
 800e3f0:	2a04      	cmp	r2, #4
 800e3f2:	dd69      	ble.n	800e4c8 <_dtoa_r+0x808>
 800e3f4:	9b05      	ldr	r3, [sp, #20]
 800e3f6:	f1c0 001c 	rsb	r0, r0, #28
 800e3fa:	4403      	add	r3, r0
 800e3fc:	9305      	str	r3, [sp, #20]
 800e3fe:	9b06      	ldr	r3, [sp, #24]
 800e400:	4406      	add	r6, r0
 800e402:	4403      	add	r3, r0
 800e404:	9306      	str	r3, [sp, #24]
 800e406:	9b05      	ldr	r3, [sp, #20]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	dd05      	ble.n	800e418 <_dtoa_r+0x758>
 800e40c:	9901      	ldr	r1, [sp, #4]
 800e40e:	461a      	mov	r2, r3
 800e410:	4648      	mov	r0, r9
 800e412:	f000 fcb9 	bl	800ed88 <__lshift>
 800e416:	9001      	str	r0, [sp, #4]
 800e418:	9b06      	ldr	r3, [sp, #24]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	dd05      	ble.n	800e42a <_dtoa_r+0x76a>
 800e41e:	4621      	mov	r1, r4
 800e420:	461a      	mov	r2, r3
 800e422:	4648      	mov	r0, r9
 800e424:	f000 fcb0 	bl	800ed88 <__lshift>
 800e428:	4604      	mov	r4, r0
 800e42a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d056      	beq.n	800e4de <_dtoa_r+0x81e>
 800e430:	9801      	ldr	r0, [sp, #4]
 800e432:	4621      	mov	r1, r4
 800e434:	f000 fd14 	bl	800ee60 <__mcmp>
 800e438:	2800      	cmp	r0, #0
 800e43a:	da50      	bge.n	800e4de <_dtoa_r+0x81e>
 800e43c:	f108 33ff 	add.w	r3, r8, #4294967295
 800e440:	9304      	str	r3, [sp, #16]
 800e442:	9901      	ldr	r1, [sp, #4]
 800e444:	2300      	movs	r3, #0
 800e446:	220a      	movs	r2, #10
 800e448:	4648      	mov	r0, r9
 800e44a:	f000 faf1 	bl	800ea30 <__multadd>
 800e44e:	9b08      	ldr	r3, [sp, #32]
 800e450:	9001      	str	r0, [sp, #4]
 800e452:	2b00      	cmp	r3, #0
 800e454:	f000 816e 	beq.w	800e734 <_dtoa_r+0xa74>
 800e458:	4629      	mov	r1, r5
 800e45a:	2300      	movs	r3, #0
 800e45c:	220a      	movs	r2, #10
 800e45e:	4648      	mov	r0, r9
 800e460:	f000 fae6 	bl	800ea30 <__multadd>
 800e464:	f1bb 0f00 	cmp.w	fp, #0
 800e468:	4605      	mov	r5, r0
 800e46a:	dc64      	bgt.n	800e536 <_dtoa_r+0x876>
 800e46c:	9b07      	ldr	r3, [sp, #28]
 800e46e:	2b02      	cmp	r3, #2
 800e470:	dc3e      	bgt.n	800e4f0 <_dtoa_r+0x830>
 800e472:	e060      	b.n	800e536 <_dtoa_r+0x876>
 800e474:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e476:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e47a:	e73c      	b.n	800e2f6 <_dtoa_r+0x636>
 800e47c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800e480:	42a3      	cmp	r3, r4
 800e482:	bfbf      	itttt	lt
 800e484:	1ae2      	sublt	r2, r4, r3
 800e486:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e488:	189b      	addlt	r3, r3, r2
 800e48a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800e48c:	bfae      	itee	ge
 800e48e:	1b1c      	subge	r4, r3, r4
 800e490:	4623      	movlt	r3, r4
 800e492:	2400      	movlt	r4, #0
 800e494:	f1ba 0f00 	cmp.w	sl, #0
 800e498:	bfb5      	itete	lt
 800e49a:	9a05      	ldrlt	r2, [sp, #20]
 800e49c:	9e05      	ldrge	r6, [sp, #20]
 800e49e:	eba2 060a 	sublt.w	r6, r2, sl
 800e4a2:	4652      	movge	r2, sl
 800e4a4:	bfb8      	it	lt
 800e4a6:	2200      	movlt	r2, #0
 800e4a8:	e727      	b.n	800e2fa <_dtoa_r+0x63a>
 800e4aa:	9e05      	ldr	r6, [sp, #20]
 800e4ac:	9d08      	ldr	r5, [sp, #32]
 800e4ae:	461c      	mov	r4, r3
 800e4b0:	e730      	b.n	800e314 <_dtoa_r+0x654>
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	e758      	b.n	800e368 <_dtoa_r+0x6a8>
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	e786      	b.n	800e3c8 <_dtoa_r+0x708>
 800e4ba:	9b02      	ldr	r3, [sp, #8]
 800e4bc:	e784      	b.n	800e3c8 <_dtoa_r+0x708>
 800e4be:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e4c0:	e783      	b.n	800e3ca <_dtoa_r+0x70a>
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e4c6:	e784      	b.n	800e3d2 <_dtoa_r+0x712>
 800e4c8:	d09d      	beq.n	800e406 <_dtoa_r+0x746>
 800e4ca:	9b05      	ldr	r3, [sp, #20]
 800e4cc:	321c      	adds	r2, #28
 800e4ce:	4413      	add	r3, r2
 800e4d0:	9305      	str	r3, [sp, #20]
 800e4d2:	9b06      	ldr	r3, [sp, #24]
 800e4d4:	4416      	add	r6, r2
 800e4d6:	4413      	add	r3, r2
 800e4d8:	e794      	b.n	800e404 <_dtoa_r+0x744>
 800e4da:	4602      	mov	r2, r0
 800e4dc:	e7f5      	b.n	800e4ca <_dtoa_r+0x80a>
 800e4de:	f1ba 0f00 	cmp.w	sl, #0
 800e4e2:	f8cd 8010 	str.w	r8, [sp, #16]
 800e4e6:	46d3      	mov	fp, sl
 800e4e8:	dc21      	bgt.n	800e52e <_dtoa_r+0x86e>
 800e4ea:	9b07      	ldr	r3, [sp, #28]
 800e4ec:	2b02      	cmp	r3, #2
 800e4ee:	dd1e      	ble.n	800e52e <_dtoa_r+0x86e>
 800e4f0:	f1bb 0f00 	cmp.w	fp, #0
 800e4f4:	f47f aeb7 	bne.w	800e266 <_dtoa_r+0x5a6>
 800e4f8:	4621      	mov	r1, r4
 800e4fa:	465b      	mov	r3, fp
 800e4fc:	2205      	movs	r2, #5
 800e4fe:	4648      	mov	r0, r9
 800e500:	f000 fa96 	bl	800ea30 <__multadd>
 800e504:	4601      	mov	r1, r0
 800e506:	4604      	mov	r4, r0
 800e508:	9801      	ldr	r0, [sp, #4]
 800e50a:	f000 fca9 	bl	800ee60 <__mcmp>
 800e50e:	2800      	cmp	r0, #0
 800e510:	f77f aea9 	ble.w	800e266 <_dtoa_r+0x5a6>
 800e514:	463e      	mov	r6, r7
 800e516:	2331      	movs	r3, #49	@ 0x31
 800e518:	f806 3b01 	strb.w	r3, [r6], #1
 800e51c:	9b04      	ldr	r3, [sp, #16]
 800e51e:	3301      	adds	r3, #1
 800e520:	9304      	str	r3, [sp, #16]
 800e522:	e6a4      	b.n	800e26e <_dtoa_r+0x5ae>
 800e524:	f8cd 8010 	str.w	r8, [sp, #16]
 800e528:	4654      	mov	r4, sl
 800e52a:	4625      	mov	r5, r4
 800e52c:	e7f2      	b.n	800e514 <_dtoa_r+0x854>
 800e52e:	9b08      	ldr	r3, [sp, #32]
 800e530:	2b00      	cmp	r3, #0
 800e532:	f000 8103 	beq.w	800e73c <_dtoa_r+0xa7c>
 800e536:	2e00      	cmp	r6, #0
 800e538:	dd05      	ble.n	800e546 <_dtoa_r+0x886>
 800e53a:	4629      	mov	r1, r5
 800e53c:	4632      	mov	r2, r6
 800e53e:	4648      	mov	r0, r9
 800e540:	f000 fc22 	bl	800ed88 <__lshift>
 800e544:	4605      	mov	r5, r0
 800e546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d058      	beq.n	800e5fe <_dtoa_r+0x93e>
 800e54c:	6869      	ldr	r1, [r5, #4]
 800e54e:	4648      	mov	r0, r9
 800e550:	f000 fa0c 	bl	800e96c <_Balloc>
 800e554:	4606      	mov	r6, r0
 800e556:	b928      	cbnz	r0, 800e564 <_dtoa_r+0x8a4>
 800e558:	4b82      	ldr	r3, [pc, #520]	@ (800e764 <_dtoa_r+0xaa4>)
 800e55a:	4602      	mov	r2, r0
 800e55c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e560:	f7ff bbc7 	b.w	800dcf2 <_dtoa_r+0x32>
 800e564:	692a      	ldr	r2, [r5, #16]
 800e566:	3202      	adds	r2, #2
 800e568:	0092      	lsls	r2, r2, #2
 800e56a:	f105 010c 	add.w	r1, r5, #12
 800e56e:	300c      	adds	r0, #12
 800e570:	f000 fe3a 	bl	800f1e8 <memcpy>
 800e574:	2201      	movs	r2, #1
 800e576:	4631      	mov	r1, r6
 800e578:	4648      	mov	r0, r9
 800e57a:	f000 fc05 	bl	800ed88 <__lshift>
 800e57e:	1c7b      	adds	r3, r7, #1
 800e580:	9305      	str	r3, [sp, #20]
 800e582:	eb07 030b 	add.w	r3, r7, fp
 800e586:	9309      	str	r3, [sp, #36]	@ 0x24
 800e588:	9b02      	ldr	r3, [sp, #8]
 800e58a:	f003 0301 	and.w	r3, r3, #1
 800e58e:	46a8      	mov	r8, r5
 800e590:	9308      	str	r3, [sp, #32]
 800e592:	4605      	mov	r5, r0
 800e594:	9b05      	ldr	r3, [sp, #20]
 800e596:	9801      	ldr	r0, [sp, #4]
 800e598:	4621      	mov	r1, r4
 800e59a:	f103 3bff 	add.w	fp, r3, #4294967295
 800e59e:	f7ff fb04 	bl	800dbaa <quorem>
 800e5a2:	4641      	mov	r1, r8
 800e5a4:	9002      	str	r0, [sp, #8]
 800e5a6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800e5aa:	9801      	ldr	r0, [sp, #4]
 800e5ac:	f000 fc58 	bl	800ee60 <__mcmp>
 800e5b0:	462a      	mov	r2, r5
 800e5b2:	9006      	str	r0, [sp, #24]
 800e5b4:	4621      	mov	r1, r4
 800e5b6:	4648      	mov	r0, r9
 800e5b8:	f000 fc6e 	bl	800ee98 <__mdiff>
 800e5bc:	68c2      	ldr	r2, [r0, #12]
 800e5be:	4606      	mov	r6, r0
 800e5c0:	b9fa      	cbnz	r2, 800e602 <_dtoa_r+0x942>
 800e5c2:	4601      	mov	r1, r0
 800e5c4:	9801      	ldr	r0, [sp, #4]
 800e5c6:	f000 fc4b 	bl	800ee60 <__mcmp>
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	4631      	mov	r1, r6
 800e5ce:	4648      	mov	r0, r9
 800e5d0:	920a      	str	r2, [sp, #40]	@ 0x28
 800e5d2:	f000 fa0b 	bl	800e9ec <_Bfree>
 800e5d6:	9b07      	ldr	r3, [sp, #28]
 800e5d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e5da:	9e05      	ldr	r6, [sp, #20]
 800e5dc:	ea43 0102 	orr.w	r1, r3, r2
 800e5e0:	9b08      	ldr	r3, [sp, #32]
 800e5e2:	4319      	orrs	r1, r3
 800e5e4:	d10f      	bne.n	800e606 <_dtoa_r+0x946>
 800e5e6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800e5ea:	d028      	beq.n	800e63e <_dtoa_r+0x97e>
 800e5ec:	9b06      	ldr	r3, [sp, #24]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	dd02      	ble.n	800e5f8 <_dtoa_r+0x938>
 800e5f2:	9b02      	ldr	r3, [sp, #8]
 800e5f4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800e5f8:	f88b a000 	strb.w	sl, [fp]
 800e5fc:	e639      	b.n	800e272 <_dtoa_r+0x5b2>
 800e5fe:	4628      	mov	r0, r5
 800e600:	e7bd      	b.n	800e57e <_dtoa_r+0x8be>
 800e602:	2201      	movs	r2, #1
 800e604:	e7e2      	b.n	800e5cc <_dtoa_r+0x90c>
 800e606:	9b06      	ldr	r3, [sp, #24]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	db04      	blt.n	800e616 <_dtoa_r+0x956>
 800e60c:	9907      	ldr	r1, [sp, #28]
 800e60e:	430b      	orrs	r3, r1
 800e610:	9908      	ldr	r1, [sp, #32]
 800e612:	430b      	orrs	r3, r1
 800e614:	d120      	bne.n	800e658 <_dtoa_r+0x998>
 800e616:	2a00      	cmp	r2, #0
 800e618:	ddee      	ble.n	800e5f8 <_dtoa_r+0x938>
 800e61a:	9901      	ldr	r1, [sp, #4]
 800e61c:	2201      	movs	r2, #1
 800e61e:	4648      	mov	r0, r9
 800e620:	f000 fbb2 	bl	800ed88 <__lshift>
 800e624:	4621      	mov	r1, r4
 800e626:	9001      	str	r0, [sp, #4]
 800e628:	f000 fc1a 	bl	800ee60 <__mcmp>
 800e62c:	2800      	cmp	r0, #0
 800e62e:	dc03      	bgt.n	800e638 <_dtoa_r+0x978>
 800e630:	d1e2      	bne.n	800e5f8 <_dtoa_r+0x938>
 800e632:	f01a 0f01 	tst.w	sl, #1
 800e636:	d0df      	beq.n	800e5f8 <_dtoa_r+0x938>
 800e638:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800e63c:	d1d9      	bne.n	800e5f2 <_dtoa_r+0x932>
 800e63e:	2339      	movs	r3, #57	@ 0x39
 800e640:	f88b 3000 	strb.w	r3, [fp]
 800e644:	4633      	mov	r3, r6
 800e646:	461e      	mov	r6, r3
 800e648:	3b01      	subs	r3, #1
 800e64a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e64e:	2a39      	cmp	r2, #57	@ 0x39
 800e650:	d053      	beq.n	800e6fa <_dtoa_r+0xa3a>
 800e652:	3201      	adds	r2, #1
 800e654:	701a      	strb	r2, [r3, #0]
 800e656:	e60c      	b.n	800e272 <_dtoa_r+0x5b2>
 800e658:	2a00      	cmp	r2, #0
 800e65a:	dd07      	ble.n	800e66c <_dtoa_r+0x9ac>
 800e65c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800e660:	d0ed      	beq.n	800e63e <_dtoa_r+0x97e>
 800e662:	f10a 0301 	add.w	r3, sl, #1
 800e666:	f88b 3000 	strb.w	r3, [fp]
 800e66a:	e602      	b.n	800e272 <_dtoa_r+0x5b2>
 800e66c:	9b05      	ldr	r3, [sp, #20]
 800e66e:	9a05      	ldr	r2, [sp, #20]
 800e670:	f803 ac01 	strb.w	sl, [r3, #-1]
 800e674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e676:	4293      	cmp	r3, r2
 800e678:	d029      	beq.n	800e6ce <_dtoa_r+0xa0e>
 800e67a:	9901      	ldr	r1, [sp, #4]
 800e67c:	2300      	movs	r3, #0
 800e67e:	220a      	movs	r2, #10
 800e680:	4648      	mov	r0, r9
 800e682:	f000 f9d5 	bl	800ea30 <__multadd>
 800e686:	45a8      	cmp	r8, r5
 800e688:	9001      	str	r0, [sp, #4]
 800e68a:	f04f 0300 	mov.w	r3, #0
 800e68e:	f04f 020a 	mov.w	r2, #10
 800e692:	4641      	mov	r1, r8
 800e694:	4648      	mov	r0, r9
 800e696:	d107      	bne.n	800e6a8 <_dtoa_r+0x9e8>
 800e698:	f000 f9ca 	bl	800ea30 <__multadd>
 800e69c:	4680      	mov	r8, r0
 800e69e:	4605      	mov	r5, r0
 800e6a0:	9b05      	ldr	r3, [sp, #20]
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	9305      	str	r3, [sp, #20]
 800e6a6:	e775      	b.n	800e594 <_dtoa_r+0x8d4>
 800e6a8:	f000 f9c2 	bl	800ea30 <__multadd>
 800e6ac:	4629      	mov	r1, r5
 800e6ae:	4680      	mov	r8, r0
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	220a      	movs	r2, #10
 800e6b4:	4648      	mov	r0, r9
 800e6b6:	f000 f9bb 	bl	800ea30 <__multadd>
 800e6ba:	4605      	mov	r5, r0
 800e6bc:	e7f0      	b.n	800e6a0 <_dtoa_r+0x9e0>
 800e6be:	f1bb 0f00 	cmp.w	fp, #0
 800e6c2:	bfcc      	ite	gt
 800e6c4:	465e      	movgt	r6, fp
 800e6c6:	2601      	movle	r6, #1
 800e6c8:	443e      	add	r6, r7
 800e6ca:	f04f 0800 	mov.w	r8, #0
 800e6ce:	9901      	ldr	r1, [sp, #4]
 800e6d0:	2201      	movs	r2, #1
 800e6d2:	4648      	mov	r0, r9
 800e6d4:	f000 fb58 	bl	800ed88 <__lshift>
 800e6d8:	4621      	mov	r1, r4
 800e6da:	9001      	str	r0, [sp, #4]
 800e6dc:	f000 fbc0 	bl	800ee60 <__mcmp>
 800e6e0:	2800      	cmp	r0, #0
 800e6e2:	dcaf      	bgt.n	800e644 <_dtoa_r+0x984>
 800e6e4:	d102      	bne.n	800e6ec <_dtoa_r+0xa2c>
 800e6e6:	f01a 0f01 	tst.w	sl, #1
 800e6ea:	d1ab      	bne.n	800e644 <_dtoa_r+0x984>
 800e6ec:	4633      	mov	r3, r6
 800e6ee:	461e      	mov	r6, r3
 800e6f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e6f4:	2a30      	cmp	r2, #48	@ 0x30
 800e6f6:	d0fa      	beq.n	800e6ee <_dtoa_r+0xa2e>
 800e6f8:	e5bb      	b.n	800e272 <_dtoa_r+0x5b2>
 800e6fa:	429f      	cmp	r7, r3
 800e6fc:	d1a3      	bne.n	800e646 <_dtoa_r+0x986>
 800e6fe:	9b04      	ldr	r3, [sp, #16]
 800e700:	3301      	adds	r3, #1
 800e702:	9304      	str	r3, [sp, #16]
 800e704:	2331      	movs	r3, #49	@ 0x31
 800e706:	703b      	strb	r3, [r7, #0]
 800e708:	e5b3      	b.n	800e272 <_dtoa_r+0x5b2>
 800e70a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e70c:	4f16      	ldr	r7, [pc, #88]	@ (800e768 <_dtoa_r+0xaa8>)
 800e70e:	b11b      	cbz	r3, 800e718 <_dtoa_r+0xa58>
 800e710:	f107 0308 	add.w	r3, r7, #8
 800e714:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800e716:	6013      	str	r3, [r2, #0]
 800e718:	4638      	mov	r0, r7
 800e71a:	b011      	add	sp, #68	@ 0x44
 800e71c:	ecbd 8b02 	vpop	{d8}
 800e720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e724:	9b07      	ldr	r3, [sp, #28]
 800e726:	2b01      	cmp	r3, #1
 800e728:	f77f ae36 	ble.w	800e398 <_dtoa_r+0x6d8>
 800e72c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e72e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e730:	2001      	movs	r0, #1
 800e732:	e656      	b.n	800e3e2 <_dtoa_r+0x722>
 800e734:	f1bb 0f00 	cmp.w	fp, #0
 800e738:	f77f aed7 	ble.w	800e4ea <_dtoa_r+0x82a>
 800e73c:	463e      	mov	r6, r7
 800e73e:	9801      	ldr	r0, [sp, #4]
 800e740:	4621      	mov	r1, r4
 800e742:	f7ff fa32 	bl	800dbaa <quorem>
 800e746:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800e74a:	f806 ab01 	strb.w	sl, [r6], #1
 800e74e:	1bf2      	subs	r2, r6, r7
 800e750:	4593      	cmp	fp, r2
 800e752:	ddb4      	ble.n	800e6be <_dtoa_r+0x9fe>
 800e754:	9901      	ldr	r1, [sp, #4]
 800e756:	2300      	movs	r3, #0
 800e758:	220a      	movs	r2, #10
 800e75a:	4648      	mov	r0, r9
 800e75c:	f000 f968 	bl	800ea30 <__multadd>
 800e760:	9001      	str	r0, [sp, #4]
 800e762:	e7ec      	b.n	800e73e <_dtoa_r+0xa7e>
 800e764:	080104b0 	.word	0x080104b0
 800e768:	08010434 	.word	0x08010434

0800e76c <_free_r>:
 800e76c:	b538      	push	{r3, r4, r5, lr}
 800e76e:	4605      	mov	r5, r0
 800e770:	2900      	cmp	r1, #0
 800e772:	d041      	beq.n	800e7f8 <_free_r+0x8c>
 800e774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e778:	1f0c      	subs	r4, r1, #4
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	bfb8      	it	lt
 800e77e:	18e4      	addlt	r4, r4, r3
 800e780:	f000 f8e8 	bl	800e954 <__malloc_lock>
 800e784:	4a1d      	ldr	r2, [pc, #116]	@ (800e7fc <_free_r+0x90>)
 800e786:	6813      	ldr	r3, [r2, #0]
 800e788:	b933      	cbnz	r3, 800e798 <_free_r+0x2c>
 800e78a:	6063      	str	r3, [r4, #4]
 800e78c:	6014      	str	r4, [r2, #0]
 800e78e:	4628      	mov	r0, r5
 800e790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e794:	f000 b8e4 	b.w	800e960 <__malloc_unlock>
 800e798:	42a3      	cmp	r3, r4
 800e79a:	d908      	bls.n	800e7ae <_free_r+0x42>
 800e79c:	6820      	ldr	r0, [r4, #0]
 800e79e:	1821      	adds	r1, r4, r0
 800e7a0:	428b      	cmp	r3, r1
 800e7a2:	bf01      	itttt	eq
 800e7a4:	6819      	ldreq	r1, [r3, #0]
 800e7a6:	685b      	ldreq	r3, [r3, #4]
 800e7a8:	1809      	addeq	r1, r1, r0
 800e7aa:	6021      	streq	r1, [r4, #0]
 800e7ac:	e7ed      	b.n	800e78a <_free_r+0x1e>
 800e7ae:	461a      	mov	r2, r3
 800e7b0:	685b      	ldr	r3, [r3, #4]
 800e7b2:	b10b      	cbz	r3, 800e7b8 <_free_r+0x4c>
 800e7b4:	42a3      	cmp	r3, r4
 800e7b6:	d9fa      	bls.n	800e7ae <_free_r+0x42>
 800e7b8:	6811      	ldr	r1, [r2, #0]
 800e7ba:	1850      	adds	r0, r2, r1
 800e7bc:	42a0      	cmp	r0, r4
 800e7be:	d10b      	bne.n	800e7d8 <_free_r+0x6c>
 800e7c0:	6820      	ldr	r0, [r4, #0]
 800e7c2:	4401      	add	r1, r0
 800e7c4:	1850      	adds	r0, r2, r1
 800e7c6:	4283      	cmp	r3, r0
 800e7c8:	6011      	str	r1, [r2, #0]
 800e7ca:	d1e0      	bne.n	800e78e <_free_r+0x22>
 800e7cc:	6818      	ldr	r0, [r3, #0]
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	6053      	str	r3, [r2, #4]
 800e7d2:	4408      	add	r0, r1
 800e7d4:	6010      	str	r0, [r2, #0]
 800e7d6:	e7da      	b.n	800e78e <_free_r+0x22>
 800e7d8:	d902      	bls.n	800e7e0 <_free_r+0x74>
 800e7da:	230c      	movs	r3, #12
 800e7dc:	602b      	str	r3, [r5, #0]
 800e7de:	e7d6      	b.n	800e78e <_free_r+0x22>
 800e7e0:	6820      	ldr	r0, [r4, #0]
 800e7e2:	1821      	adds	r1, r4, r0
 800e7e4:	428b      	cmp	r3, r1
 800e7e6:	bf04      	itt	eq
 800e7e8:	6819      	ldreq	r1, [r3, #0]
 800e7ea:	685b      	ldreq	r3, [r3, #4]
 800e7ec:	6063      	str	r3, [r4, #4]
 800e7ee:	bf04      	itt	eq
 800e7f0:	1809      	addeq	r1, r1, r0
 800e7f2:	6021      	streq	r1, [r4, #0]
 800e7f4:	6054      	str	r4, [r2, #4]
 800e7f6:	e7ca      	b.n	800e78e <_free_r+0x22>
 800e7f8:	bd38      	pop	{r3, r4, r5, pc}
 800e7fa:	bf00      	nop
 800e7fc:	240037b0 	.word	0x240037b0

0800e800 <malloc>:
 800e800:	4b02      	ldr	r3, [pc, #8]	@ (800e80c <malloc+0xc>)
 800e802:	4601      	mov	r1, r0
 800e804:	6818      	ldr	r0, [r3, #0]
 800e806:	f000 b825 	b.w	800e854 <_malloc_r>
 800e80a:	bf00      	nop
 800e80c:	2400002c 	.word	0x2400002c

0800e810 <sbrk_aligned>:
 800e810:	b570      	push	{r4, r5, r6, lr}
 800e812:	4e0f      	ldr	r6, [pc, #60]	@ (800e850 <sbrk_aligned+0x40>)
 800e814:	460c      	mov	r4, r1
 800e816:	6831      	ldr	r1, [r6, #0]
 800e818:	4605      	mov	r5, r0
 800e81a:	b911      	cbnz	r1, 800e822 <sbrk_aligned+0x12>
 800e81c:	f000 fcd4 	bl	800f1c8 <_sbrk_r>
 800e820:	6030      	str	r0, [r6, #0]
 800e822:	4621      	mov	r1, r4
 800e824:	4628      	mov	r0, r5
 800e826:	f000 fccf 	bl	800f1c8 <_sbrk_r>
 800e82a:	1c43      	adds	r3, r0, #1
 800e82c:	d103      	bne.n	800e836 <sbrk_aligned+0x26>
 800e82e:	f04f 34ff 	mov.w	r4, #4294967295
 800e832:	4620      	mov	r0, r4
 800e834:	bd70      	pop	{r4, r5, r6, pc}
 800e836:	1cc4      	adds	r4, r0, #3
 800e838:	f024 0403 	bic.w	r4, r4, #3
 800e83c:	42a0      	cmp	r0, r4
 800e83e:	d0f8      	beq.n	800e832 <sbrk_aligned+0x22>
 800e840:	1a21      	subs	r1, r4, r0
 800e842:	4628      	mov	r0, r5
 800e844:	f000 fcc0 	bl	800f1c8 <_sbrk_r>
 800e848:	3001      	adds	r0, #1
 800e84a:	d1f2      	bne.n	800e832 <sbrk_aligned+0x22>
 800e84c:	e7ef      	b.n	800e82e <sbrk_aligned+0x1e>
 800e84e:	bf00      	nop
 800e850:	240037ac 	.word	0x240037ac

0800e854 <_malloc_r>:
 800e854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e858:	1ccd      	adds	r5, r1, #3
 800e85a:	f025 0503 	bic.w	r5, r5, #3
 800e85e:	3508      	adds	r5, #8
 800e860:	2d0c      	cmp	r5, #12
 800e862:	bf38      	it	cc
 800e864:	250c      	movcc	r5, #12
 800e866:	2d00      	cmp	r5, #0
 800e868:	4606      	mov	r6, r0
 800e86a:	db01      	blt.n	800e870 <_malloc_r+0x1c>
 800e86c:	42a9      	cmp	r1, r5
 800e86e:	d904      	bls.n	800e87a <_malloc_r+0x26>
 800e870:	230c      	movs	r3, #12
 800e872:	6033      	str	r3, [r6, #0]
 800e874:	2000      	movs	r0, #0
 800e876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e87a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e950 <_malloc_r+0xfc>
 800e87e:	f000 f869 	bl	800e954 <__malloc_lock>
 800e882:	f8d8 3000 	ldr.w	r3, [r8]
 800e886:	461c      	mov	r4, r3
 800e888:	bb44      	cbnz	r4, 800e8dc <_malloc_r+0x88>
 800e88a:	4629      	mov	r1, r5
 800e88c:	4630      	mov	r0, r6
 800e88e:	f7ff ffbf 	bl	800e810 <sbrk_aligned>
 800e892:	1c43      	adds	r3, r0, #1
 800e894:	4604      	mov	r4, r0
 800e896:	d158      	bne.n	800e94a <_malloc_r+0xf6>
 800e898:	f8d8 4000 	ldr.w	r4, [r8]
 800e89c:	4627      	mov	r7, r4
 800e89e:	2f00      	cmp	r7, #0
 800e8a0:	d143      	bne.n	800e92a <_malloc_r+0xd6>
 800e8a2:	2c00      	cmp	r4, #0
 800e8a4:	d04b      	beq.n	800e93e <_malloc_r+0xea>
 800e8a6:	6823      	ldr	r3, [r4, #0]
 800e8a8:	4639      	mov	r1, r7
 800e8aa:	4630      	mov	r0, r6
 800e8ac:	eb04 0903 	add.w	r9, r4, r3
 800e8b0:	f000 fc8a 	bl	800f1c8 <_sbrk_r>
 800e8b4:	4581      	cmp	r9, r0
 800e8b6:	d142      	bne.n	800e93e <_malloc_r+0xea>
 800e8b8:	6821      	ldr	r1, [r4, #0]
 800e8ba:	1a6d      	subs	r5, r5, r1
 800e8bc:	4629      	mov	r1, r5
 800e8be:	4630      	mov	r0, r6
 800e8c0:	f7ff ffa6 	bl	800e810 <sbrk_aligned>
 800e8c4:	3001      	adds	r0, #1
 800e8c6:	d03a      	beq.n	800e93e <_malloc_r+0xea>
 800e8c8:	6823      	ldr	r3, [r4, #0]
 800e8ca:	442b      	add	r3, r5
 800e8cc:	6023      	str	r3, [r4, #0]
 800e8ce:	f8d8 3000 	ldr.w	r3, [r8]
 800e8d2:	685a      	ldr	r2, [r3, #4]
 800e8d4:	bb62      	cbnz	r2, 800e930 <_malloc_r+0xdc>
 800e8d6:	f8c8 7000 	str.w	r7, [r8]
 800e8da:	e00f      	b.n	800e8fc <_malloc_r+0xa8>
 800e8dc:	6822      	ldr	r2, [r4, #0]
 800e8de:	1b52      	subs	r2, r2, r5
 800e8e0:	d420      	bmi.n	800e924 <_malloc_r+0xd0>
 800e8e2:	2a0b      	cmp	r2, #11
 800e8e4:	d917      	bls.n	800e916 <_malloc_r+0xc2>
 800e8e6:	1961      	adds	r1, r4, r5
 800e8e8:	42a3      	cmp	r3, r4
 800e8ea:	6025      	str	r5, [r4, #0]
 800e8ec:	bf18      	it	ne
 800e8ee:	6059      	strne	r1, [r3, #4]
 800e8f0:	6863      	ldr	r3, [r4, #4]
 800e8f2:	bf08      	it	eq
 800e8f4:	f8c8 1000 	streq.w	r1, [r8]
 800e8f8:	5162      	str	r2, [r4, r5]
 800e8fa:	604b      	str	r3, [r1, #4]
 800e8fc:	4630      	mov	r0, r6
 800e8fe:	f000 f82f 	bl	800e960 <__malloc_unlock>
 800e902:	f104 000b 	add.w	r0, r4, #11
 800e906:	1d23      	adds	r3, r4, #4
 800e908:	f020 0007 	bic.w	r0, r0, #7
 800e90c:	1ac2      	subs	r2, r0, r3
 800e90e:	bf1c      	itt	ne
 800e910:	1a1b      	subne	r3, r3, r0
 800e912:	50a3      	strne	r3, [r4, r2]
 800e914:	e7af      	b.n	800e876 <_malloc_r+0x22>
 800e916:	6862      	ldr	r2, [r4, #4]
 800e918:	42a3      	cmp	r3, r4
 800e91a:	bf0c      	ite	eq
 800e91c:	f8c8 2000 	streq.w	r2, [r8]
 800e920:	605a      	strne	r2, [r3, #4]
 800e922:	e7eb      	b.n	800e8fc <_malloc_r+0xa8>
 800e924:	4623      	mov	r3, r4
 800e926:	6864      	ldr	r4, [r4, #4]
 800e928:	e7ae      	b.n	800e888 <_malloc_r+0x34>
 800e92a:	463c      	mov	r4, r7
 800e92c:	687f      	ldr	r7, [r7, #4]
 800e92e:	e7b6      	b.n	800e89e <_malloc_r+0x4a>
 800e930:	461a      	mov	r2, r3
 800e932:	685b      	ldr	r3, [r3, #4]
 800e934:	42a3      	cmp	r3, r4
 800e936:	d1fb      	bne.n	800e930 <_malloc_r+0xdc>
 800e938:	2300      	movs	r3, #0
 800e93a:	6053      	str	r3, [r2, #4]
 800e93c:	e7de      	b.n	800e8fc <_malloc_r+0xa8>
 800e93e:	230c      	movs	r3, #12
 800e940:	6033      	str	r3, [r6, #0]
 800e942:	4630      	mov	r0, r6
 800e944:	f000 f80c 	bl	800e960 <__malloc_unlock>
 800e948:	e794      	b.n	800e874 <_malloc_r+0x20>
 800e94a:	6005      	str	r5, [r0, #0]
 800e94c:	e7d6      	b.n	800e8fc <_malloc_r+0xa8>
 800e94e:	bf00      	nop
 800e950:	240037b0 	.word	0x240037b0

0800e954 <__malloc_lock>:
 800e954:	4801      	ldr	r0, [pc, #4]	@ (800e95c <__malloc_lock+0x8>)
 800e956:	f7ff b926 	b.w	800dba6 <__retarget_lock_acquire_recursive>
 800e95a:	bf00      	nop
 800e95c:	240037a8 	.word	0x240037a8

0800e960 <__malloc_unlock>:
 800e960:	4801      	ldr	r0, [pc, #4]	@ (800e968 <__malloc_unlock+0x8>)
 800e962:	f7ff b921 	b.w	800dba8 <__retarget_lock_release_recursive>
 800e966:	bf00      	nop
 800e968:	240037a8 	.word	0x240037a8

0800e96c <_Balloc>:
 800e96c:	b570      	push	{r4, r5, r6, lr}
 800e96e:	69c6      	ldr	r6, [r0, #28]
 800e970:	4604      	mov	r4, r0
 800e972:	460d      	mov	r5, r1
 800e974:	b976      	cbnz	r6, 800e994 <_Balloc+0x28>
 800e976:	2010      	movs	r0, #16
 800e978:	f7ff ff42 	bl	800e800 <malloc>
 800e97c:	4602      	mov	r2, r0
 800e97e:	61e0      	str	r0, [r4, #28]
 800e980:	b920      	cbnz	r0, 800e98c <_Balloc+0x20>
 800e982:	4b18      	ldr	r3, [pc, #96]	@ (800e9e4 <_Balloc+0x78>)
 800e984:	4818      	ldr	r0, [pc, #96]	@ (800e9e8 <_Balloc+0x7c>)
 800e986:	216b      	movs	r1, #107	@ 0x6b
 800e988:	f000 fc3c 	bl	800f204 <__assert_func>
 800e98c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e990:	6006      	str	r6, [r0, #0]
 800e992:	60c6      	str	r6, [r0, #12]
 800e994:	69e6      	ldr	r6, [r4, #28]
 800e996:	68f3      	ldr	r3, [r6, #12]
 800e998:	b183      	cbz	r3, 800e9bc <_Balloc+0x50>
 800e99a:	69e3      	ldr	r3, [r4, #28]
 800e99c:	68db      	ldr	r3, [r3, #12]
 800e99e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e9a2:	b9b8      	cbnz	r0, 800e9d4 <_Balloc+0x68>
 800e9a4:	2101      	movs	r1, #1
 800e9a6:	fa01 f605 	lsl.w	r6, r1, r5
 800e9aa:	1d72      	adds	r2, r6, #5
 800e9ac:	0092      	lsls	r2, r2, #2
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	f000 fc46 	bl	800f240 <_calloc_r>
 800e9b4:	b160      	cbz	r0, 800e9d0 <_Balloc+0x64>
 800e9b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e9ba:	e00e      	b.n	800e9da <_Balloc+0x6e>
 800e9bc:	2221      	movs	r2, #33	@ 0x21
 800e9be:	2104      	movs	r1, #4
 800e9c0:	4620      	mov	r0, r4
 800e9c2:	f000 fc3d 	bl	800f240 <_calloc_r>
 800e9c6:	69e3      	ldr	r3, [r4, #28]
 800e9c8:	60f0      	str	r0, [r6, #12]
 800e9ca:	68db      	ldr	r3, [r3, #12]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d1e4      	bne.n	800e99a <_Balloc+0x2e>
 800e9d0:	2000      	movs	r0, #0
 800e9d2:	bd70      	pop	{r4, r5, r6, pc}
 800e9d4:	6802      	ldr	r2, [r0, #0]
 800e9d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e9da:	2300      	movs	r3, #0
 800e9dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e9e0:	e7f7      	b.n	800e9d2 <_Balloc+0x66>
 800e9e2:	bf00      	nop
 800e9e4:	08010441 	.word	0x08010441
 800e9e8:	080104c1 	.word	0x080104c1

0800e9ec <_Bfree>:
 800e9ec:	b570      	push	{r4, r5, r6, lr}
 800e9ee:	69c6      	ldr	r6, [r0, #28]
 800e9f0:	4605      	mov	r5, r0
 800e9f2:	460c      	mov	r4, r1
 800e9f4:	b976      	cbnz	r6, 800ea14 <_Bfree+0x28>
 800e9f6:	2010      	movs	r0, #16
 800e9f8:	f7ff ff02 	bl	800e800 <malloc>
 800e9fc:	4602      	mov	r2, r0
 800e9fe:	61e8      	str	r0, [r5, #28]
 800ea00:	b920      	cbnz	r0, 800ea0c <_Bfree+0x20>
 800ea02:	4b09      	ldr	r3, [pc, #36]	@ (800ea28 <_Bfree+0x3c>)
 800ea04:	4809      	ldr	r0, [pc, #36]	@ (800ea2c <_Bfree+0x40>)
 800ea06:	218f      	movs	r1, #143	@ 0x8f
 800ea08:	f000 fbfc 	bl	800f204 <__assert_func>
 800ea0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea10:	6006      	str	r6, [r0, #0]
 800ea12:	60c6      	str	r6, [r0, #12]
 800ea14:	b13c      	cbz	r4, 800ea26 <_Bfree+0x3a>
 800ea16:	69eb      	ldr	r3, [r5, #28]
 800ea18:	6862      	ldr	r2, [r4, #4]
 800ea1a:	68db      	ldr	r3, [r3, #12]
 800ea1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ea20:	6021      	str	r1, [r4, #0]
 800ea22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ea26:	bd70      	pop	{r4, r5, r6, pc}
 800ea28:	08010441 	.word	0x08010441
 800ea2c:	080104c1 	.word	0x080104c1

0800ea30 <__multadd>:
 800ea30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea34:	690d      	ldr	r5, [r1, #16]
 800ea36:	4607      	mov	r7, r0
 800ea38:	460c      	mov	r4, r1
 800ea3a:	461e      	mov	r6, r3
 800ea3c:	f101 0c14 	add.w	ip, r1, #20
 800ea40:	2000      	movs	r0, #0
 800ea42:	f8dc 3000 	ldr.w	r3, [ip]
 800ea46:	b299      	uxth	r1, r3
 800ea48:	fb02 6101 	mla	r1, r2, r1, r6
 800ea4c:	0c1e      	lsrs	r6, r3, #16
 800ea4e:	0c0b      	lsrs	r3, r1, #16
 800ea50:	fb02 3306 	mla	r3, r2, r6, r3
 800ea54:	b289      	uxth	r1, r1
 800ea56:	3001      	adds	r0, #1
 800ea58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ea5c:	4285      	cmp	r5, r0
 800ea5e:	f84c 1b04 	str.w	r1, [ip], #4
 800ea62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ea66:	dcec      	bgt.n	800ea42 <__multadd+0x12>
 800ea68:	b30e      	cbz	r6, 800eaae <__multadd+0x7e>
 800ea6a:	68a3      	ldr	r3, [r4, #8]
 800ea6c:	42ab      	cmp	r3, r5
 800ea6e:	dc19      	bgt.n	800eaa4 <__multadd+0x74>
 800ea70:	6861      	ldr	r1, [r4, #4]
 800ea72:	4638      	mov	r0, r7
 800ea74:	3101      	adds	r1, #1
 800ea76:	f7ff ff79 	bl	800e96c <_Balloc>
 800ea7a:	4680      	mov	r8, r0
 800ea7c:	b928      	cbnz	r0, 800ea8a <__multadd+0x5a>
 800ea7e:	4602      	mov	r2, r0
 800ea80:	4b0c      	ldr	r3, [pc, #48]	@ (800eab4 <__multadd+0x84>)
 800ea82:	480d      	ldr	r0, [pc, #52]	@ (800eab8 <__multadd+0x88>)
 800ea84:	21ba      	movs	r1, #186	@ 0xba
 800ea86:	f000 fbbd 	bl	800f204 <__assert_func>
 800ea8a:	6922      	ldr	r2, [r4, #16]
 800ea8c:	3202      	adds	r2, #2
 800ea8e:	f104 010c 	add.w	r1, r4, #12
 800ea92:	0092      	lsls	r2, r2, #2
 800ea94:	300c      	adds	r0, #12
 800ea96:	f000 fba7 	bl	800f1e8 <memcpy>
 800ea9a:	4621      	mov	r1, r4
 800ea9c:	4638      	mov	r0, r7
 800ea9e:	f7ff ffa5 	bl	800e9ec <_Bfree>
 800eaa2:	4644      	mov	r4, r8
 800eaa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eaa8:	3501      	adds	r5, #1
 800eaaa:	615e      	str	r6, [r3, #20]
 800eaac:	6125      	str	r5, [r4, #16]
 800eaae:	4620      	mov	r0, r4
 800eab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eab4:	080104b0 	.word	0x080104b0
 800eab8:	080104c1 	.word	0x080104c1

0800eabc <__hi0bits>:
 800eabc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800eac0:	4603      	mov	r3, r0
 800eac2:	bf36      	itet	cc
 800eac4:	0403      	lslcc	r3, r0, #16
 800eac6:	2000      	movcs	r0, #0
 800eac8:	2010      	movcc	r0, #16
 800eaca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eace:	bf3c      	itt	cc
 800ead0:	021b      	lslcc	r3, r3, #8
 800ead2:	3008      	addcc	r0, #8
 800ead4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ead8:	bf3c      	itt	cc
 800eada:	011b      	lslcc	r3, r3, #4
 800eadc:	3004      	addcc	r0, #4
 800eade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eae2:	bf3c      	itt	cc
 800eae4:	009b      	lslcc	r3, r3, #2
 800eae6:	3002      	addcc	r0, #2
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	db05      	blt.n	800eaf8 <__hi0bits+0x3c>
 800eaec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800eaf0:	f100 0001 	add.w	r0, r0, #1
 800eaf4:	bf08      	it	eq
 800eaf6:	2020      	moveq	r0, #32
 800eaf8:	4770      	bx	lr

0800eafa <__lo0bits>:
 800eafa:	6803      	ldr	r3, [r0, #0]
 800eafc:	4602      	mov	r2, r0
 800eafe:	f013 0007 	ands.w	r0, r3, #7
 800eb02:	d00b      	beq.n	800eb1c <__lo0bits+0x22>
 800eb04:	07d9      	lsls	r1, r3, #31
 800eb06:	d421      	bmi.n	800eb4c <__lo0bits+0x52>
 800eb08:	0798      	lsls	r0, r3, #30
 800eb0a:	bf49      	itett	mi
 800eb0c:	085b      	lsrmi	r3, r3, #1
 800eb0e:	089b      	lsrpl	r3, r3, #2
 800eb10:	2001      	movmi	r0, #1
 800eb12:	6013      	strmi	r3, [r2, #0]
 800eb14:	bf5c      	itt	pl
 800eb16:	6013      	strpl	r3, [r2, #0]
 800eb18:	2002      	movpl	r0, #2
 800eb1a:	4770      	bx	lr
 800eb1c:	b299      	uxth	r1, r3
 800eb1e:	b909      	cbnz	r1, 800eb24 <__lo0bits+0x2a>
 800eb20:	0c1b      	lsrs	r3, r3, #16
 800eb22:	2010      	movs	r0, #16
 800eb24:	b2d9      	uxtb	r1, r3
 800eb26:	b909      	cbnz	r1, 800eb2c <__lo0bits+0x32>
 800eb28:	3008      	adds	r0, #8
 800eb2a:	0a1b      	lsrs	r3, r3, #8
 800eb2c:	0719      	lsls	r1, r3, #28
 800eb2e:	bf04      	itt	eq
 800eb30:	091b      	lsreq	r3, r3, #4
 800eb32:	3004      	addeq	r0, #4
 800eb34:	0799      	lsls	r1, r3, #30
 800eb36:	bf04      	itt	eq
 800eb38:	089b      	lsreq	r3, r3, #2
 800eb3a:	3002      	addeq	r0, #2
 800eb3c:	07d9      	lsls	r1, r3, #31
 800eb3e:	d403      	bmi.n	800eb48 <__lo0bits+0x4e>
 800eb40:	085b      	lsrs	r3, r3, #1
 800eb42:	f100 0001 	add.w	r0, r0, #1
 800eb46:	d003      	beq.n	800eb50 <__lo0bits+0x56>
 800eb48:	6013      	str	r3, [r2, #0]
 800eb4a:	4770      	bx	lr
 800eb4c:	2000      	movs	r0, #0
 800eb4e:	4770      	bx	lr
 800eb50:	2020      	movs	r0, #32
 800eb52:	4770      	bx	lr

0800eb54 <__i2b>:
 800eb54:	b510      	push	{r4, lr}
 800eb56:	460c      	mov	r4, r1
 800eb58:	2101      	movs	r1, #1
 800eb5a:	f7ff ff07 	bl	800e96c <_Balloc>
 800eb5e:	4602      	mov	r2, r0
 800eb60:	b928      	cbnz	r0, 800eb6e <__i2b+0x1a>
 800eb62:	4b05      	ldr	r3, [pc, #20]	@ (800eb78 <__i2b+0x24>)
 800eb64:	4805      	ldr	r0, [pc, #20]	@ (800eb7c <__i2b+0x28>)
 800eb66:	f240 1145 	movw	r1, #325	@ 0x145
 800eb6a:	f000 fb4b 	bl	800f204 <__assert_func>
 800eb6e:	2301      	movs	r3, #1
 800eb70:	6144      	str	r4, [r0, #20]
 800eb72:	6103      	str	r3, [r0, #16]
 800eb74:	bd10      	pop	{r4, pc}
 800eb76:	bf00      	nop
 800eb78:	080104b0 	.word	0x080104b0
 800eb7c:	080104c1 	.word	0x080104c1

0800eb80 <__multiply>:
 800eb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb84:	4614      	mov	r4, r2
 800eb86:	690a      	ldr	r2, [r1, #16]
 800eb88:	6923      	ldr	r3, [r4, #16]
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	bfa8      	it	ge
 800eb8e:	4623      	movge	r3, r4
 800eb90:	460f      	mov	r7, r1
 800eb92:	bfa4      	itt	ge
 800eb94:	460c      	movge	r4, r1
 800eb96:	461f      	movge	r7, r3
 800eb98:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800eb9c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800eba0:	68a3      	ldr	r3, [r4, #8]
 800eba2:	6861      	ldr	r1, [r4, #4]
 800eba4:	eb0a 0609 	add.w	r6, sl, r9
 800eba8:	42b3      	cmp	r3, r6
 800ebaa:	b085      	sub	sp, #20
 800ebac:	bfb8      	it	lt
 800ebae:	3101      	addlt	r1, #1
 800ebb0:	f7ff fedc 	bl	800e96c <_Balloc>
 800ebb4:	b930      	cbnz	r0, 800ebc4 <__multiply+0x44>
 800ebb6:	4602      	mov	r2, r0
 800ebb8:	4b44      	ldr	r3, [pc, #272]	@ (800eccc <__multiply+0x14c>)
 800ebba:	4845      	ldr	r0, [pc, #276]	@ (800ecd0 <__multiply+0x150>)
 800ebbc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ebc0:	f000 fb20 	bl	800f204 <__assert_func>
 800ebc4:	f100 0514 	add.w	r5, r0, #20
 800ebc8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ebcc:	462b      	mov	r3, r5
 800ebce:	2200      	movs	r2, #0
 800ebd0:	4543      	cmp	r3, r8
 800ebd2:	d321      	bcc.n	800ec18 <__multiply+0x98>
 800ebd4:	f107 0114 	add.w	r1, r7, #20
 800ebd8:	f104 0214 	add.w	r2, r4, #20
 800ebdc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ebe0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ebe4:	9302      	str	r3, [sp, #8]
 800ebe6:	1b13      	subs	r3, r2, r4
 800ebe8:	3b15      	subs	r3, #21
 800ebea:	f023 0303 	bic.w	r3, r3, #3
 800ebee:	3304      	adds	r3, #4
 800ebf0:	f104 0715 	add.w	r7, r4, #21
 800ebf4:	42ba      	cmp	r2, r7
 800ebf6:	bf38      	it	cc
 800ebf8:	2304      	movcc	r3, #4
 800ebfa:	9301      	str	r3, [sp, #4]
 800ebfc:	9b02      	ldr	r3, [sp, #8]
 800ebfe:	9103      	str	r1, [sp, #12]
 800ec00:	428b      	cmp	r3, r1
 800ec02:	d80c      	bhi.n	800ec1e <__multiply+0x9e>
 800ec04:	2e00      	cmp	r6, #0
 800ec06:	dd03      	ble.n	800ec10 <__multiply+0x90>
 800ec08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d05b      	beq.n	800ecc8 <__multiply+0x148>
 800ec10:	6106      	str	r6, [r0, #16]
 800ec12:	b005      	add	sp, #20
 800ec14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec18:	f843 2b04 	str.w	r2, [r3], #4
 800ec1c:	e7d8      	b.n	800ebd0 <__multiply+0x50>
 800ec1e:	f8b1 a000 	ldrh.w	sl, [r1]
 800ec22:	f1ba 0f00 	cmp.w	sl, #0
 800ec26:	d024      	beq.n	800ec72 <__multiply+0xf2>
 800ec28:	f104 0e14 	add.w	lr, r4, #20
 800ec2c:	46a9      	mov	r9, r5
 800ec2e:	f04f 0c00 	mov.w	ip, #0
 800ec32:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ec36:	f8d9 3000 	ldr.w	r3, [r9]
 800ec3a:	fa1f fb87 	uxth.w	fp, r7
 800ec3e:	b29b      	uxth	r3, r3
 800ec40:	fb0a 330b 	mla	r3, sl, fp, r3
 800ec44:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ec48:	f8d9 7000 	ldr.w	r7, [r9]
 800ec4c:	4463      	add	r3, ip
 800ec4e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ec52:	fb0a c70b 	mla	r7, sl, fp, ip
 800ec56:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ec60:	4572      	cmp	r2, lr
 800ec62:	f849 3b04 	str.w	r3, [r9], #4
 800ec66:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ec6a:	d8e2      	bhi.n	800ec32 <__multiply+0xb2>
 800ec6c:	9b01      	ldr	r3, [sp, #4]
 800ec6e:	f845 c003 	str.w	ip, [r5, r3]
 800ec72:	9b03      	ldr	r3, [sp, #12]
 800ec74:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ec78:	3104      	adds	r1, #4
 800ec7a:	f1b9 0f00 	cmp.w	r9, #0
 800ec7e:	d021      	beq.n	800ecc4 <__multiply+0x144>
 800ec80:	682b      	ldr	r3, [r5, #0]
 800ec82:	f104 0c14 	add.w	ip, r4, #20
 800ec86:	46ae      	mov	lr, r5
 800ec88:	f04f 0a00 	mov.w	sl, #0
 800ec8c:	f8bc b000 	ldrh.w	fp, [ip]
 800ec90:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ec94:	fb09 770b 	mla	r7, r9, fp, r7
 800ec98:	4457      	add	r7, sl
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800eca0:	f84e 3b04 	str.w	r3, [lr], #4
 800eca4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800eca8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ecac:	f8be 3000 	ldrh.w	r3, [lr]
 800ecb0:	fb09 330a 	mla	r3, r9, sl, r3
 800ecb4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ecb8:	4562      	cmp	r2, ip
 800ecba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ecbe:	d8e5      	bhi.n	800ec8c <__multiply+0x10c>
 800ecc0:	9f01      	ldr	r7, [sp, #4]
 800ecc2:	51eb      	str	r3, [r5, r7]
 800ecc4:	3504      	adds	r5, #4
 800ecc6:	e799      	b.n	800ebfc <__multiply+0x7c>
 800ecc8:	3e01      	subs	r6, #1
 800ecca:	e79b      	b.n	800ec04 <__multiply+0x84>
 800eccc:	080104b0 	.word	0x080104b0
 800ecd0:	080104c1 	.word	0x080104c1

0800ecd4 <__pow5mult>:
 800ecd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecd8:	4615      	mov	r5, r2
 800ecda:	f012 0203 	ands.w	r2, r2, #3
 800ecde:	4607      	mov	r7, r0
 800ece0:	460e      	mov	r6, r1
 800ece2:	d007      	beq.n	800ecf4 <__pow5mult+0x20>
 800ece4:	4c25      	ldr	r4, [pc, #148]	@ (800ed7c <__pow5mult+0xa8>)
 800ece6:	3a01      	subs	r2, #1
 800ece8:	2300      	movs	r3, #0
 800ecea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ecee:	f7ff fe9f 	bl	800ea30 <__multadd>
 800ecf2:	4606      	mov	r6, r0
 800ecf4:	10ad      	asrs	r5, r5, #2
 800ecf6:	d03d      	beq.n	800ed74 <__pow5mult+0xa0>
 800ecf8:	69fc      	ldr	r4, [r7, #28]
 800ecfa:	b97c      	cbnz	r4, 800ed1c <__pow5mult+0x48>
 800ecfc:	2010      	movs	r0, #16
 800ecfe:	f7ff fd7f 	bl	800e800 <malloc>
 800ed02:	4602      	mov	r2, r0
 800ed04:	61f8      	str	r0, [r7, #28]
 800ed06:	b928      	cbnz	r0, 800ed14 <__pow5mult+0x40>
 800ed08:	4b1d      	ldr	r3, [pc, #116]	@ (800ed80 <__pow5mult+0xac>)
 800ed0a:	481e      	ldr	r0, [pc, #120]	@ (800ed84 <__pow5mult+0xb0>)
 800ed0c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ed10:	f000 fa78 	bl	800f204 <__assert_func>
 800ed14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ed18:	6004      	str	r4, [r0, #0]
 800ed1a:	60c4      	str	r4, [r0, #12]
 800ed1c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ed20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ed24:	b94c      	cbnz	r4, 800ed3a <__pow5mult+0x66>
 800ed26:	f240 2171 	movw	r1, #625	@ 0x271
 800ed2a:	4638      	mov	r0, r7
 800ed2c:	f7ff ff12 	bl	800eb54 <__i2b>
 800ed30:	2300      	movs	r3, #0
 800ed32:	f8c8 0008 	str.w	r0, [r8, #8]
 800ed36:	4604      	mov	r4, r0
 800ed38:	6003      	str	r3, [r0, #0]
 800ed3a:	f04f 0900 	mov.w	r9, #0
 800ed3e:	07eb      	lsls	r3, r5, #31
 800ed40:	d50a      	bpl.n	800ed58 <__pow5mult+0x84>
 800ed42:	4631      	mov	r1, r6
 800ed44:	4622      	mov	r2, r4
 800ed46:	4638      	mov	r0, r7
 800ed48:	f7ff ff1a 	bl	800eb80 <__multiply>
 800ed4c:	4631      	mov	r1, r6
 800ed4e:	4680      	mov	r8, r0
 800ed50:	4638      	mov	r0, r7
 800ed52:	f7ff fe4b 	bl	800e9ec <_Bfree>
 800ed56:	4646      	mov	r6, r8
 800ed58:	106d      	asrs	r5, r5, #1
 800ed5a:	d00b      	beq.n	800ed74 <__pow5mult+0xa0>
 800ed5c:	6820      	ldr	r0, [r4, #0]
 800ed5e:	b938      	cbnz	r0, 800ed70 <__pow5mult+0x9c>
 800ed60:	4622      	mov	r2, r4
 800ed62:	4621      	mov	r1, r4
 800ed64:	4638      	mov	r0, r7
 800ed66:	f7ff ff0b 	bl	800eb80 <__multiply>
 800ed6a:	6020      	str	r0, [r4, #0]
 800ed6c:	f8c0 9000 	str.w	r9, [r0]
 800ed70:	4604      	mov	r4, r0
 800ed72:	e7e4      	b.n	800ed3e <__pow5mult+0x6a>
 800ed74:	4630      	mov	r0, r6
 800ed76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed7a:	bf00      	nop
 800ed7c:	0801051c 	.word	0x0801051c
 800ed80:	08010441 	.word	0x08010441
 800ed84:	080104c1 	.word	0x080104c1

0800ed88 <__lshift>:
 800ed88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed8c:	460c      	mov	r4, r1
 800ed8e:	6849      	ldr	r1, [r1, #4]
 800ed90:	6923      	ldr	r3, [r4, #16]
 800ed92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ed96:	68a3      	ldr	r3, [r4, #8]
 800ed98:	4607      	mov	r7, r0
 800ed9a:	4691      	mov	r9, r2
 800ed9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eda0:	f108 0601 	add.w	r6, r8, #1
 800eda4:	42b3      	cmp	r3, r6
 800eda6:	db0b      	blt.n	800edc0 <__lshift+0x38>
 800eda8:	4638      	mov	r0, r7
 800edaa:	f7ff fddf 	bl	800e96c <_Balloc>
 800edae:	4605      	mov	r5, r0
 800edb0:	b948      	cbnz	r0, 800edc6 <__lshift+0x3e>
 800edb2:	4602      	mov	r2, r0
 800edb4:	4b28      	ldr	r3, [pc, #160]	@ (800ee58 <__lshift+0xd0>)
 800edb6:	4829      	ldr	r0, [pc, #164]	@ (800ee5c <__lshift+0xd4>)
 800edb8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800edbc:	f000 fa22 	bl	800f204 <__assert_func>
 800edc0:	3101      	adds	r1, #1
 800edc2:	005b      	lsls	r3, r3, #1
 800edc4:	e7ee      	b.n	800eda4 <__lshift+0x1c>
 800edc6:	2300      	movs	r3, #0
 800edc8:	f100 0114 	add.w	r1, r0, #20
 800edcc:	f100 0210 	add.w	r2, r0, #16
 800edd0:	4618      	mov	r0, r3
 800edd2:	4553      	cmp	r3, sl
 800edd4:	db33      	blt.n	800ee3e <__lshift+0xb6>
 800edd6:	6920      	ldr	r0, [r4, #16]
 800edd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eddc:	f104 0314 	add.w	r3, r4, #20
 800ede0:	f019 091f 	ands.w	r9, r9, #31
 800ede4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ede8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800edec:	d02b      	beq.n	800ee46 <__lshift+0xbe>
 800edee:	f1c9 0e20 	rsb	lr, r9, #32
 800edf2:	468a      	mov	sl, r1
 800edf4:	2200      	movs	r2, #0
 800edf6:	6818      	ldr	r0, [r3, #0]
 800edf8:	fa00 f009 	lsl.w	r0, r0, r9
 800edfc:	4310      	orrs	r0, r2
 800edfe:	f84a 0b04 	str.w	r0, [sl], #4
 800ee02:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee06:	459c      	cmp	ip, r3
 800ee08:	fa22 f20e 	lsr.w	r2, r2, lr
 800ee0c:	d8f3      	bhi.n	800edf6 <__lshift+0x6e>
 800ee0e:	ebac 0304 	sub.w	r3, ip, r4
 800ee12:	3b15      	subs	r3, #21
 800ee14:	f023 0303 	bic.w	r3, r3, #3
 800ee18:	3304      	adds	r3, #4
 800ee1a:	f104 0015 	add.w	r0, r4, #21
 800ee1e:	4584      	cmp	ip, r0
 800ee20:	bf38      	it	cc
 800ee22:	2304      	movcc	r3, #4
 800ee24:	50ca      	str	r2, [r1, r3]
 800ee26:	b10a      	cbz	r2, 800ee2c <__lshift+0xa4>
 800ee28:	f108 0602 	add.w	r6, r8, #2
 800ee2c:	3e01      	subs	r6, #1
 800ee2e:	4638      	mov	r0, r7
 800ee30:	612e      	str	r6, [r5, #16]
 800ee32:	4621      	mov	r1, r4
 800ee34:	f7ff fdda 	bl	800e9ec <_Bfree>
 800ee38:	4628      	mov	r0, r5
 800ee3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee3e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ee42:	3301      	adds	r3, #1
 800ee44:	e7c5      	b.n	800edd2 <__lshift+0x4a>
 800ee46:	3904      	subs	r1, #4
 800ee48:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee4c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ee50:	459c      	cmp	ip, r3
 800ee52:	d8f9      	bhi.n	800ee48 <__lshift+0xc0>
 800ee54:	e7ea      	b.n	800ee2c <__lshift+0xa4>
 800ee56:	bf00      	nop
 800ee58:	080104b0 	.word	0x080104b0
 800ee5c:	080104c1 	.word	0x080104c1

0800ee60 <__mcmp>:
 800ee60:	690a      	ldr	r2, [r1, #16]
 800ee62:	4603      	mov	r3, r0
 800ee64:	6900      	ldr	r0, [r0, #16]
 800ee66:	1a80      	subs	r0, r0, r2
 800ee68:	b530      	push	{r4, r5, lr}
 800ee6a:	d10e      	bne.n	800ee8a <__mcmp+0x2a>
 800ee6c:	3314      	adds	r3, #20
 800ee6e:	3114      	adds	r1, #20
 800ee70:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ee74:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ee78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ee7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ee80:	4295      	cmp	r5, r2
 800ee82:	d003      	beq.n	800ee8c <__mcmp+0x2c>
 800ee84:	d205      	bcs.n	800ee92 <__mcmp+0x32>
 800ee86:	f04f 30ff 	mov.w	r0, #4294967295
 800ee8a:	bd30      	pop	{r4, r5, pc}
 800ee8c:	42a3      	cmp	r3, r4
 800ee8e:	d3f3      	bcc.n	800ee78 <__mcmp+0x18>
 800ee90:	e7fb      	b.n	800ee8a <__mcmp+0x2a>
 800ee92:	2001      	movs	r0, #1
 800ee94:	e7f9      	b.n	800ee8a <__mcmp+0x2a>
	...

0800ee98 <__mdiff>:
 800ee98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee9c:	4689      	mov	r9, r1
 800ee9e:	4606      	mov	r6, r0
 800eea0:	4611      	mov	r1, r2
 800eea2:	4648      	mov	r0, r9
 800eea4:	4614      	mov	r4, r2
 800eea6:	f7ff ffdb 	bl	800ee60 <__mcmp>
 800eeaa:	1e05      	subs	r5, r0, #0
 800eeac:	d112      	bne.n	800eed4 <__mdiff+0x3c>
 800eeae:	4629      	mov	r1, r5
 800eeb0:	4630      	mov	r0, r6
 800eeb2:	f7ff fd5b 	bl	800e96c <_Balloc>
 800eeb6:	4602      	mov	r2, r0
 800eeb8:	b928      	cbnz	r0, 800eec6 <__mdiff+0x2e>
 800eeba:	4b3f      	ldr	r3, [pc, #252]	@ (800efb8 <__mdiff+0x120>)
 800eebc:	f240 2137 	movw	r1, #567	@ 0x237
 800eec0:	483e      	ldr	r0, [pc, #248]	@ (800efbc <__mdiff+0x124>)
 800eec2:	f000 f99f 	bl	800f204 <__assert_func>
 800eec6:	2301      	movs	r3, #1
 800eec8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eecc:	4610      	mov	r0, r2
 800eece:	b003      	add	sp, #12
 800eed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eed4:	bfbc      	itt	lt
 800eed6:	464b      	movlt	r3, r9
 800eed8:	46a1      	movlt	r9, r4
 800eeda:	4630      	mov	r0, r6
 800eedc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800eee0:	bfba      	itte	lt
 800eee2:	461c      	movlt	r4, r3
 800eee4:	2501      	movlt	r5, #1
 800eee6:	2500      	movge	r5, #0
 800eee8:	f7ff fd40 	bl	800e96c <_Balloc>
 800eeec:	4602      	mov	r2, r0
 800eeee:	b918      	cbnz	r0, 800eef8 <__mdiff+0x60>
 800eef0:	4b31      	ldr	r3, [pc, #196]	@ (800efb8 <__mdiff+0x120>)
 800eef2:	f240 2145 	movw	r1, #581	@ 0x245
 800eef6:	e7e3      	b.n	800eec0 <__mdiff+0x28>
 800eef8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800eefc:	6926      	ldr	r6, [r4, #16]
 800eefe:	60c5      	str	r5, [r0, #12]
 800ef00:	f109 0310 	add.w	r3, r9, #16
 800ef04:	f109 0514 	add.w	r5, r9, #20
 800ef08:	f104 0e14 	add.w	lr, r4, #20
 800ef0c:	f100 0b14 	add.w	fp, r0, #20
 800ef10:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ef14:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ef18:	9301      	str	r3, [sp, #4]
 800ef1a:	46d9      	mov	r9, fp
 800ef1c:	f04f 0c00 	mov.w	ip, #0
 800ef20:	9b01      	ldr	r3, [sp, #4]
 800ef22:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ef26:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ef2a:	9301      	str	r3, [sp, #4]
 800ef2c:	fa1f f38a 	uxth.w	r3, sl
 800ef30:	4619      	mov	r1, r3
 800ef32:	b283      	uxth	r3, r0
 800ef34:	1acb      	subs	r3, r1, r3
 800ef36:	0c00      	lsrs	r0, r0, #16
 800ef38:	4463      	add	r3, ip
 800ef3a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ef3e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ef42:	b29b      	uxth	r3, r3
 800ef44:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ef48:	4576      	cmp	r6, lr
 800ef4a:	f849 3b04 	str.w	r3, [r9], #4
 800ef4e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ef52:	d8e5      	bhi.n	800ef20 <__mdiff+0x88>
 800ef54:	1b33      	subs	r3, r6, r4
 800ef56:	3b15      	subs	r3, #21
 800ef58:	f023 0303 	bic.w	r3, r3, #3
 800ef5c:	3415      	adds	r4, #21
 800ef5e:	3304      	adds	r3, #4
 800ef60:	42a6      	cmp	r6, r4
 800ef62:	bf38      	it	cc
 800ef64:	2304      	movcc	r3, #4
 800ef66:	441d      	add	r5, r3
 800ef68:	445b      	add	r3, fp
 800ef6a:	461e      	mov	r6, r3
 800ef6c:	462c      	mov	r4, r5
 800ef6e:	4544      	cmp	r4, r8
 800ef70:	d30e      	bcc.n	800ef90 <__mdiff+0xf8>
 800ef72:	f108 0103 	add.w	r1, r8, #3
 800ef76:	1b49      	subs	r1, r1, r5
 800ef78:	f021 0103 	bic.w	r1, r1, #3
 800ef7c:	3d03      	subs	r5, #3
 800ef7e:	45a8      	cmp	r8, r5
 800ef80:	bf38      	it	cc
 800ef82:	2100      	movcc	r1, #0
 800ef84:	440b      	add	r3, r1
 800ef86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ef8a:	b191      	cbz	r1, 800efb2 <__mdiff+0x11a>
 800ef8c:	6117      	str	r7, [r2, #16]
 800ef8e:	e79d      	b.n	800eecc <__mdiff+0x34>
 800ef90:	f854 1b04 	ldr.w	r1, [r4], #4
 800ef94:	46e6      	mov	lr, ip
 800ef96:	0c08      	lsrs	r0, r1, #16
 800ef98:	fa1c fc81 	uxtah	ip, ip, r1
 800ef9c:	4471      	add	r1, lr
 800ef9e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800efa2:	b289      	uxth	r1, r1
 800efa4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800efa8:	f846 1b04 	str.w	r1, [r6], #4
 800efac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800efb0:	e7dd      	b.n	800ef6e <__mdiff+0xd6>
 800efb2:	3f01      	subs	r7, #1
 800efb4:	e7e7      	b.n	800ef86 <__mdiff+0xee>
 800efb6:	bf00      	nop
 800efb8:	080104b0 	.word	0x080104b0
 800efbc:	080104c1 	.word	0x080104c1

0800efc0 <__d2b>:
 800efc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800efc4:	460f      	mov	r7, r1
 800efc6:	2101      	movs	r1, #1
 800efc8:	ec59 8b10 	vmov	r8, r9, d0
 800efcc:	4616      	mov	r6, r2
 800efce:	f7ff fccd 	bl	800e96c <_Balloc>
 800efd2:	4604      	mov	r4, r0
 800efd4:	b930      	cbnz	r0, 800efe4 <__d2b+0x24>
 800efd6:	4602      	mov	r2, r0
 800efd8:	4b23      	ldr	r3, [pc, #140]	@ (800f068 <__d2b+0xa8>)
 800efda:	4824      	ldr	r0, [pc, #144]	@ (800f06c <__d2b+0xac>)
 800efdc:	f240 310f 	movw	r1, #783	@ 0x30f
 800efe0:	f000 f910 	bl	800f204 <__assert_func>
 800efe4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800efe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800efec:	b10d      	cbz	r5, 800eff2 <__d2b+0x32>
 800efee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eff2:	9301      	str	r3, [sp, #4]
 800eff4:	f1b8 0300 	subs.w	r3, r8, #0
 800eff8:	d023      	beq.n	800f042 <__d2b+0x82>
 800effa:	4668      	mov	r0, sp
 800effc:	9300      	str	r3, [sp, #0]
 800effe:	f7ff fd7c 	bl	800eafa <__lo0bits>
 800f002:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f006:	b1d0      	cbz	r0, 800f03e <__d2b+0x7e>
 800f008:	f1c0 0320 	rsb	r3, r0, #32
 800f00c:	fa02 f303 	lsl.w	r3, r2, r3
 800f010:	430b      	orrs	r3, r1
 800f012:	40c2      	lsrs	r2, r0
 800f014:	6163      	str	r3, [r4, #20]
 800f016:	9201      	str	r2, [sp, #4]
 800f018:	9b01      	ldr	r3, [sp, #4]
 800f01a:	61a3      	str	r3, [r4, #24]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	bf0c      	ite	eq
 800f020:	2201      	moveq	r2, #1
 800f022:	2202      	movne	r2, #2
 800f024:	6122      	str	r2, [r4, #16]
 800f026:	b1a5      	cbz	r5, 800f052 <__d2b+0x92>
 800f028:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f02c:	4405      	add	r5, r0
 800f02e:	603d      	str	r5, [r7, #0]
 800f030:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f034:	6030      	str	r0, [r6, #0]
 800f036:	4620      	mov	r0, r4
 800f038:	b003      	add	sp, #12
 800f03a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f03e:	6161      	str	r1, [r4, #20]
 800f040:	e7ea      	b.n	800f018 <__d2b+0x58>
 800f042:	a801      	add	r0, sp, #4
 800f044:	f7ff fd59 	bl	800eafa <__lo0bits>
 800f048:	9b01      	ldr	r3, [sp, #4]
 800f04a:	6163      	str	r3, [r4, #20]
 800f04c:	3020      	adds	r0, #32
 800f04e:	2201      	movs	r2, #1
 800f050:	e7e8      	b.n	800f024 <__d2b+0x64>
 800f052:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f056:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f05a:	6038      	str	r0, [r7, #0]
 800f05c:	6918      	ldr	r0, [r3, #16]
 800f05e:	f7ff fd2d 	bl	800eabc <__hi0bits>
 800f062:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f066:	e7e5      	b.n	800f034 <__d2b+0x74>
 800f068:	080104b0 	.word	0x080104b0
 800f06c:	080104c1 	.word	0x080104c1

0800f070 <__sflush_r>:
 800f070:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f078:	0716      	lsls	r6, r2, #28
 800f07a:	4605      	mov	r5, r0
 800f07c:	460c      	mov	r4, r1
 800f07e:	d454      	bmi.n	800f12a <__sflush_r+0xba>
 800f080:	684b      	ldr	r3, [r1, #4]
 800f082:	2b00      	cmp	r3, #0
 800f084:	dc02      	bgt.n	800f08c <__sflush_r+0x1c>
 800f086:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f088:	2b00      	cmp	r3, #0
 800f08a:	dd48      	ble.n	800f11e <__sflush_r+0xae>
 800f08c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f08e:	2e00      	cmp	r6, #0
 800f090:	d045      	beq.n	800f11e <__sflush_r+0xae>
 800f092:	2300      	movs	r3, #0
 800f094:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f098:	682f      	ldr	r7, [r5, #0]
 800f09a:	6a21      	ldr	r1, [r4, #32]
 800f09c:	602b      	str	r3, [r5, #0]
 800f09e:	d030      	beq.n	800f102 <__sflush_r+0x92>
 800f0a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f0a2:	89a3      	ldrh	r3, [r4, #12]
 800f0a4:	0759      	lsls	r1, r3, #29
 800f0a6:	d505      	bpl.n	800f0b4 <__sflush_r+0x44>
 800f0a8:	6863      	ldr	r3, [r4, #4]
 800f0aa:	1ad2      	subs	r2, r2, r3
 800f0ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f0ae:	b10b      	cbz	r3, 800f0b4 <__sflush_r+0x44>
 800f0b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f0b2:	1ad2      	subs	r2, r2, r3
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f0b8:	6a21      	ldr	r1, [r4, #32]
 800f0ba:	4628      	mov	r0, r5
 800f0bc:	47b0      	blx	r6
 800f0be:	1c43      	adds	r3, r0, #1
 800f0c0:	89a3      	ldrh	r3, [r4, #12]
 800f0c2:	d106      	bne.n	800f0d2 <__sflush_r+0x62>
 800f0c4:	6829      	ldr	r1, [r5, #0]
 800f0c6:	291d      	cmp	r1, #29
 800f0c8:	d82b      	bhi.n	800f122 <__sflush_r+0xb2>
 800f0ca:	4a2a      	ldr	r2, [pc, #168]	@ (800f174 <__sflush_r+0x104>)
 800f0cc:	410a      	asrs	r2, r1
 800f0ce:	07d6      	lsls	r6, r2, #31
 800f0d0:	d427      	bmi.n	800f122 <__sflush_r+0xb2>
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	6062      	str	r2, [r4, #4]
 800f0d6:	04d9      	lsls	r1, r3, #19
 800f0d8:	6922      	ldr	r2, [r4, #16]
 800f0da:	6022      	str	r2, [r4, #0]
 800f0dc:	d504      	bpl.n	800f0e8 <__sflush_r+0x78>
 800f0de:	1c42      	adds	r2, r0, #1
 800f0e0:	d101      	bne.n	800f0e6 <__sflush_r+0x76>
 800f0e2:	682b      	ldr	r3, [r5, #0]
 800f0e4:	b903      	cbnz	r3, 800f0e8 <__sflush_r+0x78>
 800f0e6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f0e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f0ea:	602f      	str	r7, [r5, #0]
 800f0ec:	b1b9      	cbz	r1, 800f11e <__sflush_r+0xae>
 800f0ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f0f2:	4299      	cmp	r1, r3
 800f0f4:	d002      	beq.n	800f0fc <__sflush_r+0x8c>
 800f0f6:	4628      	mov	r0, r5
 800f0f8:	f7ff fb38 	bl	800e76c <_free_r>
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	6363      	str	r3, [r4, #52]	@ 0x34
 800f100:	e00d      	b.n	800f11e <__sflush_r+0xae>
 800f102:	2301      	movs	r3, #1
 800f104:	4628      	mov	r0, r5
 800f106:	47b0      	blx	r6
 800f108:	4602      	mov	r2, r0
 800f10a:	1c50      	adds	r0, r2, #1
 800f10c:	d1c9      	bne.n	800f0a2 <__sflush_r+0x32>
 800f10e:	682b      	ldr	r3, [r5, #0]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d0c6      	beq.n	800f0a2 <__sflush_r+0x32>
 800f114:	2b1d      	cmp	r3, #29
 800f116:	d001      	beq.n	800f11c <__sflush_r+0xac>
 800f118:	2b16      	cmp	r3, #22
 800f11a:	d11e      	bne.n	800f15a <__sflush_r+0xea>
 800f11c:	602f      	str	r7, [r5, #0]
 800f11e:	2000      	movs	r0, #0
 800f120:	e022      	b.n	800f168 <__sflush_r+0xf8>
 800f122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f126:	b21b      	sxth	r3, r3
 800f128:	e01b      	b.n	800f162 <__sflush_r+0xf2>
 800f12a:	690f      	ldr	r7, [r1, #16]
 800f12c:	2f00      	cmp	r7, #0
 800f12e:	d0f6      	beq.n	800f11e <__sflush_r+0xae>
 800f130:	0793      	lsls	r3, r2, #30
 800f132:	680e      	ldr	r6, [r1, #0]
 800f134:	bf08      	it	eq
 800f136:	694b      	ldreq	r3, [r1, #20]
 800f138:	600f      	str	r7, [r1, #0]
 800f13a:	bf18      	it	ne
 800f13c:	2300      	movne	r3, #0
 800f13e:	eba6 0807 	sub.w	r8, r6, r7
 800f142:	608b      	str	r3, [r1, #8]
 800f144:	f1b8 0f00 	cmp.w	r8, #0
 800f148:	dde9      	ble.n	800f11e <__sflush_r+0xae>
 800f14a:	6a21      	ldr	r1, [r4, #32]
 800f14c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f14e:	4643      	mov	r3, r8
 800f150:	463a      	mov	r2, r7
 800f152:	4628      	mov	r0, r5
 800f154:	47b0      	blx	r6
 800f156:	2800      	cmp	r0, #0
 800f158:	dc08      	bgt.n	800f16c <__sflush_r+0xfc>
 800f15a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f15e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f162:	81a3      	strh	r3, [r4, #12]
 800f164:	f04f 30ff 	mov.w	r0, #4294967295
 800f168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f16c:	4407      	add	r7, r0
 800f16e:	eba8 0800 	sub.w	r8, r8, r0
 800f172:	e7e7      	b.n	800f144 <__sflush_r+0xd4>
 800f174:	dfbffffe 	.word	0xdfbffffe

0800f178 <_fflush_r>:
 800f178:	b538      	push	{r3, r4, r5, lr}
 800f17a:	690b      	ldr	r3, [r1, #16]
 800f17c:	4605      	mov	r5, r0
 800f17e:	460c      	mov	r4, r1
 800f180:	b913      	cbnz	r3, 800f188 <_fflush_r+0x10>
 800f182:	2500      	movs	r5, #0
 800f184:	4628      	mov	r0, r5
 800f186:	bd38      	pop	{r3, r4, r5, pc}
 800f188:	b118      	cbz	r0, 800f192 <_fflush_r+0x1a>
 800f18a:	6a03      	ldr	r3, [r0, #32]
 800f18c:	b90b      	cbnz	r3, 800f192 <_fflush_r+0x1a>
 800f18e:	f7fe fc13 	bl	800d9b8 <__sinit>
 800f192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d0f3      	beq.n	800f182 <_fflush_r+0xa>
 800f19a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f19c:	07d0      	lsls	r0, r2, #31
 800f19e:	d404      	bmi.n	800f1aa <_fflush_r+0x32>
 800f1a0:	0599      	lsls	r1, r3, #22
 800f1a2:	d402      	bmi.n	800f1aa <_fflush_r+0x32>
 800f1a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f1a6:	f7fe fcfe 	bl	800dba6 <__retarget_lock_acquire_recursive>
 800f1aa:	4628      	mov	r0, r5
 800f1ac:	4621      	mov	r1, r4
 800f1ae:	f7ff ff5f 	bl	800f070 <__sflush_r>
 800f1b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f1b4:	07da      	lsls	r2, r3, #31
 800f1b6:	4605      	mov	r5, r0
 800f1b8:	d4e4      	bmi.n	800f184 <_fflush_r+0xc>
 800f1ba:	89a3      	ldrh	r3, [r4, #12]
 800f1bc:	059b      	lsls	r3, r3, #22
 800f1be:	d4e1      	bmi.n	800f184 <_fflush_r+0xc>
 800f1c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f1c2:	f7fe fcf1 	bl	800dba8 <__retarget_lock_release_recursive>
 800f1c6:	e7dd      	b.n	800f184 <_fflush_r+0xc>

0800f1c8 <_sbrk_r>:
 800f1c8:	b538      	push	{r3, r4, r5, lr}
 800f1ca:	4d06      	ldr	r5, [pc, #24]	@ (800f1e4 <_sbrk_r+0x1c>)
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	4604      	mov	r4, r0
 800f1d0:	4608      	mov	r0, r1
 800f1d2:	602b      	str	r3, [r5, #0]
 800f1d4:	f7f4 faec 	bl	80037b0 <_sbrk>
 800f1d8:	1c43      	adds	r3, r0, #1
 800f1da:	d102      	bne.n	800f1e2 <_sbrk_r+0x1a>
 800f1dc:	682b      	ldr	r3, [r5, #0]
 800f1de:	b103      	cbz	r3, 800f1e2 <_sbrk_r+0x1a>
 800f1e0:	6023      	str	r3, [r4, #0]
 800f1e2:	bd38      	pop	{r3, r4, r5, pc}
 800f1e4:	240037a4 	.word	0x240037a4

0800f1e8 <memcpy>:
 800f1e8:	440a      	add	r2, r1
 800f1ea:	4291      	cmp	r1, r2
 800f1ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800f1f0:	d100      	bne.n	800f1f4 <memcpy+0xc>
 800f1f2:	4770      	bx	lr
 800f1f4:	b510      	push	{r4, lr}
 800f1f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f1fe:	4291      	cmp	r1, r2
 800f200:	d1f9      	bne.n	800f1f6 <memcpy+0xe>
 800f202:	bd10      	pop	{r4, pc}

0800f204 <__assert_func>:
 800f204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f206:	4614      	mov	r4, r2
 800f208:	461a      	mov	r2, r3
 800f20a:	4b09      	ldr	r3, [pc, #36]	@ (800f230 <__assert_func+0x2c>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	4605      	mov	r5, r0
 800f210:	68d8      	ldr	r0, [r3, #12]
 800f212:	b954      	cbnz	r4, 800f22a <__assert_func+0x26>
 800f214:	4b07      	ldr	r3, [pc, #28]	@ (800f234 <__assert_func+0x30>)
 800f216:	461c      	mov	r4, r3
 800f218:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f21c:	9100      	str	r1, [sp, #0]
 800f21e:	462b      	mov	r3, r5
 800f220:	4905      	ldr	r1, [pc, #20]	@ (800f238 <__assert_func+0x34>)
 800f222:	f000 f841 	bl	800f2a8 <fiprintf>
 800f226:	f000 f851 	bl	800f2cc <abort>
 800f22a:	4b04      	ldr	r3, [pc, #16]	@ (800f23c <__assert_func+0x38>)
 800f22c:	e7f4      	b.n	800f218 <__assert_func+0x14>
 800f22e:	bf00      	nop
 800f230:	2400002c 	.word	0x2400002c
 800f234:	0801065d 	.word	0x0801065d
 800f238:	0801062f 	.word	0x0801062f
 800f23c:	08010622 	.word	0x08010622

0800f240 <_calloc_r>:
 800f240:	b570      	push	{r4, r5, r6, lr}
 800f242:	fba1 5402 	umull	r5, r4, r1, r2
 800f246:	b93c      	cbnz	r4, 800f258 <_calloc_r+0x18>
 800f248:	4629      	mov	r1, r5
 800f24a:	f7ff fb03 	bl	800e854 <_malloc_r>
 800f24e:	4606      	mov	r6, r0
 800f250:	b928      	cbnz	r0, 800f25e <_calloc_r+0x1e>
 800f252:	2600      	movs	r6, #0
 800f254:	4630      	mov	r0, r6
 800f256:	bd70      	pop	{r4, r5, r6, pc}
 800f258:	220c      	movs	r2, #12
 800f25a:	6002      	str	r2, [r0, #0]
 800f25c:	e7f9      	b.n	800f252 <_calloc_r+0x12>
 800f25e:	462a      	mov	r2, r5
 800f260:	4621      	mov	r1, r4
 800f262:	f7fe fc22 	bl	800daaa <memset>
 800f266:	e7f5      	b.n	800f254 <_calloc_r+0x14>

0800f268 <__ascii_mbtowc>:
 800f268:	b082      	sub	sp, #8
 800f26a:	b901      	cbnz	r1, 800f26e <__ascii_mbtowc+0x6>
 800f26c:	a901      	add	r1, sp, #4
 800f26e:	b142      	cbz	r2, 800f282 <__ascii_mbtowc+0x1a>
 800f270:	b14b      	cbz	r3, 800f286 <__ascii_mbtowc+0x1e>
 800f272:	7813      	ldrb	r3, [r2, #0]
 800f274:	600b      	str	r3, [r1, #0]
 800f276:	7812      	ldrb	r2, [r2, #0]
 800f278:	1e10      	subs	r0, r2, #0
 800f27a:	bf18      	it	ne
 800f27c:	2001      	movne	r0, #1
 800f27e:	b002      	add	sp, #8
 800f280:	4770      	bx	lr
 800f282:	4610      	mov	r0, r2
 800f284:	e7fb      	b.n	800f27e <__ascii_mbtowc+0x16>
 800f286:	f06f 0001 	mvn.w	r0, #1
 800f28a:	e7f8      	b.n	800f27e <__ascii_mbtowc+0x16>

0800f28c <__ascii_wctomb>:
 800f28c:	4603      	mov	r3, r0
 800f28e:	4608      	mov	r0, r1
 800f290:	b141      	cbz	r1, 800f2a4 <__ascii_wctomb+0x18>
 800f292:	2aff      	cmp	r2, #255	@ 0xff
 800f294:	d904      	bls.n	800f2a0 <__ascii_wctomb+0x14>
 800f296:	228a      	movs	r2, #138	@ 0x8a
 800f298:	601a      	str	r2, [r3, #0]
 800f29a:	f04f 30ff 	mov.w	r0, #4294967295
 800f29e:	4770      	bx	lr
 800f2a0:	700a      	strb	r2, [r1, #0]
 800f2a2:	2001      	movs	r0, #1
 800f2a4:	4770      	bx	lr
	...

0800f2a8 <fiprintf>:
 800f2a8:	b40e      	push	{r1, r2, r3}
 800f2aa:	b503      	push	{r0, r1, lr}
 800f2ac:	4601      	mov	r1, r0
 800f2ae:	ab03      	add	r3, sp, #12
 800f2b0:	4805      	ldr	r0, [pc, #20]	@ (800f2c8 <fiprintf+0x20>)
 800f2b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2b6:	6800      	ldr	r0, [r0, #0]
 800f2b8:	9301      	str	r3, [sp, #4]
 800f2ba:	f000 f837 	bl	800f32c <_vfiprintf_r>
 800f2be:	b002      	add	sp, #8
 800f2c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2c4:	b003      	add	sp, #12
 800f2c6:	4770      	bx	lr
 800f2c8:	2400002c 	.word	0x2400002c

0800f2cc <abort>:
 800f2cc:	b508      	push	{r3, lr}
 800f2ce:	2006      	movs	r0, #6
 800f2d0:	f000 fa00 	bl	800f6d4 <raise>
 800f2d4:	2001      	movs	r0, #1
 800f2d6:	f7f4 f9f3 	bl	80036c0 <_exit>

0800f2da <__sfputc_r>:
 800f2da:	6893      	ldr	r3, [r2, #8]
 800f2dc:	3b01      	subs	r3, #1
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	b410      	push	{r4}
 800f2e2:	6093      	str	r3, [r2, #8]
 800f2e4:	da08      	bge.n	800f2f8 <__sfputc_r+0x1e>
 800f2e6:	6994      	ldr	r4, [r2, #24]
 800f2e8:	42a3      	cmp	r3, r4
 800f2ea:	db01      	blt.n	800f2f0 <__sfputc_r+0x16>
 800f2ec:	290a      	cmp	r1, #10
 800f2ee:	d103      	bne.n	800f2f8 <__sfputc_r+0x1e>
 800f2f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2f4:	f000 b932 	b.w	800f55c <__swbuf_r>
 800f2f8:	6813      	ldr	r3, [r2, #0]
 800f2fa:	1c58      	adds	r0, r3, #1
 800f2fc:	6010      	str	r0, [r2, #0]
 800f2fe:	7019      	strb	r1, [r3, #0]
 800f300:	4608      	mov	r0, r1
 800f302:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f306:	4770      	bx	lr

0800f308 <__sfputs_r>:
 800f308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f30a:	4606      	mov	r6, r0
 800f30c:	460f      	mov	r7, r1
 800f30e:	4614      	mov	r4, r2
 800f310:	18d5      	adds	r5, r2, r3
 800f312:	42ac      	cmp	r4, r5
 800f314:	d101      	bne.n	800f31a <__sfputs_r+0x12>
 800f316:	2000      	movs	r0, #0
 800f318:	e007      	b.n	800f32a <__sfputs_r+0x22>
 800f31a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f31e:	463a      	mov	r2, r7
 800f320:	4630      	mov	r0, r6
 800f322:	f7ff ffda 	bl	800f2da <__sfputc_r>
 800f326:	1c43      	adds	r3, r0, #1
 800f328:	d1f3      	bne.n	800f312 <__sfputs_r+0xa>
 800f32a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f32c <_vfiprintf_r>:
 800f32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f330:	460d      	mov	r5, r1
 800f332:	b09d      	sub	sp, #116	@ 0x74
 800f334:	4614      	mov	r4, r2
 800f336:	4698      	mov	r8, r3
 800f338:	4606      	mov	r6, r0
 800f33a:	b118      	cbz	r0, 800f344 <_vfiprintf_r+0x18>
 800f33c:	6a03      	ldr	r3, [r0, #32]
 800f33e:	b90b      	cbnz	r3, 800f344 <_vfiprintf_r+0x18>
 800f340:	f7fe fb3a 	bl	800d9b8 <__sinit>
 800f344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f346:	07d9      	lsls	r1, r3, #31
 800f348:	d405      	bmi.n	800f356 <_vfiprintf_r+0x2a>
 800f34a:	89ab      	ldrh	r3, [r5, #12]
 800f34c:	059a      	lsls	r2, r3, #22
 800f34e:	d402      	bmi.n	800f356 <_vfiprintf_r+0x2a>
 800f350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f352:	f7fe fc28 	bl	800dba6 <__retarget_lock_acquire_recursive>
 800f356:	89ab      	ldrh	r3, [r5, #12]
 800f358:	071b      	lsls	r3, r3, #28
 800f35a:	d501      	bpl.n	800f360 <_vfiprintf_r+0x34>
 800f35c:	692b      	ldr	r3, [r5, #16]
 800f35e:	b99b      	cbnz	r3, 800f388 <_vfiprintf_r+0x5c>
 800f360:	4629      	mov	r1, r5
 800f362:	4630      	mov	r0, r6
 800f364:	f000 f938 	bl	800f5d8 <__swsetup_r>
 800f368:	b170      	cbz	r0, 800f388 <_vfiprintf_r+0x5c>
 800f36a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f36c:	07dc      	lsls	r4, r3, #31
 800f36e:	d504      	bpl.n	800f37a <_vfiprintf_r+0x4e>
 800f370:	f04f 30ff 	mov.w	r0, #4294967295
 800f374:	b01d      	add	sp, #116	@ 0x74
 800f376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f37a:	89ab      	ldrh	r3, [r5, #12]
 800f37c:	0598      	lsls	r0, r3, #22
 800f37e:	d4f7      	bmi.n	800f370 <_vfiprintf_r+0x44>
 800f380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f382:	f7fe fc11 	bl	800dba8 <__retarget_lock_release_recursive>
 800f386:	e7f3      	b.n	800f370 <_vfiprintf_r+0x44>
 800f388:	2300      	movs	r3, #0
 800f38a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f38c:	2320      	movs	r3, #32
 800f38e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f392:	f8cd 800c 	str.w	r8, [sp, #12]
 800f396:	2330      	movs	r3, #48	@ 0x30
 800f398:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f548 <_vfiprintf_r+0x21c>
 800f39c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f3a0:	f04f 0901 	mov.w	r9, #1
 800f3a4:	4623      	mov	r3, r4
 800f3a6:	469a      	mov	sl, r3
 800f3a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3ac:	b10a      	cbz	r2, 800f3b2 <_vfiprintf_r+0x86>
 800f3ae:	2a25      	cmp	r2, #37	@ 0x25
 800f3b0:	d1f9      	bne.n	800f3a6 <_vfiprintf_r+0x7a>
 800f3b2:	ebba 0b04 	subs.w	fp, sl, r4
 800f3b6:	d00b      	beq.n	800f3d0 <_vfiprintf_r+0xa4>
 800f3b8:	465b      	mov	r3, fp
 800f3ba:	4622      	mov	r2, r4
 800f3bc:	4629      	mov	r1, r5
 800f3be:	4630      	mov	r0, r6
 800f3c0:	f7ff ffa2 	bl	800f308 <__sfputs_r>
 800f3c4:	3001      	adds	r0, #1
 800f3c6:	f000 80a7 	beq.w	800f518 <_vfiprintf_r+0x1ec>
 800f3ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f3cc:	445a      	add	r2, fp
 800f3ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800f3d0:	f89a 3000 	ldrb.w	r3, [sl]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	f000 809f 	beq.w	800f518 <_vfiprintf_r+0x1ec>
 800f3da:	2300      	movs	r3, #0
 800f3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800f3e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f3e4:	f10a 0a01 	add.w	sl, sl, #1
 800f3e8:	9304      	str	r3, [sp, #16]
 800f3ea:	9307      	str	r3, [sp, #28]
 800f3ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f3f0:	931a      	str	r3, [sp, #104]	@ 0x68
 800f3f2:	4654      	mov	r4, sl
 800f3f4:	2205      	movs	r2, #5
 800f3f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3fa:	4853      	ldr	r0, [pc, #332]	@ (800f548 <_vfiprintf_r+0x21c>)
 800f3fc:	f7f0 ff70 	bl	80002e0 <memchr>
 800f400:	9a04      	ldr	r2, [sp, #16]
 800f402:	b9d8      	cbnz	r0, 800f43c <_vfiprintf_r+0x110>
 800f404:	06d1      	lsls	r1, r2, #27
 800f406:	bf44      	itt	mi
 800f408:	2320      	movmi	r3, #32
 800f40a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f40e:	0713      	lsls	r3, r2, #28
 800f410:	bf44      	itt	mi
 800f412:	232b      	movmi	r3, #43	@ 0x2b
 800f414:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f418:	f89a 3000 	ldrb.w	r3, [sl]
 800f41c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f41e:	d015      	beq.n	800f44c <_vfiprintf_r+0x120>
 800f420:	9a07      	ldr	r2, [sp, #28]
 800f422:	4654      	mov	r4, sl
 800f424:	2000      	movs	r0, #0
 800f426:	f04f 0c0a 	mov.w	ip, #10
 800f42a:	4621      	mov	r1, r4
 800f42c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f430:	3b30      	subs	r3, #48	@ 0x30
 800f432:	2b09      	cmp	r3, #9
 800f434:	d94b      	bls.n	800f4ce <_vfiprintf_r+0x1a2>
 800f436:	b1b0      	cbz	r0, 800f466 <_vfiprintf_r+0x13a>
 800f438:	9207      	str	r2, [sp, #28]
 800f43a:	e014      	b.n	800f466 <_vfiprintf_r+0x13a>
 800f43c:	eba0 0308 	sub.w	r3, r0, r8
 800f440:	fa09 f303 	lsl.w	r3, r9, r3
 800f444:	4313      	orrs	r3, r2
 800f446:	9304      	str	r3, [sp, #16]
 800f448:	46a2      	mov	sl, r4
 800f44a:	e7d2      	b.n	800f3f2 <_vfiprintf_r+0xc6>
 800f44c:	9b03      	ldr	r3, [sp, #12]
 800f44e:	1d19      	adds	r1, r3, #4
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	9103      	str	r1, [sp, #12]
 800f454:	2b00      	cmp	r3, #0
 800f456:	bfbb      	ittet	lt
 800f458:	425b      	neglt	r3, r3
 800f45a:	f042 0202 	orrlt.w	r2, r2, #2
 800f45e:	9307      	strge	r3, [sp, #28]
 800f460:	9307      	strlt	r3, [sp, #28]
 800f462:	bfb8      	it	lt
 800f464:	9204      	strlt	r2, [sp, #16]
 800f466:	7823      	ldrb	r3, [r4, #0]
 800f468:	2b2e      	cmp	r3, #46	@ 0x2e
 800f46a:	d10a      	bne.n	800f482 <_vfiprintf_r+0x156>
 800f46c:	7863      	ldrb	r3, [r4, #1]
 800f46e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f470:	d132      	bne.n	800f4d8 <_vfiprintf_r+0x1ac>
 800f472:	9b03      	ldr	r3, [sp, #12]
 800f474:	1d1a      	adds	r2, r3, #4
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	9203      	str	r2, [sp, #12]
 800f47a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f47e:	3402      	adds	r4, #2
 800f480:	9305      	str	r3, [sp, #20]
 800f482:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f558 <_vfiprintf_r+0x22c>
 800f486:	7821      	ldrb	r1, [r4, #0]
 800f488:	2203      	movs	r2, #3
 800f48a:	4650      	mov	r0, sl
 800f48c:	f7f0 ff28 	bl	80002e0 <memchr>
 800f490:	b138      	cbz	r0, 800f4a2 <_vfiprintf_r+0x176>
 800f492:	9b04      	ldr	r3, [sp, #16]
 800f494:	eba0 000a 	sub.w	r0, r0, sl
 800f498:	2240      	movs	r2, #64	@ 0x40
 800f49a:	4082      	lsls	r2, r0
 800f49c:	4313      	orrs	r3, r2
 800f49e:	3401      	adds	r4, #1
 800f4a0:	9304      	str	r3, [sp, #16]
 800f4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4a6:	4829      	ldr	r0, [pc, #164]	@ (800f54c <_vfiprintf_r+0x220>)
 800f4a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f4ac:	2206      	movs	r2, #6
 800f4ae:	f7f0 ff17 	bl	80002e0 <memchr>
 800f4b2:	2800      	cmp	r0, #0
 800f4b4:	d03f      	beq.n	800f536 <_vfiprintf_r+0x20a>
 800f4b6:	4b26      	ldr	r3, [pc, #152]	@ (800f550 <_vfiprintf_r+0x224>)
 800f4b8:	bb1b      	cbnz	r3, 800f502 <_vfiprintf_r+0x1d6>
 800f4ba:	9b03      	ldr	r3, [sp, #12]
 800f4bc:	3307      	adds	r3, #7
 800f4be:	f023 0307 	bic.w	r3, r3, #7
 800f4c2:	3308      	adds	r3, #8
 800f4c4:	9303      	str	r3, [sp, #12]
 800f4c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4c8:	443b      	add	r3, r7
 800f4ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4cc:	e76a      	b.n	800f3a4 <_vfiprintf_r+0x78>
 800f4ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800f4d2:	460c      	mov	r4, r1
 800f4d4:	2001      	movs	r0, #1
 800f4d6:	e7a8      	b.n	800f42a <_vfiprintf_r+0xfe>
 800f4d8:	2300      	movs	r3, #0
 800f4da:	3401      	adds	r4, #1
 800f4dc:	9305      	str	r3, [sp, #20]
 800f4de:	4619      	mov	r1, r3
 800f4e0:	f04f 0c0a 	mov.w	ip, #10
 800f4e4:	4620      	mov	r0, r4
 800f4e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f4ea:	3a30      	subs	r2, #48	@ 0x30
 800f4ec:	2a09      	cmp	r2, #9
 800f4ee:	d903      	bls.n	800f4f8 <_vfiprintf_r+0x1cc>
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d0c6      	beq.n	800f482 <_vfiprintf_r+0x156>
 800f4f4:	9105      	str	r1, [sp, #20]
 800f4f6:	e7c4      	b.n	800f482 <_vfiprintf_r+0x156>
 800f4f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f4fc:	4604      	mov	r4, r0
 800f4fe:	2301      	movs	r3, #1
 800f500:	e7f0      	b.n	800f4e4 <_vfiprintf_r+0x1b8>
 800f502:	ab03      	add	r3, sp, #12
 800f504:	9300      	str	r3, [sp, #0]
 800f506:	462a      	mov	r2, r5
 800f508:	4b12      	ldr	r3, [pc, #72]	@ (800f554 <_vfiprintf_r+0x228>)
 800f50a:	a904      	add	r1, sp, #16
 800f50c:	4630      	mov	r0, r6
 800f50e:	f7fd fe1f 	bl	800d150 <_printf_float>
 800f512:	4607      	mov	r7, r0
 800f514:	1c78      	adds	r0, r7, #1
 800f516:	d1d6      	bne.n	800f4c6 <_vfiprintf_r+0x19a>
 800f518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f51a:	07d9      	lsls	r1, r3, #31
 800f51c:	d405      	bmi.n	800f52a <_vfiprintf_r+0x1fe>
 800f51e:	89ab      	ldrh	r3, [r5, #12]
 800f520:	059a      	lsls	r2, r3, #22
 800f522:	d402      	bmi.n	800f52a <_vfiprintf_r+0x1fe>
 800f524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f526:	f7fe fb3f 	bl	800dba8 <__retarget_lock_release_recursive>
 800f52a:	89ab      	ldrh	r3, [r5, #12]
 800f52c:	065b      	lsls	r3, r3, #25
 800f52e:	f53f af1f 	bmi.w	800f370 <_vfiprintf_r+0x44>
 800f532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f534:	e71e      	b.n	800f374 <_vfiprintf_r+0x48>
 800f536:	ab03      	add	r3, sp, #12
 800f538:	9300      	str	r3, [sp, #0]
 800f53a:	462a      	mov	r2, r5
 800f53c:	4b05      	ldr	r3, [pc, #20]	@ (800f554 <_vfiprintf_r+0x228>)
 800f53e:	a904      	add	r1, sp, #16
 800f540:	4630      	mov	r0, r6
 800f542:	f7fe f88d 	bl	800d660 <_printf_i>
 800f546:	e7e4      	b.n	800f512 <_vfiprintf_r+0x1e6>
 800f548:	0801075f 	.word	0x0801075f
 800f54c:	08010769 	.word	0x08010769
 800f550:	0800d151 	.word	0x0800d151
 800f554:	0800f309 	.word	0x0800f309
 800f558:	08010765 	.word	0x08010765

0800f55c <__swbuf_r>:
 800f55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f55e:	460e      	mov	r6, r1
 800f560:	4614      	mov	r4, r2
 800f562:	4605      	mov	r5, r0
 800f564:	b118      	cbz	r0, 800f56e <__swbuf_r+0x12>
 800f566:	6a03      	ldr	r3, [r0, #32]
 800f568:	b90b      	cbnz	r3, 800f56e <__swbuf_r+0x12>
 800f56a:	f7fe fa25 	bl	800d9b8 <__sinit>
 800f56e:	69a3      	ldr	r3, [r4, #24]
 800f570:	60a3      	str	r3, [r4, #8]
 800f572:	89a3      	ldrh	r3, [r4, #12]
 800f574:	071a      	lsls	r2, r3, #28
 800f576:	d501      	bpl.n	800f57c <__swbuf_r+0x20>
 800f578:	6923      	ldr	r3, [r4, #16]
 800f57a:	b943      	cbnz	r3, 800f58e <__swbuf_r+0x32>
 800f57c:	4621      	mov	r1, r4
 800f57e:	4628      	mov	r0, r5
 800f580:	f000 f82a 	bl	800f5d8 <__swsetup_r>
 800f584:	b118      	cbz	r0, 800f58e <__swbuf_r+0x32>
 800f586:	f04f 37ff 	mov.w	r7, #4294967295
 800f58a:	4638      	mov	r0, r7
 800f58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f58e:	6823      	ldr	r3, [r4, #0]
 800f590:	6922      	ldr	r2, [r4, #16]
 800f592:	1a98      	subs	r0, r3, r2
 800f594:	6963      	ldr	r3, [r4, #20]
 800f596:	b2f6      	uxtb	r6, r6
 800f598:	4283      	cmp	r3, r0
 800f59a:	4637      	mov	r7, r6
 800f59c:	dc05      	bgt.n	800f5aa <__swbuf_r+0x4e>
 800f59e:	4621      	mov	r1, r4
 800f5a0:	4628      	mov	r0, r5
 800f5a2:	f7ff fde9 	bl	800f178 <_fflush_r>
 800f5a6:	2800      	cmp	r0, #0
 800f5a8:	d1ed      	bne.n	800f586 <__swbuf_r+0x2a>
 800f5aa:	68a3      	ldr	r3, [r4, #8]
 800f5ac:	3b01      	subs	r3, #1
 800f5ae:	60a3      	str	r3, [r4, #8]
 800f5b0:	6823      	ldr	r3, [r4, #0]
 800f5b2:	1c5a      	adds	r2, r3, #1
 800f5b4:	6022      	str	r2, [r4, #0]
 800f5b6:	701e      	strb	r6, [r3, #0]
 800f5b8:	6962      	ldr	r2, [r4, #20]
 800f5ba:	1c43      	adds	r3, r0, #1
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d004      	beq.n	800f5ca <__swbuf_r+0x6e>
 800f5c0:	89a3      	ldrh	r3, [r4, #12]
 800f5c2:	07db      	lsls	r3, r3, #31
 800f5c4:	d5e1      	bpl.n	800f58a <__swbuf_r+0x2e>
 800f5c6:	2e0a      	cmp	r6, #10
 800f5c8:	d1df      	bne.n	800f58a <__swbuf_r+0x2e>
 800f5ca:	4621      	mov	r1, r4
 800f5cc:	4628      	mov	r0, r5
 800f5ce:	f7ff fdd3 	bl	800f178 <_fflush_r>
 800f5d2:	2800      	cmp	r0, #0
 800f5d4:	d0d9      	beq.n	800f58a <__swbuf_r+0x2e>
 800f5d6:	e7d6      	b.n	800f586 <__swbuf_r+0x2a>

0800f5d8 <__swsetup_r>:
 800f5d8:	b538      	push	{r3, r4, r5, lr}
 800f5da:	4b29      	ldr	r3, [pc, #164]	@ (800f680 <__swsetup_r+0xa8>)
 800f5dc:	4605      	mov	r5, r0
 800f5de:	6818      	ldr	r0, [r3, #0]
 800f5e0:	460c      	mov	r4, r1
 800f5e2:	b118      	cbz	r0, 800f5ec <__swsetup_r+0x14>
 800f5e4:	6a03      	ldr	r3, [r0, #32]
 800f5e6:	b90b      	cbnz	r3, 800f5ec <__swsetup_r+0x14>
 800f5e8:	f7fe f9e6 	bl	800d9b8 <__sinit>
 800f5ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5f0:	0719      	lsls	r1, r3, #28
 800f5f2:	d422      	bmi.n	800f63a <__swsetup_r+0x62>
 800f5f4:	06da      	lsls	r2, r3, #27
 800f5f6:	d407      	bmi.n	800f608 <__swsetup_r+0x30>
 800f5f8:	2209      	movs	r2, #9
 800f5fa:	602a      	str	r2, [r5, #0]
 800f5fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f600:	81a3      	strh	r3, [r4, #12]
 800f602:	f04f 30ff 	mov.w	r0, #4294967295
 800f606:	e033      	b.n	800f670 <__swsetup_r+0x98>
 800f608:	0758      	lsls	r0, r3, #29
 800f60a:	d512      	bpl.n	800f632 <__swsetup_r+0x5a>
 800f60c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f60e:	b141      	cbz	r1, 800f622 <__swsetup_r+0x4a>
 800f610:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f614:	4299      	cmp	r1, r3
 800f616:	d002      	beq.n	800f61e <__swsetup_r+0x46>
 800f618:	4628      	mov	r0, r5
 800f61a:	f7ff f8a7 	bl	800e76c <_free_r>
 800f61e:	2300      	movs	r3, #0
 800f620:	6363      	str	r3, [r4, #52]	@ 0x34
 800f622:	89a3      	ldrh	r3, [r4, #12]
 800f624:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f628:	81a3      	strh	r3, [r4, #12]
 800f62a:	2300      	movs	r3, #0
 800f62c:	6063      	str	r3, [r4, #4]
 800f62e:	6923      	ldr	r3, [r4, #16]
 800f630:	6023      	str	r3, [r4, #0]
 800f632:	89a3      	ldrh	r3, [r4, #12]
 800f634:	f043 0308 	orr.w	r3, r3, #8
 800f638:	81a3      	strh	r3, [r4, #12]
 800f63a:	6923      	ldr	r3, [r4, #16]
 800f63c:	b94b      	cbnz	r3, 800f652 <__swsetup_r+0x7a>
 800f63e:	89a3      	ldrh	r3, [r4, #12]
 800f640:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f648:	d003      	beq.n	800f652 <__swsetup_r+0x7a>
 800f64a:	4621      	mov	r1, r4
 800f64c:	4628      	mov	r0, r5
 800f64e:	f000 f883 	bl	800f758 <__smakebuf_r>
 800f652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f656:	f013 0201 	ands.w	r2, r3, #1
 800f65a:	d00a      	beq.n	800f672 <__swsetup_r+0x9a>
 800f65c:	2200      	movs	r2, #0
 800f65e:	60a2      	str	r2, [r4, #8]
 800f660:	6962      	ldr	r2, [r4, #20]
 800f662:	4252      	negs	r2, r2
 800f664:	61a2      	str	r2, [r4, #24]
 800f666:	6922      	ldr	r2, [r4, #16]
 800f668:	b942      	cbnz	r2, 800f67c <__swsetup_r+0xa4>
 800f66a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f66e:	d1c5      	bne.n	800f5fc <__swsetup_r+0x24>
 800f670:	bd38      	pop	{r3, r4, r5, pc}
 800f672:	0799      	lsls	r1, r3, #30
 800f674:	bf58      	it	pl
 800f676:	6962      	ldrpl	r2, [r4, #20]
 800f678:	60a2      	str	r2, [r4, #8]
 800f67a:	e7f4      	b.n	800f666 <__swsetup_r+0x8e>
 800f67c:	2000      	movs	r0, #0
 800f67e:	e7f7      	b.n	800f670 <__swsetup_r+0x98>
 800f680:	2400002c 	.word	0x2400002c

0800f684 <_raise_r>:
 800f684:	291f      	cmp	r1, #31
 800f686:	b538      	push	{r3, r4, r5, lr}
 800f688:	4605      	mov	r5, r0
 800f68a:	460c      	mov	r4, r1
 800f68c:	d904      	bls.n	800f698 <_raise_r+0x14>
 800f68e:	2316      	movs	r3, #22
 800f690:	6003      	str	r3, [r0, #0]
 800f692:	f04f 30ff 	mov.w	r0, #4294967295
 800f696:	bd38      	pop	{r3, r4, r5, pc}
 800f698:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f69a:	b112      	cbz	r2, 800f6a2 <_raise_r+0x1e>
 800f69c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f6a0:	b94b      	cbnz	r3, 800f6b6 <_raise_r+0x32>
 800f6a2:	4628      	mov	r0, r5
 800f6a4:	f000 f830 	bl	800f708 <_getpid_r>
 800f6a8:	4622      	mov	r2, r4
 800f6aa:	4601      	mov	r1, r0
 800f6ac:	4628      	mov	r0, r5
 800f6ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6b2:	f000 b817 	b.w	800f6e4 <_kill_r>
 800f6b6:	2b01      	cmp	r3, #1
 800f6b8:	d00a      	beq.n	800f6d0 <_raise_r+0x4c>
 800f6ba:	1c59      	adds	r1, r3, #1
 800f6bc:	d103      	bne.n	800f6c6 <_raise_r+0x42>
 800f6be:	2316      	movs	r3, #22
 800f6c0:	6003      	str	r3, [r0, #0]
 800f6c2:	2001      	movs	r0, #1
 800f6c4:	e7e7      	b.n	800f696 <_raise_r+0x12>
 800f6c6:	2100      	movs	r1, #0
 800f6c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f6cc:	4620      	mov	r0, r4
 800f6ce:	4798      	blx	r3
 800f6d0:	2000      	movs	r0, #0
 800f6d2:	e7e0      	b.n	800f696 <_raise_r+0x12>

0800f6d4 <raise>:
 800f6d4:	4b02      	ldr	r3, [pc, #8]	@ (800f6e0 <raise+0xc>)
 800f6d6:	4601      	mov	r1, r0
 800f6d8:	6818      	ldr	r0, [r3, #0]
 800f6da:	f7ff bfd3 	b.w	800f684 <_raise_r>
 800f6de:	bf00      	nop
 800f6e0:	2400002c 	.word	0x2400002c

0800f6e4 <_kill_r>:
 800f6e4:	b538      	push	{r3, r4, r5, lr}
 800f6e6:	4d07      	ldr	r5, [pc, #28]	@ (800f704 <_kill_r+0x20>)
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	4604      	mov	r4, r0
 800f6ec:	4608      	mov	r0, r1
 800f6ee:	4611      	mov	r1, r2
 800f6f0:	602b      	str	r3, [r5, #0]
 800f6f2:	f7f3 ffd5 	bl	80036a0 <_kill>
 800f6f6:	1c43      	adds	r3, r0, #1
 800f6f8:	d102      	bne.n	800f700 <_kill_r+0x1c>
 800f6fa:	682b      	ldr	r3, [r5, #0]
 800f6fc:	b103      	cbz	r3, 800f700 <_kill_r+0x1c>
 800f6fe:	6023      	str	r3, [r4, #0]
 800f700:	bd38      	pop	{r3, r4, r5, pc}
 800f702:	bf00      	nop
 800f704:	240037a4 	.word	0x240037a4

0800f708 <_getpid_r>:
 800f708:	f7f3 bfc2 	b.w	8003690 <_getpid>

0800f70c <__swhatbuf_r>:
 800f70c:	b570      	push	{r4, r5, r6, lr}
 800f70e:	460c      	mov	r4, r1
 800f710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f714:	2900      	cmp	r1, #0
 800f716:	b096      	sub	sp, #88	@ 0x58
 800f718:	4615      	mov	r5, r2
 800f71a:	461e      	mov	r6, r3
 800f71c:	da0d      	bge.n	800f73a <__swhatbuf_r+0x2e>
 800f71e:	89a3      	ldrh	r3, [r4, #12]
 800f720:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f724:	f04f 0100 	mov.w	r1, #0
 800f728:	bf14      	ite	ne
 800f72a:	2340      	movne	r3, #64	@ 0x40
 800f72c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f730:	2000      	movs	r0, #0
 800f732:	6031      	str	r1, [r6, #0]
 800f734:	602b      	str	r3, [r5, #0]
 800f736:	b016      	add	sp, #88	@ 0x58
 800f738:	bd70      	pop	{r4, r5, r6, pc}
 800f73a:	466a      	mov	r2, sp
 800f73c:	f000 f848 	bl	800f7d0 <_fstat_r>
 800f740:	2800      	cmp	r0, #0
 800f742:	dbec      	blt.n	800f71e <__swhatbuf_r+0x12>
 800f744:	9901      	ldr	r1, [sp, #4]
 800f746:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f74a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f74e:	4259      	negs	r1, r3
 800f750:	4159      	adcs	r1, r3
 800f752:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f756:	e7eb      	b.n	800f730 <__swhatbuf_r+0x24>

0800f758 <__smakebuf_r>:
 800f758:	898b      	ldrh	r3, [r1, #12]
 800f75a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f75c:	079d      	lsls	r5, r3, #30
 800f75e:	4606      	mov	r6, r0
 800f760:	460c      	mov	r4, r1
 800f762:	d507      	bpl.n	800f774 <__smakebuf_r+0x1c>
 800f764:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f768:	6023      	str	r3, [r4, #0]
 800f76a:	6123      	str	r3, [r4, #16]
 800f76c:	2301      	movs	r3, #1
 800f76e:	6163      	str	r3, [r4, #20]
 800f770:	b003      	add	sp, #12
 800f772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f774:	ab01      	add	r3, sp, #4
 800f776:	466a      	mov	r2, sp
 800f778:	f7ff ffc8 	bl	800f70c <__swhatbuf_r>
 800f77c:	9f00      	ldr	r7, [sp, #0]
 800f77e:	4605      	mov	r5, r0
 800f780:	4639      	mov	r1, r7
 800f782:	4630      	mov	r0, r6
 800f784:	f7ff f866 	bl	800e854 <_malloc_r>
 800f788:	b948      	cbnz	r0, 800f79e <__smakebuf_r+0x46>
 800f78a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f78e:	059a      	lsls	r2, r3, #22
 800f790:	d4ee      	bmi.n	800f770 <__smakebuf_r+0x18>
 800f792:	f023 0303 	bic.w	r3, r3, #3
 800f796:	f043 0302 	orr.w	r3, r3, #2
 800f79a:	81a3      	strh	r3, [r4, #12]
 800f79c:	e7e2      	b.n	800f764 <__smakebuf_r+0xc>
 800f79e:	89a3      	ldrh	r3, [r4, #12]
 800f7a0:	6020      	str	r0, [r4, #0]
 800f7a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f7a6:	81a3      	strh	r3, [r4, #12]
 800f7a8:	9b01      	ldr	r3, [sp, #4]
 800f7aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f7ae:	b15b      	cbz	r3, 800f7c8 <__smakebuf_r+0x70>
 800f7b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7b4:	4630      	mov	r0, r6
 800f7b6:	f000 f81d 	bl	800f7f4 <_isatty_r>
 800f7ba:	b128      	cbz	r0, 800f7c8 <__smakebuf_r+0x70>
 800f7bc:	89a3      	ldrh	r3, [r4, #12]
 800f7be:	f023 0303 	bic.w	r3, r3, #3
 800f7c2:	f043 0301 	orr.w	r3, r3, #1
 800f7c6:	81a3      	strh	r3, [r4, #12]
 800f7c8:	89a3      	ldrh	r3, [r4, #12]
 800f7ca:	431d      	orrs	r5, r3
 800f7cc:	81a5      	strh	r5, [r4, #12]
 800f7ce:	e7cf      	b.n	800f770 <__smakebuf_r+0x18>

0800f7d0 <_fstat_r>:
 800f7d0:	b538      	push	{r3, r4, r5, lr}
 800f7d2:	4d07      	ldr	r5, [pc, #28]	@ (800f7f0 <_fstat_r+0x20>)
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	4604      	mov	r4, r0
 800f7d8:	4608      	mov	r0, r1
 800f7da:	4611      	mov	r1, r2
 800f7dc:	602b      	str	r3, [r5, #0]
 800f7de:	f7f3 ffbf 	bl	8003760 <_fstat>
 800f7e2:	1c43      	adds	r3, r0, #1
 800f7e4:	d102      	bne.n	800f7ec <_fstat_r+0x1c>
 800f7e6:	682b      	ldr	r3, [r5, #0]
 800f7e8:	b103      	cbz	r3, 800f7ec <_fstat_r+0x1c>
 800f7ea:	6023      	str	r3, [r4, #0]
 800f7ec:	bd38      	pop	{r3, r4, r5, pc}
 800f7ee:	bf00      	nop
 800f7f0:	240037a4 	.word	0x240037a4

0800f7f4 <_isatty_r>:
 800f7f4:	b538      	push	{r3, r4, r5, lr}
 800f7f6:	4d06      	ldr	r5, [pc, #24]	@ (800f810 <_isatty_r+0x1c>)
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	4604      	mov	r4, r0
 800f7fc:	4608      	mov	r0, r1
 800f7fe:	602b      	str	r3, [r5, #0]
 800f800:	f7f3 ffbe 	bl	8003780 <_isatty>
 800f804:	1c43      	adds	r3, r0, #1
 800f806:	d102      	bne.n	800f80e <_isatty_r+0x1a>
 800f808:	682b      	ldr	r3, [r5, #0]
 800f80a:	b103      	cbz	r3, 800f80e <_isatty_r+0x1a>
 800f80c:	6023      	str	r3, [r4, #0]
 800f80e:	bd38      	pop	{r3, r4, r5, pc}
 800f810:	240037a4 	.word	0x240037a4
 800f814:	00000000 	.word	0x00000000

0800f818 <sin>:
 800f818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f81a:	eeb0 7b40 	vmov.f64	d7, d0
 800f81e:	ee17 3a90 	vmov	r3, s15
 800f822:	4a21      	ldr	r2, [pc, #132]	@ (800f8a8 <sin+0x90>)
 800f824:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f828:	4293      	cmp	r3, r2
 800f82a:	d807      	bhi.n	800f83c <sin+0x24>
 800f82c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800f8a0 <sin+0x88>
 800f830:	2000      	movs	r0, #0
 800f832:	b005      	add	sp, #20
 800f834:	f85d eb04 	ldr.w	lr, [sp], #4
 800f838:	f000 b8a2 	b.w	800f980 <__kernel_sin>
 800f83c:	4a1b      	ldr	r2, [pc, #108]	@ (800f8ac <sin+0x94>)
 800f83e:	4293      	cmp	r3, r2
 800f840:	d904      	bls.n	800f84c <sin+0x34>
 800f842:	ee30 0b40 	vsub.f64	d0, d0, d0
 800f846:	b005      	add	sp, #20
 800f848:	f85d fb04 	ldr.w	pc, [sp], #4
 800f84c:	4668      	mov	r0, sp
 800f84e:	f000 f8ef 	bl	800fa30 <__ieee754_rem_pio2>
 800f852:	f000 0003 	and.w	r0, r0, #3
 800f856:	2801      	cmp	r0, #1
 800f858:	d00a      	beq.n	800f870 <sin+0x58>
 800f85a:	2802      	cmp	r0, #2
 800f85c:	d00f      	beq.n	800f87e <sin+0x66>
 800f85e:	b9c0      	cbnz	r0, 800f892 <sin+0x7a>
 800f860:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f864:	ed9d 0b00 	vldr	d0, [sp]
 800f868:	2001      	movs	r0, #1
 800f86a:	f000 f889 	bl	800f980 <__kernel_sin>
 800f86e:	e7ea      	b.n	800f846 <sin+0x2e>
 800f870:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f874:	ed9d 0b00 	vldr	d0, [sp]
 800f878:	f000 f81a 	bl	800f8b0 <__kernel_cos>
 800f87c:	e7e3      	b.n	800f846 <sin+0x2e>
 800f87e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f882:	ed9d 0b00 	vldr	d0, [sp]
 800f886:	2001      	movs	r0, #1
 800f888:	f000 f87a 	bl	800f980 <__kernel_sin>
 800f88c:	eeb1 0b40 	vneg.f64	d0, d0
 800f890:	e7d9      	b.n	800f846 <sin+0x2e>
 800f892:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f896:	ed9d 0b00 	vldr	d0, [sp]
 800f89a:	f000 f809 	bl	800f8b0 <__kernel_cos>
 800f89e:	e7f5      	b.n	800f88c <sin+0x74>
	...
 800f8a8:	3fe921fb 	.word	0x3fe921fb
 800f8ac:	7fefffff 	.word	0x7fefffff

0800f8b0 <__kernel_cos>:
 800f8b0:	eeb0 5b40 	vmov.f64	d5, d0
 800f8b4:	ee15 1a90 	vmov	r1, s11
 800f8b8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800f8bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800f8c0:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800f8c4:	d204      	bcs.n	800f8d0 <__kernel_cos+0x20>
 800f8c6:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800f8ca:	ee17 3a90 	vmov	r3, s15
 800f8ce:	b343      	cbz	r3, 800f922 <__kernel_cos+0x72>
 800f8d0:	ee25 6b05 	vmul.f64	d6, d5, d5
 800f8d4:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800f8d8:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800f948 <__kernel_cos+0x98>
 800f8dc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800f950 <__kernel_cos+0xa0>
 800f8e0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f8e4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800f958 <__kernel_cos+0xa8>
 800f8e8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f8ec:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800f960 <__kernel_cos+0xb0>
 800f8f0:	eea7 4b06 	vfma.f64	d4, d7, d6
 800f8f4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800f968 <__kernel_cos+0xb8>
 800f8f8:	4b1f      	ldr	r3, [pc, #124]	@ (800f978 <__kernel_cos+0xc8>)
 800f8fa:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f8fe:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800f970 <__kernel_cos+0xc0>
 800f902:	4299      	cmp	r1, r3
 800f904:	eea7 4b06 	vfma.f64	d4, d7, d6
 800f908:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800f90c:	ee24 4b06 	vmul.f64	d4, d4, d6
 800f910:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f914:	eea6 1b04 	vfma.f64	d1, d6, d4
 800f918:	d804      	bhi.n	800f924 <__kernel_cos+0x74>
 800f91a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800f91e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800f922:	4770      	bx	lr
 800f924:	4b15      	ldr	r3, [pc, #84]	@ (800f97c <__kernel_cos+0xcc>)
 800f926:	4299      	cmp	r1, r3
 800f928:	d809      	bhi.n	800f93e <__kernel_cos+0x8e>
 800f92a:	2200      	movs	r2, #0
 800f92c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800f930:	ec43 2b16 	vmov	d6, r2, r3
 800f934:	ee30 0b46 	vsub.f64	d0, d0, d6
 800f938:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f93c:	e7ed      	b.n	800f91a <__kernel_cos+0x6a>
 800f93e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800f942:	e7f7      	b.n	800f934 <__kernel_cos+0x84>
 800f944:	f3af 8000 	nop.w
 800f948:	be8838d4 	.word	0xbe8838d4
 800f94c:	bda8fae9 	.word	0xbda8fae9
 800f950:	bdb4b1c4 	.word	0xbdb4b1c4
 800f954:	3e21ee9e 	.word	0x3e21ee9e
 800f958:	809c52ad 	.word	0x809c52ad
 800f95c:	be927e4f 	.word	0xbe927e4f
 800f960:	19cb1590 	.word	0x19cb1590
 800f964:	3efa01a0 	.word	0x3efa01a0
 800f968:	16c15177 	.word	0x16c15177
 800f96c:	bf56c16c 	.word	0xbf56c16c
 800f970:	5555554c 	.word	0x5555554c
 800f974:	3fa55555 	.word	0x3fa55555
 800f978:	3fd33332 	.word	0x3fd33332
 800f97c:	3fe90000 	.word	0x3fe90000

0800f980 <__kernel_sin>:
 800f980:	ee10 3a90 	vmov	r3, s1
 800f984:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f988:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800f98c:	d204      	bcs.n	800f998 <__kernel_sin+0x18>
 800f98e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800f992:	ee17 3a90 	vmov	r3, s15
 800f996:	b35b      	cbz	r3, 800f9f0 <__kernel_sin+0x70>
 800f998:	ee20 6b00 	vmul.f64	d6, d0, d0
 800f99c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800f9a0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800f9f8 <__kernel_sin+0x78>
 800f9a4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800fa00 <__kernel_sin+0x80>
 800f9a8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f9ac:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800fa08 <__kernel_sin+0x88>
 800f9b0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f9b4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800fa10 <__kernel_sin+0x90>
 800f9b8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800f9bc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800fa18 <__kernel_sin+0x98>
 800f9c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f9c4:	b930      	cbnz	r0, 800f9d4 <__kernel_sin+0x54>
 800f9c6:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800fa20 <__kernel_sin+0xa0>
 800f9ca:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f9ce:	eea4 0b05 	vfma.f64	d0, d4, d5
 800f9d2:	4770      	bx	lr
 800f9d4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800f9d8:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800f9dc:	eea1 7b04 	vfma.f64	d7, d1, d4
 800f9e0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800f9e4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800fa28 <__kernel_sin+0xa8>
 800f9e8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800f9ec:	ee30 0b41 	vsub.f64	d0, d0, d1
 800f9f0:	4770      	bx	lr
 800f9f2:	bf00      	nop
 800f9f4:	f3af 8000 	nop.w
 800f9f8:	5acfd57c 	.word	0x5acfd57c
 800f9fc:	3de5d93a 	.word	0x3de5d93a
 800fa00:	8a2b9ceb 	.word	0x8a2b9ceb
 800fa04:	be5ae5e6 	.word	0xbe5ae5e6
 800fa08:	57b1fe7d 	.word	0x57b1fe7d
 800fa0c:	3ec71de3 	.word	0x3ec71de3
 800fa10:	19c161d5 	.word	0x19c161d5
 800fa14:	bf2a01a0 	.word	0xbf2a01a0
 800fa18:	1110f8a6 	.word	0x1110f8a6
 800fa1c:	3f811111 	.word	0x3f811111
 800fa20:	55555549 	.word	0x55555549
 800fa24:	bfc55555 	.word	0xbfc55555
 800fa28:	55555549 	.word	0x55555549
 800fa2c:	3fc55555 	.word	0x3fc55555

0800fa30 <__ieee754_rem_pio2>:
 800fa30:	b570      	push	{r4, r5, r6, lr}
 800fa32:	eeb0 7b40 	vmov.f64	d7, d0
 800fa36:	ee17 5a90 	vmov	r5, s15
 800fa3a:	4b99      	ldr	r3, [pc, #612]	@ (800fca0 <__ieee754_rem_pio2+0x270>)
 800fa3c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800fa40:	429e      	cmp	r6, r3
 800fa42:	b088      	sub	sp, #32
 800fa44:	4604      	mov	r4, r0
 800fa46:	d807      	bhi.n	800fa58 <__ieee754_rem_pio2+0x28>
 800fa48:	2200      	movs	r2, #0
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	ed84 0b00 	vstr	d0, [r4]
 800fa50:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fa54:	2000      	movs	r0, #0
 800fa56:	e01b      	b.n	800fa90 <__ieee754_rem_pio2+0x60>
 800fa58:	4b92      	ldr	r3, [pc, #584]	@ (800fca4 <__ieee754_rem_pio2+0x274>)
 800fa5a:	429e      	cmp	r6, r3
 800fa5c:	d83b      	bhi.n	800fad6 <__ieee754_rem_pio2+0xa6>
 800fa5e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800fa62:	2d00      	cmp	r5, #0
 800fa64:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800fc60 <__ieee754_rem_pio2+0x230>
 800fa68:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800fa6c:	dd19      	ble.n	800faa2 <__ieee754_rem_pio2+0x72>
 800fa6e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800fa72:	429e      	cmp	r6, r3
 800fa74:	d00e      	beq.n	800fa94 <__ieee754_rem_pio2+0x64>
 800fa76:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800fc68 <__ieee754_rem_pio2+0x238>
 800fa7a:	ee37 6b45 	vsub.f64	d6, d7, d5
 800fa7e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fa82:	ed84 6b00 	vstr	d6, [r4]
 800fa86:	ee37 7b45 	vsub.f64	d7, d7, d5
 800fa8a:	ed84 7b02 	vstr	d7, [r4, #8]
 800fa8e:	2001      	movs	r0, #1
 800fa90:	b008      	add	sp, #32
 800fa92:	bd70      	pop	{r4, r5, r6, pc}
 800fa94:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800fc70 <__ieee754_rem_pio2+0x240>
 800fa98:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800fc78 <__ieee754_rem_pio2+0x248>
 800fa9c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800faa0:	e7eb      	b.n	800fa7a <__ieee754_rem_pio2+0x4a>
 800faa2:	429e      	cmp	r6, r3
 800faa4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800faa8:	d00e      	beq.n	800fac8 <__ieee754_rem_pio2+0x98>
 800faaa:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800fc68 <__ieee754_rem_pio2+0x238>
 800faae:	ee37 6b05 	vadd.f64	d6, d7, d5
 800fab2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fab6:	ed84 6b00 	vstr	d6, [r4]
 800faba:	ee37 7b05 	vadd.f64	d7, d7, d5
 800fabe:	f04f 30ff 	mov.w	r0, #4294967295
 800fac2:	ed84 7b02 	vstr	d7, [r4, #8]
 800fac6:	e7e3      	b.n	800fa90 <__ieee754_rem_pio2+0x60>
 800fac8:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800fc70 <__ieee754_rem_pio2+0x240>
 800facc:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800fc78 <__ieee754_rem_pio2+0x248>
 800fad0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fad4:	e7eb      	b.n	800faae <__ieee754_rem_pio2+0x7e>
 800fad6:	4b74      	ldr	r3, [pc, #464]	@ (800fca8 <__ieee754_rem_pio2+0x278>)
 800fad8:	429e      	cmp	r6, r3
 800fada:	d870      	bhi.n	800fbbe <__ieee754_rem_pio2+0x18e>
 800fadc:	f000 f8ec 	bl	800fcb8 <fabs>
 800fae0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800fae4:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800fc80 <__ieee754_rem_pio2+0x250>
 800fae8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800faec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800faf0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800faf4:	ee17 0a90 	vmov	r0, s15
 800faf8:	eeb1 4b45 	vneg.f64	d4, d5
 800fafc:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800fc60 <__ieee754_rem_pio2+0x230>
 800fb00:	eea5 0b47 	vfms.f64	d0, d5, d7
 800fb04:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800fc68 <__ieee754_rem_pio2+0x238>
 800fb08:	281f      	cmp	r0, #31
 800fb0a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800fb0e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800fb12:	dc05      	bgt.n	800fb20 <__ieee754_rem_pio2+0xf0>
 800fb14:	4b65      	ldr	r3, [pc, #404]	@ (800fcac <__ieee754_rem_pio2+0x27c>)
 800fb16:	1e42      	subs	r2, r0, #1
 800fb18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb1c:	42b3      	cmp	r3, r6
 800fb1e:	d109      	bne.n	800fb34 <__ieee754_rem_pio2+0x104>
 800fb20:	ee16 3a90 	vmov	r3, s13
 800fb24:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800fb28:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800fb2c:	2b10      	cmp	r3, #16
 800fb2e:	ea4f 5226 	mov.w	r2, r6, asr #20
 800fb32:	dc02      	bgt.n	800fb3a <__ieee754_rem_pio2+0x10a>
 800fb34:	ed84 6b00 	vstr	d6, [r4]
 800fb38:	e01a      	b.n	800fb70 <__ieee754_rem_pio2+0x140>
 800fb3a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800fc70 <__ieee754_rem_pio2+0x240>
 800fb3e:	eeb0 6b40 	vmov.f64	d6, d0
 800fb42:	eea4 6b03 	vfma.f64	d6, d4, d3
 800fb46:	ee30 7b46 	vsub.f64	d7, d0, d6
 800fb4a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800fb4e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800fc78 <__ieee754_rem_pio2+0x248>
 800fb52:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800fb56:	ee36 3b47 	vsub.f64	d3, d6, d7
 800fb5a:	ee13 3a90 	vmov	r3, s7
 800fb5e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800fb62:	1ad3      	subs	r3, r2, r3
 800fb64:	2b31      	cmp	r3, #49	@ 0x31
 800fb66:	dc17      	bgt.n	800fb98 <__ieee754_rem_pio2+0x168>
 800fb68:	eeb0 0b46 	vmov.f64	d0, d6
 800fb6c:	ed84 3b00 	vstr	d3, [r4]
 800fb70:	ed94 6b00 	vldr	d6, [r4]
 800fb74:	2d00      	cmp	r5, #0
 800fb76:	ee30 0b46 	vsub.f64	d0, d0, d6
 800fb7a:	ee30 0b47 	vsub.f64	d0, d0, d7
 800fb7e:	ed84 0b02 	vstr	d0, [r4, #8]
 800fb82:	da85      	bge.n	800fa90 <__ieee754_rem_pio2+0x60>
 800fb84:	eeb1 6b46 	vneg.f64	d6, d6
 800fb88:	eeb1 0b40 	vneg.f64	d0, d0
 800fb8c:	ed84 6b00 	vstr	d6, [r4]
 800fb90:	ed84 0b02 	vstr	d0, [r4, #8]
 800fb94:	4240      	negs	r0, r0
 800fb96:	e77b      	b.n	800fa90 <__ieee754_rem_pio2+0x60>
 800fb98:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800fc88 <__ieee754_rem_pio2+0x258>
 800fb9c:	eeb0 0b46 	vmov.f64	d0, d6
 800fba0:	eea4 0b07 	vfma.f64	d0, d4, d7
 800fba4:	ee36 6b40 	vsub.f64	d6, d6, d0
 800fba8:	eea4 6b07 	vfma.f64	d6, d4, d7
 800fbac:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800fc90 <__ieee754_rem_pio2+0x260>
 800fbb0:	eeb0 7b46 	vmov.f64	d7, d6
 800fbb4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800fbb8:	ee30 6b47 	vsub.f64	d6, d0, d7
 800fbbc:	e7ba      	b.n	800fb34 <__ieee754_rem_pio2+0x104>
 800fbbe:	4b3c      	ldr	r3, [pc, #240]	@ (800fcb0 <__ieee754_rem_pio2+0x280>)
 800fbc0:	429e      	cmp	r6, r3
 800fbc2:	d906      	bls.n	800fbd2 <__ieee754_rem_pio2+0x1a2>
 800fbc4:	ee30 7b40 	vsub.f64	d7, d0, d0
 800fbc8:	ed80 7b02 	vstr	d7, [r0, #8]
 800fbcc:	ed80 7b00 	vstr	d7, [r0]
 800fbd0:	e740      	b.n	800fa54 <__ieee754_rem_pio2+0x24>
 800fbd2:	ee10 3a10 	vmov	r3, s0
 800fbd6:	1532      	asrs	r2, r6, #20
 800fbd8:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800fbdc:	4618      	mov	r0, r3
 800fbde:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800fbe2:	ec41 0b17 	vmov	d7, r0, r1
 800fbe6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800fbea:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800fc98 <__ieee754_rem_pio2+0x268>
 800fbee:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800fbf2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fbf6:	ed8d 6b02 	vstr	d6, [sp, #8]
 800fbfa:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fbfe:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800fc02:	a808      	add	r0, sp, #32
 800fc04:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800fc08:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fc0c:	ed8d 6b04 	vstr	d6, [sp, #16]
 800fc10:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fc14:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fc18:	2103      	movs	r1, #3
 800fc1a:	ed30 7b02 	vldmdb	r0!, {d7}
 800fc1e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc26:	460b      	mov	r3, r1
 800fc28:	f101 31ff 	add.w	r1, r1, #4294967295
 800fc2c:	d0f5      	beq.n	800fc1a <__ieee754_rem_pio2+0x1ea>
 800fc2e:	4921      	ldr	r1, [pc, #132]	@ (800fcb4 <__ieee754_rem_pio2+0x284>)
 800fc30:	9101      	str	r1, [sp, #4]
 800fc32:	2102      	movs	r1, #2
 800fc34:	9100      	str	r1, [sp, #0]
 800fc36:	a802      	add	r0, sp, #8
 800fc38:	4621      	mov	r1, r4
 800fc3a:	f000 f845 	bl	800fcc8 <__kernel_rem_pio2>
 800fc3e:	2d00      	cmp	r5, #0
 800fc40:	f6bf af26 	bge.w	800fa90 <__ieee754_rem_pio2+0x60>
 800fc44:	ed94 7b00 	vldr	d7, [r4]
 800fc48:	eeb1 7b47 	vneg.f64	d7, d7
 800fc4c:	ed84 7b00 	vstr	d7, [r4]
 800fc50:	ed94 7b02 	vldr	d7, [r4, #8]
 800fc54:	eeb1 7b47 	vneg.f64	d7, d7
 800fc58:	ed84 7b02 	vstr	d7, [r4, #8]
 800fc5c:	e79a      	b.n	800fb94 <__ieee754_rem_pio2+0x164>
 800fc5e:	bf00      	nop
 800fc60:	54400000 	.word	0x54400000
 800fc64:	3ff921fb 	.word	0x3ff921fb
 800fc68:	1a626331 	.word	0x1a626331
 800fc6c:	3dd0b461 	.word	0x3dd0b461
 800fc70:	1a600000 	.word	0x1a600000
 800fc74:	3dd0b461 	.word	0x3dd0b461
 800fc78:	2e037073 	.word	0x2e037073
 800fc7c:	3ba3198a 	.word	0x3ba3198a
 800fc80:	6dc9c883 	.word	0x6dc9c883
 800fc84:	3fe45f30 	.word	0x3fe45f30
 800fc88:	2e000000 	.word	0x2e000000
 800fc8c:	3ba3198a 	.word	0x3ba3198a
 800fc90:	252049c1 	.word	0x252049c1
 800fc94:	397b839a 	.word	0x397b839a
 800fc98:	00000000 	.word	0x00000000
 800fc9c:	41700000 	.word	0x41700000
 800fca0:	3fe921fb 	.word	0x3fe921fb
 800fca4:	4002d97b 	.word	0x4002d97b
 800fca8:	413921fb 	.word	0x413921fb
 800fcac:	08010770 	.word	0x08010770
 800fcb0:	7fefffff 	.word	0x7fefffff
 800fcb4:	080107f0 	.word	0x080107f0

0800fcb8 <fabs>:
 800fcb8:	ec51 0b10 	vmov	r0, r1, d0
 800fcbc:	4602      	mov	r2, r0
 800fcbe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fcc2:	ec43 2b10 	vmov	d0, r2, r3
 800fcc6:	4770      	bx	lr

0800fcc8 <__kernel_rem_pio2>:
 800fcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fccc:	ed2d 8b06 	vpush	{d8-d10}
 800fcd0:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800fcd4:	469b      	mov	fp, r3
 800fcd6:	9001      	str	r0, [sp, #4]
 800fcd8:	4bbb      	ldr	r3, [pc, #748]	@ (800ffc8 <__kernel_rem_pio2+0x300>)
 800fcda:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800fcdc:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800fce0:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800fce4:	f112 0f14 	cmn.w	r2, #20
 800fce8:	bfa8      	it	ge
 800fcea:	1ed3      	subge	r3, r2, #3
 800fcec:	f10b 3aff 	add.w	sl, fp, #4294967295
 800fcf0:	bfb8      	it	lt
 800fcf2:	2300      	movlt	r3, #0
 800fcf4:	f06f 0517 	mvn.w	r5, #23
 800fcf8:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800ffb0 <__kernel_rem_pio2+0x2e8>
 800fcfc:	bfa4      	itt	ge
 800fcfe:	2018      	movge	r0, #24
 800fd00:	fb93 f3f0 	sdivge	r3, r3, r0
 800fd04:	fb03 5505 	mla	r5, r3, r5, r5
 800fd08:	eba3 040a 	sub.w	r4, r3, sl
 800fd0c:	4415      	add	r5, r2
 800fd0e:	460f      	mov	r7, r1
 800fd10:	eb09 060a 	add.w	r6, r9, sl
 800fd14:	a81a      	add	r0, sp, #104	@ 0x68
 800fd16:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	42b2      	cmp	r2, r6
 800fd1e:	dd0e      	ble.n	800fd3e <__kernel_rem_pio2+0x76>
 800fd20:	aa1a      	add	r2, sp, #104	@ 0x68
 800fd22:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800fd26:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800fd2a:	2600      	movs	r6, #0
 800fd2c:	454e      	cmp	r6, r9
 800fd2e:	dc25      	bgt.n	800fd7c <__kernel_rem_pio2+0xb4>
 800fd30:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800ffb0 <__kernel_rem_pio2+0x2e8>
 800fd34:	f8dd c004 	ldr.w	ip, [sp, #4]
 800fd38:	4614      	mov	r4, r2
 800fd3a:	2000      	movs	r0, #0
 800fd3c:	e015      	b.n	800fd6a <__kernel_rem_pio2+0xa2>
 800fd3e:	42d4      	cmn	r4, r2
 800fd40:	d409      	bmi.n	800fd56 <__kernel_rem_pio2+0x8e>
 800fd42:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800fd46:	ee07 1a90 	vmov	s15, r1
 800fd4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800fd4e:	eca0 7b02 	vstmia	r0!, {d7}
 800fd52:	3201      	adds	r2, #1
 800fd54:	e7e2      	b.n	800fd1c <__kernel_rem_pio2+0x54>
 800fd56:	eeb0 7b46 	vmov.f64	d7, d6
 800fd5a:	e7f8      	b.n	800fd4e <__kernel_rem_pio2+0x86>
 800fd5c:	ecbc 5b02 	vldmia	ip!, {d5}
 800fd60:	ed94 6b00 	vldr	d6, [r4]
 800fd64:	3001      	adds	r0, #1
 800fd66:	eea5 7b06 	vfma.f64	d7, d5, d6
 800fd6a:	4550      	cmp	r0, sl
 800fd6c:	f1a4 0408 	sub.w	r4, r4, #8
 800fd70:	ddf4      	ble.n	800fd5c <__kernel_rem_pio2+0x94>
 800fd72:	ecae 7b02 	vstmia	lr!, {d7}
 800fd76:	3601      	adds	r6, #1
 800fd78:	3208      	adds	r2, #8
 800fd7a:	e7d7      	b.n	800fd2c <__kernel_rem_pio2+0x64>
 800fd7c:	aa06      	add	r2, sp, #24
 800fd7e:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800ffb8 <__kernel_rem_pio2+0x2f0>
 800fd82:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800ffc0 <__kernel_rem_pio2+0x2f8>
 800fd86:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800fd8a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800fd8e:	9203      	str	r2, [sp, #12]
 800fd90:	9302      	str	r3, [sp, #8]
 800fd92:	464c      	mov	r4, r9
 800fd94:	00e3      	lsls	r3, r4, #3
 800fd96:	9304      	str	r3, [sp, #16]
 800fd98:	ab92      	add	r3, sp, #584	@ 0x248
 800fd9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fd9e:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800fda2:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800fda4:	ab06      	add	r3, sp, #24
 800fda6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800fdaa:	461e      	mov	r6, r3
 800fdac:	4620      	mov	r0, r4
 800fdae:	2800      	cmp	r0, #0
 800fdb0:	f1a2 0208 	sub.w	r2, r2, #8
 800fdb4:	dc4a      	bgt.n	800fe4c <__kernel_rem_pio2+0x184>
 800fdb6:	4628      	mov	r0, r5
 800fdb8:	9305      	str	r3, [sp, #20]
 800fdba:	f000 fa01 	bl	80101c0 <scalbn>
 800fdbe:	eeb0 8b40 	vmov.f64	d8, d0
 800fdc2:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800fdc6:	ee28 0b00 	vmul.f64	d0, d8, d0
 800fdca:	f000 fa79 	bl	80102c0 <floor>
 800fdce:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800fdd2:	eea0 8b47 	vfms.f64	d8, d0, d7
 800fdd6:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800fdda:	2d00      	cmp	r5, #0
 800fddc:	ee17 8a90 	vmov	r8, s15
 800fde0:	9b05      	ldr	r3, [sp, #20]
 800fde2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800fde6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800fdea:	dd41      	ble.n	800fe70 <__kernel_rem_pio2+0x1a8>
 800fdec:	1e60      	subs	r0, r4, #1
 800fdee:	aa06      	add	r2, sp, #24
 800fdf0:	f1c5 0c18 	rsb	ip, r5, #24
 800fdf4:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800fdf8:	fa46 f20c 	asr.w	r2, r6, ip
 800fdfc:	4490      	add	r8, r2
 800fdfe:	fa02 f20c 	lsl.w	r2, r2, ip
 800fe02:	1ab6      	subs	r6, r6, r2
 800fe04:	aa06      	add	r2, sp, #24
 800fe06:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800fe0a:	f1c5 0217 	rsb	r2, r5, #23
 800fe0e:	4116      	asrs	r6, r2
 800fe10:	2e00      	cmp	r6, #0
 800fe12:	dd3c      	ble.n	800fe8e <__kernel_rem_pio2+0x1c6>
 800fe14:	f04f 0c00 	mov.w	ip, #0
 800fe18:	f108 0801 	add.w	r8, r8, #1
 800fe1c:	4660      	mov	r0, ip
 800fe1e:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800fe22:	4564      	cmp	r4, ip
 800fe24:	dc66      	bgt.n	800fef4 <__kernel_rem_pio2+0x22c>
 800fe26:	2d00      	cmp	r5, #0
 800fe28:	dd03      	ble.n	800fe32 <__kernel_rem_pio2+0x16a>
 800fe2a:	2d01      	cmp	r5, #1
 800fe2c:	d072      	beq.n	800ff14 <__kernel_rem_pio2+0x24c>
 800fe2e:	2d02      	cmp	r5, #2
 800fe30:	d07a      	beq.n	800ff28 <__kernel_rem_pio2+0x260>
 800fe32:	2e02      	cmp	r6, #2
 800fe34:	d12b      	bne.n	800fe8e <__kernel_rem_pio2+0x1c6>
 800fe36:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800fe3a:	ee30 8b48 	vsub.f64	d8, d0, d8
 800fe3e:	b330      	cbz	r0, 800fe8e <__kernel_rem_pio2+0x1c6>
 800fe40:	4628      	mov	r0, r5
 800fe42:	f000 f9bd 	bl	80101c0 <scalbn>
 800fe46:	ee38 8b40 	vsub.f64	d8, d8, d0
 800fe4a:	e020      	b.n	800fe8e <__kernel_rem_pio2+0x1c6>
 800fe4c:	ee20 7b09 	vmul.f64	d7, d0, d9
 800fe50:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800fe54:	3801      	subs	r0, #1
 800fe56:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800fe5a:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800fe5e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800fe62:	eca6 0a01 	vstmia	r6!, {s0}
 800fe66:	ed92 0b00 	vldr	d0, [r2]
 800fe6a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800fe6e:	e79e      	b.n	800fdae <__kernel_rem_pio2+0xe6>
 800fe70:	d105      	bne.n	800fe7e <__kernel_rem_pio2+0x1b6>
 800fe72:	1e62      	subs	r2, r4, #1
 800fe74:	a906      	add	r1, sp, #24
 800fe76:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800fe7a:	15f6      	asrs	r6, r6, #23
 800fe7c:	e7c8      	b.n	800fe10 <__kernel_rem_pio2+0x148>
 800fe7e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800fe82:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fe86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe8a:	da31      	bge.n	800fef0 <__kernel_rem_pio2+0x228>
 800fe8c:	2600      	movs	r6, #0
 800fe8e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fe92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe96:	f040 809b 	bne.w	800ffd0 <__kernel_rem_pio2+0x308>
 800fe9a:	1e62      	subs	r2, r4, #1
 800fe9c:	2000      	movs	r0, #0
 800fe9e:	454a      	cmp	r2, r9
 800fea0:	da49      	bge.n	800ff36 <__kernel_rem_pio2+0x26e>
 800fea2:	2800      	cmp	r0, #0
 800fea4:	d062      	beq.n	800ff6c <__kernel_rem_pio2+0x2a4>
 800fea6:	3c01      	subs	r4, #1
 800fea8:	ab06      	add	r3, sp, #24
 800feaa:	3d18      	subs	r5, #24
 800feac:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d0f8      	beq.n	800fea6 <__kernel_rem_pio2+0x1de>
 800feb4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800feb8:	4628      	mov	r0, r5
 800feba:	f000 f981 	bl	80101c0 <scalbn>
 800febe:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800ffb8 <__kernel_rem_pio2+0x2f0>
 800fec2:	1c62      	adds	r2, r4, #1
 800fec4:	a96a      	add	r1, sp, #424	@ 0x1a8
 800fec6:	00d3      	lsls	r3, r2, #3
 800fec8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800fecc:	4622      	mov	r2, r4
 800fece:	2a00      	cmp	r2, #0
 800fed0:	f280 80a8 	bge.w	8010024 <__kernel_rem_pio2+0x35c>
 800fed4:	4622      	mov	r2, r4
 800fed6:	2a00      	cmp	r2, #0
 800fed8:	f2c0 80c6 	blt.w	8010068 <__kernel_rem_pio2+0x3a0>
 800fedc:	a96a      	add	r1, sp, #424	@ 0x1a8
 800fede:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800fee2:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800ffb0 <__kernel_rem_pio2+0x2e8>
 800fee6:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800ffcc <__kernel_rem_pio2+0x304>
 800feea:	2000      	movs	r0, #0
 800feec:	1aa1      	subs	r1, r4, r2
 800feee:	e0b0      	b.n	8010052 <__kernel_rem_pio2+0x38a>
 800fef0:	2602      	movs	r6, #2
 800fef2:	e78f      	b.n	800fe14 <__kernel_rem_pio2+0x14c>
 800fef4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fef8:	b948      	cbnz	r0, 800ff0e <__kernel_rem_pio2+0x246>
 800fefa:	b122      	cbz	r2, 800ff06 <__kernel_rem_pio2+0x23e>
 800fefc:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800ff00:	f843 2c04 	str.w	r2, [r3, #-4]
 800ff04:	2201      	movs	r2, #1
 800ff06:	f10c 0c01 	add.w	ip, ip, #1
 800ff0a:	4610      	mov	r0, r2
 800ff0c:	e789      	b.n	800fe22 <__kernel_rem_pio2+0x15a>
 800ff0e:	ebae 0202 	sub.w	r2, lr, r2
 800ff12:	e7f5      	b.n	800ff00 <__kernel_rem_pio2+0x238>
 800ff14:	1e62      	subs	r2, r4, #1
 800ff16:	ab06      	add	r3, sp, #24
 800ff18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff1c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ff20:	a906      	add	r1, sp, #24
 800ff22:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ff26:	e784      	b.n	800fe32 <__kernel_rem_pio2+0x16a>
 800ff28:	1e62      	subs	r2, r4, #1
 800ff2a:	ab06      	add	r3, sp, #24
 800ff2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff30:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ff34:	e7f4      	b.n	800ff20 <__kernel_rem_pio2+0x258>
 800ff36:	ab06      	add	r3, sp, #24
 800ff38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff3c:	3a01      	subs	r2, #1
 800ff3e:	4318      	orrs	r0, r3
 800ff40:	e7ad      	b.n	800fe9e <__kernel_rem_pio2+0x1d6>
 800ff42:	3301      	adds	r3, #1
 800ff44:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800ff48:	2800      	cmp	r0, #0
 800ff4a:	d0fa      	beq.n	800ff42 <__kernel_rem_pio2+0x27a>
 800ff4c:	9a04      	ldr	r2, [sp, #16]
 800ff4e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800ff52:	446a      	add	r2, sp
 800ff54:	eb04 000b 	add.w	r0, r4, fp
 800ff58:	a91a      	add	r1, sp, #104	@ 0x68
 800ff5a:	1c66      	adds	r6, r4, #1
 800ff5c:	3a98      	subs	r2, #152	@ 0x98
 800ff5e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800ff62:	4423      	add	r3, r4
 800ff64:	42b3      	cmp	r3, r6
 800ff66:	da04      	bge.n	800ff72 <__kernel_rem_pio2+0x2aa>
 800ff68:	461c      	mov	r4, r3
 800ff6a:	e713      	b.n	800fd94 <__kernel_rem_pio2+0xcc>
 800ff6c:	9a03      	ldr	r2, [sp, #12]
 800ff6e:	2301      	movs	r3, #1
 800ff70:	e7e8      	b.n	800ff44 <__kernel_rem_pio2+0x27c>
 800ff72:	9902      	ldr	r1, [sp, #8]
 800ff74:	f8dd c004 	ldr.w	ip, [sp, #4]
 800ff78:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800ff7c:	9104      	str	r1, [sp, #16]
 800ff7e:	ee07 1a90 	vmov	s15, r1
 800ff82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ff86:	2400      	movs	r4, #0
 800ff88:	eca0 7b02 	vstmia	r0!, {d7}
 800ff8c:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800ffb0 <__kernel_rem_pio2+0x2e8>
 800ff90:	4686      	mov	lr, r0
 800ff92:	4554      	cmp	r4, sl
 800ff94:	dd03      	ble.n	800ff9e <__kernel_rem_pio2+0x2d6>
 800ff96:	eca2 7b02 	vstmia	r2!, {d7}
 800ff9a:	3601      	adds	r6, #1
 800ff9c:	e7e2      	b.n	800ff64 <__kernel_rem_pio2+0x29c>
 800ff9e:	ecbc 5b02 	vldmia	ip!, {d5}
 800ffa2:	ed3e 6b02 	vldmdb	lr!, {d6}
 800ffa6:	3401      	adds	r4, #1
 800ffa8:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ffac:	e7f1      	b.n	800ff92 <__kernel_rem_pio2+0x2ca>
 800ffae:	bf00      	nop
	...
 800ffbc:	3e700000 	.word	0x3e700000
 800ffc0:	00000000 	.word	0x00000000
 800ffc4:	41700000 	.word	0x41700000
 800ffc8:	08010938 	.word	0x08010938
 800ffcc:	080108f8 	.word	0x080108f8
 800ffd0:	4268      	negs	r0, r5
 800ffd2:	eeb0 0b48 	vmov.f64	d0, d8
 800ffd6:	f000 f8f3 	bl	80101c0 <scalbn>
 800ffda:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 80101a8 <__kernel_rem_pio2+0x4e0>
 800ffde:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800ffe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffe6:	db17      	blt.n	8010018 <__kernel_rem_pio2+0x350>
 800ffe8:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 80101b0 <__kernel_rem_pio2+0x4e8>
 800ffec:	ee20 7b07 	vmul.f64	d7, d0, d7
 800fff0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800fff4:	aa06      	add	r2, sp, #24
 800fff6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800fffa:	eea5 0b46 	vfms.f64	d0, d5, d6
 800fffe:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010002:	3518      	adds	r5, #24
 8010004:	ee10 3a10 	vmov	r3, s0
 8010008:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801000c:	ee17 3a10 	vmov	r3, s14
 8010010:	3401      	adds	r4, #1
 8010012:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010016:	e74d      	b.n	800feb4 <__kernel_rem_pio2+0x1ec>
 8010018:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801001c:	aa06      	add	r2, sp, #24
 801001e:	ee10 3a10 	vmov	r3, s0
 8010022:	e7f6      	b.n	8010012 <__kernel_rem_pio2+0x34a>
 8010024:	a806      	add	r0, sp, #24
 8010026:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801002a:	9001      	str	r0, [sp, #4]
 801002c:	ee07 0a90 	vmov	s15, r0
 8010030:	3a01      	subs	r2, #1
 8010032:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010036:	ee27 7b00 	vmul.f64	d7, d7, d0
 801003a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801003e:	ed21 7b02 	vstmdb	r1!, {d7}
 8010042:	e744      	b.n	800fece <__kernel_rem_pio2+0x206>
 8010044:	ecbc 5b02 	vldmia	ip!, {d5}
 8010048:	ecb5 6b02 	vldmia	r5!, {d6}
 801004c:	3001      	adds	r0, #1
 801004e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010052:	4548      	cmp	r0, r9
 8010054:	dc01      	bgt.n	801005a <__kernel_rem_pio2+0x392>
 8010056:	4281      	cmp	r1, r0
 8010058:	daf4      	bge.n	8010044 <__kernel_rem_pio2+0x37c>
 801005a:	a842      	add	r0, sp, #264	@ 0x108
 801005c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010060:	ed81 7b00 	vstr	d7, [r1]
 8010064:	3a01      	subs	r2, #1
 8010066:	e736      	b.n	800fed6 <__kernel_rem_pio2+0x20e>
 8010068:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801006a:	2a02      	cmp	r2, #2
 801006c:	dc0a      	bgt.n	8010084 <__kernel_rem_pio2+0x3bc>
 801006e:	2a00      	cmp	r2, #0
 8010070:	dc2d      	bgt.n	80100ce <__kernel_rem_pio2+0x406>
 8010072:	d046      	beq.n	8010102 <__kernel_rem_pio2+0x43a>
 8010074:	f008 0007 	and.w	r0, r8, #7
 8010078:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 801007c:	ecbd 8b06 	vpop	{d8-d10}
 8010080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010084:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8010086:	2a03      	cmp	r2, #3
 8010088:	d1f4      	bne.n	8010074 <__kernel_rem_pio2+0x3ac>
 801008a:	a942      	add	r1, sp, #264	@ 0x108
 801008c:	f1a3 0208 	sub.w	r2, r3, #8
 8010090:	440a      	add	r2, r1
 8010092:	4611      	mov	r1, r2
 8010094:	4620      	mov	r0, r4
 8010096:	2800      	cmp	r0, #0
 8010098:	f1a1 0108 	sub.w	r1, r1, #8
 801009c:	dc52      	bgt.n	8010144 <__kernel_rem_pio2+0x47c>
 801009e:	4621      	mov	r1, r4
 80100a0:	2901      	cmp	r1, #1
 80100a2:	f1a2 0208 	sub.w	r2, r2, #8
 80100a6:	dc5d      	bgt.n	8010164 <__kernel_rem_pio2+0x49c>
 80100a8:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 80101b8 <__kernel_rem_pio2+0x4f0>
 80100ac:	aa42      	add	r2, sp, #264	@ 0x108
 80100ae:	4413      	add	r3, r2
 80100b0:	2c01      	cmp	r4, #1
 80100b2:	dc67      	bgt.n	8010184 <__kernel_rem_pio2+0x4bc>
 80100b4:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 80100b8:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 80100bc:	2e00      	cmp	r6, #0
 80100be:	d167      	bne.n	8010190 <__kernel_rem_pio2+0x4c8>
 80100c0:	ed87 5b00 	vstr	d5, [r7]
 80100c4:	ed87 6b02 	vstr	d6, [r7, #8]
 80100c8:	ed87 7b04 	vstr	d7, [r7, #16]
 80100cc:	e7d2      	b.n	8010074 <__kernel_rem_pio2+0x3ac>
 80100ce:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 80101b8 <__kernel_rem_pio2+0x4f0>
 80100d2:	aa42      	add	r2, sp, #264	@ 0x108
 80100d4:	4413      	add	r3, r2
 80100d6:	4622      	mov	r2, r4
 80100d8:	2a00      	cmp	r2, #0
 80100da:	da24      	bge.n	8010126 <__kernel_rem_pio2+0x45e>
 80100dc:	b34e      	cbz	r6, 8010132 <__kernel_rem_pio2+0x46a>
 80100de:	eeb1 7b46 	vneg.f64	d7, d6
 80100e2:	ed87 7b00 	vstr	d7, [r7]
 80100e6:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 80100ea:	aa44      	add	r2, sp, #272	@ 0x110
 80100ec:	2301      	movs	r3, #1
 80100ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 80100f2:	429c      	cmp	r4, r3
 80100f4:	da20      	bge.n	8010138 <__kernel_rem_pio2+0x470>
 80100f6:	b10e      	cbz	r6, 80100fc <__kernel_rem_pio2+0x434>
 80100f8:	eeb1 7b47 	vneg.f64	d7, d7
 80100fc:	ed87 7b02 	vstr	d7, [r7, #8]
 8010100:	e7b8      	b.n	8010074 <__kernel_rem_pio2+0x3ac>
 8010102:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 80101b8 <__kernel_rem_pio2+0x4f0>
 8010106:	aa42      	add	r2, sp, #264	@ 0x108
 8010108:	4413      	add	r3, r2
 801010a:	2c00      	cmp	r4, #0
 801010c:	da05      	bge.n	801011a <__kernel_rem_pio2+0x452>
 801010e:	b10e      	cbz	r6, 8010114 <__kernel_rem_pio2+0x44c>
 8010110:	eeb1 7b47 	vneg.f64	d7, d7
 8010114:	ed87 7b00 	vstr	d7, [r7]
 8010118:	e7ac      	b.n	8010074 <__kernel_rem_pio2+0x3ac>
 801011a:	ed33 6b02 	vldmdb	r3!, {d6}
 801011e:	3c01      	subs	r4, #1
 8010120:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010124:	e7f1      	b.n	801010a <__kernel_rem_pio2+0x442>
 8010126:	ed33 7b02 	vldmdb	r3!, {d7}
 801012a:	3a01      	subs	r2, #1
 801012c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010130:	e7d2      	b.n	80100d8 <__kernel_rem_pio2+0x410>
 8010132:	eeb0 7b46 	vmov.f64	d7, d6
 8010136:	e7d4      	b.n	80100e2 <__kernel_rem_pio2+0x41a>
 8010138:	ecb2 6b02 	vldmia	r2!, {d6}
 801013c:	3301      	adds	r3, #1
 801013e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010142:	e7d6      	b.n	80100f2 <__kernel_rem_pio2+0x42a>
 8010144:	ed91 7b00 	vldr	d7, [r1]
 8010148:	ed91 5b02 	vldr	d5, [r1, #8]
 801014c:	3801      	subs	r0, #1
 801014e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010152:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010156:	ed81 6b00 	vstr	d6, [r1]
 801015a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801015e:	ed81 7b02 	vstr	d7, [r1, #8]
 8010162:	e798      	b.n	8010096 <__kernel_rem_pio2+0x3ce>
 8010164:	ed92 7b00 	vldr	d7, [r2]
 8010168:	ed92 5b02 	vldr	d5, [r2, #8]
 801016c:	3901      	subs	r1, #1
 801016e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010172:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010176:	ed82 6b00 	vstr	d6, [r2]
 801017a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801017e:	ed82 7b02 	vstr	d7, [r2, #8]
 8010182:	e78d      	b.n	80100a0 <__kernel_rem_pio2+0x3d8>
 8010184:	ed33 6b02 	vldmdb	r3!, {d6}
 8010188:	3c01      	subs	r4, #1
 801018a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801018e:	e78f      	b.n	80100b0 <__kernel_rem_pio2+0x3e8>
 8010190:	eeb1 5b45 	vneg.f64	d5, d5
 8010194:	eeb1 6b46 	vneg.f64	d6, d6
 8010198:	ed87 5b00 	vstr	d5, [r7]
 801019c:	eeb1 7b47 	vneg.f64	d7, d7
 80101a0:	ed87 6b02 	vstr	d6, [r7, #8]
 80101a4:	e790      	b.n	80100c8 <__kernel_rem_pio2+0x400>
 80101a6:	bf00      	nop
 80101a8:	00000000 	.word	0x00000000
 80101ac:	41700000 	.word	0x41700000
 80101b0:	00000000 	.word	0x00000000
 80101b4:	3e700000 	.word	0x3e700000
	...

080101c0 <scalbn>:
 80101c0:	ee10 1a90 	vmov	r1, s1
 80101c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80101c8:	b98b      	cbnz	r3, 80101ee <scalbn+0x2e>
 80101ca:	ee10 3a10 	vmov	r3, s0
 80101ce:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80101d2:	4319      	orrs	r1, r3
 80101d4:	d00a      	beq.n	80101ec <scalbn+0x2c>
 80101d6:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8010288 <scalbn+0xc8>
 80101da:	4b37      	ldr	r3, [pc, #220]	@ (80102b8 <scalbn+0xf8>)
 80101dc:	ee20 0b07 	vmul.f64	d0, d0, d7
 80101e0:	4298      	cmp	r0, r3
 80101e2:	da0b      	bge.n	80101fc <scalbn+0x3c>
 80101e4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8010290 <scalbn+0xd0>
 80101e8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80101ec:	4770      	bx	lr
 80101ee:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80101f2:	4293      	cmp	r3, r2
 80101f4:	d107      	bne.n	8010206 <scalbn+0x46>
 80101f6:	ee30 0b00 	vadd.f64	d0, d0, d0
 80101fa:	4770      	bx	lr
 80101fc:	ee10 1a90 	vmov	r1, s1
 8010200:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010204:	3b36      	subs	r3, #54	@ 0x36
 8010206:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801020a:	4290      	cmp	r0, r2
 801020c:	dd0d      	ble.n	801022a <scalbn+0x6a>
 801020e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8010298 <scalbn+0xd8>
 8010212:	ee10 3a90 	vmov	r3, s1
 8010216:	eeb0 6b47 	vmov.f64	d6, d7
 801021a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 80102a0 <scalbn+0xe0>
 801021e:	2b00      	cmp	r3, #0
 8010220:	fe27 7b05 	vselge.f64	d7, d7, d5
 8010224:	ee27 0b06 	vmul.f64	d0, d7, d6
 8010228:	4770      	bx	lr
 801022a:	4418      	add	r0, r3
 801022c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8010230:	4298      	cmp	r0, r3
 8010232:	dcec      	bgt.n	801020e <scalbn+0x4e>
 8010234:	2800      	cmp	r0, #0
 8010236:	dd0a      	ble.n	801024e <scalbn+0x8e>
 8010238:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801023c:	ec53 2b10 	vmov	r2, r3, d0
 8010240:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8010244:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8010248:	ec43 2b10 	vmov	d0, r2, r3
 801024c:	4770      	bx	lr
 801024e:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 8010252:	da09      	bge.n	8010268 <scalbn+0xa8>
 8010254:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8010290 <scalbn+0xd0>
 8010258:	ee10 3a90 	vmov	r3, s1
 801025c:	eeb0 6b47 	vmov.f64	d6, d7
 8010260:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 80102a8 <scalbn+0xe8>
 8010264:	2b00      	cmp	r3, #0
 8010266:	e7db      	b.n	8010220 <scalbn+0x60>
 8010268:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801026c:	ec53 2b10 	vmov	r2, r3, d0
 8010270:	3036      	adds	r0, #54	@ 0x36
 8010272:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8010276:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801027a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80102b0 <scalbn+0xf0>
 801027e:	ec43 2b10 	vmov	d0, r2, r3
 8010282:	e7b1      	b.n	80101e8 <scalbn+0x28>
 8010284:	f3af 8000 	nop.w
 8010288:	00000000 	.word	0x00000000
 801028c:	43500000 	.word	0x43500000
 8010290:	c2f8f359 	.word	0xc2f8f359
 8010294:	01a56e1f 	.word	0x01a56e1f
 8010298:	8800759c 	.word	0x8800759c
 801029c:	7e37e43c 	.word	0x7e37e43c
 80102a0:	8800759c 	.word	0x8800759c
 80102a4:	fe37e43c 	.word	0xfe37e43c
 80102a8:	c2f8f359 	.word	0xc2f8f359
 80102ac:	81a56e1f 	.word	0x81a56e1f
 80102b0:	00000000 	.word	0x00000000
 80102b4:	3c900000 	.word	0x3c900000
 80102b8:	ffff3cb0 	.word	0xffff3cb0
 80102bc:	00000000 	.word	0x00000000

080102c0 <floor>:
 80102c0:	ee10 3a90 	vmov	r3, s1
 80102c4:	f3c3 500a 	ubfx	r0, r3, #20, #11
 80102c8:	ee10 2a10 	vmov	r2, s0
 80102cc:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 80102d0:	2913      	cmp	r1, #19
 80102d2:	b530      	push	{r4, r5, lr}
 80102d4:	4615      	mov	r5, r2
 80102d6:	dc33      	bgt.n	8010340 <floor+0x80>
 80102d8:	2900      	cmp	r1, #0
 80102da:	da18      	bge.n	801030e <floor+0x4e>
 80102dc:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 80103a0 <floor+0xe0>
 80102e0:	ee30 0b07 	vadd.f64	d0, d0, d7
 80102e4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80102e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ec:	dd0a      	ble.n	8010304 <floor+0x44>
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	da50      	bge.n	8010394 <floor+0xd4>
 80102f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80102f6:	4313      	orrs	r3, r2
 80102f8:	2200      	movs	r2, #0
 80102fa:	4293      	cmp	r3, r2
 80102fc:	4b2a      	ldr	r3, [pc, #168]	@ (80103a8 <floor+0xe8>)
 80102fe:	bf08      	it	eq
 8010300:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8010304:	4619      	mov	r1, r3
 8010306:	4610      	mov	r0, r2
 8010308:	ec41 0b10 	vmov	d0, r0, r1
 801030c:	e01f      	b.n	801034e <floor+0x8e>
 801030e:	4827      	ldr	r0, [pc, #156]	@ (80103ac <floor+0xec>)
 8010310:	4108      	asrs	r0, r1
 8010312:	ea03 0400 	and.w	r4, r3, r0
 8010316:	4314      	orrs	r4, r2
 8010318:	d019      	beq.n	801034e <floor+0x8e>
 801031a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80103a0 <floor+0xe0>
 801031e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010322:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801032a:	ddeb      	ble.n	8010304 <floor+0x44>
 801032c:	2b00      	cmp	r3, #0
 801032e:	bfbe      	ittt	lt
 8010330:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8010334:	410a      	asrlt	r2, r1
 8010336:	189b      	addlt	r3, r3, r2
 8010338:	ea23 0300 	bic.w	r3, r3, r0
 801033c:	2200      	movs	r2, #0
 801033e:	e7e1      	b.n	8010304 <floor+0x44>
 8010340:	2933      	cmp	r1, #51	@ 0x33
 8010342:	dd05      	ble.n	8010350 <floor+0x90>
 8010344:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8010348:	d101      	bne.n	801034e <floor+0x8e>
 801034a:	ee30 0b00 	vadd.f64	d0, d0, d0
 801034e:	bd30      	pop	{r4, r5, pc}
 8010350:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8010354:	f04f 30ff 	mov.w	r0, #4294967295
 8010358:	40e0      	lsrs	r0, r4
 801035a:	4210      	tst	r0, r2
 801035c:	d0f7      	beq.n	801034e <floor+0x8e>
 801035e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80103a0 <floor+0xe0>
 8010362:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010366:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801036a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801036e:	ddc9      	ble.n	8010304 <floor+0x44>
 8010370:	2b00      	cmp	r3, #0
 8010372:	da02      	bge.n	801037a <floor+0xba>
 8010374:	2914      	cmp	r1, #20
 8010376:	d103      	bne.n	8010380 <floor+0xc0>
 8010378:	3301      	adds	r3, #1
 801037a:	ea22 0200 	bic.w	r2, r2, r0
 801037e:	e7c1      	b.n	8010304 <floor+0x44>
 8010380:	2401      	movs	r4, #1
 8010382:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8010386:	fa04 f101 	lsl.w	r1, r4, r1
 801038a:	440a      	add	r2, r1
 801038c:	42aa      	cmp	r2, r5
 801038e:	bf38      	it	cc
 8010390:	191b      	addcc	r3, r3, r4
 8010392:	e7f2      	b.n	801037a <floor+0xba>
 8010394:	2200      	movs	r2, #0
 8010396:	4613      	mov	r3, r2
 8010398:	e7b4      	b.n	8010304 <floor+0x44>
 801039a:	bf00      	nop
 801039c:	f3af 8000 	nop.w
 80103a0:	8800759c 	.word	0x8800759c
 80103a4:	7e37e43c 	.word	0x7e37e43c
 80103a8:	bff00000 	.word	0xbff00000
 80103ac:	000fffff 	.word	0x000fffff

080103b0 <_init>:
 80103b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103b2:	bf00      	nop
 80103b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103b6:	bc08      	pop	{r3}
 80103b8:	469e      	mov	lr, r3
 80103ba:	4770      	bx	lr

080103bc <_fini>:
 80103bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103be:	bf00      	nop
 80103c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103c2:	bc08      	pop	{r3}
 80103c4:	469e      	mov	lr, r3
 80103c6:	4770      	bx	lr
