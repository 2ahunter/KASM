
KASM_STM32H750VB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093d0  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08009668  08009668  0000a668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080096a0  080096a0  0000a6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080096a8  080096a8  0000a6a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080096ac  080096ac  0000a6ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000018  24000000  080096b0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006ac  24000018  080096c8  0000b018  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240006c4  080096c8  0000b6c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b018  2**0
                  CONTENTS, READONLY
 10 .debug_info   000201f7  00000000  00000000  0000b046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f8c  00000000  00000000  0002b23d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a68  00000000  00000000  0002e1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014fb  00000000  00000000  0002fc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a131  00000000  00000000  00031133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002101c  00000000  00000000  0006b264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017fca5  00000000  00000000  0008c280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020bf25  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000749c  00000000  00000000  0020bf68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  00213404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009650 	.word	0x08009650

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	08009650 	.word	0x08009650

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f002 f9c4 	bl	8002958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f86a 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f001 f8c0 	bl	8001758 <MX_GPIO_Init>
  MX_HRTIM_Init();
 80005d8:	f000 f914 	bl	8000804 <MX_HRTIM_Init>
  MX_I2C4_Init();
 80005dc:	f000 fa6c 	bl	8000ab8 <MX_I2C4_Init>
  MX_LPTIM1_Init();
 80005e0:	f000 faaa 	bl	8000b38 <MX_LPTIM1_Init>
  MX_LPTIM2_Init();
 80005e4:	f000 fad4 	bl	8000b90 <MX_LPTIM2_Init>
  MX_LPTIM3_Init();
 80005e8:	f000 fafe 	bl	8000be8 <MX_LPTIM3_Init>
  MX_SPI2_Init();
 80005ec:	f000 fb26 	bl	8000c3c <MX_SPI2_Init>
  MX_TIM1_Init();
 80005f0:	f000 fbca 	bl	8000d88 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005f4:	f000 fc98 	bl	8000f28 <MX_TIM2_Init>
  MX_TIM4_Init();
 80005f8:	f000 fcf0 	bl	8000fdc <MX_TIM4_Init>
  MX_TIM5_Init();
 80005fc:	f000 fd6a 	bl	80010d4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000600:	f000 fdce 	bl	80011a0 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000604:	f000 fe5a 	bl	80012bc <MX_TIM12_Init>
  MX_TIM13_Init();
 8000608:	f000 feb2 	bl	8001370 <MX_TIM13_Init>
  MX_TIM14_Init();
 800060c:	f000 fefe 	bl	800140c <MX_TIM14_Init>
  MX_TIM15_Init();
 8000610:	f000 ff4a 	bl	80014a8 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000614:	f000 ffda 	bl	80015cc <MX_TIM16_Init>
  MX_UART4_Init();
 8000618:	f001 f852 	bl	80016c0 <MX_UART4_Init>
  MX_SPI6_Init();
 800061c:	f000 fb64 	bl	8000ce8 <MX_SPI6_Init>
  /* USER CODE BEGIN 2 */
  /* enable VSS */
  HAL_GPIO_WritePin(ACTUATOR_ENABLE_MCU_GPIO_Port, ACTUATOR_ENABLE_MCU_Pin, GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000626:	481b      	ldr	r0, [pc, #108]	@ (8000694 <main+0xcc>)
 8000628:	f002 fcf4 	bl	8003014 <HAL_GPIO_WritePin>

  // Timer 1 initialization
  // Timer 1 serves as the main timer and is interrupted by period end
  HAL_TIM_Base_Start_IT(&htim1);
 800062c:	481a      	ldr	r0, [pc, #104]	@ (8000698 <main+0xd0>)
 800062e:	f006 fc83 	bl	8006f38 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000632:	2100      	movs	r1, #0
 8000634:	4818      	ldr	r0, [pc, #96]	@ (8000698 <main+0xd0>)
 8000636:	f006 fd4f 	bl	80070d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800063a:	2104      	movs	r1, #4
 800063c:	4816      	ldr	r0, [pc, #88]	@ (8000698 <main+0xd0>)
 800063e:	f006 fd4b 	bl	80070d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000642:	2108      	movs	r1, #8
 8000644:	4814      	ldr	r0, [pc, #80]	@ (8000698 <main+0xd0>)
 8000646:	f006 fd47 	bl	80070d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800064a:	210c      	movs	r1, #12
 800064c:	4812      	ldr	r0, [pc, #72]	@ (8000698 <main+0xd0>)
 800064e:	f006 fd43 	bl	80070d8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM1_CH1_PHASE_GPIO_Port, TIM1_CH1_PHASE_Pin, GPIO_PIN_SET);
 8000652:	2201      	movs	r2, #1
 8000654:	2101      	movs	r1, #1
 8000656:	4811      	ldr	r0, [pc, #68]	@ (800069c <main+0xd4>)
 8000658:	f002 fcdc 	bl	8003014 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH2_PHASE_GPIO_Port, TIM1_CH2_PHASE_Pin, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2102      	movs	r1, #2
 8000660:	480e      	ldr	r0, [pc, #56]	@ (800069c <main+0xd4>)
 8000662:	f002 fcd7 	bl	8003014 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH3_PHASE_GPIO_Port, TIM1_CH3_PHASE_Pin, GPIO_PIN_SET);
 8000666:	2201      	movs	r2, #1
 8000668:	2104      	movs	r1, #4
 800066a:	480c      	ldr	r0, [pc, #48]	@ (800069c <main+0xd4>)
 800066c:	f002 fcd2 	bl	8003014 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH4_PHASE_GPIO_Port, TIM1_CH4_PHASE_Pin, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	2108      	movs	r1, #8
 8000674:	4809      	ldr	r0, [pc, #36]	@ (800069c <main+0xd4>)
 8000676:	f002 fccd 	bl	8003014 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ctrl_tmr_expired == TRUE) control_update(ref);
 800067a:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <main+0xd8>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d1fb      	bne.n	800067a <main+0xb2>
 8000682:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <main+0xdc>)
 8000684:	ed93 7b00 	vldr	d7, [r3]
 8000688:	eeb0 0b47 	vmov.f64	d0, d7
 800068c:	f001 f9a8 	bl	80019e0 <control_update>
 8000690:	e7f3      	b.n	800067a <main+0xb2>
 8000692:	bf00      	nop
 8000694:	58020000 	.word	0x58020000
 8000698:	2400031c 	.word	0x2400031c
 800069c:	58021000 	.word	0x58021000
 80006a0:	240006a8 	.word	0x240006a8
 80006a4:	240006b0 	.word	0x240006b0

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b09e      	sub	sp, #120	@ 0x78
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006b2:	224c      	movs	r2, #76	@ 0x4c
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f008 ff9e 	bl	80095f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2220      	movs	r2, #32
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f008 ff97 	bl	80095f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006ca:	2002      	movs	r0, #2
 80006cc:	f003 fc52 	bl	8003f74 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	4b48      	ldr	r3, [pc, #288]	@ (80007f8 <SystemClock_Config+0x150>)
 80006d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006d8:	4a47      	ldr	r2, [pc, #284]	@ (80007f8 <SystemClock_Config+0x150>)
 80006da:	f023 0301 	bic.w	r3, r3, #1
 80006de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80006e0:	4b45      	ldr	r3, [pc, #276]	@ (80007f8 <SystemClock_Config+0x150>)
 80006e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	4b44      	ldr	r3, [pc, #272]	@ (80007fc <SystemClock_Config+0x154>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	4a43      	ldr	r2, [pc, #268]	@ (80007fc <SystemClock_Config+0x154>)
 80006f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006f4:	6193      	str	r3, [r2, #24]
 80006f6:	4b41      	ldr	r3, [pc, #260]	@ (80007fc <SystemClock_Config+0x154>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000702:	bf00      	nop
 8000704:	4b3d      	ldr	r3, [pc, #244]	@ (80007fc <SystemClock_Config+0x154>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800070c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000710:	d1f8      	bne.n	8000704 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	4b3b      	ldr	r3, [pc, #236]	@ (8000800 <SystemClock_Config+0x158>)
 8000714:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000718:	4a39      	ldr	r2, [pc, #228]	@ (8000800 <SystemClock_Config+0x158>)
 800071a:	f043 0302 	orr.w	r3, r3, #2
 800071e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000722:	4b37      	ldr	r3, [pc, #220]	@ (8000800 <SystemClock_Config+0x158>)
 8000724:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000728:	f003 0302 	and.w	r3, r3, #2
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000730:	2300      	movs	r3, #0
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	4b31      	ldr	r3, [pc, #196]	@ (80007fc <SystemClock_Config+0x154>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a30      	ldr	r2, [pc, #192]	@ (80007fc <SystemClock_Config+0x154>)
 800073a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b2e      	ldr	r3, [pc, #184]	@ (80007fc <SystemClock_Config+0x154>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	4b2b      	ldr	r3, [pc, #172]	@ (80007f8 <SystemClock_Config+0x150>)
 800074c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800074e:	4a2a      	ldr	r2, [pc, #168]	@ (80007f8 <SystemClock_Config+0x150>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000756:	4b28      	ldr	r3, [pc, #160]	@ (80007f8 <SystemClock_Config+0x150>)
 8000758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000762:	bf00      	nop
 8000764:	4b25      	ldr	r3, [pc, #148]	@ (80007fc <SystemClock_Config+0x154>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800076c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000770:	d1f8      	bne.n	8000764 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000772:	2301      	movs	r3, #1
 8000774:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000776:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800077a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077c:	2302      	movs	r3, #2
 800077e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000780:	2302      	movs	r3, #2
 8000782:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000784:	2302      	movs	r3, #2
 8000786:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000788:	2350      	movs	r3, #80	@ 0x50
 800078a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800078c:	2302      	movs	r3, #2
 800078e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000790:	230f      	movs	r3, #15
 8000792:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000794:	2302      	movs	r3, #2
 8000796:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000798:	230c      	movs	r3, #12
 800079a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800079c:	2300      	movs	r3, #0
 800079e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007a8:	4618      	mov	r0, r3
 80007aa:	f003 fc1d 	bl	8003fe8 <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80007b4:	f001 f9ac 	bl	8001b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	233f      	movs	r3, #63	@ 0x3f
 80007ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	2303      	movs	r3, #3
 80007be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007c4:	2308      	movs	r3, #8
 80007c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007c8:	2340      	movs	r3, #64	@ 0x40
 80007ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007cc:	2340      	movs	r3, #64	@ 0x40
 80007ce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007d6:	2340      	movs	r3, #64	@ 0x40
 80007d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	2104      	movs	r1, #4
 80007e0:	4618      	mov	r0, r3
 80007e2:	f004 f85b 	bl	800489c <HAL_RCC_ClockConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80007ec:	f001 f990 	bl	8001b10 <Error_Handler>
  }
}
 80007f0:	bf00      	nop
 80007f2:	3778      	adds	r7, #120	@ 0x78
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	58000400 	.word	0x58000400
 80007fc:	58024800 	.word	0x58024800
 8000800:	58024400 	.word	0x58024400

08000804 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b0a4      	sub	sp, #144	@ 0x90
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800080a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000818:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800081c:	2254      	movs	r2, #84	@ 0x54
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f008 fee9 	bl	80095f8 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	2220      	movs	r2, #32
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f008 fee2 	bl	80095f8 <memset>
  HRTIM_SimplePWMChannelCfgTypeDef pSimplePWMChannelCfg = {0};
 8000834:	463b      	mov	r3, r7
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 800083e:	4b9c      	ldr	r3, [pc, #624]	@ (8000ab0 <MX_HRTIM_Init+0x2ac>)
 8000840:	4a9c      	ldr	r2, [pc, #624]	@ (8000ab4 <MX_HRTIM_Init+0x2b0>)
 8000842:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000844:	4b9a      	ldr	r3, [pc, #616]	@ (8000ab0 <MX_HRTIM_Init+0x2ac>)
 8000846:	2200      	movs	r2, #0
 8000848:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 800084a:	4b99      	ldr	r3, [pc, #612]	@ (8000ab0 <MX_HRTIM_Init+0x2ac>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8000850:	4897      	ldr	r0, [pc, #604]	@ (8000ab0 <MX_HRTIM_Init+0x2ac>)
 8000852:	f002 fbf9 	bl	8003048 <HAL_HRTIM_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 800085c:	f001 f958 	bl	8001b10 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFFD;
 8000860:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8000864:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 800086e:	2305      	movs	r3, #5
 8000870:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000874:	2308      	movs	r3, #8
 8000876:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 800087a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800087e:	461a      	mov	r2, r3
 8000880:	2105      	movs	r1, #5
 8000882:	488b      	ldr	r0, [pc, #556]	@ (8000ab0 <MX_HRTIM_Init+0x2ac>)
 8000884:	f002 fcb0 	bl	80031e8 <HAL_HRTIM_TimeBaseConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 800088e:	f001 f93f 	bl	8001b10 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 8000892:	2300      	movs	r3, #0
 8000894:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 8000896:	2300      	movs	r3, #0
 8000898:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 800089a:	2300      	movs	r3, #0
 800089c:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 800089e:	2300      	movs	r3, #0
 80008a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.DMASize = 0x1;
 80008a2:	2301      	movs	r3, #1
 80008a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80008a6:	2300      	movs	r3, #0
 80008a8:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80008aa:	2300      	movs	r3, #0
 80008ac:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80008ae:	2300      	movs	r3, #0
 80008b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80008b6:	2300      	movs	r3, #0
 80008b8:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80008ba:	2300      	movs	r3, #0
 80008bc:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80008be:	2300      	movs	r3, #0
 80008c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80008c2:	2300      	movs	r3, #0
 80008c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 80008c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008ca:	461a      	mov	r2, r3
 80008cc:	2105      	movs	r1, #5
 80008ce:	4878      	ldr	r0, [pc, #480]	@ (8000ab0 <MX_HRTIM_Init+0x2ac>)
 80008d0:	f002 fd7a 	bl	80033c8 <HAL_HRTIM_WaveformTimerConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_HRTIM_Init+0xda>
  {
    Error_Handler();
 80008da:	f001 f919 	bl	8001b10 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 80008de:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80008e2:	461a      	mov	r2, r3
 80008e4:	2100      	movs	r1, #0
 80008e6:	4872      	ldr	r0, [pc, #456]	@ (8000ab0 <MX_HRTIM_Init+0x2ac>)
 80008e8:	f002 fc7e 	bl	80031e8 <HAL_HRTIM_TimeBaseConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_HRTIM_Init+0xf2>
  {
    Error_Handler();
 80008f2:	f001 f90d 	bl	8001b10 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80008fe:	2300      	movs	r3, #0
 8000900:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000902:	2300      	movs	r3, #0
 8000904:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000906:	2300      	movs	r3, #0
 8000908:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 800090a:	2300      	movs	r3, #0
 800090c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 800090e:	2300      	movs	r3, #0
 8000910:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8000912:	2300      	movs	r3, #0
 8000914:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8000916:	2300      	movs	r3, #0
 8000918:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 800091a:	2300      	movs	r3, #0
 800091c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 800091e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000922:	461a      	mov	r2, r3
 8000924:	2100      	movs	r1, #0
 8000926:	4862      	ldr	r0, [pc, #392]	@ (8000ab0 <MX_HRTIM_Init+0x2ac>)
 8000928:	f002 fd4e 	bl	80033c8 <HAL_HRTIM_WaveformTimerConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_HRTIM_Init+0x132>
  {
    Error_Handler();
 8000932:	f001 f8ed 	bl	8001b10 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8000936:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800093a:	461a      	mov	r2, r3
 800093c:	2101      	movs	r1, #1
 800093e:	485c      	ldr	r0, [pc, #368]	@ (8000ab0 <MX_HRTIM_Init+0x2ac>)
 8000940:	f002 fd42 	bl	80033c8 <HAL_HRTIM_WaveformTimerConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_HRTIM_Init+0x14a>
  {
    Error_Handler();
 800094a:	f001 f8e1 	bl	8001b10 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 800094e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000952:	461a      	mov	r2, r3
 8000954:	2102      	movs	r1, #2
 8000956:	4856      	ldr	r0, [pc, #344]	@ (8000ab0 <MX_HRTIM_Init+0x2ac>)
 8000958:	f002 fd36 	bl	80033c8 <HAL_HRTIM_WaveformTimerConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_HRTIM_Init+0x162>
  {
    Error_Handler();
 8000962:	f001 f8d5 	bl	8001b10 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	2201      	movs	r2, #1
 800098c:	2100      	movs	r1, #0
 800098e:	4848      	ldr	r0, [pc, #288]	@ (8000ab0 <MX_HRTIM_Init+0x2ac>)
 8000990:	f002 fd8c 	bl	80034ac <HAL_HRTIM_WaveformOutputConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 800099a:	f001 f8b9 	bl	8001b10 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	2204      	movs	r2, #4
 80009a4:	2101      	movs	r1, #1
 80009a6:	4842      	ldr	r0, [pc, #264]	@ (8000ab0 <MX_HRTIM_Init+0x2ac>)
 80009a8:	f002 fd80 	bl	80034ac <HAL_HRTIM_WaveformOutputConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_HRTIM_Init+0x1b2>
  {
    Error_Handler();
 80009b2:	f001 f8ad 	bl	8001b10 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	2210      	movs	r2, #16
 80009bc:	2102      	movs	r1, #2
 80009be:	483c      	ldr	r0, [pc, #240]	@ (8000ab0 <MX_HRTIM_Init+0x2ac>)
 80009c0:	f002 fd74 	bl	80034ac <HAL_HRTIM_WaveformOutputConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_HRTIM_Init+0x1ca>
  {
    Error_Handler();
 80009ca:	f001 f8a1 	bl	8001b10 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	2202      	movs	r2, #2
 80009d4:	2100      	movs	r1, #0
 80009d6:	4836      	ldr	r0, [pc, #216]	@ (8000ab0 <MX_HRTIM_Init+0x2ac>)
 80009d8:	f002 fd68 	bl	80034ac <HAL_HRTIM_WaveformOutputConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_HRTIM_Init+0x1e2>
  {
    Error_Handler();
 80009e2:	f001 f895 	bl	8001b10 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	2208      	movs	r2, #8
 80009ec:	2101      	movs	r1, #1
 80009ee:	4830      	ldr	r0, [pc, #192]	@ (8000ab0 <MX_HRTIM_Init+0x2ac>)
 80009f0:	f002 fd5c 	bl	80034ac <HAL_HRTIM_WaveformOutputConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_HRTIM_Init+0x1fa>
  {
    Error_Handler();
 80009fa:	f001 f889 	bl	8001b10 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	2220      	movs	r2, #32
 8000a04:	2102      	movs	r1, #2
 8000a06:	482a      	ldr	r0, [pc, #168]	@ (8000ab0 <MX_HRTIM_Init+0x2ac>)
 8000a08:	f002 fd50 	bl	80034ac <HAL_HRTIM_WaveformOutputConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 8000a12:	f001 f87d 	bl	8001b10 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8000a16:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	4824      	ldr	r0, [pc, #144]	@ (8000ab0 <MX_HRTIM_Init+0x2ac>)
 8000a20:	f002 fbe2 	bl	80031e8 <HAL_HRTIM_TimeBaseConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_HRTIM_Init+0x22a>
  {
    Error_Handler();
 8000a2a:	f001 f871 	bl	8001b10 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8000a2e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000a32:	461a      	mov	r2, r3
 8000a34:	2102      	movs	r1, #2
 8000a36:	481e      	ldr	r0, [pc, #120]	@ (8000ab0 <MX_HRTIM_Init+0x2ac>)
 8000a38:	f002 fbd6 	bl	80031e8 <HAL_HRTIM_TimeBaseConfig>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_HRTIM_Init+0x242>
  {
    Error_Handler();
 8000a42:	f001 f865 	bl	8001b10 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000a46:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	2103      	movs	r1, #3
 8000a4e:	4818      	ldr	r0, [pc, #96]	@ (8000ab0 <MX_HRTIM_Init+0x2ac>)
 8000a50:	f002 fbca 	bl	80031e8 <HAL_HRTIM_TimeBaseConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_HRTIM_Init+0x25a>
  {
    Error_Handler();
 8000a5a:	f001 f859 	bl	8001b10 <Error_Handler>
  }
  pSimplePWMChannelCfg.Pulse = 0xFFFD;
 8000a5e:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8000a62:	603b      	str	r3, [r7, #0]
  pSimplePWMChannelCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000a64:	2300      	movs	r3, #0
 8000a66:	607b      	str	r3, [r7, #4]
  pSimplePWMChannelCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_SimplePWMChannelConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pSimplePWMChannelCfg) != HAL_OK)
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	2240      	movs	r2, #64	@ 0x40
 8000a70:	2103      	movs	r1, #3
 8000a72:	480f      	ldr	r0, [pc, #60]	@ (8000ab0 <MX_HRTIM_Init+0x2ac>)
 8000a74:	f002 fbe0 	bl	8003238 <HAL_HRTIM_SimplePWMChannelConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_HRTIM_Init+0x27e>
  {
    Error_Handler();
 8000a7e:	f001 f847 	bl	8001b10 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFF00;
 8000a82:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000a86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8000a8a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000a8e:	461a      	mov	r2, r3
 8000a90:	2104      	movs	r1, #4
 8000a92:	4807      	ldr	r0, [pc, #28]	@ (8000ab0 <MX_HRTIM_Init+0x2ac>)
 8000a94:	f002 fba8 	bl	80031e8 <HAL_HRTIM_TimeBaseConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_HRTIM_Init+0x29e>
  {
    Error_Handler();
 8000a9e:	f001 f837 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8000aa2:	4803      	ldr	r0, [pc, #12]	@ (8000ab0 <MX_HRTIM_Init+0x2ac>)
 8000aa4:	f001 f88e 	bl	8001bc4 <HAL_HRTIM_MspPostInit>

}
 8000aa8:	bf00      	nop
 8000aaa:	3790      	adds	r7, #144	@ 0x90
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	24000034 	.word	0x24000034
 8000ab4:	40017400 	.word	0x40017400

08000ab8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <MX_I2C4_Init+0x74>)
 8000abe:	4a1c      	ldr	r2, [pc, #112]	@ (8000b30 <MX_I2C4_Init+0x78>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b2c <MX_I2C4_Init+0x74>)
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b34 <MX_I2C4_Init+0x7c>)
 8000ac6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <MX_I2C4_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ace:	4b17      	ldr	r3, [pc, #92]	@ (8000b2c <MX_I2C4_Init+0x74>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <MX_I2C4_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000ada:	4b14      	ldr	r3, [pc, #80]	@ (8000b2c <MX_I2C4_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <MX_I2C4_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <MX_I2C4_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <MX_I2C4_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000af2:	480e      	ldr	r0, [pc, #56]	@ (8000b2c <MX_I2C4_Init+0x74>)
 8000af4:	f003 f85a 	bl	8003bac <HAL_I2C_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000afe:	f001 f807 	bl	8001b10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b02:	2100      	movs	r1, #0
 8000b04:	4809      	ldr	r0, [pc, #36]	@ (8000b2c <MX_I2C4_Init+0x74>)
 8000b06:	f003 f8ed 	bl	8003ce4 <HAL_I2CEx_ConfigAnalogFilter>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000b10:	f000 fffe 	bl	8001b10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b14:	2100      	movs	r1, #0
 8000b16:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <MX_I2C4_Init+0x74>)
 8000b18:	f003 f92f 	bl	8003d7a <HAL_I2CEx_ConfigDigitalFilter>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000b22:	f000 fff5 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	24000110 	.word	0x24000110
 8000b30:	58001c00 	.word	0x58001c00
 8000b34:	307075b1 	.word	0x307075b1

08000b38 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <MX_LPTIM1_Init+0x50>)
 8000b3e:	4a13      	ldr	r2, [pc, #76]	@ (8000b8c <MX_LPTIM1_Init+0x54>)
 8000b40:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <MX_LPTIM1_Init+0x50>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	@ (8000b88 <MX_LPTIM1_Init+0x50>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <MX_LPTIM1_Init+0x50>)
 8000b50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b54:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000b56:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <MX_LPTIM1_Init+0x50>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <MX_LPTIM1_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000b62:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <MX_LPTIM1_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000b68:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <MX_LPTIM1_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <MX_LPTIM1_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000b74:	4804      	ldr	r0, [pc, #16]	@ (8000b88 <MX_LPTIM1_Init+0x50>)
 8000b76:	f003 f94d 	bl	8003e14 <HAL_LPTIM_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8000b80:	f000 ffc6 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	24000164 	.word	0x24000164
 8000b8c:	40002400 	.word	0x40002400

08000b90 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 8000b94:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <MX_LPTIM2_Init+0x50>)
 8000b96:	4a13      	ldr	r2, [pc, #76]	@ (8000be4 <MX_LPTIM2_Init+0x54>)
 8000b98:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <MX_LPTIM2_Init+0x50>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8000be0 <MX_LPTIM2_Init+0x50>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <MX_LPTIM2_Init+0x50>)
 8000ba8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bac:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000bae:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <MX_LPTIM2_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <MX_LPTIM2_Init+0x50>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000bba:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <MX_LPTIM2_Init+0x50>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000bc0:	4b07      	ldr	r3, [pc, #28]	@ (8000be0 <MX_LPTIM2_Init+0x50>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000bc6:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <MX_LPTIM2_Init+0x50>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8000bcc:	4804      	ldr	r0, [pc, #16]	@ (8000be0 <MX_LPTIM2_Init+0x50>)
 8000bce:	f003 f921 	bl	8003e14 <HAL_LPTIM_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_LPTIM2_Init+0x4c>
  {
    Error_Handler();
 8000bd8:	f000 ff9a 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	2400019c 	.word	0x2400019c
 8000be4:	58002400 	.word	0x58002400

08000be8 <MX_LPTIM3_Init>:
  * @brief LPTIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM3_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM3_Init 0 */

  /* USER CODE BEGIN LPTIM3_Init 1 */

  /* USER CODE END LPTIM3_Init 1 */
  hlptim3.Instance = LPTIM3;
 8000bec:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <MX_LPTIM3_Init+0x4c>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	@ (8000c38 <MX_LPTIM3_Init+0x50>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hlptim3.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <MX_LPTIM3_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	605a      	str	r2, [r3, #4]
  hlptim3.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <MX_LPTIM3_Init+0x4c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  hlptim3.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <MX_LPTIM3_Init+0x4c>)
 8000c00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c04:	615a      	str	r2, [r3, #20]
  hlptim3.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	@ (8000c34 <MX_LPTIM3_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  hlptim3.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <MX_LPTIM3_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim3.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000c12:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <MX_LPTIM3_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim3.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <MX_LPTIM3_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_LPTIM_Init(&hlptim3) != HAL_OK)
 8000c1e:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <MX_LPTIM3_Init+0x4c>)
 8000c20:	f003 f8f8 	bl	8003e14 <HAL_LPTIM_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_LPTIM3_Init+0x46>
  {
    Error_Handler();
 8000c2a:	f000 ff71 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM3_Init 2 */

  /* USER CODE END LPTIM3_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	240001d4 	.word	0x240001d4
 8000c38:	58002800 	.word	0x58002800

08000c3c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c40:	4b27      	ldr	r3, [pc, #156]	@ (8000ce0 <MX_SPI2_Init+0xa4>)
 8000c42:	4a28      	ldr	r2, [pc, #160]	@ (8000ce4 <MX_SPI2_Init+0xa8>)
 8000c44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c46:	4b26      	ldr	r3, [pc, #152]	@ (8000ce0 <MX_SPI2_Init+0xa4>)
 8000c48:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c4e:	4b24      	ldr	r3, [pc, #144]	@ (8000ce0 <MX_SPI2_Init+0xa4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c54:	4b22      	ldr	r3, [pc, #136]	@ (8000ce0 <MX_SPI2_Init+0xa4>)
 8000c56:	2203      	movs	r2, #3
 8000c58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	@ (8000ce0 <MX_SPI2_Init+0xa4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce0 <MX_SPI2_Init+0xa4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce0 <MX_SPI2_Init+0xa4>)
 8000c68:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce0 <MX_SPI2_Init+0xa4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce0 <MX_SPI2_Init+0xa4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ce0 <MX_SPI2_Init+0xa4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c80:	4b17      	ldr	r3, [pc, #92]	@ (8000ce0 <MX_SPI2_Init+0xa4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000c86:	4b16      	ldr	r3, [pc, #88]	@ (8000ce0 <MX_SPI2_Init+0xa4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <MX_SPI2_Init+0xa4>)
 8000c8e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c92:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <MX_SPI2_Init+0xa4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <MX_SPI2_Init+0xa4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <MX_SPI2_Init+0xa4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <MX_SPI2_Init+0xa4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <MX_SPI2_Init+0xa4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <MX_SPI2_Init+0xa4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <MX_SPI2_Init+0xa4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <MX_SPI2_Init+0xa4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <MX_SPI2_Init+0xa4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cca:	4805      	ldr	r0, [pc, #20]	@ (8000ce0 <MX_SPI2_Init+0xa4>)
 8000ccc:	f005 ff9e 	bl	8006c0c <HAL_SPI_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000cd6:	f000 ff1b 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2400020c 	.word	0x2400020c
 8000ce4:	40003800 	.word	0x40003800

08000ce8 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 8000cec:	4b24      	ldr	r3, [pc, #144]	@ (8000d80 <MX_SPI6_Init+0x98>)
 8000cee:	4a25      	ldr	r2, [pc, #148]	@ (8000d84 <MX_SPI6_Init+0x9c>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_SLAVE;
 8000cf2:	4b23      	ldr	r3, [pc, #140]	@ (8000d80 <MX_SPI6_Init+0x98>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8000cf8:	4b21      	ldr	r3, [pc, #132]	@ (8000d80 <MX_SPI6_Init+0x98>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
 8000cfe:	4b20      	ldr	r3, [pc, #128]	@ (8000d80 <MX_SPI6_Init+0x98>)
 8000d00:	220f      	movs	r2, #15
 8000d02:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d04:	4b1e      	ldr	r3, [pc, #120]	@ (8000d80 <MX_SPI6_Init+0x98>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d80 <MX_SPI6_Init+0x98>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8000d10:	4b1b      	ldr	r3, [pc, #108]	@ (8000d80 <MX_SPI6_Init+0x98>)
 8000d12:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000d16:	619a      	str	r2, [r3, #24]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d18:	4b19      	ldr	r3, [pc, #100]	@ (8000d80 <MX_SPI6_Init+0x98>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d1e:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <MX_SPI6_Init+0x98>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d24:	4b16      	ldr	r3, [pc, #88]	@ (8000d80 <MX_SPI6_Init+0x98>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <MX_SPI6_Init+0x98>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d30:	4b13      	ldr	r3, [pc, #76]	@ (8000d80 <MX_SPI6_Init+0x98>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d36:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <MX_SPI6_Init+0x98>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d3c:	4b10      	ldr	r3, [pc, #64]	@ (8000d80 <MX_SPI6_Init+0x98>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d42:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <MX_SPI6_Init+0x98>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d48:	4b0d      	ldr	r3, [pc, #52]	@ (8000d80 <MX_SPI6_Init+0x98>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <MX_SPI6_Init+0x98>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d54:	4b0a      	ldr	r3, [pc, #40]	@ (8000d80 <MX_SPI6_Init+0x98>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d5a:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <MX_SPI6_Init+0x98>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <MX_SPI6_Init+0x98>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d66:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <MX_SPI6_Init+0x98>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8000d6c:	4804      	ldr	r0, [pc, #16]	@ (8000d80 <MX_SPI6_Init+0x98>)
 8000d6e:	f005 ff4d 	bl	8006c0c <HAL_SPI_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_SPI6_Init+0x94>
  {
    Error_Handler();
 8000d78:	f000 feca 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	24000294 	.word	0x24000294
 8000d84:	58001400 	.word	0x58001400

08000d88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b09a      	sub	sp, #104	@ 0x68
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
 8000db8:	615a      	str	r2, [r3, #20]
 8000dba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	222c      	movs	r2, #44	@ 0x2c
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f008 fc18 	bl	80095f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dc8:	4b55      	ldr	r3, [pc, #340]	@ (8000f20 <MX_TIM1_Init+0x198>)
 8000dca:	4a56      	ldr	r2, [pc, #344]	@ (8000f24 <MX_TIM1_Init+0x19c>)
 8000dcc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dce:	4b54      	ldr	r3, [pc, #336]	@ (8000f20 <MX_TIM1_Init+0x198>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd4:	4b52      	ldr	r3, [pc, #328]	@ (8000f20 <MX_TIM1_Init+0x198>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000-1;
 8000dda:	4b51      	ldr	r3, [pc, #324]	@ (8000f20 <MX_TIM1_Init+0x198>)
 8000ddc:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000de0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de2:	4b4f      	ldr	r3, [pc, #316]	@ (8000f20 <MX_TIM1_Init+0x198>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000de8:	4b4d      	ldr	r3, [pc, #308]	@ (8000f20 <MX_TIM1_Init+0x198>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dee:	4b4c      	ldr	r3, [pc, #304]	@ (8000f20 <MX_TIM1_Init+0x198>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000df4:	484a      	ldr	r0, [pc, #296]	@ (8000f20 <MX_TIM1_Init+0x198>)
 8000df6:	f006 f848 	bl	8006e8a <HAL_TIM_Base_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e00:	f000 fe86 	bl	8001b10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e08:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e0a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4843      	ldr	r0, [pc, #268]	@ (8000f20 <MX_TIM1_Init+0x198>)
 8000e12:	f006 fc8b 	bl	800772c <HAL_TIM_ConfigClockSource>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e1c:	f000 fe78 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e20:	483f      	ldr	r0, [pc, #252]	@ (8000f20 <MX_TIM1_Init+0x198>)
 8000e22:	f006 f901 	bl	8007028 <HAL_TIM_PWM_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000e2c:	f000 fe70 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e30:	2300      	movs	r3, #0
 8000e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e34:	2300      	movs	r3, #0
 8000e36:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e3c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e40:	4619      	mov	r1, r3
 8000e42:	4837      	ldr	r0, [pc, #220]	@ (8000f20 <MX_TIM1_Init+0x198>)
 8000e44:	f007 f9d2 	bl	80081ec <HAL_TIMEx_MasterConfigSynchronization>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000e4e:	f000 fe5f 	bl	8001b10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e52:	2360      	movs	r3, #96	@ 0x60
 8000e54:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e6e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e72:	2200      	movs	r2, #0
 8000e74:	4619      	mov	r1, r3
 8000e76:	482a      	ldr	r0, [pc, #168]	@ (8000f20 <MX_TIM1_Init+0x198>)
 8000e78:	f006 fb44 	bl	8007504 <HAL_TIM_PWM_ConfigChannel>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000e82:	f000 fe45 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e86:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e8a:	2204      	movs	r2, #4
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4824      	ldr	r0, [pc, #144]	@ (8000f20 <MX_TIM1_Init+0x198>)
 8000e90:	f006 fb38 	bl	8007504 <HAL_TIM_PWM_ConfigChannel>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000e9a:	f000 fe39 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e9e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ea2:	2208      	movs	r2, #8
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	481e      	ldr	r0, [pc, #120]	@ (8000f20 <MX_TIM1_Init+0x198>)
 8000ea8:	f006 fb2c 	bl	8007504 <HAL_TIM_PWM_ConfigChannel>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000eb2:	f000 fe2d 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000eb6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000eba:	220c      	movs	r2, #12
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4818      	ldr	r0, [pc, #96]	@ (8000f20 <MX_TIM1_Init+0x198>)
 8000ec0:	f006 fb20 	bl	8007504 <HAL_TIM_PWM_ConfigChannel>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000eca:	f000 fe21 	bl	8001b10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ee2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ee6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ef0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	4619      	mov	r1, r3
 8000f02:	4807      	ldr	r0, [pc, #28]	@ (8000f20 <MX_TIM1_Init+0x198>)
 8000f04:	f007 fa00 	bl	8008308 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000f0e:	f000 fdff 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f12:	4803      	ldr	r0, [pc, #12]	@ (8000f20 <MX_TIM1_Init+0x198>)
 8000f14:	f001 fa00 	bl	8002318 <HAL_TIM_MspPostInit>

}
 8000f18:	bf00      	nop
 8000f1a:	3768      	adds	r7, #104	@ 0x68
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2400031c 	.word	0x2400031c
 8000f24:	40010000 	.word	0x40010000

08000f28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	@ 0x28
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
 8000f48:	615a      	str	r2, [r3, #20]
 8000f4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f4c:	4b22      	ldr	r3, [pc, #136]	@ (8000fd8 <MX_TIM2_Init+0xb0>)
 8000f4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f54:	4b20      	ldr	r3, [pc, #128]	@ (8000fd8 <MX_TIM2_Init+0xb0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd8 <MX_TIM2_Init+0xb0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f60:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd8 <MX_TIM2_Init+0xb0>)
 8000f62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd8 <MX_TIM2_Init+0xb0>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd8 <MX_TIM2_Init+0xb0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f74:	4818      	ldr	r0, [pc, #96]	@ (8000fd8 <MX_TIM2_Init+0xb0>)
 8000f76:	f006 f857 	bl	8007028 <HAL_TIM_PWM_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000f80:	f000 fdc6 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	4811      	ldr	r0, [pc, #68]	@ (8000fd8 <MX_TIM2_Init+0xb0>)
 8000f94:	f007 f92a 	bl	80081ec <HAL_TIMEx_MasterConfigSynchronization>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000f9e:	f000 fdb7 	bl	8001b10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fa2:	2360      	movs	r3, #96	@ 0x60
 8000fa4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4807      	ldr	r0, [pc, #28]	@ (8000fd8 <MX_TIM2_Init+0xb0>)
 8000fba:	f006 faa3 	bl	8007504 <HAL_TIM_PWM_ConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000fc4:	f000 fda4 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fc8:	4803      	ldr	r0, [pc, #12]	@ (8000fd8 <MX_TIM2_Init+0xb0>)
 8000fca:	f001 f9a5 	bl	8002318 <HAL_TIM_MspPostInit>

}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	@ 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	24000368 	.word	0x24000368

08000fdc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	@ 0x28
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fee:	463b      	mov	r3, r7
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
 8000ffc:	615a      	str	r2, [r3, #20]
 8000ffe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001000:	4b32      	ldr	r3, [pc, #200]	@ (80010cc <MX_TIM4_Init+0xf0>)
 8001002:	4a33      	ldr	r2, [pc, #204]	@ (80010d0 <MX_TIM4_Init+0xf4>)
 8001004:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001006:	4b31      	ldr	r3, [pc, #196]	@ (80010cc <MX_TIM4_Init+0xf0>)
 8001008:	2200      	movs	r2, #0
 800100a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100c:	4b2f      	ldr	r3, [pc, #188]	@ (80010cc <MX_TIM4_Init+0xf0>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001012:	4b2e      	ldr	r3, [pc, #184]	@ (80010cc <MX_TIM4_Init+0xf0>)
 8001014:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001018:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101a:	4b2c      	ldr	r3, [pc, #176]	@ (80010cc <MX_TIM4_Init+0xf0>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001020:	4b2a      	ldr	r3, [pc, #168]	@ (80010cc <MX_TIM4_Init+0xf0>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001026:	4829      	ldr	r0, [pc, #164]	@ (80010cc <MX_TIM4_Init+0xf0>)
 8001028:	f005 fffe 	bl	8007028 <HAL_TIM_PWM_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001032:	f000 fd6d 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	4619      	mov	r1, r3
 8001044:	4821      	ldr	r0, [pc, #132]	@ (80010cc <MX_TIM4_Init+0xf0>)
 8001046:	f007 f8d1 	bl	80081ec <HAL_TIMEx_MasterConfigSynchronization>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001050:	f000 fd5e 	bl	8001b10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001054:	2360      	movs	r3, #96	@ 0x60
 8001056:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001064:	463b      	mov	r3, r7
 8001066:	2200      	movs	r2, #0
 8001068:	4619      	mov	r1, r3
 800106a:	4818      	ldr	r0, [pc, #96]	@ (80010cc <MX_TIM4_Init+0xf0>)
 800106c:	f006 fa4a 	bl	8007504 <HAL_TIM_PWM_ConfigChannel>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001076:	f000 fd4b 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800107a:	463b      	mov	r3, r7
 800107c:	2204      	movs	r2, #4
 800107e:	4619      	mov	r1, r3
 8001080:	4812      	ldr	r0, [pc, #72]	@ (80010cc <MX_TIM4_Init+0xf0>)
 8001082:	f006 fa3f 	bl	8007504 <HAL_TIM_PWM_ConfigChannel>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800108c:	f000 fd40 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	2208      	movs	r2, #8
 8001094:	4619      	mov	r1, r3
 8001096:	480d      	ldr	r0, [pc, #52]	@ (80010cc <MX_TIM4_Init+0xf0>)
 8001098:	f006 fa34 	bl	8007504 <HAL_TIM_PWM_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80010a2:	f000 fd35 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010a6:	463b      	mov	r3, r7
 80010a8:	220c      	movs	r2, #12
 80010aa:	4619      	mov	r1, r3
 80010ac:	4807      	ldr	r0, [pc, #28]	@ (80010cc <MX_TIM4_Init+0xf0>)
 80010ae:	f006 fa29 	bl	8007504 <HAL_TIM_PWM_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80010b8:	f000 fd2a 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80010bc:	4803      	ldr	r0, [pc, #12]	@ (80010cc <MX_TIM4_Init+0xf0>)
 80010be:	f001 f92b 	bl	8002318 <HAL_TIM_MspPostInit>

}
 80010c2:	bf00      	nop
 80010c4:	3728      	adds	r7, #40	@ 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	240003b4 	.word	0x240003b4
 80010d0:	40000800 	.word	0x40000800

080010d4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	@ 0x28
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010e6:	463b      	mov	r3, r7
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
 80010f4:	615a      	str	r2, [r3, #20]
 80010f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010f8:	4b27      	ldr	r3, [pc, #156]	@ (8001198 <MX_TIM5_Init+0xc4>)
 80010fa:	4a28      	ldr	r2, [pc, #160]	@ (800119c <MX_TIM5_Init+0xc8>)
 80010fc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80010fe:	4b26      	ldr	r3, [pc, #152]	@ (8001198 <MX_TIM5_Init+0xc4>)
 8001100:	2200      	movs	r2, #0
 8001102:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001104:	4b24      	ldr	r3, [pc, #144]	@ (8001198 <MX_TIM5_Init+0xc4>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800110a:	4b23      	ldr	r3, [pc, #140]	@ (8001198 <MX_TIM5_Init+0xc4>)
 800110c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001110:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001112:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <MX_TIM5_Init+0xc4>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001118:	4b1f      	ldr	r3, [pc, #124]	@ (8001198 <MX_TIM5_Init+0xc4>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800111e:	481e      	ldr	r0, [pc, #120]	@ (8001198 <MX_TIM5_Init+0xc4>)
 8001120:	f005 ff82 	bl	8007028 <HAL_TIM_PWM_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800112a:	f000 fcf1 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	4619      	mov	r1, r3
 800113c:	4816      	ldr	r0, [pc, #88]	@ (8001198 <MX_TIM5_Init+0xc4>)
 800113e:	f007 f855 	bl	80081ec <HAL_TIMEx_MasterConfigSynchronization>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001148:	f000 fce2 	bl	8001b10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800114c:	2360      	movs	r3, #96	@ 0x60
 800114e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800115c:	463b      	mov	r3, r7
 800115e:	2204      	movs	r2, #4
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_TIM5_Init+0xc4>)
 8001164:	f006 f9ce 	bl	8007504 <HAL_TIM_PWM_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 800116e:	f000 fccf 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001172:	463b      	mov	r3, r7
 8001174:	2208      	movs	r2, #8
 8001176:	4619      	mov	r1, r3
 8001178:	4807      	ldr	r0, [pc, #28]	@ (8001198 <MX_TIM5_Init+0xc4>)
 800117a:	f006 f9c3 	bl	8007504 <HAL_TIM_PWM_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8001184:	f000 fcc4 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001188:	4803      	ldr	r0, [pc, #12]	@ (8001198 <MX_TIM5_Init+0xc4>)
 800118a:	f001 f8c5 	bl	8002318 <HAL_TIM_MspPostInit>

}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	@ 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	24000400 	.word	0x24000400
 800119c:	40000c00 	.word	0x40000c00

080011a0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b096      	sub	sp, #88	@ 0x58
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]
 80011c2:	615a      	str	r2, [r3, #20]
 80011c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	222c      	movs	r2, #44	@ 0x2c
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f008 fa13 	bl	80095f8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80011d2:	4b38      	ldr	r3, [pc, #224]	@ (80012b4 <MX_TIM8_Init+0x114>)
 80011d4:	4a38      	ldr	r2, [pc, #224]	@ (80012b8 <MX_TIM8_Init+0x118>)
 80011d6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80011d8:	4b36      	ldr	r3, [pc, #216]	@ (80012b4 <MX_TIM8_Init+0x114>)
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011de:	4b35      	ldr	r3, [pc, #212]	@ (80012b4 <MX_TIM8_Init+0x114>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80011e4:	4b33      	ldr	r3, [pc, #204]	@ (80012b4 <MX_TIM8_Init+0x114>)
 80011e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011ea:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ec:	4b31      	ldr	r3, [pc, #196]	@ (80012b4 <MX_TIM8_Init+0x114>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011f2:	4b30      	ldr	r3, [pc, #192]	@ (80012b4 <MX_TIM8_Init+0x114>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f8:	4b2e      	ldr	r3, [pc, #184]	@ (80012b4 <MX_TIM8_Init+0x114>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80011fe:	482d      	ldr	r0, [pc, #180]	@ (80012b4 <MX_TIM8_Init+0x114>)
 8001200:	f005 ff12 	bl	8007028 <HAL_TIM_PWM_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800120a:	f000 fc81 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120e:	2300      	movs	r3, #0
 8001210:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800121a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800121e:	4619      	mov	r1, r3
 8001220:	4824      	ldr	r0, [pc, #144]	@ (80012b4 <MX_TIM8_Init+0x114>)
 8001222:	f006 ffe3 	bl	80081ec <HAL_TIMEx_MasterConfigSynchronization>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800122c:	f000 fc70 	bl	8001b10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001230:	2360      	movs	r3, #96	@ 0x60
 8001232:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001238:	2300      	movs	r3, #0
 800123a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001244:	2300      	movs	r3, #0
 8001246:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001248:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800124c:	220c      	movs	r2, #12
 800124e:	4619      	mov	r1, r3
 8001250:	4818      	ldr	r0, [pc, #96]	@ (80012b4 <MX_TIM8_Init+0x114>)
 8001252:	f006 f957 	bl	8007504 <HAL_TIM_PWM_ConfigChannel>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 800125c:	f000 fc58 	bl	8001b10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001274:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001278:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001282:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	4619      	mov	r1, r3
 8001294:	4807      	ldr	r0, [pc, #28]	@ (80012b4 <MX_TIM8_Init+0x114>)
 8001296:	f007 f837 	bl	8008308 <HAL_TIMEx_ConfigBreakDeadTime>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM8_Init+0x104>
  {
    Error_Handler();
 80012a0:	f000 fc36 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80012a4:	4803      	ldr	r0, [pc, #12]	@ (80012b4 <MX_TIM8_Init+0x114>)
 80012a6:	f001 f837 	bl	8002318 <HAL_TIM_MspPostInit>

}
 80012aa:	bf00      	nop
 80012ac:	3758      	adds	r7, #88	@ 0x58
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2400044c 	.word	0x2400044c
 80012b8:	40010400 	.word	0x40010400

080012bc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	@ 0x28
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ce:	463b      	mov	r3, r7
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
 80012dc:	615a      	str	r2, [r3, #20]
 80012de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80012e0:	4b21      	ldr	r3, [pc, #132]	@ (8001368 <MX_TIM12_Init+0xac>)
 80012e2:	4a22      	ldr	r2, [pc, #136]	@ (800136c <MX_TIM12_Init+0xb0>)
 80012e4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80012e6:	4b20      	ldr	r3, [pc, #128]	@ (8001368 <MX_TIM12_Init+0xac>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001368 <MX_TIM12_Init+0xac>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80012f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001368 <MX_TIM12_Init+0xac>)
 80012f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012f8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001368 <MX_TIM12_Init+0xac>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001300:	4b19      	ldr	r3, [pc, #100]	@ (8001368 <MX_TIM12_Init+0xac>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001306:	4818      	ldr	r0, [pc, #96]	@ (8001368 <MX_TIM12_Init+0xac>)
 8001308:	f005 fe8e 	bl	8007028 <HAL_TIM_PWM_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8001312:	f000 fbfd 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	4619      	mov	r1, r3
 8001324:	4810      	ldr	r0, [pc, #64]	@ (8001368 <MX_TIM12_Init+0xac>)
 8001326:	f006 ff61 	bl	80081ec <HAL_TIMEx_MasterConfigSynchronization>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001330:	f000 fbee 	bl	8001b10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001334:	2360      	movs	r3, #96	@ 0x60
 8001336:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001344:	463b      	mov	r3, r7
 8001346:	2204      	movs	r2, #4
 8001348:	4619      	mov	r1, r3
 800134a:	4807      	ldr	r0, [pc, #28]	@ (8001368 <MX_TIM12_Init+0xac>)
 800134c:	f006 f8da 	bl	8007504 <HAL_TIM_PWM_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 8001356:	f000 fbdb 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800135a:	4803      	ldr	r0, [pc, #12]	@ (8001368 <MX_TIM12_Init+0xac>)
 800135c:	f000 ffdc 	bl	8002318 <HAL_TIM_MspPostInit>

}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	@ 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	24000498 	.word	0x24000498
 800136c:	40001800 	.word	0x40001800

08001370 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
 8001384:	615a      	str	r2, [r3, #20]
 8001386:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001388:	4b1e      	ldr	r3, [pc, #120]	@ (8001404 <MX_TIM13_Init+0x94>)
 800138a:	4a1f      	ldr	r2, [pc, #124]	@ (8001408 <MX_TIM13_Init+0x98>)
 800138c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800138e:	4b1d      	ldr	r3, [pc, #116]	@ (8001404 <MX_TIM13_Init+0x94>)
 8001390:	2200      	movs	r2, #0
 8001392:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001394:	4b1b      	ldr	r3, [pc, #108]	@ (8001404 <MX_TIM13_Init+0x94>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800139a:	4b1a      	ldr	r3, [pc, #104]	@ (8001404 <MX_TIM13_Init+0x94>)
 800139c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013a0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a2:	4b18      	ldr	r3, [pc, #96]	@ (8001404 <MX_TIM13_Init+0x94>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a8:	4b16      	ldr	r3, [pc, #88]	@ (8001404 <MX_TIM13_Init+0x94>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80013ae:	4815      	ldr	r0, [pc, #84]	@ (8001404 <MX_TIM13_Init+0x94>)
 80013b0:	f005 fd6b 	bl	8006e8a <HAL_TIM_Base_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80013ba:	f000 fba9 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80013be:	4811      	ldr	r0, [pc, #68]	@ (8001404 <MX_TIM13_Init+0x94>)
 80013c0:	f005 fe32 	bl	8007028 <HAL_TIM_PWM_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80013ca:	f000 fba1 	bl	8001b10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ce:	2360      	movs	r3, #96	@ 0x60
 80013d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	2200      	movs	r2, #0
 80013e2:	4619      	mov	r1, r3
 80013e4:	4807      	ldr	r0, [pc, #28]	@ (8001404 <MX_TIM13_Init+0x94>)
 80013e6:	f006 f88d 	bl	8007504 <HAL_TIM_PWM_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80013f0:	f000 fb8e 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80013f4:	4803      	ldr	r0, [pc, #12]	@ (8001404 <MX_TIM13_Init+0x94>)
 80013f6:	f000 ff8f 	bl	8002318 <HAL_TIM_MspPostInit>

}
 80013fa:	bf00      	nop
 80013fc:	3720      	adds	r7, #32
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	240004e4 	.word	0x240004e4
 8001408:	40001c00 	.word	0x40001c00

0800140c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
 8001420:	615a      	str	r2, [r3, #20]
 8001422:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001424:	4b1e      	ldr	r3, [pc, #120]	@ (80014a0 <MX_TIM14_Init+0x94>)
 8001426:	4a1f      	ldr	r2, [pc, #124]	@ (80014a4 <MX_TIM14_Init+0x98>)
 8001428:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800142a:	4b1d      	ldr	r3, [pc, #116]	@ (80014a0 <MX_TIM14_Init+0x94>)
 800142c:	2200      	movs	r2, #0
 800142e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001430:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <MX_TIM14_Init+0x94>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001436:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <MX_TIM14_Init+0x94>)
 8001438:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800143c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143e:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <MX_TIM14_Init+0x94>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001444:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <MX_TIM14_Init+0x94>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800144a:	4815      	ldr	r0, [pc, #84]	@ (80014a0 <MX_TIM14_Init+0x94>)
 800144c:	f005 fd1d 	bl	8006e8a <HAL_TIM_Base_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001456:	f000 fb5b 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800145a:	4811      	ldr	r0, [pc, #68]	@ (80014a0 <MX_TIM14_Init+0x94>)
 800145c:	f005 fde4 	bl	8007028 <HAL_TIM_PWM_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001466:	f000 fb53 	bl	8001b10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146a:	2360      	movs	r3, #96	@ 0x60
 800146c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2200      	movs	r2, #0
 800147e:	4619      	mov	r1, r3
 8001480:	4807      	ldr	r0, [pc, #28]	@ (80014a0 <MX_TIM14_Init+0x94>)
 8001482:	f006 f83f 	bl	8007504 <HAL_TIM_PWM_ConfigChannel>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800148c:	f000 fb40 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001490:	4803      	ldr	r0, [pc, #12]	@ (80014a0 <MX_TIM14_Init+0x94>)
 8001492:	f000 ff41 	bl	8002318 <HAL_TIM_MspPostInit>

}
 8001496:	bf00      	nop
 8001498:	3720      	adds	r7, #32
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	24000530 	.word	0x24000530
 80014a4:	40002000 	.word	0x40002000

080014a8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b096      	sub	sp, #88	@ 0x58
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ae:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]
 80014ca:	615a      	str	r2, [r3, #20]
 80014cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	222c      	movs	r2, #44	@ 0x2c
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f008 f88f 	bl	80095f8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80014da:	4b3a      	ldr	r3, [pc, #232]	@ (80015c4 <MX_TIM15_Init+0x11c>)
 80014dc:	4a3a      	ldr	r2, [pc, #232]	@ (80015c8 <MX_TIM15_Init+0x120>)
 80014de:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80014e0:	4b38      	ldr	r3, [pc, #224]	@ (80015c4 <MX_TIM15_Init+0x11c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e6:	4b37      	ldr	r3, [pc, #220]	@ (80015c4 <MX_TIM15_Init+0x11c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80014ec:	4b35      	ldr	r3, [pc, #212]	@ (80015c4 <MX_TIM15_Init+0x11c>)
 80014ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014f2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f4:	4b33      	ldr	r3, [pc, #204]	@ (80015c4 <MX_TIM15_Init+0x11c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80014fa:	4b32      	ldr	r3, [pc, #200]	@ (80015c4 <MX_TIM15_Init+0x11c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001500:	4b30      	ldr	r3, [pc, #192]	@ (80015c4 <MX_TIM15_Init+0x11c>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001506:	482f      	ldr	r0, [pc, #188]	@ (80015c4 <MX_TIM15_Init+0x11c>)
 8001508:	f005 fd8e 	bl	8007028 <HAL_TIM_PWM_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001512:	f000 fafd 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001516:	2300      	movs	r3, #0
 8001518:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800151e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001522:	4619      	mov	r1, r3
 8001524:	4827      	ldr	r0, [pc, #156]	@ (80015c4 <MX_TIM15_Init+0x11c>)
 8001526:	f006 fe61 	bl	80081ec <HAL_TIMEx_MasterConfigSynchronization>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001530:	f000 faee 	bl	8001b10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001534:	2360      	movs	r3, #96	@ 0x60
 8001536:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800153c:	2300      	movs	r3, #0
 800153e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001540:	2300      	movs	r3, #0
 8001542:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800154c:	2300      	movs	r3, #0
 800154e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001550:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001554:	2200      	movs	r2, #0
 8001556:	4619      	mov	r1, r3
 8001558:	481a      	ldr	r0, [pc, #104]	@ (80015c4 <MX_TIM15_Init+0x11c>)
 800155a:	f005 ffd3 	bl	8007504 <HAL_TIM_PWM_ConfigChannel>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001564:	f000 fad4 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001568:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800156c:	2204      	movs	r2, #4
 800156e:	4619      	mov	r1, r3
 8001570:	4814      	ldr	r0, [pc, #80]	@ (80015c4 <MX_TIM15_Init+0x11c>)
 8001572:	f005 ffc7 	bl	8007504 <HAL_TIM_PWM_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 800157c:	f000 fac8 	bl	8001b10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001594:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001598:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	4619      	mov	r1, r3
 80015a6:	4807      	ldr	r0, [pc, #28]	@ (80015c4 <MX_TIM15_Init+0x11c>)
 80015a8:	f006 feae 	bl	8008308 <HAL_TIMEx_ConfigBreakDeadTime>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80015b2:	f000 faad 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80015b6:	4803      	ldr	r0, [pc, #12]	@ (80015c4 <MX_TIM15_Init+0x11c>)
 80015b8:	f000 feae 	bl	8002318 <HAL_TIM_MspPostInit>

}
 80015bc:	bf00      	nop
 80015be:	3758      	adds	r7, #88	@ 0x58
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	2400057c 	.word	0x2400057c
 80015c8:	40014000 	.word	0x40014000

080015cc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b092      	sub	sp, #72	@ 0x48
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	611a      	str	r2, [r3, #16]
 80015e2:	615a      	str	r2, [r3, #20]
 80015e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015e6:	463b      	mov	r3, r7
 80015e8:	222c      	movs	r2, #44	@ 0x2c
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f008 f803 	bl	80095f8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80015f2:	4b31      	ldr	r3, [pc, #196]	@ (80016b8 <MX_TIM16_Init+0xec>)
 80015f4:	4a31      	ldr	r2, [pc, #196]	@ (80016bc <MX_TIM16_Init+0xf0>)
 80015f6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80015f8:	4b2f      	ldr	r3, [pc, #188]	@ (80016b8 <MX_TIM16_Init+0xec>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fe:	4b2e      	ldr	r3, [pc, #184]	@ (80016b8 <MX_TIM16_Init+0xec>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001604:	4b2c      	ldr	r3, [pc, #176]	@ (80016b8 <MX_TIM16_Init+0xec>)
 8001606:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800160a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160c:	4b2a      	ldr	r3, [pc, #168]	@ (80016b8 <MX_TIM16_Init+0xec>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001612:	4b29      	ldr	r3, [pc, #164]	@ (80016b8 <MX_TIM16_Init+0xec>)
 8001614:	2200      	movs	r2, #0
 8001616:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001618:	4b27      	ldr	r3, [pc, #156]	@ (80016b8 <MX_TIM16_Init+0xec>)
 800161a:	2200      	movs	r2, #0
 800161c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800161e:	4826      	ldr	r0, [pc, #152]	@ (80016b8 <MX_TIM16_Init+0xec>)
 8001620:	f005 fc33 	bl	8006e8a <HAL_TIM_Base_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800162a:	f000 fa71 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800162e:	4822      	ldr	r0, [pc, #136]	@ (80016b8 <MX_TIM16_Init+0xec>)
 8001630:	f005 fcfa 	bl	8007028 <HAL_TIM_PWM_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800163a:	f000 fa69 	bl	8001b10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800163e:	2360      	movs	r3, #96	@ 0x60
 8001640:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001646:	2300      	movs	r3, #0
 8001648:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800164a:	2300      	movs	r3, #0
 800164c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001652:	2300      	movs	r3, #0
 8001654:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800165a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800165e:	2200      	movs	r2, #0
 8001660:	4619      	mov	r1, r3
 8001662:	4815      	ldr	r0, [pc, #84]	@ (80016b8 <MX_TIM16_Init+0xec>)
 8001664:	f005 ff4e 	bl	8007504 <HAL_TIM_PWM_ConfigChannel>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800166e:	f000 fa4f 	bl	8001b10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001686:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800168a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001694:	463b      	mov	r3, r7
 8001696:	4619      	mov	r1, r3
 8001698:	4807      	ldr	r0, [pc, #28]	@ (80016b8 <MX_TIM16_Init+0xec>)
 800169a:	f006 fe35 	bl	8008308 <HAL_TIMEx_ConfigBreakDeadTime>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80016a4:	f000 fa34 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80016a8:	4803      	ldr	r0, [pc, #12]	@ (80016b8 <MX_TIM16_Init+0xec>)
 80016aa:	f000 fe35 	bl	8002318 <HAL_TIM_MspPostInit>

}
 80016ae:	bf00      	nop
 80016b0:	3748      	adds	r7, #72	@ 0x48
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	240005c8 	.word	0x240005c8
 80016bc:	40014400 	.word	0x40014400

080016c0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80016c4:	4b22      	ldr	r3, [pc, #136]	@ (8001750 <MX_UART4_Init+0x90>)
 80016c6:	4a23      	ldr	r2, [pc, #140]	@ (8001754 <MX_UART4_Init+0x94>)
 80016c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80016ca:	4b21      	ldr	r3, [pc, #132]	@ (8001750 <MX_UART4_Init+0x90>)
 80016cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80016d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001750 <MX_UART4_Init+0x90>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80016d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001750 <MX_UART4_Init+0x90>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80016de:	4b1c      	ldr	r3, [pc, #112]	@ (8001750 <MX_UART4_Init+0x90>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80016e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001750 <MX_UART4_Init+0x90>)
 80016e6:	220c      	movs	r2, #12
 80016e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ea:	4b19      	ldr	r3, [pc, #100]	@ (8001750 <MX_UART4_Init+0x90>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f0:	4b17      	ldr	r3, [pc, #92]	@ (8001750 <MX_UART4_Init+0x90>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016f6:	4b16      	ldr	r3, [pc, #88]	@ (8001750 <MX_UART4_Init+0x90>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016fc:	4b14      	ldr	r3, [pc, #80]	@ (8001750 <MX_UART4_Init+0x90>)
 80016fe:	2200      	movs	r2, #0
 8001700:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001702:	4b13      	ldr	r3, [pc, #76]	@ (8001750 <MX_UART4_Init+0x90>)
 8001704:	2200      	movs	r2, #0
 8001706:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001708:	4811      	ldr	r0, [pc, #68]	@ (8001750 <MX_UART4_Init+0x90>)
 800170a:	f006 fe99 	bl	8008440 <HAL_UART_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001714:	f000 f9fc 	bl	8001b10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001718:	2100      	movs	r1, #0
 800171a:	480d      	ldr	r0, [pc, #52]	@ (8001750 <MX_UART4_Init+0x90>)
 800171c:	f007 fea1 	bl	8009462 <HAL_UARTEx_SetTxFifoThreshold>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001726:	f000 f9f3 	bl	8001b10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800172a:	2100      	movs	r1, #0
 800172c:	4808      	ldr	r0, [pc, #32]	@ (8001750 <MX_UART4_Init+0x90>)
 800172e:	f007 fed6 	bl	80094de <HAL_UARTEx_SetRxFifoThreshold>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001738:	f000 f9ea 	bl	8001b10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800173c:	4804      	ldr	r0, [pc, #16]	@ (8001750 <MX_UART4_Init+0x90>)
 800173e:	f007 fe57 	bl	80093f0 <HAL_UARTEx_DisableFifoMode>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001748:	f000 f9e2 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}
 8001750:	24000614 	.word	0x24000614
 8001754:	40004c00 	.word	0x40004c00

08001758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08c      	sub	sp, #48	@ 0x30
 800175c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800176e:	4b6f      	ldr	r3, [pc, #444]	@ (800192c <MX_GPIO_Init+0x1d4>)
 8001770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001774:	4a6d      	ldr	r2, [pc, #436]	@ (800192c <MX_GPIO_Init+0x1d4>)
 8001776:	f043 0310 	orr.w	r3, r3, #16
 800177a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800177e:	4b6b      	ldr	r3, [pc, #428]	@ (800192c <MX_GPIO_Init+0x1d4>)
 8001780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001784:	f003 0310 	and.w	r3, r3, #16
 8001788:	61bb      	str	r3, [r7, #24]
 800178a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800178c:	4b67      	ldr	r3, [pc, #412]	@ (800192c <MX_GPIO_Init+0x1d4>)
 800178e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001792:	4a66      	ldr	r2, [pc, #408]	@ (800192c <MX_GPIO_Init+0x1d4>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800179c:	4b63      	ldr	r3, [pc, #396]	@ (800192c <MX_GPIO_Init+0x1d4>)
 800179e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017aa:	4b60      	ldr	r3, [pc, #384]	@ (800192c <MX_GPIO_Init+0x1d4>)
 80017ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b0:	4a5e      	ldr	r2, [pc, #376]	@ (800192c <MX_GPIO_Init+0x1d4>)
 80017b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ba:	4b5c      	ldr	r3, [pc, #368]	@ (800192c <MX_GPIO_Init+0x1d4>)
 80017bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c8:	4b58      	ldr	r3, [pc, #352]	@ (800192c <MX_GPIO_Init+0x1d4>)
 80017ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ce:	4a57      	ldr	r2, [pc, #348]	@ (800192c <MX_GPIO_Init+0x1d4>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017d8:	4b54      	ldr	r3, [pc, #336]	@ (800192c <MX_GPIO_Init+0x1d4>)
 80017da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e6:	4b51      	ldr	r3, [pc, #324]	@ (800192c <MX_GPIO_Init+0x1d4>)
 80017e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ec:	4a4f      	ldr	r2, [pc, #316]	@ (800192c <MX_GPIO_Init+0x1d4>)
 80017ee:	f043 0302 	orr.w	r3, r3, #2
 80017f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017f6:	4b4d      	ldr	r3, [pc, #308]	@ (800192c <MX_GPIO_Init+0x1d4>)
 80017f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001804:	4b49      	ldr	r3, [pc, #292]	@ (800192c <MX_GPIO_Init+0x1d4>)
 8001806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800180a:	4a48      	ldr	r2, [pc, #288]	@ (800192c <MX_GPIO_Init+0x1d4>)
 800180c:	f043 0308 	orr.w	r3, r3, #8
 8001810:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001814:	4b45      	ldr	r3, [pc, #276]	@ (800192c <MX_GPIO_Init+0x1d4>)
 8001816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TIM1_CH3_PHASE_Pin|TIM1_CH4_PHASE_Pin|TIM2_CH1_PHASE_Pin|TIM8_CH4_PHASE_Pin
 8001822:	2200      	movs	r2, #0
 8001824:	f249 519f 	movw	r1, #38303	@ 0x959f
 8001828:	4841      	ldr	r0, [pc, #260]	@ (8001930 <MX_GPIO_Init+0x1d8>)
 800182a:	f001 fbf3 	bl	8003014 <HAL_GPIO_WritePin>
                          |TIM12_CH2_PHASE_Pin|TIM13_CH1_PHASE_Pin|TIM14_CH1_PHASE_Pin|TIM15_CH1_PHASE_Pin
                          |TIM1_CH1_PHASE_Pin|TIM1_CH2_PHASE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIM4_CH4_PHASE_Pin|TIM5_CH2_PHASE_Pin|TIM5_CH3_PHASE_Pin|TIM4_CH3_PHASE_Pin, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001834:	483f      	ldr	r0, [pc, #252]	@ (8001934 <MX_GPIO_Init+0x1dc>)
 8001836:	f001 fbed 	bl	8003014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin|TIM4_CH1_PHASE_Pin
 800183a:	2200      	movs	r2, #0
 800183c:	f642 4107 	movw	r1, #11271	@ 0x2c07
 8001840:	483d      	ldr	r0, [pc, #244]	@ (8001938 <MX_GPIO_Init+0x1e0>)
 8001842:	f001 fbe7 	bl	8003014 <HAL_GPIO_WritePin>
                          |TIM4_CH2_PHASE_Pin|SPI6_MUX_OE_n_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HRTIM_CHC1_PHASE_Pin|HRTIM_CHC2_PHASE_Pin|HRTIM_CHD1_PHASE_Pin|HRTIM_CHD2_PHASE_Pin
 8001846:	2200      	movs	r2, #0
 8001848:	f640 71f3 	movw	r1, #4083	@ 0xff3
 800184c:	483b      	ldr	r0, [pc, #236]	@ (800193c <MX_GPIO_Init+0x1e4>)
 800184e:	f001 fbe1 	bl	8003014 <HAL_GPIO_WritePin>
                          |TIM15_CH2_PHASE_Pin|TIM16_CH1_PHASE_Pin|HRTIM_CHA1_PHASE_Pin|HRTIM_CHA2_PHASE_Pin
                          |HRTIM_CHB1_PHASE_Pin|HRTIM_CHB2_PHASE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACTUATOR_ENABLE_MCU_GPIO_Port, ACTUATOR_ENABLE_MCU_Pin, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001858:	4839      	ldr	r0, [pc, #228]	@ (8001940 <MX_GPIO_Init+0x1e8>)
 800185a:	f001 fbdb 	bl	8003014 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TIM1_CH3_PHASE_Pin TIM1_CH4_PHASE_Pin TIM2_CH1_PHASE_Pin TIM8_CH4_PHASE_Pin
                           TIM12_CH2_PHASE_Pin TIM13_CH1_PHASE_Pin TIM14_CH1_PHASE_Pin TIM15_CH1_PHASE_Pin
                           TIM1_CH1_PHASE_Pin TIM1_CH2_PHASE_Pin */
  GPIO_InitStruct.Pin = TIM1_CH3_PHASE_Pin|TIM1_CH4_PHASE_Pin|TIM2_CH1_PHASE_Pin|TIM8_CH4_PHASE_Pin
 800185e:	f249 539f 	movw	r3, #38303	@ 0x959f
 8001862:	61fb      	str	r3, [r7, #28]
                          |TIM12_CH2_PHASE_Pin|TIM13_CH1_PHASE_Pin|TIM14_CH1_PHASE_Pin|TIM15_CH1_PHASE_Pin
                          |TIM1_CH1_PHASE_Pin|TIM1_CH2_PHASE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001870:	f107 031c 	add.w	r3, r7, #28
 8001874:	4619      	mov	r1, r3
 8001876:	482e      	ldr	r0, [pc, #184]	@ (8001930 <MX_GPIO_Init+0x1d8>)
 8001878:	f001 fa1c 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH4_PHASE_Pin TIM5_CH2_PHASE_Pin TIM5_CH3_PHASE_Pin TIM4_CH3_PHASE_Pin */
  GPIO_InitStruct.Pin = TIM4_CH4_PHASE_Pin|TIM5_CH2_PHASE_Pin|TIM5_CH3_PHASE_Pin|TIM4_CH3_PHASE_Pin;
 800187c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001882:	2301      	movs	r3, #1
 8001884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188e:	f107 031c 	add.w	r3, r7, #28
 8001892:	4619      	mov	r1, r3
 8001894:	4827      	ldr	r0, [pc, #156]	@ (8001934 <MX_GPIO_Init+0x1dc>)
 8001896:	f001 fa0d 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800189a:	2301      	movs	r3, #1
 800189c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800189e:	2303      	movs	r3, #3
 80018a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a6:	f107 031c 	add.w	r3, r7, #28
 80018aa:	4619      	mov	r1, r3
 80018ac:	4821      	ldr	r0, [pc, #132]	@ (8001934 <MX_GPIO_Init+0x1dc>)
 80018ae:	f001 fa01 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDC1_INTB_Pin LDC0_INTB_Pin */
  GPIO_InitStruct.Pin = LDC1_INTB_Pin|LDC0_INTB_Pin;
 80018b2:	2318      	movs	r3, #24
 80018b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	481b      	ldr	r0, [pc, #108]	@ (8001934 <MX_GPIO_Init+0x1dc>)
 80018c6:	f001 f9f5 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin TIM4_CH1_PHASE_Pin
                           TIM4_CH2_PHASE_Pin SPI6_MUX_OE_n_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|TIM4_CH1_PHASE_Pin
 80018ca:	f642 4307 	movw	r3, #11271	@ 0x2c07
 80018ce:	61fb      	str	r3, [r7, #28]
                          |TIM4_CH2_PHASE_Pin|SPI6_MUX_OE_n_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d0:	2301      	movs	r3, #1
 80018d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	4619      	mov	r1, r3
 80018e2:	4815      	ldr	r0, [pc, #84]	@ (8001938 <MX_GPIO_Init+0x1e0>)
 80018e4:	f001 f9e6 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HRTIM_CHC1_PHASE_Pin HRTIM_CHC2_PHASE_Pin HRTIM_CHD1_PHASE_Pin HRTIM_CHD2_PHASE_Pin
                           TIM15_CH2_PHASE_Pin TIM16_CH1_PHASE_Pin HRTIM_CHA1_PHASE_Pin HRTIM_CHA2_PHASE_Pin
                           HRTIM_CHB1_PHASE_Pin HRTIM_CHB2_PHASE_Pin */
  GPIO_InitStruct.Pin = HRTIM_CHC1_PHASE_Pin|HRTIM_CHC2_PHASE_Pin|HRTIM_CHD1_PHASE_Pin|HRTIM_CHD2_PHASE_Pin
 80018e8:	f640 73f3 	movw	r3, #4083	@ 0xff3
 80018ec:	61fb      	str	r3, [r7, #28]
                          |TIM15_CH2_PHASE_Pin|TIM16_CH1_PHASE_Pin|HRTIM_CHA1_PHASE_Pin|HRTIM_CHA2_PHASE_Pin
                          |HRTIM_CHB1_PHASE_Pin|HRTIM_CHB2_PHASE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ee:	2301      	movs	r3, #1
 80018f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fa:	f107 031c 	add.w	r3, r7, #28
 80018fe:	4619      	mov	r1, r3
 8001900:	480e      	ldr	r0, [pc, #56]	@ (800193c <MX_GPIO_Init+0x1e4>)
 8001902:	f001 f9d7 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACTUATOR_ENABLE_MCU_Pin */
  GPIO_InitStruct.Pin = ACTUATOR_ENABLE_MCU_Pin;
 8001906:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800190a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190c:	2301      	movs	r3, #1
 800190e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACTUATOR_ENABLE_MCU_GPIO_Port, &GPIO_InitStruct);
 8001918:	f107 031c 	add.w	r3, r7, #28
 800191c:	4619      	mov	r1, r3
 800191e:	4808      	ldr	r0, [pc, #32]	@ (8001940 <MX_GPIO_Init+0x1e8>)
 8001920:	f001 f9c8 	bl	8002cb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001924:	bf00      	nop
 8001926:	3730      	adds	r7, #48	@ 0x30
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	58024400 	.word	0x58024400
 8001930:	58021000 	.word	0x58021000
 8001934:	58020800 	.word	0x58020800
 8001938:	58020400 	.word	0x58020400
 800193c:	58020c00 	.word	0x58020c00
 8001940:	58020000 	.word	0x58020000
 8001944:	00000000 	.word	0x00000000

08001948 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
		static int i=0;
		static int phase = 1;
		const double step = 0.02;// setpoint reference (arbitrary units)
 8001950:	a321      	add	r3, pc, #132	@ (adr r3, 80019d8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001956:	e9c7 2302 	strd	r2, r3, [r7, #8]

		if (htim==&htim1){
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a18      	ldr	r2, [pc, #96]	@ (80019c0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d128      	bne.n	80019b4 <HAL_TIM_PeriodElapsedCallback+0x6c>
		  i+=1;
 8001962:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	3301      	adds	r3, #1
 8001968:	4a16      	ldr	r2, [pc, #88]	@ (80019c4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800196a:	6013      	str	r3, [r2, #0]
		  if(i%ONESEC == TRUE)
 800196c:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b15      	ldr	r3, [pc, #84]	@ (80019c8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001972:	fb83 1302 	smull	r1, r3, r3, r2
 8001976:	1319      	asrs	r1, r3, #12
 8001978:	17d3      	asrs	r3, r2, #31
 800197a:	1acb      	subs	r3, r1, r3
 800197c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b01      	cmp	r3, #1
 8001988:	d104      	bne.n	8001994 <HAL_TIM_PeriodElapsedCallback+0x4c>
		  {
			phase = -phase;
 800198a:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	425b      	negs	r3, r3
 8001990:	4a0e      	ldr	r2, [pc, #56]	@ (80019cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001992:	6013      	str	r3, [r2, #0]
		  }
		  ref = phase*step;
 8001994:	4b0d      	ldr	r3, [pc, #52]	@ (80019cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	ee07 3a90 	vmov	s15, r3
 800199c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019a0:	ed97 7b02 	vldr	d7, [r7, #8]
 80019a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80019a8:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80019aa:	ed83 7b00 	vstr	d7, [r3]
		  ctrl_tmr_expired = TRUE;
 80019ae:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	701a      	strb	r2, [r3, #0]
	  }
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	2400031c 	.word	0x2400031c
 80019c4:	240006b8 	.word	0x240006b8
 80019c8:	68db8bad 	.word	0x68db8bad
 80019cc:	24000000 	.word	0x24000000
 80019d0:	240006b0 	.word	0x240006b0
 80019d4:	240006a8 	.word	0x240006a8
 80019d8:	47ae147b 	.word	0x47ae147b
 80019dc:	3f947ae1 	.word	0x3f947ae1

080019e0 <control_update>:

static void control_update(double ref)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	ed87 0b00 	vstr	d0, [r7]
	// sign bit of the command fed to phase input on the h-bridge
	static int phase=GPIO_PIN_SET;
	static uint16_t dutycycle=0;
	double absref = 0;
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// calculate the dutycycle
	absref = fabs(ref); // duty cycle must be positive
 80019f6:	ed97 7b00 	vldr	d7, [r7]
 80019fa:	eeb0 7bc7 	vabs.f64	d7, d7
 80019fe:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8001a02:	ed9f 7b27 	vldr	d7, [pc, #156]	@ 8001aa0 <control_update+0xc0>
 8001a06:	eeb0 1b47 	vmov.f64	d1, d7
 8001a0a:	ed97 0b02 	vldr	d0, [r7, #8]
 8001a0e:	f000 f853 	bl	8001ab8 <calc_dutycycle>
 8001a12:	4603      	mov	r3, r0
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b24      	ldr	r3, [pc, #144]	@ (8001aa8 <control_update+0xc8>)
 8001a18:	801a      	strh	r2, [r3, #0]

	// Set the actuator direction
	if(ref < 0){
 8001a1a:	ed97 7b00 	vldr	d7, [r7]
 8001a1e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a26:	d503      	bpl.n	8001a30 <control_update+0x50>
		phase = GPIO_PIN_RESET; // reverse direction
 8001a28:	4b20      	ldr	r3, [pc, #128]	@ (8001aac <control_update+0xcc>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	e002      	b.n	8001a36 <control_update+0x56>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 8001a30:	4b1e      	ldr	r3, [pc, #120]	@ (8001aac <control_update+0xcc>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	601a      	str	r2, [r3, #0]
	}

	//Timer 1 channels
	HAL_GPIO_WritePin(TIM1_CH1_PHASE_GPIO_Port, TIM1_CH1_PHASE_Pin, phase);
 8001a36:	4b1d      	ldr	r3, [pc, #116]	@ (8001aac <control_update+0xcc>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	2101      	movs	r1, #1
 8001a40:	481b      	ldr	r0, [pc, #108]	@ (8001ab0 <control_update+0xd0>)
 8001a42:	f001 fae7 	bl	8003014 <HAL_GPIO_WritePin>
	TIM1->CCR1 = dutycycle;
 8001a46:	4b18      	ldr	r3, [pc, #96]	@ (8001aa8 <control_update+0xc8>)
 8001a48:	881a      	ldrh	r2, [r3, #0]
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab4 <control_update+0xd4>)
 8001a4c:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_GPIO_WritePin(TIM1_CH2_PHASE_GPIO_Port, TIM1_CH2_PHASE_Pin, phase);
 8001a4e:	4b17      	ldr	r3, [pc, #92]	@ (8001aac <control_update+0xcc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	2102      	movs	r1, #2
 8001a58:	4815      	ldr	r0, [pc, #84]	@ (8001ab0 <control_update+0xd0>)
 8001a5a:	f001 fadb 	bl	8003014 <HAL_GPIO_WritePin>
	TIM1->CCR2 = dutycycle;
 8001a5e:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <control_update+0xc8>)
 8001a60:	881a      	ldrh	r2, [r3, #0]
 8001a62:	4b14      	ldr	r3, [pc, #80]	@ (8001ab4 <control_update+0xd4>)
 8001a64:	639a      	str	r2, [r3, #56]	@ 0x38

	HAL_GPIO_WritePin(TIM1_CH3_PHASE_GPIO_Port, TIM1_CH3_PHASE_Pin, phase);
 8001a66:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <control_update+0xcc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2104      	movs	r1, #4
 8001a70:	480f      	ldr	r0, [pc, #60]	@ (8001ab0 <control_update+0xd0>)
 8001a72:	f001 facf 	bl	8003014 <HAL_GPIO_WritePin>
	TIM1->CCR3 = dutycycle;
 8001a76:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <control_update+0xc8>)
 8001a78:	881a      	ldrh	r2, [r3, #0]
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <control_update+0xd4>)
 8001a7c:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_GPIO_WritePin(TIM1_CH4_PHASE_GPIO_Port, TIM1_CH4_PHASE_Pin, phase);
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001aac <control_update+0xcc>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	461a      	mov	r2, r3
 8001a86:	2108      	movs	r1, #8
 8001a88:	4809      	ldr	r0, [pc, #36]	@ (8001ab0 <control_update+0xd0>)
 8001a8a:	f001 fac3 	bl	8003014 <HAL_GPIO_WritePin>
	TIM1->CCR4 = dutycycle;
 8001a8e:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <control_update+0xc8>)
 8001a90:	881a      	ldrh	r2, [r3, #0]
 8001a92:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <control_update+0xd4>)
 8001a94:	641a      	str	r2, [r3, #64]	@ 0x40
	//End Timer 1
}
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	cccccccd 	.word	0xcccccccd
 8001aa4:	3ffccccc 	.word	0x3ffccccc
 8001aa8:	240006bc 	.word	0x240006bc
 8001aac:	24000004 	.word	0x24000004
 8001ab0:	58021000 	.word	0x58021000
 8001ab4:	40010000 	.word	0x40010000

08001ab8 <calc_dutycycle>:

static uint16_t calc_dutycycle(double cmd, double vss)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	ed87 0b02 	vstr	d0, [r7, #8]
 8001ac2:	ed87 1b00 	vstr	d1, [r7]
	//	@ param cmd command voltage
	//	@ param vss supply voltage
	//	@ return dutycycle

	// duty cycle variable
	uint16_t dc={0};
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	82fb      	strh	r3, [r7, #22]

	dc = (uint16_t)(cmd/vss * (double)PERIOD);
 8001aca:	ed97 5b02 	vldr	d5, [r7, #8]
 8001ace:	ed97 6b00 	vldr	d6, [r7]
 8001ad2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ad6:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8001b08 <calc_dutycycle+0x50>
 8001ada:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ade:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ae2:	ee17 3a90 	vmov	r3, s15
 8001ae6:	82fb      	strh	r3, [r7, #22]
	// keep the dutycycle within the period of the PWM signal
	if(dc>PERIOD) dc = PERIOD;
 8001ae8:	8afb      	ldrh	r3, [r7, #22]
 8001aea:	f645 52c0 	movw	r2, #24000	@ 0x5dc0
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d902      	bls.n	8001af8 <calc_dutycycle+0x40>
 8001af2:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 8001af6:	82fb      	strh	r3, [r7, #22]

	return dc;
 8001af8:	8afb      	ldrh	r3, [r7, #22]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	371c      	adds	r7, #28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	40d77000 	.word	0x40d77000

08001b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b14:	b672      	cpsid	i
}
 8001b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <Error_Handler+0x8>

08001b1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <HAL_MspInit+0x30>)
 8001b24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b28:	4a08      	ldr	r2, [pc, #32]	@ (8001b4c <HAL_MspInit+0x30>)
 8001b2a:	f043 0302 	orr.w	r3, r3, #2
 8001b2e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001b32:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <HAL_MspInit+0x30>)
 8001b34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	58024400 	.word	0x58024400

08001b50 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b0b4      	sub	sp, #208	@ 0xd0
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b58:	f107 0310 	add.w	r3, r7, #16
 8001b5c:	22c0      	movs	r2, #192	@ 0xc0
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f007 fd49 	bl	80095f8 <memset>
  if(hhrtim->Instance==HRTIM1)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a14      	ldr	r2, [pc, #80]	@ (8001bbc <HAL_HRTIM_MspInit+0x6c>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d121      	bne.n	8001bb4 <HAL_HRTIM_MspInit+0x64>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8001b70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b82:	f107 0310 	add.w	r3, r7, #16
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 fa14 	bl	8004fb4 <HAL_RCCEx_PeriphCLKConfig>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8001b92:	f7ff ffbd 	bl	8001b10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001b96:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc0 <HAL_HRTIM_MspInit+0x70>)
 8001b98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b9c:	4a08      	ldr	r2, [pc, #32]	@ (8001bc0 <HAL_HRTIM_MspInit+0x70>)
 8001b9e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001ba2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ba6:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <HAL_HRTIM_MspInit+0x70>)
 8001ba8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8001bb4:	bf00      	nop
 8001bb6:	37d0      	adds	r7, #208	@ 0xd0
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40017400 	.word	0x40017400
 8001bc0:	58024400 	.word	0x58024400

08001bc4 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	@ 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a23      	ldr	r2, [pc, #140]	@ (8001c70 <HAL_HRTIM_MspPostInit+0xac>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d13f      	bne.n	8001c66 <HAL_HRTIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be6:	4b23      	ldr	r3, [pc, #140]	@ (8001c74 <HAL_HRTIM_MspPostInit+0xb0>)
 8001be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bec:	4a21      	ldr	r2, [pc, #132]	@ (8001c74 <HAL_HRTIM_MspPostInit+0xb0>)
 8001bee:	f043 0304 	orr.w	r3, r3, #4
 8001bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c74 <HAL_HRTIM_MspPostInit+0xb0>)
 8001bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c04:	4b1b      	ldr	r3, [pc, #108]	@ (8001c74 <HAL_HRTIM_MspPostInit+0xb0>)
 8001c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c0a:	4a1a      	ldr	r2, [pc, #104]	@ (8001c74 <HAL_HRTIM_MspPostInit+0xb0>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c14:	4b17      	ldr	r3, [pc, #92]	@ (8001c74 <HAL_HRTIM_MspPostInit+0xb0>)
 8001c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> HRTIM_CHC1
    PA10     ------> HRTIM_CHC2
    PA11     ------> HRTIM_CHD1
    PA12     ------> HRTIM_CHD2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001c22:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c30:	2303      	movs	r3, #3
 8001c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8001c34:	2301      	movs	r3, #1
 8001c36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480e      	ldr	r0, [pc, #56]	@ (8001c78 <HAL_HRTIM_MspPostInit+0xb4>)
 8001c40:	f001 f838 	bl	8002cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001c44:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001c48:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c52:	2303      	movs	r3, #3
 8001c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8001c56:	2302      	movs	r3, #2
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4806      	ldr	r0, [pc, #24]	@ (8001c7c <HAL_HRTIM_MspPostInit+0xb8>)
 8001c62:	f001 f827 	bl	8002cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001c66:	bf00      	nop
 8001c68:	3728      	adds	r7, #40	@ 0x28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40017400 	.word	0x40017400
 8001c74:	58024400 	.word	0x58024400
 8001c78:	58020800 	.word	0x58020800
 8001c7c:	58020000 	.word	0x58020000

08001c80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b0ba      	sub	sp, #232	@ 0xe8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	22c0      	movs	r2, #192	@ 0xc0
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f007 fca9 	bl	80095f8 <memset>
  if(hi2c->Instance==I2C4)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a27      	ldr	r2, [pc, #156]	@ (8001d48 <HAL_I2C_MspInit+0xc8>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d146      	bne.n	8001d3e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001cb0:	f04f 0210 	mov.w	r2, #16
 8001cb4:	f04f 0300 	mov.w	r3, #0
 8001cb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cc2:	f107 0310 	add.w	r3, r7, #16
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 f974 	bl	8004fb4 <HAL_RCCEx_PeriphCLKConfig>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001cd2:	f7ff ff1d 	bl	8001b10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d4c <HAL_I2C_MspInit+0xcc>)
 8001cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d4c <HAL_I2C_MspInit+0xcc>)
 8001cde:	f043 0302 	orr.w	r3, r3, #2
 8001ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ce6:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <HAL_I2C_MspInit+0xcc>)
 8001ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB6     ------> I2C4_SCL
    PB9     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001cf4:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001cf8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cfc:	2312      	movs	r3, #18
 8001cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8001d0e:	2306      	movs	r3, #6
 8001d10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d14:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d18:	4619      	mov	r1, r3
 8001d1a:	480d      	ldr	r0, [pc, #52]	@ (8001d50 <HAL_I2C_MspInit+0xd0>)
 8001d1c:	f000 ffca 	bl	8002cb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001d20:	4b0a      	ldr	r3, [pc, #40]	@ (8001d4c <HAL_I2C_MspInit+0xcc>)
 8001d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d26:	4a09      	ldr	r2, [pc, #36]	@ (8001d4c <HAL_I2C_MspInit+0xcc>)
 8001d28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d2c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d30:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <HAL_I2C_MspInit+0xcc>)
 8001d32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001d3e:	bf00      	nop
 8001d40:	37e8      	adds	r7, #232	@ 0xe8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	58001c00 	.word	0x58001c00
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	58020400 	.word	0x58020400

08001d54 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b0b6      	sub	sp, #216	@ 0xd8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d5c:	f107 0318 	add.w	r3, r7, #24
 8001d60:	22c0      	movs	r2, #192	@ 0xc0
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f007 fc47 	bl	80095f8 <memset>
  if(hlptim->Instance==LPTIM1)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a3c      	ldr	r2, [pc, #240]	@ (8001e60 <HAL_LPTIM_MspInit+0x10c>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d122      	bne.n	8001dba <HAL_LPTIM_MspInit+0x66>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001d74:	f04f 0220 	mov.w	r2, #32
 8001d78:	f04f 0300 	mov.w	r3, #0
 8001d7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d86:	f107 0318 	add.w	r3, r7, #24
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f003 f912 	bl	8004fb4 <HAL_RCCEx_PeriphCLKConfig>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_LPTIM_MspInit+0x46>
    {
      Error_Handler();
 8001d96:	f7ff febb 	bl	8001b10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001d9a:	4b32      	ldr	r3, [pc, #200]	@ (8001e64 <HAL_LPTIM_MspInit+0x110>)
 8001d9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001da0:	4a30      	ldr	r2, [pc, #192]	@ (8001e64 <HAL_LPTIM_MspInit+0x110>)
 8001da2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001da6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001daa:	4b2e      	ldr	r3, [pc, #184]	@ (8001e64 <HAL_LPTIM_MspInit+0x110>)
 8001dac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001db0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN LPTIM3_MspInit 1 */

  /* USER CODE END LPTIM3_MspInit 1 */
  }

}
 8001db8:	e04e      	b.n	8001e58 <HAL_LPTIM_MspInit+0x104>
  else if(hlptim->Instance==LPTIM2)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a2a      	ldr	r2, [pc, #168]	@ (8001e68 <HAL_LPTIM_MspInit+0x114>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d122      	bne.n	8001e0a <HAL_LPTIM_MspInit+0xb6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8001dc4:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_D3PCLK1;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dd6:	f107 0318 	add.w	r3, r7, #24
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f003 f8ea 	bl	8004fb4 <HAL_RCCEx_PeriphCLKConfig>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_LPTIM_MspInit+0x96>
      Error_Handler();
 8001de6:	f7ff fe93 	bl	8001b10 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8001dea:	4b1e      	ldr	r3, [pc, #120]	@ (8001e64 <HAL_LPTIM_MspInit+0x110>)
 8001dec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001df0:	4a1c      	ldr	r2, [pc, #112]	@ (8001e64 <HAL_LPTIM_MspInit+0x110>)
 8001df2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001df6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8001e64 <HAL_LPTIM_MspInit+0x110>)
 8001dfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	693b      	ldr	r3, [r7, #16]
}
 8001e08:	e026      	b.n	8001e58 <HAL_LPTIM_MspInit+0x104>
  else if(hlptim->Instance==LPTIM3)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a17      	ldr	r2, [pc, #92]	@ (8001e6c <HAL_LPTIM_MspInit+0x118>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d121      	bne.n	8001e58 <HAL_LPTIM_MspInit+0x104>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM3;
 8001e14:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001e18:	f04f 0300 	mov.w	r3, #0
 8001e1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lptim345ClockSelection = RCC_LPTIM345CLKSOURCE_D3PCLK1;
 8001e20:	2300      	movs	r3, #0
 8001e22:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e26:	f107 0318 	add.w	r3, r7, #24
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 f8c2 	bl	8004fb4 <HAL_RCCEx_PeriphCLKConfig>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_LPTIM_MspInit+0xe6>
      Error_Handler();
 8001e36:	f7ff fe6b 	bl	8001b10 <Error_Handler>
    __HAL_RCC_LPTIM3_CLK_ENABLE();
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <HAL_LPTIM_MspInit+0x110>)
 8001e3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e40:	4a08      	ldr	r2, [pc, #32]	@ (8001e64 <HAL_LPTIM_MspInit+0x110>)
 8001e42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e46:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e4a:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <HAL_LPTIM_MspInit+0x110>)
 8001e4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	68fb      	ldr	r3, [r7, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	37d8      	adds	r7, #216	@ 0xd8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40002400 	.word	0x40002400
 8001e64:	58024400 	.word	0x58024400
 8001e68:	58002400 	.word	0x58002400
 8001e6c:	58002800 	.word	0x58002800

08001e70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b0c0      	sub	sp, #256	@ 0x100
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e88:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e8c:	22c0      	movs	r2, #192	@ 0xc0
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f007 fbb1 	bl	80095f8 <memset>
  if(hspi->Instance==SPI2)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a84      	ldr	r2, [pc, #528]	@ (80020ac <HAL_SPI_MspInit+0x23c>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	f040 8090 	bne.w	8001fc2 <HAL_SPI_MspInit+0x152>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001ea2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ea6:	f04f 0300 	mov.w	r3, #0
 8001eaa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eb4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 f87b 	bl	8004fb4 <HAL_RCCEx_PeriphCLKConfig>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001ec4:	f7ff fe24 	bl	8001b10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ec8:	4b79      	ldr	r3, [pc, #484]	@ (80020b0 <HAL_SPI_MspInit+0x240>)
 8001eca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ece:	4a78      	ldr	r2, [pc, #480]	@ (80020b0 <HAL_SPI_MspInit+0x240>)
 8001ed0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ed4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ed8:	4b75      	ldr	r3, [pc, #468]	@ (80020b0 <HAL_SPI_MspInit+0x240>)
 8001eda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ede:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ee2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee6:	4b72      	ldr	r3, [pc, #456]	@ (80020b0 <HAL_SPI_MspInit+0x240>)
 8001ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eec:	4a70      	ldr	r2, [pc, #448]	@ (80020b0 <HAL_SPI_MspInit+0x240>)
 8001eee:	f043 0304 	orr.w	r3, r3, #4
 8001ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ef6:	4b6e      	ldr	r3, [pc, #440]	@ (80020b0 <HAL_SPI_MspInit+0x240>)
 8001ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	623b      	str	r3, [r7, #32]
 8001f02:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f04:	4b6a      	ldr	r3, [pc, #424]	@ (80020b0 <HAL_SPI_MspInit+0x240>)
 8001f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f0a:	4a69      	ldr	r2, [pc, #420]	@ (80020b0 <HAL_SPI_MspInit+0x240>)
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f14:	4b66      	ldr	r3, [pc, #408]	@ (80020b0 <HAL_SPI_MspInit+0x240>)
 8001f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	61fb      	str	r3, [r7, #28]
 8001f20:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f22:	4b63      	ldr	r3, [pc, #396]	@ (80020b0 <HAL_SPI_MspInit+0x240>)
 8001f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f28:	4a61      	ldr	r2, [pc, #388]	@ (80020b0 <HAL_SPI_MspInit+0x240>)
 8001f2a:	f043 0308 	orr.w	r3, r3, #8
 8001f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f32:	4b5f      	ldr	r3, [pc, #380]	@ (80020b0 <HAL_SPI_MspInit+0x240>)
 8001f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	69bb      	ldr	r3, [r7, #24]
    PC1     ------> SPI2_MOSI
    PB12     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f40:	2302      	movs	r3, #2
 8001f42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f58:	2305      	movs	r3, #5
 8001f5a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001f62:	4619      	mov	r1, r3
 8001f64:	4853      	ldr	r0, [pc, #332]	@ (80020b4 <HAL_SPI_MspInit+0x244>)
 8001f66:	f000 fea5 	bl	8002cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001f6a:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001f6e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f84:	2305      	movs	r3, #5
 8001f86:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4849      	ldr	r0, [pc, #292]	@ (80020b8 <HAL_SPI_MspInit+0x248>)
 8001f92:	f000 fe8f 	bl	8002cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f96:	2308      	movs	r3, #8
 8001f98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fae:	2305      	movs	r3, #5
 8001fb0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fb4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4840      	ldr	r0, [pc, #256]	@ (80020bc <HAL_SPI_MspInit+0x24c>)
 8001fbc:	f000 fe7a 	bl	8002cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 8001fc0:	e06e      	b.n	80020a0 <HAL_SPI_MspInit+0x230>
  else if(hspi->Instance==SPI6)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a3e      	ldr	r2, [pc, #248]	@ (80020c0 <HAL_SPI_MspInit+0x250>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d169      	bne.n	80020a0 <HAL_SPI_MspInit+0x230>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 8001fcc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fd0:	f04f 0300 	mov.w	r3, #0
 8001fd4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f002 ffe6 	bl	8004fb4 <HAL_RCCEx_PeriphCLKConfig>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_SPI_MspInit+0x182>
      Error_Handler();
 8001fee:	f7ff fd8f 	bl	8001b10 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001ff2:	4b2f      	ldr	r3, [pc, #188]	@ (80020b0 <HAL_SPI_MspInit+0x240>)
 8001ff4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ff8:	4a2d      	ldr	r2, [pc, #180]	@ (80020b0 <HAL_SPI_MspInit+0x240>)
 8001ffa:	f043 0320 	orr.w	r3, r3, #32
 8001ffe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002002:	4b2b      	ldr	r3, [pc, #172]	@ (80020b0 <HAL_SPI_MspInit+0x240>)
 8002004:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002008:	f003 0320 	and.w	r3, r3, #32
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002010:	4b27      	ldr	r3, [pc, #156]	@ (80020b0 <HAL_SPI_MspInit+0x240>)
 8002012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002016:	4a26      	ldr	r2, [pc, #152]	@ (80020b0 <HAL_SPI_MspInit+0x240>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002020:	4b23      	ldr	r3, [pc, #140]	@ (80020b0 <HAL_SPI_MspInit+0x240>)
 8002022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202e:	4b20      	ldr	r3, [pc, #128]	@ (80020b0 <HAL_SPI_MspInit+0x240>)
 8002030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002034:	4a1e      	ldr	r2, [pc, #120]	@ (80020b0 <HAL_SPI_MspInit+0x240>)
 8002036:	f043 0302 	orr.w	r3, r3, #2
 800203a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800203e:	4b1c      	ldr	r3, [pc, #112]	@ (80020b0 <HAL_SPI_MspInit+0x240>)
 8002040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800204c:	2330      	movs	r3, #48	@ 0x30
 800204e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8002064:	2308      	movs	r3, #8
 8002066:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800206e:	4619      	mov	r1, r3
 8002070:	4814      	ldr	r0, [pc, #80]	@ (80020c4 <HAL_SPI_MspInit+0x254>)
 8002072:	f000 fe1f 	bl	8002cb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002076:	2330      	movs	r3, #48	@ 0x30
 8002078:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002088:	2300      	movs	r3, #0
 800208a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 800208e:	2308      	movs	r3, #8
 8002090:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002094:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002098:	4619      	mov	r1, r3
 800209a:	4807      	ldr	r0, [pc, #28]	@ (80020b8 <HAL_SPI_MspInit+0x248>)
 800209c:	f000 fe0a 	bl	8002cb4 <HAL_GPIO_Init>
}
 80020a0:	bf00      	nop
 80020a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40003800 	.word	0x40003800
 80020b0:	58024400 	.word	0x58024400
 80020b4:	58020800 	.word	0x58020800
 80020b8:	58020400 	.word	0x58020400
 80020bc:	58020c00 	.word	0x58020c00
 80020c0:	58001400 	.word	0x58001400
 80020c4:	58020000 	.word	0x58020000

080020c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a2e      	ldr	r2, [pc, #184]	@ (8002190 <HAL_TIM_Base_MspInit+0xc8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d117      	bne.n	800210a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020da:	4b2e      	ldr	r3, [pc, #184]	@ (8002194 <HAL_TIM_Base_MspInit+0xcc>)
 80020dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020e0:	4a2c      	ldr	r2, [pc, #176]	@ (8002194 <HAL_TIM_Base_MspInit+0xcc>)
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80020ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002194 <HAL_TIM_Base_MspInit+0xcc>)
 80020ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2100      	movs	r1, #0
 80020fc:	2019      	movs	r0, #25
 80020fe:	f000 fda4 	bl	8002c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002102:	2019      	movs	r0, #25
 8002104:	f000 fdbb 	bl	8002c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002108:	e03d      	b.n	8002186 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM13)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a22      	ldr	r2, [pc, #136]	@ (8002198 <HAL_TIM_Base_MspInit+0xd0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d10f      	bne.n	8002134 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002114:	4b1f      	ldr	r3, [pc, #124]	@ (8002194 <HAL_TIM_Base_MspInit+0xcc>)
 8002116:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800211a:	4a1e      	ldr	r2, [pc, #120]	@ (8002194 <HAL_TIM_Base_MspInit+0xcc>)
 800211c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002120:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002124:	4b1b      	ldr	r3, [pc, #108]	@ (8002194 <HAL_TIM_Base_MspInit+0xcc>)
 8002126:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800212a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	693b      	ldr	r3, [r7, #16]
}
 8002132:	e028      	b.n	8002186 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM14)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a18      	ldr	r2, [pc, #96]	@ (800219c <HAL_TIM_Base_MspInit+0xd4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d10f      	bne.n	800215e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800213e:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <HAL_TIM_Base_MspInit+0xcc>)
 8002140:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002144:	4a13      	ldr	r2, [pc, #76]	@ (8002194 <HAL_TIM_Base_MspInit+0xcc>)
 8002146:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800214a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800214e:	4b11      	ldr	r3, [pc, #68]	@ (8002194 <HAL_TIM_Base_MspInit+0xcc>)
 8002150:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
}
 800215c:	e013      	b.n	8002186 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM16)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a0f      	ldr	r2, [pc, #60]	@ (80021a0 <HAL_TIM_Base_MspInit+0xd8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d10e      	bne.n	8002186 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002168:	4b0a      	ldr	r3, [pc, #40]	@ (8002194 <HAL_TIM_Base_MspInit+0xcc>)
 800216a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800216e:	4a09      	ldr	r2, [pc, #36]	@ (8002194 <HAL_TIM_Base_MspInit+0xcc>)
 8002170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002174:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <HAL_TIM_Base_MspInit+0xcc>)
 800217a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800217e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
}
 8002186:	bf00      	nop
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40010000 	.word	0x40010000
 8002194:	58024400 	.word	0x58024400
 8002198:	40001c00 	.word	0x40001c00
 800219c:	40002000 	.word	0x40002000
 80021a0:	40014400 	.word	0x40014400

080021a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08e      	sub	sp, #56	@ 0x38
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021c4:	d12e      	bne.n	8002224 <HAL_TIM_PWM_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021c6:	4b4d      	ldr	r3, [pc, #308]	@ (80022fc <HAL_TIM_PWM_MspInit+0x158>)
 80021c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021cc:	4a4b      	ldr	r2, [pc, #300]	@ (80022fc <HAL_TIM_PWM_MspInit+0x158>)
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80021d6:	4b49      	ldr	r3, [pc, #292]	@ (80022fc <HAL_TIM_PWM_MspInit+0x158>)
 80021d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	623b      	str	r3, [r7, #32]
 80021e2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e4:	4b45      	ldr	r3, [pc, #276]	@ (80022fc <HAL_TIM_PWM_MspInit+0x158>)
 80021e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ea:	4a44      	ldr	r2, [pc, #272]	@ (80022fc <HAL_TIM_PWM_MspInit+0x158>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021f4:	4b41      	ldr	r3, [pc, #260]	@ (80022fc <HAL_TIM_PWM_MspInit+0x158>)
 80021f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = TIM2_CH4_LDC_Pin;
 8002202:	2308      	movs	r3, #8
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002212:	2301      	movs	r3, #1
 8002214:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TIM2_CH4_LDC_GPIO_Port, &GPIO_InitStruct);
 8002216:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800221a:	4619      	mov	r1, r3
 800221c:	4838      	ldr	r0, [pc, #224]	@ (8002300 <HAL_TIM_PWM_MspInit+0x15c>)
 800221e:	f000 fd49 	bl	8002cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002222:	e067      	b.n	80022f4 <HAL_TIM_PWM_MspInit+0x150>
  else if(htim_pwm->Instance==TIM4)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a36      	ldr	r2, [pc, #216]	@ (8002304 <HAL_TIM_PWM_MspInit+0x160>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d10f      	bne.n	800224e <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800222e:	4b33      	ldr	r3, [pc, #204]	@ (80022fc <HAL_TIM_PWM_MspInit+0x158>)
 8002230:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002234:	4a31      	ldr	r2, [pc, #196]	@ (80022fc <HAL_TIM_PWM_MspInit+0x158>)
 8002236:	f043 0304 	orr.w	r3, r3, #4
 800223a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800223e:	4b2f      	ldr	r3, [pc, #188]	@ (80022fc <HAL_TIM_PWM_MspInit+0x158>)
 8002240:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	61bb      	str	r3, [r7, #24]
 800224a:	69bb      	ldr	r3, [r7, #24]
}
 800224c:	e052      	b.n	80022f4 <HAL_TIM_PWM_MspInit+0x150>
  else if(htim_pwm->Instance==TIM5)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a2d      	ldr	r2, [pc, #180]	@ (8002308 <HAL_TIM_PWM_MspInit+0x164>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d10f      	bne.n	8002278 <HAL_TIM_PWM_MspInit+0xd4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002258:	4b28      	ldr	r3, [pc, #160]	@ (80022fc <HAL_TIM_PWM_MspInit+0x158>)
 800225a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800225e:	4a27      	ldr	r2, [pc, #156]	@ (80022fc <HAL_TIM_PWM_MspInit+0x158>)
 8002260:	f043 0308 	orr.w	r3, r3, #8
 8002264:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002268:	4b24      	ldr	r3, [pc, #144]	@ (80022fc <HAL_TIM_PWM_MspInit+0x158>)
 800226a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	697b      	ldr	r3, [r7, #20]
}
 8002276:	e03d      	b.n	80022f4 <HAL_TIM_PWM_MspInit+0x150>
  else if(htim_pwm->Instance==TIM8)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a23      	ldr	r2, [pc, #140]	@ (800230c <HAL_TIM_PWM_MspInit+0x168>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d10f      	bne.n	80022a2 <HAL_TIM_PWM_MspInit+0xfe>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002282:	4b1e      	ldr	r3, [pc, #120]	@ (80022fc <HAL_TIM_PWM_MspInit+0x158>)
 8002284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002288:	4a1c      	ldr	r2, [pc, #112]	@ (80022fc <HAL_TIM_PWM_MspInit+0x158>)
 800228a:	f043 0302 	orr.w	r3, r3, #2
 800228e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002292:	4b1a      	ldr	r3, [pc, #104]	@ (80022fc <HAL_TIM_PWM_MspInit+0x158>)
 8002294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	693b      	ldr	r3, [r7, #16]
}
 80022a0:	e028      	b.n	80022f4 <HAL_TIM_PWM_MspInit+0x150>
  else if(htim_pwm->Instance==TIM12)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002310 <HAL_TIM_PWM_MspInit+0x16c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d10f      	bne.n	80022cc <HAL_TIM_PWM_MspInit+0x128>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80022ac:	4b13      	ldr	r3, [pc, #76]	@ (80022fc <HAL_TIM_PWM_MspInit+0x158>)
 80022ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022b2:	4a12      	ldr	r2, [pc, #72]	@ (80022fc <HAL_TIM_PWM_MspInit+0x158>)
 80022b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022bc:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <HAL_TIM_PWM_MspInit+0x158>)
 80022be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
}
 80022ca:	e013      	b.n	80022f4 <HAL_TIM_PWM_MspInit+0x150>
  else if(htim_pwm->Instance==TIM15)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a10      	ldr	r2, [pc, #64]	@ (8002314 <HAL_TIM_PWM_MspInit+0x170>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d10e      	bne.n	80022f4 <HAL_TIM_PWM_MspInit+0x150>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80022d6:	4b09      	ldr	r3, [pc, #36]	@ (80022fc <HAL_TIM_PWM_MspInit+0x158>)
 80022d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022dc:	4a07      	ldr	r2, [pc, #28]	@ (80022fc <HAL_TIM_PWM_MspInit+0x158>)
 80022de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80022e6:	4b05      	ldr	r3, [pc, #20]	@ (80022fc <HAL_TIM_PWM_MspInit+0x158>)
 80022e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]
}
 80022f4:	bf00      	nop
 80022f6:	3738      	adds	r7, #56	@ 0x38
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	58024400 	.word	0x58024400
 8002300:	58020000 	.word	0x58020000
 8002304:	40000800 	.word	0x40000800
 8002308:	40000c00 	.word	0x40000c00
 800230c:	40010400 	.word	0x40010400
 8002310:	40001800 	.word	0x40001800
 8002314:	40014000 	.word	0x40014000

08002318 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b092      	sub	sp, #72	@ 0x48
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4aa4      	ldr	r2, [pc, #656]	@ (80025c8 <HAL_TIM_MspPostInit+0x2b0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d120      	bne.n	800237c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800233a:	4ba4      	ldr	r3, [pc, #656]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 800233c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002340:	4aa2      	ldr	r2, [pc, #648]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 8002342:	f043 0310 	orr.w	r3, r3, #16
 8002346:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800234a:	4ba0      	ldr	r3, [pc, #640]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 800234c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	633b      	str	r3, [r7, #48]	@ 0x30
 8002356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002358:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 800235c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	2300      	movs	r3, #0
 8002368:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800236a:	2301      	movs	r3, #1
 800236c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800236e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002372:	4619      	mov	r1, r3
 8002374:	4896      	ldr	r0, [pc, #600]	@ (80025d0 <HAL_TIM_MspPostInit+0x2b8>)
 8002376:	f000 fc9d 	bl	8002cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800237a:	e189      	b.n	8002690 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002384:	d11f      	bne.n	80023c6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002386:	4b91      	ldr	r3, [pc, #580]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 8002388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800238c:	4a8f      	ldr	r2, [pc, #572]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002396:	4b8d      	ldr	r3, [pc, #564]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 8002398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023a4:	2301      	movs	r3, #1
 80023a6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b0:	2300      	movs	r3, #0
 80023b2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023b4:	2301      	movs	r3, #1
 80023b6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023bc:	4619      	mov	r1, r3
 80023be:	4885      	ldr	r0, [pc, #532]	@ (80025d4 <HAL_TIM_MspPostInit+0x2bc>)
 80023c0:	f000 fc78 	bl	8002cb4 <HAL_GPIO_Init>
}
 80023c4:	e164      	b.n	8002690 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM4)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a83      	ldr	r2, [pc, #524]	@ (80025d8 <HAL_TIM_MspPostInit+0x2c0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d13f      	bne.n	8002450 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023d0:	4b7e      	ldr	r3, [pc, #504]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 80023d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023d6:	4a7d      	ldr	r2, [pc, #500]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 80023d8:	f043 0308 	orr.w	r3, r3, #8
 80023dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023e0:	4b7a      	ldr	r3, [pc, #488]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 80023e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ee:	4b77      	ldr	r3, [pc, #476]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 80023f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023f4:	4a75      	ldr	r2, [pc, #468]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 80023f6:	f043 0302 	orr.w	r3, r3, #2
 80023fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023fe:	4b73      	ldr	r3, [pc, #460]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 8002400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	627b      	str	r3, [r7, #36]	@ 0x24
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800240c:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002410:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002412:	2302      	movs	r3, #2
 8002414:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241a:	2300      	movs	r3, #0
 800241c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800241e:	2302      	movs	r3, #2
 8002420:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002422:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002426:	4619      	mov	r1, r3
 8002428:	486c      	ldr	r0, [pc, #432]	@ (80025dc <HAL_TIM_MspPostInit+0x2c4>)
 800242a:	f000 fc43 	bl	8002cb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800242e:	2380      	movs	r3, #128	@ 0x80
 8002430:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002432:	2302      	movs	r3, #2
 8002434:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243a:	2300      	movs	r3, #0
 800243c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800243e:	2302      	movs	r3, #2
 8002440:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002442:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002446:	4619      	mov	r1, r3
 8002448:	4865      	ldr	r0, [pc, #404]	@ (80025e0 <HAL_TIM_MspPostInit+0x2c8>)
 800244a:	f000 fc33 	bl	8002cb4 <HAL_GPIO_Init>
}
 800244e:	e11f      	b.n	8002690 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM5)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a63      	ldr	r2, [pc, #396]	@ (80025e4 <HAL_TIM_MspPostInit+0x2cc>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d11f      	bne.n	800249a <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245a:	4b5c      	ldr	r3, [pc, #368]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 800245c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002460:	4a5a      	ldr	r2, [pc, #360]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800246a:	4b58      	ldr	r3, [pc, #352]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 800246c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	623b      	str	r3, [r7, #32]
 8002476:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002478:	2306      	movs	r3, #6
 800247a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002484:	2300      	movs	r3, #0
 8002486:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002488:	2302      	movs	r3, #2
 800248a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002490:	4619      	mov	r1, r3
 8002492:	4850      	ldr	r0, [pc, #320]	@ (80025d4 <HAL_TIM_MspPostInit+0x2bc>)
 8002494:	f000 fc0e 	bl	8002cb4 <HAL_GPIO_Init>
}
 8002498:	e0fa      	b.n	8002690 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM8)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a52      	ldr	r2, [pc, #328]	@ (80025e8 <HAL_TIM_MspPostInit+0x2d0>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d120      	bne.n	80024e6 <HAL_TIM_MspPostInit+0x1ce>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a4:	4b49      	ldr	r3, [pc, #292]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 80024a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024aa:	4a48      	ldr	r2, [pc, #288]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 80024ac:	f043 0304 	orr.w	r3, r3, #4
 80024b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024b4:	4b45      	ldr	r3, [pc, #276]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 80024b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	61fb      	str	r3, [r7, #28]
 80024c0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024c6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c8:	2302      	movs	r3, #2
 80024ca:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d0:	2300      	movs	r3, #0
 80024d2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80024d4:	2303      	movs	r3, #3
 80024d6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024d8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024dc:	4619      	mov	r1, r3
 80024de:	4843      	ldr	r0, [pc, #268]	@ (80025ec <HAL_TIM_MspPostInit+0x2d4>)
 80024e0:	f000 fbe8 	bl	8002cb4 <HAL_GPIO_Init>
}
 80024e4:	e0d4      	b.n	8002690 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM12)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a41      	ldr	r2, [pc, #260]	@ (80025f0 <HAL_TIM_MspPostInit+0x2d8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d120      	bne.n	8002532 <HAL_TIM_MspPostInit+0x21a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f0:	4b36      	ldr	r3, [pc, #216]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 80024f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024f6:	4a35      	ldr	r2, [pc, #212]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 80024f8:	f043 0302 	orr.w	r3, r3, #2
 80024fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002500:	4b32      	ldr	r3, [pc, #200]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 8002502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	61bb      	str	r3, [r7, #24]
 800250c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800250e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002512:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002514:	2302      	movs	r3, #2
 8002516:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251c:	2300      	movs	r3, #0
 800251e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002520:	2302      	movs	r3, #2
 8002522:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002524:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002528:	4619      	mov	r1, r3
 800252a:	482d      	ldr	r0, [pc, #180]	@ (80025e0 <HAL_TIM_MspPostInit+0x2c8>)
 800252c:	f000 fbc2 	bl	8002cb4 <HAL_GPIO_Init>
}
 8002530:	e0ae      	b.n	8002690 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM13)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a2f      	ldr	r2, [pc, #188]	@ (80025f4 <HAL_TIM_MspPostInit+0x2dc>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d11f      	bne.n	800257c <HAL_TIM_MspPostInit+0x264>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253c:	4b23      	ldr	r3, [pc, #140]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 800253e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002542:	4a22      	ldr	r2, [pc, #136]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800254c:	4b1f      	ldr	r3, [pc, #124]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 800254e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800255a:	2340      	movs	r3, #64	@ 0x40
 800255c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002566:	2300      	movs	r3, #0
 8002568:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800256a:	2309      	movs	r3, #9
 800256c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002572:	4619      	mov	r1, r3
 8002574:	4817      	ldr	r0, [pc, #92]	@ (80025d4 <HAL_TIM_MspPostInit+0x2bc>)
 8002576:	f000 fb9d 	bl	8002cb4 <HAL_GPIO_Init>
}
 800257a:	e089      	b.n	8002690 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM14)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a1d      	ldr	r2, [pc, #116]	@ (80025f8 <HAL_TIM_MspPostInit+0x2e0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d13a      	bne.n	80025fc <HAL_TIM_MspPostInit+0x2e4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002586:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 8002588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800258c:	4a0f      	ldr	r2, [pc, #60]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002596:	4b0d      	ldr	r3, [pc, #52]	@ (80025cc <HAL_TIM_MspPostInit+0x2b4>)
 8002598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025a4:	2380      	movs	r3, #128	@ 0x80
 80025a6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a8:	2302      	movs	r3, #2
 80025aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	2300      	movs	r3, #0
 80025b2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80025b4:	2309      	movs	r3, #9
 80025b6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025bc:	4619      	mov	r1, r3
 80025be:	4805      	ldr	r0, [pc, #20]	@ (80025d4 <HAL_TIM_MspPostInit+0x2bc>)
 80025c0:	f000 fb78 	bl	8002cb4 <HAL_GPIO_Init>
}
 80025c4:	e064      	b.n	8002690 <HAL_TIM_MspPostInit+0x378>
 80025c6:	bf00      	nop
 80025c8:	40010000 	.word	0x40010000
 80025cc:	58024400 	.word	0x58024400
 80025d0:	58021000 	.word	0x58021000
 80025d4:	58020000 	.word	0x58020000
 80025d8:	40000800 	.word	0x40000800
 80025dc:	58020c00 	.word	0x58020c00
 80025e0:	58020400 	.word	0x58020400
 80025e4:	40000c00 	.word	0x40000c00
 80025e8:	40010400 	.word	0x40010400
 80025ec:	58020800 	.word	0x58020800
 80025f0:	40001800 	.word	0x40001800
 80025f4:	40001c00 	.word	0x40001c00
 80025f8:	40002000 	.word	0x40002000
  else if(htim->Instance==TIM15)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a25      	ldr	r2, [pc, #148]	@ (8002698 <HAL_TIM_MspPostInit+0x380>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d11f      	bne.n	8002646 <HAL_TIM_MspPostInit+0x32e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002606:	4b25      	ldr	r3, [pc, #148]	@ (800269c <HAL_TIM_MspPostInit+0x384>)
 8002608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800260c:	4a23      	ldr	r2, [pc, #140]	@ (800269c <HAL_TIM_MspPostInit+0x384>)
 800260e:	f043 0310 	orr.w	r3, r3, #16
 8002612:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002616:	4b21      	ldr	r3, [pc, #132]	@ (800269c <HAL_TIM_MspPostInit+0x384>)
 8002618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002624:	2360      	movs	r3, #96	@ 0x60
 8002626:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002628:	2302      	movs	r3, #2
 800262a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002630:	2300      	movs	r3, #0
 8002632:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002634:	2304      	movs	r3, #4
 8002636:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002638:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800263c:	4619      	mov	r1, r3
 800263e:	4818      	ldr	r0, [pc, #96]	@ (80026a0 <HAL_TIM_MspPostInit+0x388>)
 8002640:	f000 fb38 	bl	8002cb4 <HAL_GPIO_Init>
}
 8002644:	e024      	b.n	8002690 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM16)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a16      	ldr	r2, [pc, #88]	@ (80026a4 <HAL_TIM_MspPostInit+0x38c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d11f      	bne.n	8002690 <HAL_TIM_MspPostInit+0x378>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002650:	4b12      	ldr	r3, [pc, #72]	@ (800269c <HAL_TIM_MspPostInit+0x384>)
 8002652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002656:	4a11      	ldr	r2, [pc, #68]	@ (800269c <HAL_TIM_MspPostInit+0x384>)
 8002658:	f043 0302 	orr.w	r3, r3, #2
 800265c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002660:	4b0e      	ldr	r3, [pc, #56]	@ (800269c <HAL_TIM_MspPostInit+0x384>)
 8002662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800266e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002672:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267c:	2300      	movs	r3, #0
 800267e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002680:	2301      	movs	r3, #1
 8002682:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002684:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002688:	4619      	mov	r1, r3
 800268a:	4807      	ldr	r0, [pc, #28]	@ (80026a8 <HAL_TIM_MspPostInit+0x390>)
 800268c:	f000 fb12 	bl	8002cb4 <HAL_GPIO_Init>
}
 8002690:	bf00      	nop
 8002692:	3748      	adds	r7, #72	@ 0x48
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40014000 	.word	0x40014000
 800269c:	58024400 	.word	0x58024400
 80026a0:	58021000 	.word	0x58021000
 80026a4:	40014400 	.word	0x40014400
 80026a8:	58020400 	.word	0x58020400

080026ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b0ba      	sub	sp, #232	@ 0xe8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026c4:	f107 0310 	add.w	r3, r7, #16
 80026c8:	22c0      	movs	r2, #192	@ 0xc0
 80026ca:	2100      	movs	r1, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f006 ff93 	bl	80095f8 <memset>
  if(huart->Instance==UART4)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a27      	ldr	r2, [pc, #156]	@ (8002774 <HAL_UART_MspInit+0xc8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d146      	bne.n	800276a <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80026dc:	f04f 0202 	mov.w	r2, #2
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80026e8:	2300      	movs	r3, #0
 80026ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026ee:	f107 0310 	add.w	r3, r7, #16
 80026f2:	4618      	mov	r0, r3
 80026f4:	f002 fc5e 	bl	8004fb4 <HAL_RCCEx_PeriphCLKConfig>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80026fe:	f7ff fa07 	bl	8001b10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002702:	4b1d      	ldr	r3, [pc, #116]	@ (8002778 <HAL_UART_MspInit+0xcc>)
 8002704:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002708:	4a1b      	ldr	r2, [pc, #108]	@ (8002778 <HAL_UART_MspInit+0xcc>)
 800270a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800270e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002712:	4b19      	ldr	r3, [pc, #100]	@ (8002778 <HAL_UART_MspInit+0xcc>)
 8002714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002718:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002720:	4b15      	ldr	r3, [pc, #84]	@ (8002778 <HAL_UART_MspInit+0xcc>)
 8002722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002726:	4a14      	ldr	r2, [pc, #80]	@ (8002778 <HAL_UART_MspInit+0xcc>)
 8002728:	f043 0304 	orr.w	r3, r3, #4
 800272c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002730:	4b11      	ldr	r3, [pc, #68]	@ (8002778 <HAL_UART_MspInit+0xcc>)
 8002732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800273e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002742:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002752:	2300      	movs	r3, #0
 8002754:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002758:	2308      	movs	r3, #8
 800275a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800275e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002762:	4619      	mov	r1, r3
 8002764:	4805      	ldr	r0, [pc, #20]	@ (800277c <HAL_UART_MspInit+0xd0>)
 8002766:	f000 faa5 	bl	8002cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800276a:	bf00      	nop
 800276c:	37e8      	adds	r7, #232	@ 0xe8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40004c00 	.word	0x40004c00
 8002778:	58024400 	.word	0x58024400
 800277c:	58020800 	.word	0x58020800

08002780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002784:	bf00      	nop
 8002786:	e7fd      	b.n	8002784 <NMI_Handler+0x4>

08002788 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800278c:	bf00      	nop
 800278e:	e7fd      	b.n	800278c <HardFault_Handler+0x4>

08002790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002794:	bf00      	nop
 8002796:	e7fd      	b.n	8002794 <MemManage_Handler+0x4>

08002798 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800279c:	bf00      	nop
 800279e:	e7fd      	b.n	800279c <BusFault_Handler+0x4>

080027a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a4:	bf00      	nop
 80027a6:	e7fd      	b.n	80027a4 <UsageFault_Handler+0x4>

080027a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027d6:	f000 f931 	bl	8002a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027e4:	4802      	ldr	r0, [pc, #8]	@ (80027f0 <TIM1_UP_IRQHandler+0x10>)
 80027e6:	f004 fd85 	bl	80072f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	2400031c 	.word	0x2400031c

080027f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027f8:	4b37      	ldr	r3, [pc, #220]	@ (80028d8 <SystemInit+0xe4>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027fe:	4a36      	ldr	r2, [pc, #216]	@ (80028d8 <SystemInit+0xe4>)
 8002800:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002804:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002808:	4b34      	ldr	r3, [pc, #208]	@ (80028dc <SystemInit+0xe8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 030f 	and.w	r3, r3, #15
 8002810:	2b06      	cmp	r3, #6
 8002812:	d807      	bhi.n	8002824 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002814:	4b31      	ldr	r3, [pc, #196]	@ (80028dc <SystemInit+0xe8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f023 030f 	bic.w	r3, r3, #15
 800281c:	4a2f      	ldr	r2, [pc, #188]	@ (80028dc <SystemInit+0xe8>)
 800281e:	f043 0307 	orr.w	r3, r3, #7
 8002822:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002824:	4b2e      	ldr	r3, [pc, #184]	@ (80028e0 <SystemInit+0xec>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a2d      	ldr	r2, [pc, #180]	@ (80028e0 <SystemInit+0xec>)
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002830:	4b2b      	ldr	r3, [pc, #172]	@ (80028e0 <SystemInit+0xec>)
 8002832:	2200      	movs	r2, #0
 8002834:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002836:	4b2a      	ldr	r3, [pc, #168]	@ (80028e0 <SystemInit+0xec>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4929      	ldr	r1, [pc, #164]	@ (80028e0 <SystemInit+0xec>)
 800283c:	4b29      	ldr	r3, [pc, #164]	@ (80028e4 <SystemInit+0xf0>)
 800283e:	4013      	ands	r3, r2
 8002840:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002842:	4b26      	ldr	r3, [pc, #152]	@ (80028dc <SystemInit+0xe8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d007      	beq.n	800285e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800284e:	4b23      	ldr	r3, [pc, #140]	@ (80028dc <SystemInit+0xe8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 030f 	bic.w	r3, r3, #15
 8002856:	4a21      	ldr	r2, [pc, #132]	@ (80028dc <SystemInit+0xe8>)
 8002858:	f043 0307 	orr.w	r3, r3, #7
 800285c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800285e:	4b20      	ldr	r3, [pc, #128]	@ (80028e0 <SystemInit+0xec>)
 8002860:	2200      	movs	r2, #0
 8002862:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002864:	4b1e      	ldr	r3, [pc, #120]	@ (80028e0 <SystemInit+0xec>)
 8002866:	2200      	movs	r2, #0
 8002868:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800286a:	4b1d      	ldr	r3, [pc, #116]	@ (80028e0 <SystemInit+0xec>)
 800286c:	2200      	movs	r2, #0
 800286e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002870:	4b1b      	ldr	r3, [pc, #108]	@ (80028e0 <SystemInit+0xec>)
 8002872:	4a1d      	ldr	r2, [pc, #116]	@ (80028e8 <SystemInit+0xf4>)
 8002874:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002876:	4b1a      	ldr	r3, [pc, #104]	@ (80028e0 <SystemInit+0xec>)
 8002878:	4a1c      	ldr	r2, [pc, #112]	@ (80028ec <SystemInit+0xf8>)
 800287a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800287c:	4b18      	ldr	r3, [pc, #96]	@ (80028e0 <SystemInit+0xec>)
 800287e:	4a1c      	ldr	r2, [pc, #112]	@ (80028f0 <SystemInit+0xfc>)
 8002880:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002882:	4b17      	ldr	r3, [pc, #92]	@ (80028e0 <SystemInit+0xec>)
 8002884:	2200      	movs	r2, #0
 8002886:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002888:	4b15      	ldr	r3, [pc, #84]	@ (80028e0 <SystemInit+0xec>)
 800288a:	4a19      	ldr	r2, [pc, #100]	@ (80028f0 <SystemInit+0xfc>)
 800288c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800288e:	4b14      	ldr	r3, [pc, #80]	@ (80028e0 <SystemInit+0xec>)
 8002890:	2200      	movs	r2, #0
 8002892:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002894:	4b12      	ldr	r3, [pc, #72]	@ (80028e0 <SystemInit+0xec>)
 8002896:	4a16      	ldr	r2, [pc, #88]	@ (80028f0 <SystemInit+0xfc>)
 8002898:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800289a:	4b11      	ldr	r3, [pc, #68]	@ (80028e0 <SystemInit+0xec>)
 800289c:	2200      	movs	r2, #0
 800289e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028a0:	4b0f      	ldr	r3, [pc, #60]	@ (80028e0 <SystemInit+0xec>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a0e      	ldr	r2, [pc, #56]	@ (80028e0 <SystemInit+0xec>)
 80028a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80028ac:	4b0c      	ldr	r3, [pc, #48]	@ (80028e0 <SystemInit+0xec>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80028b2:	4b10      	ldr	r3, [pc, #64]	@ (80028f4 <SystemInit+0x100>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4b10      	ldr	r3, [pc, #64]	@ (80028f8 <SystemInit+0x104>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028be:	d202      	bcs.n	80028c6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80028c0:	4b0e      	ldr	r3, [pc, #56]	@ (80028fc <SystemInit+0x108>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80028c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002900 <SystemInit+0x10c>)
 80028c8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80028cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80028ce:	bf00      	nop
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000ed00 	.word	0xe000ed00
 80028dc:	52002000 	.word	0x52002000
 80028e0:	58024400 	.word	0x58024400
 80028e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80028e8:	02020200 	.word	0x02020200
 80028ec:	01ff0000 	.word	0x01ff0000
 80028f0:	01010280 	.word	0x01010280
 80028f4:	5c001000 	.word	0x5c001000
 80028f8:	ffff0000 	.word	0xffff0000
 80028fc:	51008108 	.word	0x51008108
 8002900:	52004000 	.word	0x52004000

08002904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002904:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800293c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002908:	f7ff ff74 	bl	80027f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800290c:	480c      	ldr	r0, [pc, #48]	@ (8002940 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800290e:	490d      	ldr	r1, [pc, #52]	@ (8002944 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002910:	4a0d      	ldr	r2, [pc, #52]	@ (8002948 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002914:	e002      	b.n	800291c <LoopCopyDataInit>

08002916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800291a:	3304      	adds	r3, #4

0800291c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800291c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800291e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002920:	d3f9      	bcc.n	8002916 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002922:	4a0a      	ldr	r2, [pc, #40]	@ (800294c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002924:	4c0a      	ldr	r4, [pc, #40]	@ (8002950 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002928:	e001      	b.n	800292e <LoopFillZerobss>

0800292a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800292a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800292c:	3204      	adds	r2, #4

0800292e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800292e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002930:	d3fb      	bcc.n	800292a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002932:	f006 fe69 	bl	8009608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002936:	f7fd fe47 	bl	80005c8 <main>
  bx  lr
 800293a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800293c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002940:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002944:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 8002948:	080096b0 	.word	0x080096b0
  ldr r2, =_sbss
 800294c:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8002950:	240006c4 	.word	0x240006c4

08002954 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002954:	e7fe      	b.n	8002954 <ADC3_IRQHandler>
	...

08002958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800295e:	2003      	movs	r0, #3
 8002960:	f000 f968 	bl	8002c34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002964:	f002 f950 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 8002968:	4602      	mov	r2, r0
 800296a:	4b15      	ldr	r3, [pc, #84]	@ (80029c0 <HAL_Init+0x68>)
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	0a1b      	lsrs	r3, r3, #8
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	4913      	ldr	r1, [pc, #76]	@ (80029c4 <HAL_Init+0x6c>)
 8002976:	5ccb      	ldrb	r3, [r1, r3]
 8002978:	f003 031f 	and.w	r3, r3, #31
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
 8002980:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002982:	4b0f      	ldr	r3, [pc, #60]	@ (80029c0 <HAL_Init+0x68>)
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	4a0e      	ldr	r2, [pc, #56]	@ (80029c4 <HAL_Init+0x6c>)
 800298c:	5cd3      	ldrb	r3, [r2, r3]
 800298e:	f003 031f 	and.w	r3, r3, #31
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	fa22 f303 	lsr.w	r3, r2, r3
 8002998:	4a0b      	ldr	r2, [pc, #44]	@ (80029c8 <HAL_Init+0x70>)
 800299a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800299c:	4a0b      	ldr	r2, [pc, #44]	@ (80029cc <HAL_Init+0x74>)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029a2:	200f      	movs	r0, #15
 80029a4:	f000 f814 	bl	80029d0 <HAL_InitTick>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e002      	b.n	80029b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80029b2:	f7ff f8b3 	bl	8001b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	58024400 	.word	0x58024400
 80029c4:	08009668 	.word	0x08009668
 80029c8:	2400000c 	.word	0x2400000c
 80029cc:	24000008 	.word	0x24000008

080029d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80029d8:	4b15      	ldr	r3, [pc, #84]	@ (8002a30 <HAL_InitTick+0x60>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e021      	b.n	8002a28 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80029e4:	4b13      	ldr	r3, [pc, #76]	@ (8002a34 <HAL_InitTick+0x64>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b11      	ldr	r3, [pc, #68]	@ (8002a30 <HAL_InitTick+0x60>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	4619      	mov	r1, r3
 80029ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 f94d 	bl	8002c9a <HAL_SYSTICK_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00e      	b.n	8002a28 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b0f      	cmp	r3, #15
 8002a0e:	d80a      	bhi.n	8002a26 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a10:	2200      	movs	r2, #0
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a18:	f000 f917 	bl	8002c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a1c:	4a06      	ldr	r2, [pc, #24]	@ (8002a38 <HAL_InitTick+0x68>)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	24000014 	.word	0x24000014
 8002a34:	24000008 	.word	0x24000008
 8002a38:	24000010 	.word	0x24000010

08002a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a40:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <HAL_IncTick+0x20>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <HAL_IncTick+0x24>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a04      	ldr	r2, [pc, #16]	@ (8002a60 <HAL_IncTick+0x24>)
 8002a4e:	6013      	str	r3, [r2, #0]
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	24000014 	.word	0x24000014
 8002a60:	240006c0 	.word	0x240006c0

08002a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return uwTick;
 8002a68:	4b03      	ldr	r3, [pc, #12]	@ (8002a78 <HAL_GetTick+0x14>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	240006c0 	.word	0x240006c0

08002a7c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002a80:	4b03      	ldr	r3, [pc, #12]	@ (8002a90 <HAL_GetREVID+0x14>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	0c1b      	lsrs	r3, r3, #16
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	5c001000 	.word	0x5c001000

08002a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002abc:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ac2:	4a04      	ldr	r2, [pc, #16]	@ (8002ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	60d3      	str	r3, [r2, #12]
}
 8002ac8:	bf00      	nop
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000ed00 	.word	0xe000ed00
 8002ad8:	05fa0000 	.word	0x05fa0000

08002adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae0:	4b04      	ldr	r3, [pc, #16]	@ (8002af4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	0a1b      	lsrs	r3, r3, #8
 8002ae6:	f003 0307 	and.w	r3, r3, #7
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	e000ed00 	.word	0xe000ed00

08002af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	db0b      	blt.n	8002b22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b0a:	88fb      	ldrh	r3, [r7, #6]
 8002b0c:	f003 021f 	and.w	r2, r3, #31
 8002b10:	4907      	ldr	r1, [pc, #28]	@ (8002b30 <__NVIC_EnableIRQ+0x38>)
 8002b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	2001      	movs	r0, #1
 8002b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	e000e100 	.word	0xe000e100

08002b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	6039      	str	r1, [r7, #0]
 8002b3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	db0a      	blt.n	8002b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	490c      	ldr	r1, [pc, #48]	@ (8002b80 <__NVIC_SetPriority+0x4c>)
 8002b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b52:	0112      	lsls	r2, r2, #4
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	440b      	add	r3, r1
 8002b58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b5c:	e00a      	b.n	8002b74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	4908      	ldr	r1, [pc, #32]	@ (8002b84 <__NVIC_SetPriority+0x50>)
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	3b04      	subs	r3, #4
 8002b6c:	0112      	lsls	r2, r2, #4
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	440b      	add	r3, r1
 8002b72:	761a      	strb	r2, [r3, #24]
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000e100 	.word	0xe000e100
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b089      	sub	sp, #36	@ 0x24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	bf28      	it	cs
 8002ba6:	2304      	movcs	r3, #4
 8002ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3304      	adds	r3, #4
 8002bae:	2b06      	cmp	r3, #6
 8002bb0:	d902      	bls.n	8002bb8 <NVIC_EncodePriority+0x30>
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	3b03      	subs	r3, #3
 8002bb6:	e000      	b.n	8002bba <NVIC_EncodePriority+0x32>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43da      	mvns	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	401a      	ands	r2, r3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bda:	43d9      	mvns	r1, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be0:	4313      	orrs	r3, r2
         );
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3724      	adds	r7, #36	@ 0x24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c00:	d301      	bcc.n	8002c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c02:	2301      	movs	r3, #1
 8002c04:	e00f      	b.n	8002c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c06:	4a0a      	ldr	r2, [pc, #40]	@ (8002c30 <SysTick_Config+0x40>)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c0e:	210f      	movs	r1, #15
 8002c10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c14:	f7ff ff8e 	bl	8002b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c18:	4b05      	ldr	r3, [pc, #20]	@ (8002c30 <SysTick_Config+0x40>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c1e:	4b04      	ldr	r3, [pc, #16]	@ (8002c30 <SysTick_Config+0x40>)
 8002c20:	2207      	movs	r2, #7
 8002c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	e000e010 	.word	0xe000e010

08002c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff ff29 	bl	8002a94 <__NVIC_SetPriorityGrouping>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	4603      	mov	r3, r0
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c58:	f7ff ff40 	bl	8002adc <__NVIC_GetPriorityGrouping>
 8002c5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68b9      	ldr	r1, [r7, #8]
 8002c62:	6978      	ldr	r0, [r7, #20]
 8002c64:	f7ff ff90 	bl	8002b88 <NVIC_EncodePriority>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff ff5f 	bl	8002b34 <__NVIC_SetPriority>
}
 8002c76:	bf00      	nop
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	4603      	mov	r3, r0
 8002c86:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff ff33 	bl	8002af8 <__NVIC_EnableIRQ>
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff ffa4 	bl	8002bf0 <SysTick_Config>
 8002ca8:	4603      	mov	r3, r0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b089      	sub	sp, #36	@ 0x24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002cc2:	4b89      	ldr	r3, [pc, #548]	@ (8002ee8 <HAL_GPIO_Init+0x234>)
 8002cc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002cc6:	e194      	b.n	8002ff2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	2101      	movs	r1, #1
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 8186 	beq.w	8002fec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d005      	beq.n	8002cf8 <HAL_GPIO_Init+0x44>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d130      	bne.n	8002d5a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	2203      	movs	r2, #3
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d2e:	2201      	movs	r2, #1
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	091b      	lsrs	r3, r3, #4
 8002d44:	f003 0201 	and.w	r2, r3, #1
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d017      	beq.n	8002d96 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	2203      	movs	r2, #3
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d123      	bne.n	8002dea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	08da      	lsrs	r2, r3, #3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3208      	adds	r2, #8
 8002daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	220f      	movs	r2, #15
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	691a      	ldr	r2, [r3, #16]
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	08da      	lsrs	r2, r3, #3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3208      	adds	r2, #8
 8002de4:	69b9      	ldr	r1, [r7, #24]
 8002de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	2203      	movs	r2, #3
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 0203 	and.w	r2, r3, #3
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 80e0 	beq.w	8002fec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e2c:	4b2f      	ldr	r3, [pc, #188]	@ (8002eec <HAL_GPIO_Init+0x238>)
 8002e2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e32:	4a2e      	ldr	r2, [pc, #184]	@ (8002eec <HAL_GPIO_Init+0x238>)
 8002e34:	f043 0302 	orr.w	r3, r3, #2
 8002e38:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002eec <HAL_GPIO_Init+0x238>)
 8002e3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e4a:	4a29      	ldr	r2, [pc, #164]	@ (8002ef0 <HAL_GPIO_Init+0x23c>)
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	089b      	lsrs	r3, r3, #2
 8002e50:	3302      	adds	r3, #2
 8002e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	220f      	movs	r2, #15
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a20      	ldr	r2, [pc, #128]	@ (8002ef4 <HAL_GPIO_Init+0x240>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d052      	beq.n	8002f1c <HAL_GPIO_Init+0x268>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a1f      	ldr	r2, [pc, #124]	@ (8002ef8 <HAL_GPIO_Init+0x244>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d031      	beq.n	8002ee2 <HAL_GPIO_Init+0x22e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a1e      	ldr	r2, [pc, #120]	@ (8002efc <HAL_GPIO_Init+0x248>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d02b      	beq.n	8002ede <HAL_GPIO_Init+0x22a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a1d      	ldr	r2, [pc, #116]	@ (8002f00 <HAL_GPIO_Init+0x24c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d025      	beq.n	8002eda <HAL_GPIO_Init+0x226>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a1c      	ldr	r2, [pc, #112]	@ (8002f04 <HAL_GPIO_Init+0x250>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d01f      	beq.n	8002ed6 <HAL_GPIO_Init+0x222>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a1b      	ldr	r2, [pc, #108]	@ (8002f08 <HAL_GPIO_Init+0x254>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d019      	beq.n	8002ed2 <HAL_GPIO_Init+0x21e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a1a      	ldr	r2, [pc, #104]	@ (8002f0c <HAL_GPIO_Init+0x258>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d013      	beq.n	8002ece <HAL_GPIO_Init+0x21a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a19      	ldr	r2, [pc, #100]	@ (8002f10 <HAL_GPIO_Init+0x25c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00d      	beq.n	8002eca <HAL_GPIO_Init+0x216>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a18      	ldr	r2, [pc, #96]	@ (8002f14 <HAL_GPIO_Init+0x260>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d007      	beq.n	8002ec6 <HAL_GPIO_Init+0x212>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a17      	ldr	r2, [pc, #92]	@ (8002f18 <HAL_GPIO_Init+0x264>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d101      	bne.n	8002ec2 <HAL_GPIO_Init+0x20e>
 8002ebe:	2309      	movs	r3, #9
 8002ec0:	e02d      	b.n	8002f1e <HAL_GPIO_Init+0x26a>
 8002ec2:	230a      	movs	r3, #10
 8002ec4:	e02b      	b.n	8002f1e <HAL_GPIO_Init+0x26a>
 8002ec6:	2308      	movs	r3, #8
 8002ec8:	e029      	b.n	8002f1e <HAL_GPIO_Init+0x26a>
 8002eca:	2307      	movs	r3, #7
 8002ecc:	e027      	b.n	8002f1e <HAL_GPIO_Init+0x26a>
 8002ece:	2306      	movs	r3, #6
 8002ed0:	e025      	b.n	8002f1e <HAL_GPIO_Init+0x26a>
 8002ed2:	2305      	movs	r3, #5
 8002ed4:	e023      	b.n	8002f1e <HAL_GPIO_Init+0x26a>
 8002ed6:	2304      	movs	r3, #4
 8002ed8:	e021      	b.n	8002f1e <HAL_GPIO_Init+0x26a>
 8002eda:	2303      	movs	r3, #3
 8002edc:	e01f      	b.n	8002f1e <HAL_GPIO_Init+0x26a>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e01d      	b.n	8002f1e <HAL_GPIO_Init+0x26a>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e01b      	b.n	8002f1e <HAL_GPIO_Init+0x26a>
 8002ee6:	bf00      	nop
 8002ee8:	58000080 	.word	0x58000080
 8002eec:	58024400 	.word	0x58024400
 8002ef0:	58000400 	.word	0x58000400
 8002ef4:	58020000 	.word	0x58020000
 8002ef8:	58020400 	.word	0x58020400
 8002efc:	58020800 	.word	0x58020800
 8002f00:	58020c00 	.word	0x58020c00
 8002f04:	58021000 	.word	0x58021000
 8002f08:	58021400 	.word	0x58021400
 8002f0c:	58021800 	.word	0x58021800
 8002f10:	58021c00 	.word	0x58021c00
 8002f14:	58022000 	.word	0x58022000
 8002f18:	58022400 	.word	0x58022400
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	f002 0203 	and.w	r2, r2, #3
 8002f24:	0092      	lsls	r2, r2, #2
 8002f26:	4093      	lsls	r3, r2
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f2e:	4938      	ldr	r1, [pc, #224]	@ (8003010 <HAL_GPIO_Init+0x35c>)
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	089b      	lsrs	r3, r3, #2
 8002f34:	3302      	adds	r3, #2
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	43db      	mvns	r3, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002f62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002f6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002f90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f47f ae63 	bne.w	8002cc8 <HAL_GPIO_Init+0x14>
  }
}
 8003002:	bf00      	nop
 8003004:	bf00      	nop
 8003006:	3724      	adds	r7, #36	@ 0x24
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	58000400 	.word	0x58000400

08003014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	807b      	strh	r3, [r7, #2]
 8003020:	4613      	mov	r3, r2
 8003022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003024:	787b      	ldrb	r3, [r7, #1]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800302a:	887a      	ldrh	r2, [r7, #2]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003030:	e003      	b.n	800303a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003032:	887b      	ldrh	r3, [r7, #2]
 8003034:	041a      	lsls	r2, r3, #16
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	619a      	str	r2, [r3, #24]
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e0bd      	b.n	80031d6 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2202      	movs	r2, #2
 800305e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d031      	beq.n	8003102 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a4f      	ldr	r2, [pc, #316]	@ (80031e0 <HAL_HRTIM_Init+0x198>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d10e      	bne.n	80030c6 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80030a8:	4b4e      	ldr	r3, [pc, #312]	@ (80031e4 <HAL_HRTIM_Init+0x19c>)
 80030aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030ae:	4a4d      	ldr	r2, [pc, #308]	@ (80031e4 <HAL_HRTIM_Init+0x19c>)
 80030b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80030b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80030b8:	4b4a      	ldr	r3, [pc, #296]	@ (80031e4 <HAL_HRTIM_Init+0x19c>)
 80030ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80030d4:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80030ea:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fe fd24 	bl	8001b50 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d012      	beq.n	800313a <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003122:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800314a:	2300      	movs	r3, #0
 800314c:	75fb      	strb	r3, [r7, #23]
 800314e:	e03e      	b.n	80031ce <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8003150:	7dfa      	ldrb	r2, [r7, #23]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	3318      	adds	r3, #24
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8003164:	7dfa      	ldrb	r2, [r7, #23]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	331c      	adds	r3, #28
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8003178:	7dfa      	ldrb	r2, [r7, #23]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	3320      	adds	r3, #32
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 800318c:	7dfa      	ldrb	r2, [r7, #23]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	3324      	adds	r3, #36	@ 0x24
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80031a0:	7dfa      	ldrb	r2, [r7, #23]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	3328      	adds	r3, #40	@ 0x28
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80031b4:	7dfa      	ldrb	r2, [r7, #23]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	3330      	adds	r3, #48	@ 0x30
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80031c8:	7dfb      	ldrb	r3, [r7, #23]
 80031ca:	3301      	adds	r3, #1
 80031cc:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 80031ce:	7dfb      	ldrb	r3, [r7, #23]
 80031d0:	2b05      	cmp	r3, #5
 80031d2:	d9bd      	bls.n	8003150 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40017400 	.word	0x40017400
 80031e4:	58024400 	.word	0x58024400

080031e8 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d101      	bne.n	8003204 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8003200:	2302      	movs	r3, #2
 8003202:	e015      	b.n	8003230 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b05      	cmp	r3, #5
 8003210:	d104      	bne.n	800321c <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 f97a 	bl	800350e <HRTIM_MasterBase_Config>
 800321a:	e004      	b.n	8003226 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 f9a3 	bl	800356c <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_HRTIM_SimplePWMChannelConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_SimplePWMChannelConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t PWMChannel,
                                                  const HRTIM_SimplePWMChannelCfgTypeDef* pSimplePWMChannelCfg)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08e      	sub	sp, #56	@ 0x38
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, PWMChannel));
  assert_param(IS_HRTIM_OUTPUTPOLARITY(pSimplePWMChannelCfg->Polarity));
  assert_param(IS_HRTIM_OUTPUTPULSE(pSimplePWMChannelCfg->Pulse));
  assert_param(IS_HRTIM_OUTPUTIDLELEVEL(pSimplePWMChannelCfg->IdleLevel));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d101      	bne.n	8003256 <HAL_HRTIM_SimplePWMChannelConfig+0x1e>
  {
     return HAL_BUSY;
 8003252:	2302      	movs	r3, #2
 8003254:	e0b2      	b.n	80033bc <HAL_HRTIM_SimplePWMChannelConfig+0x184>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_HRTIM_SimplePWMChannelConfig+0x2c>
 8003260:	2302      	movs	r3, #2
 8003262:	e0ab      	b.n	80033bc <HAL_HRTIM_SimplePWMChannelConfig+0x184>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure timer compare unit */
  switch (PWMChannel)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800327a:	d046      	beq.n	800330a <HAL_HRTIM_SimplePWMChannelConfig+0xd2>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003282:	d84e      	bhi.n	8003322 <HAL_HRTIM_SimplePWMChannelConfig+0xea>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800328a:	d032      	beq.n	80032f2 <HAL_HRTIM_SimplePWMChannelConfig+0xba>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003292:	d846      	bhi.n	8003322 <HAL_HRTIM_SimplePWMChannelConfig+0xea>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b80      	cmp	r3, #128	@ 0x80
 8003298:	d037      	beq.n	800330a <HAL_HRTIM_SimplePWMChannelConfig+0xd2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b80      	cmp	r3, #128	@ 0x80
 800329e:	d840      	bhi.n	8003322 <HAL_HRTIM_SimplePWMChannelConfig+0xea>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b40      	cmp	r3, #64	@ 0x40
 80032a4:	d025      	beq.n	80032f2 <HAL_HRTIM_SimplePWMChannelConfig+0xba>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b40      	cmp	r3, #64	@ 0x40
 80032aa:	d83a      	bhi.n	8003322 <HAL_HRTIM_SimplePWMChannelConfig+0xea>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d01f      	beq.n	80032f2 <HAL_HRTIM_SimplePWMChannelConfig+0xba>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d034      	beq.n	8003322 <HAL_HRTIM_SimplePWMChannelConfig+0xea>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b20      	cmp	r3, #32
 80032bc:	d831      	bhi.n	8003322 <HAL_HRTIM_SimplePWMChannelConfig+0xea>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d32e      	bcc.n	8003322 <HAL_HRTIM_SimplePWMChannelConfig+0xea>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3b02      	subs	r3, #2
 80032c8:	2201      	movs	r2, #1
 80032ca:	409a      	lsls	r2, r3
 80032cc:	4b3d      	ldr	r3, [pc, #244]	@ (80033c4 <HAL_HRTIM_SimplePWMChannelConfig+0x18c>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	bf14      	ite	ne
 80032d4:	2301      	movne	r3, #1
 80032d6:	2300      	moveq	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d115      	bne.n	800330a <HAL_HRTIM_SimplePWMChannelConfig+0xd2>
 80032de:	f244 0304 	movw	r3, #16388	@ 0x4004
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf14      	ite	ne
 80032e8:	2301      	movne	r3, #1
 80032ea:	2300      	moveq	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d017      	beq.n	8003322 <HAL_HRTIM_SimplePWMChannelConfig+0xea>
  case HRTIM_OUTPUT_TB1:
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pSimplePWMChannelCfg->Pulse;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6819      	ldr	r1, [r3, #0]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	01db      	lsls	r3, r3, #7
 80032fe:	440b      	add	r3, r1
 8003300:	339c      	adds	r3, #156	@ 0x9c
 8003302:	601a      	str	r2, [r3, #0]
      OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 8003304:	2308      	movs	r3, #8
 8003306:	61bb      	str	r3, [r7, #24]
      break;
 8003308:	e018      	b.n	800333c <HAL_HRTIM_SimplePWMChannelConfig+0x104>
  case HRTIM_OUTPUT_TB2:
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pSimplePWMChannelCfg->Pulse;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6819      	ldr	r1, [r3, #0]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	01db      	lsls	r3, r3, #7
 8003316:	440b      	add	r3, r1
 8003318:	33a4      	adds	r3, #164	@ 0xa4
 800331a:	601a      	str	r2, [r3, #0]
      OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 800331c:	2310      	movs	r3, #16
 800331e:	61bb      	str	r3, [r7, #24]
      break;
 8003320:	e00c      	b.n	800333c <HAL_HRTIM_SimplePWMChannelConfig+0x104>
    }
  default:
    {
      OutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8003322:	2300      	movs	r3, #0
 8003324:	61bb      	str	r3, [r7, #24]
      OutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]

      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2207      	movs	r2, #7
 800332e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

      break;
 800333a:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b07      	cmp	r3, #7
 8003346:	d101      	bne.n	800334c <HAL_HRTIM_SimplePWMChannelConfig+0x114>
  {
     return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e037      	b.n	80033bc <HAL_HRTIM_SimplePWMChannelConfig+0x184>
  }

  /* Configure timer output */
  OutputCfg.Polarity = (pSimplePWMChannelCfg->Polarity & HRTIM_OUTR_POL1);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	617b      	str	r3, [r7, #20]
  OutputCfg.IdleLevel = (pSimplePWMChannelCfg->IdleLevel& HRTIM_OUTR_IDLES1);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	627b      	str	r3, [r7, #36]	@ 0x24
  OutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8003360:	2300      	movs	r3, #0
 8003362:	62bb      	str	r3, [r7, #40]	@ 0x28
  OutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8003364:	2300      	movs	r3, #0
 8003366:	623b      	str	r3, [r7, #32]
  OutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8003368:	2300      	movs	r3, #0
 800336a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  OutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 800336c:	2300      	movs	r3, #0
 800336e:	633b      	str	r3, [r7, #48]	@ 0x30
  OutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMPER;
 8003370:	2304      	movs	r3, #4
 8003372:	61fb      	str	r3, [r7, #28]

  HRTIM_OutputConfig(hhrtim,
 8003374:	f107 0314 	add.w	r3, r7, #20
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 fadb 	bl	8003938 <HRTIM_OutputConfig>
                     TimerIdx,
                     PWMChannel,
                     &OutputCfg);

  /* Enable the registers preload mechanism */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	3301      	adds	r3, #1
 800338a:	01db      	lsls	r3, r3, #7
 800338c:	4413      	add	r3, r2
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	637b      	str	r3, [r7, #52]	@ 0x34
  hrtim_timcr |= HRTIM_TIMCR_PREEN;
 8003392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003394:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003398:	637b      	str	r3, [r7, #52]	@ 0x34
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	3301      	adds	r3, #1
 80033a2:	01db      	lsls	r3, r3, #7
 80033a4:	4413      	add	r3, r2
 80033a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033a8:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3738      	adds	r7, #56	@ 0x38
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40000041 	.word	0x40000041

080033c8 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d101      	bne.n	80033e4 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80033e0:	2302      	movs	r3, #2
 80033e2:	e05f      	b.n	80034a4 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e058      	b.n	80034a4 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2202      	movs	r2, #2
 80033fe:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b05      	cmp	r3, #5
 8003406:	d104      	bne.n	8003412 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 f8ee 	bl	80035ec <HRTIM_MasterWaveform_Config>
 8003410:	e004      	b.n	800341c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	68b9      	ldr	r1, [r7, #8]
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f94e 	bl	80036b8 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6819      	ldr	r1, [r3, #0]
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	4613      	mov	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4403      	add	r3, r0
 800342e:	3320      	adds	r3, #32
 8003430:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6859      	ldr	r1, [r3, #4]
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	4613      	mov	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4403      	add	r3, r0
 8003444:	3324      	adds	r3, #36	@ 0x24
 8003446:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6899      	ldr	r1, [r3, #8]
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	4613      	mov	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4403      	add	r3, r0
 800345a:	3328      	adds	r3, #40	@ 0x28
 800345c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68d9      	ldr	r1, [r3, #12]
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	4613      	mov	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4403      	add	r3, r0
 8003470:	332c      	adds	r3, #44	@ 0x2c
 8003472:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6919      	ldr	r1, [r3, #16]
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	4613      	mov	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4403      	add	r3, r0
 8003486:	3330      	adds	r3, #48	@ 0x30
 8003488:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800348a:	68b9      	ldr	r1, [r7, #8]
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 fb2b 	bl	8003ae8 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
 80034b8:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d101      	bne.n	80034ca <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 80034c6:	2302      	movs	r3, #2
 80034c8:	e01d      	b.n	8003506 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e016      	b.n	8003506 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 fa22 	bl	8003938 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800350e:	b480      	push	{r7}
 8003510:	b085      	sub	sp, #20
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0307 	bic.w	r3, r3, #7
 8003526:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f023 0318 	bic.w	r3, r3, #24
 8003538:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	6852      	ldr	r2, [r2, #4]
 800355e:	619a      	str	r2, [r3, #24]
}
 8003560:	bf00      	nop
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	3301      	adds	r3, #1
 8003580:	01db      	lsls	r3, r3, #7
 8003582:	4413      	add	r3, r2
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f023 0307 	bic.w	r3, r3, #7
 800358e:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	4313      	orrs	r3, r2
 8003598:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f023 0318 	bic.w	r3, r3, #24
 80035a0:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	3301      	adds	r3, #1
 80035b4:	01db      	lsls	r3, r3, #7
 80035b6:	4413      	add	r3, r2
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6819      	ldr	r1, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	01db      	lsls	r3, r3, #7
 80035c8:	440b      	add	r3, r1
 80035ca:	3394      	adds	r3, #148	@ 0x94
 80035cc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6819      	ldr	r1, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	01db      	lsls	r3, r3, #7
 80035da:	440b      	add	r3, r1
 80035dc:	3398      	adds	r3, #152	@ 0x98
 80035de:	601a      	str	r2, [r3, #0]
}
 80035e0:	bf00      	nop
 80035e2:	371c      	adds	r7, #28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8003606:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0320 	bic.w	r3, r3, #32
 800360e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003620:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003632:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003644:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4313      	orrs	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8003656:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	4313      	orrs	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003668:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	4313      	orrs	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800367c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4313      	orrs	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800368e:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	4313      	orrs	r3, r2
 8003698:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 80036ac:	bf00      	nop
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b08b      	sub	sp, #44	@ 0x2c
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	3301      	adds	r3, #1
 80036cc:	01db      	lsls	r3, r3, #7
 80036ce:	4413      	add	r3, r2
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	6811      	ldr	r1, [r2, #0]
 80036d6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	3301      	adds	r3, #1
 80036de:	01db      	lsls	r3, r3, #7
 80036e0:	440b      	add	r3, r1
 80036e2:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	3301      	adds	r3, #1
 80036ec:	01db      	lsls	r3, r3, #7
 80036ee:	4413      	add	r3, r2
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	01db      	lsls	r3, r3, #7
 80036fc:	4413      	add	r3, r2
 80036fe:	33e8      	adds	r3, #232	@ 0xe8
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	01db      	lsls	r3, r3, #7
 800370c:	4413      	add	r3, r2
 800370e:	33e4      	adds	r3, #228	@ 0xe4
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 800371c:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003720:	f023 0320 	bic.w	r3, r3, #32
 8003724:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800372c:	4313      	orrs	r3, r2
 800372e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8003730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003732:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003736:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800373e:	4313      	orrs	r3, r2
 8003740:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8003742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003744:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003748:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003750:	4313      	orrs	r3, r2
 8003752:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8003754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003756:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800375a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003762:	4313      	orrs	r3, r2
 8003764:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8003766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003768:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800376c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003774:	4313      	orrs	r3, r2
 8003776:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8003778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800377e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003786:	4313      	orrs	r3, r2
 8003788:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003790:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003796:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800379a:	d103      	bne.n	80037a4 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 800379c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037a2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80037a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037aa:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037b2:	4313      	orrs	r3, r2
 80037b4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037bc:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037c4:	4313      	orrs	r3, r2
 80037c6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80037c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ca:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 80037ce:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037d6:	4313      	orrs	r3, r2
 80037d8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	f023 031f 	bic.w	r3, r3, #31
 80037e0:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e6:	f003 031f 	and.w	r3, r3, #31
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037f6:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4313      	orrs	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003806:	2b00      	cmp	r3, #0
 8003808:	d108      	bne.n	800381c <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003810:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003816:	6a3a      	ldr	r2, [r7, #32]
 8003818:	4313      	orrs	r3, r2
 800381a:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003820:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8003824:	d004      	beq.n	8003830 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382a:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 800382e:	d103      	bne.n	8003838 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003834:	2b40      	cmp	r3, #64	@ 0x40
 8003836:	d108      	bne.n	800384a <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 800383e:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003844:	6a3a      	ldr	r2, [r7, #32]
 8003846:	4313      	orrs	r3, r2
 8003848:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800384e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b04      	cmp	r3, #4
 8003854:	d843      	bhi.n	80038de <HRTIM_TimingUnitWaveform_Config+0x226>
 8003856:	a201      	add	r2, pc, #4	@ (adr r2, 800385c <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8003858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385c:	08003871 	.word	0x08003871
 8003860:	08003887 	.word	0x08003887
 8003864:	0800389d 	.word	0x0800389d
 8003868:	080038b3 	.word	0x080038b3
 800386c:	080038c9 	.word	0x080038c9
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003876:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	4313      	orrs	r3, r2
 8003882:	61fb      	str	r3, [r7, #28]
      break;
 8003884:	e02c      	b.n	80038e0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800388c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	4313      	orrs	r3, r2
 8003898:	61fb      	str	r3, [r7, #28]
      break;
 800389a:	e021      	b.n	80038e0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80038a2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61fb      	str	r3, [r7, #28]
      break;
 80038b0:	e016      	b.n	80038e0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80038b8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61fb      	str	r3, [r7, #28]
      break;
 80038c6:	e00b      	b.n	80038e0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80038ce:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d4:	015b      	lsls	r3, r3, #5
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61fb      	str	r3, [r7, #28]
      break;
 80038dc:	e000      	b.n	80038e0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 80038de:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	3301      	adds	r3, #1
 80038e8:	01db      	lsls	r3, r3, #7
 80038ea:	4413      	add	r3, r2
 80038ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ee:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	01db      	lsls	r3, r3, #7
 80038f8:	4413      	add	r3, r2
 80038fa:	33e8      	adds	r3, #232	@ 0xe8
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	01db      	lsls	r3, r3, #7
 8003908:	4413      	add	r3, r2
 800390a:	33e4      	adds	r3, #228	@ 0xe4
 800390c:	6a3a      	ldr	r2, [r7, #32]
 800390e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	01db      	lsls	r3, r3, #7
 8003918:	4413      	add	r3, r2
 800391a:	33d4      	adds	r3, #212	@ 0xd4
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	69fa      	ldr	r2, [r7, #28]
 8003926:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 800392a:	bf00      	nop
 800392c:	372c      	adds	r7, #44	@ 0x2c
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop

08003938 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8003938:	b480      	push	{r7}
 800393a:	b089      	sub	sp, #36	@ 0x24
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
 8003944:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	01db      	lsls	r3, r3, #7
 8003952:	4413      	add	r3, r2
 8003954:	33e4      	adds	r3, #228	@ 0xe4
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	01db      	lsls	r3, r3, #7
 8003962:	4413      	add	r3, r2
 8003964:	33b8      	adds	r3, #184	@ 0xb8
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	617b      	str	r3, [r7, #20]

  switch (Output)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003970:	d04d      	beq.n	8003a0e <HRTIM_OutputConfig+0xd6>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003978:	d85e      	bhi.n	8003a38 <HRTIM_OutputConfig+0x100>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003980:	d032      	beq.n	80039e8 <HRTIM_OutputConfig+0xb0>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003988:	d856      	bhi.n	8003a38 <HRTIM_OutputConfig+0x100>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b80      	cmp	r3, #128	@ 0x80
 800398e:	d03e      	beq.n	8003a0e <HRTIM_OutputConfig+0xd6>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b80      	cmp	r3, #128	@ 0x80
 8003994:	d850      	bhi.n	8003a38 <HRTIM_OutputConfig+0x100>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b40      	cmp	r3, #64	@ 0x40
 800399a:	d025      	beq.n	80039e8 <HRTIM_OutputConfig+0xb0>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b40      	cmp	r3, #64	@ 0x40
 80039a0:	d84a      	bhi.n	8003a38 <HRTIM_OutputConfig+0x100>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d01f      	beq.n	80039e8 <HRTIM_OutputConfig+0xb0>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d044      	beq.n	8003a38 <HRTIM_OutputConfig+0x100>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	d841      	bhi.n	8003a38 <HRTIM_OutputConfig+0x100>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d33e      	bcc.n	8003a38 <HRTIM_OutputConfig+0x100>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3b02      	subs	r3, #2
 80039be:	2201      	movs	r2, #1
 80039c0:	409a      	lsls	r2, r3
 80039c2:	4b48      	ldr	r3, [pc, #288]	@ (8003ae4 <HRTIM_OutputConfig+0x1ac>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	bf14      	ite	ne
 80039ca:	2301      	movne	r3, #1
 80039cc:	2300      	moveq	r3, #0
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d11c      	bne.n	8003a0e <HRTIM_OutputConfig+0xd6>
 80039d4:	f244 0304 	movw	r3, #16388	@ 0x4004
 80039d8:	4013      	ands	r3, r2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	bf14      	ite	ne
 80039de:	2301      	movne	r3, #1
 80039e0:	2300      	moveq	r3, #0
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d027      	beq.n	8003a38 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6819      	ldr	r1, [r3, #0]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	01db      	lsls	r3, r3, #7
 80039f4:	440b      	add	r3, r1
 80039f6:	33bc      	adds	r3, #188	@ 0xbc
 80039f8:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6819      	ldr	r1, [r3, #0]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	01db      	lsls	r3, r3, #7
 8003a06:	440b      	add	r3, r1
 8003a08:	33c0      	adds	r3, #192	@ 0xc0
 8003a0a:	601a      	str	r2, [r3, #0]
      break;
 8003a0c:	e015      	b.n	8003a3a <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6819      	ldr	r1, [r3, #0]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	01db      	lsls	r3, r3, #7
 8003a1a:	440b      	add	r3, r1
 8003a1c:	33c4      	adds	r3, #196	@ 0xc4
 8003a1e:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6819      	ldr	r1, [r3, #0]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	01db      	lsls	r3, r3, #7
 8003a2c:	440b      	add	r3, r1
 8003a2e:	33c8      	adds	r3, #200	@ 0xc8
 8003a30:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8003a32:	2310      	movs	r3, #16
 8003a34:	61bb      	str	r3, [r7, #24]
      break;
 8003a36:	e000      	b.n	8003a3a <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8003a38:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8003a3a:	22fe      	movs	r2, #254	@ 0xfe
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8003a42:	43db      	mvns	r3, r3
 8003a44:	69fa      	ldr	r2, [r7, #28]
 8003a46:	4013      	ands	r3, r2
 8003a48:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	69fa      	ldr	r2, [r7, #28]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	69fa      	ldr	r2, [r7, #28]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	691a      	ldr	r2, [r3, #16]
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	695a      	ldr	r2, [r3, #20]
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	69fa      	ldr	r2, [r7, #28]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	69fa      	ldr	r2, [r7, #28]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d111      	bne.n	8003ac6 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10c      	bne.n	8003ac6 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d107      	bne.n	8003ac6 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	69da      	ldr	r2, [r3, #28]
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	01db      	lsls	r3, r3, #7
 8003ace:	4413      	add	r3, r2
 8003ad0:	33e4      	adds	r3, #228	@ 0xe4
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	601a      	str	r2, [r3, #0]
}
 8003ad6:	bf00      	nop
 8003ad8:	3724      	adds	r7, #36	@ 0x24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40000041 	.word	0x40000041

08003ae8 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2b05      	cmp	r3, #5
 8003af6:	d851      	bhi.n	8003b9c <HRTIM_ForceRegistersUpdate+0xb4>
 8003af8:	a201      	add	r2, pc, #4	@ (adr r2, 8003b00 <HRTIM_ForceRegistersUpdate+0x18>)
 8003afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afe:	bf00      	nop
 8003b00:	08003b2f 	.word	0x08003b2f
 8003b04:	08003b45 	.word	0x08003b45
 8003b08:	08003b5b 	.word	0x08003b5b
 8003b0c:	08003b71 	.word	0x08003b71
 8003b10:	08003b87 	.word	0x08003b87
 8003b14:	08003b19 	.word	0x08003b19
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 0201 	orr.w	r2, r2, #1
 8003b28:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003b2c:	e037      	b.n	8003b9e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0202 	orr.w	r2, r2, #2
 8003b3e:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003b42:	e02c      	b.n	8003b9e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0204 	orr.w	r2, r2, #4
 8003b54:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003b58:	e021      	b.n	8003b9e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0208 	orr.w	r2, r2, #8
 8003b6a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003b6e:	e016      	b.n	8003b9e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0210 	orr.w	r2, r2, #16
 8003b80:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003b84:	e00b      	b.n	8003b9e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0220 	orr.w	r2, r2, #32
 8003b96:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003b9a:	e000      	b.n	8003b9e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8003b9c:	bf00      	nop
  }
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop

08003bac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e08b      	b.n	8003cd6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d106      	bne.n	8003bd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fe f854 	bl	8001c80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2224      	movs	r2, #36	@ 0x24
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0201 	bic.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003bfc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d107      	bne.n	8003c26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c22:	609a      	str	r2, [r3, #8]
 8003c24:	e006      	b.n	8003c34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003c32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d108      	bne.n	8003c4e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c4a:	605a      	str	r2, [r3, #4]
 8003c4c:	e007      	b.n	8003c5e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6859      	ldr	r1, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce0 <HAL_I2C_Init+0x134>)
 8003c6a:	430b      	orrs	r3, r1
 8003c6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68da      	ldr	r2, [r3, #12]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	69d9      	ldr	r1, [r3, #28]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a1a      	ldr	r2, [r3, #32]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	02008000 	.word	0x02008000

08003ce4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	d138      	bne.n	8003d6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e032      	b.n	8003d6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2224      	movs	r2, #36	@ 0x24
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0201 	bic.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6819      	ldr	r1, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	e000      	b.n	8003d6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d6c:	2302      	movs	r3, #2
  }
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d139      	bne.n	8003e04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e033      	b.n	8003e06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2224      	movs	r2, #36	@ 0x24
 8003daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0201 	bic.w	r2, r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003dcc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	021b      	lsls	r3, r3, #8
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	e000      	b.n	8003e06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e04:	2302      	movs	r3, #2
  }
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e097      	b.n	8003f56 <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d106      	bne.n	8003e46 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7fd ff87 	bl	8001d54 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2202      	movs	r2, #2
 8003e4a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d004      	beq.n	8003e68 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e66:	d103      	bne.n	8003e70 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 031e 	bic.w	r3, r3, #30
 8003e6e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d003      	beq.n	8003e84 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	4b38      	ldr	r3, [pc, #224]	@ (8003f60 <HAL_LPTIM_Init+0x14c>)
 8003e80:	4013      	ands	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4b37      	ldr	r3, [pc, #220]	@ (8003f64 <HAL_LPTIM_Init+0x150>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003e94:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003e9a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8003ea0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8003ea6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d107      	bne.n	8003ec6 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d004      	beq.n	8003ed8 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ed6:	d107      	bne.n	8003ee8 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00a      	beq.n	8003f0a <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003efc:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8003f02:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a14      	ldr	r2, [pc, #80]	@ (8003f68 <HAL_LPTIM_Init+0x154>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d004      	beq.n	8003f26 <HAL_LPTIM_Init+0x112>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a12      	ldr	r2, [pc, #72]	@ (8003f6c <HAL_LPTIM_Init+0x158>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d108      	bne.n	8003f38 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f36:	e009      	b.n	8003f4c <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8003f70 <HAL_LPTIM_Init+0x15c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d104      	bne.n	8003f4c <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f4a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	ffff1f3f 	.word	0xffff1f3f
 8003f64:	ff19f1fe 	.word	0xff19f1fe
 8003f68:	40002400 	.word	0x40002400
 8003f6c:	58002400 	.word	0x58002400
 8003f70:	58002800 	.word	0x58002800

08003f74 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003f7c:	4b19      	ldr	r3, [pc, #100]	@ (8003fe4 <HAL_PWREx_ConfigSupply+0x70>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d00a      	beq.n	8003f9e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003f88:	4b16      	ldr	r3, [pc, #88]	@ (8003fe4 <HAL_PWREx_ConfigSupply+0x70>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d001      	beq.n	8003f9a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e01f      	b.n	8003fda <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	e01d      	b.n	8003fda <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003f9e:	4b11      	ldr	r3, [pc, #68]	@ (8003fe4 <HAL_PWREx_ConfigSupply+0x70>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f023 0207 	bic.w	r2, r3, #7
 8003fa6:	490f      	ldr	r1, [pc, #60]	@ (8003fe4 <HAL_PWREx_ConfigSupply+0x70>)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003fae:	f7fe fd59 	bl	8002a64 <HAL_GetTick>
 8003fb2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003fb4:	e009      	b.n	8003fca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003fb6:	f7fe fd55 	bl	8002a64 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003fc4:	d901      	bls.n	8003fca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e007      	b.n	8003fda <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003fca:	4b06      	ldr	r3, [pc, #24]	@ (8003fe4 <HAL_PWREx_ConfigSupply+0x70>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fd6:	d1ee      	bne.n	8003fb6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	58024800 	.word	0x58024800

08003fe8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b08c      	sub	sp, #48	@ 0x30
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d102      	bne.n	8003ffc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	f000 bc48 	b.w	800488c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 8088 	beq.w	800411a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800400a:	4b99      	ldr	r3, [pc, #612]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004012:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004014:	4b96      	ldr	r3, [pc, #600]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 8004016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004018:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800401a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800401c:	2b10      	cmp	r3, #16
 800401e:	d007      	beq.n	8004030 <HAL_RCC_OscConfig+0x48>
 8004020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004022:	2b18      	cmp	r3, #24
 8004024:	d111      	bne.n	800404a <HAL_RCC_OscConfig+0x62>
 8004026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d10c      	bne.n	800404a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004030:	4b8f      	ldr	r3, [pc, #572]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d06d      	beq.n	8004118 <HAL_RCC_OscConfig+0x130>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d169      	bne.n	8004118 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	f000 bc21 	b.w	800488c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004052:	d106      	bne.n	8004062 <HAL_RCC_OscConfig+0x7a>
 8004054:	4b86      	ldr	r3, [pc, #536]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a85      	ldr	r2, [pc, #532]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 800405a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	e02e      	b.n	80040c0 <HAL_RCC_OscConfig+0xd8>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10c      	bne.n	8004084 <HAL_RCC_OscConfig+0x9c>
 800406a:	4b81      	ldr	r3, [pc, #516]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a80      	ldr	r2, [pc, #512]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 8004070:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	4b7e      	ldr	r3, [pc, #504]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a7d      	ldr	r2, [pc, #500]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 800407c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	e01d      	b.n	80040c0 <HAL_RCC_OscConfig+0xd8>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800408c:	d10c      	bne.n	80040a8 <HAL_RCC_OscConfig+0xc0>
 800408e:	4b78      	ldr	r3, [pc, #480]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a77      	ldr	r2, [pc, #476]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 8004094:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	4b75      	ldr	r3, [pc, #468]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a74      	ldr	r2, [pc, #464]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 80040a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	e00b      	b.n	80040c0 <HAL_RCC_OscConfig+0xd8>
 80040a8:	4b71      	ldr	r3, [pc, #452]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a70      	ldr	r2, [pc, #448]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 80040ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	4b6e      	ldr	r3, [pc, #440]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a6d      	ldr	r2, [pc, #436]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 80040ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d013      	beq.n	80040f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c8:	f7fe fccc 	bl	8002a64 <HAL_GetTick>
 80040cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d0:	f7fe fcc8 	bl	8002a64 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b64      	cmp	r3, #100	@ 0x64
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e3d4      	b.n	800488c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040e2:	4b63      	ldr	r3, [pc, #396]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0xe8>
 80040ee:	e014      	b.n	800411a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f0:	f7fe fcb8 	bl	8002a64 <HAL_GetTick>
 80040f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040f8:	f7fe fcb4 	bl	8002a64 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b64      	cmp	r3, #100	@ 0x64
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e3c0      	b.n	800488c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800410a:	4b59      	ldr	r3, [pc, #356]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x110>
 8004116:	e000      	b.n	800411a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 80ca 	beq.w	80042bc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004128:	4b51      	ldr	r3, [pc, #324]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004130:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004132:	4b4f      	ldr	r3, [pc, #316]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 8004134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004136:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d007      	beq.n	800414e <HAL_RCC_OscConfig+0x166>
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	2b18      	cmp	r3, #24
 8004142:	d156      	bne.n	80041f2 <HAL_RCC_OscConfig+0x20a>
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d151      	bne.n	80041f2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800414e:	4b48      	ldr	r3, [pc, #288]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0304 	and.w	r3, r3, #4
 8004156:	2b00      	cmp	r3, #0
 8004158:	d005      	beq.n	8004166 <HAL_RCC_OscConfig+0x17e>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e392      	b.n	800488c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004166:	4b42      	ldr	r3, [pc, #264]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f023 0219 	bic.w	r2, r3, #25
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	493f      	ldr	r1, [pc, #252]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 8004174:	4313      	orrs	r3, r2
 8004176:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004178:	f7fe fc74 	bl	8002a64 <HAL_GetTick>
 800417c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004180:	f7fe fc70 	bl	8002a64 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e37c      	b.n	800488c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004192:	4b37      	ldr	r3, [pc, #220]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0f0      	beq.n	8004180 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419e:	f7fe fc6d 	bl	8002a7c <HAL_GetREVID>
 80041a2:	4603      	mov	r3, r0
 80041a4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d817      	bhi.n	80041dc <HAL_RCC_OscConfig+0x1f4>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	2b40      	cmp	r3, #64	@ 0x40
 80041b2:	d108      	bne.n	80041c6 <HAL_RCC_OscConfig+0x1de>
 80041b4:	4b2e      	ldr	r3, [pc, #184]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80041bc:	4a2c      	ldr	r2, [pc, #176]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 80041be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041c2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041c4:	e07a      	b.n	80042bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	031b      	lsls	r3, r3, #12
 80041d4:	4926      	ldr	r1, [pc, #152]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041da:	e06f      	b.n	80042bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041dc:	4b24      	ldr	r3, [pc, #144]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	061b      	lsls	r3, r3, #24
 80041ea:	4921      	ldr	r1, [pc, #132]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041f0:	e064      	b.n	80042bc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d047      	beq.n	800428a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80041fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f023 0219 	bic.w	r2, r3, #25
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	491a      	ldr	r1, [pc, #104]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 8004208:	4313      	orrs	r3, r2
 800420a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420c:	f7fe fc2a 	bl	8002a64 <HAL_GetTick>
 8004210:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004214:	f7fe fc26 	bl	8002a64 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e332      	b.n	800488c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004226:	4b12      	ldr	r3, [pc, #72]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004232:	f7fe fc23 	bl	8002a7c <HAL_GetREVID>
 8004236:	4603      	mov	r3, r0
 8004238:	f241 0203 	movw	r2, #4099	@ 0x1003
 800423c:	4293      	cmp	r3, r2
 800423e:	d819      	bhi.n	8004274 <HAL_RCC_OscConfig+0x28c>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	2b40      	cmp	r3, #64	@ 0x40
 8004246:	d108      	bne.n	800425a <HAL_RCC_OscConfig+0x272>
 8004248:	4b09      	ldr	r3, [pc, #36]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004250:	4a07      	ldr	r2, [pc, #28]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 8004252:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004256:	6053      	str	r3, [r2, #4]
 8004258:	e030      	b.n	80042bc <HAL_RCC_OscConfig+0x2d4>
 800425a:	4b05      	ldr	r3, [pc, #20]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	031b      	lsls	r3, r3, #12
 8004268:	4901      	ldr	r1, [pc, #4]	@ (8004270 <HAL_RCC_OscConfig+0x288>)
 800426a:	4313      	orrs	r3, r2
 800426c:	604b      	str	r3, [r1, #4]
 800426e:	e025      	b.n	80042bc <HAL_RCC_OscConfig+0x2d4>
 8004270:	58024400 	.word	0x58024400
 8004274:	4b9a      	ldr	r3, [pc, #616]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	061b      	lsls	r3, r3, #24
 8004282:	4997      	ldr	r1, [pc, #604]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 8004284:	4313      	orrs	r3, r2
 8004286:	604b      	str	r3, [r1, #4]
 8004288:	e018      	b.n	80042bc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800428a:	4b95      	ldr	r3, [pc, #596]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a94      	ldr	r2, [pc, #592]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 8004290:	f023 0301 	bic.w	r3, r3, #1
 8004294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004296:	f7fe fbe5 	bl	8002a64 <HAL_GetTick>
 800429a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800429c:	e008      	b.n	80042b0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800429e:	f7fe fbe1 	bl	8002a64 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e2ed      	b.n	800488c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80042b0:	4b8b      	ldr	r3, [pc, #556]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1f0      	bne.n	800429e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0310 	and.w	r3, r3, #16
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 80a9 	beq.w	800441c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ca:	4b85      	ldr	r3, [pc, #532]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042d4:	4b82      	ldr	r3, [pc, #520]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 80042d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d007      	beq.n	80042f0 <HAL_RCC_OscConfig+0x308>
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	2b18      	cmp	r3, #24
 80042e4:	d13a      	bne.n	800435c <HAL_RCC_OscConfig+0x374>
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f003 0303 	and.w	r3, r3, #3
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d135      	bne.n	800435c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042f0:	4b7b      	ldr	r3, [pc, #492]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_OscConfig+0x320>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	2b80      	cmp	r3, #128	@ 0x80
 8004302:	d001      	beq.n	8004308 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e2c1      	b.n	800488c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004308:	f7fe fbb8 	bl	8002a7c <HAL_GetREVID>
 800430c:	4603      	mov	r3, r0
 800430e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004312:	4293      	cmp	r3, r2
 8004314:	d817      	bhi.n	8004346 <HAL_RCC_OscConfig+0x35e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	2b20      	cmp	r3, #32
 800431c:	d108      	bne.n	8004330 <HAL_RCC_OscConfig+0x348>
 800431e:	4b70      	ldr	r3, [pc, #448]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004326:	4a6e      	ldr	r2, [pc, #440]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 8004328:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800432c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800432e:	e075      	b.n	800441c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004330:	4b6b      	ldr	r3, [pc, #428]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	069b      	lsls	r3, r3, #26
 800433e:	4968      	ldr	r1, [pc, #416]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 8004340:	4313      	orrs	r3, r2
 8004342:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004344:	e06a      	b.n	800441c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004346:	4b66      	ldr	r3, [pc, #408]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	061b      	lsls	r3, r3, #24
 8004354:	4962      	ldr	r1, [pc, #392]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 8004356:	4313      	orrs	r3, r2
 8004358:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800435a:	e05f      	b.n	800441c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d042      	beq.n	80043ea <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004364:	4b5e      	ldr	r3, [pc, #376]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a5d      	ldr	r2, [pc, #372]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 800436a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800436e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004370:	f7fe fb78 	bl	8002a64 <HAL_GetTick>
 8004374:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004378:	f7fe fb74 	bl	8002a64 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e280      	b.n	800488c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800438a:	4b55      	ldr	r3, [pc, #340]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0f0      	beq.n	8004378 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004396:	f7fe fb71 	bl	8002a7c <HAL_GetREVID>
 800439a:	4603      	mov	r3, r0
 800439c:	f241 0203 	movw	r2, #4099	@ 0x1003
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d817      	bhi.n	80043d4 <HAL_RCC_OscConfig+0x3ec>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	2b20      	cmp	r3, #32
 80043aa:	d108      	bne.n	80043be <HAL_RCC_OscConfig+0x3d6>
 80043ac:	4b4c      	ldr	r3, [pc, #304]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80043b4:	4a4a      	ldr	r2, [pc, #296]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 80043b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80043ba:	6053      	str	r3, [r2, #4]
 80043bc:	e02e      	b.n	800441c <HAL_RCC_OscConfig+0x434>
 80043be:	4b48      	ldr	r3, [pc, #288]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	069b      	lsls	r3, r3, #26
 80043cc:	4944      	ldr	r1, [pc, #272]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	604b      	str	r3, [r1, #4]
 80043d2:	e023      	b.n	800441c <HAL_RCC_OscConfig+0x434>
 80043d4:	4b42      	ldr	r3, [pc, #264]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	061b      	lsls	r3, r3, #24
 80043e2:	493f      	ldr	r1, [pc, #252]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60cb      	str	r3, [r1, #12]
 80043e8:	e018      	b.n	800441c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80043ea:	4b3d      	ldr	r3, [pc, #244]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a3c      	ldr	r2, [pc, #240]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 80043f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f6:	f7fe fb35 	bl	8002a64 <HAL_GetTick>
 80043fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80043fe:	f7fe fb31 	bl	8002a64 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e23d      	b.n	800488c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004410:	4b33      	ldr	r3, [pc, #204]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1f0      	bne.n	80043fe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0308 	and.w	r3, r3, #8
 8004424:	2b00      	cmp	r3, #0
 8004426:	d036      	beq.n	8004496 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d019      	beq.n	8004464 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004430:	4b2b      	ldr	r3, [pc, #172]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 8004432:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004434:	4a2a      	ldr	r2, [pc, #168]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 8004436:	f043 0301 	orr.w	r3, r3, #1
 800443a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443c:	f7fe fb12 	bl	8002a64 <HAL_GetTick>
 8004440:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004444:	f7fe fb0e 	bl	8002a64 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e21a      	b.n	800488c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004456:	4b22      	ldr	r3, [pc, #136]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 8004458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0x45c>
 8004462:	e018      	b.n	8004496 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004464:	4b1e      	ldr	r3, [pc, #120]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 8004466:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004468:	4a1d      	ldr	r2, [pc, #116]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 800446a:	f023 0301 	bic.w	r3, r3, #1
 800446e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004470:	f7fe faf8 	bl	8002a64 <HAL_GetTick>
 8004474:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004478:	f7fe faf4 	bl	8002a64 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e200      	b.n	800488c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800448a:	4b15      	ldr	r3, [pc, #84]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 800448c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f0      	bne.n	8004478 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d039      	beq.n	8004516 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d01c      	beq.n	80044e4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044aa:	4b0d      	ldr	r3, [pc, #52]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a0c      	ldr	r2, [pc, #48]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 80044b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80044b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80044b6:	f7fe fad5 	bl	8002a64 <HAL_GetTick>
 80044ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044be:	f7fe fad1 	bl	8002a64 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e1dd      	b.n	800488c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80044d0:	4b03      	ldr	r3, [pc, #12]	@ (80044e0 <HAL_RCC_OscConfig+0x4f8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f0      	beq.n	80044be <HAL_RCC_OscConfig+0x4d6>
 80044dc:	e01b      	b.n	8004516 <HAL_RCC_OscConfig+0x52e>
 80044de:	bf00      	nop
 80044e0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044e4:	4b9b      	ldr	r3, [pc, #620]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a9a      	ldr	r2, [pc, #616]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 80044ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80044f0:	f7fe fab8 	bl	8002a64 <HAL_GetTick>
 80044f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044f8:	f7fe fab4 	bl	8002a64 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e1c0      	b.n	800488c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800450a:	4b92      	ldr	r3, [pc, #584]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1f0      	bne.n	80044f8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0304 	and.w	r3, r3, #4
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 8081 	beq.w	8004626 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004524:	4b8c      	ldr	r3, [pc, #560]	@ (8004758 <HAL_RCC_OscConfig+0x770>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a8b      	ldr	r2, [pc, #556]	@ (8004758 <HAL_RCC_OscConfig+0x770>)
 800452a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800452e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004530:	f7fe fa98 	bl	8002a64 <HAL_GetTick>
 8004534:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004538:	f7fe fa94 	bl	8002a64 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b64      	cmp	r3, #100	@ 0x64
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e1a0      	b.n	800488c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800454a:	4b83      	ldr	r3, [pc, #524]	@ (8004758 <HAL_RCC_OscConfig+0x770>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0f0      	beq.n	8004538 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d106      	bne.n	800456c <HAL_RCC_OscConfig+0x584>
 800455e:	4b7d      	ldr	r3, [pc, #500]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 8004560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004562:	4a7c      	ldr	r2, [pc, #496]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 8004564:	f043 0301 	orr.w	r3, r3, #1
 8004568:	6713      	str	r3, [r2, #112]	@ 0x70
 800456a:	e02d      	b.n	80045c8 <HAL_RCC_OscConfig+0x5e0>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10c      	bne.n	800458e <HAL_RCC_OscConfig+0x5a6>
 8004574:	4b77      	ldr	r3, [pc, #476]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 8004576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004578:	4a76      	ldr	r2, [pc, #472]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 800457a:	f023 0301 	bic.w	r3, r3, #1
 800457e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004580:	4b74      	ldr	r3, [pc, #464]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004584:	4a73      	ldr	r2, [pc, #460]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 8004586:	f023 0304 	bic.w	r3, r3, #4
 800458a:	6713      	str	r3, [r2, #112]	@ 0x70
 800458c:	e01c      	b.n	80045c8 <HAL_RCC_OscConfig+0x5e0>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b05      	cmp	r3, #5
 8004594:	d10c      	bne.n	80045b0 <HAL_RCC_OscConfig+0x5c8>
 8004596:	4b6f      	ldr	r3, [pc, #444]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 8004598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459a:	4a6e      	ldr	r2, [pc, #440]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 800459c:	f043 0304 	orr.w	r3, r3, #4
 80045a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a2:	4b6c      	ldr	r3, [pc, #432]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a6:	4a6b      	ldr	r2, [pc, #428]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80045ae:	e00b      	b.n	80045c8 <HAL_RCC_OscConfig+0x5e0>
 80045b0:	4b68      	ldr	r3, [pc, #416]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 80045b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b4:	4a67      	ldr	r2, [pc, #412]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 80045b6:	f023 0301 	bic.w	r3, r3, #1
 80045ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80045bc:	4b65      	ldr	r3, [pc, #404]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 80045be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c0:	4a64      	ldr	r2, [pc, #400]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 80045c2:	f023 0304 	bic.w	r3, r3, #4
 80045c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d015      	beq.n	80045fc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d0:	f7fe fa48 	bl	8002a64 <HAL_GetTick>
 80045d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045d6:	e00a      	b.n	80045ee <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d8:	f7fe fa44 	bl	8002a64 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e14e      	b.n	800488c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045ee:	4b59      	ldr	r3, [pc, #356]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 80045f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0ee      	beq.n	80045d8 <HAL_RCC_OscConfig+0x5f0>
 80045fa:	e014      	b.n	8004626 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fc:	f7fe fa32 	bl	8002a64 <HAL_GetTick>
 8004600:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004602:	e00a      	b.n	800461a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004604:	f7fe fa2e 	bl	8002a64 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004612:	4293      	cmp	r3, r2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e138      	b.n	800488c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800461a:	4b4e      	ldr	r3, [pc, #312]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1ee      	bne.n	8004604 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 812d 	beq.w	800488a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004630:	4b48      	ldr	r3, [pc, #288]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004638:	2b18      	cmp	r3, #24
 800463a:	f000 80bd 	beq.w	80047b8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004642:	2b02      	cmp	r3, #2
 8004644:	f040 809e 	bne.w	8004784 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004648:	4b42      	ldr	r3, [pc, #264]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a41      	ldr	r2, [pc, #260]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 800464e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004654:	f7fe fa06 	bl	8002a64 <HAL_GetTick>
 8004658:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800465c:	f7fe fa02 	bl	8002a64 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e10e      	b.n	800488c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800466e:	4b39      	ldr	r3, [pc, #228]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800467a:	4b36      	ldr	r3, [pc, #216]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 800467c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800467e:	4b37      	ldr	r3, [pc, #220]	@ (800475c <HAL_RCC_OscConfig+0x774>)
 8004680:	4013      	ands	r3, r2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800468a:	0112      	lsls	r2, r2, #4
 800468c:	430a      	orrs	r2, r1
 800468e:	4931      	ldr	r1, [pc, #196]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 8004690:	4313      	orrs	r3, r2
 8004692:	628b      	str	r3, [r1, #40]	@ 0x28
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004698:	3b01      	subs	r3, #1
 800469a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046a2:	3b01      	subs	r3, #1
 80046a4:	025b      	lsls	r3, r3, #9
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ae:	3b01      	subs	r3, #1
 80046b0:	041b      	lsls	r3, r3, #16
 80046b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046bc:	3b01      	subs	r3, #1
 80046be:	061b      	lsls	r3, r3, #24
 80046c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80046c4:	4923      	ldr	r1, [pc, #140]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80046ca:	4b22      	ldr	r3, [pc, #136]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 80046cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ce:	4a21      	ldr	r2, [pc, #132]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 80046d0:	f023 0301 	bic.w	r3, r3, #1
 80046d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80046d6:	4b1f      	ldr	r3, [pc, #124]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 80046d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046da:	4b21      	ldr	r3, [pc, #132]	@ (8004760 <HAL_RCC_OscConfig+0x778>)
 80046dc:	4013      	ands	r3, r2
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80046e2:	00d2      	lsls	r2, r2, #3
 80046e4:	491b      	ldr	r1, [pc, #108]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80046ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 80046ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ee:	f023 020c 	bic.w	r2, r3, #12
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f6:	4917      	ldr	r1, [pc, #92]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80046fc:	4b15      	ldr	r3, [pc, #84]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 80046fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004700:	f023 0202 	bic.w	r2, r3, #2
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004708:	4912      	ldr	r1, [pc, #72]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 800470a:	4313      	orrs	r3, r2
 800470c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800470e:	4b11      	ldr	r3, [pc, #68]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 8004710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004712:	4a10      	ldr	r2, [pc, #64]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 8004714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004718:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800471a:	4b0e      	ldr	r3, [pc, #56]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 800471c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471e:	4a0d      	ldr	r2, [pc, #52]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 8004720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004724:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004726:	4b0b      	ldr	r3, [pc, #44]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 8004728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472a:	4a0a      	ldr	r2, [pc, #40]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 800472c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004730:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004732:	4b08      	ldr	r3, [pc, #32]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 8004734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004736:	4a07      	ldr	r2, [pc, #28]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 8004738:	f043 0301 	orr.w	r3, r3, #1
 800473c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800473e:	4b05      	ldr	r3, [pc, #20]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a04      	ldr	r2, [pc, #16]	@ (8004754 <HAL_RCC_OscConfig+0x76c>)
 8004744:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474a:	f7fe f98b 	bl	8002a64 <HAL_GetTick>
 800474e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004750:	e011      	b.n	8004776 <HAL_RCC_OscConfig+0x78e>
 8004752:	bf00      	nop
 8004754:	58024400 	.word	0x58024400
 8004758:	58024800 	.word	0x58024800
 800475c:	fffffc0c 	.word	0xfffffc0c
 8004760:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004764:	f7fe f97e 	bl	8002a64 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e08a      	b.n	800488c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004776:	4b47      	ldr	r3, [pc, #284]	@ (8004894 <HAL_RCC_OscConfig+0x8ac>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0x77c>
 8004782:	e082      	b.n	800488a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004784:	4b43      	ldr	r3, [pc, #268]	@ (8004894 <HAL_RCC_OscConfig+0x8ac>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a42      	ldr	r2, [pc, #264]	@ (8004894 <HAL_RCC_OscConfig+0x8ac>)
 800478a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800478e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004790:	f7fe f968 	bl	8002a64 <HAL_GetTick>
 8004794:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004798:	f7fe f964 	bl	8002a64 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e070      	b.n	800488c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047aa:	4b3a      	ldr	r3, [pc, #232]	@ (8004894 <HAL_RCC_OscConfig+0x8ac>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1f0      	bne.n	8004798 <HAL_RCC_OscConfig+0x7b0>
 80047b6:	e068      	b.n	800488a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80047b8:	4b36      	ldr	r3, [pc, #216]	@ (8004894 <HAL_RCC_OscConfig+0x8ac>)
 80047ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80047be:	4b35      	ldr	r3, [pc, #212]	@ (8004894 <HAL_RCC_OscConfig+0x8ac>)
 80047c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d031      	beq.n	8004830 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f003 0203 	and.w	r2, r3, #3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d12a      	bne.n	8004830 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	091b      	lsrs	r3, r3, #4
 80047de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d122      	bne.n	8004830 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d11a      	bne.n	8004830 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	0a5b      	lsrs	r3, r3, #9
 80047fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004806:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004808:	429a      	cmp	r2, r3
 800480a:	d111      	bne.n	8004830 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	0c1b      	lsrs	r3, r3, #16
 8004810:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004818:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800481a:	429a      	cmp	r2, r3
 800481c:	d108      	bne.n	8004830 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	0e1b      	lsrs	r3, r3, #24
 8004822:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800482a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800482c:	429a      	cmp	r2, r3
 800482e:	d001      	beq.n	8004834 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e02b      	b.n	800488c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004834:	4b17      	ldr	r3, [pc, #92]	@ (8004894 <HAL_RCC_OscConfig+0x8ac>)
 8004836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004838:	08db      	lsrs	r3, r3, #3
 800483a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800483e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	429a      	cmp	r2, r3
 8004848:	d01f      	beq.n	800488a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800484a:	4b12      	ldr	r3, [pc, #72]	@ (8004894 <HAL_RCC_OscConfig+0x8ac>)
 800484c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800484e:	4a11      	ldr	r2, [pc, #68]	@ (8004894 <HAL_RCC_OscConfig+0x8ac>)
 8004850:	f023 0301 	bic.w	r3, r3, #1
 8004854:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004856:	f7fe f905 	bl	8002a64 <HAL_GetTick>
 800485a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800485c:	bf00      	nop
 800485e:	f7fe f901 	bl	8002a64 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004866:	4293      	cmp	r3, r2
 8004868:	d0f9      	beq.n	800485e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800486a:	4b0a      	ldr	r3, [pc, #40]	@ (8004894 <HAL_RCC_OscConfig+0x8ac>)
 800486c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800486e:	4b0a      	ldr	r3, [pc, #40]	@ (8004898 <HAL_RCC_OscConfig+0x8b0>)
 8004870:	4013      	ands	r3, r2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004876:	00d2      	lsls	r2, r2, #3
 8004878:	4906      	ldr	r1, [pc, #24]	@ (8004894 <HAL_RCC_OscConfig+0x8ac>)
 800487a:	4313      	orrs	r3, r2
 800487c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800487e:	4b05      	ldr	r3, [pc, #20]	@ (8004894 <HAL_RCC_OscConfig+0x8ac>)
 8004880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004882:	4a04      	ldr	r2, [pc, #16]	@ (8004894 <HAL_RCC_OscConfig+0x8ac>)
 8004884:	f043 0301 	orr.w	r3, r3, #1
 8004888:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3730      	adds	r7, #48	@ 0x30
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	58024400 	.word	0x58024400
 8004898:	ffff0007 	.word	0xffff0007

0800489c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e19c      	b.n	8004bea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048b0:	4b8a      	ldr	r3, [pc, #552]	@ (8004adc <HAL_RCC_ClockConfig+0x240>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 030f 	and.w	r3, r3, #15
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d910      	bls.n	80048e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048be:	4b87      	ldr	r3, [pc, #540]	@ (8004adc <HAL_RCC_ClockConfig+0x240>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f023 020f 	bic.w	r2, r3, #15
 80048c6:	4985      	ldr	r1, [pc, #532]	@ (8004adc <HAL_RCC_ClockConfig+0x240>)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ce:	4b83      	ldr	r3, [pc, #524]	@ (8004adc <HAL_RCC_ClockConfig+0x240>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d001      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e184      	b.n	8004bea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d010      	beq.n	800490e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691a      	ldr	r2, [r3, #16]
 80048f0:	4b7b      	ldr	r3, [pc, #492]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d908      	bls.n	800490e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80048fc:	4b78      	ldr	r3, [pc, #480]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	4975      	ldr	r1, [pc, #468]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 800490a:	4313      	orrs	r3, r2
 800490c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0308 	and.w	r3, r3, #8
 8004916:	2b00      	cmp	r3, #0
 8004918:	d010      	beq.n	800493c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	695a      	ldr	r2, [r3, #20]
 800491e:	4b70      	ldr	r3, [pc, #448]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004926:	429a      	cmp	r2, r3
 8004928:	d908      	bls.n	800493c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800492a:	4b6d      	ldr	r3, [pc, #436]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	496a      	ldr	r1, [pc, #424]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 8004938:	4313      	orrs	r3, r2
 800493a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0310 	and.w	r3, r3, #16
 8004944:	2b00      	cmp	r3, #0
 8004946:	d010      	beq.n	800496a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699a      	ldr	r2, [r3, #24]
 800494c:	4b64      	ldr	r3, [pc, #400]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 800494e:	69db      	ldr	r3, [r3, #28]
 8004950:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004954:	429a      	cmp	r2, r3
 8004956:	d908      	bls.n	800496a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004958:	4b61      	ldr	r3, [pc, #388]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	495e      	ldr	r1, [pc, #376]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 8004966:	4313      	orrs	r3, r2
 8004968:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b00      	cmp	r3, #0
 8004974:	d010      	beq.n	8004998 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69da      	ldr	r2, [r3, #28]
 800497a:	4b59      	ldr	r3, [pc, #356]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004982:	429a      	cmp	r2, r3
 8004984:	d908      	bls.n	8004998 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004986:	4b56      	ldr	r3, [pc, #344]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69db      	ldr	r3, [r3, #28]
 8004992:	4953      	ldr	r1, [pc, #332]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 8004994:	4313      	orrs	r3, r2
 8004996:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d010      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	4b4d      	ldr	r3, [pc, #308]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	f003 030f 	and.w	r3, r3, #15
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d908      	bls.n	80049c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b4:	4b4a      	ldr	r3, [pc, #296]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f023 020f 	bic.w	r2, r3, #15
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	4947      	ldr	r1, [pc, #284]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d055      	beq.n	8004a7e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80049d2:	4b43      	ldr	r3, [pc, #268]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	4940      	ldr	r1, [pc, #256]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d107      	bne.n	80049fc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049ec:	4b3c      	ldr	r3, [pc, #240]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d121      	bne.n	8004a3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e0f6      	b.n	8004bea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d107      	bne.n	8004a14 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a04:	4b36      	ldr	r3, [pc, #216]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d115      	bne.n	8004a3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e0ea      	b.n	8004bea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d107      	bne.n	8004a2c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a1c:	4b30      	ldr	r3, [pc, #192]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d109      	bne.n	8004a3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e0de      	b.n	8004bea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a2c:	4b2c      	ldr	r3, [pc, #176]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0d6      	b.n	8004bea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a3c:	4b28      	ldr	r3, [pc, #160]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f023 0207 	bic.w	r2, r3, #7
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	4925      	ldr	r1, [pc, #148]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a4e:	f7fe f809 	bl	8002a64 <HAL_GetTick>
 8004a52:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a54:	e00a      	b.n	8004a6c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a56:	f7fe f805 	bl	8002a64 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e0be      	b.n	8004bea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d1eb      	bne.n	8004a56 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d010      	beq.n	8004aac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	4b14      	ldr	r3, [pc, #80]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d208      	bcs.n	8004aac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a9a:	4b11      	ldr	r3, [pc, #68]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	f023 020f 	bic.w	r2, r3, #15
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	490e      	ldr	r1, [pc, #56]	@ (8004ae0 <HAL_RCC_ClockConfig+0x244>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004aac:	4b0b      	ldr	r3, [pc, #44]	@ (8004adc <HAL_RCC_ClockConfig+0x240>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 030f 	and.w	r3, r3, #15
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d214      	bcs.n	8004ae4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aba:	4b08      	ldr	r3, [pc, #32]	@ (8004adc <HAL_RCC_ClockConfig+0x240>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f023 020f 	bic.w	r2, r3, #15
 8004ac2:	4906      	ldr	r1, [pc, #24]	@ (8004adc <HAL_RCC_ClockConfig+0x240>)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aca:	4b04      	ldr	r3, [pc, #16]	@ (8004adc <HAL_RCC_ClockConfig+0x240>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d005      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e086      	b.n	8004bea <HAL_RCC_ClockConfig+0x34e>
 8004adc:	52002000 	.word	0x52002000
 8004ae0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d010      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	4b3f      	ldr	r3, [pc, #252]	@ (8004bf4 <HAL_RCC_ClockConfig+0x358>)
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d208      	bcs.n	8004b12 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b00:	4b3c      	ldr	r3, [pc, #240]	@ (8004bf4 <HAL_RCC_ClockConfig+0x358>)
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	4939      	ldr	r1, [pc, #228]	@ (8004bf4 <HAL_RCC_ClockConfig+0x358>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d010      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695a      	ldr	r2, [r3, #20]
 8004b22:	4b34      	ldr	r3, [pc, #208]	@ (8004bf4 <HAL_RCC_ClockConfig+0x358>)
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d208      	bcs.n	8004b40 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b2e:	4b31      	ldr	r3, [pc, #196]	@ (8004bf4 <HAL_RCC_ClockConfig+0x358>)
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	492e      	ldr	r1, [pc, #184]	@ (8004bf4 <HAL_RCC_ClockConfig+0x358>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d010      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699a      	ldr	r2, [r3, #24]
 8004b50:	4b28      	ldr	r3, [pc, #160]	@ (8004bf4 <HAL_RCC_ClockConfig+0x358>)
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d208      	bcs.n	8004b6e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b5c:	4b25      	ldr	r3, [pc, #148]	@ (8004bf4 <HAL_RCC_ClockConfig+0x358>)
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	4922      	ldr	r1, [pc, #136]	@ (8004bf4 <HAL_RCC_ClockConfig+0x358>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0320 	and.w	r3, r3, #32
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d010      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69da      	ldr	r2, [r3, #28]
 8004b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8004bf4 <HAL_RCC_ClockConfig+0x358>)
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d208      	bcs.n	8004b9c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8004bf4 <HAL_RCC_ClockConfig+0x358>)
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	4917      	ldr	r1, [pc, #92]	@ (8004bf4 <HAL_RCC_ClockConfig+0x358>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b9c:	f000 f834 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4b14      	ldr	r3, [pc, #80]	@ (8004bf4 <HAL_RCC_ClockConfig+0x358>)
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	0a1b      	lsrs	r3, r3, #8
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	4912      	ldr	r1, [pc, #72]	@ (8004bf8 <HAL_RCC_ClockConfig+0x35c>)
 8004bae:	5ccb      	ldrb	r3, [r1, r3]
 8004bb0:	f003 031f 	and.w	r3, r3, #31
 8004bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bba:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf4 <HAL_RCC_ClockConfig+0x358>)
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	4a0d      	ldr	r2, [pc, #52]	@ (8004bf8 <HAL_RCC_ClockConfig+0x35c>)
 8004bc4:	5cd3      	ldrb	r3, [r2, r3]
 8004bc6:	f003 031f 	and.w	r3, r3, #31
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8004bfc <HAL_RCC_ClockConfig+0x360>)
 8004bd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8004c00 <HAL_RCC_ClockConfig+0x364>)
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004bda:	4b0a      	ldr	r3, [pc, #40]	@ (8004c04 <HAL_RCC_ClockConfig+0x368>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7fd fef6 	bl	80029d0 <HAL_InitTick>
 8004be4:	4603      	mov	r3, r0
 8004be6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	58024400 	.word	0x58024400
 8004bf8:	08009668 	.word	0x08009668
 8004bfc:	2400000c 	.word	0x2400000c
 8004c00:	24000008 	.word	0x24000008
 8004c04:	24000010 	.word	0x24000010

08004c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b089      	sub	sp, #36	@ 0x24
 8004c0c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c0e:	4bb3      	ldr	r3, [pc, #716]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c16:	2b18      	cmp	r3, #24
 8004c18:	f200 8155 	bhi.w	8004ec6 <HAL_RCC_GetSysClockFreq+0x2be>
 8004c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c24 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c22:	bf00      	nop
 8004c24:	08004c89 	.word	0x08004c89
 8004c28:	08004ec7 	.word	0x08004ec7
 8004c2c:	08004ec7 	.word	0x08004ec7
 8004c30:	08004ec7 	.word	0x08004ec7
 8004c34:	08004ec7 	.word	0x08004ec7
 8004c38:	08004ec7 	.word	0x08004ec7
 8004c3c:	08004ec7 	.word	0x08004ec7
 8004c40:	08004ec7 	.word	0x08004ec7
 8004c44:	08004caf 	.word	0x08004caf
 8004c48:	08004ec7 	.word	0x08004ec7
 8004c4c:	08004ec7 	.word	0x08004ec7
 8004c50:	08004ec7 	.word	0x08004ec7
 8004c54:	08004ec7 	.word	0x08004ec7
 8004c58:	08004ec7 	.word	0x08004ec7
 8004c5c:	08004ec7 	.word	0x08004ec7
 8004c60:	08004ec7 	.word	0x08004ec7
 8004c64:	08004cb5 	.word	0x08004cb5
 8004c68:	08004ec7 	.word	0x08004ec7
 8004c6c:	08004ec7 	.word	0x08004ec7
 8004c70:	08004ec7 	.word	0x08004ec7
 8004c74:	08004ec7 	.word	0x08004ec7
 8004c78:	08004ec7 	.word	0x08004ec7
 8004c7c:	08004ec7 	.word	0x08004ec7
 8004c80:	08004ec7 	.word	0x08004ec7
 8004c84:	08004cbb 	.word	0x08004cbb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c88:	4b94      	ldr	r3, [pc, #592]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0320 	and.w	r3, r3, #32
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d009      	beq.n	8004ca8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c94:	4b91      	ldr	r3, [pc, #580]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	08db      	lsrs	r3, r3, #3
 8004c9a:	f003 0303 	and.w	r3, r3, #3
 8004c9e:	4a90      	ldr	r2, [pc, #576]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004ca6:	e111      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004ca8:	4b8d      	ldr	r3, [pc, #564]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004caa:	61bb      	str	r3, [r7, #24]
      break;
 8004cac:	e10e      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004cae:	4b8d      	ldr	r3, [pc, #564]	@ (8004ee4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004cb0:	61bb      	str	r3, [r7, #24]
      break;
 8004cb2:	e10b      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004cb4:	4b8c      	ldr	r3, [pc, #560]	@ (8004ee8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004cb6:	61bb      	str	r3, [r7, #24]
      break;
 8004cb8:	e108      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cba:	4b88      	ldr	r3, [pc, #544]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004cc4:	4b85      	ldr	r3, [pc, #532]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc8:	091b      	lsrs	r3, r3, #4
 8004cca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004cd0:	4b82      	ldr	r3, [pc, #520]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004cda:	4b80      	ldr	r3, [pc, #512]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cde:	08db      	lsrs	r3, r3, #3
 8004ce0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	fb02 f303 	mul.w	r3, r2, r3
 8004cea:	ee07 3a90 	vmov	s15, r3
 8004cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 80e1 	beq.w	8004ec0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	f000 8083 	beq.w	8004e0c <HAL_RCC_GetSysClockFreq+0x204>
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	f200 80a1 	bhi.w	8004e50 <HAL_RCC_GetSysClockFreq+0x248>
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d003      	beq.n	8004d1c <HAL_RCC_GetSysClockFreq+0x114>
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d056      	beq.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004d1a:	e099      	b.n	8004e50 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d1c:	4b6f      	ldr	r3, [pc, #444]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0320 	and.w	r3, r3, #32
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d02d      	beq.n	8004d84 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d28:	4b6c      	ldr	r3, [pc, #432]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	08db      	lsrs	r3, r3, #3
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	4a6b      	ldr	r2, [pc, #428]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d34:	fa22 f303 	lsr.w	r3, r2, r3
 8004d38:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	ee07 3a90 	vmov	s15, r3
 8004d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	ee07 3a90 	vmov	s15, r3
 8004d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d52:	4b62      	ldr	r3, [pc, #392]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d5a:	ee07 3a90 	vmov	s15, r3
 8004d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d62:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d66:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004eec <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004d82:	e087      	b.n	8004e94 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	ee07 3a90 	vmov	s15, r3
 8004d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004ef0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d96:	4b51      	ldr	r3, [pc, #324]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9e:	ee07 3a90 	vmov	s15, r3
 8004da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004daa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004eec <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004db6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004dc6:	e065      	b.n	8004e94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	ee07 3a90 	vmov	s15, r3
 8004dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004ef4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dda:	4b40      	ldr	r3, [pc, #256]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de2:	ee07 3a90 	vmov	s15, r3
 8004de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dea:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dee:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004eec <HAL_RCC_GetSysClockFreq+0x2e4>
 8004df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e0a:	e043      	b.n	8004e94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e16:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004ef8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e26:	ee07 3a90 	vmov	s15, r3
 8004e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e32:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004eec <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e4e:	e021      	b.n	8004e94 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	ee07 3a90 	vmov	s15, r3
 8004e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e5a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004ef4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e62:	4b1e      	ldr	r3, [pc, #120]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e6a:	ee07 3a90 	vmov	s15, r3
 8004e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e72:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e76:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004eec <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e92:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004e94:	4b11      	ldr	r3, [pc, #68]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e98:	0a5b      	lsrs	r3, r3, #9
 8004e9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	ee07 3a90 	vmov	s15, r3
 8004ea8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004eac:	edd7 6a07 	vldr	s13, [r7, #28]
 8004eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eb8:	ee17 3a90 	vmov	r3, s15
 8004ebc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004ebe:	e005      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	61bb      	str	r3, [r7, #24]
      break;
 8004ec4:	e002      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004ec6:	4b07      	ldr	r3, [pc, #28]	@ (8004ee4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ec8:	61bb      	str	r3, [r7, #24]
      break;
 8004eca:	bf00      	nop
  }

  return sysclockfreq;
 8004ecc:	69bb      	ldr	r3, [r7, #24]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3724      	adds	r7, #36	@ 0x24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	58024400 	.word	0x58024400
 8004ee0:	03d09000 	.word	0x03d09000
 8004ee4:	003d0900 	.word	0x003d0900
 8004ee8:	016e3600 	.word	0x016e3600
 8004eec:	46000000 	.word	0x46000000
 8004ef0:	4c742400 	.word	0x4c742400
 8004ef4:	4a742400 	.word	0x4a742400
 8004ef8:	4bb71b00 	.word	0x4bb71b00

08004efc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f02:	f7ff fe81 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 8004f06:	4602      	mov	r2, r0
 8004f08:	4b10      	ldr	r3, [pc, #64]	@ (8004f4c <HAL_RCC_GetHCLKFreq+0x50>)
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	0a1b      	lsrs	r3, r3, #8
 8004f0e:	f003 030f 	and.w	r3, r3, #15
 8004f12:	490f      	ldr	r1, [pc, #60]	@ (8004f50 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f14:	5ccb      	ldrb	r3, [r1, r3]
 8004f16:	f003 031f 	and.w	r3, r3, #31
 8004f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f20:	4b0a      	ldr	r3, [pc, #40]	@ (8004f4c <HAL_RCC_GetHCLKFreq+0x50>)
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	f003 030f 	and.w	r3, r3, #15
 8004f28:	4a09      	ldr	r2, [pc, #36]	@ (8004f50 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f2a:	5cd3      	ldrb	r3, [r2, r3]
 8004f2c:	f003 031f 	and.w	r3, r3, #31
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	fa22 f303 	lsr.w	r3, r2, r3
 8004f36:	4a07      	ldr	r2, [pc, #28]	@ (8004f54 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f38:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f3a:	4a07      	ldr	r2, [pc, #28]	@ (8004f58 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004f40:	4b04      	ldr	r3, [pc, #16]	@ (8004f54 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f42:	681b      	ldr	r3, [r3, #0]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	58024400 	.word	0x58024400
 8004f50:	08009668 	.word	0x08009668
 8004f54:	2400000c 	.word	0x2400000c
 8004f58:	24000008 	.word	0x24000008

08004f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004f60:	f7ff ffcc 	bl	8004efc <HAL_RCC_GetHCLKFreq>
 8004f64:	4602      	mov	r2, r0
 8004f66:	4b06      	ldr	r3, [pc, #24]	@ (8004f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	091b      	lsrs	r3, r3, #4
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	4904      	ldr	r1, [pc, #16]	@ (8004f84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f72:	5ccb      	ldrb	r3, [r1, r3]
 8004f74:	f003 031f 	and.w	r3, r3, #31
 8004f78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	58024400 	.word	0x58024400
 8004f84:	08009668 	.word	0x08009668

08004f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004f8c:	f7ff ffb6 	bl	8004efc <HAL_RCC_GetHCLKFreq>
 8004f90:	4602      	mov	r2, r0
 8004f92:	4b06      	ldr	r3, [pc, #24]	@ (8004fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	0a1b      	lsrs	r3, r3, #8
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	4904      	ldr	r1, [pc, #16]	@ (8004fb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f9e:	5ccb      	ldrb	r3, [r1, r3]
 8004fa0:	f003 031f 	and.w	r3, r3, #31
 8004fa4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	58024400 	.word	0x58024400
 8004fb0:	08009668 	.word	0x08009668

08004fb4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fb8:	b0ca      	sub	sp, #296	@ 0x128
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004fd8:	2500      	movs	r5, #0
 8004fda:	ea54 0305 	orrs.w	r3, r4, r5
 8004fde:	d049      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fe6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004fea:	d02f      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004fec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ff0:	d828      	bhi.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004ff2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ff6:	d01a      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004ff8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ffc:	d822      	bhi.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005002:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005006:	d007      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005008:	e01c      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800500a:	4bb8      	ldr	r3, [pc, #736]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800500c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500e:	4ab7      	ldr	r2, [pc, #732]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005014:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005016:	e01a      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800501c:	3308      	adds	r3, #8
 800501e:	2102      	movs	r1, #2
 8005020:	4618      	mov	r0, r3
 8005022:	f001 fc8f 	bl	8006944 <RCCEx_PLL2_Config>
 8005026:	4603      	mov	r3, r0
 8005028:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800502c:	e00f      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800502e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005032:	3328      	adds	r3, #40	@ 0x28
 8005034:	2102      	movs	r1, #2
 8005036:	4618      	mov	r0, r3
 8005038:	f001 fd36 	bl	8006aa8 <RCCEx_PLL3_Config>
 800503c:	4603      	mov	r3, r0
 800503e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005042:	e004      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800504a:	e000      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800504c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800504e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10a      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005056:	4ba5      	ldr	r3, [pc, #660]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800505a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800505e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005062:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005064:	4aa1      	ldr	r2, [pc, #644]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005066:	430b      	orrs	r3, r1
 8005068:	6513      	str	r3, [r2, #80]	@ 0x50
 800506a:	e003      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800506c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005070:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005080:	f04f 0900 	mov.w	r9, #0
 8005084:	ea58 0309 	orrs.w	r3, r8, r9
 8005088:	d047      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800508a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800508e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005090:	2b04      	cmp	r3, #4
 8005092:	d82a      	bhi.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005094:	a201      	add	r2, pc, #4	@ (adr r2, 800509c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509a:	bf00      	nop
 800509c:	080050b1 	.word	0x080050b1
 80050a0:	080050bf 	.word	0x080050bf
 80050a4:	080050d5 	.word	0x080050d5
 80050a8:	080050f3 	.word	0x080050f3
 80050ac:	080050f3 	.word	0x080050f3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050b0:	4b8e      	ldr	r3, [pc, #568]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b4:	4a8d      	ldr	r2, [pc, #564]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050bc:	e01a      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c2:	3308      	adds	r3, #8
 80050c4:	2100      	movs	r1, #0
 80050c6:	4618      	mov	r0, r3
 80050c8:	f001 fc3c 	bl	8006944 <RCCEx_PLL2_Config>
 80050cc:	4603      	mov	r3, r0
 80050ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050d2:	e00f      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d8:	3328      	adds	r3, #40	@ 0x28
 80050da:	2100      	movs	r1, #0
 80050dc:	4618      	mov	r0, r3
 80050de:	f001 fce3 	bl	8006aa8 <RCCEx_PLL3_Config>
 80050e2:	4603      	mov	r3, r0
 80050e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050e8:	e004      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050f0:	e000      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80050f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050fc:	4b7b      	ldr	r3, [pc, #492]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005100:	f023 0107 	bic.w	r1, r3, #7
 8005104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800510a:	4a78      	ldr	r2, [pc, #480]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800510c:	430b      	orrs	r3, r1
 800510e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005110:	e003      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005116:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800511a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800511e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005122:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005126:	f04f 0b00 	mov.w	fp, #0
 800512a:	ea5a 030b 	orrs.w	r3, sl, fp
 800512e:	d04c      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005136:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800513a:	d030      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800513c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005140:	d829      	bhi.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005142:	2bc0      	cmp	r3, #192	@ 0xc0
 8005144:	d02d      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005146:	2bc0      	cmp	r3, #192	@ 0xc0
 8005148:	d825      	bhi.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800514a:	2b80      	cmp	r3, #128	@ 0x80
 800514c:	d018      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800514e:	2b80      	cmp	r3, #128	@ 0x80
 8005150:	d821      	bhi.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005156:	2b40      	cmp	r3, #64	@ 0x40
 8005158:	d007      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800515a:	e01c      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800515c:	4b63      	ldr	r3, [pc, #396]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800515e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005160:	4a62      	ldr	r2, [pc, #392]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005162:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005166:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005168:	e01c      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800516a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800516e:	3308      	adds	r3, #8
 8005170:	2100      	movs	r1, #0
 8005172:	4618      	mov	r0, r3
 8005174:	f001 fbe6 	bl	8006944 <RCCEx_PLL2_Config>
 8005178:	4603      	mov	r3, r0
 800517a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800517e:	e011      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005184:	3328      	adds	r3, #40	@ 0x28
 8005186:	2100      	movs	r1, #0
 8005188:	4618      	mov	r0, r3
 800518a:	f001 fc8d 	bl	8006aa8 <RCCEx_PLL3_Config>
 800518e:	4603      	mov	r3, r0
 8005190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005194:	e006      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800519c:	e002      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800519e:	bf00      	nop
 80051a0:	e000      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80051a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10a      	bne.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80051ac:	4b4f      	ldr	r3, [pc, #316]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051b0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80051b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ba:	4a4c      	ldr	r2, [pc, #304]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051bc:	430b      	orrs	r3, r1
 80051be:	6513      	str	r3, [r2, #80]	@ 0x50
 80051c0:	e003      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80051ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80051d6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80051da:	2300      	movs	r3, #0
 80051dc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80051e0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80051e4:	460b      	mov	r3, r1
 80051e6:	4313      	orrs	r3, r2
 80051e8:	d053      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80051ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80051f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80051f6:	d035      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80051f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80051fc:	d82e      	bhi.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80051fe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005202:	d031      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005204:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005208:	d828      	bhi.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800520a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800520e:	d01a      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005210:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005214:	d822      	bhi.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800521a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800521e:	d007      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005220:	e01c      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005222:	4b32      	ldr	r3, [pc, #200]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005226:	4a31      	ldr	r2, [pc, #196]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005228:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800522c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800522e:	e01c      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005234:	3308      	adds	r3, #8
 8005236:	2100      	movs	r1, #0
 8005238:	4618      	mov	r0, r3
 800523a:	f001 fb83 	bl	8006944 <RCCEx_PLL2_Config>
 800523e:	4603      	mov	r3, r0
 8005240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005244:	e011      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800524a:	3328      	adds	r3, #40	@ 0x28
 800524c:	2100      	movs	r1, #0
 800524e:	4618      	mov	r0, r3
 8005250:	f001 fc2a 	bl	8006aa8 <RCCEx_PLL3_Config>
 8005254:	4603      	mov	r3, r0
 8005256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800525a:	e006      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005262:	e002      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005264:	bf00      	nop
 8005266:	e000      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800526a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10b      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005272:	4b1e      	ldr	r3, [pc, #120]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005276:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800527a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800527e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005282:	4a1a      	ldr	r2, [pc, #104]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005284:	430b      	orrs	r3, r1
 8005286:	6593      	str	r3, [r2, #88]	@ 0x58
 8005288:	e003      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800528a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800528e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800529e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80052a2:	2300      	movs	r3, #0
 80052a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80052a8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80052ac:	460b      	mov	r3, r1
 80052ae:	4313      	orrs	r3, r2
 80052b0:	d056      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80052b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80052ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052be:	d038      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80052c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052c4:	d831      	bhi.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80052ca:	d034      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80052cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80052d0:	d82b      	bhi.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052d6:	d01d      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80052d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052dc:	d825      	bhi.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d006      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80052e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052e6:	d00a      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80052e8:	e01f      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052ea:	bf00      	nop
 80052ec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052f0:	4ba2      	ldr	r3, [pc, #648]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f4:	4aa1      	ldr	r2, [pc, #644]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052fc:	e01c      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005302:	3308      	adds	r3, #8
 8005304:	2100      	movs	r1, #0
 8005306:	4618      	mov	r0, r3
 8005308:	f001 fb1c 	bl	8006944 <RCCEx_PLL2_Config>
 800530c:	4603      	mov	r3, r0
 800530e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005312:	e011      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005318:	3328      	adds	r3, #40	@ 0x28
 800531a:	2100      	movs	r1, #0
 800531c:	4618      	mov	r0, r3
 800531e:	f001 fbc3 	bl	8006aa8 <RCCEx_PLL3_Config>
 8005322:	4603      	mov	r3, r0
 8005324:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005328:	e006      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005330:	e002      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005332:	bf00      	nop
 8005334:	e000      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005336:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005338:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10b      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005340:	4b8e      	ldr	r3, [pc, #568]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005344:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800534c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005350:	4a8a      	ldr	r2, [pc, #552]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005352:	430b      	orrs	r3, r1
 8005354:	6593      	str	r3, [r2, #88]	@ 0x58
 8005356:	e003      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005358:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800535c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005368:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800536c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005370:	2300      	movs	r3, #0
 8005372:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005376:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800537a:	460b      	mov	r3, r1
 800537c:	4313      	orrs	r3, r2
 800537e:	d03a      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005386:	2b30      	cmp	r3, #48	@ 0x30
 8005388:	d01f      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x416>
 800538a:	2b30      	cmp	r3, #48	@ 0x30
 800538c:	d819      	bhi.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800538e:	2b20      	cmp	r3, #32
 8005390:	d00c      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005392:	2b20      	cmp	r3, #32
 8005394:	d815      	bhi.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005396:	2b00      	cmp	r3, #0
 8005398:	d019      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800539a:	2b10      	cmp	r3, #16
 800539c:	d111      	bne.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800539e:	4b77      	ldr	r3, [pc, #476]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a2:	4a76      	ldr	r2, [pc, #472]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80053aa:	e011      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b0:	3308      	adds	r3, #8
 80053b2:	2102      	movs	r1, #2
 80053b4:	4618      	mov	r0, r3
 80053b6:	f001 fac5 	bl	8006944 <RCCEx_PLL2_Config>
 80053ba:	4603      	mov	r3, r0
 80053bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80053c0:	e006      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053c8:	e002      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80053ca:	bf00      	nop
 80053cc:	e000      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80053ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10a      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80053d8:	4b68      	ldr	r3, [pc, #416]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053dc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80053e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053e6:	4a65      	ldr	r2, [pc, #404]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053e8:	430b      	orrs	r3, r1
 80053ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80053ec:	e003      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80053f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005402:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005406:	2300      	movs	r3, #0
 8005408:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800540c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005410:	460b      	mov	r3, r1
 8005412:	4313      	orrs	r3, r2
 8005414:	d051      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800541a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800541c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005420:	d035      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005422:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005426:	d82e      	bhi.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005428:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800542c:	d031      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800542e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005432:	d828      	bhi.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005434:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005438:	d01a      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800543a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800543e:	d822      	bhi.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005448:	d007      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800544a:	e01c      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800544c:	4b4b      	ldr	r3, [pc, #300]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800544e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005450:	4a4a      	ldr	r2, [pc, #296]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005452:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005456:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005458:	e01c      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800545a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800545e:	3308      	adds	r3, #8
 8005460:	2100      	movs	r1, #0
 8005462:	4618      	mov	r0, r3
 8005464:	f001 fa6e 	bl	8006944 <RCCEx_PLL2_Config>
 8005468:	4603      	mov	r3, r0
 800546a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800546e:	e011      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005474:	3328      	adds	r3, #40	@ 0x28
 8005476:	2100      	movs	r1, #0
 8005478:	4618      	mov	r0, r3
 800547a:	f001 fb15 	bl	8006aa8 <RCCEx_PLL3_Config>
 800547e:	4603      	mov	r3, r0
 8005480:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005484:	e006      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800548c:	e002      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800548e:	bf00      	nop
 8005490:	e000      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005494:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10a      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800549c:	4b37      	ldr	r3, [pc, #220]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800549e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054a0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80054a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054aa:	4a34      	ldr	r2, [pc, #208]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054ac:	430b      	orrs	r3, r1
 80054ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80054b0:	e003      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80054ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80054c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80054ca:	2300      	movs	r3, #0
 80054cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80054d0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80054d4:	460b      	mov	r3, r1
 80054d6:	4313      	orrs	r3, r2
 80054d8:	d056      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80054da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054e4:	d033      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80054e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054ea:	d82c      	bhi.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80054ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80054f0:	d02f      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80054f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80054f6:	d826      	bhi.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80054f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80054fc:	d02b      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80054fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005502:	d820      	bhi.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005504:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005508:	d012      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800550a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800550e:	d81a      	bhi.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005510:	2b00      	cmp	r3, #0
 8005512:	d022      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005518:	d115      	bne.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800551a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551e:	3308      	adds	r3, #8
 8005520:	2101      	movs	r1, #1
 8005522:	4618      	mov	r0, r3
 8005524:	f001 fa0e 	bl	8006944 <RCCEx_PLL2_Config>
 8005528:	4603      	mov	r3, r0
 800552a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800552e:	e015      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005534:	3328      	adds	r3, #40	@ 0x28
 8005536:	2101      	movs	r1, #1
 8005538:	4618      	mov	r0, r3
 800553a:	f001 fab5 	bl	8006aa8 <RCCEx_PLL3_Config>
 800553e:	4603      	mov	r3, r0
 8005540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005544:	e00a      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800554c:	e006      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800554e:	bf00      	nop
 8005550:	e004      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005552:	bf00      	nop
 8005554:	e002      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005556:	bf00      	nop
 8005558:	e000      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800555a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800555c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10d      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005564:	4b05      	ldr	r3, [pc, #20]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005568:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800556c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005570:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005572:	4a02      	ldr	r2, [pc, #8]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005574:	430b      	orrs	r3, r1
 8005576:	6513      	str	r3, [r2, #80]	@ 0x50
 8005578:	e006      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800557a:	bf00      	nop
 800557c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005584:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005594:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005598:	2300      	movs	r3, #0
 800559a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800559e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80055a2:	460b      	mov	r3, r1
 80055a4:	4313      	orrs	r3, r2
 80055a6:	d055      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80055a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80055b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055b4:	d033      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80055b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055ba:	d82c      	bhi.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055c0:	d02f      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80055c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055c6:	d826      	bhi.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80055cc:	d02b      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80055ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80055d2:	d820      	bhi.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055d8:	d012      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80055da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055de:	d81a      	bhi.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d022      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80055e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055e8:	d115      	bne.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ee:	3308      	adds	r3, #8
 80055f0:	2101      	movs	r1, #1
 80055f2:	4618      	mov	r0, r3
 80055f4:	f001 f9a6 	bl	8006944 <RCCEx_PLL2_Config>
 80055f8:	4603      	mov	r3, r0
 80055fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80055fe:	e015      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005604:	3328      	adds	r3, #40	@ 0x28
 8005606:	2101      	movs	r1, #1
 8005608:	4618      	mov	r0, r3
 800560a:	f001 fa4d 	bl	8006aa8 <RCCEx_PLL3_Config>
 800560e:	4603      	mov	r3, r0
 8005610:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005614:	e00a      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800561c:	e006      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800561e:	bf00      	nop
 8005620:	e004      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005622:	bf00      	nop
 8005624:	e002      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005626:	bf00      	nop
 8005628:	e000      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800562a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800562c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10b      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005634:	4ba3      	ldr	r3, [pc, #652]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005638:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800563c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005640:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005644:	4a9f      	ldr	r2, [pc, #636]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005646:	430b      	orrs	r3, r1
 8005648:	6593      	str	r3, [r2, #88]	@ 0x58
 800564a:	e003      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800564c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005650:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005660:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005664:	2300      	movs	r3, #0
 8005666:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800566a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800566e:	460b      	mov	r3, r1
 8005670:	4313      	orrs	r3, r2
 8005672:	d037      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800567a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800567e:	d00e      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005680:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005684:	d816      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005686:	2b00      	cmp	r3, #0
 8005688:	d018      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800568a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800568e:	d111      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005690:	4b8c      	ldr	r3, [pc, #560]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005694:	4a8b      	ldr	r2, [pc, #556]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005696:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800569a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800569c:	e00f      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800569e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a2:	3308      	adds	r3, #8
 80056a4:	2101      	movs	r1, #1
 80056a6:	4618      	mov	r0, r3
 80056a8:	f001 f94c 	bl	8006944 <RCCEx_PLL2_Config>
 80056ac:	4603      	mov	r3, r0
 80056ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80056b2:	e004      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056ba:	e000      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80056bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10a      	bne.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80056c6:	4b7f      	ldr	r3, [pc, #508]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80056ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056d4:	4a7b      	ldr	r2, [pc, #492]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056d6:	430b      	orrs	r3, r1
 80056d8:	6513      	str	r3, [r2, #80]	@ 0x50
 80056da:	e003      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80056e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ec:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80056f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056f4:	2300      	movs	r3, #0
 80056f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80056fa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80056fe:	460b      	mov	r3, r1
 8005700:	4313      	orrs	r3, r2
 8005702:	d039      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800570a:	2b03      	cmp	r3, #3
 800570c:	d81c      	bhi.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800570e:	a201      	add	r2, pc, #4	@ (adr r2, 8005714 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005714:	08005751 	.word	0x08005751
 8005718:	08005725 	.word	0x08005725
 800571c:	08005733 	.word	0x08005733
 8005720:	08005751 	.word	0x08005751
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005724:	4b67      	ldr	r3, [pc, #412]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005728:	4a66      	ldr	r2, [pc, #408]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800572a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800572e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005730:	e00f      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005736:	3308      	adds	r3, #8
 8005738:	2102      	movs	r1, #2
 800573a:	4618      	mov	r0, r3
 800573c:	f001 f902 	bl	8006944 <RCCEx_PLL2_Config>
 8005740:	4603      	mov	r3, r0
 8005742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005746:	e004      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800574e:	e000      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005750:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005752:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10a      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800575a:	4b5a      	ldr	r3, [pc, #360]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800575c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800575e:	f023 0103 	bic.w	r1, r3, #3
 8005762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005766:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005768:	4a56      	ldr	r2, [pc, #344]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800576a:	430b      	orrs	r3, r1
 800576c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800576e:	e003      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005770:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005774:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800577c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005780:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005784:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005788:	2300      	movs	r3, #0
 800578a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800578e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005792:	460b      	mov	r3, r1
 8005794:	4313      	orrs	r3, r2
 8005796:	f000 809f 	beq.w	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800579a:	4b4b      	ldr	r3, [pc, #300]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a4a      	ldr	r2, [pc, #296]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80057a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057a6:	f7fd f95d 	bl	8002a64 <HAL_GetTick>
 80057aa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057ae:	e00b      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057b0:	f7fd f958 	bl	8002a64 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b64      	cmp	r3, #100	@ 0x64
 80057be:	d903      	bls.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057c6:	e005      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057c8:	4b3f      	ldr	r3, [pc, #252]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0ed      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80057d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d179      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80057dc:	4b39      	ldr	r3, [pc, #228]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80057e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80057e8:	4053      	eors	r3, r2
 80057ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d015      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057f2:	4b34      	ldr	r3, [pc, #208]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057fa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057fe:	4b31      	ldr	r3, [pc, #196]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005802:	4a30      	ldr	r2, [pc, #192]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005808:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800580a:	4b2e      	ldr	r3, [pc, #184]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800580c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800580e:	4a2d      	ldr	r2, [pc, #180]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005810:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005814:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005816:	4a2b      	ldr	r2, [pc, #172]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005818:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800581c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800581e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005822:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005826:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800582a:	d118      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800582c:	f7fd f91a 	bl	8002a64 <HAL_GetTick>
 8005830:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005834:	e00d      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005836:	f7fd f915 	bl	8002a64 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005840:	1ad2      	subs	r2, r2, r3
 8005842:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005846:	429a      	cmp	r2, r3
 8005848:	d903      	bls.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005850:	e005      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005852:	4b1c      	ldr	r3, [pc, #112]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0eb      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800585e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005862:	2b00      	cmp	r3, #0
 8005864:	d129      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800586a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800586e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005872:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005876:	d10e      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005878:	4b12      	ldr	r3, [pc, #72]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005884:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005888:	091a      	lsrs	r2, r3, #4
 800588a:	4b10      	ldr	r3, [pc, #64]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800588c:	4013      	ands	r3, r2
 800588e:	4a0d      	ldr	r2, [pc, #52]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005890:	430b      	orrs	r3, r1
 8005892:	6113      	str	r3, [r2, #16]
 8005894:	e005      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005896:	4b0b      	ldr	r3, [pc, #44]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	4a0a      	ldr	r2, [pc, #40]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800589c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80058a0:	6113      	str	r3, [r2, #16]
 80058a2:	4b08      	ldr	r3, [pc, #32]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058a4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80058a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058b2:	4a04      	ldr	r2, [pc, #16]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058b4:	430b      	orrs	r3, r1
 80058b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80058b8:	e00e      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80058c2:	e009      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80058c4:	58024400 	.word	0x58024400
 80058c8:	58024800 	.word	0x58024800
 80058cc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80058d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e0:	f002 0301 	and.w	r3, r2, #1
 80058e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058e8:	2300      	movs	r3, #0
 80058ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80058ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058f2:	460b      	mov	r3, r1
 80058f4:	4313      	orrs	r3, r2
 80058f6:	f000 8089 	beq.w	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80058fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005900:	2b28      	cmp	r3, #40	@ 0x28
 8005902:	d86b      	bhi.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005904:	a201      	add	r2, pc, #4	@ (adr r2, 800590c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590a:	bf00      	nop
 800590c:	080059e5 	.word	0x080059e5
 8005910:	080059dd 	.word	0x080059dd
 8005914:	080059dd 	.word	0x080059dd
 8005918:	080059dd 	.word	0x080059dd
 800591c:	080059dd 	.word	0x080059dd
 8005920:	080059dd 	.word	0x080059dd
 8005924:	080059dd 	.word	0x080059dd
 8005928:	080059dd 	.word	0x080059dd
 800592c:	080059b1 	.word	0x080059b1
 8005930:	080059dd 	.word	0x080059dd
 8005934:	080059dd 	.word	0x080059dd
 8005938:	080059dd 	.word	0x080059dd
 800593c:	080059dd 	.word	0x080059dd
 8005940:	080059dd 	.word	0x080059dd
 8005944:	080059dd 	.word	0x080059dd
 8005948:	080059dd 	.word	0x080059dd
 800594c:	080059c7 	.word	0x080059c7
 8005950:	080059dd 	.word	0x080059dd
 8005954:	080059dd 	.word	0x080059dd
 8005958:	080059dd 	.word	0x080059dd
 800595c:	080059dd 	.word	0x080059dd
 8005960:	080059dd 	.word	0x080059dd
 8005964:	080059dd 	.word	0x080059dd
 8005968:	080059dd 	.word	0x080059dd
 800596c:	080059e5 	.word	0x080059e5
 8005970:	080059dd 	.word	0x080059dd
 8005974:	080059dd 	.word	0x080059dd
 8005978:	080059dd 	.word	0x080059dd
 800597c:	080059dd 	.word	0x080059dd
 8005980:	080059dd 	.word	0x080059dd
 8005984:	080059dd 	.word	0x080059dd
 8005988:	080059dd 	.word	0x080059dd
 800598c:	080059e5 	.word	0x080059e5
 8005990:	080059dd 	.word	0x080059dd
 8005994:	080059dd 	.word	0x080059dd
 8005998:	080059dd 	.word	0x080059dd
 800599c:	080059dd 	.word	0x080059dd
 80059a0:	080059dd 	.word	0x080059dd
 80059a4:	080059dd 	.word	0x080059dd
 80059a8:	080059dd 	.word	0x080059dd
 80059ac:	080059e5 	.word	0x080059e5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b4:	3308      	adds	r3, #8
 80059b6:	2101      	movs	r1, #1
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 ffc3 	bl	8006944 <RCCEx_PLL2_Config>
 80059be:	4603      	mov	r3, r0
 80059c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80059c4:	e00f      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ca:	3328      	adds	r3, #40	@ 0x28
 80059cc:	2101      	movs	r1, #1
 80059ce:	4618      	mov	r0, r3
 80059d0:	f001 f86a 	bl	8006aa8 <RCCEx_PLL3_Config>
 80059d4:	4603      	mov	r3, r0
 80059d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80059da:	e004      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059e2:	e000      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80059e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10a      	bne.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80059ee:	4bbf      	ldr	r3, [pc, #764]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80059f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059fc:	4abb      	ldr	r2, [pc, #748]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059fe:	430b      	orrs	r3, r1
 8005a00:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a02:	e003      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	f002 0302 	and.w	r3, r2, #2
 8005a18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005a22:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005a26:	460b      	mov	r3, r1
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	d041      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a32:	2b05      	cmp	r3, #5
 8005a34:	d824      	bhi.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005a36:	a201      	add	r2, pc, #4	@ (adr r2, 8005a3c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3c:	08005a89 	.word	0x08005a89
 8005a40:	08005a55 	.word	0x08005a55
 8005a44:	08005a6b 	.word	0x08005a6b
 8005a48:	08005a89 	.word	0x08005a89
 8005a4c:	08005a89 	.word	0x08005a89
 8005a50:	08005a89 	.word	0x08005a89
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a58:	3308      	adds	r3, #8
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f000 ff71 	bl	8006944 <RCCEx_PLL2_Config>
 8005a62:	4603      	mov	r3, r0
 8005a64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a68:	e00f      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a6e:	3328      	adds	r3, #40	@ 0x28
 8005a70:	2101      	movs	r1, #1
 8005a72:	4618      	mov	r0, r3
 8005a74:	f001 f818 	bl	8006aa8 <RCCEx_PLL3_Config>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a7e:	e004      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a86:	e000      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10a      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005a92:	4b96      	ldr	r3, [pc, #600]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a96:	f023 0107 	bic.w	r1, r3, #7
 8005a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005aa0:	4a92      	ldr	r2, [pc, #584]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005aa2:	430b      	orrs	r3, r1
 8005aa4:	6553      	str	r3, [r2, #84]	@ 0x54
 8005aa6:	e003      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab8:	f002 0304 	and.w	r3, r2, #4
 8005abc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ac6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005aca:	460b      	mov	r3, r1
 8005acc:	4313      	orrs	r3, r2
 8005ace:	d044      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ad8:	2b05      	cmp	r3, #5
 8005ada:	d825      	bhi.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005adc:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae2:	bf00      	nop
 8005ae4:	08005b31 	.word	0x08005b31
 8005ae8:	08005afd 	.word	0x08005afd
 8005aec:	08005b13 	.word	0x08005b13
 8005af0:	08005b31 	.word	0x08005b31
 8005af4:	08005b31 	.word	0x08005b31
 8005af8:	08005b31 	.word	0x08005b31
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b00:	3308      	adds	r3, #8
 8005b02:	2101      	movs	r1, #1
 8005b04:	4618      	mov	r0, r3
 8005b06:	f000 ff1d 	bl	8006944 <RCCEx_PLL2_Config>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005b10:	e00f      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b16:	3328      	adds	r3, #40	@ 0x28
 8005b18:	2101      	movs	r1, #1
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 ffc4 	bl	8006aa8 <RCCEx_PLL3_Config>
 8005b20:	4603      	mov	r3, r0
 8005b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005b26:	e004      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b2e:	e000      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005b30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10b      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b3a:	4b6c      	ldr	r3, [pc, #432]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b3e:	f023 0107 	bic.w	r1, r3, #7
 8005b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b4a:	4a68      	ldr	r2, [pc, #416]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b4c:	430b      	orrs	r3, r1
 8005b4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b50:	e003      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b62:	f002 0320 	and.w	r3, r2, #32
 8005b66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b74:	460b      	mov	r3, r1
 8005b76:	4313      	orrs	r3, r2
 8005b78:	d055      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b86:	d033      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b8c:	d82c      	bhi.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b92:	d02f      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b98:	d826      	bhi.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005b9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005b9e:	d02b      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005ba0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ba4:	d820      	bhi.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ba6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005baa:	d012      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005bac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bb0:	d81a      	bhi.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d022      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005bb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bba:	d115      	bne.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc0:	3308      	adds	r3, #8
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 febd 	bl	8006944 <RCCEx_PLL2_Config>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005bd0:	e015      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd6:	3328      	adds	r3, #40	@ 0x28
 8005bd8:	2102      	movs	r1, #2
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 ff64 	bl	8006aa8 <RCCEx_PLL3_Config>
 8005be0:	4603      	mov	r3, r0
 8005be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005be6:	e00a      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bee:	e006      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005bf0:	bf00      	nop
 8005bf2:	e004      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005bf4:	bf00      	nop
 8005bf6:	e002      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005bf8:	bf00      	nop
 8005bfa:	e000      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10b      	bne.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c06:	4b39      	ldr	r3, [pc, #228]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c0a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c16:	4a35      	ldr	r2, [pc, #212]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c18:	430b      	orrs	r3, r1
 8005c1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c1c:	e003      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005c32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c36:	2300      	movs	r3, #0
 8005c38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005c3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005c40:	460b      	mov	r3, r1
 8005c42:	4313      	orrs	r3, r2
 8005c44:	d058      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c4e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005c52:	d033      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005c54:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005c58:	d82c      	bhi.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c5e:	d02f      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005c60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c64:	d826      	bhi.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c6a:	d02b      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005c6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c70:	d820      	bhi.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c76:	d012      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005c78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c7c:	d81a      	bhi.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d022      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005c82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c86:	d115      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c8c:	3308      	adds	r3, #8
 8005c8e:	2100      	movs	r1, #0
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 fe57 	bl	8006944 <RCCEx_PLL2_Config>
 8005c96:	4603      	mov	r3, r0
 8005c98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005c9c:	e015      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca2:	3328      	adds	r3, #40	@ 0x28
 8005ca4:	2102      	movs	r1, #2
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 fefe 	bl	8006aa8 <RCCEx_PLL3_Config>
 8005cac:	4603      	mov	r3, r0
 8005cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005cb2:	e00a      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cba:	e006      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005cbc:	bf00      	nop
 8005cbe:	e004      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005cc0:	bf00      	nop
 8005cc2:	e002      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005cc4:	bf00      	nop
 8005cc6:	e000      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10e      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cd2:	4b06      	ldr	r3, [pc, #24]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ce2:	4a02      	ldr	r2, [pc, #8]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ce4:	430b      	orrs	r3, r1
 8005ce6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ce8:	e006      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005cea:	bf00      	nop
 8005cec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d00:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005d04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d0e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005d12:	460b      	mov	r3, r1
 8005d14:	4313      	orrs	r3, r2
 8005d16:	d055      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d20:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005d24:	d033      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005d26:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005d2a:	d82c      	bhi.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d30:	d02f      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005d32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d36:	d826      	bhi.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d38:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005d3c:	d02b      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005d3e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005d42:	d820      	bhi.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d48:	d012      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005d4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d4e:	d81a      	bhi.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d022      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005d54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d58:	d115      	bne.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d5e:	3308      	adds	r3, #8
 8005d60:	2100      	movs	r1, #0
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fdee 	bl	8006944 <RCCEx_PLL2_Config>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d6e:	e015      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d74:	3328      	adds	r3, #40	@ 0x28
 8005d76:	2102      	movs	r1, #2
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 fe95 	bl	8006aa8 <RCCEx_PLL3_Config>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d84:	e00a      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d8c:	e006      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005d8e:	bf00      	nop
 8005d90:	e004      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005d92:	bf00      	nop
 8005d94:	e002      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005d96:	bf00      	nop
 8005d98:	e000      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10b      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005da4:	4ba1      	ldr	r3, [pc, #644]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005db4:	4a9d      	ldr	r2, [pc, #628]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005db6:	430b      	orrs	r3, r1
 8005db8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dba:	e003      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	f002 0308 	and.w	r3, r2, #8
 8005dd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005dda:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005dde:	460b      	mov	r3, r1
 8005de0:	4313      	orrs	r3, r2
 8005de2:	d01e      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005df0:	d10c      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df6:	3328      	adds	r3, #40	@ 0x28
 8005df8:	2102      	movs	r1, #2
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 fe54 	bl	8006aa8 <RCCEx_PLL3_Config>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005e0c:	4b87      	ldr	r3, [pc, #540]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e10:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e1c:	4a83      	ldr	r2, [pc, #524]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e1e:	430b      	orrs	r3, r1
 8005e20:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	f002 0310 	and.w	r3, r2, #16
 8005e2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e32:	2300      	movs	r3, #0
 8005e34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005e38:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	d01e      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e4e:	d10c      	bne.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e54:	3328      	adds	r3, #40	@ 0x28
 8005e56:	2102      	movs	r1, #2
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 fe25 	bl	8006aa8 <RCCEx_PLL3_Config>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e6a:	4b70      	ldr	r3, [pc, #448]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e7a:	4a6c      	ldr	r2, [pc, #432]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e7c:	430b      	orrs	r3, r1
 8005e7e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e88:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005e8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e90:	2300      	movs	r3, #0
 8005e92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e96:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	d03e      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ea8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005eac:	d022      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005eae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005eb2:	d81b      	bhi.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ebc:	d00b      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005ebe:	e015      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec4:	3308      	adds	r3, #8
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f000 fd3b 	bl	8006944 <RCCEx_PLL2_Config>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005ed4:	e00f      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eda:	3328      	adds	r3, #40	@ 0x28
 8005edc:	2102      	movs	r1, #2
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 fde2 	bl	8006aa8 <RCCEx_PLL3_Config>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005eea:	e004      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ef2:	e000      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10b      	bne.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005efe:	4b4b      	ldr	r3, [pc, #300]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f02:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f0e:	4a47      	ldr	r2, [pc, #284]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f10:	430b      	orrs	r3, r1
 8005f12:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f14:	e003      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f26:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005f2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f30:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005f34:	460b      	mov	r3, r1
 8005f36:	4313      	orrs	r3, r2
 8005f38:	d03b      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f42:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f46:	d01f      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005f48:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f4c:	d818      	bhi.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005f4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f52:	d003      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005f54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f58:	d007      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005f5a:	e011      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f5c:	4b33      	ldr	r3, [pc, #204]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f60:	4a32      	ldr	r2, [pc, #200]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f68:	e00f      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f6e:	3328      	adds	r3, #40	@ 0x28
 8005f70:	2101      	movs	r1, #1
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 fd98 	bl	8006aa8 <RCCEx_PLL3_Config>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f7e:	e004      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f86:	e000      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10b      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f92:	4b26      	ldr	r3, [pc, #152]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa2:	4a22      	ldr	r2, [pc, #136]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fa4:	430b      	orrs	r3, r1
 8005fa6:	6553      	str	r3, [r2, #84]	@ 0x54
 8005fa8:	e003      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005fbe:	673b      	str	r3, [r7, #112]	@ 0x70
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	677b      	str	r3, [r7, #116]	@ 0x74
 8005fc4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	d034      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fdc:	d007      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005fde:	e011      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fe0:	4b12      	ldr	r3, [pc, #72]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe4:	4a11      	ldr	r2, [pc, #68]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fe6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005fec:	e00e      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	2102      	movs	r1, #2
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 fca4 	bl	8006944 <RCCEx_PLL2_Config>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006002:	e003      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800600a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800600c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10d      	bne.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006014:	4b05      	ldr	r3, [pc, #20]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006018:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800601c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006020:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006022:	4a02      	ldr	r2, [pc, #8]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006024:	430b      	orrs	r3, r1
 8006026:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006028:	e006      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800602a:	bf00      	nop
 800602c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006030:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006034:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006040:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006044:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006046:	2300      	movs	r3, #0
 8006048:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800604a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800604e:	460b      	mov	r3, r1
 8006050:	4313      	orrs	r3, r2
 8006052:	d00c      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006058:	3328      	adds	r3, #40	@ 0x28
 800605a:	2102      	movs	r1, #2
 800605c:	4618      	mov	r0, r3
 800605e:	f000 fd23 	bl	8006aa8 <RCCEx_PLL3_Config>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800606e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006076:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800607a:	663b      	str	r3, [r7, #96]	@ 0x60
 800607c:	2300      	movs	r3, #0
 800607e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006080:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006084:	460b      	mov	r3, r1
 8006086:	4313      	orrs	r3, r2
 8006088:	d038      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800608a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800608e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006092:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006096:	d018      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006098:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800609c:	d811      	bhi.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800609e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060a2:	d014      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80060a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060a8:	d80b      	bhi.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d011      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80060ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060b2:	d106      	bne.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060b4:	4bc3      	ldr	r3, [pc, #780]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b8:	4ac2      	ldr	r2, [pc, #776]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80060c0:	e008      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060c8:	e004      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80060ca:	bf00      	nop
 80060cc:	e002      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80060ce:	bf00      	nop
 80060d0:	e000      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80060d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10b      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060dc:	4bb9      	ldr	r3, [pc, #740]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060e0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80060e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060ec:	4ab5      	ldr	r2, [pc, #724]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060ee:	430b      	orrs	r3, r1
 80060f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80060f2:	e003      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80060fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006108:	65bb      	str	r3, [r7, #88]	@ 0x58
 800610a:	2300      	movs	r3, #0
 800610c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800610e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006112:	460b      	mov	r3, r1
 8006114:	4313      	orrs	r3, r2
 8006116:	d009      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006118:	4baa      	ldr	r3, [pc, #680]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800611a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800611c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006126:	4aa7      	ldr	r2, [pc, #668]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006128:	430b      	orrs	r3, r1
 800612a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800612c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006138:	653b      	str	r3, [r7, #80]	@ 0x50
 800613a:	2300      	movs	r3, #0
 800613c:	657b      	str	r3, [r7, #84]	@ 0x54
 800613e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006142:	460b      	mov	r3, r1
 8006144:	4313      	orrs	r3, r2
 8006146:	d00a      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006148:	4b9e      	ldr	r3, [pc, #632]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006154:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006158:	4a9a      	ldr	r2, [pc, #616]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800615a:	430b      	orrs	r3, r1
 800615c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800615e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006166:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800616a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800616c:	2300      	movs	r3, #0
 800616e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006170:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006174:	460b      	mov	r3, r1
 8006176:	4313      	orrs	r3, r2
 8006178:	d009      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800617a:	4b92      	ldr	r3, [pc, #584]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800617c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800617e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006186:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006188:	4a8e      	ldr	r2, [pc, #568]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800618a:	430b      	orrs	r3, r1
 800618c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800618e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800619a:	643b      	str	r3, [r7, #64]	@ 0x40
 800619c:	2300      	movs	r3, #0
 800619e:	647b      	str	r3, [r7, #68]	@ 0x44
 80061a0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80061a4:	460b      	mov	r3, r1
 80061a6:	4313      	orrs	r3, r2
 80061a8:	d00e      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061aa:	4b86      	ldr	r3, [pc, #536]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	4a85      	ldr	r2, [pc, #532]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061b0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80061b4:	6113      	str	r3, [r2, #16]
 80061b6:	4b83      	ldr	r3, [pc, #524]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061b8:	6919      	ldr	r1, [r3, #16]
 80061ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80061c2:	4a80      	ldr	r2, [pc, #512]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061c4:	430b      	orrs	r3, r1
 80061c6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80061c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80061d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80061d6:	2300      	movs	r3, #0
 80061d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80061de:	460b      	mov	r3, r1
 80061e0:	4313      	orrs	r3, r2
 80061e2:	d009      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80061e4:	4b77      	ldr	r3, [pc, #476]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061e8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80061ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061f2:	4a74      	ldr	r2, [pc, #464]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061f4:	430b      	orrs	r3, r1
 80061f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80061f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006200:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006204:	633b      	str	r3, [r7, #48]	@ 0x30
 8006206:	2300      	movs	r3, #0
 8006208:	637b      	str	r3, [r7, #52]	@ 0x34
 800620a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800620e:	460b      	mov	r3, r1
 8006210:	4313      	orrs	r3, r2
 8006212:	d00a      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006214:	4b6b      	ldr	r3, [pc, #428]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006218:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800621c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006220:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006224:	4a67      	ldr	r2, [pc, #412]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006226:	430b      	orrs	r3, r1
 8006228:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800622a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800622e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006232:	2100      	movs	r1, #0
 8006234:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800623c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006240:	460b      	mov	r3, r1
 8006242:	4313      	orrs	r3, r2
 8006244:	d011      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800624a:	3308      	adds	r3, #8
 800624c:	2100      	movs	r1, #0
 800624e:	4618      	mov	r0, r3
 8006250:	f000 fb78 	bl	8006944 <RCCEx_PLL2_Config>
 8006254:	4603      	mov	r3, r0
 8006256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800625a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006266:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800626a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800626e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006272:	2100      	movs	r1, #0
 8006274:	6239      	str	r1, [r7, #32]
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	627b      	str	r3, [r7, #36]	@ 0x24
 800627c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006280:	460b      	mov	r3, r1
 8006282:	4313      	orrs	r3, r2
 8006284:	d011      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800628a:	3308      	adds	r3, #8
 800628c:	2101      	movs	r1, #1
 800628e:	4618      	mov	r0, r3
 8006290:	f000 fb58 	bl	8006944 <RCCEx_PLL2_Config>
 8006294:	4603      	mov	r3, r0
 8006296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800629a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80062aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b2:	2100      	movs	r1, #0
 80062b4:	61b9      	str	r1, [r7, #24]
 80062b6:	f003 0304 	and.w	r3, r3, #4
 80062ba:	61fb      	str	r3, [r7, #28]
 80062bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80062c0:	460b      	mov	r3, r1
 80062c2:	4313      	orrs	r3, r2
 80062c4:	d011      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ca:	3308      	adds	r3, #8
 80062cc:	2102      	movs	r1, #2
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fb38 	bl	8006944 <RCCEx_PLL2_Config>
 80062d4:	4603      	mov	r3, r0
 80062d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80062da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80062ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f2:	2100      	movs	r1, #0
 80062f4:	6139      	str	r1, [r7, #16]
 80062f6:	f003 0308 	and.w	r3, r3, #8
 80062fa:	617b      	str	r3, [r7, #20]
 80062fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006300:	460b      	mov	r3, r1
 8006302:	4313      	orrs	r3, r2
 8006304:	d011      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800630a:	3328      	adds	r3, #40	@ 0x28
 800630c:	2100      	movs	r1, #0
 800630e:	4618      	mov	r0, r3
 8006310:	f000 fbca 	bl	8006aa8 <RCCEx_PLL3_Config>
 8006314:	4603      	mov	r3, r0
 8006316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800631a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800631e:	2b00      	cmp	r3, #0
 8006320:	d003      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006326:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800632a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800632e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006332:	2100      	movs	r1, #0
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	f003 0310 	and.w	r3, r3, #16
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006340:	460b      	mov	r3, r1
 8006342:	4313      	orrs	r3, r2
 8006344:	d011      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634a:	3328      	adds	r3, #40	@ 0x28
 800634c:	2101      	movs	r1, #1
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fbaa 	bl	8006aa8 <RCCEx_PLL3_Config>
 8006354:	4603      	mov	r3, r0
 8006356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800635a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006362:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006366:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800636a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800636e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006372:	2100      	movs	r1, #0
 8006374:	6039      	str	r1, [r7, #0]
 8006376:	f003 0320 	and.w	r3, r3, #32
 800637a:	607b      	str	r3, [r7, #4]
 800637c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006380:	460b      	mov	r3, r1
 8006382:	4313      	orrs	r3, r2
 8006384:	d011      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800638a:	3328      	adds	r3, #40	@ 0x28
 800638c:	2102      	movs	r1, #2
 800638e:	4618      	mov	r0, r3
 8006390:	f000 fb8a 	bl	8006aa8 <RCCEx_PLL3_Config>
 8006394:	4603      	mov	r3, r0
 8006396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800639a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80063aa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	e000      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80063be:	46bd      	mov	sp, r7
 80063c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063c4:	58024400 	.word	0x58024400

080063c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80063cc:	f7fe fd96 	bl	8004efc <HAL_RCC_GetHCLKFreq>
 80063d0:	4602      	mov	r2, r0
 80063d2:	4b06      	ldr	r3, [pc, #24]	@ (80063ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	091b      	lsrs	r3, r3, #4
 80063d8:	f003 0307 	and.w	r3, r3, #7
 80063dc:	4904      	ldr	r1, [pc, #16]	@ (80063f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80063de:	5ccb      	ldrb	r3, [r1, r3]
 80063e0:	f003 031f 	and.w	r3, r3, #31
 80063e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	58024400 	.word	0x58024400
 80063f0:	08009668 	.word	0x08009668

080063f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b089      	sub	sp, #36	@ 0x24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063fc:	4ba1      	ldr	r3, [pc, #644]	@ (8006684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006400:	f003 0303 	and.w	r3, r3, #3
 8006404:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006406:	4b9f      	ldr	r3, [pc, #636]	@ (8006684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640a:	0b1b      	lsrs	r3, r3, #12
 800640c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006410:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006412:	4b9c      	ldr	r3, [pc, #624]	@ (8006684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006416:	091b      	lsrs	r3, r3, #4
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800641e:	4b99      	ldr	r3, [pc, #612]	@ (8006684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006422:	08db      	lsrs	r3, r3, #3
 8006424:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	fb02 f303 	mul.w	r3, r2, r3
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006436:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 8111 	beq.w	8006664 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	2b02      	cmp	r3, #2
 8006446:	f000 8083 	beq.w	8006550 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	2b02      	cmp	r3, #2
 800644e:	f200 80a1 	bhi.w	8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d003      	beq.n	8006460 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d056      	beq.n	800650c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800645e:	e099      	b.n	8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006460:	4b88      	ldr	r3, [pc, #544]	@ (8006684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0320 	and.w	r3, r3, #32
 8006468:	2b00      	cmp	r3, #0
 800646a:	d02d      	beq.n	80064c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800646c:	4b85      	ldr	r3, [pc, #532]	@ (8006684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	08db      	lsrs	r3, r3, #3
 8006472:	f003 0303 	and.w	r3, r3, #3
 8006476:	4a84      	ldr	r2, [pc, #528]	@ (8006688 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006478:	fa22 f303 	lsr.w	r3, r2, r3
 800647c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	ee07 3a90 	vmov	s15, r3
 8006484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	ee07 3a90 	vmov	s15, r3
 800648e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006496:	4b7b      	ldr	r3, [pc, #492]	@ (8006684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800649a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80064aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800668c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80064c6:	e087      	b.n	80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	ee07 3a90 	vmov	s15, r3
 80064ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006690 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80064d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064da:	4b6a      	ldr	r3, [pc, #424]	@ (8006684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064e2:	ee07 3a90 	vmov	s15, r3
 80064e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80064ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800668c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800650a:	e065      	b.n	80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	ee07 3a90 	vmov	s15, r3
 8006512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006516:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800651a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800651e:	4b59      	ldr	r3, [pc, #356]	@ (8006684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006526:	ee07 3a90 	vmov	s15, r3
 800652a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800652e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006532:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800668c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800653a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800653e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800654a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800654e:	e043      	b.n	80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	ee07 3a90 	vmov	s15, r3
 8006556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800655a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800655e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006562:	4b48      	ldr	r3, [pc, #288]	@ (8006684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800656a:	ee07 3a90 	vmov	s15, r3
 800656e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006572:	ed97 6a03 	vldr	s12, [r7, #12]
 8006576:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800668c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800657a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800657e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006582:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800658a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800658e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006592:	e021      	b.n	80065d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	ee07 3a90 	vmov	s15, r3
 800659a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800659e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80065a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065a6:	4b37      	ldr	r3, [pc, #220]	@ (8006684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ae:	ee07 3a90 	vmov	s15, r3
 80065b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80065ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800668c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80065be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80065d8:	4b2a      	ldr	r3, [pc, #168]	@ (8006684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065dc:	0a5b      	lsrs	r3, r3, #9
 80065de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065e2:	ee07 3a90 	vmov	s15, r3
 80065e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80065f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065fe:	ee17 2a90 	vmov	r2, s15
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006606:	4b1f      	ldr	r3, [pc, #124]	@ (8006684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800660a:	0c1b      	lsrs	r3, r3, #16
 800660c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006610:	ee07 3a90 	vmov	s15, r3
 8006614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006618:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800661c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006620:	edd7 6a07 	vldr	s13, [r7, #28]
 8006624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800662c:	ee17 2a90 	vmov	r2, s15
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006634:	4b13      	ldr	r3, [pc, #76]	@ (8006684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006638:	0e1b      	lsrs	r3, r3, #24
 800663a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800663e:	ee07 3a90 	vmov	s15, r3
 8006642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006646:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800664a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800664e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006652:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006656:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800665a:	ee17 2a90 	vmov	r2, s15
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006662:	e008      	b.n	8006676 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	609a      	str	r2, [r3, #8]
}
 8006676:	bf00      	nop
 8006678:	3724      	adds	r7, #36	@ 0x24
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	58024400 	.word	0x58024400
 8006688:	03d09000 	.word	0x03d09000
 800668c:	46000000 	.word	0x46000000
 8006690:	4c742400 	.word	0x4c742400
 8006694:	4a742400 	.word	0x4a742400
 8006698:	4bb71b00 	.word	0x4bb71b00

0800669c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800669c:	b480      	push	{r7}
 800669e:	b089      	sub	sp, #36	@ 0x24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066a4:	4ba1      	ldr	r3, [pc, #644]	@ (800692c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a8:	f003 0303 	and.w	r3, r3, #3
 80066ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80066ae:	4b9f      	ldr	r3, [pc, #636]	@ (800692c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b2:	0d1b      	lsrs	r3, r3, #20
 80066b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80066ba:	4b9c      	ldr	r3, [pc, #624]	@ (800692c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066be:	0a1b      	lsrs	r3, r3, #8
 80066c0:	f003 0301 	and.w	r3, r3, #1
 80066c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80066c6:	4b99      	ldr	r3, [pc, #612]	@ (800692c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ca:	08db      	lsrs	r3, r3, #3
 80066cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	fb02 f303 	mul.w	r3, r2, r3
 80066d6:	ee07 3a90 	vmov	s15, r3
 80066da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 8111 	beq.w	800690c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	f000 8083 	beq.w	80067f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	f200 80a1 	bhi.w	800683c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d056      	beq.n	80067b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006706:	e099      	b.n	800683c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006708:	4b88      	ldr	r3, [pc, #544]	@ (800692c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0320 	and.w	r3, r3, #32
 8006710:	2b00      	cmp	r3, #0
 8006712:	d02d      	beq.n	8006770 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006714:	4b85      	ldr	r3, [pc, #532]	@ (800692c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	08db      	lsrs	r3, r3, #3
 800671a:	f003 0303 	and.w	r3, r3, #3
 800671e:	4a84      	ldr	r2, [pc, #528]	@ (8006930 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006720:	fa22 f303 	lsr.w	r3, r2, r3
 8006724:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	ee07 3a90 	vmov	s15, r3
 800672c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	ee07 3a90 	vmov	s15, r3
 8006736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800673a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800673e:	4b7b      	ldr	r3, [pc, #492]	@ (800692c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006746:	ee07 3a90 	vmov	s15, r3
 800674a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800674e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006752:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800675a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800675e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800676a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800676e:	e087      	b.n	8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	ee07 3a90 	vmov	s15, r3
 8006776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800677a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006938 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800677e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006782:	4b6a      	ldr	r3, [pc, #424]	@ (800692c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800678a:	ee07 3a90 	vmov	s15, r3
 800678e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006792:	ed97 6a03 	vldr	s12, [r7, #12]
 8006796:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800679a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800679e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067b2:	e065      	b.n	8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	ee07 3a90 	vmov	s15, r3
 80067ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800693c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80067c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067c6:	4b59      	ldr	r3, [pc, #356]	@ (800692c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ce:	ee07 3a90 	vmov	s15, r3
 80067d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80067da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067f6:	e043      	b.n	8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	ee07 3a90 	vmov	s15, r3
 80067fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006802:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800680a:	4b48      	ldr	r3, [pc, #288]	@ (800692c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800680c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006812:	ee07 3a90 	vmov	s15, r3
 8006816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800681a:	ed97 6a03 	vldr	s12, [r7, #12]
 800681e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800682a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800682e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006836:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800683a:	e021      	b.n	8006880 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	ee07 3a90 	vmov	s15, r3
 8006842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006846:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800693c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800684a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800684e:	4b37      	ldr	r3, [pc, #220]	@ (800692c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006856:	ee07 3a90 	vmov	s15, r3
 800685a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800685e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006862:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800686a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800686e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800687a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800687e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006880:	4b2a      	ldr	r3, [pc, #168]	@ (800692c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006884:	0a5b      	lsrs	r3, r3, #9
 8006886:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800688a:	ee07 3a90 	vmov	s15, r3
 800688e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006892:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006896:	ee37 7a87 	vadd.f32	s14, s15, s14
 800689a:	edd7 6a07 	vldr	s13, [r7, #28]
 800689e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068a6:	ee17 2a90 	vmov	r2, s15
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80068ae:	4b1f      	ldr	r3, [pc, #124]	@ (800692c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b2:	0c1b      	lsrs	r3, r3, #16
 80068b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068b8:	ee07 3a90 	vmov	s15, r3
 80068bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80068cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068d4:	ee17 2a90 	vmov	r2, s15
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80068dc:	4b13      	ldr	r3, [pc, #76]	@ (800692c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e0:	0e1b      	lsrs	r3, r3, #24
 80068e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068e6:	ee07 3a90 	vmov	s15, r3
 80068ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80068fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006902:	ee17 2a90 	vmov	r2, s15
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800690a:	e008      	b.n	800691e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	609a      	str	r2, [r3, #8]
}
 800691e:	bf00      	nop
 8006920:	3724      	adds	r7, #36	@ 0x24
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	58024400 	.word	0x58024400
 8006930:	03d09000 	.word	0x03d09000
 8006934:	46000000 	.word	0x46000000
 8006938:	4c742400 	.word	0x4c742400
 800693c:	4a742400 	.word	0x4a742400
 8006940:	4bb71b00 	.word	0x4bb71b00

08006944 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800694e:	2300      	movs	r3, #0
 8006950:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006952:	4b53      	ldr	r3, [pc, #332]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 8006954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006956:	f003 0303 	and.w	r3, r3, #3
 800695a:	2b03      	cmp	r3, #3
 800695c:	d101      	bne.n	8006962 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e099      	b.n	8006a96 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006962:	4b4f      	ldr	r3, [pc, #316]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a4e      	ldr	r2, [pc, #312]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 8006968:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800696c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800696e:	f7fc f879 	bl	8002a64 <HAL_GetTick>
 8006972:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006974:	e008      	b.n	8006988 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006976:	f7fc f875 	bl	8002a64 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d901      	bls.n	8006988 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e086      	b.n	8006a96 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006988:	4b45      	ldr	r3, [pc, #276]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1f0      	bne.n	8006976 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006994:	4b42      	ldr	r3, [pc, #264]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 8006996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006998:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	031b      	lsls	r3, r3, #12
 80069a2:	493f      	ldr	r1, [pc, #252]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	3b01      	subs	r3, #1
 80069b8:	025b      	lsls	r3, r3, #9
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	431a      	orrs	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	3b01      	subs	r3, #1
 80069c4:	041b      	lsls	r3, r3, #16
 80069c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80069ca:	431a      	orrs	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	061b      	lsls	r3, r3, #24
 80069d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80069d8:	4931      	ldr	r1, [pc, #196]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80069de:	4b30      	ldr	r3, [pc, #192]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 80069e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	492d      	ldr	r1, [pc, #180]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80069f0:	4b2b      	ldr	r3, [pc, #172]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 80069f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f4:	f023 0220 	bic.w	r2, r3, #32
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	4928      	ldr	r1, [pc, #160]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006a02:	4b27      	ldr	r3, [pc, #156]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 8006a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a06:	4a26      	ldr	r2, [pc, #152]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 8006a08:	f023 0310 	bic.w	r3, r3, #16
 8006a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006a0e:	4b24      	ldr	r3, [pc, #144]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 8006a10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a12:	4b24      	ldr	r3, [pc, #144]	@ (8006aa4 <RCCEx_PLL2_Config+0x160>)
 8006a14:	4013      	ands	r3, r2
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	69d2      	ldr	r2, [r2, #28]
 8006a1a:	00d2      	lsls	r2, r2, #3
 8006a1c:	4920      	ldr	r1, [pc, #128]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006a22:	4b1f      	ldr	r3, [pc, #124]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 8006a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a26:	4a1e      	ldr	r2, [pc, #120]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 8006a28:	f043 0310 	orr.w	r3, r3, #16
 8006a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d106      	bne.n	8006a42 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006a34:	4b1a      	ldr	r3, [pc, #104]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 8006a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a38:	4a19      	ldr	r2, [pc, #100]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 8006a3a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a40:	e00f      	b.n	8006a62 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d106      	bne.n	8006a56 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006a48:	4b15      	ldr	r3, [pc, #84]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 8006a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a4c:	4a14      	ldr	r2, [pc, #80]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 8006a4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a54:	e005      	b.n	8006a62 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006a56:	4b12      	ldr	r3, [pc, #72]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 8006a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5a:	4a11      	ldr	r2, [pc, #68]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 8006a5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a60:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006a62:	4b0f      	ldr	r3, [pc, #60]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a0e      	ldr	r2, [pc, #56]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 8006a68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a6e:	f7fb fff9 	bl	8002a64 <HAL_GetTick>
 8006a72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a74:	e008      	b.n	8006a88 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a76:	f7fb fff5 	bl	8002a64 <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d901      	bls.n	8006a88 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e006      	b.n	8006a96 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a88:	4b05      	ldr	r3, [pc, #20]	@ (8006aa0 <RCCEx_PLL2_Config+0x15c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d0f0      	beq.n	8006a76 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	58024400 	.word	0x58024400
 8006aa4:	ffff0007 	.word	0xffff0007

08006aa8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ab6:	4b53      	ldr	r3, [pc, #332]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aba:	f003 0303 	and.w	r3, r3, #3
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	d101      	bne.n	8006ac6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e099      	b.n	8006bfa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006ac6:	4b4f      	ldr	r3, [pc, #316]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a4e      	ldr	r2, [pc, #312]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006acc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ad0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ad2:	f7fb ffc7 	bl	8002a64 <HAL_GetTick>
 8006ad6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ad8:	e008      	b.n	8006aec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006ada:	f7fb ffc3 	bl	8002a64 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d901      	bls.n	8006aec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e086      	b.n	8006bfa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006aec:	4b45      	ldr	r3, [pc, #276]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1f0      	bne.n	8006ada <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006af8:	4b42      	ldr	r3, [pc, #264]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	051b      	lsls	r3, r3, #20
 8006b06:	493f      	ldr	r1, [pc, #252]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	3b01      	subs	r3, #1
 8006b12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	025b      	lsls	r3, r3, #9
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	431a      	orrs	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	041b      	lsls	r3, r3, #16
 8006b2a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	3b01      	subs	r3, #1
 8006b36:	061b      	lsls	r3, r3, #24
 8006b38:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006b3c:	4931      	ldr	r1, [pc, #196]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006b42:	4b30      	ldr	r3, [pc, #192]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b46:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	492d      	ldr	r1, [pc, #180]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006b54:	4b2b      	ldr	r3, [pc, #172]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b58:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	4928      	ldr	r1, [pc, #160]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006b66:	4b27      	ldr	r3, [pc, #156]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6a:	4a26      	ldr	r2, [pc, #152]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006b6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006b72:	4b24      	ldr	r3, [pc, #144]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006b74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b76:	4b24      	ldr	r3, [pc, #144]	@ (8006c08 <RCCEx_PLL3_Config+0x160>)
 8006b78:	4013      	ands	r3, r2
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	69d2      	ldr	r2, [r2, #28]
 8006b7e:	00d2      	lsls	r2, r2, #3
 8006b80:	4920      	ldr	r1, [pc, #128]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006b86:	4b1f      	ldr	r3, [pc, #124]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d106      	bne.n	8006ba6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006b98:	4b1a      	ldr	r3, [pc, #104]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9c:	4a19      	ldr	r2, [pc, #100]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006b9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006ba2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ba4:	e00f      	b.n	8006bc6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d106      	bne.n	8006bba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006bac:	4b15      	ldr	r3, [pc, #84]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb0:	4a14      	ldr	r2, [pc, #80]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006bb2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006bb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006bb8:	e005      	b.n	8006bc6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006bba:	4b12      	ldr	r3, [pc, #72]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bbe:	4a11      	ldr	r2, [pc, #68]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006bc0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a0e      	ldr	r2, [pc, #56]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006bcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bd2:	f7fb ff47 	bl	8002a64 <HAL_GetTick>
 8006bd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006bd8:	e008      	b.n	8006bec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006bda:	f7fb ff43 	bl	8002a64 <HAL_GetTick>
 8006bde:	4602      	mov	r2, r0
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d901      	bls.n	8006bec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e006      	b.n	8006bfa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006bec:	4b05      	ldr	r3, [pc, #20]	@ (8006c04 <RCCEx_PLL3_Config+0x15c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d0f0      	beq.n	8006bda <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	58024400 	.word	0x58024400
 8006c08:	ffff0007 	.word	0xffff0007

08006c0c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e10f      	b.n	8006e3e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a87      	ldr	r2, [pc, #540]	@ (8006e48 <HAL_SPI_Init+0x23c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d00f      	beq.n	8006c4e <HAL_SPI_Init+0x42>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a86      	ldr	r2, [pc, #536]	@ (8006e4c <HAL_SPI_Init+0x240>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d00a      	beq.n	8006c4e <HAL_SPI_Init+0x42>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a84      	ldr	r2, [pc, #528]	@ (8006e50 <HAL_SPI_Init+0x244>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d005      	beq.n	8006c4e <HAL_SPI_Init+0x42>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	2b0f      	cmp	r3, #15
 8006c48:	d901      	bls.n	8006c4e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e0f7      	b.n	8006e3e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f900 	bl	8006e54 <SPI_GetPacketSize>
 8006c54:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a7b      	ldr	r2, [pc, #492]	@ (8006e48 <HAL_SPI_Init+0x23c>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d00c      	beq.n	8006c7a <HAL_SPI_Init+0x6e>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a79      	ldr	r2, [pc, #484]	@ (8006e4c <HAL_SPI_Init+0x240>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d007      	beq.n	8006c7a <HAL_SPI_Init+0x6e>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a78      	ldr	r2, [pc, #480]	@ (8006e50 <HAL_SPI_Init+0x244>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d002      	beq.n	8006c7a <HAL_SPI_Init+0x6e>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2b08      	cmp	r3, #8
 8006c78:	d811      	bhi.n	8006c9e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006c7e:	4a72      	ldr	r2, [pc, #456]	@ (8006e48 <HAL_SPI_Init+0x23c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d009      	beq.n	8006c98 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a70      	ldr	r2, [pc, #448]	@ (8006e4c <HAL_SPI_Init+0x240>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d004      	beq.n	8006c98 <HAL_SPI_Init+0x8c>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a6f      	ldr	r2, [pc, #444]	@ (8006e50 <HAL_SPI_Init+0x244>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d104      	bne.n	8006ca2 <HAL_SPI_Init+0x96>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b10      	cmp	r3, #16
 8006c9c:	d901      	bls.n	8006ca2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e0cd      	b.n	8006e3e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d106      	bne.n	8006cbc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7fb f8da 	bl	8001e70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0201 	bic.w	r2, r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006cde:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ce8:	d119      	bne.n	8006d1e <HAL_SPI_Init+0x112>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cf2:	d103      	bne.n	8006cfc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d008      	beq.n	8006d0e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10c      	bne.n	8006d1e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006d08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d0c:	d107      	bne.n	8006d1e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006d1c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00f      	beq.n	8006d4a <HAL_SPI_Init+0x13e>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	2b06      	cmp	r3, #6
 8006d30:	d90b      	bls.n	8006d4a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	430a      	orrs	r2, r1
 8006d46:	601a      	str	r2, [r3, #0]
 8006d48:	e007      	b.n	8006d5a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006d58:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	69da      	ldr	r2, [r3, #28]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d62:	431a      	orrs	r2, r3
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	431a      	orrs	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d6c:	ea42 0103 	orr.w	r1, r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68da      	ldr	r2, [r3, #12]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d84:	431a      	orrs	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8a:	431a      	orrs	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	431a      	orrs	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	431a      	orrs	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	431a      	orrs	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	431a      	orrs	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dae:	431a      	orrs	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	431a      	orrs	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dba:	ea42 0103 	orr.w	r1, r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d113      	bne.n	8006dfa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006de4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006df8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f022 0201 	bic.w	r2, r2, #1
 8006e08:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00a      	beq.n	8006e2c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	40013000 	.word	0x40013000
 8006e4c:	40003800 	.word	0x40003800
 8006e50:	40003c00 	.word	0x40003c00

08006e54 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e60:	095b      	lsrs	r3, r3, #5
 8006e62:	3301      	adds	r3, #1
 8006e64:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	3307      	adds	r3, #7
 8006e72:	08db      	lsrs	r3, r3, #3
 8006e74:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	fb02 f303 	mul.w	r3, r2, r3
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3714      	adds	r7, #20
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr

08006e8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b082      	sub	sp, #8
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d101      	bne.n	8006e9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e049      	b.n	8006f30 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d106      	bne.n	8006eb6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f7fb f909 	bl	80020c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2202      	movs	r2, #2
 8006eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	4610      	mov	r0, r2
 8006eca:	f000 fd4f 	bl	800796c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d001      	beq.n	8006f50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e054      	b.n	8006ffa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68da      	ldr	r2, [r3, #12]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f042 0201 	orr.w	r2, r2, #1
 8006f66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a26      	ldr	r2, [pc, #152]	@ (8007008 <HAL_TIM_Base_Start_IT+0xd0>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d022      	beq.n	8006fb8 <HAL_TIM_Base_Start_IT+0x80>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f7a:	d01d      	beq.n	8006fb8 <HAL_TIM_Base_Start_IT+0x80>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a22      	ldr	r2, [pc, #136]	@ (800700c <HAL_TIM_Base_Start_IT+0xd4>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d018      	beq.n	8006fb8 <HAL_TIM_Base_Start_IT+0x80>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a21      	ldr	r2, [pc, #132]	@ (8007010 <HAL_TIM_Base_Start_IT+0xd8>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d013      	beq.n	8006fb8 <HAL_TIM_Base_Start_IT+0x80>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a1f      	ldr	r2, [pc, #124]	@ (8007014 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d00e      	beq.n	8006fb8 <HAL_TIM_Base_Start_IT+0x80>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8007018 <HAL_TIM_Base_Start_IT+0xe0>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d009      	beq.n	8006fb8 <HAL_TIM_Base_Start_IT+0x80>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800701c <HAL_TIM_Base_Start_IT+0xe4>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d004      	beq.n	8006fb8 <HAL_TIM_Base_Start_IT+0x80>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a1b      	ldr	r2, [pc, #108]	@ (8007020 <HAL_TIM_Base_Start_IT+0xe8>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d115      	bne.n	8006fe4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	4b19      	ldr	r3, [pc, #100]	@ (8007024 <HAL_TIM_Base_Start_IT+0xec>)
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2b06      	cmp	r3, #6
 8006fc8:	d015      	beq.n	8006ff6 <HAL_TIM_Base_Start_IT+0xbe>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fd0:	d011      	beq.n	8006ff6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f042 0201 	orr.w	r2, r2, #1
 8006fe0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe2:	e008      	b.n	8006ff6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f042 0201 	orr.w	r2, r2, #1
 8006ff2:	601a      	str	r2, [r3, #0]
 8006ff4:	e000      	b.n	8006ff8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ff6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	40010000 	.word	0x40010000
 800700c:	40000400 	.word	0x40000400
 8007010:	40000800 	.word	0x40000800
 8007014:	40000c00 	.word	0x40000c00
 8007018:	40010400 	.word	0x40010400
 800701c:	40001800 	.word	0x40001800
 8007020:	40014000 	.word	0x40014000
 8007024:	00010007 	.word	0x00010007

08007028 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e049      	b.n	80070ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d106      	bne.n	8007054 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7fb f8a8 	bl	80021a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2202      	movs	r2, #2
 8007058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3304      	adds	r3, #4
 8007064:	4619      	mov	r1, r3
 8007066:	4610      	mov	r0, r2
 8007068:	f000 fc80 	bl	800796c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
	...

080070d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d109      	bne.n	80070fc <HAL_TIM_PWM_Start+0x24>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	bf14      	ite	ne
 80070f4:	2301      	movne	r3, #1
 80070f6:	2300      	moveq	r3, #0
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	e03c      	b.n	8007176 <HAL_TIM_PWM_Start+0x9e>
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	2b04      	cmp	r3, #4
 8007100:	d109      	bne.n	8007116 <HAL_TIM_PWM_Start+0x3e>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b01      	cmp	r3, #1
 800710c:	bf14      	ite	ne
 800710e:	2301      	movne	r3, #1
 8007110:	2300      	moveq	r3, #0
 8007112:	b2db      	uxtb	r3, r3
 8007114:	e02f      	b.n	8007176 <HAL_TIM_PWM_Start+0x9e>
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b08      	cmp	r3, #8
 800711a:	d109      	bne.n	8007130 <HAL_TIM_PWM_Start+0x58>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b01      	cmp	r3, #1
 8007126:	bf14      	ite	ne
 8007128:	2301      	movne	r3, #1
 800712a:	2300      	moveq	r3, #0
 800712c:	b2db      	uxtb	r3, r3
 800712e:	e022      	b.n	8007176 <HAL_TIM_PWM_Start+0x9e>
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	2b0c      	cmp	r3, #12
 8007134:	d109      	bne.n	800714a <HAL_TIM_PWM_Start+0x72>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b01      	cmp	r3, #1
 8007140:	bf14      	ite	ne
 8007142:	2301      	movne	r3, #1
 8007144:	2300      	moveq	r3, #0
 8007146:	b2db      	uxtb	r3, r3
 8007148:	e015      	b.n	8007176 <HAL_TIM_PWM_Start+0x9e>
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2b10      	cmp	r3, #16
 800714e:	d109      	bne.n	8007164 <HAL_TIM_PWM_Start+0x8c>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b01      	cmp	r3, #1
 800715a:	bf14      	ite	ne
 800715c:	2301      	movne	r3, #1
 800715e:	2300      	moveq	r3, #0
 8007160:	b2db      	uxtb	r3, r3
 8007162:	e008      	b.n	8007176 <HAL_TIM_PWM_Start+0x9e>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b01      	cmp	r3, #1
 800716e:	bf14      	ite	ne
 8007170:	2301      	movne	r3, #1
 8007172:	2300      	moveq	r3, #0
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e0a1      	b.n	80072c2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d104      	bne.n	800718e <HAL_TIM_PWM_Start+0xb6>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2202      	movs	r2, #2
 8007188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800718c:	e023      	b.n	80071d6 <HAL_TIM_PWM_Start+0xfe>
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b04      	cmp	r3, #4
 8007192:	d104      	bne.n	800719e <HAL_TIM_PWM_Start+0xc6>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2202      	movs	r2, #2
 8007198:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800719c:	e01b      	b.n	80071d6 <HAL_TIM_PWM_Start+0xfe>
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2b08      	cmp	r3, #8
 80071a2:	d104      	bne.n	80071ae <HAL_TIM_PWM_Start+0xd6>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2202      	movs	r2, #2
 80071a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071ac:	e013      	b.n	80071d6 <HAL_TIM_PWM_Start+0xfe>
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	2b0c      	cmp	r3, #12
 80071b2:	d104      	bne.n	80071be <HAL_TIM_PWM_Start+0xe6>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80071bc:	e00b      	b.n	80071d6 <HAL_TIM_PWM_Start+0xfe>
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b10      	cmp	r3, #16
 80071c2:	d104      	bne.n	80071ce <HAL_TIM_PWM_Start+0xf6>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2202      	movs	r2, #2
 80071c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071cc:	e003      	b.n	80071d6 <HAL_TIM_PWM_Start+0xfe>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2202      	movs	r2, #2
 80071d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2201      	movs	r2, #1
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 ffde 	bl	80081a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a38      	ldr	r2, [pc, #224]	@ (80072cc <HAL_TIM_PWM_Start+0x1f4>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d013      	beq.n	8007216 <HAL_TIM_PWM_Start+0x13e>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a37      	ldr	r2, [pc, #220]	@ (80072d0 <HAL_TIM_PWM_Start+0x1f8>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d00e      	beq.n	8007216 <HAL_TIM_PWM_Start+0x13e>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a35      	ldr	r2, [pc, #212]	@ (80072d4 <HAL_TIM_PWM_Start+0x1fc>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d009      	beq.n	8007216 <HAL_TIM_PWM_Start+0x13e>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a34      	ldr	r2, [pc, #208]	@ (80072d8 <HAL_TIM_PWM_Start+0x200>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d004      	beq.n	8007216 <HAL_TIM_PWM_Start+0x13e>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a32      	ldr	r2, [pc, #200]	@ (80072dc <HAL_TIM_PWM_Start+0x204>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d101      	bne.n	800721a <HAL_TIM_PWM_Start+0x142>
 8007216:	2301      	movs	r3, #1
 8007218:	e000      	b.n	800721c <HAL_TIM_PWM_Start+0x144>
 800721a:	2300      	movs	r3, #0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d007      	beq.n	8007230 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800722e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a25      	ldr	r2, [pc, #148]	@ (80072cc <HAL_TIM_PWM_Start+0x1f4>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d022      	beq.n	8007280 <HAL_TIM_PWM_Start+0x1a8>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007242:	d01d      	beq.n	8007280 <HAL_TIM_PWM_Start+0x1a8>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a25      	ldr	r2, [pc, #148]	@ (80072e0 <HAL_TIM_PWM_Start+0x208>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d018      	beq.n	8007280 <HAL_TIM_PWM_Start+0x1a8>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a24      	ldr	r2, [pc, #144]	@ (80072e4 <HAL_TIM_PWM_Start+0x20c>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d013      	beq.n	8007280 <HAL_TIM_PWM_Start+0x1a8>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a22      	ldr	r2, [pc, #136]	@ (80072e8 <HAL_TIM_PWM_Start+0x210>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d00e      	beq.n	8007280 <HAL_TIM_PWM_Start+0x1a8>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a1a      	ldr	r2, [pc, #104]	@ (80072d0 <HAL_TIM_PWM_Start+0x1f8>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d009      	beq.n	8007280 <HAL_TIM_PWM_Start+0x1a8>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a1e      	ldr	r2, [pc, #120]	@ (80072ec <HAL_TIM_PWM_Start+0x214>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d004      	beq.n	8007280 <HAL_TIM_PWM_Start+0x1a8>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a16      	ldr	r2, [pc, #88]	@ (80072d4 <HAL_TIM_PWM_Start+0x1fc>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d115      	bne.n	80072ac <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689a      	ldr	r2, [r3, #8]
 8007286:	4b1a      	ldr	r3, [pc, #104]	@ (80072f0 <HAL_TIM_PWM_Start+0x218>)
 8007288:	4013      	ands	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b06      	cmp	r3, #6
 8007290:	d015      	beq.n	80072be <HAL_TIM_PWM_Start+0x1e6>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007298:	d011      	beq.n	80072be <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f042 0201 	orr.w	r2, r2, #1
 80072a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072aa:	e008      	b.n	80072be <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0201 	orr.w	r2, r2, #1
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	e000      	b.n	80072c0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	40010000 	.word	0x40010000
 80072d0:	40010400 	.word	0x40010400
 80072d4:	40014000 	.word	0x40014000
 80072d8:	40014400 	.word	0x40014400
 80072dc:	40014800 	.word	0x40014800
 80072e0:	40000400 	.word	0x40000400
 80072e4:	40000800 	.word	0x40000800
 80072e8:	40000c00 	.word	0x40000c00
 80072ec:	40001800 	.word	0x40001800
 80072f0:	00010007 	.word	0x00010007

080072f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f003 0302 	and.w	r3, r3, #2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d020      	beq.n	8007358 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	2b00      	cmp	r3, #0
 800731e:	d01b      	beq.n	8007358 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f06f 0202 	mvn.w	r2, #2
 8007328:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	f003 0303 	and.w	r3, r3, #3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d003      	beq.n	8007346 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 faf6 	bl	8007930 <HAL_TIM_IC_CaptureCallback>
 8007344:	e005      	b.n	8007352 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fae8 	bl	800791c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 faf9 	bl	8007944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	f003 0304 	and.w	r3, r3, #4
 800735e:	2b00      	cmp	r3, #0
 8007360:	d020      	beq.n	80073a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f003 0304 	and.w	r3, r3, #4
 8007368:	2b00      	cmp	r3, #0
 800736a:	d01b      	beq.n	80073a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f06f 0204 	mvn.w	r2, #4
 8007374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2202      	movs	r2, #2
 800737a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fad0 	bl	8007930 <HAL_TIM_IC_CaptureCallback>
 8007390:	e005      	b.n	800739e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fac2 	bl	800791c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fad3 	bl	8007944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	f003 0308 	and.w	r3, r3, #8
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d020      	beq.n	80073f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f003 0308 	and.w	r3, r3, #8
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d01b      	beq.n	80073f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f06f 0208 	mvn.w	r2, #8
 80073c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2204      	movs	r2, #4
 80073c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	f003 0303 	and.w	r3, r3, #3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 faaa 	bl	8007930 <HAL_TIM_IC_CaptureCallback>
 80073dc:	e005      	b.n	80073ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fa9c 	bl	800791c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 faad 	bl	8007944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f003 0310 	and.w	r3, r3, #16
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d020      	beq.n	800743c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f003 0310 	and.w	r3, r3, #16
 8007400:	2b00      	cmp	r3, #0
 8007402:	d01b      	beq.n	800743c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f06f 0210 	mvn.w	r2, #16
 800740c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2208      	movs	r2, #8
 8007412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fa84 	bl	8007930 <HAL_TIM_IC_CaptureCallback>
 8007428:	e005      	b.n	8007436 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 fa76 	bl	800791c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fa87 	bl	8007944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	f003 0301 	and.w	r3, r3, #1
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00c      	beq.n	8007460 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d007      	beq.n	8007460 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f06f 0201 	mvn.w	r2, #1
 8007458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7fa fa74 	bl	8001948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007466:	2b00      	cmp	r3, #0
 8007468:	d104      	bne.n	8007474 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00c      	beq.n	800748e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800747a:	2b00      	cmp	r3, #0
 800747c:	d007      	beq.n	800748e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 ffc5 	bl	8008418 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00c      	beq.n	80074b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d007      	beq.n	80074b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80074aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 ffbd 	bl	800842c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00c      	beq.n	80074d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d007      	beq.n	80074d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80074ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fa41 	bl	8007958 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	f003 0320 	and.w	r3, r3, #32
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00c      	beq.n	80074fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f003 0320 	and.w	r3, r3, #32
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d007      	beq.n	80074fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f06f 0220 	mvn.w	r2, #32
 80074f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 ff85 	bl	8008404 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074fa:	bf00      	nop
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800751a:	2b01      	cmp	r3, #1
 800751c:	d101      	bne.n	8007522 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800751e:	2302      	movs	r3, #2
 8007520:	e0ff      	b.n	8007722 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b14      	cmp	r3, #20
 800752e:	f200 80f0 	bhi.w	8007712 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007532:	a201      	add	r2, pc, #4	@ (adr r2, 8007538 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007538:	0800758d 	.word	0x0800758d
 800753c:	08007713 	.word	0x08007713
 8007540:	08007713 	.word	0x08007713
 8007544:	08007713 	.word	0x08007713
 8007548:	080075cd 	.word	0x080075cd
 800754c:	08007713 	.word	0x08007713
 8007550:	08007713 	.word	0x08007713
 8007554:	08007713 	.word	0x08007713
 8007558:	0800760f 	.word	0x0800760f
 800755c:	08007713 	.word	0x08007713
 8007560:	08007713 	.word	0x08007713
 8007564:	08007713 	.word	0x08007713
 8007568:	0800764f 	.word	0x0800764f
 800756c:	08007713 	.word	0x08007713
 8007570:	08007713 	.word	0x08007713
 8007574:	08007713 	.word	0x08007713
 8007578:	08007691 	.word	0x08007691
 800757c:	08007713 	.word	0x08007713
 8007580:	08007713 	.word	0x08007713
 8007584:	08007713 	.word	0x08007713
 8007588:	080076d1 	.word	0x080076d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68b9      	ldr	r1, [r7, #8]
 8007592:	4618      	mov	r0, r3
 8007594:	f000 fa90 	bl	8007ab8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	699a      	ldr	r2, [r3, #24]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f042 0208 	orr.w	r2, r2, #8
 80075a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	699a      	ldr	r2, [r3, #24]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f022 0204 	bic.w	r2, r2, #4
 80075b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	6999      	ldr	r1, [r3, #24]
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	691a      	ldr	r2, [r3, #16]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	619a      	str	r2, [r3, #24]
      break;
 80075ca:	e0a5      	b.n	8007718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68b9      	ldr	r1, [r7, #8]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 fb00 	bl	8007bd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	699a      	ldr	r2, [r3, #24]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	699a      	ldr	r2, [r3, #24]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6999      	ldr	r1, [r3, #24]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	021a      	lsls	r2, r3, #8
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	430a      	orrs	r2, r1
 800760a:	619a      	str	r2, [r3, #24]
      break;
 800760c:	e084      	b.n	8007718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68b9      	ldr	r1, [r7, #8]
 8007614:	4618      	mov	r0, r3
 8007616:	f000 fb69 	bl	8007cec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	69da      	ldr	r2, [r3, #28]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f042 0208 	orr.w	r2, r2, #8
 8007628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	69da      	ldr	r2, [r3, #28]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f022 0204 	bic.w	r2, r2, #4
 8007638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	69d9      	ldr	r1, [r3, #28]
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	691a      	ldr	r2, [r3, #16]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	430a      	orrs	r2, r1
 800764a:	61da      	str	r2, [r3, #28]
      break;
 800764c:	e064      	b.n	8007718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68b9      	ldr	r1, [r7, #8]
 8007654:	4618      	mov	r0, r3
 8007656:	f000 fbd1 	bl	8007dfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	69da      	ldr	r2, [r3, #28]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	69da      	ldr	r2, [r3, #28]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	69d9      	ldr	r1, [r3, #28]
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	021a      	lsls	r2, r3, #8
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	430a      	orrs	r2, r1
 800768c:	61da      	str	r2, [r3, #28]
      break;
 800768e:	e043      	b.n	8007718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68b9      	ldr	r1, [r7, #8]
 8007696:	4618      	mov	r0, r3
 8007698:	f000 fc1a 	bl	8007ed0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f042 0208 	orr.w	r2, r2, #8
 80076aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f022 0204 	bic.w	r2, r2, #4
 80076ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	691a      	ldr	r2, [r3, #16]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	430a      	orrs	r2, r1
 80076cc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80076ce:	e023      	b.n	8007718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68b9      	ldr	r1, [r7, #8]
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 fc5e 	bl	8007f98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	021a      	lsls	r2, r3, #8
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	430a      	orrs	r2, r1
 800770e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007710:	e002      	b.n	8007718 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	75fb      	strb	r3, [r7, #23]
      break;
 8007716:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007720:	7dfb      	ldrb	r3, [r7, #23]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3718      	adds	r7, #24
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop

0800772c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007740:	2b01      	cmp	r3, #1
 8007742:	d101      	bne.n	8007748 <HAL_TIM_ConfigClockSource+0x1c>
 8007744:	2302      	movs	r3, #2
 8007746:	e0dc      	b.n	8007902 <HAL_TIM_ConfigClockSource+0x1d6>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2202      	movs	r2, #2
 8007754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	4b6a      	ldr	r3, [pc, #424]	@ (800790c <HAL_TIM_ConfigClockSource+0x1e0>)
 8007764:	4013      	ands	r3, r2
 8007766:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800776e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a64      	ldr	r2, [pc, #400]	@ (8007910 <HAL_TIM_ConfigClockSource+0x1e4>)
 800777e:	4293      	cmp	r3, r2
 8007780:	f000 80a9 	beq.w	80078d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007784:	4a62      	ldr	r2, [pc, #392]	@ (8007910 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007786:	4293      	cmp	r3, r2
 8007788:	f200 80ae 	bhi.w	80078e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800778c:	4a61      	ldr	r2, [pc, #388]	@ (8007914 <HAL_TIM_ConfigClockSource+0x1e8>)
 800778e:	4293      	cmp	r3, r2
 8007790:	f000 80a1 	beq.w	80078d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007794:	4a5f      	ldr	r2, [pc, #380]	@ (8007914 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007796:	4293      	cmp	r3, r2
 8007798:	f200 80a6 	bhi.w	80078e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800779c:	4a5e      	ldr	r2, [pc, #376]	@ (8007918 <HAL_TIM_ConfigClockSource+0x1ec>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	f000 8099 	beq.w	80078d6 <HAL_TIM_ConfigClockSource+0x1aa>
 80077a4:	4a5c      	ldr	r2, [pc, #368]	@ (8007918 <HAL_TIM_ConfigClockSource+0x1ec>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	f200 809e 	bhi.w	80078e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80077b0:	f000 8091 	beq.w	80078d6 <HAL_TIM_ConfigClockSource+0x1aa>
 80077b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80077b8:	f200 8096 	bhi.w	80078e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077c0:	f000 8089 	beq.w	80078d6 <HAL_TIM_ConfigClockSource+0x1aa>
 80077c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077c8:	f200 808e 	bhi.w	80078e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077d0:	d03e      	beq.n	8007850 <HAL_TIM_ConfigClockSource+0x124>
 80077d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077d6:	f200 8087 	bhi.w	80078e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077de:	f000 8086 	beq.w	80078ee <HAL_TIM_ConfigClockSource+0x1c2>
 80077e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077e6:	d87f      	bhi.n	80078e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077e8:	2b70      	cmp	r3, #112	@ 0x70
 80077ea:	d01a      	beq.n	8007822 <HAL_TIM_ConfigClockSource+0xf6>
 80077ec:	2b70      	cmp	r3, #112	@ 0x70
 80077ee:	d87b      	bhi.n	80078e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077f0:	2b60      	cmp	r3, #96	@ 0x60
 80077f2:	d050      	beq.n	8007896 <HAL_TIM_ConfigClockSource+0x16a>
 80077f4:	2b60      	cmp	r3, #96	@ 0x60
 80077f6:	d877      	bhi.n	80078e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80077f8:	2b50      	cmp	r3, #80	@ 0x50
 80077fa:	d03c      	beq.n	8007876 <HAL_TIM_ConfigClockSource+0x14a>
 80077fc:	2b50      	cmp	r3, #80	@ 0x50
 80077fe:	d873      	bhi.n	80078e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007800:	2b40      	cmp	r3, #64	@ 0x40
 8007802:	d058      	beq.n	80078b6 <HAL_TIM_ConfigClockSource+0x18a>
 8007804:	2b40      	cmp	r3, #64	@ 0x40
 8007806:	d86f      	bhi.n	80078e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007808:	2b30      	cmp	r3, #48	@ 0x30
 800780a:	d064      	beq.n	80078d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800780c:	2b30      	cmp	r3, #48	@ 0x30
 800780e:	d86b      	bhi.n	80078e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007810:	2b20      	cmp	r3, #32
 8007812:	d060      	beq.n	80078d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007814:	2b20      	cmp	r3, #32
 8007816:	d867      	bhi.n	80078e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007818:	2b00      	cmp	r3, #0
 800781a:	d05c      	beq.n	80078d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800781c:	2b10      	cmp	r3, #16
 800781e:	d05a      	beq.n	80078d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007820:	e062      	b.n	80078e8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007832:	f000 fc95 	bl	8008160 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007844:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	609a      	str	r2, [r3, #8]
      break;
 800784e:	e04f      	b.n	80078f0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007860:	f000 fc7e 	bl	8008160 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689a      	ldr	r2, [r3, #8]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007872:	609a      	str	r2, [r3, #8]
      break;
 8007874:	e03c      	b.n	80078f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007882:	461a      	mov	r2, r3
 8007884:	f000 fbee 	bl	8008064 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2150      	movs	r1, #80	@ 0x50
 800788e:	4618      	mov	r0, r3
 8007890:	f000 fc48 	bl	8008124 <TIM_ITRx_SetConfig>
      break;
 8007894:	e02c      	b.n	80078f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078a2:	461a      	mov	r2, r3
 80078a4:	f000 fc0d 	bl	80080c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2160      	movs	r1, #96	@ 0x60
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 fc38 	bl	8008124 <TIM_ITRx_SetConfig>
      break;
 80078b4:	e01c      	b.n	80078f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078c2:	461a      	mov	r2, r3
 80078c4:	f000 fbce 	bl	8008064 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2140      	movs	r1, #64	@ 0x40
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 fc28 	bl	8008124 <TIM_ITRx_SetConfig>
      break;
 80078d4:	e00c      	b.n	80078f0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4619      	mov	r1, r3
 80078e0:	4610      	mov	r0, r2
 80078e2:	f000 fc1f 	bl	8008124 <TIM_ITRx_SetConfig>
      break;
 80078e6:	e003      	b.n	80078f0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	73fb      	strb	r3, [r7, #15]
      break;
 80078ec:	e000      	b.n	80078f0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80078ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007900:	7bfb      	ldrb	r3, [r7, #15]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	ffceff88 	.word	0xffceff88
 8007910:	00100040 	.word	0x00100040
 8007914:	00100030 	.word	0x00100030
 8007918:	00100020 	.word	0x00100020

0800791c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a46      	ldr	r2, [pc, #280]	@ (8007a98 <TIM_Base_SetConfig+0x12c>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d013      	beq.n	80079ac <TIM_Base_SetConfig+0x40>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800798a:	d00f      	beq.n	80079ac <TIM_Base_SetConfig+0x40>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a43      	ldr	r2, [pc, #268]	@ (8007a9c <TIM_Base_SetConfig+0x130>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d00b      	beq.n	80079ac <TIM_Base_SetConfig+0x40>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a42      	ldr	r2, [pc, #264]	@ (8007aa0 <TIM_Base_SetConfig+0x134>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d007      	beq.n	80079ac <TIM_Base_SetConfig+0x40>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a41      	ldr	r2, [pc, #260]	@ (8007aa4 <TIM_Base_SetConfig+0x138>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d003      	beq.n	80079ac <TIM_Base_SetConfig+0x40>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a40      	ldr	r2, [pc, #256]	@ (8007aa8 <TIM_Base_SetConfig+0x13c>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d108      	bne.n	80079be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a35      	ldr	r2, [pc, #212]	@ (8007a98 <TIM_Base_SetConfig+0x12c>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d01f      	beq.n	8007a06 <TIM_Base_SetConfig+0x9a>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079cc:	d01b      	beq.n	8007a06 <TIM_Base_SetConfig+0x9a>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a32      	ldr	r2, [pc, #200]	@ (8007a9c <TIM_Base_SetConfig+0x130>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d017      	beq.n	8007a06 <TIM_Base_SetConfig+0x9a>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a31      	ldr	r2, [pc, #196]	@ (8007aa0 <TIM_Base_SetConfig+0x134>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d013      	beq.n	8007a06 <TIM_Base_SetConfig+0x9a>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a30      	ldr	r2, [pc, #192]	@ (8007aa4 <TIM_Base_SetConfig+0x138>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d00f      	beq.n	8007a06 <TIM_Base_SetConfig+0x9a>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a2f      	ldr	r2, [pc, #188]	@ (8007aa8 <TIM_Base_SetConfig+0x13c>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d00b      	beq.n	8007a06 <TIM_Base_SetConfig+0x9a>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a2e      	ldr	r2, [pc, #184]	@ (8007aac <TIM_Base_SetConfig+0x140>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d007      	beq.n	8007a06 <TIM_Base_SetConfig+0x9a>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a2d      	ldr	r2, [pc, #180]	@ (8007ab0 <TIM_Base_SetConfig+0x144>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d003      	beq.n	8007a06 <TIM_Base_SetConfig+0x9a>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a2c      	ldr	r2, [pc, #176]	@ (8007ab4 <TIM_Base_SetConfig+0x148>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d108      	bne.n	8007a18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	689a      	ldr	r2, [r3, #8]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a16      	ldr	r2, [pc, #88]	@ (8007a98 <TIM_Base_SetConfig+0x12c>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d00f      	beq.n	8007a64 <TIM_Base_SetConfig+0xf8>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a18      	ldr	r2, [pc, #96]	@ (8007aa8 <TIM_Base_SetConfig+0x13c>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d00b      	beq.n	8007a64 <TIM_Base_SetConfig+0xf8>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a17      	ldr	r2, [pc, #92]	@ (8007aac <TIM_Base_SetConfig+0x140>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d007      	beq.n	8007a64 <TIM_Base_SetConfig+0xf8>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a16      	ldr	r2, [pc, #88]	@ (8007ab0 <TIM_Base_SetConfig+0x144>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d003      	beq.n	8007a64 <TIM_Base_SetConfig+0xf8>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a15      	ldr	r2, [pc, #84]	@ (8007ab4 <TIM_Base_SetConfig+0x148>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d103      	bne.n	8007a6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	691a      	ldr	r2, [r3, #16]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d105      	bne.n	8007a8a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	f023 0201 	bic.w	r2, r3, #1
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	611a      	str	r2, [r3, #16]
  }
}
 8007a8a:	bf00      	nop
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	40010000 	.word	0x40010000
 8007a9c:	40000400 	.word	0x40000400
 8007aa0:	40000800 	.word	0x40000800
 8007aa4:	40000c00 	.word	0x40000c00
 8007aa8:	40010400 	.word	0x40010400
 8007aac:	40014000 	.word	0x40014000
 8007ab0:	40014400 	.word	0x40014400
 8007ab4:	40014800 	.word	0x40014800

08007ab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a1b      	ldr	r3, [r3, #32]
 8007acc:	f023 0201 	bic.w	r2, r3, #1
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	4b37      	ldr	r3, [pc, #220]	@ (8007bc0 <TIM_OC1_SetConfig+0x108>)
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 0303 	bic.w	r3, r3, #3
 8007aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f023 0302 	bic.w	r3, r3, #2
 8007b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a2d      	ldr	r2, [pc, #180]	@ (8007bc4 <TIM_OC1_SetConfig+0x10c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d00f      	beq.n	8007b34 <TIM_OC1_SetConfig+0x7c>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a2c      	ldr	r2, [pc, #176]	@ (8007bc8 <TIM_OC1_SetConfig+0x110>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d00b      	beq.n	8007b34 <TIM_OC1_SetConfig+0x7c>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a2b      	ldr	r2, [pc, #172]	@ (8007bcc <TIM_OC1_SetConfig+0x114>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d007      	beq.n	8007b34 <TIM_OC1_SetConfig+0x7c>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a2a      	ldr	r2, [pc, #168]	@ (8007bd0 <TIM_OC1_SetConfig+0x118>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d003      	beq.n	8007b34 <TIM_OC1_SetConfig+0x7c>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a29      	ldr	r2, [pc, #164]	@ (8007bd4 <TIM_OC1_SetConfig+0x11c>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d10c      	bne.n	8007b4e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f023 0308 	bic.w	r3, r3, #8
 8007b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f023 0304 	bic.w	r3, r3, #4
 8007b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a1c      	ldr	r2, [pc, #112]	@ (8007bc4 <TIM_OC1_SetConfig+0x10c>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d00f      	beq.n	8007b76 <TIM_OC1_SetConfig+0xbe>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a1b      	ldr	r2, [pc, #108]	@ (8007bc8 <TIM_OC1_SetConfig+0x110>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d00b      	beq.n	8007b76 <TIM_OC1_SetConfig+0xbe>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a1a      	ldr	r2, [pc, #104]	@ (8007bcc <TIM_OC1_SetConfig+0x114>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d007      	beq.n	8007b76 <TIM_OC1_SetConfig+0xbe>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a19      	ldr	r2, [pc, #100]	@ (8007bd0 <TIM_OC1_SetConfig+0x118>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d003      	beq.n	8007b76 <TIM_OC1_SetConfig+0xbe>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a18      	ldr	r2, [pc, #96]	@ (8007bd4 <TIM_OC1_SetConfig+0x11c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d111      	bne.n	8007b9a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	685a      	ldr	r2, [r3, #4]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	621a      	str	r2, [r3, #32]
}
 8007bb4:	bf00      	nop
 8007bb6:	371c      	adds	r7, #28
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	fffeff8f 	.word	0xfffeff8f
 8007bc4:	40010000 	.word	0x40010000
 8007bc8:	40010400 	.word	0x40010400
 8007bcc:	40014000 	.word	0x40014000
 8007bd0:	40014400 	.word	0x40014400
 8007bd4:	40014800 	.word	0x40014800

08007bd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a1b      	ldr	r3, [r3, #32]
 8007be6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a1b      	ldr	r3, [r3, #32]
 8007bec:	f023 0210 	bic.w	r2, r3, #16
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	4b34      	ldr	r3, [pc, #208]	@ (8007cd4 <TIM_OC2_SetConfig+0xfc>)
 8007c04:	4013      	ands	r3, r2
 8007c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	021b      	lsls	r3, r3, #8
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	f023 0320 	bic.w	r3, r3, #32
 8007c22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	011b      	lsls	r3, r3, #4
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a29      	ldr	r2, [pc, #164]	@ (8007cd8 <TIM_OC2_SetConfig+0x100>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d003      	beq.n	8007c40 <TIM_OC2_SetConfig+0x68>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a28      	ldr	r2, [pc, #160]	@ (8007cdc <TIM_OC2_SetConfig+0x104>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d10d      	bne.n	8007c5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	011b      	lsls	r3, r3, #4
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8007cd8 <TIM_OC2_SetConfig+0x100>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d00f      	beq.n	8007c84 <TIM_OC2_SetConfig+0xac>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a1d      	ldr	r2, [pc, #116]	@ (8007cdc <TIM_OC2_SetConfig+0x104>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d00b      	beq.n	8007c84 <TIM_OC2_SetConfig+0xac>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8007ce0 <TIM_OC2_SetConfig+0x108>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d007      	beq.n	8007c84 <TIM_OC2_SetConfig+0xac>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a1b      	ldr	r2, [pc, #108]	@ (8007ce4 <TIM_OC2_SetConfig+0x10c>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d003      	beq.n	8007c84 <TIM_OC2_SetConfig+0xac>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a1a      	ldr	r2, [pc, #104]	@ (8007ce8 <TIM_OC2_SetConfig+0x110>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d113      	bne.n	8007cac <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	621a      	str	r2, [r3, #32]
}
 8007cc6:	bf00      	nop
 8007cc8:	371c      	adds	r7, #28
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	feff8fff 	.word	0xfeff8fff
 8007cd8:	40010000 	.word	0x40010000
 8007cdc:	40010400 	.word	0x40010400
 8007ce0:	40014000 	.word	0x40014000
 8007ce4:	40014400 	.word	0x40014400
 8007ce8:	40014800 	.word	0x40014800

08007cec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b087      	sub	sp, #28
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
 8007cfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a1b      	ldr	r3, [r3, #32]
 8007d00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	69db      	ldr	r3, [r3, #28]
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	4b33      	ldr	r3, [pc, #204]	@ (8007de4 <TIM_OC3_SetConfig+0xf8>)
 8007d18:	4013      	ands	r3, r2
 8007d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f023 0303 	bic.w	r3, r3, #3
 8007d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	021b      	lsls	r3, r3, #8
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a28      	ldr	r2, [pc, #160]	@ (8007de8 <TIM_OC3_SetConfig+0xfc>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d003      	beq.n	8007d52 <TIM_OC3_SetConfig+0x66>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a27      	ldr	r2, [pc, #156]	@ (8007dec <TIM_OC3_SetConfig+0x100>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d10d      	bne.n	8007d6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	021b      	lsls	r3, r3, #8
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a1d      	ldr	r2, [pc, #116]	@ (8007de8 <TIM_OC3_SetConfig+0xfc>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d00f      	beq.n	8007d96 <TIM_OC3_SetConfig+0xaa>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a1c      	ldr	r2, [pc, #112]	@ (8007dec <TIM_OC3_SetConfig+0x100>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d00b      	beq.n	8007d96 <TIM_OC3_SetConfig+0xaa>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a1b      	ldr	r2, [pc, #108]	@ (8007df0 <TIM_OC3_SetConfig+0x104>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d007      	beq.n	8007d96 <TIM_OC3_SetConfig+0xaa>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a1a      	ldr	r2, [pc, #104]	@ (8007df4 <TIM_OC3_SetConfig+0x108>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d003      	beq.n	8007d96 <TIM_OC3_SetConfig+0xaa>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a19      	ldr	r2, [pc, #100]	@ (8007df8 <TIM_OC3_SetConfig+0x10c>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d113      	bne.n	8007dbe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	011b      	lsls	r3, r3, #4
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	011b      	lsls	r3, r3, #4
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	621a      	str	r2, [r3, #32]
}
 8007dd8:	bf00      	nop
 8007dda:	371c      	adds	r7, #28
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr
 8007de4:	fffeff8f 	.word	0xfffeff8f
 8007de8:	40010000 	.word	0x40010000
 8007dec:	40010400 	.word	0x40010400
 8007df0:	40014000 	.word	0x40014000
 8007df4:	40014400 	.word	0x40014400
 8007df8:	40014800 	.word	0x40014800

08007dfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b087      	sub	sp, #28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a1b      	ldr	r3, [r3, #32]
 8007e10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	69db      	ldr	r3, [r3, #28]
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	4b24      	ldr	r3, [pc, #144]	@ (8007eb8 <TIM_OC4_SetConfig+0xbc>)
 8007e28:	4013      	ands	r3, r2
 8007e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	021b      	lsls	r3, r3, #8
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	031b      	lsls	r3, r3, #12
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a19      	ldr	r2, [pc, #100]	@ (8007ebc <TIM_OC4_SetConfig+0xc0>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d00f      	beq.n	8007e7c <TIM_OC4_SetConfig+0x80>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a18      	ldr	r2, [pc, #96]	@ (8007ec0 <TIM_OC4_SetConfig+0xc4>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d00b      	beq.n	8007e7c <TIM_OC4_SetConfig+0x80>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a17      	ldr	r2, [pc, #92]	@ (8007ec4 <TIM_OC4_SetConfig+0xc8>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d007      	beq.n	8007e7c <TIM_OC4_SetConfig+0x80>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a16      	ldr	r2, [pc, #88]	@ (8007ec8 <TIM_OC4_SetConfig+0xcc>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d003      	beq.n	8007e7c <TIM_OC4_SetConfig+0x80>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a15      	ldr	r2, [pc, #84]	@ (8007ecc <TIM_OC4_SetConfig+0xd0>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d109      	bne.n	8007e90 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	019b      	lsls	r3, r3, #6
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	685a      	ldr	r2, [r3, #4]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	621a      	str	r2, [r3, #32]
}
 8007eaa:	bf00      	nop
 8007eac:	371c      	adds	r7, #28
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	feff8fff 	.word	0xfeff8fff
 8007ebc:	40010000 	.word	0x40010000
 8007ec0:	40010400 	.word	0x40010400
 8007ec4:	40014000 	.word	0x40014000
 8007ec8:	40014400 	.word	0x40014400
 8007ecc:	40014800 	.word	0x40014800

08007ed0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b087      	sub	sp, #28
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a1b      	ldr	r3, [r3, #32]
 8007ee4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	4b21      	ldr	r3, [pc, #132]	@ (8007f80 <TIM_OC5_SetConfig+0xb0>)
 8007efc:	4013      	ands	r3, r2
 8007efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007f10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	041b      	lsls	r3, r3, #16
 8007f18:	693a      	ldr	r2, [r7, #16]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a18      	ldr	r2, [pc, #96]	@ (8007f84 <TIM_OC5_SetConfig+0xb4>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d00f      	beq.n	8007f46 <TIM_OC5_SetConfig+0x76>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a17      	ldr	r2, [pc, #92]	@ (8007f88 <TIM_OC5_SetConfig+0xb8>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d00b      	beq.n	8007f46 <TIM_OC5_SetConfig+0x76>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a16      	ldr	r2, [pc, #88]	@ (8007f8c <TIM_OC5_SetConfig+0xbc>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d007      	beq.n	8007f46 <TIM_OC5_SetConfig+0x76>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a15      	ldr	r2, [pc, #84]	@ (8007f90 <TIM_OC5_SetConfig+0xc0>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d003      	beq.n	8007f46 <TIM_OC5_SetConfig+0x76>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a14      	ldr	r2, [pc, #80]	@ (8007f94 <TIM_OC5_SetConfig+0xc4>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d109      	bne.n	8007f5a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	695b      	ldr	r3, [r3, #20]
 8007f52:	021b      	lsls	r3, r3, #8
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	685a      	ldr	r2, [r3, #4]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	621a      	str	r2, [r3, #32]
}
 8007f74:	bf00      	nop
 8007f76:	371c      	adds	r7, #28
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	fffeff8f 	.word	0xfffeff8f
 8007f84:	40010000 	.word	0x40010000
 8007f88:	40010400 	.word	0x40010400
 8007f8c:	40014000 	.word	0x40014000
 8007f90:	40014400 	.word	0x40014400
 8007f94:	40014800 	.word	0x40014800

08007f98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b087      	sub	sp, #28
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	4b22      	ldr	r3, [pc, #136]	@ (800804c <TIM_OC6_SetConfig+0xb4>)
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	021b      	lsls	r3, r3, #8
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007fda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	051b      	lsls	r3, r3, #20
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a19      	ldr	r2, [pc, #100]	@ (8008050 <TIM_OC6_SetConfig+0xb8>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d00f      	beq.n	8008010 <TIM_OC6_SetConfig+0x78>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a18      	ldr	r2, [pc, #96]	@ (8008054 <TIM_OC6_SetConfig+0xbc>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d00b      	beq.n	8008010 <TIM_OC6_SetConfig+0x78>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a17      	ldr	r2, [pc, #92]	@ (8008058 <TIM_OC6_SetConfig+0xc0>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d007      	beq.n	8008010 <TIM_OC6_SetConfig+0x78>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a16      	ldr	r2, [pc, #88]	@ (800805c <TIM_OC6_SetConfig+0xc4>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d003      	beq.n	8008010 <TIM_OC6_SetConfig+0x78>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a15      	ldr	r2, [pc, #84]	@ (8008060 <TIM_OC6_SetConfig+0xc8>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d109      	bne.n	8008024 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008016:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	695b      	ldr	r3, [r3, #20]
 800801c:	029b      	lsls	r3, r3, #10
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	4313      	orrs	r3, r2
 8008022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	685a      	ldr	r2, [r3, #4]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	621a      	str	r2, [r3, #32]
}
 800803e:	bf00      	nop
 8008040:	371c      	adds	r7, #28
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	feff8fff 	.word	0xfeff8fff
 8008050:	40010000 	.word	0x40010000
 8008054:	40010400 	.word	0x40010400
 8008058:	40014000 	.word	0x40014000
 800805c:	40014400 	.word	0x40014400
 8008060:	40014800 	.word	0x40014800

08008064 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008064:	b480      	push	{r7}
 8008066:	b087      	sub	sp, #28
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6a1b      	ldr	r3, [r3, #32]
 8008074:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6a1b      	ldr	r3, [r3, #32]
 800807a:	f023 0201 	bic.w	r2, r3, #1
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800808e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	011b      	lsls	r3, r3, #4
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	4313      	orrs	r3, r2
 8008098:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f023 030a 	bic.w	r3, r3, #10
 80080a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	697a      	ldr	r2, [r7, #20]
 80080b4:	621a      	str	r2, [r3, #32]
}
 80080b6:	bf00      	nop
 80080b8:	371c      	adds	r7, #28
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b087      	sub	sp, #28
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	60f8      	str	r0, [r7, #12]
 80080ca:	60b9      	str	r1, [r7, #8]
 80080cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
 80080d8:	f023 0210 	bic.w	r2, r3, #16
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80080ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	031b      	lsls	r3, r3, #12
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80080fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	011b      	lsls	r3, r3, #4
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	4313      	orrs	r3, r2
 8008108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	621a      	str	r2, [r3, #32]
}
 8008116:	bf00      	nop
 8008118:	371c      	adds	r7, #28
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
	...

08008124 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	4b09      	ldr	r3, [pc, #36]	@ (800815c <TIM_ITRx_SetConfig+0x38>)
 8008138:	4013      	ands	r3, r2
 800813a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800813c:	683a      	ldr	r2, [r7, #0]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	4313      	orrs	r3, r2
 8008142:	f043 0307 	orr.w	r3, r3, #7
 8008146:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	609a      	str	r2, [r3, #8]
}
 800814e:	bf00      	nop
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	ffcfff8f 	.word	0xffcfff8f

08008160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008160:	b480      	push	{r7}
 8008162:	b087      	sub	sp, #28
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
 800816c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800817a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	021a      	lsls	r2, r3, #8
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	431a      	orrs	r2, r3
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	4313      	orrs	r3, r2
 8008188:	697a      	ldr	r2, [r7, #20]
 800818a:	4313      	orrs	r3, r2
 800818c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	609a      	str	r2, [r3, #8]
}
 8008194:	bf00      	nop
 8008196:	371c      	adds	r7, #28
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f003 031f 	and.w	r3, r3, #31
 80081b2:	2201      	movs	r2, #1
 80081b4:	fa02 f303 	lsl.w	r3, r2, r3
 80081b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6a1a      	ldr	r2, [r3, #32]
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	43db      	mvns	r3, r3
 80081c2:	401a      	ands	r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6a1a      	ldr	r2, [r3, #32]
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	f003 031f 	and.w	r3, r3, #31
 80081d2:	6879      	ldr	r1, [r7, #4]
 80081d4:	fa01 f303 	lsl.w	r3, r1, r3
 80081d8:	431a      	orrs	r2, r3
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	621a      	str	r2, [r3, #32]
}
 80081de:	bf00      	nop
 80081e0:	371c      	adds	r7, #28
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
	...

080081ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d101      	bne.n	8008204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008200:	2302      	movs	r3, #2
 8008202:	e06d      	b.n	80082e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2202      	movs	r2, #2
 8008210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a30      	ldr	r2, [pc, #192]	@ (80082ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d004      	beq.n	8008238 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a2f      	ldr	r2, [pc, #188]	@ (80082f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d108      	bne.n	800824a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800823e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	4313      	orrs	r3, r2
 8008248:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008250:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	4313      	orrs	r3, r2
 800825a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a20      	ldr	r2, [pc, #128]	@ (80082ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d022      	beq.n	80082b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008276:	d01d      	beq.n	80082b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a1d      	ldr	r2, [pc, #116]	@ (80082f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d018      	beq.n	80082b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a1c      	ldr	r2, [pc, #112]	@ (80082f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d013      	beq.n	80082b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a1a      	ldr	r2, [pc, #104]	@ (80082fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d00e      	beq.n	80082b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a15      	ldr	r2, [pc, #84]	@ (80082f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d009      	beq.n	80082b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a16      	ldr	r2, [pc, #88]	@ (8008300 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d004      	beq.n	80082b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a15      	ldr	r2, [pc, #84]	@ (8008304 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d10c      	bne.n	80082ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3714      	adds	r7, #20
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	40010000 	.word	0x40010000
 80082f0:	40010400 	.word	0x40010400
 80082f4:	40000400 	.word	0x40000400
 80082f8:	40000800 	.word	0x40000800
 80082fc:	40000c00 	.word	0x40000c00
 8008300:	40001800 	.word	0x40001800
 8008304:	40014000 	.word	0x40014000

08008308 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008312:	2300      	movs	r3, #0
 8008314:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800831c:	2b01      	cmp	r3, #1
 800831e:	d101      	bne.n	8008324 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008320:	2302      	movs	r3, #2
 8008322:	e065      	b.n	80083f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	4313      	orrs	r3, r2
 8008338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	4313      	orrs	r3, r2
 8008346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	4313      	orrs	r3, r2
 8008354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4313      	orrs	r3, r2
 8008362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	4313      	orrs	r3, r2
 8008370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	695b      	ldr	r3, [r3, #20]
 800837c:	4313      	orrs	r3, r2
 800837e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800838a:	4313      	orrs	r3, r2
 800838c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	041b      	lsls	r3, r3, #16
 800839a:	4313      	orrs	r3, r2
 800839c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a16      	ldr	r2, [pc, #88]	@ (80083fc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d004      	beq.n	80083b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a14      	ldr	r2, [pc, #80]	@ (8008400 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d115      	bne.n	80083de <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083bc:	051b      	lsls	r3, r3, #20
 80083be:	4313      	orrs	r3, r2
 80083c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	69db      	ldr	r3, [r3, #28]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	4313      	orrs	r3, r2
 80083dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3714      	adds	r7, #20
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	40010000 	.word	0x40010000
 8008400:	40010400 	.word	0x40010400

08008404 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008420:	bf00      	nop
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d101      	bne.n	8008452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e042      	b.n	80084d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008458:	2b00      	cmp	r3, #0
 800845a:	d106      	bne.n	800846a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7fa f921 	bl	80026ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2224      	movs	r2, #36	@ 0x24
 800846e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f022 0201 	bic.w	r2, r2, #1
 8008480:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008486:	2b00      	cmp	r3, #0
 8008488:	d002      	beq.n	8008490 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fd90 	bl	8008fb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f825 	bl	80084e0 <UART_SetConfig>
 8008496:	4603      	mov	r3, r0
 8008498:	2b01      	cmp	r3, #1
 800849a:	d101      	bne.n	80084a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e01b      	b.n	80084d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	685a      	ldr	r2, [r3, #4]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80084ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	689a      	ldr	r2, [r3, #8]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80084be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f042 0201 	orr.w	r2, r2, #1
 80084ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fe0f 	bl	80090f4 <UART_CheckIdleState>
 80084d6:	4603      	mov	r3, r0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084e4:	b092      	sub	sp, #72	@ 0x48
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	689a      	ldr	r2, [r3, #8]
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	431a      	orrs	r2, r3
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	431a      	orrs	r2, r3
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	69db      	ldr	r3, [r3, #28]
 8008504:	4313      	orrs	r3, r2
 8008506:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	4bbe      	ldr	r3, [pc, #760]	@ (8008808 <UART_SetConfig+0x328>)
 8008510:	4013      	ands	r3, r2
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	6812      	ldr	r2, [r2, #0]
 8008516:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008518:	430b      	orrs	r3, r1
 800851a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	68da      	ldr	r2, [r3, #12]
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	430a      	orrs	r2, r1
 8008530:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4ab3      	ldr	r2, [pc, #716]	@ (800880c <UART_SetConfig+0x32c>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d004      	beq.n	800854c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008548:	4313      	orrs	r3, r2
 800854a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689a      	ldr	r2, [r3, #8]
 8008552:	4baf      	ldr	r3, [pc, #700]	@ (8008810 <UART_SetConfig+0x330>)
 8008554:	4013      	ands	r3, r2
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	6812      	ldr	r2, [r2, #0]
 800855a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800855c:	430b      	orrs	r3, r1
 800855e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008566:	f023 010f 	bic.w	r1, r3, #15
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	430a      	orrs	r2, r1
 8008574:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4aa6      	ldr	r2, [pc, #664]	@ (8008814 <UART_SetConfig+0x334>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d177      	bne.n	8008670 <UART_SetConfig+0x190>
 8008580:	4ba5      	ldr	r3, [pc, #660]	@ (8008818 <UART_SetConfig+0x338>)
 8008582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008584:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008588:	2b28      	cmp	r3, #40	@ 0x28
 800858a:	d86d      	bhi.n	8008668 <UART_SetConfig+0x188>
 800858c:	a201      	add	r2, pc, #4	@ (adr r2, 8008594 <UART_SetConfig+0xb4>)
 800858e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008592:	bf00      	nop
 8008594:	08008639 	.word	0x08008639
 8008598:	08008669 	.word	0x08008669
 800859c:	08008669 	.word	0x08008669
 80085a0:	08008669 	.word	0x08008669
 80085a4:	08008669 	.word	0x08008669
 80085a8:	08008669 	.word	0x08008669
 80085ac:	08008669 	.word	0x08008669
 80085b0:	08008669 	.word	0x08008669
 80085b4:	08008641 	.word	0x08008641
 80085b8:	08008669 	.word	0x08008669
 80085bc:	08008669 	.word	0x08008669
 80085c0:	08008669 	.word	0x08008669
 80085c4:	08008669 	.word	0x08008669
 80085c8:	08008669 	.word	0x08008669
 80085cc:	08008669 	.word	0x08008669
 80085d0:	08008669 	.word	0x08008669
 80085d4:	08008649 	.word	0x08008649
 80085d8:	08008669 	.word	0x08008669
 80085dc:	08008669 	.word	0x08008669
 80085e0:	08008669 	.word	0x08008669
 80085e4:	08008669 	.word	0x08008669
 80085e8:	08008669 	.word	0x08008669
 80085ec:	08008669 	.word	0x08008669
 80085f0:	08008669 	.word	0x08008669
 80085f4:	08008651 	.word	0x08008651
 80085f8:	08008669 	.word	0x08008669
 80085fc:	08008669 	.word	0x08008669
 8008600:	08008669 	.word	0x08008669
 8008604:	08008669 	.word	0x08008669
 8008608:	08008669 	.word	0x08008669
 800860c:	08008669 	.word	0x08008669
 8008610:	08008669 	.word	0x08008669
 8008614:	08008659 	.word	0x08008659
 8008618:	08008669 	.word	0x08008669
 800861c:	08008669 	.word	0x08008669
 8008620:	08008669 	.word	0x08008669
 8008624:	08008669 	.word	0x08008669
 8008628:	08008669 	.word	0x08008669
 800862c:	08008669 	.word	0x08008669
 8008630:	08008669 	.word	0x08008669
 8008634:	08008661 	.word	0x08008661
 8008638:	2301      	movs	r3, #1
 800863a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800863e:	e222      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008640:	2304      	movs	r3, #4
 8008642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008646:	e21e      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008648:	2308      	movs	r3, #8
 800864a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800864e:	e21a      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008650:	2310      	movs	r3, #16
 8008652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008656:	e216      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008658:	2320      	movs	r3, #32
 800865a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800865e:	e212      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008660:	2340      	movs	r3, #64	@ 0x40
 8008662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008666:	e20e      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008668:	2380      	movs	r3, #128	@ 0x80
 800866a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800866e:	e20a      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a69      	ldr	r2, [pc, #420]	@ (800881c <UART_SetConfig+0x33c>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d130      	bne.n	80086dc <UART_SetConfig+0x1fc>
 800867a:	4b67      	ldr	r3, [pc, #412]	@ (8008818 <UART_SetConfig+0x338>)
 800867c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800867e:	f003 0307 	and.w	r3, r3, #7
 8008682:	2b05      	cmp	r3, #5
 8008684:	d826      	bhi.n	80086d4 <UART_SetConfig+0x1f4>
 8008686:	a201      	add	r2, pc, #4	@ (adr r2, 800868c <UART_SetConfig+0x1ac>)
 8008688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868c:	080086a5 	.word	0x080086a5
 8008690:	080086ad 	.word	0x080086ad
 8008694:	080086b5 	.word	0x080086b5
 8008698:	080086bd 	.word	0x080086bd
 800869c:	080086c5 	.word	0x080086c5
 80086a0:	080086cd 	.word	0x080086cd
 80086a4:	2300      	movs	r3, #0
 80086a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086aa:	e1ec      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80086ac:	2304      	movs	r3, #4
 80086ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086b2:	e1e8      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80086b4:	2308      	movs	r3, #8
 80086b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ba:	e1e4      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80086bc:	2310      	movs	r3, #16
 80086be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086c2:	e1e0      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80086c4:	2320      	movs	r3, #32
 80086c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ca:	e1dc      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80086cc:	2340      	movs	r3, #64	@ 0x40
 80086ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086d2:	e1d8      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80086d4:	2380      	movs	r3, #128	@ 0x80
 80086d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086da:	e1d4      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a4f      	ldr	r2, [pc, #316]	@ (8008820 <UART_SetConfig+0x340>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d130      	bne.n	8008748 <UART_SetConfig+0x268>
 80086e6:	4b4c      	ldr	r3, [pc, #304]	@ (8008818 <UART_SetConfig+0x338>)
 80086e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ea:	f003 0307 	and.w	r3, r3, #7
 80086ee:	2b05      	cmp	r3, #5
 80086f0:	d826      	bhi.n	8008740 <UART_SetConfig+0x260>
 80086f2:	a201      	add	r2, pc, #4	@ (adr r2, 80086f8 <UART_SetConfig+0x218>)
 80086f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f8:	08008711 	.word	0x08008711
 80086fc:	08008719 	.word	0x08008719
 8008700:	08008721 	.word	0x08008721
 8008704:	08008729 	.word	0x08008729
 8008708:	08008731 	.word	0x08008731
 800870c:	08008739 	.word	0x08008739
 8008710:	2300      	movs	r3, #0
 8008712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008716:	e1b6      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008718:	2304      	movs	r3, #4
 800871a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800871e:	e1b2      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008720:	2308      	movs	r3, #8
 8008722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008726:	e1ae      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008728:	2310      	movs	r3, #16
 800872a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800872e:	e1aa      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008730:	2320      	movs	r3, #32
 8008732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008736:	e1a6      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008738:	2340      	movs	r3, #64	@ 0x40
 800873a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800873e:	e1a2      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008740:	2380      	movs	r3, #128	@ 0x80
 8008742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008746:	e19e      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a35      	ldr	r2, [pc, #212]	@ (8008824 <UART_SetConfig+0x344>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d130      	bne.n	80087b4 <UART_SetConfig+0x2d4>
 8008752:	4b31      	ldr	r3, [pc, #196]	@ (8008818 <UART_SetConfig+0x338>)
 8008754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008756:	f003 0307 	and.w	r3, r3, #7
 800875a:	2b05      	cmp	r3, #5
 800875c:	d826      	bhi.n	80087ac <UART_SetConfig+0x2cc>
 800875e:	a201      	add	r2, pc, #4	@ (adr r2, 8008764 <UART_SetConfig+0x284>)
 8008760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008764:	0800877d 	.word	0x0800877d
 8008768:	08008785 	.word	0x08008785
 800876c:	0800878d 	.word	0x0800878d
 8008770:	08008795 	.word	0x08008795
 8008774:	0800879d 	.word	0x0800879d
 8008778:	080087a5 	.word	0x080087a5
 800877c:	2300      	movs	r3, #0
 800877e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008782:	e180      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008784:	2304      	movs	r3, #4
 8008786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800878a:	e17c      	b.n	8008a86 <UART_SetConfig+0x5a6>
 800878c:	2308      	movs	r3, #8
 800878e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008792:	e178      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008794:	2310      	movs	r3, #16
 8008796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800879a:	e174      	b.n	8008a86 <UART_SetConfig+0x5a6>
 800879c:	2320      	movs	r3, #32
 800879e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087a2:	e170      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80087a4:	2340      	movs	r3, #64	@ 0x40
 80087a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087aa:	e16c      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80087ac:	2380      	movs	r3, #128	@ 0x80
 80087ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087b2:	e168      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a1b      	ldr	r2, [pc, #108]	@ (8008828 <UART_SetConfig+0x348>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d142      	bne.n	8008844 <UART_SetConfig+0x364>
 80087be:	4b16      	ldr	r3, [pc, #88]	@ (8008818 <UART_SetConfig+0x338>)
 80087c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087c2:	f003 0307 	and.w	r3, r3, #7
 80087c6:	2b05      	cmp	r3, #5
 80087c8:	d838      	bhi.n	800883c <UART_SetConfig+0x35c>
 80087ca:	a201      	add	r2, pc, #4	@ (adr r2, 80087d0 <UART_SetConfig+0x2f0>)
 80087cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d0:	080087e9 	.word	0x080087e9
 80087d4:	080087f1 	.word	0x080087f1
 80087d8:	080087f9 	.word	0x080087f9
 80087dc:	08008801 	.word	0x08008801
 80087e0:	0800882d 	.word	0x0800882d
 80087e4:	08008835 	.word	0x08008835
 80087e8:	2300      	movs	r3, #0
 80087ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ee:	e14a      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80087f0:	2304      	movs	r3, #4
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087f6:	e146      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80087f8:	2308      	movs	r3, #8
 80087fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087fe:	e142      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008800:	2310      	movs	r3, #16
 8008802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008806:	e13e      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008808:	cfff69f3 	.word	0xcfff69f3
 800880c:	58000c00 	.word	0x58000c00
 8008810:	11fff4ff 	.word	0x11fff4ff
 8008814:	40011000 	.word	0x40011000
 8008818:	58024400 	.word	0x58024400
 800881c:	40004400 	.word	0x40004400
 8008820:	40004800 	.word	0x40004800
 8008824:	40004c00 	.word	0x40004c00
 8008828:	40005000 	.word	0x40005000
 800882c:	2320      	movs	r3, #32
 800882e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008832:	e128      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008834:	2340      	movs	r3, #64	@ 0x40
 8008836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800883a:	e124      	b.n	8008a86 <UART_SetConfig+0x5a6>
 800883c:	2380      	movs	r3, #128	@ 0x80
 800883e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008842:	e120      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4acb      	ldr	r2, [pc, #812]	@ (8008b78 <UART_SetConfig+0x698>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d176      	bne.n	800893c <UART_SetConfig+0x45c>
 800884e:	4bcb      	ldr	r3, [pc, #812]	@ (8008b7c <UART_SetConfig+0x69c>)
 8008850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008852:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008856:	2b28      	cmp	r3, #40	@ 0x28
 8008858:	d86c      	bhi.n	8008934 <UART_SetConfig+0x454>
 800885a:	a201      	add	r2, pc, #4	@ (adr r2, 8008860 <UART_SetConfig+0x380>)
 800885c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008860:	08008905 	.word	0x08008905
 8008864:	08008935 	.word	0x08008935
 8008868:	08008935 	.word	0x08008935
 800886c:	08008935 	.word	0x08008935
 8008870:	08008935 	.word	0x08008935
 8008874:	08008935 	.word	0x08008935
 8008878:	08008935 	.word	0x08008935
 800887c:	08008935 	.word	0x08008935
 8008880:	0800890d 	.word	0x0800890d
 8008884:	08008935 	.word	0x08008935
 8008888:	08008935 	.word	0x08008935
 800888c:	08008935 	.word	0x08008935
 8008890:	08008935 	.word	0x08008935
 8008894:	08008935 	.word	0x08008935
 8008898:	08008935 	.word	0x08008935
 800889c:	08008935 	.word	0x08008935
 80088a0:	08008915 	.word	0x08008915
 80088a4:	08008935 	.word	0x08008935
 80088a8:	08008935 	.word	0x08008935
 80088ac:	08008935 	.word	0x08008935
 80088b0:	08008935 	.word	0x08008935
 80088b4:	08008935 	.word	0x08008935
 80088b8:	08008935 	.word	0x08008935
 80088bc:	08008935 	.word	0x08008935
 80088c0:	0800891d 	.word	0x0800891d
 80088c4:	08008935 	.word	0x08008935
 80088c8:	08008935 	.word	0x08008935
 80088cc:	08008935 	.word	0x08008935
 80088d0:	08008935 	.word	0x08008935
 80088d4:	08008935 	.word	0x08008935
 80088d8:	08008935 	.word	0x08008935
 80088dc:	08008935 	.word	0x08008935
 80088e0:	08008925 	.word	0x08008925
 80088e4:	08008935 	.word	0x08008935
 80088e8:	08008935 	.word	0x08008935
 80088ec:	08008935 	.word	0x08008935
 80088f0:	08008935 	.word	0x08008935
 80088f4:	08008935 	.word	0x08008935
 80088f8:	08008935 	.word	0x08008935
 80088fc:	08008935 	.word	0x08008935
 8008900:	0800892d 	.word	0x0800892d
 8008904:	2301      	movs	r3, #1
 8008906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800890a:	e0bc      	b.n	8008a86 <UART_SetConfig+0x5a6>
 800890c:	2304      	movs	r3, #4
 800890e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008912:	e0b8      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008914:	2308      	movs	r3, #8
 8008916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800891a:	e0b4      	b.n	8008a86 <UART_SetConfig+0x5a6>
 800891c:	2310      	movs	r3, #16
 800891e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008922:	e0b0      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008924:	2320      	movs	r3, #32
 8008926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800892a:	e0ac      	b.n	8008a86 <UART_SetConfig+0x5a6>
 800892c:	2340      	movs	r3, #64	@ 0x40
 800892e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008932:	e0a8      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008934:	2380      	movs	r3, #128	@ 0x80
 8008936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800893a:	e0a4      	b.n	8008a86 <UART_SetConfig+0x5a6>
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a8f      	ldr	r2, [pc, #572]	@ (8008b80 <UART_SetConfig+0x6a0>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d130      	bne.n	80089a8 <UART_SetConfig+0x4c8>
 8008946:	4b8d      	ldr	r3, [pc, #564]	@ (8008b7c <UART_SetConfig+0x69c>)
 8008948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800894a:	f003 0307 	and.w	r3, r3, #7
 800894e:	2b05      	cmp	r3, #5
 8008950:	d826      	bhi.n	80089a0 <UART_SetConfig+0x4c0>
 8008952:	a201      	add	r2, pc, #4	@ (adr r2, 8008958 <UART_SetConfig+0x478>)
 8008954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008958:	08008971 	.word	0x08008971
 800895c:	08008979 	.word	0x08008979
 8008960:	08008981 	.word	0x08008981
 8008964:	08008989 	.word	0x08008989
 8008968:	08008991 	.word	0x08008991
 800896c:	08008999 	.word	0x08008999
 8008970:	2300      	movs	r3, #0
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008976:	e086      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008978:	2304      	movs	r3, #4
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800897e:	e082      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008980:	2308      	movs	r3, #8
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008986:	e07e      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008988:	2310      	movs	r3, #16
 800898a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800898e:	e07a      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008990:	2320      	movs	r3, #32
 8008992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008996:	e076      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008998:	2340      	movs	r3, #64	@ 0x40
 800899a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800899e:	e072      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80089a0:	2380      	movs	r3, #128	@ 0x80
 80089a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089a6:	e06e      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a75      	ldr	r2, [pc, #468]	@ (8008b84 <UART_SetConfig+0x6a4>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d130      	bne.n	8008a14 <UART_SetConfig+0x534>
 80089b2:	4b72      	ldr	r3, [pc, #456]	@ (8008b7c <UART_SetConfig+0x69c>)
 80089b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089b6:	f003 0307 	and.w	r3, r3, #7
 80089ba:	2b05      	cmp	r3, #5
 80089bc:	d826      	bhi.n	8008a0c <UART_SetConfig+0x52c>
 80089be:	a201      	add	r2, pc, #4	@ (adr r2, 80089c4 <UART_SetConfig+0x4e4>)
 80089c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c4:	080089dd 	.word	0x080089dd
 80089c8:	080089e5 	.word	0x080089e5
 80089cc:	080089ed 	.word	0x080089ed
 80089d0:	080089f5 	.word	0x080089f5
 80089d4:	080089fd 	.word	0x080089fd
 80089d8:	08008a05 	.word	0x08008a05
 80089dc:	2300      	movs	r3, #0
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089e2:	e050      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80089e4:	2304      	movs	r3, #4
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ea:	e04c      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80089ec:	2308      	movs	r3, #8
 80089ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089f2:	e048      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80089f4:	2310      	movs	r3, #16
 80089f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089fa:	e044      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80089fc:	2320      	movs	r3, #32
 80089fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a02:	e040      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008a04:	2340      	movs	r3, #64	@ 0x40
 8008a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a0a:	e03c      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008a0c:	2380      	movs	r3, #128	@ 0x80
 8008a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a12:	e038      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a5b      	ldr	r2, [pc, #364]	@ (8008b88 <UART_SetConfig+0x6a8>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d130      	bne.n	8008a80 <UART_SetConfig+0x5a0>
 8008a1e:	4b57      	ldr	r3, [pc, #348]	@ (8008b7c <UART_SetConfig+0x69c>)
 8008a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a22:	f003 0307 	and.w	r3, r3, #7
 8008a26:	2b05      	cmp	r3, #5
 8008a28:	d826      	bhi.n	8008a78 <UART_SetConfig+0x598>
 8008a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a30 <UART_SetConfig+0x550>)
 8008a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a30:	08008a49 	.word	0x08008a49
 8008a34:	08008a51 	.word	0x08008a51
 8008a38:	08008a59 	.word	0x08008a59
 8008a3c:	08008a61 	.word	0x08008a61
 8008a40:	08008a69 	.word	0x08008a69
 8008a44:	08008a71 	.word	0x08008a71
 8008a48:	2302      	movs	r3, #2
 8008a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a4e:	e01a      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008a50:	2304      	movs	r3, #4
 8008a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a56:	e016      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008a58:	2308      	movs	r3, #8
 8008a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a5e:	e012      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008a60:	2310      	movs	r3, #16
 8008a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a66:	e00e      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008a68:	2320      	movs	r3, #32
 8008a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a6e:	e00a      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008a70:	2340      	movs	r3, #64	@ 0x40
 8008a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a76:	e006      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008a78:	2380      	movs	r3, #128	@ 0x80
 8008a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a7e:	e002      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008a80:	2380      	movs	r3, #128	@ 0x80
 8008a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a3f      	ldr	r2, [pc, #252]	@ (8008b88 <UART_SetConfig+0x6a8>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	f040 80f8 	bne.w	8008c82 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a92:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008a96:	2b20      	cmp	r3, #32
 8008a98:	dc46      	bgt.n	8008b28 <UART_SetConfig+0x648>
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	f2c0 8082 	blt.w	8008ba4 <UART_SetConfig+0x6c4>
 8008aa0:	3b02      	subs	r3, #2
 8008aa2:	2b1e      	cmp	r3, #30
 8008aa4:	d87e      	bhi.n	8008ba4 <UART_SetConfig+0x6c4>
 8008aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8008aac <UART_SetConfig+0x5cc>)
 8008aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aac:	08008b2f 	.word	0x08008b2f
 8008ab0:	08008ba5 	.word	0x08008ba5
 8008ab4:	08008b37 	.word	0x08008b37
 8008ab8:	08008ba5 	.word	0x08008ba5
 8008abc:	08008ba5 	.word	0x08008ba5
 8008ac0:	08008ba5 	.word	0x08008ba5
 8008ac4:	08008b47 	.word	0x08008b47
 8008ac8:	08008ba5 	.word	0x08008ba5
 8008acc:	08008ba5 	.word	0x08008ba5
 8008ad0:	08008ba5 	.word	0x08008ba5
 8008ad4:	08008ba5 	.word	0x08008ba5
 8008ad8:	08008ba5 	.word	0x08008ba5
 8008adc:	08008ba5 	.word	0x08008ba5
 8008ae0:	08008ba5 	.word	0x08008ba5
 8008ae4:	08008b57 	.word	0x08008b57
 8008ae8:	08008ba5 	.word	0x08008ba5
 8008aec:	08008ba5 	.word	0x08008ba5
 8008af0:	08008ba5 	.word	0x08008ba5
 8008af4:	08008ba5 	.word	0x08008ba5
 8008af8:	08008ba5 	.word	0x08008ba5
 8008afc:	08008ba5 	.word	0x08008ba5
 8008b00:	08008ba5 	.word	0x08008ba5
 8008b04:	08008ba5 	.word	0x08008ba5
 8008b08:	08008ba5 	.word	0x08008ba5
 8008b0c:	08008ba5 	.word	0x08008ba5
 8008b10:	08008ba5 	.word	0x08008ba5
 8008b14:	08008ba5 	.word	0x08008ba5
 8008b18:	08008ba5 	.word	0x08008ba5
 8008b1c:	08008ba5 	.word	0x08008ba5
 8008b20:	08008ba5 	.word	0x08008ba5
 8008b24:	08008b97 	.word	0x08008b97
 8008b28:	2b40      	cmp	r3, #64	@ 0x40
 8008b2a:	d037      	beq.n	8008b9c <UART_SetConfig+0x6bc>
 8008b2c:	e03a      	b.n	8008ba4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008b2e:	f7fd fc4b 	bl	80063c8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008b32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008b34:	e03c      	b.n	8008bb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fd fc5a 	bl	80063f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b44:	e034      	b.n	8008bb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b46:	f107 0318 	add.w	r3, r7, #24
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fd fda6 	bl	800669c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b54:	e02c      	b.n	8008bb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b56:	4b09      	ldr	r3, [pc, #36]	@ (8008b7c <UART_SetConfig+0x69c>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 0320 	and.w	r3, r3, #32
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d016      	beq.n	8008b90 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b62:	4b06      	ldr	r3, [pc, #24]	@ (8008b7c <UART_SetConfig+0x69c>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	08db      	lsrs	r3, r3, #3
 8008b68:	f003 0303 	and.w	r3, r3, #3
 8008b6c:	4a07      	ldr	r2, [pc, #28]	@ (8008b8c <UART_SetConfig+0x6ac>)
 8008b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b74:	e01c      	b.n	8008bb0 <UART_SetConfig+0x6d0>
 8008b76:	bf00      	nop
 8008b78:	40011400 	.word	0x40011400
 8008b7c:	58024400 	.word	0x58024400
 8008b80:	40007800 	.word	0x40007800
 8008b84:	40007c00 	.word	0x40007c00
 8008b88:	58000c00 	.word	0x58000c00
 8008b8c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008b90:	4b9d      	ldr	r3, [pc, #628]	@ (8008e08 <UART_SetConfig+0x928>)
 8008b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b94:	e00c      	b.n	8008bb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b96:	4b9d      	ldr	r3, [pc, #628]	@ (8008e0c <UART_SetConfig+0x92c>)
 8008b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b9a:	e009      	b.n	8008bb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ba2:	e005      	b.n	8008bb0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008bae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008bb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	f000 81de 	beq.w	8008f74 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bbc:	4a94      	ldr	r2, [pc, #592]	@ (8008e10 <UART_SetConfig+0x930>)
 8008bbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bca:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	005b      	lsls	r3, r3, #1
 8008bd4:	4413      	add	r3, r2
 8008bd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d305      	bcc.n	8008be8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d903      	bls.n	8008bf0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008bee:	e1c1      	b.n	8008f74 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	60bb      	str	r3, [r7, #8]
 8008bf6:	60fa      	str	r2, [r7, #12]
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfc:	4a84      	ldr	r2, [pc, #528]	@ (8008e10 <UART_SetConfig+0x930>)
 8008bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	2200      	movs	r2, #0
 8008c06:	603b      	str	r3, [r7, #0]
 8008c08:	607a      	str	r2, [r7, #4]
 8008c0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008c12:	f7f7 fb61 	bl	80002d8 <__aeabi_uldivmod>
 8008c16:	4602      	mov	r2, r0
 8008c18:	460b      	mov	r3, r1
 8008c1a:	4610      	mov	r0, r2
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	f04f 0200 	mov.w	r2, #0
 8008c22:	f04f 0300 	mov.w	r3, #0
 8008c26:	020b      	lsls	r3, r1, #8
 8008c28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c2c:	0202      	lsls	r2, r0, #8
 8008c2e:	6979      	ldr	r1, [r7, #20]
 8008c30:	6849      	ldr	r1, [r1, #4]
 8008c32:	0849      	lsrs	r1, r1, #1
 8008c34:	2000      	movs	r0, #0
 8008c36:	460c      	mov	r4, r1
 8008c38:	4605      	mov	r5, r0
 8008c3a:	eb12 0804 	adds.w	r8, r2, r4
 8008c3e:	eb43 0905 	adc.w	r9, r3, r5
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	469a      	mov	sl, r3
 8008c4a:	4693      	mov	fp, r2
 8008c4c:	4652      	mov	r2, sl
 8008c4e:	465b      	mov	r3, fp
 8008c50:	4640      	mov	r0, r8
 8008c52:	4649      	mov	r1, r9
 8008c54:	f7f7 fb40 	bl	80002d8 <__aeabi_uldivmod>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c66:	d308      	bcc.n	8008c7a <UART_SetConfig+0x79a>
 8008c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c6e:	d204      	bcs.n	8008c7a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c76:	60da      	str	r2, [r3, #12]
 8008c78:	e17c      	b.n	8008f74 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008c80:	e178      	b.n	8008f74 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c8a:	f040 80c5 	bne.w	8008e18 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008c8e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008c92:	2b20      	cmp	r3, #32
 8008c94:	dc48      	bgt.n	8008d28 <UART_SetConfig+0x848>
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	db7b      	blt.n	8008d92 <UART_SetConfig+0x8b2>
 8008c9a:	2b20      	cmp	r3, #32
 8008c9c:	d879      	bhi.n	8008d92 <UART_SetConfig+0x8b2>
 8008c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8008ca4 <UART_SetConfig+0x7c4>)
 8008ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca4:	08008d2f 	.word	0x08008d2f
 8008ca8:	08008d37 	.word	0x08008d37
 8008cac:	08008d93 	.word	0x08008d93
 8008cb0:	08008d93 	.word	0x08008d93
 8008cb4:	08008d3f 	.word	0x08008d3f
 8008cb8:	08008d93 	.word	0x08008d93
 8008cbc:	08008d93 	.word	0x08008d93
 8008cc0:	08008d93 	.word	0x08008d93
 8008cc4:	08008d4f 	.word	0x08008d4f
 8008cc8:	08008d93 	.word	0x08008d93
 8008ccc:	08008d93 	.word	0x08008d93
 8008cd0:	08008d93 	.word	0x08008d93
 8008cd4:	08008d93 	.word	0x08008d93
 8008cd8:	08008d93 	.word	0x08008d93
 8008cdc:	08008d93 	.word	0x08008d93
 8008ce0:	08008d93 	.word	0x08008d93
 8008ce4:	08008d5f 	.word	0x08008d5f
 8008ce8:	08008d93 	.word	0x08008d93
 8008cec:	08008d93 	.word	0x08008d93
 8008cf0:	08008d93 	.word	0x08008d93
 8008cf4:	08008d93 	.word	0x08008d93
 8008cf8:	08008d93 	.word	0x08008d93
 8008cfc:	08008d93 	.word	0x08008d93
 8008d00:	08008d93 	.word	0x08008d93
 8008d04:	08008d93 	.word	0x08008d93
 8008d08:	08008d93 	.word	0x08008d93
 8008d0c:	08008d93 	.word	0x08008d93
 8008d10:	08008d93 	.word	0x08008d93
 8008d14:	08008d93 	.word	0x08008d93
 8008d18:	08008d93 	.word	0x08008d93
 8008d1c:	08008d93 	.word	0x08008d93
 8008d20:	08008d93 	.word	0x08008d93
 8008d24:	08008d85 	.word	0x08008d85
 8008d28:	2b40      	cmp	r3, #64	@ 0x40
 8008d2a:	d02e      	beq.n	8008d8a <UART_SetConfig+0x8aa>
 8008d2c:	e031      	b.n	8008d92 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d2e:	f7fc f915 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 8008d32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d34:	e033      	b.n	8008d9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d36:	f7fc f927 	bl	8004f88 <HAL_RCC_GetPCLK2Freq>
 8008d3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d3c:	e02f      	b.n	8008d9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7fd fb56 	bl	80063f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d4c:	e027      	b.n	8008d9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d4e:	f107 0318 	add.w	r3, r7, #24
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fd fca2 	bl	800669c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d5c:	e01f      	b.n	8008d9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8008e14 <UART_SetConfig+0x934>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 0320 	and.w	r3, r3, #32
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d009      	beq.n	8008d7e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8008e14 <UART_SetConfig+0x934>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	08db      	lsrs	r3, r3, #3
 8008d70:	f003 0303 	and.w	r3, r3, #3
 8008d74:	4a24      	ldr	r2, [pc, #144]	@ (8008e08 <UART_SetConfig+0x928>)
 8008d76:	fa22 f303 	lsr.w	r3, r2, r3
 8008d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d7c:	e00f      	b.n	8008d9e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008d7e:	4b22      	ldr	r3, [pc, #136]	@ (8008e08 <UART_SetConfig+0x928>)
 8008d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d82:	e00c      	b.n	8008d9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d84:	4b21      	ldr	r3, [pc, #132]	@ (8008e0c <UART_SetConfig+0x92c>)
 8008d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d88:	e009      	b.n	8008d9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d90:	e005      	b.n	8008d9e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008d92:	2300      	movs	r3, #0
 8008d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008d9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 80e7 	beq.w	8008f74 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008daa:	4a19      	ldr	r2, [pc, #100]	@ (8008e10 <UART_SetConfig+0x930>)
 8008dac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008db0:	461a      	mov	r2, r3
 8008db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008db4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008db8:	005a      	lsls	r2, r3, #1
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	085b      	lsrs	r3, r3, #1
 8008dc0:	441a      	add	r2, r3
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dce:	2b0f      	cmp	r3, #15
 8008dd0:	d916      	bls.n	8008e00 <UART_SetConfig+0x920>
 8008dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dd8:	d212      	bcs.n	8008e00 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	f023 030f 	bic.w	r3, r3, #15
 8008de2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de6:	085b      	lsrs	r3, r3, #1
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	f003 0307 	and.w	r3, r3, #7
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008df2:	4313      	orrs	r3, r2
 8008df4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008dfc:	60da      	str	r2, [r3, #12]
 8008dfe:	e0b9      	b.n	8008f74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008e06:	e0b5      	b.n	8008f74 <UART_SetConfig+0xa94>
 8008e08:	03d09000 	.word	0x03d09000
 8008e0c:	003d0900 	.word	0x003d0900
 8008e10:	08009678 	.word	0x08009678
 8008e14:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e18:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008e1c:	2b20      	cmp	r3, #32
 8008e1e:	dc49      	bgt.n	8008eb4 <UART_SetConfig+0x9d4>
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	db7c      	blt.n	8008f1e <UART_SetConfig+0xa3e>
 8008e24:	2b20      	cmp	r3, #32
 8008e26:	d87a      	bhi.n	8008f1e <UART_SetConfig+0xa3e>
 8008e28:	a201      	add	r2, pc, #4	@ (adr r2, 8008e30 <UART_SetConfig+0x950>)
 8008e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2e:	bf00      	nop
 8008e30:	08008ebb 	.word	0x08008ebb
 8008e34:	08008ec3 	.word	0x08008ec3
 8008e38:	08008f1f 	.word	0x08008f1f
 8008e3c:	08008f1f 	.word	0x08008f1f
 8008e40:	08008ecb 	.word	0x08008ecb
 8008e44:	08008f1f 	.word	0x08008f1f
 8008e48:	08008f1f 	.word	0x08008f1f
 8008e4c:	08008f1f 	.word	0x08008f1f
 8008e50:	08008edb 	.word	0x08008edb
 8008e54:	08008f1f 	.word	0x08008f1f
 8008e58:	08008f1f 	.word	0x08008f1f
 8008e5c:	08008f1f 	.word	0x08008f1f
 8008e60:	08008f1f 	.word	0x08008f1f
 8008e64:	08008f1f 	.word	0x08008f1f
 8008e68:	08008f1f 	.word	0x08008f1f
 8008e6c:	08008f1f 	.word	0x08008f1f
 8008e70:	08008eeb 	.word	0x08008eeb
 8008e74:	08008f1f 	.word	0x08008f1f
 8008e78:	08008f1f 	.word	0x08008f1f
 8008e7c:	08008f1f 	.word	0x08008f1f
 8008e80:	08008f1f 	.word	0x08008f1f
 8008e84:	08008f1f 	.word	0x08008f1f
 8008e88:	08008f1f 	.word	0x08008f1f
 8008e8c:	08008f1f 	.word	0x08008f1f
 8008e90:	08008f1f 	.word	0x08008f1f
 8008e94:	08008f1f 	.word	0x08008f1f
 8008e98:	08008f1f 	.word	0x08008f1f
 8008e9c:	08008f1f 	.word	0x08008f1f
 8008ea0:	08008f1f 	.word	0x08008f1f
 8008ea4:	08008f1f 	.word	0x08008f1f
 8008ea8:	08008f1f 	.word	0x08008f1f
 8008eac:	08008f1f 	.word	0x08008f1f
 8008eb0:	08008f11 	.word	0x08008f11
 8008eb4:	2b40      	cmp	r3, #64	@ 0x40
 8008eb6:	d02e      	beq.n	8008f16 <UART_SetConfig+0xa36>
 8008eb8:	e031      	b.n	8008f1e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008eba:	f7fc f84f 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 8008ebe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ec0:	e033      	b.n	8008f2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ec2:	f7fc f861 	bl	8004f88 <HAL_RCC_GetPCLK2Freq>
 8008ec6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ec8:	e02f      	b.n	8008f2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fd fa90 	bl	80063f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ed8:	e027      	b.n	8008f2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eda:	f107 0318 	add.w	r3, r7, #24
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fd fbdc 	bl	800669c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ee8:	e01f      	b.n	8008f2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008eea:	4b2d      	ldr	r3, [pc, #180]	@ (8008fa0 <UART_SetConfig+0xac0>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 0320 	and.w	r3, r3, #32
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d009      	beq.n	8008f0a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8008fa0 <UART_SetConfig+0xac0>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	08db      	lsrs	r3, r3, #3
 8008efc:	f003 0303 	and.w	r3, r3, #3
 8008f00:	4a28      	ldr	r2, [pc, #160]	@ (8008fa4 <UART_SetConfig+0xac4>)
 8008f02:	fa22 f303 	lsr.w	r3, r2, r3
 8008f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f08:	e00f      	b.n	8008f2a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008f0a:	4b26      	ldr	r3, [pc, #152]	@ (8008fa4 <UART_SetConfig+0xac4>)
 8008f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f0e:	e00c      	b.n	8008f2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f10:	4b25      	ldr	r3, [pc, #148]	@ (8008fa8 <UART_SetConfig+0xac8>)
 8008f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f14:	e009      	b.n	8008f2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f1c:	e005      	b.n	8008f2a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008f28:	bf00      	nop
    }

    if (pclk != 0U)
 8008f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d021      	beq.n	8008f74 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f34:	4a1d      	ldr	r2, [pc, #116]	@ (8008fac <UART_SetConfig+0xacc>)
 8008f36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	085b      	lsrs	r3, r3, #1
 8008f48:	441a      	add	r2, r3
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f52:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f56:	2b0f      	cmp	r3, #15
 8008f58:	d909      	bls.n	8008f6e <UART_SetConfig+0xa8e>
 8008f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f60:	d205      	bcs.n	8008f6e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	60da      	str	r2, [r3, #12]
 8008f6c:	e002      	b.n	8008f74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	2200      	movs	r2, #0
 8008f88:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008f90:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3748      	adds	r7, #72	@ 0x48
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f9e:	bf00      	nop
 8008fa0:	58024400 	.word	0x58024400
 8008fa4:	03d09000 	.word	0x03d09000
 8008fa8:	003d0900 	.word	0x003d0900
 8008fac:	08009678 	.word	0x08009678

08008fb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fbc:	f003 0308 	and.w	r3, r3, #8
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00a      	beq.n	8008fda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	430a      	orrs	r2, r1
 8008fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00a      	beq.n	8008ffc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	430a      	orrs	r2, r1
 8008ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009000:	f003 0302 	and.w	r3, r3, #2
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00a      	beq.n	800901e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	430a      	orrs	r2, r1
 800901c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009022:	f003 0304 	and.w	r3, r3, #4
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00a      	beq.n	8009040 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	430a      	orrs	r2, r1
 800903e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009044:	f003 0310 	and.w	r3, r3, #16
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00a      	beq.n	8009062 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	430a      	orrs	r2, r1
 8009060:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009066:	f003 0320 	and.w	r3, r3, #32
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00a      	beq.n	8009084 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	430a      	orrs	r2, r1
 8009082:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800908c:	2b00      	cmp	r3, #0
 800908e:	d01a      	beq.n	80090c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	430a      	orrs	r2, r1
 80090a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090ae:	d10a      	bne.n	80090c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	430a      	orrs	r2, r1
 80090c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00a      	beq.n	80090e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	430a      	orrs	r2, r1
 80090e6:	605a      	str	r2, [r3, #4]
  }
}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b098      	sub	sp, #96	@ 0x60
 80090f8:	af02      	add	r7, sp, #8
 80090fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009104:	f7f9 fcae 	bl	8002a64 <HAL_GetTick>
 8009108:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f003 0308 	and.w	r3, r3, #8
 8009114:	2b08      	cmp	r3, #8
 8009116:	d12f      	bne.n	8009178 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009118:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009120:	2200      	movs	r2, #0
 8009122:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f88e 	bl	8009248 <UART_WaitOnFlagUntilTimeout>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d022      	beq.n	8009178 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800913a:	e853 3f00 	ldrex	r3, [r3]
 800913e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009142:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009146:	653b      	str	r3, [r7, #80]	@ 0x50
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	461a      	mov	r2, r3
 800914e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009150:	647b      	str	r3, [r7, #68]	@ 0x44
 8009152:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009154:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009156:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009158:	e841 2300 	strex	r3, r2, [r1]
 800915c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800915e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009160:	2b00      	cmp	r3, #0
 8009162:	d1e6      	bne.n	8009132 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2220      	movs	r2, #32
 8009168:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009174:	2303      	movs	r3, #3
 8009176:	e063      	b.n	8009240 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 0304 	and.w	r3, r3, #4
 8009182:	2b04      	cmp	r3, #4
 8009184:	d149      	bne.n	800921a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009186:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800918e:	2200      	movs	r2, #0
 8009190:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 f857 	bl	8009248 <UART_WaitOnFlagUntilTimeout>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d03c      	beq.n	800921a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a8:	e853 3f00 	ldrex	r3, [r3]
 80091ac:	623b      	str	r3, [r7, #32]
   return(result);
 80091ae:	6a3b      	ldr	r3, [r7, #32]
 80091b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	461a      	mov	r2, r3
 80091bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091be:	633b      	str	r3, [r7, #48]	@ 0x30
 80091c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091c6:	e841 2300 	strex	r3, r2, [r1]
 80091ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d1e6      	bne.n	80091a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	3308      	adds	r3, #8
 80091d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	e853 3f00 	ldrex	r3, [r3]
 80091e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f023 0301 	bic.w	r3, r3, #1
 80091e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	3308      	adds	r3, #8
 80091f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091f2:	61fa      	str	r2, [r7, #28]
 80091f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f6:	69b9      	ldr	r1, [r7, #24]
 80091f8:	69fa      	ldr	r2, [r7, #28]
 80091fa:	e841 2300 	strex	r3, r2, [r1]
 80091fe:	617b      	str	r3, [r7, #20]
   return(result);
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1e5      	bne.n	80091d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2220      	movs	r2, #32
 800920a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009216:	2303      	movs	r3, #3
 8009218:	e012      	b.n	8009240 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2220      	movs	r2, #32
 800921e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2220      	movs	r2, #32
 8009226:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	3758      	adds	r7, #88	@ 0x58
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	603b      	str	r3, [r7, #0]
 8009254:	4613      	mov	r3, r2
 8009256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009258:	e04f      	b.n	80092fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009260:	d04b      	beq.n	80092fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009262:	f7f9 fbff 	bl	8002a64 <HAL_GetTick>
 8009266:	4602      	mov	r2, r0
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	69ba      	ldr	r2, [r7, #24]
 800926e:	429a      	cmp	r2, r3
 8009270:	d302      	bcc.n	8009278 <UART_WaitOnFlagUntilTimeout+0x30>
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009278:	2303      	movs	r3, #3
 800927a:	e04e      	b.n	800931a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 0304 	and.w	r3, r3, #4
 8009286:	2b00      	cmp	r3, #0
 8009288:	d037      	beq.n	80092fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2b80      	cmp	r3, #128	@ 0x80
 800928e:	d034      	beq.n	80092fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	2b40      	cmp	r3, #64	@ 0x40
 8009294:	d031      	beq.n	80092fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	69db      	ldr	r3, [r3, #28]
 800929c:	f003 0308 	and.w	r3, r3, #8
 80092a0:	2b08      	cmp	r3, #8
 80092a2:	d110      	bne.n	80092c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2208      	movs	r2, #8
 80092aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f000 f839 	bl	8009324 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2208      	movs	r2, #8
 80092b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e029      	b.n	800931a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	69db      	ldr	r3, [r3, #28]
 80092cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092d4:	d111      	bne.n	80092fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80092de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f000 f81f 	bl	8009324 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2220      	movs	r2, #32
 80092ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e00f      	b.n	800931a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	69da      	ldr	r2, [r3, #28]
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	4013      	ands	r3, r2
 8009304:	68ba      	ldr	r2, [r7, #8]
 8009306:	429a      	cmp	r2, r3
 8009308:	bf0c      	ite	eq
 800930a:	2301      	moveq	r3, #1
 800930c:	2300      	movne	r3, #0
 800930e:	b2db      	uxtb	r3, r3
 8009310:	461a      	mov	r2, r3
 8009312:	79fb      	ldrb	r3, [r7, #7]
 8009314:	429a      	cmp	r2, r3
 8009316:	d0a0      	beq.n	800925a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
	...

08009324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009324:	b480      	push	{r7}
 8009326:	b095      	sub	sp, #84	@ 0x54
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009334:	e853 3f00 	ldrex	r3, [r3]
 8009338:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800933a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009340:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	461a      	mov	r2, r3
 8009348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800934a:	643b      	str	r3, [r7, #64]	@ 0x40
 800934c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009350:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009352:	e841 2300 	strex	r3, r2, [r1]
 8009356:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1e6      	bne.n	800932c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3308      	adds	r3, #8
 8009364:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009366:	6a3b      	ldr	r3, [r7, #32]
 8009368:	e853 3f00 	ldrex	r3, [r3]
 800936c:	61fb      	str	r3, [r7, #28]
   return(result);
 800936e:	69fa      	ldr	r2, [r7, #28]
 8009370:	4b1e      	ldr	r3, [pc, #120]	@ (80093ec <UART_EndRxTransfer+0xc8>)
 8009372:	4013      	ands	r3, r2
 8009374:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	3308      	adds	r3, #8
 800937c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800937e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009380:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009382:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009384:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009386:	e841 2300 	strex	r3, r2, [r1]
 800938a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800938c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1e5      	bne.n	800935e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009396:	2b01      	cmp	r3, #1
 8009398:	d118      	bne.n	80093cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	e853 3f00 	ldrex	r3, [r3]
 80093a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	f023 0310 	bic.w	r3, r3, #16
 80093ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	461a      	mov	r2, r3
 80093b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093b8:	61bb      	str	r3, [r7, #24]
 80093ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093bc:	6979      	ldr	r1, [r7, #20]
 80093be:	69ba      	ldr	r2, [r7, #24]
 80093c0:	e841 2300 	strex	r3, r2, [r1]
 80093c4:	613b      	str	r3, [r7, #16]
   return(result);
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1e6      	bne.n	800939a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2220      	movs	r2, #32
 80093d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80093e0:	bf00      	nop
 80093e2:	3754      	adds	r7, #84	@ 0x54
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr
 80093ec:	effffffe 	.word	0xeffffffe

080093f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d101      	bne.n	8009406 <HAL_UARTEx_DisableFifoMode+0x16>
 8009402:	2302      	movs	r3, #2
 8009404:	e027      	b.n	8009456 <HAL_UARTEx_DisableFifoMode+0x66>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2224      	movs	r2, #36	@ 0x24
 8009412:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f022 0201 	bic.w	r2, r2, #1
 800942c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009434:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2220      	movs	r2, #32
 8009448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3714      	adds	r7, #20
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b084      	sub	sp, #16
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
 800946a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009472:	2b01      	cmp	r3, #1
 8009474:	d101      	bne.n	800947a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009476:	2302      	movs	r3, #2
 8009478:	e02d      	b.n	80094d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2201      	movs	r2, #1
 800947e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2224      	movs	r2, #36	@ 0x24
 8009486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f022 0201 	bic.w	r2, r2, #1
 80094a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	683a      	ldr	r2, [r7, #0]
 80094b2:	430a      	orrs	r2, r1
 80094b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f850 	bl	800955c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2220      	movs	r2, #32
 80094c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b084      	sub	sp, #16
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
 80094e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d101      	bne.n	80094f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80094f2:	2302      	movs	r3, #2
 80094f4:	e02d      	b.n	8009552 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2201      	movs	r2, #1
 80094fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2224      	movs	r2, #36	@ 0x24
 8009502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f022 0201 	bic.w	r2, r2, #1
 800951c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	430a      	orrs	r2, r1
 8009530:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f812 	bl	800955c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2220      	movs	r2, #32
 8009544:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
	...

0800955c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800955c:	b480      	push	{r7}
 800955e:	b085      	sub	sp, #20
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009568:	2b00      	cmp	r3, #0
 800956a:	d108      	bne.n	800957e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800957c:	e031      	b.n	80095e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800957e:	2310      	movs	r3, #16
 8009580:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009582:	2310      	movs	r3, #16
 8009584:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	0e5b      	lsrs	r3, r3, #25
 800958e:	b2db      	uxtb	r3, r3
 8009590:	f003 0307 	and.w	r3, r3, #7
 8009594:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	0f5b      	lsrs	r3, r3, #29
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	f003 0307 	and.w	r3, r3, #7
 80095a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095a6:	7bbb      	ldrb	r3, [r7, #14]
 80095a8:	7b3a      	ldrb	r2, [r7, #12]
 80095aa:	4911      	ldr	r1, [pc, #68]	@ (80095f0 <UARTEx_SetNbDataToProcess+0x94>)
 80095ac:	5c8a      	ldrb	r2, [r1, r2]
 80095ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80095b2:	7b3a      	ldrb	r2, [r7, #12]
 80095b4:	490f      	ldr	r1, [pc, #60]	@ (80095f4 <UARTEx_SetNbDataToProcess+0x98>)
 80095b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80095bc:	b29a      	uxth	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
 80095c6:	7b7a      	ldrb	r2, [r7, #13]
 80095c8:	4909      	ldr	r1, [pc, #36]	@ (80095f0 <UARTEx_SetNbDataToProcess+0x94>)
 80095ca:	5c8a      	ldrb	r2, [r1, r2]
 80095cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80095d0:	7b7a      	ldrb	r2, [r7, #13]
 80095d2:	4908      	ldr	r1, [pc, #32]	@ (80095f4 <UARTEx_SetNbDataToProcess+0x98>)
 80095d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80095da:	b29a      	uxth	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80095e2:	bf00      	nop
 80095e4:	3714      	adds	r7, #20
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	08009690 	.word	0x08009690
 80095f4:	08009698 	.word	0x08009698

080095f8 <memset>:
 80095f8:	4402      	add	r2, r0
 80095fa:	4603      	mov	r3, r0
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d100      	bne.n	8009602 <memset+0xa>
 8009600:	4770      	bx	lr
 8009602:	f803 1b01 	strb.w	r1, [r3], #1
 8009606:	e7f9      	b.n	80095fc <memset+0x4>

08009608 <__libc_init_array>:
 8009608:	b570      	push	{r4, r5, r6, lr}
 800960a:	4d0d      	ldr	r5, [pc, #52]	@ (8009640 <__libc_init_array+0x38>)
 800960c:	4c0d      	ldr	r4, [pc, #52]	@ (8009644 <__libc_init_array+0x3c>)
 800960e:	1b64      	subs	r4, r4, r5
 8009610:	10a4      	asrs	r4, r4, #2
 8009612:	2600      	movs	r6, #0
 8009614:	42a6      	cmp	r6, r4
 8009616:	d109      	bne.n	800962c <__libc_init_array+0x24>
 8009618:	4d0b      	ldr	r5, [pc, #44]	@ (8009648 <__libc_init_array+0x40>)
 800961a:	4c0c      	ldr	r4, [pc, #48]	@ (800964c <__libc_init_array+0x44>)
 800961c:	f000 f818 	bl	8009650 <_init>
 8009620:	1b64      	subs	r4, r4, r5
 8009622:	10a4      	asrs	r4, r4, #2
 8009624:	2600      	movs	r6, #0
 8009626:	42a6      	cmp	r6, r4
 8009628:	d105      	bne.n	8009636 <__libc_init_array+0x2e>
 800962a:	bd70      	pop	{r4, r5, r6, pc}
 800962c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009630:	4798      	blx	r3
 8009632:	3601      	adds	r6, #1
 8009634:	e7ee      	b.n	8009614 <__libc_init_array+0xc>
 8009636:	f855 3b04 	ldr.w	r3, [r5], #4
 800963a:	4798      	blx	r3
 800963c:	3601      	adds	r6, #1
 800963e:	e7f2      	b.n	8009626 <__libc_init_array+0x1e>
 8009640:	080096a8 	.word	0x080096a8
 8009644:	080096a8 	.word	0x080096a8
 8009648:	080096a8 	.word	0x080096a8
 800964c:	080096ac 	.word	0x080096ac

08009650 <_init>:
 8009650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009652:	bf00      	nop
 8009654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009656:	bc08      	pop	{r3}
 8009658:	469e      	mov	lr, r3
 800965a:	4770      	bx	lr

0800965c <_fini>:
 800965c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965e:	bf00      	nop
 8009660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009662:	bc08      	pop	{r3}
 8009664:	469e      	mov	lr, r3
 8009666:	4770      	bx	lr
