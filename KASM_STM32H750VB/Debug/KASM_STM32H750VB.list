
KASM_STM32H750VB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0e0  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800a378  0800a378  0000b378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a3b0  0800a3b0  0000b3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a3b8  0800a3b8  0000b3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a3bc  0800a3bc  0000b3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000018  24000000  0800a3c0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006ac  24000018  0800a3d8  0000c018  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240006c4  0800a3d8  0000c6c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c018  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020c2f  00000000  00000000  0000c046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003137  00000000  00000000  0002cc75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001aa0  00000000  00000000  0002fdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001520  00000000  00000000  00031850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a607  00000000  00000000  00032d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000219c9  00000000  00000000  0006d377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00180158  00000000  00000000  0008ed40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020ee98  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007548  00000000  00000000  0020eedc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  00216424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a360 	.word	0x0800a360

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	0800a360 	.word	0x0800a360

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <ldc1614_write_reg>:
#include "ldc1614.h"

extern I2C_HandleTypeDef hi2c1;

HAL_StatusTypeDef ldc1614_write_reg(LDC1614 *dev, uint8_t reg_addr, uint16_t data)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af04      	add	r7, sp, #16
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
 80005d4:	4613      	mov	r3, r2
 80005d6:	803b      	strh	r3, [r7, #0]

	//does the I2C Transmit function send the 0th entry first or
	//the 2nd entry first??
	uint8_t packet[2];
	packet[0] = data>>8;
 80005d8:	883b      	ldrh	r3, [r7, #0]
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	b29b      	uxth	r3, r3
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	733b      	strb	r3, [r7, #12]
	packet[1] = data & 0xFF;
 80005e2:	883b      	ldrh	r3, [r7, #0]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	737b      	strb	r3, [r7, #13]

	return HAL_I2C_Mem_Write(dev->i2c_handle, LDC1614_ADDR, reg_addr, 1, packet, 2, 100);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6818      	ldr	r0, [r3, #0]
 80005ec:	78fb      	ldrb	r3, [r7, #3]
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	2364      	movs	r3, #100	@ 0x64
 80005f2:	9302      	str	r3, [sp, #8]
 80005f4:	2302      	movs	r3, #2
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2301      	movs	r3, #1
 8000600:	2156      	movs	r1, #86	@ 0x56
 8000602:	f003 fc97 	bl	8003f34 <HAL_I2C_Mem_Write>
 8000606:	4603      	mov	r3, r0

}
 8000608:	4618      	mov	r0, r3
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <ldc1614_read_reg>:

HAL_StatusTypeDef ldc1614_read_reg(LDC1614 *dev, uint8_t reg_addr, uint8_t data[2])
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	@ 0x28
 8000614:	af04      	add	r7, sp, #16
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	460b      	mov	r3, r1
 800061a:	607a      	str	r2, [r7, #4]
 800061c:	72fb      	strb	r3, [r7, #11]

	//set Read bit to 1 for 2nd transaction
	uint8_t read_addr = (LDC1614_ADDR | 0x01);
 800061e:	2357      	movs	r3, #87	@ 0x57
 8000620:	75fb      	strb	r3, [r7, #23]

	return HAL_I2C_Mem_Read(dev->i2c_handle, read_addr, reg_addr, 1, data, 2, 100);
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	6818      	ldr	r0, [r3, #0]
 8000626:	7dfb      	ldrb	r3, [r7, #23]
 8000628:	b299      	uxth	r1, r3
 800062a:	7afb      	ldrb	r3, [r7, #11]
 800062c:	b29a      	uxth	r2, r3
 800062e:	2364      	movs	r3, #100	@ 0x64
 8000630:	9302      	str	r3, [sp, #8]
 8000632:	2302      	movs	r3, #2
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2301      	movs	r3, #1
 800063c:	f003 fd8e 	bl	800415c <HAL_I2C_Mem_Read>
 8000640:	4603      	mov	r3, r0

}
 8000642:	4618      	mov	r0, r3
 8000644:	3718      	adds	r7, #24
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <ldc1614_init>:

int ldc1614_init(LDC1614 *dev, I2C_HandleTypeDef *i2c_handle, int channel, int L_uH, int C_pF)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b084      	sub	sp, #16
 800064e:	af00      	add	r7, sp, #0
 8000650:	60f8      	str	r0, [r7, #12]
 8000652:	60b9      	str	r1, [r7, #8]
 8000654:	607a      	str	r2, [r7, #4]
 8000656:	603b      	str	r3, [r7, #0]

	dev->i2c_handle = i2c_handle; //tie the LDC1614 struct and the I2C handle together
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	68ba      	ldr	r2, [r7, #8]
 800065c:	601a      	str	r2, [r3, #0]
	//	When the LDC powers up, it enters into Sleep Mode and will wait for configuration.
	//	Once the device is configured, exit Sleep Mode and begin conversions
	//	by setting CONFIG.SLEEP_MODE_EN to b0.

	//maximum conversion interval --> highest resolution?
	ldc1614_write_reg(dev, LDC1614_RCOUNT0, 0xFFFF);
 800065e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000662:	2108      	movs	r1, #8
 8000664:	68f8      	ldr	r0, [r7, #12]
 8000666:	f7ff ffaf 	bl	80005c8 <ldc1614_write_reg>

	//	0x0000: Settle Time (tS0)= 32 ÷ ƒREF0
	//	0x0001: Settle Time (tS0)= 32 ÷ ƒREF0
	//	0x0002 - 0xFFFF: Settle Time (tS0)= (SETTLECOUNT0ˣ16) ÷ ƒREF0

	ldc1614_write_reg(dev, LDC1614_SETTLECOUNT0, 0x000A);
 800066a:	220a      	movs	r2, #10
 800066c:	2110      	movs	r1, #16
 800066e:	68f8      	ldr	r0, [r7, #12]
 8000670:	f7ff ffaa 	bl	80005c8 <ldc1614_write_reg>

	//	Don't divide either clk - reference or sensor
	ldc1614_write_reg(dev, LDC1614_CLOCK_DIVIDERS0, 0x1002);
 8000674:	f241 0202 	movw	r2, #4098	@ 0x1002
 8000678:	2114      	movs	r1, #20
 800067a:	68f8      	ldr	r0, [r7, #12]
 800067c:	f7ff ffa4 	bl	80005c8 <ldc1614_write_reg>

	//	don't report any errors
	ldc1614_write_reg(dev, LDC1614_ERROR_CONFIG, 0x0000);
 8000680:	2200      	movs	r2, #0
 8000682:	2119      	movs	r1, #25
 8000684:	68f8      	ldr	r0, [r7, #12]
 8000686:	f7ff ff9f 	bl	80005c8 <ldc1614_write_reg>

	//Enable Channel 0 in continuous mode, set Input deglitch bandwidth to 3.3MHz
	ldc1614_write_reg(dev, LDC1614_MUX_CONFIG, 0x020C);
 800068a:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 800068e:	211b      	movs	r1, #27
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f7ff ff99 	bl	80005c8 <ldc1614_write_reg>

	//Manually set sensor drive current on channel 0
	//Why don't they recommend to use automatic amplitude control??
	ldc1614_write_reg(dev, LDC1614_DRIVE_CURRENT0, 0x9000);
 8000696:	f44f 4210 	mov.w	r2, #36864	@ 0x9000
 800069a:	211e      	movs	r1, #30
 800069c:	68f8      	ldr	r0, [r7, #12]
 800069e:	f7ff ff93 	bl	80005c8 <ldc1614_write_reg>

	//Select active channel = ch 0, disable auto-amplitude correction and autocalibration, enable full current drive during sensor activation, select
	//external clock source, wake up device to start conversion. This register
	//write must occur last because device configuration is not permitted while
	//the LDC is in active mode.
	ldc1614_write_reg(dev, LDC1614_CONFIG, 0x1601);
 80006a2:	f241 6201 	movw	r2, #5633	@ 0x1601
 80006a6:	211a      	movs	r1, #26
 80006a8:	68f8      	ldr	r0, [r7, #12]
 80006aa:	f7ff ff8d 	bl	80005c8 <ldc1614_write_reg>

	return 0;
 80006ae:	2300      	movs	r3, #0
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <ldc1614_get_ch0_reading>:

uint32_t ldc1614_get_ch0_reading(LDC1614 *dev)

{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	uint32_t sensor_value = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
	uint8_t errors = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	76fb      	strb	r3, [r7, #27]
	uint8_t data_msb[2] = {0};
 80006c8:	2300      	movs	r3, #0
 80006ca:	823b      	strh	r3, [r7, #16]
	uint8_t data_lsb[2] = {0};
 80006cc:	2300      	movs	r3, #0
 80006ce:	81bb      	strh	r3, [r7, #12]
	int read_ok;

	//read MSB register
	read_ok = ldc1614_read_reg(dev, 0x00, data_msb);
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	461a      	mov	r2, r3
 80006d6:	2100      	movs	r1, #0
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ff99 	bl	8000610 <ldc1614_read_reg>
 80006de:	4603      	mov	r3, r0
 80006e0:	617b      	str	r3, [r7, #20]

	//read LSB register
	read_ok = ldc1614_read_reg(dev, 0x01, data_lsb);
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	461a      	mov	r2, r3
 80006e8:	2101      	movs	r1, #1
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f7ff ff90 	bl	8000610 <ldc1614_read_reg>
 80006f0:	4603      	mov	r3, r0
 80006f2:	617b      	str	r3, [r7, #20]

	sensor_value = (leftshift((data_msb[0]&0x0F),24) | leftshift(data_msb[1],16) | leftshift(data_lsb[0],8) | data_lsb[1]);
 80006f4:	7c3b      	ldrb	r3, [r7, #16]
 80006f6:	061b      	lsls	r3, r3, #24
 80006f8:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80006fc:	7c7b      	ldrb	r3, [r7, #17]
 80006fe:	041b      	lsls	r3, r3, #16
 8000700:	431a      	orrs	r2, r3
 8000702:	7b3b      	ldrb	r3, [r7, #12]
 8000704:	021b      	lsls	r3, r3, #8
 8000706:	4313      	orrs	r3, r2
 8000708:	7b7a      	ldrb	r2, [r7, #13]
 800070a:	4313      	orrs	r3, r2
 800070c:	61fb      	str	r3, [r7, #28]

	errors = (data_msb[0] >> 4) & 0x0F;
 800070e:	7c3b      	ldrb	r3, [r7, #16]
 8000710:	091b      	lsrs	r3, r3, #4
 8000712:	76fb      	strb	r3, [r7, #27]

	dev->sensor_readings[0] = sensor_value;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	69fa      	ldr	r2, [r7, #28]
 8000718:	605a      	str	r2, [r3, #4]

	return sensor_value;
 800071a:	69fb      	ldr	r3, [r7, #28]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3720      	adds	r7, #32
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	f6ad 7dd8 	subw	sp, sp, #4056	@ 0xfd8
 800072a:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	int channel = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	f8c7 3fc4 	str.w	r3, [r7, #4036]	@ 0xfc4
	int L_uH = 72;
 8000732:	2348      	movs	r3, #72	@ 0x48
 8000734:	f8c7 3fc0 	str.w	r3, [r7, #4032]	@ 0xfc0
	int C_pF = 330;
 8000738:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 800073c:	f8c7 3fbc 	str.w	r3, [r7, #4028]	@ 0xfbc
	volatile uint32_t readings[NSAMPS] = {0};
 8000740:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8000744:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 8000748:	4618      	mov	r0, r3
 800074a:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800074e:	461a      	mov	r2, r3
 8000750:	2100      	movs	r1, #0
 8000752:	f009 fdd9 	bl	800a308 <memset>
	int ct = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	f8c7 3fcc 	str.w	r3, [r7, #4044]	@ 0xfcc
	int cycle_count = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	f8c7 3fc8 	str.w	r3, [r7, #4040]	@ 0xfc8

	uint8_t data[2] = {0};
 8000762:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8000766:	f6a3 73b8 	subw	r3, r3, #4024	@ 0xfb8
 800076a:	2200      	movs	r2, #0
 800076c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076e:	f002 fa1b 	bl	8002ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000772:	f000 f8c3 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000776:	f001 f941 	bl	80019fc <MX_GPIO_Init>
  MX_HRTIM_Init();
 800077a:	f000 f96d 	bl	8000a58 <MX_HRTIM_Init>
  MX_I2C4_Init();
 800077e:	f000 fac5 	bl	8000d0c <MX_I2C4_Init>
  MX_LPTIM1_Init();
 8000782:	f000 fb03 	bl	8000d8c <MX_LPTIM1_Init>
  MX_LPTIM2_Init();
 8000786:	f000 fb2d 	bl	8000de4 <MX_LPTIM2_Init>
  MX_LPTIM3_Init();
 800078a:	f000 fb57 	bl	8000e3c <MX_LPTIM3_Init>
  MX_SPI2_Init();
 800078e:	f000 fb7f 	bl	8000e90 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000792:	f000 fc23 	bl	8000fdc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000796:	f000 fcf1 	bl	800117c <MX_TIM2_Init>
  MX_TIM4_Init();
 800079a:	f000 fd55 	bl	8001248 <MX_TIM4_Init>
  MX_TIM5_Init();
 800079e:	f000 fdeb 	bl	8001378 <MX_TIM5_Init>
  MX_TIM8_Init();
 80007a2:	f000 fe4f 	bl	8001444 <MX_TIM8_Init>
  MX_TIM12_Init();
 80007a6:	f000 fedb 	bl	8001560 <MX_TIM12_Init>
  MX_TIM13_Init();
 80007aa:	f000 ff33 	bl	8001614 <MX_TIM13_Init>
  MX_TIM14_Init();
 80007ae:	f000 ff7f 	bl	80016b0 <MX_TIM14_Init>
  MX_TIM15_Init();
 80007b2:	f000 ffcb 	bl	800174c <MX_TIM15_Init>
  MX_TIM16_Init();
 80007b6:	f001 f85b 	bl	8001870 <MX_TIM16_Init>
  MX_UART4_Init();
 80007ba:	f001 f8d3 	bl	8001964 <MX_UART4_Init>
  MX_SPI6_Init();
 80007be:	f000 fbbd 	bl	8000f3c <MX_SPI6_Init>
  /* USER CODE BEGIN 2 */
  /* enable VSS */
  HAL_GPIO_WritePin(ACTUATOR_ENABLE_MCU_GPIO_Port, ACTUATOR_ENABLE_MCU_Pin, GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007c8:	4845      	ldr	r0, [pc, #276]	@ (80008e0 <main+0x1bc>)
 80007ca:	f002 fd4b 	bl	8003264 <HAL_GPIO_WritePin>

  // Timer 1 initialization
  // Timer 1 serves as the main timer and is interrupted by period end
  HAL_TIM_Base_Start_IT(&htim1);
 80007ce:	4845      	ldr	r0, [pc, #276]	@ (80008e4 <main+0x1c0>)
 80007d0:	f007 fa3a 	bl	8007c48 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007d4:	2100      	movs	r1, #0
 80007d6:	4843      	ldr	r0, [pc, #268]	@ (80008e4 <main+0x1c0>)
 80007d8:	f007 fb06 	bl	8007de8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80007dc:	2104      	movs	r1, #4
 80007de:	4841      	ldr	r0, [pc, #260]	@ (80008e4 <main+0x1c0>)
 80007e0:	f007 fb02 	bl	8007de8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80007e4:	2108      	movs	r1, #8
 80007e6:	483f      	ldr	r0, [pc, #252]	@ (80008e4 <main+0x1c0>)
 80007e8:	f007 fafe 	bl	8007de8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80007ec:	210c      	movs	r1, #12
 80007ee:	483d      	ldr	r0, [pc, #244]	@ (80008e4 <main+0x1c0>)
 80007f0:	f007 fafa 	bl	8007de8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM1_CH1_PHASE_GPIO_Port, TIM1_CH1_PHASE_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2101      	movs	r1, #1
 80007f8:	483b      	ldr	r0, [pc, #236]	@ (80008e8 <main+0x1c4>)
 80007fa:	f002 fd33 	bl	8003264 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH2_PHASE_GPIO_Port, TIM1_CH2_PHASE_Pin, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	2102      	movs	r1, #2
 8000802:	4839      	ldr	r0, [pc, #228]	@ (80008e8 <main+0x1c4>)
 8000804:	f002 fd2e 	bl	8003264 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH3_PHASE_GPIO_Port, TIM1_CH3_PHASE_Pin, GPIO_PIN_SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2104      	movs	r1, #4
 800080c:	4836      	ldr	r0, [pc, #216]	@ (80008e8 <main+0x1c4>)
 800080e:	f002 fd29 	bl	8003264 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH4_PHASE_GPIO_Port, TIM1_CH4_PHASE_Pin, GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	2108      	movs	r1, #8
 8000816:	4834      	ldr	r0, [pc, #208]	@ (80008e8 <main+0x1c4>)
 8000818:	f002 fd24 	bl	8003264 <HAL_GPIO_WritePin>

  //Timer 2 ch 4 is used as an oscillator for the eddy current sensor
  HAL_TIM_Base_Start(&htim2);
 800081c:	4833      	ldr	r0, [pc, #204]	@ (80008ec <main+0x1c8>)
 800081e:	f007 f9a3 	bl	8007b68 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000822:	210c      	movs	r1, #12
 8000824:	4831      	ldr	r0, [pc, #196]	@ (80008ec <main+0x1c8>)
 8000826:	f007 fadf 	bl	8007de8 <HAL_TIM_PWM_Start>

  // End Timer 1

  ldc1614_init(&dev, &hi2c4, channel, L_uH, C_pF);
 800082a:	1d38      	adds	r0, r7, #4
 800082c:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	@ 0xfbc
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	f8d7 3fc0 	ldr.w	r3, [r7, #4032]	@ 0xfc0
 8000836:	f8d7 2fc4 	ldr.w	r2, [r7, #4036]	@ 0xfc4
 800083a:	492d      	ldr	r1, [pc, #180]	@ (80008f0 <main+0x1cc>)
 800083c:	f7ff ff05 	bl	800064a <ldc1614_init>


  ldc1614_read_reg(&dev, LDC1614_DEVICE_ID, data);
 8000840:	f107 0218 	add.w	r2, r7, #24
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	217f      	movs	r1, #127	@ 0x7f
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fee1 	bl	8000610 <ldc1614_read_reg>
  ldc1614_read_reg(&dev, LDC1614_STATUS, data);
 800084e:	f107 0218 	add.w	r2, r7, #24
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2118      	movs	r1, #24
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff feda 	bl	8000610 <ldc1614_read_reg>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ctrl_tmr_expired == TRUE) {
 800085c:	4b25      	ldr	r3, [pc, #148]	@ (80008f4 <main+0x1d0>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d1fb      	bne.n	800085c <main+0x138>
		  control_update(ref);
 8000864:	4b24      	ldr	r3, [pc, #144]	@ (80008f8 <main+0x1d4>)
 8000866:	ed93 7b00 	vldr	d7, [r3]
 800086a:	eeb0 0b47 	vmov.f64	d0, d7
 800086e:	f001 fa07 	bl	8001c80 <control_update>
		  cycle_count += 1;
 8000872:	f8d7 3fc8 	ldr.w	r3, [r7, #4040]	@ 0xfc8
 8000876:	3301      	adds	r3, #1
 8000878:	f8c7 3fc8 	str.w	r3, [r7, #4040]	@ 0xfc8
//		  if (cycle_count == 1000) {
//			  cycle_count = 0; // reset cycle counter

			  data[1] = 0;
 800087c:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8000880:	f6a3 73b8 	subw	r3, r3, #4024	@ 0xfb8
 8000884:	2200      	movs	r2, #0
 8000886:	705a      	strb	r2, [r3, #1]
			  ldc1614_read_reg(&dev, LDC1614_STATUS, data); // check for new data
 8000888:	f107 0218 	add.w	r2, r7, #24
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2118      	movs	r1, #24
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff febd 	bl	8000610 <ldc1614_read_reg>
			  if((data[1] & 0x08) !=0){ // if new data available
 8000896:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 800089a:	f6a3 73b8 	subw	r3, r3, #4024	@ 0xfb8
 800089e:	785b      	ldrb	r3, [r3, #1]
 80008a0:	f003 0308 	and.w	r3, r3, #8
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d011      	beq.n	80008cc <main+0x1a8>
				  readings[ct] = ldc1614_get_ch0_reading(&dev); // get a sample
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ff04 	bl	80006b8 <ldc1614_get_ch0_reading>
 80008b0:	4601      	mov	r1, r0
 80008b2:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 80008b6:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 80008ba:	f8d7 2fcc 	ldr.w	r2, [r7, #4044]	@ 0xfcc
 80008be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				  ct++; // increment sample counter
 80008c2:	f8d7 3fcc 	ldr.w	r3, [r7, #4044]	@ 0xfcc
 80008c6:	3301      	adds	r3, #1
 80008c8:	f8c7 3fcc 	str.w	r3, [r7, #4044]	@ 0xfcc
			  }
			  if(ct == NSAMPS) {
 80008cc:	f8d7 3fcc 	ldr.w	r3, [r7, #4044]	@ 0xfcc
 80008d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80008d4:	d1c2      	bne.n	800085c <main+0x138>
				  ct = 0; // reset sample counter
 80008d6:	2300      	movs	r3, #0
 80008d8:	f8c7 3fcc 	str.w	r3, [r7, #4044]	@ 0xfcc
	  if(ctrl_tmr_expired == TRUE) {
 80008dc:	e7be      	b.n	800085c <main+0x138>
 80008de:	bf00      	nop
 80008e0:	58020000 	.word	0x58020000
 80008e4:	2400031c 	.word	0x2400031c
 80008e8:	58021000 	.word	0x58021000
 80008ec:	24000368 	.word	0x24000368
 80008f0:	24000110 	.word	0x24000110
 80008f4:	240006a8 	.word	0x240006a8
 80008f8:	240006b0 	.word	0x240006b0

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b09e      	sub	sp, #120	@ 0x78
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000906:	224c      	movs	r2, #76	@ 0x4c
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f009 fcfc 	bl	800a308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	2220      	movs	r2, #32
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f009 fcf5 	bl	800a308 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800091e:	2002      	movs	r0, #2
 8000920:	f004 f940 	bl	8004ba4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	4b48      	ldr	r3, [pc, #288]	@ (8000a4c <SystemClock_Config+0x150>)
 800092a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800092c:	4a47      	ldr	r2, [pc, #284]	@ (8000a4c <SystemClock_Config+0x150>)
 800092e:	f023 0301 	bic.w	r3, r3, #1
 8000932:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000934:	4b45      	ldr	r3, [pc, #276]	@ (8000a4c <SystemClock_Config+0x150>)
 8000936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000938:	f003 0301 	and.w	r3, r3, #1
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	4b44      	ldr	r3, [pc, #272]	@ (8000a50 <SystemClock_Config+0x154>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	4a43      	ldr	r2, [pc, #268]	@ (8000a50 <SystemClock_Config+0x154>)
 8000944:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000948:	6193      	str	r3, [r2, #24]
 800094a:	4b41      	ldr	r3, [pc, #260]	@ (8000a50 <SystemClock_Config+0x154>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000956:	bf00      	nop
 8000958:	4b3d      	ldr	r3, [pc, #244]	@ (8000a50 <SystemClock_Config+0x154>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000960:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000964:	d1f8      	bne.n	8000958 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b3b      	ldr	r3, [pc, #236]	@ (8000a54 <SystemClock_Config+0x158>)
 8000968:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800096c:	4a39      	ldr	r2, [pc, #228]	@ (8000a54 <SystemClock_Config+0x158>)
 800096e:	f043 0302 	orr.w	r3, r3, #2
 8000972:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000976:	4b37      	ldr	r3, [pc, #220]	@ (8000a54 <SystemClock_Config+0x158>)
 8000978:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000984:	2300      	movs	r3, #0
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	4b31      	ldr	r3, [pc, #196]	@ (8000a50 <SystemClock_Config+0x154>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a30      	ldr	r2, [pc, #192]	@ (8000a50 <SystemClock_Config+0x154>)
 800098e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b2e      	ldr	r3, [pc, #184]	@ (8000a50 <SystemClock_Config+0x154>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b2b      	ldr	r3, [pc, #172]	@ (8000a4c <SystemClock_Config+0x150>)
 80009a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009a2:	4a2a      	ldr	r2, [pc, #168]	@ (8000a4c <SystemClock_Config+0x150>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009aa:	4b28      	ldr	r3, [pc, #160]	@ (8000a4c <SystemClock_Config+0x150>)
 80009ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009b6:	bf00      	nop
 80009b8:	4b25      	ldr	r3, [pc, #148]	@ (8000a50 <SystemClock_Config+0x154>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009c4:	d1f8      	bne.n	80009b8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c6:	2301      	movs	r3, #1
 80009c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d0:	2302      	movs	r3, #2
 80009d2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d4:	2302      	movs	r3, #2
 80009d6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 80009d8:	2302      	movs	r3, #2
 80009da:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80009dc:	2350      	movs	r3, #80	@ 0x50
 80009de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 80009e4:	230f      	movs	r3, #15
 80009e6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009ec:	230c      	movs	r3, #12
 80009ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009fc:	4618      	mov	r0, r3
 80009fe:	f004 f90b 	bl	8004c18 <HAL_RCC_OscConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000a08:	f001 f9d2 	bl	8001db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0c:	233f      	movs	r3, #63	@ 0x3f
 8000a0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a10:	2303      	movs	r3, #3
 8000a12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a1c:	2340      	movs	r3, #64	@ 0x40
 8000a1e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a20:	2340      	movs	r3, #64	@ 0x40
 8000a22:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a28:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a2a:	2340      	movs	r3, #64	@ 0x40
 8000a2c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	2104      	movs	r1, #4
 8000a34:	4618      	mov	r0, r3
 8000a36:	f004 fd49 	bl	80054cc <HAL_RCC_ClockConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000a40:	f001 f9b6 	bl	8001db0 <Error_Handler>
  }
}
 8000a44:	bf00      	nop
 8000a46:	3778      	adds	r7, #120	@ 0x78
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	58000400 	.word	0x58000400
 8000a50:	58024800 	.word	0x58024800
 8000a54:	58024400 	.word	0x58024400

08000a58 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b0a4      	sub	sp, #144	@ 0x90
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000a5e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000a6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a70:	2254      	movs	r2, #84	@ 0x54
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f009 fc47 	bl	800a308 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	2220      	movs	r2, #32
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f009 fc40 	bl	800a308 <memset>
  HRTIM_SimplePWMChannelCfgTypeDef pSimplePWMChannelCfg = {0};
 8000a88:	463b      	mov	r3, r7
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8000a92:	4b9c      	ldr	r3, [pc, #624]	@ (8000d04 <MX_HRTIM_Init+0x2ac>)
 8000a94:	4a9c      	ldr	r2, [pc, #624]	@ (8000d08 <MX_HRTIM_Init+0x2b0>)
 8000a96:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000a98:	4b9a      	ldr	r3, [pc, #616]	@ (8000d04 <MX_HRTIM_Init+0x2ac>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000a9e:	4b99      	ldr	r3, [pc, #612]	@ (8000d04 <MX_HRTIM_Init+0x2ac>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8000aa4:	4897      	ldr	r0, [pc, #604]	@ (8000d04 <MX_HRTIM_Init+0x2ac>)
 8000aa6:	f002 fbf7 	bl	8003298 <HAL_HRTIM_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 8000ab0:	f001 f97e 	bl	8001db0 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFFD;
 8000ab4:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8000ab8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000ac2:	2305      	movs	r3, #5
 8000ac4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000ac8:	2308      	movs	r3, #8
 8000aca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 8000ace:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	2105      	movs	r1, #5
 8000ad6:	488b      	ldr	r0, [pc, #556]	@ (8000d04 <MX_HRTIM_Init+0x2ac>)
 8000ad8:	f002 fcae 	bl	8003438 <HAL_HRTIM_TimeBaseConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 8000ae2:	f001 f965 	bl	8001db0 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8000aee:	2300      	movs	r3, #0
 8000af0:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8000af2:	2300      	movs	r3, #0
 8000af4:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.DMASize = 0x1;
 8000af6:	2301      	movs	r3, #1
 8000af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000afa:	2300      	movs	r3, #0
 8000afc:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000afe:	2300      	movs	r3, #0
 8000b00:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000b02:	2300      	movs	r3, #0
 8000b04:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000b12:	2300      	movs	r3, #0
 8000b14:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000b16:	2300      	movs	r3, #0
 8000b18:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8000b1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b1e:	461a      	mov	r2, r3
 8000b20:	2105      	movs	r1, #5
 8000b22:	4878      	ldr	r0, [pc, #480]	@ (8000d04 <MX_HRTIM_Init+0x2ac>)
 8000b24:	f002 fd78 	bl	8003618 <HAL_HRTIM_WaveformTimerConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_HRTIM_Init+0xda>
  {
    Error_Handler();
 8000b2e:	f001 f93f 	bl	8001db0 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000b32:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000b36:	461a      	mov	r2, r3
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4872      	ldr	r0, [pc, #456]	@ (8000d04 <MX_HRTIM_Init+0x2ac>)
 8000b3c:	f002 fc7c 	bl	8003438 <HAL_HRTIM_TimeBaseConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_HRTIM_Init+0xf2>
  {
    Error_Handler();
 8000b46:	f001 f933 	bl	8001db0 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8000b52:	2300      	movs	r3, #0
 8000b54:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8000b62:	2300      	movs	r3, #0
 8000b64:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8000b72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b76:	461a      	mov	r2, r3
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4862      	ldr	r0, [pc, #392]	@ (8000d04 <MX_HRTIM_Init+0x2ac>)
 8000b7c:	f002 fd4c 	bl	8003618 <HAL_HRTIM_WaveformTimerConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_HRTIM_Init+0x132>
  {
    Error_Handler();
 8000b86:	f001 f913 	bl	8001db0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8000b8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b8e:	461a      	mov	r2, r3
 8000b90:	2101      	movs	r1, #1
 8000b92:	485c      	ldr	r0, [pc, #368]	@ (8000d04 <MX_HRTIM_Init+0x2ac>)
 8000b94:	f002 fd40 	bl	8003618 <HAL_HRTIM_WaveformTimerConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_HRTIM_Init+0x14a>
  {
    Error_Handler();
 8000b9e:	f001 f907 	bl	8001db0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8000ba2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	2102      	movs	r1, #2
 8000baa:	4856      	ldr	r0, [pc, #344]	@ (8000d04 <MX_HRTIM_Init+0x2ac>)
 8000bac:	f002 fd34 	bl	8003618 <HAL_HRTIM_WaveformTimerConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_HRTIM_Init+0x162>
  {
    Error_Handler();
 8000bb6:	f001 f8fb 	bl	8001db0 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	2201      	movs	r2, #1
 8000be0:	2100      	movs	r1, #0
 8000be2:	4848      	ldr	r0, [pc, #288]	@ (8000d04 <MX_HRTIM_Init+0x2ac>)
 8000be4:	f002 fd8a 	bl	80036fc <HAL_HRTIM_WaveformOutputConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 8000bee:	f001 f8df 	bl	8001db0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8000bf2:	f107 030c 	add.w	r3, r7, #12
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	4842      	ldr	r0, [pc, #264]	@ (8000d04 <MX_HRTIM_Init+0x2ac>)
 8000bfc:	f002 fd7e 	bl	80036fc <HAL_HRTIM_WaveformOutputConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_HRTIM_Init+0x1b2>
  {
    Error_Handler();
 8000c06:	f001 f8d3 	bl	8001db0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	2210      	movs	r2, #16
 8000c10:	2102      	movs	r1, #2
 8000c12:	483c      	ldr	r0, [pc, #240]	@ (8000d04 <MX_HRTIM_Init+0x2ac>)
 8000c14:	f002 fd72 	bl	80036fc <HAL_HRTIM_WaveformOutputConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_HRTIM_Init+0x1ca>
  {
    Error_Handler();
 8000c1e:	f001 f8c7 	bl	8001db0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8000c22:	f107 030c 	add.w	r3, r7, #12
 8000c26:	2202      	movs	r2, #2
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4836      	ldr	r0, [pc, #216]	@ (8000d04 <MX_HRTIM_Init+0x2ac>)
 8000c2c:	f002 fd66 	bl	80036fc <HAL_HRTIM_WaveformOutputConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_HRTIM_Init+0x1e2>
  {
    Error_Handler();
 8000c36:	f001 f8bb 	bl	8001db0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	2208      	movs	r2, #8
 8000c40:	2101      	movs	r1, #1
 8000c42:	4830      	ldr	r0, [pc, #192]	@ (8000d04 <MX_HRTIM_Init+0x2ac>)
 8000c44:	f002 fd5a 	bl	80036fc <HAL_HRTIM_WaveformOutputConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_HRTIM_Init+0x1fa>
  {
    Error_Handler();
 8000c4e:	f001 f8af 	bl	8001db0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	2220      	movs	r2, #32
 8000c58:	2102      	movs	r1, #2
 8000c5a:	482a      	ldr	r0, [pc, #168]	@ (8000d04 <MX_HRTIM_Init+0x2ac>)
 8000c5c:	f002 fd4e 	bl	80036fc <HAL_HRTIM_WaveformOutputConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 8000c66:	f001 f8a3 	bl	8001db0 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8000c6a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000c6e:	461a      	mov	r2, r3
 8000c70:	2101      	movs	r1, #1
 8000c72:	4824      	ldr	r0, [pc, #144]	@ (8000d04 <MX_HRTIM_Init+0x2ac>)
 8000c74:	f002 fbe0 	bl	8003438 <HAL_HRTIM_TimeBaseConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_HRTIM_Init+0x22a>
  {
    Error_Handler();
 8000c7e:	f001 f897 	bl	8001db0 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8000c82:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000c86:	461a      	mov	r2, r3
 8000c88:	2102      	movs	r1, #2
 8000c8a:	481e      	ldr	r0, [pc, #120]	@ (8000d04 <MX_HRTIM_Init+0x2ac>)
 8000c8c:	f002 fbd4 	bl	8003438 <HAL_HRTIM_TimeBaseConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_HRTIM_Init+0x242>
  {
    Error_Handler();
 8000c96:	f001 f88b 	bl	8001db0 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000c9a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	2103      	movs	r1, #3
 8000ca2:	4818      	ldr	r0, [pc, #96]	@ (8000d04 <MX_HRTIM_Init+0x2ac>)
 8000ca4:	f002 fbc8 	bl	8003438 <HAL_HRTIM_TimeBaseConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_HRTIM_Init+0x25a>
  {
    Error_Handler();
 8000cae:	f001 f87f 	bl	8001db0 <Error_Handler>
  }
  pSimplePWMChannelCfg.Pulse = 0xFFFD;
 8000cb2:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8000cb6:	603b      	str	r3, [r7, #0]
  pSimplePWMChannelCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	607b      	str	r3, [r7, #4]
  pSimplePWMChannelCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_SimplePWMChannelConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pSimplePWMChannelCfg) != HAL_OK)
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	2240      	movs	r2, #64	@ 0x40
 8000cc4:	2103      	movs	r1, #3
 8000cc6:	480f      	ldr	r0, [pc, #60]	@ (8000d04 <MX_HRTIM_Init+0x2ac>)
 8000cc8:	f002 fbde 	bl	8003488 <HAL_HRTIM_SimplePWMChannelConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_HRTIM_Init+0x27e>
  {
    Error_Handler();
 8000cd2:	f001 f86d 	bl	8001db0 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFF00;
 8000cd6:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000cda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8000cde:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	2104      	movs	r1, #4
 8000ce6:	4807      	ldr	r0, [pc, #28]	@ (8000d04 <MX_HRTIM_Init+0x2ac>)
 8000ce8:	f002 fba6 	bl	8003438 <HAL_HRTIM_TimeBaseConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_HRTIM_Init+0x29e>
  {
    Error_Handler();
 8000cf2:	f001 f85d 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8000cf6:	4803      	ldr	r0, [pc, #12]	@ (8000d04 <MX_HRTIM_Init+0x2ac>)
 8000cf8:	f001 f8b4 	bl	8001e64 <HAL_HRTIM_MspPostInit>

}
 8000cfc:	bf00      	nop
 8000cfe:	3790      	adds	r7, #144	@ 0x90
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	24000034 	.word	0x24000034
 8000d08:	40017400 	.word	0x40017400

08000d0c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000d10:	4b1b      	ldr	r3, [pc, #108]	@ (8000d80 <MX_I2C4_Init+0x74>)
 8000d12:	4a1c      	ldr	r2, [pc, #112]	@ (8000d84 <MX_I2C4_Init+0x78>)
 8000d14:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000d16:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <MX_I2C4_Init+0x74>)
 8000d18:	4a1b      	ldr	r2, [pc, #108]	@ (8000d88 <MX_I2C4_Init+0x7c>)
 8000d1a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000d1c:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <MX_I2C4_Init+0x74>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d22:	4b17      	ldr	r3, [pc, #92]	@ (8000d80 <MX_I2C4_Init+0x74>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d28:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <MX_I2C4_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d2e:	4b14      	ldr	r3, [pc, #80]	@ (8000d80 <MX_I2C4_Init+0x74>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d34:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <MX_I2C4_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <MX_I2C4_Init+0x74>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <MX_I2C4_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000d46:	480e      	ldr	r0, [pc, #56]	@ (8000d80 <MX_I2C4_Init+0x74>)
 8000d48:	f003 f858 	bl	8003dfc <HAL_I2C_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000d52:	f001 f82d 	bl	8001db0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d56:	2100      	movs	r1, #0
 8000d58:	4809      	ldr	r0, [pc, #36]	@ (8000d80 <MX_I2C4_Init+0x74>)
 8000d5a:	f003 fddb 	bl	8004914 <HAL_I2CEx_ConfigAnalogFilter>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000d64:	f001 f824 	bl	8001db0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <MX_I2C4_Init+0x74>)
 8000d6c:	f003 fe1d 	bl	80049aa <HAL_I2CEx_ConfigDigitalFilter>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000d76:	f001 f81b 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	24000110 	.word	0x24000110
 8000d84:	58001c00 	.word	0x58001c00
 8000d88:	307075b1 	.word	0x307075b1

08000d8c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000d90:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <MX_LPTIM1_Init+0x50>)
 8000d92:	4a13      	ldr	r2, [pc, #76]	@ (8000de0 <MX_LPTIM1_Init+0x54>)
 8000d94:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000d96:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <MX_LPTIM1_Init+0x50>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <MX_LPTIM1_Init+0x50>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <MX_LPTIM1_Init+0x50>)
 8000da4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000da8:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000daa:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <MX_LPTIM1_Init+0x50>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000db0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ddc <MX_LPTIM1_Init+0x50>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000db6:	4b09      	ldr	r3, [pc, #36]	@ (8000ddc <MX_LPTIM1_Init+0x50>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000dbc:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <MX_LPTIM1_Init+0x50>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000dc2:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <MX_LPTIM1_Init+0x50>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000dc8:	4804      	ldr	r0, [pc, #16]	@ (8000ddc <MX_LPTIM1_Init+0x50>)
 8000dca:	f003 fe3b 	bl	8004a44 <HAL_LPTIM_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8000dd4:	f000 ffec 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	24000164 	.word	0x24000164
 8000de0:	40002400 	.word	0x40002400

08000de4 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 8000de8:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <MX_LPTIM2_Init+0x50>)
 8000dea:	4a13      	ldr	r2, [pc, #76]	@ (8000e38 <MX_LPTIM2_Init+0x54>)
 8000dec:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000dee:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <MX_LPTIM2_Init+0x50>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <MX_LPTIM2_Init+0x50>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <MX_LPTIM2_Init+0x50>)
 8000dfc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e00:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000e02:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <MX_LPTIM2_Init+0x50>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000e08:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <MX_LPTIM2_Init+0x50>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	@ (8000e34 <MX_LPTIM2_Init+0x50>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000e14:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <MX_LPTIM2_Init+0x50>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <MX_LPTIM2_Init+0x50>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8000e20:	4804      	ldr	r0, [pc, #16]	@ (8000e34 <MX_LPTIM2_Init+0x50>)
 8000e22:	f003 fe0f 	bl	8004a44 <HAL_LPTIM_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_LPTIM2_Init+0x4c>
  {
    Error_Handler();
 8000e2c:	f000 ffc0 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	2400019c 	.word	0x2400019c
 8000e38:	58002400 	.word	0x58002400

08000e3c <MX_LPTIM3_Init>:
  * @brief LPTIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM3_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM3_Init 0 */

  /* USER CODE BEGIN LPTIM3_Init 1 */

  /* USER CODE END LPTIM3_Init 1 */
  hlptim3.Instance = LPTIM3;
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <MX_LPTIM3_Init+0x4c>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <MX_LPTIM3_Init+0x50>)
 8000e44:	601a      	str	r2, [r3, #0]
  hlptim3.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000e46:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <MX_LPTIM3_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	605a      	str	r2, [r3, #4]
  hlptim3.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <MX_LPTIM3_Init+0x4c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  hlptim3.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000e52:	4b0d      	ldr	r3, [pc, #52]	@ (8000e88 <MX_LPTIM3_Init+0x4c>)
 8000e54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e58:	615a      	str	r2, [r3, #20]
  hlptim3.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <MX_LPTIM3_Init+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	621a      	str	r2, [r3, #32]
  hlptim3.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000e60:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <MX_LPTIM3_Init+0x4c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim3.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000e66:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <MX_LPTIM3_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim3.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <MX_LPTIM3_Init+0x4c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_LPTIM_Init(&hlptim3) != HAL_OK)
 8000e72:	4805      	ldr	r0, [pc, #20]	@ (8000e88 <MX_LPTIM3_Init+0x4c>)
 8000e74:	f003 fde6 	bl	8004a44 <HAL_LPTIM_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_LPTIM3_Init+0x46>
  {
    Error_Handler();
 8000e7e:	f000 ff97 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM3_Init 2 */

  /* USER CODE END LPTIM3_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	240001d4 	.word	0x240001d4
 8000e8c:	58002800 	.word	0x58002800

08000e90 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e94:	4b27      	ldr	r3, [pc, #156]	@ (8000f34 <MX_SPI2_Init+0xa4>)
 8000e96:	4a28      	ldr	r2, [pc, #160]	@ (8000f38 <MX_SPI2_Init+0xa8>)
 8000e98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e9a:	4b26      	ldr	r3, [pc, #152]	@ (8000f34 <MX_SPI2_Init+0xa4>)
 8000e9c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ea0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ea2:	4b24      	ldr	r3, [pc, #144]	@ (8000f34 <MX_SPI2_Init+0xa4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ea8:	4b22      	ldr	r3, [pc, #136]	@ (8000f34 <MX_SPI2_Init+0xa4>)
 8000eaa:	2203      	movs	r2, #3
 8000eac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eae:	4b21      	ldr	r3, [pc, #132]	@ (8000f34 <MX_SPI2_Init+0xa4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f34 <MX_SPI2_Init+0xa4>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000eba:	4b1e      	ldr	r3, [pc, #120]	@ (8000f34 <MX_SPI2_Init+0xa4>)
 8000ebc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ec0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f34 <MX_SPI2_Init+0xa4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f34 <MX_SPI2_Init+0xa4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ece:	4b19      	ldr	r3, [pc, #100]	@ (8000f34 <MX_SPI2_Init+0xa4>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed4:	4b17      	ldr	r3, [pc, #92]	@ (8000f34 <MX_SPI2_Init+0xa4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000eda:	4b16      	ldr	r3, [pc, #88]	@ (8000f34 <MX_SPI2_Init+0xa4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ee0:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <MX_SPI2_Init+0xa4>)
 8000ee2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ee6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <MX_SPI2_Init+0xa4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000eee:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <MX_SPI2_Init+0xa4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <MX_SPI2_Init+0xa4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <MX_SPI2_Init+0xa4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <MX_SPI2_Init+0xa4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	@ (8000f34 <MX_SPI2_Init+0xa4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f0c:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <MX_SPI2_Init+0xa4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f12:	4b08      	ldr	r3, [pc, #32]	@ (8000f34 <MX_SPI2_Init+0xa4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f18:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <MX_SPI2_Init+0xa4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f1e:	4805      	ldr	r0, [pc, #20]	@ (8000f34 <MX_SPI2_Init+0xa4>)
 8000f20:	f006 fc8c 	bl	800783c <HAL_SPI_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000f2a:	f000 ff41 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	2400020c 	.word	0x2400020c
 8000f38:	40003800 	.word	0x40003800

08000f3c <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 8000f40:	4b24      	ldr	r3, [pc, #144]	@ (8000fd4 <MX_SPI6_Init+0x98>)
 8000f42:	4a25      	ldr	r2, [pc, #148]	@ (8000fd8 <MX_SPI6_Init+0x9c>)
 8000f44:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_SLAVE;
 8000f46:	4b23      	ldr	r3, [pc, #140]	@ (8000fd4 <MX_SPI6_Init+0x98>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8000f4c:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <MX_SPI6_Init+0x98>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
 8000f52:	4b20      	ldr	r3, [pc, #128]	@ (8000fd4 <MX_SPI6_Init+0x98>)
 8000f54:	220f      	movs	r2, #15
 8000f56:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f58:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <MX_SPI6_Init+0x98>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <MX_SPI6_Init+0x98>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <MX_SPI6_Init+0x98>)
 8000f66:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f6a:	619a      	str	r2, [r3, #24]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f6c:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <MX_SPI6_Init+0x98>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f72:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <MX_SPI6_Init+0x98>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f78:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <MX_SPI6_Init+0x98>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8000f7e:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <MX_SPI6_Init+0x98>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f84:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <MX_SPI6_Init+0x98>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f8a:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <MX_SPI6_Init+0x98>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f90:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <MX_SPI6_Init+0x98>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f96:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <MX_SPI6_Init+0x98>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <MX_SPI6_Init+0x98>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <MX_SPI6_Init+0x98>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <MX_SPI6_Init+0x98>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fae:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <MX_SPI6_Init+0x98>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <MX_SPI6_Init+0x98>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <MX_SPI6_Init+0x98>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8000fc0:	4804      	ldr	r0, [pc, #16]	@ (8000fd4 <MX_SPI6_Init+0x98>)
 8000fc2:	f006 fc3b 	bl	800783c <HAL_SPI_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_SPI6_Init+0x94>
  {
    Error_Handler();
 8000fcc:	f000 fef0 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	24000294 	.word	0x24000294
 8000fd8:	58001400 	.word	0x58001400

08000fdc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b09a      	sub	sp, #104	@ 0x68
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ffc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
 800100c:	615a      	str	r2, [r3, #20]
 800100e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	222c      	movs	r2, #44	@ 0x2c
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f009 f976 	bl	800a308 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800101c:	4b55      	ldr	r3, [pc, #340]	@ (8001174 <MX_TIM1_Init+0x198>)
 800101e:	4a56      	ldr	r2, [pc, #344]	@ (8001178 <MX_TIM1_Init+0x19c>)
 8001020:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001022:	4b54      	ldr	r3, [pc, #336]	@ (8001174 <MX_TIM1_Init+0x198>)
 8001024:	2200      	movs	r2, #0
 8001026:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001028:	4b52      	ldr	r3, [pc, #328]	@ (8001174 <MX_TIM1_Init+0x198>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000-1;
 800102e:	4b51      	ldr	r3, [pc, #324]	@ (8001174 <MX_TIM1_Init+0x198>)
 8001030:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001034:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001036:	4b4f      	ldr	r3, [pc, #316]	@ (8001174 <MX_TIM1_Init+0x198>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800103c:	4b4d      	ldr	r3, [pc, #308]	@ (8001174 <MX_TIM1_Init+0x198>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001042:	4b4c      	ldr	r3, [pc, #304]	@ (8001174 <MX_TIM1_Init+0x198>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001048:	484a      	ldr	r0, [pc, #296]	@ (8001174 <MX_TIM1_Init+0x198>)
 800104a:	f006 fd36 	bl	8007aba <HAL_TIM_Base_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001054:	f000 feac 	bl	8001db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001058:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800105c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800105e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001062:	4619      	mov	r1, r3
 8001064:	4843      	ldr	r0, [pc, #268]	@ (8001174 <MX_TIM1_Init+0x198>)
 8001066:	f007 f9e9 	bl	800843c <HAL_TIM_ConfigClockSource>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001070:	f000 fe9e 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001074:	483f      	ldr	r0, [pc, #252]	@ (8001174 <MX_TIM1_Init+0x198>)
 8001076:	f006 fe5f 	bl	8007d38 <HAL_TIM_PWM_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001080:	f000 fe96 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001084:	2300      	movs	r3, #0
 8001086:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001088:	2300      	movs	r3, #0
 800108a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001090:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001094:	4619      	mov	r1, r3
 8001096:	4837      	ldr	r0, [pc, #220]	@ (8001174 <MX_TIM1_Init+0x198>)
 8001098:	f007 ff30 	bl	8008efc <HAL_TIMEx_MasterConfigSynchronization>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80010a2:	f000 fe85 	bl	8001db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a6:	2360      	movs	r3, #96	@ 0x60
 80010a8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ae:	2300      	movs	r3, #0
 80010b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010b2:	2300      	movs	r3, #0
 80010b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010ba:	2300      	movs	r3, #0
 80010bc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010be:	2300      	movs	r3, #0
 80010c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010c6:	2200      	movs	r2, #0
 80010c8:	4619      	mov	r1, r3
 80010ca:	482a      	ldr	r0, [pc, #168]	@ (8001174 <MX_TIM1_Init+0x198>)
 80010cc:	f007 f8a2 	bl	8008214 <HAL_TIM_PWM_ConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80010d6:	f000 fe6b 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010de:	2204      	movs	r2, #4
 80010e0:	4619      	mov	r1, r3
 80010e2:	4824      	ldr	r0, [pc, #144]	@ (8001174 <MX_TIM1_Init+0x198>)
 80010e4:	f007 f896 	bl	8008214 <HAL_TIM_PWM_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80010ee:	f000 fe5f 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010f6:	2208      	movs	r2, #8
 80010f8:	4619      	mov	r1, r3
 80010fa:	481e      	ldr	r0, [pc, #120]	@ (8001174 <MX_TIM1_Init+0x198>)
 80010fc:	f007 f88a 	bl	8008214 <HAL_TIM_PWM_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001106:	f000 fe53 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800110a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800110e:	220c      	movs	r2, #12
 8001110:	4619      	mov	r1, r3
 8001112:	4818      	ldr	r0, [pc, #96]	@ (8001174 <MX_TIM1_Init+0x198>)
 8001114:	f007 f87e 	bl	8008214 <HAL_TIM_PWM_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800111e:	f000 fe47 	bl	8001db0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001136:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800113a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001144:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	4619      	mov	r1, r3
 8001156:	4807      	ldr	r0, [pc, #28]	@ (8001174 <MX_TIM1_Init+0x198>)
 8001158:	f007 ff5e 	bl	8009018 <HAL_TIMEx_ConfigBreakDeadTime>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8001162:	f000 fe25 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001166:	4803      	ldr	r0, [pc, #12]	@ (8001174 <MX_TIM1_Init+0x198>)
 8001168:	f001 f9fe 	bl	8002568 <HAL_TIM_MspPostInit>

}
 800116c:	bf00      	nop
 800116e:	3768      	adds	r7, #104	@ 0x68
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	2400031c 	.word	0x2400031c
 8001178:	40010000 	.word	0x40010000

0800117c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	@ 0x28
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800118e:	463b      	mov	r3, r7
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
 800119c:	615a      	str	r2, [r3, #20]
 800119e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011a0:	4b28      	ldr	r3, [pc, #160]	@ (8001244 <MX_TIM2_Init+0xc8>)
 80011a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011a8:	4b26      	ldr	r3, [pc, #152]	@ (8001244 <MX_TIM2_Init+0xc8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ae:	4b25      	ldr	r3, [pc, #148]	@ (8001244 <MX_TIM2_Init+0xc8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12;
 80011b4:	4b23      	ldr	r3, [pc, #140]	@ (8001244 <MX_TIM2_Init+0xc8>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ba:	4b22      	ldr	r3, [pc, #136]	@ (8001244 <MX_TIM2_Init+0xc8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c0:	4b20      	ldr	r3, [pc, #128]	@ (8001244 <MX_TIM2_Init+0xc8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011c6:	481f      	ldr	r0, [pc, #124]	@ (8001244 <MX_TIM2_Init+0xc8>)
 80011c8:	f006 fdb6 	bl	8007d38 <HAL_TIM_PWM_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80011d2:	f000 fded 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	4619      	mov	r1, r3
 80011e4:	4817      	ldr	r0, [pc, #92]	@ (8001244 <MX_TIM2_Init+0xc8>)
 80011e6:	f007 fe89 	bl	8008efc <HAL_TIMEx_MasterConfigSynchronization>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80011f0:	f000 fdde 	bl	8001db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f4:	2360      	movs	r3, #96	@ 0x60
 80011f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3;
 80011f8:	2303      	movs	r3, #3
 80011fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001204:	463b      	mov	r3, r7
 8001206:	2200      	movs	r2, #0
 8001208:	4619      	mov	r1, r3
 800120a:	480e      	ldr	r0, [pc, #56]	@ (8001244 <MX_TIM2_Init+0xc8>)
 800120c:	f007 f802 	bl	8008214 <HAL_TIM_PWM_ConfigChannel>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001216:	f000 fdcb 	bl	8001db0 <Error_Handler>
  }
  sConfigOC.Pulse = 6;
 800121a:	2306      	movs	r3, #6
 800121c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800121e:	463b      	mov	r3, r7
 8001220:	220c      	movs	r2, #12
 8001222:	4619      	mov	r1, r3
 8001224:	4807      	ldr	r0, [pc, #28]	@ (8001244 <MX_TIM2_Init+0xc8>)
 8001226:	f006 fff5 	bl	8008214 <HAL_TIM_PWM_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8001230:	f000 fdbe 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001234:	4803      	ldr	r0, [pc, #12]	@ (8001244 <MX_TIM2_Init+0xc8>)
 8001236:	f001 f997 	bl	8002568 <HAL_TIM_MspPostInit>

}
 800123a:	bf00      	nop
 800123c:	3728      	adds	r7, #40	@ 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	24000368 	.word	0x24000368

08001248 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08e      	sub	sp, #56	@ 0x38
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001268:	463b      	mov	r3, r7
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]
 8001276:	615a      	str	r2, [r3, #20]
 8001278:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800127a:	4b3d      	ldr	r3, [pc, #244]	@ (8001370 <MX_TIM4_Init+0x128>)
 800127c:	4a3d      	ldr	r2, [pc, #244]	@ (8001374 <MX_TIM4_Init+0x12c>)
 800127e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001280:	4b3b      	ldr	r3, [pc, #236]	@ (8001370 <MX_TIM4_Init+0x128>)
 8001282:	2200      	movs	r2, #0
 8001284:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001286:	4b3a      	ldr	r3, [pc, #232]	@ (8001370 <MX_TIM4_Init+0x128>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 24000-1;
 800128c:	4b38      	ldr	r3, [pc, #224]	@ (8001370 <MX_TIM4_Init+0x128>)
 800128e:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001292:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001294:	4b36      	ldr	r3, [pc, #216]	@ (8001370 <MX_TIM4_Init+0x128>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129a:	4b35      	ldr	r3, [pc, #212]	@ (8001370 <MX_TIM4_Init+0x128>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012a0:	4833      	ldr	r0, [pc, #204]	@ (8001370 <MX_TIM4_Init+0x128>)
 80012a2:	f006 fc0a 	bl	8007aba <HAL_TIM_Base_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80012ac:	f000 fd80 	bl	8001db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ba:	4619      	mov	r1, r3
 80012bc:	482c      	ldr	r0, [pc, #176]	@ (8001370 <MX_TIM4_Init+0x128>)
 80012be:	f007 f8bd 	bl	800843c <HAL_TIM_ConfigClockSource>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80012c8:	f000 fd72 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012cc:	4828      	ldr	r0, [pc, #160]	@ (8001370 <MX_TIM4_Init+0x128>)
 80012ce:	f006 fd33 	bl	8007d38 <HAL_TIM_PWM_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80012d8:	f000 fd6a 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	4821      	ldr	r0, [pc, #132]	@ (8001370 <MX_TIM4_Init+0x128>)
 80012ec:	f007 fe06 	bl	8008efc <HAL_TIMEx_MasterConfigSynchronization>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80012f6:	f000 fd5b 	bl	8001db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012fa:	2360      	movs	r3, #96	@ 0x60
 80012fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800130a:	463b      	mov	r3, r7
 800130c:	2200      	movs	r2, #0
 800130e:	4619      	mov	r1, r3
 8001310:	4817      	ldr	r0, [pc, #92]	@ (8001370 <MX_TIM4_Init+0x128>)
 8001312:	f006 ff7f 	bl	8008214 <HAL_TIM_PWM_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800131c:	f000 fd48 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001320:	463b      	mov	r3, r7
 8001322:	2204      	movs	r2, #4
 8001324:	4619      	mov	r1, r3
 8001326:	4812      	ldr	r0, [pc, #72]	@ (8001370 <MX_TIM4_Init+0x128>)
 8001328:	f006 ff74 	bl	8008214 <HAL_TIM_PWM_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001332:	f000 fd3d 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001336:	463b      	mov	r3, r7
 8001338:	2208      	movs	r2, #8
 800133a:	4619      	mov	r1, r3
 800133c:	480c      	ldr	r0, [pc, #48]	@ (8001370 <MX_TIM4_Init+0x128>)
 800133e:	f006 ff69 	bl	8008214 <HAL_TIM_PWM_ConfigChannel>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001348:	f000 fd32 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800134c:	463b      	mov	r3, r7
 800134e:	220c      	movs	r2, #12
 8001350:	4619      	mov	r1, r3
 8001352:	4807      	ldr	r0, [pc, #28]	@ (8001370 <MX_TIM4_Init+0x128>)
 8001354:	f006 ff5e 	bl	8008214 <HAL_TIM_PWM_ConfigChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 800135e:	f000 fd27 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001362:	4803      	ldr	r0, [pc, #12]	@ (8001370 <MX_TIM4_Init+0x128>)
 8001364:	f001 f900 	bl	8002568 <HAL_TIM_MspPostInit>

}
 8001368:	bf00      	nop
 800136a:	3738      	adds	r7, #56	@ 0x38
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	240003b4 	.word	0x240003b4
 8001374:	40000800 	.word	0x40000800

08001378 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	@ 0x28
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800138a:	463b      	mov	r3, r7
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
 8001398:	615a      	str	r2, [r3, #20]
 800139a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800139c:	4b27      	ldr	r3, [pc, #156]	@ (800143c <MX_TIM5_Init+0xc4>)
 800139e:	4a28      	ldr	r2, [pc, #160]	@ (8001440 <MX_TIM5_Init+0xc8>)
 80013a0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80013a2:	4b26      	ldr	r3, [pc, #152]	@ (800143c <MX_TIM5_Init+0xc4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a8:	4b24      	ldr	r3, [pc, #144]	@ (800143c <MX_TIM5_Init+0xc4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80013ae:	4b23      	ldr	r3, [pc, #140]	@ (800143c <MX_TIM5_Init+0xc4>)
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013b4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b6:	4b21      	ldr	r3, [pc, #132]	@ (800143c <MX_TIM5_Init+0xc4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013bc:	4b1f      	ldr	r3, [pc, #124]	@ (800143c <MX_TIM5_Init+0xc4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80013c2:	481e      	ldr	r0, [pc, #120]	@ (800143c <MX_TIM5_Init+0xc4>)
 80013c4:	f006 fcb8 	bl	8007d38 <HAL_TIM_PWM_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80013ce:	f000 fcef 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	4816      	ldr	r0, [pc, #88]	@ (800143c <MX_TIM5_Init+0xc4>)
 80013e2:	f007 fd8b 	bl	8008efc <HAL_TIMEx_MasterConfigSynchronization>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80013ec:	f000 fce0 	bl	8001db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f0:	2360      	movs	r3, #96	@ 0x60
 80013f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001400:	463b      	mov	r3, r7
 8001402:	2204      	movs	r2, #4
 8001404:	4619      	mov	r1, r3
 8001406:	480d      	ldr	r0, [pc, #52]	@ (800143c <MX_TIM5_Init+0xc4>)
 8001408:	f006 ff04 	bl	8008214 <HAL_TIM_PWM_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001412:	f000 fccd 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001416:	463b      	mov	r3, r7
 8001418:	2208      	movs	r2, #8
 800141a:	4619      	mov	r1, r3
 800141c:	4807      	ldr	r0, [pc, #28]	@ (800143c <MX_TIM5_Init+0xc4>)
 800141e:	f006 fef9 	bl	8008214 <HAL_TIM_PWM_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8001428:	f000 fcc2 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800142c:	4803      	ldr	r0, [pc, #12]	@ (800143c <MX_TIM5_Init+0xc4>)
 800142e:	f001 f89b 	bl	8002568 <HAL_TIM_MspPostInit>

}
 8001432:	bf00      	nop
 8001434:	3728      	adds	r7, #40	@ 0x28
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	24000400 	.word	0x24000400
 8001440:	40000c00 	.word	0x40000c00

08001444 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b096      	sub	sp, #88	@ 0x58
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001456:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]
 8001466:	615a      	str	r2, [r3, #20]
 8001468:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	222c      	movs	r2, #44	@ 0x2c
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f008 ff49 	bl	800a308 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001476:	4b38      	ldr	r3, [pc, #224]	@ (8001558 <MX_TIM8_Init+0x114>)
 8001478:	4a38      	ldr	r2, [pc, #224]	@ (800155c <MX_TIM8_Init+0x118>)
 800147a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800147c:	4b36      	ldr	r3, [pc, #216]	@ (8001558 <MX_TIM8_Init+0x114>)
 800147e:	2200      	movs	r2, #0
 8001480:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001482:	4b35      	ldr	r3, [pc, #212]	@ (8001558 <MX_TIM8_Init+0x114>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001488:	4b33      	ldr	r3, [pc, #204]	@ (8001558 <MX_TIM8_Init+0x114>)
 800148a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800148e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001490:	4b31      	ldr	r3, [pc, #196]	@ (8001558 <MX_TIM8_Init+0x114>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001496:	4b30      	ldr	r3, [pc, #192]	@ (8001558 <MX_TIM8_Init+0x114>)
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149c:	4b2e      	ldr	r3, [pc, #184]	@ (8001558 <MX_TIM8_Init+0x114>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80014a2:	482d      	ldr	r0, [pc, #180]	@ (8001558 <MX_TIM8_Init+0x114>)
 80014a4:	f006 fc48 	bl	8007d38 <HAL_TIM_PWM_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80014ae:	f000 fc7f 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014b6:	2300      	movs	r3, #0
 80014b8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014be:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014c2:	4619      	mov	r1, r3
 80014c4:	4824      	ldr	r0, [pc, #144]	@ (8001558 <MX_TIM8_Init+0x114>)
 80014c6:	f007 fd19 	bl	8008efc <HAL_TIMEx_MasterConfigSynchronization>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80014d0:	f000 fc6e 	bl	8001db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d4:	2360      	movs	r3, #96	@ 0x60
 80014d6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014dc:	2300      	movs	r3, #0
 80014de:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014e4:	2300      	movs	r3, #0
 80014e6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014e8:	2300      	movs	r3, #0
 80014ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014f0:	220c      	movs	r2, #12
 80014f2:	4619      	mov	r1, r3
 80014f4:	4818      	ldr	r0, [pc, #96]	@ (8001558 <MX_TIM8_Init+0x114>)
 80014f6:	f006 fe8d 	bl	8008214 <HAL_TIM_PWM_ConfigChannel>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001500:	f000 fc56 	bl	8001db0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001518:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800151c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001526:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	4619      	mov	r1, r3
 8001538:	4807      	ldr	r0, [pc, #28]	@ (8001558 <MX_TIM8_Init+0x114>)
 800153a:	f007 fd6d 	bl	8009018 <HAL_TIMEx_ConfigBreakDeadTime>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM8_Init+0x104>
  {
    Error_Handler();
 8001544:	f000 fc34 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001548:	4803      	ldr	r0, [pc, #12]	@ (8001558 <MX_TIM8_Init+0x114>)
 800154a:	f001 f80d 	bl	8002568 <HAL_TIM_MspPostInit>

}
 800154e:	bf00      	nop
 8001550:	3758      	adds	r7, #88	@ 0x58
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2400044c 	.word	0x2400044c
 800155c:	40010400 	.word	0x40010400

08001560 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	@ 0x28
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001572:	463b      	mov	r3, r7
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
 8001580:	615a      	str	r2, [r3, #20]
 8001582:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001584:	4b21      	ldr	r3, [pc, #132]	@ (800160c <MX_TIM12_Init+0xac>)
 8001586:	4a22      	ldr	r2, [pc, #136]	@ (8001610 <MX_TIM12_Init+0xb0>)
 8001588:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800158a:	4b20      	ldr	r3, [pc, #128]	@ (800160c <MX_TIM12_Init+0xac>)
 800158c:	2200      	movs	r2, #0
 800158e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001590:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <MX_TIM12_Init+0xac>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001596:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <MX_TIM12_Init+0xac>)
 8001598:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800159c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159e:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <MX_TIM12_Init+0xac>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a4:	4b19      	ldr	r3, [pc, #100]	@ (800160c <MX_TIM12_Init+0xac>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80015aa:	4818      	ldr	r0, [pc, #96]	@ (800160c <MX_TIM12_Init+0xac>)
 80015ac:	f006 fbc4 	bl	8007d38 <HAL_TIM_PWM_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 80015b6:	f000 fbfb 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	4619      	mov	r1, r3
 80015c8:	4810      	ldr	r0, [pc, #64]	@ (800160c <MX_TIM12_Init+0xac>)
 80015ca:	f007 fc97 	bl	8008efc <HAL_TIMEx_MasterConfigSynchronization>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80015d4:	f000 fbec 	bl	8001db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d8:	2360      	movs	r3, #96	@ 0x60
 80015da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015e8:	463b      	mov	r3, r7
 80015ea:	2204      	movs	r2, #4
 80015ec:	4619      	mov	r1, r3
 80015ee:	4807      	ldr	r0, [pc, #28]	@ (800160c <MX_TIM12_Init+0xac>)
 80015f0:	f006 fe10 	bl	8008214 <HAL_TIM_PWM_ConfigChannel>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 80015fa:	f000 fbd9 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80015fe:	4803      	ldr	r0, [pc, #12]	@ (800160c <MX_TIM12_Init+0xac>)
 8001600:	f000 ffb2 	bl	8002568 <HAL_TIM_MspPostInit>

}
 8001604:	bf00      	nop
 8001606:	3728      	adds	r7, #40	@ 0x28
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	24000498 	.word	0x24000498
 8001610:	40001800 	.word	0x40001800

08001614 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
 8001628:	615a      	str	r2, [r3, #20]
 800162a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800162c:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <MX_TIM13_Init+0x94>)
 800162e:	4a1f      	ldr	r2, [pc, #124]	@ (80016ac <MX_TIM13_Init+0x98>)
 8001630:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8001632:	4b1d      	ldr	r3, [pc, #116]	@ (80016a8 <MX_TIM13_Init+0x94>)
 8001634:	2200      	movs	r2, #0
 8001636:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001638:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <MX_TIM13_Init+0x94>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800163e:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <MX_TIM13_Init+0x94>)
 8001640:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001644:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001646:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <MX_TIM13_Init+0x94>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164c:	4b16      	ldr	r3, [pc, #88]	@ (80016a8 <MX_TIM13_Init+0x94>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001652:	4815      	ldr	r0, [pc, #84]	@ (80016a8 <MX_TIM13_Init+0x94>)
 8001654:	f006 fa31 	bl	8007aba <HAL_TIM_Base_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800165e:	f000 fba7 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001662:	4811      	ldr	r0, [pc, #68]	@ (80016a8 <MX_TIM13_Init+0x94>)
 8001664:	f006 fb68 	bl	8007d38 <HAL_TIM_PWM_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800166e:	f000 fb9f 	bl	8001db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001672:	2360      	movs	r3, #96	@ 0x60
 8001674:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	2200      	movs	r2, #0
 8001686:	4619      	mov	r1, r3
 8001688:	4807      	ldr	r0, [pc, #28]	@ (80016a8 <MX_TIM13_Init+0x94>)
 800168a:	f006 fdc3 	bl	8008214 <HAL_TIM_PWM_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001694:	f000 fb8c 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001698:	4803      	ldr	r0, [pc, #12]	@ (80016a8 <MX_TIM13_Init+0x94>)
 800169a:	f000 ff65 	bl	8002568 <HAL_TIM_MspPostInit>

}
 800169e:	bf00      	nop
 80016a0:	3720      	adds	r7, #32
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	240004e4 	.word	0x240004e4
 80016ac:	40001c00 	.word	0x40001c00

080016b0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
 80016c4:	615a      	str	r2, [r3, #20]
 80016c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80016c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001744 <MX_TIM14_Init+0x94>)
 80016ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001748 <MX_TIM14_Init+0x98>)
 80016cc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80016ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001744 <MX_TIM14_Init+0x94>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <MX_TIM14_Init+0x94>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80016da:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <MX_TIM14_Init+0x94>)
 80016dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016e0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e2:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <MX_TIM14_Init+0x94>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e8:	4b16      	ldr	r3, [pc, #88]	@ (8001744 <MX_TIM14_Init+0x94>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80016ee:	4815      	ldr	r0, [pc, #84]	@ (8001744 <MX_TIM14_Init+0x94>)
 80016f0:	f006 f9e3 	bl	8007aba <HAL_TIM_Base_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80016fa:	f000 fb59 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80016fe:	4811      	ldr	r0, [pc, #68]	@ (8001744 <MX_TIM14_Init+0x94>)
 8001700:	f006 fb1a 	bl	8007d38 <HAL_TIM_PWM_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 800170a:	f000 fb51 	bl	8001db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800170e:	2360      	movs	r3, #96	@ 0x60
 8001710:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	2200      	movs	r2, #0
 8001722:	4619      	mov	r1, r3
 8001724:	4807      	ldr	r0, [pc, #28]	@ (8001744 <MX_TIM14_Init+0x94>)
 8001726:	f006 fd75 	bl	8008214 <HAL_TIM_PWM_ConfigChannel>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001730:	f000 fb3e 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001734:	4803      	ldr	r0, [pc, #12]	@ (8001744 <MX_TIM14_Init+0x94>)
 8001736:	f000 ff17 	bl	8002568 <HAL_TIM_MspPostInit>

}
 800173a:	bf00      	nop
 800173c:	3720      	adds	r7, #32
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	24000530 	.word	0x24000530
 8001748:	40002000 	.word	0x40002000

0800174c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b096      	sub	sp, #88	@ 0x58
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001752:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800175e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]
 800176e:	615a      	str	r2, [r3, #20]
 8001770:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	222c      	movs	r2, #44	@ 0x2c
 8001776:	2100      	movs	r1, #0
 8001778:	4618      	mov	r0, r3
 800177a:	f008 fdc5 	bl	800a308 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800177e:	4b3a      	ldr	r3, [pc, #232]	@ (8001868 <MX_TIM15_Init+0x11c>)
 8001780:	4a3a      	ldr	r2, [pc, #232]	@ (800186c <MX_TIM15_Init+0x120>)
 8001782:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001784:	4b38      	ldr	r3, [pc, #224]	@ (8001868 <MX_TIM15_Init+0x11c>)
 8001786:	2200      	movs	r2, #0
 8001788:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178a:	4b37      	ldr	r3, [pc, #220]	@ (8001868 <MX_TIM15_Init+0x11c>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001790:	4b35      	ldr	r3, [pc, #212]	@ (8001868 <MX_TIM15_Init+0x11c>)
 8001792:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001796:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001798:	4b33      	ldr	r3, [pc, #204]	@ (8001868 <MX_TIM15_Init+0x11c>)
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800179e:	4b32      	ldr	r3, [pc, #200]	@ (8001868 <MX_TIM15_Init+0x11c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a4:	4b30      	ldr	r3, [pc, #192]	@ (8001868 <MX_TIM15_Init+0x11c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80017aa:	482f      	ldr	r0, [pc, #188]	@ (8001868 <MX_TIM15_Init+0x11c>)
 80017ac:	f006 fac4 	bl	8007d38 <HAL_TIM_PWM_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80017b6:	f000 fafb 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ba:	2300      	movs	r3, #0
 80017bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80017c2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80017c6:	4619      	mov	r1, r3
 80017c8:	4827      	ldr	r0, [pc, #156]	@ (8001868 <MX_TIM15_Init+0x11c>)
 80017ca:	f007 fb97 	bl	8008efc <HAL_TIMEx_MasterConfigSynchronization>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80017d4:	f000 faec 	bl	8001db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d8:	2360      	movs	r3, #96	@ 0x60
 80017da:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017e0:	2300      	movs	r3, #0
 80017e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017e4:	2300      	movs	r3, #0
 80017e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017ec:	2300      	movs	r3, #0
 80017ee:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017f0:	2300      	movs	r3, #0
 80017f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017f8:	2200      	movs	r2, #0
 80017fa:	4619      	mov	r1, r3
 80017fc:	481a      	ldr	r0, [pc, #104]	@ (8001868 <MX_TIM15_Init+0x11c>)
 80017fe:	f006 fd09 	bl	8008214 <HAL_TIM_PWM_ConfigChannel>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001808:	f000 fad2 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800180c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001810:	2204      	movs	r2, #4
 8001812:	4619      	mov	r1, r3
 8001814:	4814      	ldr	r0, [pc, #80]	@ (8001868 <MX_TIM15_Init+0x11c>)
 8001816:	f006 fcfd 	bl	8008214 <HAL_TIM_PWM_ConfigChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001820:	f000 fac6 	bl	8001db0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001838:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800183c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	4619      	mov	r1, r3
 800184a:	4807      	ldr	r0, [pc, #28]	@ (8001868 <MX_TIM15_Init+0x11c>)
 800184c:	f007 fbe4 	bl	8009018 <HAL_TIMEx_ConfigBreakDeadTime>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001856:	f000 faab 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800185a:	4803      	ldr	r0, [pc, #12]	@ (8001868 <MX_TIM15_Init+0x11c>)
 800185c:	f000 fe84 	bl	8002568 <HAL_TIM_MspPostInit>

}
 8001860:	bf00      	nop
 8001862:	3758      	adds	r7, #88	@ 0x58
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	2400057c 	.word	0x2400057c
 800186c:	40014000 	.word	0x40014000

08001870 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b092      	sub	sp, #72	@ 0x48
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001876:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]
 8001886:	615a      	str	r2, [r3, #20]
 8001888:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800188a:	463b      	mov	r3, r7
 800188c:	222c      	movs	r2, #44	@ 0x2c
 800188e:	2100      	movs	r1, #0
 8001890:	4618      	mov	r0, r3
 8001892:	f008 fd39 	bl	800a308 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001896:	4b31      	ldr	r3, [pc, #196]	@ (800195c <MX_TIM16_Init+0xec>)
 8001898:	4a31      	ldr	r2, [pc, #196]	@ (8001960 <MX_TIM16_Init+0xf0>)
 800189a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800189c:	4b2f      	ldr	r3, [pc, #188]	@ (800195c <MX_TIM16_Init+0xec>)
 800189e:	2200      	movs	r2, #0
 80018a0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a2:	4b2e      	ldr	r3, [pc, #184]	@ (800195c <MX_TIM16_Init+0xec>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80018a8:	4b2c      	ldr	r3, [pc, #176]	@ (800195c <MX_TIM16_Init+0xec>)
 80018aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018ae:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b0:	4b2a      	ldr	r3, [pc, #168]	@ (800195c <MX_TIM16_Init+0xec>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018b6:	4b29      	ldr	r3, [pc, #164]	@ (800195c <MX_TIM16_Init+0xec>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018bc:	4b27      	ldr	r3, [pc, #156]	@ (800195c <MX_TIM16_Init+0xec>)
 80018be:	2200      	movs	r2, #0
 80018c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018c2:	4826      	ldr	r0, [pc, #152]	@ (800195c <MX_TIM16_Init+0xec>)
 80018c4:	f006 f8f9 	bl	8007aba <HAL_TIM_Base_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80018ce:	f000 fa6f 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80018d2:	4822      	ldr	r0, [pc, #136]	@ (800195c <MX_TIM16_Init+0xec>)
 80018d4:	f006 fa30 	bl	8007d38 <HAL_TIM_PWM_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80018de:	f000 fa67 	bl	8001db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e2:	2360      	movs	r3, #96	@ 0x60
 80018e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ea:	2300      	movs	r3, #0
 80018ec:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018ee:	2300      	movs	r3, #0
 80018f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001902:	2200      	movs	r2, #0
 8001904:	4619      	mov	r1, r3
 8001906:	4815      	ldr	r0, [pc, #84]	@ (800195c <MX_TIM16_Init+0xec>)
 8001908:	f006 fc84 	bl	8008214 <HAL_TIM_PWM_ConfigChannel>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001912:	f000 fa4d 	bl	8001db0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800192a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800192e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001938:	463b      	mov	r3, r7
 800193a:	4619      	mov	r1, r3
 800193c:	4807      	ldr	r0, [pc, #28]	@ (800195c <MX_TIM16_Init+0xec>)
 800193e:	f007 fb6b 	bl	8009018 <HAL_TIMEx_ConfigBreakDeadTime>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001948:	f000 fa32 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800194c:	4803      	ldr	r0, [pc, #12]	@ (800195c <MX_TIM16_Init+0xec>)
 800194e:	f000 fe0b 	bl	8002568 <HAL_TIM_MspPostInit>

}
 8001952:	bf00      	nop
 8001954:	3748      	adds	r7, #72	@ 0x48
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	240005c8 	.word	0x240005c8
 8001960:	40014400 	.word	0x40014400

08001964 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001968:	4b22      	ldr	r3, [pc, #136]	@ (80019f4 <MX_UART4_Init+0x90>)
 800196a:	4a23      	ldr	r2, [pc, #140]	@ (80019f8 <MX_UART4_Init+0x94>)
 800196c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800196e:	4b21      	ldr	r3, [pc, #132]	@ (80019f4 <MX_UART4_Init+0x90>)
 8001970:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001974:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001976:	4b1f      	ldr	r3, [pc, #124]	@ (80019f4 <MX_UART4_Init+0x90>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800197c:	4b1d      	ldr	r3, [pc, #116]	@ (80019f4 <MX_UART4_Init+0x90>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001982:	4b1c      	ldr	r3, [pc, #112]	@ (80019f4 <MX_UART4_Init+0x90>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001988:	4b1a      	ldr	r3, [pc, #104]	@ (80019f4 <MX_UART4_Init+0x90>)
 800198a:	220c      	movs	r2, #12
 800198c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198e:	4b19      	ldr	r3, [pc, #100]	@ (80019f4 <MX_UART4_Init+0x90>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001994:	4b17      	ldr	r3, [pc, #92]	@ (80019f4 <MX_UART4_Init+0x90>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800199a:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <MX_UART4_Init+0x90>)
 800199c:	2200      	movs	r2, #0
 800199e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019a0:	4b14      	ldr	r3, [pc, #80]	@ (80019f4 <MX_UART4_Init+0x90>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a6:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <MX_UART4_Init+0x90>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019ac:	4811      	ldr	r0, [pc, #68]	@ (80019f4 <MX_UART4_Init+0x90>)
 80019ae:	f007 fbcf 	bl	8009150 <HAL_UART_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80019b8:	f000 f9fa 	bl	8001db0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019bc:	2100      	movs	r1, #0
 80019be:	480d      	ldr	r0, [pc, #52]	@ (80019f4 <MX_UART4_Init+0x90>)
 80019c0:	f008 fbd7 	bl	800a172 <HAL_UARTEx_SetTxFifoThreshold>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80019ca:	f000 f9f1 	bl	8001db0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ce:	2100      	movs	r1, #0
 80019d0:	4808      	ldr	r0, [pc, #32]	@ (80019f4 <MX_UART4_Init+0x90>)
 80019d2:	f008 fc0c 	bl	800a1ee <HAL_UARTEx_SetRxFifoThreshold>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80019dc:	f000 f9e8 	bl	8001db0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80019e0:	4804      	ldr	r0, [pc, #16]	@ (80019f4 <MX_UART4_Init+0x90>)
 80019e2:	f008 fb8d 	bl	800a100 <HAL_UARTEx_DisableFifoMode>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80019ec:	f000 f9e0 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	24000614 	.word	0x24000614
 80019f8:	40004c00 	.word	0x40004c00

080019fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	@ 0x30
 8001a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a02:	f107 031c 	add.w	r3, r7, #28
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
 8001a10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a12:	4b6f      	ldr	r3, [pc, #444]	@ (8001bd0 <MX_GPIO_Init+0x1d4>)
 8001a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a18:	4a6d      	ldr	r2, [pc, #436]	@ (8001bd0 <MX_GPIO_Init+0x1d4>)
 8001a1a:	f043 0310 	orr.w	r3, r3, #16
 8001a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a22:	4b6b      	ldr	r3, [pc, #428]	@ (8001bd0 <MX_GPIO_Init+0x1d4>)
 8001a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a28:	f003 0310 	and.w	r3, r3, #16
 8001a2c:	61bb      	str	r3, [r7, #24]
 8001a2e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a30:	4b67      	ldr	r3, [pc, #412]	@ (8001bd0 <MX_GPIO_Init+0x1d4>)
 8001a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a36:	4a66      	ldr	r2, [pc, #408]	@ (8001bd0 <MX_GPIO_Init+0x1d4>)
 8001a38:	f043 0304 	orr.w	r3, r3, #4
 8001a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a40:	4b63      	ldr	r3, [pc, #396]	@ (8001bd0 <MX_GPIO_Init+0x1d4>)
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a4e:	4b60      	ldr	r3, [pc, #384]	@ (8001bd0 <MX_GPIO_Init+0x1d4>)
 8001a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a54:	4a5e      	ldr	r2, [pc, #376]	@ (8001bd0 <MX_GPIO_Init+0x1d4>)
 8001a56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a5e:	4b5c      	ldr	r3, [pc, #368]	@ (8001bd0 <MX_GPIO_Init+0x1d4>)
 8001a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6c:	4b58      	ldr	r3, [pc, #352]	@ (8001bd0 <MX_GPIO_Init+0x1d4>)
 8001a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a72:	4a57      	ldr	r2, [pc, #348]	@ (8001bd0 <MX_GPIO_Init+0x1d4>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a7c:	4b54      	ldr	r3, [pc, #336]	@ (8001bd0 <MX_GPIO_Init+0x1d4>)
 8001a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8a:	4b51      	ldr	r3, [pc, #324]	@ (8001bd0 <MX_GPIO_Init+0x1d4>)
 8001a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a90:	4a4f      	ldr	r2, [pc, #316]	@ (8001bd0 <MX_GPIO_Init+0x1d4>)
 8001a92:	f043 0302 	orr.w	r3, r3, #2
 8001a96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a9a:	4b4d      	ldr	r3, [pc, #308]	@ (8001bd0 <MX_GPIO_Init+0x1d4>)
 8001a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa8:	4b49      	ldr	r3, [pc, #292]	@ (8001bd0 <MX_GPIO_Init+0x1d4>)
 8001aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aae:	4a48      	ldr	r2, [pc, #288]	@ (8001bd0 <MX_GPIO_Init+0x1d4>)
 8001ab0:	f043 0308 	orr.w	r3, r3, #8
 8001ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ab8:	4b45      	ldr	r3, [pc, #276]	@ (8001bd0 <MX_GPIO_Init+0x1d4>)
 8001aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TIM1_CH3_PHASE_Pin|TIM1_CH4_PHASE_Pin|TIM2_CH1_PHASE_Pin|TIM8_CH4_PHASE_Pin
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f249 519f 	movw	r1, #38303	@ 0x959f
 8001acc:	4841      	ldr	r0, [pc, #260]	@ (8001bd4 <MX_GPIO_Init+0x1d8>)
 8001ace:	f001 fbc9 	bl	8003264 <HAL_GPIO_WritePin>
                          |TIM12_CH2_PHASE_Pin|TIM13_CH1_PHASE_Pin|TIM14_CH1_PHASE_Pin|TIM15_CH1_PHASE_Pin
                          |TIM1_CH1_PHASE_Pin|TIM1_CH2_PHASE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIM4_CH4_PHASE_Pin|TIM5_CH2_PHASE_Pin|TIM5_CH3_PHASE_Pin|TIM4_CH3_PHASE_Pin, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001ad8:	483f      	ldr	r0, [pc, #252]	@ (8001bd8 <MX_GPIO_Init+0x1dc>)
 8001ada:	f001 fbc3 	bl	8003264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin|TIM4_CH1_PHASE_Pin
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f642 4107 	movw	r1, #11271	@ 0x2c07
 8001ae4:	483d      	ldr	r0, [pc, #244]	@ (8001bdc <MX_GPIO_Init+0x1e0>)
 8001ae6:	f001 fbbd 	bl	8003264 <HAL_GPIO_WritePin>
                          |TIM4_CH2_PHASE_Pin|SPI6_MUX_OE_n_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HRTIM_CHC1_PHASE_Pin|HRTIM_CHC2_PHASE_Pin|HRTIM_CHD1_PHASE_Pin|HRTIM_CHD2_PHASE_Pin
 8001aea:	2200      	movs	r2, #0
 8001aec:	f640 71f3 	movw	r1, #4083	@ 0xff3
 8001af0:	483b      	ldr	r0, [pc, #236]	@ (8001be0 <MX_GPIO_Init+0x1e4>)
 8001af2:	f001 fbb7 	bl	8003264 <HAL_GPIO_WritePin>
                          |TIM15_CH2_PHASE_Pin|TIM16_CH1_PHASE_Pin|HRTIM_CHA1_PHASE_Pin|HRTIM_CHA2_PHASE_Pin
                          |HRTIM_CHB1_PHASE_Pin|HRTIM_CHB2_PHASE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACTUATOR_ENABLE_MCU_GPIO_Port, ACTUATOR_ENABLE_MCU_Pin, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001afc:	4839      	ldr	r0, [pc, #228]	@ (8001be4 <MX_GPIO_Init+0x1e8>)
 8001afe:	f001 fbb1 	bl	8003264 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TIM1_CH3_PHASE_Pin TIM1_CH4_PHASE_Pin TIM2_CH1_PHASE_Pin TIM8_CH4_PHASE_Pin
                           TIM12_CH2_PHASE_Pin TIM13_CH1_PHASE_Pin TIM14_CH1_PHASE_Pin TIM15_CH1_PHASE_Pin
                           TIM1_CH1_PHASE_Pin TIM1_CH2_PHASE_Pin */
  GPIO_InitStruct.Pin = TIM1_CH3_PHASE_Pin|TIM1_CH4_PHASE_Pin|TIM2_CH1_PHASE_Pin|TIM8_CH4_PHASE_Pin
 8001b02:	f249 539f 	movw	r3, #38303	@ 0x959f
 8001b06:	61fb      	str	r3, [r7, #28]
                          |TIM12_CH2_PHASE_Pin|TIM13_CH1_PHASE_Pin|TIM14_CH1_PHASE_Pin|TIM15_CH1_PHASE_Pin
                          |TIM1_CH1_PHASE_Pin|TIM1_CH2_PHASE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b14:	f107 031c 	add.w	r3, r7, #28
 8001b18:	4619      	mov	r1, r3
 8001b1a:	482e      	ldr	r0, [pc, #184]	@ (8001bd4 <MX_GPIO_Init+0x1d8>)
 8001b1c:	f001 f9f2 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH4_PHASE_Pin TIM5_CH2_PHASE_Pin TIM5_CH3_PHASE_Pin TIM4_CH3_PHASE_Pin */
  GPIO_InitStruct.Pin = TIM4_CH4_PHASE_Pin|TIM5_CH2_PHASE_Pin|TIM5_CH3_PHASE_Pin|TIM4_CH3_PHASE_Pin;
 8001b20:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	4827      	ldr	r0, [pc, #156]	@ (8001bd8 <MX_GPIO_Init+0x1dc>)
 8001b3a:	f001 f9e3 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b42:	2303      	movs	r3, #3
 8001b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4821      	ldr	r0, [pc, #132]	@ (8001bd8 <MX_GPIO_Init+0x1dc>)
 8001b52:	f001 f9d7 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDC1_INTB_Pin LDC0_INTB_Pin */
  GPIO_InitStruct.Pin = LDC1_INTB_Pin|LDC0_INTB_Pin;
 8001b56:	2318      	movs	r3, #24
 8001b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b62:	f107 031c 	add.w	r3, r7, #28
 8001b66:	4619      	mov	r1, r3
 8001b68:	481b      	ldr	r0, [pc, #108]	@ (8001bd8 <MX_GPIO_Init+0x1dc>)
 8001b6a:	f001 f9cb 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin TIM4_CH1_PHASE_Pin
                           TIM4_CH2_PHASE_Pin SPI6_MUX_OE_n_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|TIM4_CH1_PHASE_Pin
 8001b6e:	f642 4307 	movw	r3, #11271	@ 0x2c07
 8001b72:	61fb      	str	r3, [r7, #28]
                          |TIM4_CH2_PHASE_Pin|SPI6_MUX_OE_n_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b80:	f107 031c 	add.w	r3, r7, #28
 8001b84:	4619      	mov	r1, r3
 8001b86:	4815      	ldr	r0, [pc, #84]	@ (8001bdc <MX_GPIO_Init+0x1e0>)
 8001b88:	f001 f9bc 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : HRTIM_CHC1_PHASE_Pin HRTIM_CHC2_PHASE_Pin HRTIM_CHD1_PHASE_Pin HRTIM_CHD2_PHASE_Pin
                           TIM15_CH2_PHASE_Pin TIM16_CH1_PHASE_Pin HRTIM_CHA1_PHASE_Pin HRTIM_CHA2_PHASE_Pin
                           HRTIM_CHB1_PHASE_Pin HRTIM_CHB2_PHASE_Pin */
  GPIO_InitStruct.Pin = HRTIM_CHC1_PHASE_Pin|HRTIM_CHC2_PHASE_Pin|HRTIM_CHD1_PHASE_Pin|HRTIM_CHD2_PHASE_Pin
 8001b8c:	f640 73f3 	movw	r3, #4083	@ 0xff3
 8001b90:	61fb      	str	r3, [r7, #28]
                          |TIM15_CH2_PHASE_Pin|TIM16_CH1_PHASE_Pin|HRTIM_CHA1_PHASE_Pin|HRTIM_CHA2_PHASE_Pin
                          |HRTIM_CHB1_PHASE_Pin|HRTIM_CHB2_PHASE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b92:	2301      	movs	r3, #1
 8001b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b9e:	f107 031c 	add.w	r3, r7, #28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	480e      	ldr	r0, [pc, #56]	@ (8001be0 <MX_GPIO_Init+0x1e4>)
 8001ba6:	f001 f9ad 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACTUATOR_ENABLE_MCU_Pin */
  GPIO_InitStruct.Pin = ACTUATOR_ENABLE_MCU_Pin;
 8001baa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACTUATOR_ENABLE_MCU_GPIO_Port, &GPIO_InitStruct);
 8001bbc:	f107 031c 	add.w	r3, r7, #28
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4808      	ldr	r0, [pc, #32]	@ (8001be4 <MX_GPIO_Init+0x1e8>)
 8001bc4:	f001 f99e 	bl	8002f04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bc8:	bf00      	nop
 8001bca:	3730      	adds	r7, #48	@ 0x30
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	58024400 	.word	0x58024400
 8001bd4:	58021000 	.word	0x58021000
 8001bd8:	58020800 	.word	0x58020800
 8001bdc:	58020400 	.word	0x58020400
 8001be0:	58020c00 	.word	0x58020c00
 8001be4:	58020000 	.word	0x58020000

08001be8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
		static int i=0;
		static int phase = 1;
		const double step = 0.2;// setpoint reference (arbitrary units)
 8001bf0:	a321      	add	r3, pc, #132	@ (adr r3, 8001c78 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf6:	e9c7 2302 	strd	r2, r3, [r7, #8]

		if (htim==&htim1){
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a18      	ldr	r2, [pc, #96]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d128      	bne.n	8001c54 <HAL_TIM_PeriodElapsedCallback+0x6c>
		  i+=1;
 8001c02:	4b18      	ldr	r3, [pc, #96]	@ (8001c64 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	3301      	adds	r3, #1
 8001c08:	4a16      	ldr	r2, [pc, #88]	@ (8001c64 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001c0a:	6013      	str	r3, [r2, #0]
		  if(i%ONESEC == TRUE)
 8001c0c:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b15      	ldr	r3, [pc, #84]	@ (8001c68 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001c12:	fb83 1302 	smull	r1, r3, r3, r2
 8001c16:	1319      	asrs	r1, r3, #12
 8001c18:	17d3      	asrs	r3, r2, #31
 8001c1a:	1acb      	subs	r3, r1, r3
 8001c1c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001c20:	fb01 f303 	mul.w	r3, r1, r3
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d104      	bne.n	8001c34 <HAL_TIM_PeriodElapsedCallback+0x4c>
		  {
			phase = -phase;
 8001c2a:	4b10      	ldr	r3, [pc, #64]	@ (8001c6c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	425b      	negs	r3, r3
 8001c30:	4a0e      	ldr	r2, [pc, #56]	@ (8001c6c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001c32:	6013      	str	r3, [r2, #0]
		  }
		  ref = phase*step;
 8001c34:	4b0d      	ldr	r3, [pc, #52]	@ (8001c6c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	ee07 3a90 	vmov	s15, r3
 8001c3c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001c40:	ed97 7b02 	vldr	d7, [r7, #8]
 8001c44:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c48:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001c4a:	ed83 7b00 	vstr	d7, [r3]
		  ctrl_tmr_expired = TRUE;
 8001c4e:	4b09      	ldr	r3, [pc, #36]	@ (8001c74 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	701a      	strb	r2, [r3, #0]
	  }
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	2400031c 	.word	0x2400031c
 8001c64:	240006b8 	.word	0x240006b8
 8001c68:	68db8bad 	.word	0x68db8bad
 8001c6c:	24000000 	.word	0x24000000
 8001c70:	240006b0 	.word	0x240006b0
 8001c74:	240006a8 	.word	0x240006a8
 8001c78:	9999999a 	.word	0x9999999a
 8001c7c:	3fc99999 	.word	0x3fc99999

08001c80 <control_update>:

static void control_update(double ref)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	ed87 0b00 	vstr	d0, [r7]
	// sign bit of the command fed to phase input on the h-bridge
	static int phase=GPIO_PIN_SET;
	static uint16_t dutycycle=0;
	double absref = 0;
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// calculate the dutycycle
	absref = fabs(ref); // duty cycle must be positive
 8001c96:	ed97 7b00 	vldr	d7, [r7]
 8001c9a:	eeb0 7bc7 	vabs.f64	d7, d7
 8001c9e:	ed87 7b02 	vstr	d7, [r7, #8]
	dutycycle = calc_dutycycle(absref,VSS);
 8001ca2:	ed9f 7b27 	vldr	d7, [pc, #156]	@ 8001d40 <control_update+0xc0>
 8001ca6:	eeb0 1b47 	vmov.f64	d1, d7
 8001caa:	ed97 0b02 	vldr	d0, [r7, #8]
 8001cae:	f000 f853 	bl	8001d58 <calc_dutycycle>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b24      	ldr	r3, [pc, #144]	@ (8001d48 <control_update+0xc8>)
 8001cb8:	801a      	strh	r2, [r3, #0]

	// Set the actuator direction
	if(ref < 0){
 8001cba:	ed97 7b00 	vldr	d7, [r7]
 8001cbe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc6:	d503      	bpl.n	8001cd0 <control_update+0x50>
		phase = GPIO_PIN_RESET; // reverse direction
 8001cc8:	4b20      	ldr	r3, [pc, #128]	@ (8001d4c <control_update+0xcc>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	e002      	b.n	8001cd6 <control_update+0x56>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 8001cd0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d4c <control_update+0xcc>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]
	}

	//Timer 1 channels
	HAL_GPIO_WritePin(TIM1_CH1_PHASE_GPIO_Port, TIM1_CH1_PHASE_Pin, phase);
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d4c <control_update+0xcc>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	461a      	mov	r2, r3
 8001cde:	2101      	movs	r1, #1
 8001ce0:	481b      	ldr	r0, [pc, #108]	@ (8001d50 <control_update+0xd0>)
 8001ce2:	f001 fabf 	bl	8003264 <HAL_GPIO_WritePin>
	TIM1->CCR1 = dutycycle;
 8001ce6:	4b18      	ldr	r3, [pc, #96]	@ (8001d48 <control_update+0xc8>)
 8001ce8:	881a      	ldrh	r2, [r3, #0]
 8001cea:	4b1a      	ldr	r3, [pc, #104]	@ (8001d54 <control_update+0xd4>)
 8001cec:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_GPIO_WritePin(TIM1_CH2_PHASE_GPIO_Port, TIM1_CH2_PHASE_Pin, phase);
 8001cee:	4b17      	ldr	r3, [pc, #92]	@ (8001d4c <control_update+0xcc>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	2102      	movs	r1, #2
 8001cf8:	4815      	ldr	r0, [pc, #84]	@ (8001d50 <control_update+0xd0>)
 8001cfa:	f001 fab3 	bl	8003264 <HAL_GPIO_WritePin>
	TIM1->CCR2 = dutycycle;
 8001cfe:	4b12      	ldr	r3, [pc, #72]	@ (8001d48 <control_update+0xc8>)
 8001d00:	881a      	ldrh	r2, [r3, #0]
 8001d02:	4b14      	ldr	r3, [pc, #80]	@ (8001d54 <control_update+0xd4>)
 8001d04:	639a      	str	r2, [r3, #56]	@ 0x38

	HAL_GPIO_WritePin(TIM1_CH3_PHASE_GPIO_Port, TIM1_CH3_PHASE_Pin, phase);
 8001d06:	4b11      	ldr	r3, [pc, #68]	@ (8001d4c <control_update+0xcc>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	2104      	movs	r1, #4
 8001d10:	480f      	ldr	r0, [pc, #60]	@ (8001d50 <control_update+0xd0>)
 8001d12:	f001 faa7 	bl	8003264 <HAL_GPIO_WritePin>
	TIM1->CCR3 = dutycycle;
 8001d16:	4b0c      	ldr	r3, [pc, #48]	@ (8001d48 <control_update+0xc8>)
 8001d18:	881a      	ldrh	r2, [r3, #0]
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d54 <control_update+0xd4>)
 8001d1c:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_GPIO_WritePin(TIM1_CH4_PHASE_GPIO_Port, TIM1_CH4_PHASE_Pin, phase);
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <control_update+0xcc>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	2108      	movs	r1, #8
 8001d28:	4809      	ldr	r0, [pc, #36]	@ (8001d50 <control_update+0xd0>)
 8001d2a:	f001 fa9b 	bl	8003264 <HAL_GPIO_WritePin>
	TIM1->CCR4 = dutycycle;
 8001d2e:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <control_update+0xc8>)
 8001d30:	881a      	ldrh	r2, [r3, #0]
 8001d32:	4b08      	ldr	r3, [pc, #32]	@ (8001d54 <control_update+0xd4>)
 8001d34:	641a      	str	r2, [r3, #64]	@ 0x40
	//End Timer 1
}
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	cccccccd 	.word	0xcccccccd
 8001d44:	3ffccccc 	.word	0x3ffccccc
 8001d48:	240006bc 	.word	0x240006bc
 8001d4c:	24000004 	.word	0x24000004
 8001d50:	58021000 	.word	0x58021000
 8001d54:	40010000 	.word	0x40010000

08001d58 <calc_dutycycle>:

static uint16_t calc_dutycycle(double cmd, double vss)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001d62:	ed87 1b00 	vstr	d1, [r7]
	//	@ param cmd command voltage
	//	@ param vss supply voltage
	//	@ return dutycycle

	// duty cycle variable
	uint16_t dc={0};
 8001d66:	2300      	movs	r3, #0
 8001d68:	82fb      	strh	r3, [r7, #22]

	dc = (uint16_t)(cmd/vss * (double)PERIOD);
 8001d6a:	ed97 5b02 	vldr	d5, [r7, #8]
 8001d6e:	ed97 6b00 	vldr	d6, [r7]
 8001d72:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001d76:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8001da8 <calc_dutycycle+0x50>
 8001d7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d7e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d82:	ee17 3a90 	vmov	r3, s15
 8001d86:	82fb      	strh	r3, [r7, #22]
	// keep the dutycycle within the period of the PWM signal
	if(dc>PERIOD) dc = PERIOD;
 8001d88:	8afb      	ldrh	r3, [r7, #22]
 8001d8a:	f645 52c0 	movw	r2, #24000	@ 0x5dc0
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d902      	bls.n	8001d98 <calc_dutycycle+0x40>
 8001d92:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 8001d96:	82fb      	strh	r3, [r7, #22]

	return dc;
 8001d98:	8afb      	ldrh	r3, [r7, #22]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	371c      	adds	r7, #28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	00000000 	.word	0x00000000
 8001dac:	40d77000 	.word	0x40d77000

08001db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db4:	b672      	cpsid	i
}
 8001db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <Error_Handler+0x8>

08001dbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dec <HAL_MspInit+0x30>)
 8001dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001dc8:	4a08      	ldr	r2, [pc, #32]	@ (8001dec <HAL_MspInit+0x30>)
 8001dca:	f043 0302 	orr.w	r3, r3, #2
 8001dce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001dd2:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <HAL_MspInit+0x30>)
 8001dd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	58024400 	.word	0x58024400

08001df0 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b0b4      	sub	sp, #208	@ 0xd0
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001df8:	f107 0310 	add.w	r3, r7, #16
 8001dfc:	22c0      	movs	r2, #192	@ 0xc0
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f008 fa81 	bl	800a308 <memset>
  if(hhrtim->Instance==HRTIM1)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a14      	ldr	r2, [pc, #80]	@ (8001e5c <HAL_HRTIM_MspInit+0x6c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d121      	bne.n	8001e54 <HAL_HRTIM_MspInit+0x64>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8001e10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e22:	f107 0310 	add.w	r3, r7, #16
 8001e26:	4618      	mov	r0, r3
 8001e28:	f003 fedc 	bl	8005be4 <HAL_RCCEx_PeriphCLKConfig>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8001e32:	f7ff ffbd 	bl	8001db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001e36:	4b0a      	ldr	r3, [pc, #40]	@ (8001e60 <HAL_HRTIM_MspInit+0x70>)
 8001e38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e3c:	4a08      	ldr	r2, [pc, #32]	@ (8001e60 <HAL_HRTIM_MspInit+0x70>)
 8001e3e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001e42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e46:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <HAL_HRTIM_MspInit+0x70>)
 8001e48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8001e54:	bf00      	nop
 8001e56:	37d0      	adds	r7, #208	@ 0xd0
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40017400 	.word	0x40017400
 8001e60:	58024400 	.word	0x58024400

08001e64 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	@ 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a23      	ldr	r2, [pc, #140]	@ (8001f10 <HAL_HRTIM_MspPostInit+0xac>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d13f      	bne.n	8001f06 <HAL_HRTIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e86:	4b23      	ldr	r3, [pc, #140]	@ (8001f14 <HAL_HRTIM_MspPostInit+0xb0>)
 8001e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8c:	4a21      	ldr	r2, [pc, #132]	@ (8001f14 <HAL_HRTIM_MspPostInit+0xb0>)
 8001e8e:	f043 0304 	orr.w	r3, r3, #4
 8001e92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e96:	4b1f      	ldr	r3, [pc, #124]	@ (8001f14 <HAL_HRTIM_MspPostInit+0xb0>)
 8001e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f14 <HAL_HRTIM_MspPostInit+0xb0>)
 8001ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8001f14 <HAL_HRTIM_MspPostInit+0xb0>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eb4:	4b17      	ldr	r3, [pc, #92]	@ (8001f14 <HAL_HRTIM_MspPostInit+0xb0>)
 8001eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> HRTIM_CHC1
    PA10     ------> HRTIM_CHC2
    PA11     ------> HRTIM_CHD1
    PA12     ------> HRTIM_CHD2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001ec2:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4619      	mov	r1, r3
 8001ede:	480e      	ldr	r0, [pc, #56]	@ (8001f18 <HAL_HRTIM_MspPostInit+0xb4>)
 8001ee0:	f001 f810 	bl	8002f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001ee4:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001ee8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	4806      	ldr	r0, [pc, #24]	@ (8001f1c <HAL_HRTIM_MspPostInit+0xb8>)
 8001f02:	f000 ffff 	bl	8002f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001f06:	bf00      	nop
 8001f08:	3728      	adds	r7, #40	@ 0x28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40017400 	.word	0x40017400
 8001f14:	58024400 	.word	0x58024400
 8001f18:	58020800 	.word	0x58020800
 8001f1c:	58020000 	.word	0x58020000

08001f20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b0ba      	sub	sp, #232	@ 0xe8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f38:	f107 0310 	add.w	r3, r7, #16
 8001f3c:	22c0      	movs	r2, #192	@ 0xc0
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f008 f9e1 	bl	800a308 <memset>
  if(hi2c->Instance==I2C4)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a27      	ldr	r2, [pc, #156]	@ (8001fe8 <HAL_I2C_MspInit+0xc8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d146      	bne.n	8001fde <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001f50:	f04f 0210 	mov.w	r2, #16
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f62:	f107 0310 	add.w	r3, r7, #16
 8001f66:	4618      	mov	r0, r3
 8001f68:	f003 fe3c 	bl	8005be4 <HAL_RCCEx_PeriphCLKConfig>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001f72:	f7ff ff1d 	bl	8001db0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f76:	4b1d      	ldr	r3, [pc, #116]	@ (8001fec <HAL_I2C_MspInit+0xcc>)
 8001f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8001fec <HAL_I2C_MspInit+0xcc>)
 8001f7e:	f043 0302 	orr.w	r3, r3, #2
 8001f82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f86:	4b19      	ldr	r3, [pc, #100]	@ (8001fec <HAL_I2C_MspInit+0xcc>)
 8001f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB6     ------> I2C4_SCL
    PB9     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001f94:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001f98:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f9c:	2312      	movs	r3, #18
 8001f9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8001fae:	2306      	movs	r3, #6
 8001fb0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001fb8:	4619      	mov	r1, r3
 8001fba:	480d      	ldr	r0, [pc, #52]	@ (8001ff0 <HAL_I2C_MspInit+0xd0>)
 8001fbc:	f000 ffa2 	bl	8002f04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <HAL_I2C_MspInit+0xcc>)
 8001fc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fc6:	4a09      	ldr	r2, [pc, #36]	@ (8001fec <HAL_I2C_MspInit+0xcc>)
 8001fc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fcc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001fd0:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <HAL_I2C_MspInit+0xcc>)
 8001fd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001fde:	bf00      	nop
 8001fe0:	37e8      	adds	r7, #232	@ 0xe8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	58001c00 	.word	0x58001c00
 8001fec:	58024400 	.word	0x58024400
 8001ff0:	58020400 	.word	0x58020400

08001ff4 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b0b6      	sub	sp, #216	@ 0xd8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ffc:	f107 0318 	add.w	r3, r7, #24
 8002000:	22c0      	movs	r2, #192	@ 0xc0
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f008 f97f 	bl	800a308 <memset>
  if(hlptim->Instance==LPTIM1)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a3c      	ldr	r2, [pc, #240]	@ (8002100 <HAL_LPTIM_MspInit+0x10c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d122      	bne.n	800205a <HAL_LPTIM_MspInit+0x66>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002014:	f04f 0220 	mov.w	r2, #32
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 8002020:	2300      	movs	r3, #0
 8002022:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002026:	f107 0318 	add.w	r3, r7, #24
 800202a:	4618      	mov	r0, r3
 800202c:	f003 fdda 	bl	8005be4 <HAL_RCCEx_PeriphCLKConfig>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_LPTIM_MspInit+0x46>
    {
      Error_Handler();
 8002036:	f7ff febb 	bl	8001db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800203a:	4b32      	ldr	r3, [pc, #200]	@ (8002104 <HAL_LPTIM_MspInit+0x110>)
 800203c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002040:	4a30      	ldr	r2, [pc, #192]	@ (8002104 <HAL_LPTIM_MspInit+0x110>)
 8002042:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002046:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800204a:	4b2e      	ldr	r3, [pc, #184]	@ (8002104 <HAL_LPTIM_MspInit+0x110>)
 800204c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002050:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN LPTIM3_MspInit 1 */

  /* USER CODE END LPTIM3_MspInit 1 */
  }

}
 8002058:	e04e      	b.n	80020f8 <HAL_LPTIM_MspInit+0x104>
  else if(hlptim->Instance==LPTIM2)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a2a      	ldr	r2, [pc, #168]	@ (8002108 <HAL_LPTIM_MspInit+0x114>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d122      	bne.n	80020aa <HAL_LPTIM_MspInit+0xb6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8002064:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_D3PCLK1;
 8002070:	2300      	movs	r3, #0
 8002072:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002076:	f107 0318 	add.w	r3, r7, #24
 800207a:	4618      	mov	r0, r3
 800207c:	f003 fdb2 	bl	8005be4 <HAL_RCCEx_PeriphCLKConfig>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_LPTIM_MspInit+0x96>
      Error_Handler();
 8002086:	f7ff fe93 	bl	8001db0 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800208a:	4b1e      	ldr	r3, [pc, #120]	@ (8002104 <HAL_LPTIM_MspInit+0x110>)
 800208c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002090:	4a1c      	ldr	r2, [pc, #112]	@ (8002104 <HAL_LPTIM_MspInit+0x110>)
 8002092:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002096:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800209a:	4b1a      	ldr	r3, [pc, #104]	@ (8002104 <HAL_LPTIM_MspInit+0x110>)
 800209c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	693b      	ldr	r3, [r7, #16]
}
 80020a8:	e026      	b.n	80020f8 <HAL_LPTIM_MspInit+0x104>
  else if(hlptim->Instance==LPTIM3)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a17      	ldr	r2, [pc, #92]	@ (800210c <HAL_LPTIM_MspInit+0x118>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d121      	bne.n	80020f8 <HAL_LPTIM_MspInit+0x104>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM3;
 80020b4:	f04f 0280 	mov.w	r2, #128	@ 0x80
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lptim345ClockSelection = RCC_LPTIM345CLKSOURCE_D3PCLK1;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c6:	f107 0318 	add.w	r3, r7, #24
 80020ca:	4618      	mov	r0, r3
 80020cc:	f003 fd8a 	bl	8005be4 <HAL_RCCEx_PeriphCLKConfig>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_LPTIM_MspInit+0xe6>
      Error_Handler();
 80020d6:	f7ff fe6b 	bl	8001db0 <Error_Handler>
    __HAL_RCC_LPTIM3_CLK_ENABLE();
 80020da:	4b0a      	ldr	r3, [pc, #40]	@ (8002104 <HAL_LPTIM_MspInit+0x110>)
 80020dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020e0:	4a08      	ldr	r2, [pc, #32]	@ (8002104 <HAL_LPTIM_MspInit+0x110>)
 80020e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020e6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80020ea:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <HAL_LPTIM_MspInit+0x110>)
 80020ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]
}
 80020f8:	bf00      	nop
 80020fa:	37d8      	adds	r7, #216	@ 0xd8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40002400 	.word	0x40002400
 8002104:	58024400 	.word	0x58024400
 8002108:	58002400 	.word	0x58002400
 800210c:	58002800 	.word	0x58002800

08002110 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b0c0      	sub	sp, #256	@ 0x100
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002128:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800212c:	22c0      	movs	r2, #192	@ 0xc0
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f008 f8e9 	bl	800a308 <memset>
  if(hspi->Instance==SPI2)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a84      	ldr	r2, [pc, #528]	@ (800234c <HAL_SPI_MspInit+0x23c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	f040 8090 	bne.w	8002262 <HAL_SPI_MspInit+0x152>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002142:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800214e:	2300      	movs	r3, #0
 8002150:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002154:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002158:	4618      	mov	r0, r3
 800215a:	f003 fd43 	bl	8005be4 <HAL_RCCEx_PeriphCLKConfig>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8002164:	f7ff fe24 	bl	8001db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002168:	4b79      	ldr	r3, [pc, #484]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 800216a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800216e:	4a78      	ldr	r2, [pc, #480]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 8002170:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002174:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002178:	4b75      	ldr	r3, [pc, #468]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 800217a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800217e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002182:	627b      	str	r3, [r7, #36]	@ 0x24
 8002184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002186:	4b72      	ldr	r3, [pc, #456]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 8002188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800218c:	4a70      	ldr	r2, [pc, #448]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 800218e:	f043 0304 	orr.w	r3, r3, #4
 8002192:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002196:	4b6e      	ldr	r3, [pc, #440]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 8002198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	623b      	str	r3, [r7, #32]
 80021a2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80021a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021aa:	4a69      	ldr	r2, [pc, #420]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80021ac:	f043 0302 	orr.w	r3, r3, #2
 80021b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021b4:	4b66      	ldr	r3, [pc, #408]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80021b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	61fb      	str	r3, [r7, #28]
 80021c0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021c2:	4b63      	ldr	r3, [pc, #396]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80021c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021c8:	4a61      	ldr	r2, [pc, #388]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80021ca:	f043 0308 	orr.w	r3, r3, #8
 80021ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021d2:	4b5f      	ldr	r3, [pc, #380]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80021d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	69bb      	ldr	r3, [r7, #24]
    PC1     ------> SPI2_MOSI
    PB12     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80021e0:	2302      	movs	r3, #2
 80021e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021f8:	2305      	movs	r3, #5
 80021fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021fe:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002202:	4619      	mov	r1, r3
 8002204:	4853      	ldr	r0, [pc, #332]	@ (8002354 <HAL_SPI_MspInit+0x244>)
 8002206:	f000 fe7d 	bl	8002f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800220a:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800220e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002212:	2302      	movs	r3, #2
 8002214:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221e:	2300      	movs	r3, #0
 8002220:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002224:	2305      	movs	r3, #5
 8002226:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800222e:	4619      	mov	r1, r3
 8002230:	4849      	ldr	r0, [pc, #292]	@ (8002358 <HAL_SPI_MspInit+0x248>)
 8002232:	f000 fe67 	bl	8002f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002236:	2308      	movs	r3, #8
 8002238:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800224e:	2305      	movs	r3, #5
 8002250:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002254:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002258:	4619      	mov	r1, r3
 800225a:	4840      	ldr	r0, [pc, #256]	@ (800235c <HAL_SPI_MspInit+0x24c>)
 800225c:	f000 fe52 	bl	8002f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 8002260:	e06e      	b.n	8002340 <HAL_SPI_MspInit+0x230>
  else if(hspi->Instance==SPI6)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a3e      	ldr	r2, [pc, #248]	@ (8002360 <HAL_SPI_MspInit+0x250>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d169      	bne.n	8002340 <HAL_SPI_MspInit+0x230>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 800226c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 8002278:	2300      	movs	r3, #0
 800227a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800227e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002282:	4618      	mov	r0, r3
 8002284:	f003 fcae 	bl	8005be4 <HAL_RCCEx_PeriphCLKConfig>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_SPI_MspInit+0x182>
      Error_Handler();
 800228e:	f7ff fd8f 	bl	8001db0 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8002292:	4b2f      	ldr	r3, [pc, #188]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 8002294:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002298:	4a2d      	ldr	r2, [pc, #180]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 800229a:	f043 0320 	orr.w	r3, r3, #32
 800229e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80022a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80022a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b0:	4b27      	ldr	r3, [pc, #156]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80022b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022b6:	4a26      	ldr	r2, [pc, #152]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022c0:	4b23      	ldr	r3, [pc, #140]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80022c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ce:	4b20      	ldr	r3, [pc, #128]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80022d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80022d6:	f043 0302 	orr.w	r3, r3, #2
 80022da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022de:	4b1c      	ldr	r3, [pc, #112]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80022e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80022ec:	2330      	movs	r3, #48	@ 0x30
 80022ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	2300      	movs	r3, #0
 8002300:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8002304:	2308      	movs	r3, #8
 8002306:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800230e:	4619      	mov	r1, r3
 8002310:	4814      	ldr	r0, [pc, #80]	@ (8002364 <HAL_SPI_MspInit+0x254>)
 8002312:	f000 fdf7 	bl	8002f04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002316:	2330      	movs	r3, #48	@ 0x30
 8002318:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	2302      	movs	r3, #2
 800231e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002328:	2300      	movs	r3, #0
 800232a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 800232e:	2308      	movs	r3, #8
 8002330:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002334:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002338:	4619      	mov	r1, r3
 800233a:	4807      	ldr	r0, [pc, #28]	@ (8002358 <HAL_SPI_MspInit+0x248>)
 800233c:	f000 fde2 	bl	8002f04 <HAL_GPIO_Init>
}
 8002340:	bf00      	nop
 8002342:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40003800 	.word	0x40003800
 8002350:	58024400 	.word	0x58024400
 8002354:	58020800 	.word	0x58020800
 8002358:	58020400 	.word	0x58020400
 800235c:	58020c00 	.word	0x58020c00
 8002360:	58001400 	.word	0x58001400
 8002364:	58020000 	.word	0x58020000

08002368 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a38      	ldr	r2, [pc, #224]	@ (8002458 <HAL_TIM_Base_MspInit+0xf0>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d117      	bne.n	80023aa <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800237a:	4b38      	ldr	r3, [pc, #224]	@ (800245c <HAL_TIM_Base_MspInit+0xf4>)
 800237c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002380:	4a36      	ldr	r2, [pc, #216]	@ (800245c <HAL_TIM_Base_MspInit+0xf4>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800238a:	4b34      	ldr	r3, [pc, #208]	@ (800245c <HAL_TIM_Base_MspInit+0xf4>)
 800238c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002398:	2200      	movs	r2, #0
 800239a:	2100      	movs	r1, #0
 800239c:	2019      	movs	r0, #25
 800239e:	f000 fd7c 	bl	8002e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80023a2:	2019      	movs	r0, #25
 80023a4:	f000 fd93 	bl	8002ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80023a8:	e052      	b.n	8002450 <HAL_TIM_Base_MspInit+0xe8>
  else if(htim_base->Instance==TIM4)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a2c      	ldr	r2, [pc, #176]	@ (8002460 <HAL_TIM_Base_MspInit+0xf8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d10f      	bne.n	80023d4 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023b4:	4b29      	ldr	r3, [pc, #164]	@ (800245c <HAL_TIM_Base_MspInit+0xf4>)
 80023b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023ba:	4a28      	ldr	r2, [pc, #160]	@ (800245c <HAL_TIM_Base_MspInit+0xf4>)
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023c4:	4b25      	ldr	r3, [pc, #148]	@ (800245c <HAL_TIM_Base_MspInit+0xf4>)
 80023c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	61bb      	str	r3, [r7, #24]
 80023d0:	69bb      	ldr	r3, [r7, #24]
}
 80023d2:	e03d      	b.n	8002450 <HAL_TIM_Base_MspInit+0xe8>
  else if(htim_base->Instance==TIM13)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a22      	ldr	r2, [pc, #136]	@ (8002464 <HAL_TIM_Base_MspInit+0xfc>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d10f      	bne.n	80023fe <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80023de:	4b1f      	ldr	r3, [pc, #124]	@ (800245c <HAL_TIM_Base_MspInit+0xf4>)
 80023e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023e4:	4a1d      	ldr	r2, [pc, #116]	@ (800245c <HAL_TIM_Base_MspInit+0xf4>)
 80023e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023ee:	4b1b      	ldr	r3, [pc, #108]	@ (800245c <HAL_TIM_Base_MspInit+0xf4>)
 80023f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	697b      	ldr	r3, [r7, #20]
}
 80023fc:	e028      	b.n	8002450 <HAL_TIM_Base_MspInit+0xe8>
  else if(htim_base->Instance==TIM14)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a19      	ldr	r2, [pc, #100]	@ (8002468 <HAL_TIM_Base_MspInit+0x100>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d10f      	bne.n	8002428 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002408:	4b14      	ldr	r3, [pc, #80]	@ (800245c <HAL_TIM_Base_MspInit+0xf4>)
 800240a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800240e:	4a13      	ldr	r2, [pc, #76]	@ (800245c <HAL_TIM_Base_MspInit+0xf4>)
 8002410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002414:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002418:	4b10      	ldr	r3, [pc, #64]	@ (800245c <HAL_TIM_Base_MspInit+0xf4>)
 800241a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800241e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	693b      	ldr	r3, [r7, #16]
}
 8002426:	e013      	b.n	8002450 <HAL_TIM_Base_MspInit+0xe8>
  else if(htim_base->Instance==TIM16)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a0f      	ldr	r2, [pc, #60]	@ (800246c <HAL_TIM_Base_MspInit+0x104>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d10e      	bne.n	8002450 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002432:	4b0a      	ldr	r3, [pc, #40]	@ (800245c <HAL_TIM_Base_MspInit+0xf4>)
 8002434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002438:	4a08      	ldr	r2, [pc, #32]	@ (800245c <HAL_TIM_Base_MspInit+0xf4>)
 800243a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800243e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002442:	4b06      	ldr	r3, [pc, #24]	@ (800245c <HAL_TIM_Base_MspInit+0xf4>)
 8002444:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]
}
 8002450:	bf00      	nop
 8002452:	3720      	adds	r7, #32
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40010000 	.word	0x40010000
 800245c:	58024400 	.word	0x58024400
 8002460:	40000800 	.word	0x40000800
 8002464:	40001c00 	.word	0x40001c00
 8002468:	40002000 	.word	0x40002000
 800246c:	40014400 	.word	0x40014400

08002470 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002470:	b480      	push	{r7}
 8002472:	b089      	sub	sp, #36	@ 0x24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002480:	d10f      	bne.n	80024a2 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002482:	4b34      	ldr	r3, [pc, #208]	@ (8002554 <HAL_TIM_PWM_MspInit+0xe4>)
 8002484:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002488:	4a32      	ldr	r2, [pc, #200]	@ (8002554 <HAL_TIM_PWM_MspInit+0xe4>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002492:	4b30      	ldr	r3, [pc, #192]	@ (8002554 <HAL_TIM_PWM_MspInit+0xe4>)
 8002494:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80024a0:	e052      	b.n	8002548 <HAL_TIM_PWM_MspInit+0xd8>
  else if(htim_pwm->Instance==TIM5)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a2c      	ldr	r2, [pc, #176]	@ (8002558 <HAL_TIM_PWM_MspInit+0xe8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d10f      	bne.n	80024cc <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80024ac:	4b29      	ldr	r3, [pc, #164]	@ (8002554 <HAL_TIM_PWM_MspInit+0xe4>)
 80024ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024b2:	4a28      	ldr	r2, [pc, #160]	@ (8002554 <HAL_TIM_PWM_MspInit+0xe4>)
 80024b4:	f043 0308 	orr.w	r3, r3, #8
 80024b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80024bc:	4b25      	ldr	r3, [pc, #148]	@ (8002554 <HAL_TIM_PWM_MspInit+0xe4>)
 80024be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	61bb      	str	r3, [r7, #24]
 80024c8:	69bb      	ldr	r3, [r7, #24]
}
 80024ca:	e03d      	b.n	8002548 <HAL_TIM_PWM_MspInit+0xd8>
  else if(htim_pwm->Instance==TIM8)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a22      	ldr	r2, [pc, #136]	@ (800255c <HAL_TIM_PWM_MspInit+0xec>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d10f      	bne.n	80024f6 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80024d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002554 <HAL_TIM_PWM_MspInit+0xe4>)
 80024d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002554 <HAL_TIM_PWM_MspInit+0xe4>)
 80024de:	f043 0302 	orr.w	r3, r3, #2
 80024e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002554 <HAL_TIM_PWM_MspInit+0xe4>)
 80024e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	697b      	ldr	r3, [r7, #20]
}
 80024f4:	e028      	b.n	8002548 <HAL_TIM_PWM_MspInit+0xd8>
  else if(htim_pwm->Instance==TIM12)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a19      	ldr	r2, [pc, #100]	@ (8002560 <HAL_TIM_PWM_MspInit+0xf0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d10f      	bne.n	8002520 <HAL_TIM_PWM_MspInit+0xb0>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002500:	4b14      	ldr	r3, [pc, #80]	@ (8002554 <HAL_TIM_PWM_MspInit+0xe4>)
 8002502:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002506:	4a13      	ldr	r2, [pc, #76]	@ (8002554 <HAL_TIM_PWM_MspInit+0xe4>)
 8002508:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800250c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002510:	4b10      	ldr	r3, [pc, #64]	@ (8002554 <HAL_TIM_PWM_MspInit+0xe4>)
 8002512:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	693b      	ldr	r3, [r7, #16]
}
 800251e:	e013      	b.n	8002548 <HAL_TIM_PWM_MspInit+0xd8>
  else if(htim_pwm->Instance==TIM15)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0f      	ldr	r2, [pc, #60]	@ (8002564 <HAL_TIM_PWM_MspInit+0xf4>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d10e      	bne.n	8002548 <HAL_TIM_PWM_MspInit+0xd8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800252a:	4b0a      	ldr	r3, [pc, #40]	@ (8002554 <HAL_TIM_PWM_MspInit+0xe4>)
 800252c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002530:	4a08      	ldr	r2, [pc, #32]	@ (8002554 <HAL_TIM_PWM_MspInit+0xe4>)
 8002532:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002536:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800253a:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <HAL_TIM_PWM_MspInit+0xe4>)
 800253c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]
}
 8002548:	bf00      	nop
 800254a:	3724      	adds	r7, #36	@ 0x24
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	58024400 	.word	0x58024400
 8002558:	40000c00 	.word	0x40000c00
 800255c:	40010400 	.word	0x40010400
 8002560:	40001800 	.word	0x40001800
 8002564:	40014000 	.word	0x40014000

08002568 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b092      	sub	sp, #72	@ 0x48
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002570:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4aa4      	ldr	r2, [pc, #656]	@ (8002818 <HAL_TIM_MspPostInit+0x2b0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d120      	bne.n	80025cc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800258a:	4ba4      	ldr	r3, [pc, #656]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 800258c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002590:	4aa2      	ldr	r2, [pc, #648]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 8002592:	f043 0310 	orr.w	r3, r3, #16
 8002596:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800259a:	4ba0      	ldr	r3, [pc, #640]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 800259c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80025a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80025a8:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80025ac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ae:	2302      	movs	r3, #2
 80025b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b6:	2300      	movs	r3, #0
 80025b8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025ba:	2301      	movs	r3, #1
 80025bc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025c2:	4619      	mov	r1, r3
 80025c4:	4896      	ldr	r0, [pc, #600]	@ (8002820 <HAL_TIM_MspPostInit+0x2b8>)
 80025c6:	f000 fc9d 	bl	8002f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80025ca:	e189      	b.n	80028e0 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM2)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025d4:	d11f      	bne.n	8002616 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d6:	4b91      	ldr	r3, [pc, #580]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 80025d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025dc:	4a8f      	ldr	r2, [pc, #572]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025e6:	4b8d      	ldr	r3, [pc, #564]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 80025e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0|TIM2_CH4_LDC_Pin;
 80025f4:	2309      	movs	r3, #9
 80025f6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002600:	2300      	movs	r3, #0
 8002602:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002604:	2301      	movs	r3, #1
 8002606:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002608:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800260c:	4619      	mov	r1, r3
 800260e:	4885      	ldr	r0, [pc, #532]	@ (8002824 <HAL_TIM_MspPostInit+0x2bc>)
 8002610:	f000 fc78 	bl	8002f04 <HAL_GPIO_Init>
}
 8002614:	e164      	b.n	80028e0 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM4)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a83      	ldr	r2, [pc, #524]	@ (8002828 <HAL_TIM_MspPostInit+0x2c0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d13f      	bne.n	80026a0 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002620:	4b7e      	ldr	r3, [pc, #504]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 8002622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002626:	4a7d      	ldr	r2, [pc, #500]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 8002628:	f043 0308 	orr.w	r3, r3, #8
 800262c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002630:	4b7a      	ldr	r3, [pc, #488]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 8002632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800263c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800263e:	4b77      	ldr	r3, [pc, #476]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 8002640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002644:	4a75      	ldr	r2, [pc, #468]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 8002646:	f043 0302 	orr.w	r3, r3, #2
 800264a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800264e:	4b73      	ldr	r3, [pc, #460]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 8002650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	627b      	str	r3, [r7, #36]	@ 0x24
 800265a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800265c:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002660:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002662:	2302      	movs	r3, #2
 8002664:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266a:	2300      	movs	r3, #0
 800266c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800266e:	2302      	movs	r3, #2
 8002670:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002672:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002676:	4619      	mov	r1, r3
 8002678:	486c      	ldr	r0, [pc, #432]	@ (800282c <HAL_TIM_MspPostInit+0x2c4>)
 800267a:	f000 fc43 	bl	8002f04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800267e:	2380      	movs	r3, #128	@ 0x80
 8002680:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002682:	2302      	movs	r3, #2
 8002684:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268a:	2300      	movs	r3, #0
 800268c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800268e:	2302      	movs	r3, #2
 8002690:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002692:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002696:	4619      	mov	r1, r3
 8002698:	4865      	ldr	r0, [pc, #404]	@ (8002830 <HAL_TIM_MspPostInit+0x2c8>)
 800269a:	f000 fc33 	bl	8002f04 <HAL_GPIO_Init>
}
 800269e:	e11f      	b.n	80028e0 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM5)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a63      	ldr	r2, [pc, #396]	@ (8002834 <HAL_TIM_MspPostInit+0x2cc>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d11f      	bne.n	80026ea <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026aa:	4b5c      	ldr	r3, [pc, #368]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 80026ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026b0:	4a5a      	ldr	r2, [pc, #360]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026ba:	4b58      	ldr	r3, [pc, #352]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 80026bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	623b      	str	r3, [r7, #32]
 80026c6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80026c8:	2306      	movs	r3, #6
 80026ca:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026cc:	2302      	movs	r3, #2
 80026ce:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d4:	2300      	movs	r3, #0
 80026d6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80026d8:	2302      	movs	r3, #2
 80026da:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026dc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80026e0:	4619      	mov	r1, r3
 80026e2:	4850      	ldr	r0, [pc, #320]	@ (8002824 <HAL_TIM_MspPostInit+0x2bc>)
 80026e4:	f000 fc0e 	bl	8002f04 <HAL_GPIO_Init>
}
 80026e8:	e0fa      	b.n	80028e0 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM8)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a52      	ldr	r2, [pc, #328]	@ (8002838 <HAL_TIM_MspPostInit+0x2d0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d120      	bne.n	8002736 <HAL_TIM_MspPostInit+0x1ce>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f4:	4b49      	ldr	r3, [pc, #292]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 80026f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026fa:	4a48      	ldr	r2, [pc, #288]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 80026fc:	f043 0304 	orr.w	r3, r3, #4
 8002700:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002704:	4b45      	ldr	r3, [pc, #276]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 8002706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	61fb      	str	r3, [r7, #28]
 8002710:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002712:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002716:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002718:	2302      	movs	r3, #2
 800271a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002720:	2300      	movs	r3, #0
 8002722:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002724:	2303      	movs	r3, #3
 8002726:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002728:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800272c:	4619      	mov	r1, r3
 800272e:	4843      	ldr	r0, [pc, #268]	@ (800283c <HAL_TIM_MspPostInit+0x2d4>)
 8002730:	f000 fbe8 	bl	8002f04 <HAL_GPIO_Init>
}
 8002734:	e0d4      	b.n	80028e0 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM12)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a41      	ldr	r2, [pc, #260]	@ (8002840 <HAL_TIM_MspPostInit+0x2d8>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d120      	bne.n	8002782 <HAL_TIM_MspPostInit+0x21a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002740:	4b36      	ldr	r3, [pc, #216]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 8002742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002746:	4a35      	ldr	r2, [pc, #212]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 8002748:	f043 0302 	orr.w	r3, r3, #2
 800274c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002750:	4b32      	ldr	r3, [pc, #200]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 8002752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	61bb      	str	r3, [r7, #24]
 800275c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800275e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002762:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002764:	2302      	movs	r3, #2
 8002766:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276c:	2300      	movs	r3, #0
 800276e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002770:	2302      	movs	r3, #2
 8002772:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002774:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002778:	4619      	mov	r1, r3
 800277a:	482d      	ldr	r0, [pc, #180]	@ (8002830 <HAL_TIM_MspPostInit+0x2c8>)
 800277c:	f000 fbc2 	bl	8002f04 <HAL_GPIO_Init>
}
 8002780:	e0ae      	b.n	80028e0 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM13)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a2f      	ldr	r2, [pc, #188]	@ (8002844 <HAL_TIM_MspPostInit+0x2dc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d11f      	bne.n	80027cc <HAL_TIM_MspPostInit+0x264>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278c:	4b23      	ldr	r3, [pc, #140]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 800278e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002792:	4a22      	ldr	r2, [pc, #136]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800279c:	4b1f      	ldr	r3, [pc, #124]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 800279e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027aa:	2340      	movs	r3, #64	@ 0x40
 80027ac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ae:	2302      	movs	r3, #2
 80027b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b6:	2300      	movs	r3, #0
 80027b8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80027ba:	2309      	movs	r3, #9
 80027bc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80027c2:	4619      	mov	r1, r3
 80027c4:	4817      	ldr	r0, [pc, #92]	@ (8002824 <HAL_TIM_MspPostInit+0x2bc>)
 80027c6:	f000 fb9d 	bl	8002f04 <HAL_GPIO_Init>
}
 80027ca:	e089      	b.n	80028e0 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM14)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002848 <HAL_TIM_MspPostInit+0x2e0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d13a      	bne.n	800284c <HAL_TIM_MspPostInit+0x2e4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d6:	4b11      	ldr	r3, [pc, #68]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 80027d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027dc:	4a0f      	ldr	r2, [pc, #60]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027e6:	4b0d      	ldr	r3, [pc, #52]	@ (800281c <HAL_TIM_MspPostInit+0x2b4>)
 80027e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80027f4:	2380      	movs	r3, #128	@ 0x80
 80027f6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f8:	2302      	movs	r3, #2
 80027fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002800:	2300      	movs	r3, #0
 8002802:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002804:	2309      	movs	r3, #9
 8002806:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002808:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800280c:	4619      	mov	r1, r3
 800280e:	4805      	ldr	r0, [pc, #20]	@ (8002824 <HAL_TIM_MspPostInit+0x2bc>)
 8002810:	f000 fb78 	bl	8002f04 <HAL_GPIO_Init>
}
 8002814:	e064      	b.n	80028e0 <HAL_TIM_MspPostInit+0x378>
 8002816:	bf00      	nop
 8002818:	40010000 	.word	0x40010000
 800281c:	58024400 	.word	0x58024400
 8002820:	58021000 	.word	0x58021000
 8002824:	58020000 	.word	0x58020000
 8002828:	40000800 	.word	0x40000800
 800282c:	58020c00 	.word	0x58020c00
 8002830:	58020400 	.word	0x58020400
 8002834:	40000c00 	.word	0x40000c00
 8002838:	40010400 	.word	0x40010400
 800283c:	58020800 	.word	0x58020800
 8002840:	40001800 	.word	0x40001800
 8002844:	40001c00 	.word	0x40001c00
 8002848:	40002000 	.word	0x40002000
  else if(htim->Instance==TIM15)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a25      	ldr	r2, [pc, #148]	@ (80028e8 <HAL_TIM_MspPostInit+0x380>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d11f      	bne.n	8002896 <HAL_TIM_MspPostInit+0x32e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002856:	4b25      	ldr	r3, [pc, #148]	@ (80028ec <HAL_TIM_MspPostInit+0x384>)
 8002858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800285c:	4a23      	ldr	r2, [pc, #140]	@ (80028ec <HAL_TIM_MspPostInit+0x384>)
 800285e:	f043 0310 	orr.w	r3, r3, #16
 8002862:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002866:	4b21      	ldr	r3, [pc, #132]	@ (80028ec <HAL_TIM_MspPostInit+0x384>)
 8002868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002874:	2360      	movs	r3, #96	@ 0x60
 8002876:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002878:	2302      	movs	r3, #2
 800287a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002880:	2300      	movs	r3, #0
 8002882:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002884:	2304      	movs	r3, #4
 8002886:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002888:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800288c:	4619      	mov	r1, r3
 800288e:	4818      	ldr	r0, [pc, #96]	@ (80028f0 <HAL_TIM_MspPostInit+0x388>)
 8002890:	f000 fb38 	bl	8002f04 <HAL_GPIO_Init>
}
 8002894:	e024      	b.n	80028e0 <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM16)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a16      	ldr	r2, [pc, #88]	@ (80028f4 <HAL_TIM_MspPostInit+0x38c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d11f      	bne.n	80028e0 <HAL_TIM_MspPostInit+0x378>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a0:	4b12      	ldr	r3, [pc, #72]	@ (80028ec <HAL_TIM_MspPostInit+0x384>)
 80028a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028a6:	4a11      	ldr	r2, [pc, #68]	@ (80028ec <HAL_TIM_MspPostInit+0x384>)
 80028a8:	f043 0302 	orr.w	r3, r3, #2
 80028ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028b0:	4b0e      	ldr	r3, [pc, #56]	@ (80028ec <HAL_TIM_MspPostInit+0x384>)
 80028b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028c2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028cc:	2300      	movs	r3, #0
 80028ce:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80028d0:	2301      	movs	r3, #1
 80028d2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80028d8:	4619      	mov	r1, r3
 80028da:	4807      	ldr	r0, [pc, #28]	@ (80028f8 <HAL_TIM_MspPostInit+0x390>)
 80028dc:	f000 fb12 	bl	8002f04 <HAL_GPIO_Init>
}
 80028e0:	bf00      	nop
 80028e2:	3748      	adds	r7, #72	@ 0x48
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40014000 	.word	0x40014000
 80028ec:	58024400 	.word	0x58024400
 80028f0:	58021000 	.word	0x58021000
 80028f4:	40014400 	.word	0x40014400
 80028f8:	58020400 	.word	0x58020400

080028fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b0ba      	sub	sp, #232	@ 0xe8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002904:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002914:	f107 0310 	add.w	r3, r7, #16
 8002918:	22c0      	movs	r2, #192	@ 0xc0
 800291a:	2100      	movs	r1, #0
 800291c:	4618      	mov	r0, r3
 800291e:	f007 fcf3 	bl	800a308 <memset>
  if(huart->Instance==UART4)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a27      	ldr	r2, [pc, #156]	@ (80029c4 <HAL_UART_MspInit+0xc8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d146      	bne.n	80029ba <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800292c:	f04f 0202 	mov.w	r2, #2
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002938:	2300      	movs	r3, #0
 800293a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800293e:	f107 0310 	add.w	r3, r7, #16
 8002942:	4618      	mov	r0, r3
 8002944:	f003 f94e 	bl	8005be4 <HAL_RCCEx_PeriphCLKConfig>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800294e:	f7ff fa2f 	bl	8001db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002952:	4b1d      	ldr	r3, [pc, #116]	@ (80029c8 <HAL_UART_MspInit+0xcc>)
 8002954:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002958:	4a1b      	ldr	r2, [pc, #108]	@ (80029c8 <HAL_UART_MspInit+0xcc>)
 800295a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800295e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002962:	4b19      	ldr	r3, [pc, #100]	@ (80029c8 <HAL_UART_MspInit+0xcc>)
 8002964:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002968:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002970:	4b15      	ldr	r3, [pc, #84]	@ (80029c8 <HAL_UART_MspInit+0xcc>)
 8002972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002976:	4a14      	ldr	r2, [pc, #80]	@ (80029c8 <HAL_UART_MspInit+0xcc>)
 8002978:	f043 0304 	orr.w	r3, r3, #4
 800297c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002980:	4b11      	ldr	r3, [pc, #68]	@ (80029c8 <HAL_UART_MspInit+0xcc>)
 8002982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800298e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002992:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	2302      	movs	r3, #2
 8002998:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	2300      	movs	r3, #0
 800299e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80029a8:	2308      	movs	r3, #8
 80029aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80029b2:	4619      	mov	r1, r3
 80029b4:	4805      	ldr	r0, [pc, #20]	@ (80029cc <HAL_UART_MspInit+0xd0>)
 80029b6:	f000 faa5 	bl	8002f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80029ba:	bf00      	nop
 80029bc:	37e8      	adds	r7, #232	@ 0xe8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40004c00 	.word	0x40004c00
 80029c8:	58024400 	.word	0x58024400
 80029cc:	58020800 	.word	0x58020800

080029d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029d4:	bf00      	nop
 80029d6:	e7fd      	b.n	80029d4 <NMI_Handler+0x4>

080029d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029dc:	bf00      	nop
 80029de:	e7fd      	b.n	80029dc <HardFault_Handler+0x4>

080029e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029e4:	bf00      	nop
 80029e6:	e7fd      	b.n	80029e4 <MemManage_Handler+0x4>

080029e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029ec:	bf00      	nop
 80029ee:	e7fd      	b.n	80029ec <BusFault_Handler+0x4>

080029f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029f4:	bf00      	nop
 80029f6:	e7fd      	b.n	80029f4 <UsageFault_Handler+0x4>

080029f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a26:	f000 f931 	bl	8002c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a34:	4802      	ldr	r0, [pc, #8]	@ (8002a40 <TIM1_UP_IRQHandler+0x10>)
 8002a36:	f005 fae5 	bl	8008004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	2400031c 	.word	0x2400031c

08002a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a48:	4b37      	ldr	r3, [pc, #220]	@ (8002b28 <SystemInit+0xe4>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4e:	4a36      	ldr	r2, [pc, #216]	@ (8002b28 <SystemInit+0xe4>)
 8002a50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a58:	4b34      	ldr	r3, [pc, #208]	@ (8002b2c <SystemInit+0xe8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	2b06      	cmp	r3, #6
 8002a62:	d807      	bhi.n	8002a74 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a64:	4b31      	ldr	r3, [pc, #196]	@ (8002b2c <SystemInit+0xe8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f023 030f 	bic.w	r3, r3, #15
 8002a6c:	4a2f      	ldr	r2, [pc, #188]	@ (8002b2c <SystemInit+0xe8>)
 8002a6e:	f043 0307 	orr.w	r3, r3, #7
 8002a72:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002a74:	4b2e      	ldr	r3, [pc, #184]	@ (8002b30 <SystemInit+0xec>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a2d      	ldr	r2, [pc, #180]	@ (8002b30 <SystemInit+0xec>)
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a80:	4b2b      	ldr	r3, [pc, #172]	@ (8002b30 <SystemInit+0xec>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002a86:	4b2a      	ldr	r3, [pc, #168]	@ (8002b30 <SystemInit+0xec>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	4929      	ldr	r1, [pc, #164]	@ (8002b30 <SystemInit+0xec>)
 8002a8c:	4b29      	ldr	r3, [pc, #164]	@ (8002b34 <SystemInit+0xf0>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a92:	4b26      	ldr	r3, [pc, #152]	@ (8002b2c <SystemInit+0xe8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d007      	beq.n	8002aae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a9e:	4b23      	ldr	r3, [pc, #140]	@ (8002b2c <SystemInit+0xe8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 030f 	bic.w	r3, r3, #15
 8002aa6:	4a21      	ldr	r2, [pc, #132]	@ (8002b2c <SystemInit+0xe8>)
 8002aa8:	f043 0307 	orr.w	r3, r3, #7
 8002aac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002aae:	4b20      	ldr	r3, [pc, #128]	@ (8002b30 <SystemInit+0xec>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8002b30 <SystemInit+0xec>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002aba:	4b1d      	ldr	r3, [pc, #116]	@ (8002b30 <SystemInit+0xec>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b30 <SystemInit+0xec>)
 8002ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8002b38 <SystemInit+0xf4>)
 8002ac4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b30 <SystemInit+0xec>)
 8002ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8002b3c <SystemInit+0xf8>)
 8002aca:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002acc:	4b18      	ldr	r3, [pc, #96]	@ (8002b30 <SystemInit+0xec>)
 8002ace:	4a1c      	ldr	r2, [pc, #112]	@ (8002b40 <SystemInit+0xfc>)
 8002ad0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002ad2:	4b17      	ldr	r3, [pc, #92]	@ (8002b30 <SystemInit+0xec>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002ad8:	4b15      	ldr	r3, [pc, #84]	@ (8002b30 <SystemInit+0xec>)
 8002ada:	4a19      	ldr	r2, [pc, #100]	@ (8002b40 <SystemInit+0xfc>)
 8002adc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002ade:	4b14      	ldr	r3, [pc, #80]	@ (8002b30 <SystemInit+0xec>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002ae4:	4b12      	ldr	r3, [pc, #72]	@ (8002b30 <SystemInit+0xec>)
 8002ae6:	4a16      	ldr	r2, [pc, #88]	@ (8002b40 <SystemInit+0xfc>)
 8002ae8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002aea:	4b11      	ldr	r3, [pc, #68]	@ (8002b30 <SystemInit+0xec>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002af0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b30 <SystemInit+0xec>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0e      	ldr	r2, [pc, #56]	@ (8002b30 <SystemInit+0xec>)
 8002af6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002afa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002afc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b30 <SystemInit+0xec>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002b02:	4b10      	ldr	r3, [pc, #64]	@ (8002b44 <SystemInit+0x100>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4b10      	ldr	r3, [pc, #64]	@ (8002b48 <SystemInit+0x104>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b0e:	d202      	bcs.n	8002b16 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002b10:	4b0e      	ldr	r3, [pc, #56]	@ (8002b4c <SystemInit+0x108>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002b16:	4b0e      	ldr	r3, [pc, #56]	@ (8002b50 <SystemInit+0x10c>)
 8002b18:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002b1c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002b1e:	bf00      	nop
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000ed00 	.word	0xe000ed00
 8002b2c:	52002000 	.word	0x52002000
 8002b30:	58024400 	.word	0x58024400
 8002b34:	eaf6ed7f 	.word	0xeaf6ed7f
 8002b38:	02020200 	.word	0x02020200
 8002b3c:	01ff0000 	.word	0x01ff0000
 8002b40:	01010280 	.word	0x01010280
 8002b44:	5c001000 	.word	0x5c001000
 8002b48:	ffff0000 	.word	0xffff0000
 8002b4c:	51008108 	.word	0x51008108
 8002b50:	52004000 	.word	0x52004000

08002b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002b54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b58:	f7ff ff74 	bl	8002a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b5c:	480c      	ldr	r0, [pc, #48]	@ (8002b90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b5e:	490d      	ldr	r1, [pc, #52]	@ (8002b94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b60:	4a0d      	ldr	r2, [pc, #52]	@ (8002b98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b64:	e002      	b.n	8002b6c <LoopCopyDataInit>

08002b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b6a:	3304      	adds	r3, #4

08002b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b70:	d3f9      	bcc.n	8002b66 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b72:	4a0a      	ldr	r2, [pc, #40]	@ (8002b9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b74:	4c0a      	ldr	r4, [pc, #40]	@ (8002ba0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b78:	e001      	b.n	8002b7e <LoopFillZerobss>

08002b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b7c:	3204      	adds	r2, #4

08002b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b80:	d3fb      	bcc.n	8002b7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b82:	f007 fbc9 	bl	800a318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b86:	f7fd fdcd 	bl	8000724 <main>
  bx  lr
 8002b8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b8c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002b90:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002b94:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 8002b98:	0800a3c0 	.word	0x0800a3c0
  ldr r2, =_sbss
 8002b9c:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8002ba0:	240006c4 	.word	0x240006c4

08002ba4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ba4:	e7fe      	b.n	8002ba4 <ADC3_IRQHandler>
	...

08002ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bae:	2003      	movs	r0, #3
 8002bb0:	f000 f968 	bl	8002e84 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002bb4:	f002 fe40 	bl	8005838 <HAL_RCC_GetSysClockFreq>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	4b15      	ldr	r3, [pc, #84]	@ (8002c10 <HAL_Init+0x68>)
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	0a1b      	lsrs	r3, r3, #8
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	4913      	ldr	r1, [pc, #76]	@ (8002c14 <HAL_Init+0x6c>)
 8002bc6:	5ccb      	ldrb	r3, [r1, r3]
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8002c10 <HAL_Init+0x68>)
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	4a0e      	ldr	r2, [pc, #56]	@ (8002c14 <HAL_Init+0x6c>)
 8002bdc:	5cd3      	ldrb	r3, [r2, r3]
 8002bde:	f003 031f 	and.w	r3, r3, #31
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
 8002be8:	4a0b      	ldr	r2, [pc, #44]	@ (8002c18 <HAL_Init+0x70>)
 8002bea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002bec:	4a0b      	ldr	r2, [pc, #44]	@ (8002c1c <HAL_Init+0x74>)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bf2:	200f      	movs	r0, #15
 8002bf4:	f000 f814 	bl	8002c20 <HAL_InitTick>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e002      	b.n	8002c08 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c02:	f7ff f8db 	bl	8001dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	58024400 	.word	0x58024400
 8002c14:	0800a378 	.word	0x0800a378
 8002c18:	2400000c 	.word	0x2400000c
 8002c1c:	24000008 	.word	0x24000008

08002c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002c28:	4b15      	ldr	r3, [pc, #84]	@ (8002c80 <HAL_InitTick+0x60>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e021      	b.n	8002c78 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002c34:	4b13      	ldr	r3, [pc, #76]	@ (8002c84 <HAL_InitTick+0x64>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4b11      	ldr	r3, [pc, #68]	@ (8002c80 <HAL_InitTick+0x60>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 f94d 	bl	8002eea <HAL_SYSTICK_Config>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e00e      	b.n	8002c78 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b0f      	cmp	r3, #15
 8002c5e:	d80a      	bhi.n	8002c76 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c60:	2200      	movs	r2, #0
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c68:	f000 f917 	bl	8002e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c6c:	4a06      	ldr	r2, [pc, #24]	@ (8002c88 <HAL_InitTick+0x68>)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	e000      	b.n	8002c78 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	24000014 	.word	0x24000014
 8002c84:	24000008 	.word	0x24000008
 8002c88:	24000010 	.word	0x24000010

08002c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c90:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <HAL_IncTick+0x20>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	461a      	mov	r2, r3
 8002c96:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <HAL_IncTick+0x24>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	4a04      	ldr	r2, [pc, #16]	@ (8002cb0 <HAL_IncTick+0x24>)
 8002c9e:	6013      	str	r3, [r2, #0]
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	24000014 	.word	0x24000014
 8002cb0:	240006c0 	.word	0x240006c0

08002cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cb8:	4b03      	ldr	r3, [pc, #12]	@ (8002cc8 <HAL_GetTick+0x14>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	240006c0 	.word	0x240006c0

08002ccc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002cd0:	4b03      	ldr	r3, [pc, #12]	@ (8002ce0 <HAL_GetREVID+0x14>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	0c1b      	lsrs	r3, r3, #16
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	5c001000 	.word	0x5c001000

08002ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d24 <__NVIC_SetPriorityGrouping+0x40>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d00:	4013      	ands	r3, r2
 8002d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d0c:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <__NVIC_SetPriorityGrouping+0x44>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d12:	4a04      	ldr	r2, [pc, #16]	@ (8002d24 <__NVIC_SetPriorityGrouping+0x40>)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	60d3      	str	r3, [r2, #12]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000ed00 	.word	0xe000ed00
 8002d28:	05fa0000 	.word	0x05fa0000

08002d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d30:	4b04      	ldr	r3, [pc, #16]	@ (8002d44 <__NVIC_GetPriorityGrouping+0x18>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	f003 0307 	and.w	r3, r3, #7
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	db0b      	blt.n	8002d72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d5a:	88fb      	ldrh	r3, [r7, #6]
 8002d5c:	f003 021f 	and.w	r2, r3, #31
 8002d60:	4907      	ldr	r1, [pc, #28]	@ (8002d80 <__NVIC_EnableIRQ+0x38>)
 8002d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	2001      	movs	r0, #1
 8002d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	e000e100 	.word	0xe000e100

08002d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	6039      	str	r1, [r7, #0]
 8002d8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	db0a      	blt.n	8002dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	490c      	ldr	r1, [pc, #48]	@ (8002dd0 <__NVIC_SetPriority+0x4c>)
 8002d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002da2:	0112      	lsls	r2, r2, #4
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	440b      	add	r3, r1
 8002da8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dac:	e00a      	b.n	8002dc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	4908      	ldr	r1, [pc, #32]	@ (8002dd4 <__NVIC_SetPriority+0x50>)
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	3b04      	subs	r3, #4
 8002dbc:	0112      	lsls	r2, r2, #4
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	761a      	strb	r2, [r3, #24]
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	e000e100 	.word	0xe000e100
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b089      	sub	sp, #36	@ 0x24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f1c3 0307 	rsb	r3, r3, #7
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	bf28      	it	cs
 8002df6:	2304      	movcs	r3, #4
 8002df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	2b06      	cmp	r3, #6
 8002e00:	d902      	bls.n	8002e08 <NVIC_EncodePriority+0x30>
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	3b03      	subs	r3, #3
 8002e06:	e000      	b.n	8002e0a <NVIC_EncodePriority+0x32>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43da      	mvns	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2a:	43d9      	mvns	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e30:	4313      	orrs	r3, r2
         );
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3724      	adds	r7, #36	@ 0x24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e50:	d301      	bcc.n	8002e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e52:	2301      	movs	r3, #1
 8002e54:	e00f      	b.n	8002e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e56:	4a0a      	ldr	r2, [pc, #40]	@ (8002e80 <SysTick_Config+0x40>)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e5e:	210f      	movs	r1, #15
 8002e60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e64:	f7ff ff8e 	bl	8002d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e68:	4b05      	ldr	r3, [pc, #20]	@ (8002e80 <SysTick_Config+0x40>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e6e:	4b04      	ldr	r3, [pc, #16]	@ (8002e80 <SysTick_Config+0x40>)
 8002e70:	2207      	movs	r2, #7
 8002e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	e000e010 	.word	0xe000e010

08002e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff ff29 	bl	8002ce4 <__NVIC_SetPriorityGrouping>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b086      	sub	sp, #24
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea8:	f7ff ff40 	bl	8002d2c <__NVIC_GetPriorityGrouping>
 8002eac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68b9      	ldr	r1, [r7, #8]
 8002eb2:	6978      	ldr	r0, [r7, #20]
 8002eb4:	f7ff ff90 	bl	8002dd8 <NVIC_EncodePriority>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff5f 	bl	8002d84 <__NVIC_SetPriority>
}
 8002ec6:	bf00      	nop
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff33 	bl	8002d48 <__NVIC_EnableIRQ>
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff ffa4 	bl	8002e40 <SysTick_Config>
 8002ef8:	4603      	mov	r3, r0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	@ 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002f12:	4b89      	ldr	r3, [pc, #548]	@ (8003138 <HAL_GPIO_Init+0x234>)
 8002f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f16:	e194      	b.n	8003242 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	fa01 f303 	lsl.w	r3, r1, r3
 8002f24:	4013      	ands	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 8186 	beq.w	800323c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d005      	beq.n	8002f48 <HAL_GPIO_Init+0x44>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d130      	bne.n	8002faa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	2203      	movs	r2, #3
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f7e:	2201      	movs	r2, #1
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	091b      	lsrs	r3, r3, #4
 8002f94:	f003 0201 	and.w	r2, r3, #1
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d017      	beq.n	8002fe6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d123      	bne.n	800303a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	08da      	lsrs	r2, r3, #3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	3208      	adds	r2, #8
 8002ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	220f      	movs	r2, #15
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4013      	ands	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	08da      	lsrs	r2, r3, #3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3208      	adds	r2, #8
 8003034:	69b9      	ldr	r1, [r7, #24]
 8003036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	2203      	movs	r2, #3
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43db      	mvns	r3, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4013      	ands	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f003 0203 	and.w	r2, r3, #3
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 80e0 	beq.w	800323c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800307c:	4b2f      	ldr	r3, [pc, #188]	@ (800313c <HAL_GPIO_Init+0x238>)
 800307e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003082:	4a2e      	ldr	r2, [pc, #184]	@ (800313c <HAL_GPIO_Init+0x238>)
 8003084:	f043 0302 	orr.w	r3, r3, #2
 8003088:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800308c:	4b2b      	ldr	r3, [pc, #172]	@ (800313c <HAL_GPIO_Init+0x238>)
 800308e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800309a:	4a29      	ldr	r2, [pc, #164]	@ (8003140 <HAL_GPIO_Init+0x23c>)
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	089b      	lsrs	r3, r3, #2
 80030a0:	3302      	adds	r3, #2
 80030a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	220f      	movs	r2, #15
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43db      	mvns	r3, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4013      	ands	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a20      	ldr	r2, [pc, #128]	@ (8003144 <HAL_GPIO_Init+0x240>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d052      	beq.n	800316c <HAL_GPIO_Init+0x268>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003148 <HAL_GPIO_Init+0x244>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d031      	beq.n	8003132 <HAL_GPIO_Init+0x22e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a1e      	ldr	r2, [pc, #120]	@ (800314c <HAL_GPIO_Init+0x248>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d02b      	beq.n	800312e <HAL_GPIO_Init+0x22a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003150 <HAL_GPIO_Init+0x24c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d025      	beq.n	800312a <HAL_GPIO_Init+0x226>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003154 <HAL_GPIO_Init+0x250>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d01f      	beq.n	8003126 <HAL_GPIO_Init+0x222>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003158 <HAL_GPIO_Init+0x254>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d019      	beq.n	8003122 <HAL_GPIO_Init+0x21e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a1a      	ldr	r2, [pc, #104]	@ (800315c <HAL_GPIO_Init+0x258>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d013      	beq.n	800311e <HAL_GPIO_Init+0x21a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a19      	ldr	r2, [pc, #100]	@ (8003160 <HAL_GPIO_Init+0x25c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00d      	beq.n	800311a <HAL_GPIO_Init+0x216>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a18      	ldr	r2, [pc, #96]	@ (8003164 <HAL_GPIO_Init+0x260>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d007      	beq.n	8003116 <HAL_GPIO_Init+0x212>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a17      	ldr	r2, [pc, #92]	@ (8003168 <HAL_GPIO_Init+0x264>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d101      	bne.n	8003112 <HAL_GPIO_Init+0x20e>
 800310e:	2309      	movs	r3, #9
 8003110:	e02d      	b.n	800316e <HAL_GPIO_Init+0x26a>
 8003112:	230a      	movs	r3, #10
 8003114:	e02b      	b.n	800316e <HAL_GPIO_Init+0x26a>
 8003116:	2308      	movs	r3, #8
 8003118:	e029      	b.n	800316e <HAL_GPIO_Init+0x26a>
 800311a:	2307      	movs	r3, #7
 800311c:	e027      	b.n	800316e <HAL_GPIO_Init+0x26a>
 800311e:	2306      	movs	r3, #6
 8003120:	e025      	b.n	800316e <HAL_GPIO_Init+0x26a>
 8003122:	2305      	movs	r3, #5
 8003124:	e023      	b.n	800316e <HAL_GPIO_Init+0x26a>
 8003126:	2304      	movs	r3, #4
 8003128:	e021      	b.n	800316e <HAL_GPIO_Init+0x26a>
 800312a:	2303      	movs	r3, #3
 800312c:	e01f      	b.n	800316e <HAL_GPIO_Init+0x26a>
 800312e:	2302      	movs	r3, #2
 8003130:	e01d      	b.n	800316e <HAL_GPIO_Init+0x26a>
 8003132:	2301      	movs	r3, #1
 8003134:	e01b      	b.n	800316e <HAL_GPIO_Init+0x26a>
 8003136:	bf00      	nop
 8003138:	58000080 	.word	0x58000080
 800313c:	58024400 	.word	0x58024400
 8003140:	58000400 	.word	0x58000400
 8003144:	58020000 	.word	0x58020000
 8003148:	58020400 	.word	0x58020400
 800314c:	58020800 	.word	0x58020800
 8003150:	58020c00 	.word	0x58020c00
 8003154:	58021000 	.word	0x58021000
 8003158:	58021400 	.word	0x58021400
 800315c:	58021800 	.word	0x58021800
 8003160:	58021c00 	.word	0x58021c00
 8003164:	58022000 	.word	0x58022000
 8003168:	58022400 	.word	0x58022400
 800316c:	2300      	movs	r3, #0
 800316e:	69fa      	ldr	r2, [r7, #28]
 8003170:	f002 0203 	and.w	r2, r2, #3
 8003174:	0092      	lsls	r2, r2, #2
 8003176:	4093      	lsls	r3, r2
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800317e:	4938      	ldr	r1, [pc, #224]	@ (8003260 <HAL_GPIO_Init+0x35c>)
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	089b      	lsrs	r3, r3, #2
 8003184:	3302      	adds	r3, #2
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800318c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	43db      	mvns	r3, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4013      	ands	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80031b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80031ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80031e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	43db      	mvns	r3, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4013      	ands	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	3301      	adds	r3, #1
 8003240:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	fa22 f303 	lsr.w	r3, r2, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	f47f ae63 	bne.w	8002f18 <HAL_GPIO_Init+0x14>
  }
}
 8003252:	bf00      	nop
 8003254:	bf00      	nop
 8003256:	3724      	adds	r7, #36	@ 0x24
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	58000400 	.word	0x58000400

08003264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]
 8003270:	4613      	mov	r3, r2
 8003272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003274:	787b      	ldrb	r3, [r7, #1]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800327a:	887a      	ldrh	r2, [r7, #2]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003280:	e003      	b.n	800328a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003282:	887b      	ldrh	r3, [r7, #2]
 8003284:	041a      	lsls	r2, r3, #16
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	619a      	str	r2, [r3, #24]
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e0bd      	b.n	8003426 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2202      	movs	r2, #2
 80032ae:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d031      	beq.n	8003352 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a4f      	ldr	r2, [pc, #316]	@ (8003430 <HAL_HRTIM_Init+0x198>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d10e      	bne.n	8003316 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80032f8:	4b4e      	ldr	r3, [pc, #312]	@ (8003434 <HAL_HRTIM_Init+0x19c>)
 80032fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032fe:	4a4d      	ldr	r2, [pc, #308]	@ (8003434 <HAL_HRTIM_Init+0x19c>)
 8003300:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003304:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003308:	4b4a      	ldr	r3, [pc, #296]	@ (8003434 <HAL_HRTIM_Init+0x19c>)
 800330a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800330e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003324:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800333a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fe fd4c 	bl	8001df0 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d012      	beq.n	800338a <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003372:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800339a:	2300      	movs	r3, #0
 800339c:	75fb      	strb	r3, [r7, #23]
 800339e:	e03e      	b.n	800341e <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80033a0:	7dfa      	ldrb	r2, [r7, #23]
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	3318      	adds	r3, #24
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80033b4:	7dfa      	ldrb	r2, [r7, #23]
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	331c      	adds	r3, #28
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80033c8:	7dfa      	ldrb	r2, [r7, #23]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	3320      	adds	r3, #32
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80033dc:	7dfa      	ldrb	r2, [r7, #23]
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	1a9b      	subs	r3, r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	3324      	adds	r3, #36	@ 0x24
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80033f0:	7dfa      	ldrb	r2, [r7, #23]
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	1a9b      	subs	r3, r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	3328      	adds	r3, #40	@ 0x28
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8003404:	7dfa      	ldrb	r2, [r7, #23]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	3330      	adds	r3, #48	@ 0x30
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8003418:	7dfb      	ldrb	r3, [r7, #23]
 800341a:	3301      	adds	r3, #1
 800341c:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 800341e:	7dfb      	ldrb	r3, [r7, #23]
 8003420:	2b05      	cmp	r3, #5
 8003422:	d9bd      	bls.n	80033a0 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40017400 	.word	0x40017400
 8003434:	58024400 	.word	0x58024400

08003438 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d101      	bne.n	8003454 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8003450:	2302      	movs	r3, #2
 8003452:	e015      	b.n	8003480 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b05      	cmp	r3, #5
 8003460:	d104      	bne.n	800346c <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 f97a 	bl	800375e <HRTIM_MasterBase_Config>
 800346a:	e004      	b.n	8003476 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	68b9      	ldr	r1, [r7, #8]
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f9a3 	bl	80037bc <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_HRTIM_SimplePWMChannelConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_SimplePWMChannelConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t PWMChannel,
                                                  const HRTIM_SimplePWMChannelCfgTypeDef* pSimplePWMChannelCfg)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08e      	sub	sp, #56	@ 0x38
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, PWMChannel));
  assert_param(IS_HRTIM_OUTPUTPOLARITY(pSimplePWMChannelCfg->Polarity));
  assert_param(IS_HRTIM_OUTPUTPULSE(pSimplePWMChannelCfg->Pulse));
  assert_param(IS_HRTIM_OUTPUTIDLELEVEL(pSimplePWMChannelCfg->IdleLevel));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d101      	bne.n	80034a6 <HAL_HRTIM_SimplePWMChannelConfig+0x1e>
  {
     return HAL_BUSY;
 80034a2:	2302      	movs	r3, #2
 80034a4:	e0b2      	b.n	800360c <HAL_HRTIM_SimplePWMChannelConfig+0x184>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_HRTIM_SimplePWMChannelConfig+0x2c>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e0ab      	b.n	800360c <HAL_HRTIM_SimplePWMChannelConfig+0x184>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure timer compare unit */
  switch (PWMChannel)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034ca:	d046      	beq.n	800355a <HAL_HRTIM_SimplePWMChannelConfig+0xd2>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034d2:	d84e      	bhi.n	8003572 <HAL_HRTIM_SimplePWMChannelConfig+0xea>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034da:	d032      	beq.n	8003542 <HAL_HRTIM_SimplePWMChannelConfig+0xba>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034e2:	d846      	bhi.n	8003572 <HAL_HRTIM_SimplePWMChannelConfig+0xea>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b80      	cmp	r3, #128	@ 0x80
 80034e8:	d037      	beq.n	800355a <HAL_HRTIM_SimplePWMChannelConfig+0xd2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b80      	cmp	r3, #128	@ 0x80
 80034ee:	d840      	bhi.n	8003572 <HAL_HRTIM_SimplePWMChannelConfig+0xea>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b40      	cmp	r3, #64	@ 0x40
 80034f4:	d025      	beq.n	8003542 <HAL_HRTIM_SimplePWMChannelConfig+0xba>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b40      	cmp	r3, #64	@ 0x40
 80034fa:	d83a      	bhi.n	8003572 <HAL_HRTIM_SimplePWMChannelConfig+0xea>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d01f      	beq.n	8003542 <HAL_HRTIM_SimplePWMChannelConfig+0xba>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d034      	beq.n	8003572 <HAL_HRTIM_SimplePWMChannelConfig+0xea>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b20      	cmp	r3, #32
 800350c:	d831      	bhi.n	8003572 <HAL_HRTIM_SimplePWMChannelConfig+0xea>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b02      	cmp	r3, #2
 8003512:	d32e      	bcc.n	8003572 <HAL_HRTIM_SimplePWMChannelConfig+0xea>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3b02      	subs	r3, #2
 8003518:	2201      	movs	r2, #1
 800351a:	409a      	lsls	r2, r3
 800351c:	4b3d      	ldr	r3, [pc, #244]	@ (8003614 <HAL_HRTIM_SimplePWMChannelConfig+0x18c>)
 800351e:	4013      	ands	r3, r2
 8003520:	2b00      	cmp	r3, #0
 8003522:	bf14      	ite	ne
 8003524:	2301      	movne	r3, #1
 8003526:	2300      	moveq	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d115      	bne.n	800355a <HAL_HRTIM_SimplePWMChannelConfig+0xd2>
 800352e:	f244 0304 	movw	r3, #16388	@ 0x4004
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	bf14      	ite	ne
 8003538:	2301      	movne	r3, #1
 800353a:	2300      	moveq	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d017      	beq.n	8003572 <HAL_HRTIM_SimplePWMChannelConfig+0xea>
  case HRTIM_OUTPUT_TB1:
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pSimplePWMChannelCfg->Pulse;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6819      	ldr	r1, [r3, #0]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	01db      	lsls	r3, r3, #7
 800354e:	440b      	add	r3, r1
 8003550:	339c      	adds	r3, #156	@ 0x9c
 8003552:	601a      	str	r2, [r3, #0]
      OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 8003554:	2308      	movs	r3, #8
 8003556:	61bb      	str	r3, [r7, #24]
      break;
 8003558:	e018      	b.n	800358c <HAL_HRTIM_SimplePWMChannelConfig+0x104>
  case HRTIM_OUTPUT_TB2:
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pSimplePWMChannelCfg->Pulse;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6819      	ldr	r1, [r3, #0]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	01db      	lsls	r3, r3, #7
 8003566:	440b      	add	r3, r1
 8003568:	33a4      	adds	r3, #164	@ 0xa4
 800356a:	601a      	str	r2, [r3, #0]
      OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 800356c:	2310      	movs	r3, #16
 800356e:	61bb      	str	r3, [r7, #24]
      break;
 8003570:	e00c      	b.n	800358c <HAL_HRTIM_SimplePWMChannelConfig+0x104>
    }
  default:
    {
      OutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8003572:	2300      	movs	r3, #0
 8003574:	61bb      	str	r3, [r7, #24]
      OutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]

      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2207      	movs	r2, #7
 800357e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

      break;
 800358a:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b07      	cmp	r3, #7
 8003596:	d101      	bne.n	800359c <HAL_HRTIM_SimplePWMChannelConfig+0x114>
  {
     return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e037      	b.n	800360c <HAL_HRTIM_SimplePWMChannelConfig+0x184>
  }

  /* Configure timer output */
  OutputCfg.Polarity = (pSimplePWMChannelCfg->Polarity & HRTIM_OUTR_POL1);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	617b      	str	r3, [r7, #20]
  OutputCfg.IdleLevel = (pSimplePWMChannelCfg->IdleLevel& HRTIM_OUTR_IDLES1);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	627b      	str	r3, [r7, #36]	@ 0x24
  OutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 80035b0:	2300      	movs	r3, #0
 80035b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  OutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 80035b4:	2300      	movs	r3, #0
 80035b6:	623b      	str	r3, [r7, #32]
  OutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 80035b8:	2300      	movs	r3, #0
 80035ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  OutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 80035bc:	2300      	movs	r3, #0
 80035be:	633b      	str	r3, [r7, #48]	@ 0x30
  OutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMPER;
 80035c0:	2304      	movs	r3, #4
 80035c2:	61fb      	str	r3, [r7, #28]

  HRTIM_OutputConfig(hhrtim,
 80035c4:	f107 0314 	add.w	r3, r7, #20
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	68b9      	ldr	r1, [r7, #8]
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 fadb 	bl	8003b88 <HRTIM_OutputConfig>
                     TimerIdx,
                     PWMChannel,
                     &OutputCfg);

  /* Enable the registers preload mechanism */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	3301      	adds	r3, #1
 80035da:	01db      	lsls	r3, r3, #7
 80035dc:	4413      	add	r3, r2
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	637b      	str	r3, [r7, #52]	@ 0x34
  hrtim_timcr |= HRTIM_TIMCR_PREEN;
 80035e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80035e8:	637b      	str	r3, [r7, #52]	@ 0x34
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	3301      	adds	r3, #1
 80035f2:	01db      	lsls	r3, r3, #7
 80035f4:	4413      	add	r3, r2
 80035f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035f8:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3738      	adds	r7, #56	@ 0x38
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40000041 	.word	0x40000041

08003618 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d101      	bne.n	8003634 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8003630:	2302      	movs	r3, #2
 8003632:	e05f      	b.n	80036f4 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800363e:	2302      	movs	r3, #2
 8003640:	e058      	b.n	80036f4 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2202      	movs	r2, #2
 800364e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b05      	cmp	r3, #5
 8003656:	d104      	bne.n	8003662 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f8ee 	bl	800383c <HRTIM_MasterWaveform_Config>
 8003660:	e004      	b.n	800366c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 f94e 	bl	8003908 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6819      	ldr	r1, [r3, #0]
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	4613      	mov	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4403      	add	r3, r0
 800367e:	3320      	adds	r3, #32
 8003680:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6859      	ldr	r1, [r3, #4]
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	4613      	mov	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	1a9b      	subs	r3, r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4403      	add	r3, r0
 8003694:	3324      	adds	r3, #36	@ 0x24
 8003696:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6899      	ldr	r1, [r3, #8]
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	4613      	mov	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4403      	add	r3, r0
 80036aa:	3328      	adds	r3, #40	@ 0x28
 80036ac:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68d9      	ldr	r1, [r3, #12]
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	4613      	mov	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4403      	add	r3, r0
 80036c0:	332c      	adds	r3, #44	@ 0x2c
 80036c2:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6919      	ldr	r1, [r3, #16]
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4403      	add	r3, r0
 80036d6:	3330      	adds	r3, #48	@ 0x30
 80036d8:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80036da:	68b9      	ldr	r1, [r7, #8]
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 fb2b 	bl	8003d38 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d101      	bne.n	800371a <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8003716:	2302      	movs	r3, #2
 8003718:	e01d      	b.n	8003756 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8003724:	2302      	movs	r3, #2
 8003726:	e016      	b.n	8003756 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 fa22 	bl	8003b88 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800375e:	b480      	push	{r7}
 8003760:	b085      	sub	sp, #20
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0307 	bic.w	r3, r3, #7
 8003776:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f023 0318 	bic.w	r3, r3, #24
 8003788:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	6852      	ldr	r2, [r2, #4]
 80037ae:	619a      	str	r2, [r3, #24]
}
 80037b0:	bf00      	nop
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	3301      	adds	r3, #1
 80037d0:	01db      	lsls	r3, r3, #7
 80037d2:	4413      	add	r3, r2
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f023 0307 	bic.w	r3, r3, #7
 80037de:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f023 0318 	bic.w	r3, r3, #24
 80037f0:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	3301      	adds	r3, #1
 8003804:	01db      	lsls	r3, r3, #7
 8003806:	4413      	add	r3, r2
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6819      	ldr	r1, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	01db      	lsls	r3, r3, #7
 8003818:	440b      	add	r3, r1
 800381a:	3394      	adds	r3, #148	@ 0x94
 800381c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6819      	ldr	r1, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	01db      	lsls	r3, r3, #7
 800382a:	440b      	add	r3, r1
 800382c:	3398      	adds	r3, #152	@ 0x98
 800382e:	601a      	str	r2, [r3, #0]
}
 8003830:	bf00      	nop
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8003856:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0320 	bic.w	r3, r3, #32
 800385e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003870:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	4313      	orrs	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003882:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	4313      	orrs	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003894:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80038a6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80038b8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80038cc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038de:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 80038fc:	bf00      	nop
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003908:	b480      	push	{r7}
 800390a:	b08b      	sub	sp, #44	@ 0x2c
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	3301      	adds	r3, #1
 800391c:	01db      	lsls	r3, r3, #7
 800391e:	4413      	add	r3, r2
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	6811      	ldr	r1, [r2, #0]
 8003926:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	3301      	adds	r3, #1
 800392e:	01db      	lsls	r3, r3, #7
 8003930:	440b      	add	r3, r1
 8003932:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	3301      	adds	r3, #1
 800393c:	01db      	lsls	r3, r3, #7
 800393e:	4413      	add	r3, r2
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	01db      	lsls	r3, r3, #7
 800394c:	4413      	add	r3, r2
 800394e:	33e8      	adds	r3, #232	@ 0xe8
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	01db      	lsls	r3, r3, #7
 800395c:	4413      	add	r3, r2
 800395e:	33e4      	adds	r3, #228	@ 0xe4
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 800396c:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	f023 0320 	bic.w	r3, r3, #32
 8003974:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800397c:	4313      	orrs	r3, r2
 800397e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8003980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003982:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003986:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800398e:	4313      	orrs	r3, r2
 8003990:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003998:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a0:	4313      	orrs	r3, r2
 80039a2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 80039a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80039aa:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b2:	4313      	orrs	r3, r2
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 80039b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b8:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80039bc:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c4:	4313      	orrs	r3, r2
 80039c6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ca:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80039ce:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d6:	4313      	orrs	r3, r2
 80039d8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 80039da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80039e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039ea:	d103      	bne.n	80039f4 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039f2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80039f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039fa:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a02:	4313      	orrs	r3, r2
 8003a04:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8003a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a14:	4313      	orrs	r3, r2
 8003a16:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8003a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1a:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a26:	4313      	orrs	r3, r2
 8003a28:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	f023 031f 	bic.w	r3, r3, #31
 8003a30:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a36:	f003 031f 	and.w	r3, r3, #31
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a46:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d108      	bne.n	8003a6c <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a60:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a66:	6a3a      	ldr	r2, [r7, #32]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a70:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8003a74:	d004      	beq.n	8003a80 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7a:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8003a7e:	d103      	bne.n	8003a88 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a84:	2b40      	cmp	r3, #64	@ 0x40
 8003a86:	d108      	bne.n	8003a9a <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8003a8e:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a94:	6a3a      	ldr	r2, [r7, #32]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a9e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d843      	bhi.n	8003b2e <HRTIM_TimingUnitWaveform_Config+0x226>
 8003aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8003aac <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8003aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aac:	08003ac1 	.word	0x08003ac1
 8003ab0:	08003ad7 	.word	0x08003ad7
 8003ab4:	08003aed 	.word	0x08003aed
 8003ab8:	08003b03 	.word	0x08003b03
 8003abc:	08003b19 	.word	0x08003b19
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003ac6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61fb      	str	r3, [r7, #28]
      break;
 8003ad4:	e02c      	b.n	8003b30 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003adc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	69fa      	ldr	r2, [r7, #28]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	61fb      	str	r3, [r7, #28]
      break;
 8003aea:	e021      	b.n	8003b30 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003af2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	61fb      	str	r3, [r7, #28]
      break;
 8003b00:	e016      	b.n	8003b30 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003b08:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	69fa      	ldr	r2, [r7, #28]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61fb      	str	r3, [r7, #28]
      break;
 8003b16:	e00b      	b.n	8003b30 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b1e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b24:	015b      	lsls	r3, r3, #5
 8003b26:	69fa      	ldr	r2, [r7, #28]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	61fb      	str	r3, [r7, #28]
      break;
 8003b2c:	e000      	b.n	8003b30 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8003b2e:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	3301      	adds	r3, #1
 8003b38:	01db      	lsls	r3, r3, #7
 8003b3a:	4413      	add	r3, r2
 8003b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b3e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	01db      	lsls	r3, r3, #7
 8003b48:	4413      	add	r3, r2
 8003b4a:	33e8      	adds	r3, #232	@ 0xe8
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	01db      	lsls	r3, r3, #7
 8003b58:	4413      	add	r3, r2
 8003b5a:	33e4      	adds	r3, #228	@ 0xe4
 8003b5c:	6a3a      	ldr	r2, [r7, #32]
 8003b5e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	01db      	lsls	r3, r3, #7
 8003b68:	4413      	add	r3, r2
 8003b6a:	33d4      	adds	r3, #212	@ 0xd4
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	69fa      	ldr	r2, [r7, #28]
 8003b76:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8003b7a:	bf00      	nop
 8003b7c:	372c      	adds	r7, #44	@ 0x2c
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop

08003b88 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b089      	sub	sp, #36	@ 0x24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	01db      	lsls	r3, r3, #7
 8003ba2:	4413      	add	r3, r2
 8003ba4:	33e4      	adds	r3, #228	@ 0xe4
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	01db      	lsls	r3, r3, #7
 8003bb2:	4413      	add	r3, r2
 8003bb4:	33b8      	adds	r3, #184	@ 0xb8
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	617b      	str	r3, [r7, #20]

  switch (Output)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc0:	d04d      	beq.n	8003c5e <HRTIM_OutputConfig+0xd6>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc8:	d85e      	bhi.n	8003c88 <HRTIM_OutputConfig+0x100>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bd0:	d032      	beq.n	8003c38 <HRTIM_OutputConfig+0xb0>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bd8:	d856      	bhi.n	8003c88 <HRTIM_OutputConfig+0x100>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b80      	cmp	r3, #128	@ 0x80
 8003bde:	d03e      	beq.n	8003c5e <HRTIM_OutputConfig+0xd6>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b80      	cmp	r3, #128	@ 0x80
 8003be4:	d850      	bhi.n	8003c88 <HRTIM_OutputConfig+0x100>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b40      	cmp	r3, #64	@ 0x40
 8003bea:	d025      	beq.n	8003c38 <HRTIM_OutputConfig+0xb0>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b40      	cmp	r3, #64	@ 0x40
 8003bf0:	d84a      	bhi.n	8003c88 <HRTIM_OutputConfig+0x100>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d01f      	beq.n	8003c38 <HRTIM_OutputConfig+0xb0>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d044      	beq.n	8003c88 <HRTIM_OutputConfig+0x100>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d841      	bhi.n	8003c88 <HRTIM_OutputConfig+0x100>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d33e      	bcc.n	8003c88 <HRTIM_OutputConfig+0x100>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3b02      	subs	r3, #2
 8003c0e:	2201      	movs	r2, #1
 8003c10:	409a      	lsls	r2, r3
 8003c12:	4b48      	ldr	r3, [pc, #288]	@ (8003d34 <HRTIM_OutputConfig+0x1ac>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	bf14      	ite	ne
 8003c1a:	2301      	movne	r3, #1
 8003c1c:	2300      	moveq	r3, #0
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d11c      	bne.n	8003c5e <HRTIM_OutputConfig+0xd6>
 8003c24:	f244 0304 	movw	r3, #16388	@ 0x4004
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	bf14      	ite	ne
 8003c2e:	2301      	movne	r3, #1
 8003c30:	2300      	moveq	r3, #0
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d027      	beq.n	8003c88 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6819      	ldr	r1, [r3, #0]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	01db      	lsls	r3, r3, #7
 8003c44:	440b      	add	r3, r1
 8003c46:	33bc      	adds	r3, #188	@ 0xbc
 8003c48:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6819      	ldr	r1, [r3, #0]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	01db      	lsls	r3, r3, #7
 8003c56:	440b      	add	r3, r1
 8003c58:	33c0      	adds	r3, #192	@ 0xc0
 8003c5a:	601a      	str	r2, [r3, #0]
      break;
 8003c5c:	e015      	b.n	8003c8a <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6819      	ldr	r1, [r3, #0]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	01db      	lsls	r3, r3, #7
 8003c6a:	440b      	add	r3, r1
 8003c6c:	33c4      	adds	r3, #196	@ 0xc4
 8003c6e:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6819      	ldr	r1, [r3, #0]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	01db      	lsls	r3, r3, #7
 8003c7c:	440b      	add	r3, r1
 8003c7e:	33c8      	adds	r3, #200	@ 0xc8
 8003c80:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8003c82:	2310      	movs	r3, #16
 8003c84:	61bb      	str	r3, [r7, #24]
      break;
 8003c86:	e000      	b.n	8003c8a <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8003c88:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8003c8a:	22fe      	movs	r2, #254	@ 0xfe
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8003c92:	43db      	mvns	r3, r3
 8003c94:	69fa      	ldr	r2, [r7, #28]
 8003c96:	4013      	ands	r3, r2
 8003c98:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	69fa      	ldr	r2, [r7, #28]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	691a      	ldr	r2, [r3, #16]
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	695a      	ldr	r2, [r3, #20]
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	699a      	ldr	r2, [r3, #24]
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d111      	bne.n	8003d16 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10c      	bne.n	8003d16 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d107      	bne.n	8003d16 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	69da      	ldr	r2, [r3, #28]
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	69fa      	ldr	r2, [r7, #28]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	01db      	lsls	r3, r3, #7
 8003d1e:	4413      	add	r3, r2
 8003d20:	33e4      	adds	r3, #228	@ 0xe4
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	601a      	str	r2, [r3, #0]
}
 8003d26:	bf00      	nop
 8003d28:	3724      	adds	r7, #36	@ 0x24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40000041 	.word	0x40000041

08003d38 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b05      	cmp	r3, #5
 8003d46:	d851      	bhi.n	8003dec <HRTIM_ForceRegistersUpdate+0xb4>
 8003d48:	a201      	add	r2, pc, #4	@ (adr r2, 8003d50 <HRTIM_ForceRegistersUpdate+0x18>)
 8003d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4e:	bf00      	nop
 8003d50:	08003d7f 	.word	0x08003d7f
 8003d54:	08003d95 	.word	0x08003d95
 8003d58:	08003dab 	.word	0x08003dab
 8003d5c:	08003dc1 	.word	0x08003dc1
 8003d60:	08003dd7 	.word	0x08003dd7
 8003d64:	08003d69 	.word	0x08003d69
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f042 0201 	orr.w	r2, r2, #1
 8003d78:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003d7c:	e037      	b.n	8003dee <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0202 	orr.w	r2, r2, #2
 8003d8e:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003d92:	e02c      	b.n	8003dee <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0204 	orr.w	r2, r2, #4
 8003da4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003da8:	e021      	b.n	8003dee <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0208 	orr.w	r2, r2, #8
 8003dba:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003dbe:	e016      	b.n	8003dee <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0210 	orr.w	r2, r2, #16
 8003dd0:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003dd4:	e00b      	b.n	8003dee <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0220 	orr.w	r2, r2, #32
 8003de6:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003dea:	e000      	b.n	8003dee <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8003dec:	bf00      	nop
  }
}
 8003dee:	bf00      	nop
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop

08003dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e08b      	b.n	8003f26 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d106      	bne.n	8003e28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fe f87c 	bl	8001f20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2224      	movs	r2, #36	@ 0x24
 8003e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d107      	bne.n	8003e76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e72:	609a      	str	r2, [r3, #8]
 8003e74:	e006      	b.n	8003e84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003e82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d108      	bne.n	8003e9e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e9a:	605a      	str	r2, [r3, #4]
 8003e9c:	e007      	b.n	8003eae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003eac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6859      	ldr	r1, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8003f30 <HAL_I2C_Init+0x134>)
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ecc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691a      	ldr	r2, [r3, #16]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69d9      	ldr	r1, [r3, #28]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1a      	ldr	r2, [r3, #32]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	02008000 	.word	0x02008000

08003f34 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af02      	add	r7, sp, #8
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	4611      	mov	r1, r2
 8003f40:	461a      	mov	r2, r3
 8003f42:	4603      	mov	r3, r0
 8003f44:	817b      	strh	r3, [r7, #10]
 8003f46:	460b      	mov	r3, r1
 8003f48:	813b      	strh	r3, [r7, #8]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	f040 80f9 	bne.w	800414e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <HAL_I2C_Mem_Write+0x34>
 8003f62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d105      	bne.n	8003f74 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f6e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e0ed      	b.n	8004150 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d101      	bne.n	8003f82 <HAL_I2C_Mem_Write+0x4e>
 8003f7e:	2302      	movs	r3, #2
 8003f80:	e0e6      	b.n	8004150 <HAL_I2C_Mem_Write+0x21c>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f8a:	f7fe fe93 	bl	8002cb4 <HAL_GetTick>
 8003f8e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	2319      	movs	r3, #25
 8003f96:	2201      	movs	r2, #1
 8003f98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 fac3 	bl	8004528 <I2C_WaitOnFlagUntilTimeout>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0d1      	b.n	8004150 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2221      	movs	r2, #33	@ 0x21
 8003fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2240      	movs	r2, #64	@ 0x40
 8003fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a3a      	ldr	r2, [r7, #32]
 8003fc6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fd4:	88f8      	ldrh	r0, [r7, #6]
 8003fd6:	893a      	ldrh	r2, [r7, #8]
 8003fd8:	8979      	ldrh	r1, [r7, #10]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	9301      	str	r3, [sp, #4]
 8003fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 f9d3 	bl	8004390 <I2C_RequestMemoryWrite>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0a9      	b.n	8004150 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004000:	b29b      	uxth	r3, r3
 8004002:	2bff      	cmp	r3, #255	@ 0xff
 8004004:	d90e      	bls.n	8004024 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	22ff      	movs	r2, #255	@ 0xff
 800400a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004010:	b2da      	uxtb	r2, r3
 8004012:	8979      	ldrh	r1, [r7, #10]
 8004014:	2300      	movs	r3, #0
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f000 fc47 	bl	80048b0 <I2C_TransferConfig>
 8004022:	e00f      	b.n	8004044 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004032:	b2da      	uxtb	r2, r3
 8004034:	8979      	ldrh	r1, [r7, #10]
 8004036:	2300      	movs	r3, #0
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fc36 	bl	80048b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 fac6 	bl	80045da <I2C_WaitOnTXISFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e07b      	b.n	8004150 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405c:	781a      	ldrb	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d034      	beq.n	80040fc <HAL_I2C_Mem_Write+0x1c8>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004096:	2b00      	cmp	r3, #0
 8004098:	d130      	bne.n	80040fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a0:	2200      	movs	r2, #0
 80040a2:	2180      	movs	r1, #128	@ 0x80
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 fa3f 	bl	8004528 <I2C_WaitOnFlagUntilTimeout>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e04d      	b.n	8004150 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2bff      	cmp	r3, #255	@ 0xff
 80040bc:	d90e      	bls.n	80040dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	22ff      	movs	r2, #255	@ 0xff
 80040c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	8979      	ldrh	r1, [r7, #10]
 80040cc:	2300      	movs	r3, #0
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 fbeb 	bl	80048b0 <I2C_TransferConfig>
 80040da:	e00f      	b.n	80040fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	8979      	ldrh	r1, [r7, #10]
 80040ee:	2300      	movs	r3, #0
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 fbda 	bl	80048b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d19e      	bne.n	8004044 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 faac 	bl	8004668 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e01a      	b.n	8004150 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2220      	movs	r2, #32
 8004120:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6859      	ldr	r1, [r3, #4]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	4b0a      	ldr	r3, [pc, #40]	@ (8004158 <HAL_I2C_Mem_Write+0x224>)
 800412e:	400b      	ands	r3, r1
 8004130:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2220      	movs	r2, #32
 8004136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	e000      	b.n	8004150 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800414e:	2302      	movs	r3, #2
  }
}
 8004150:	4618      	mov	r0, r3
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	fe00e800 	.word	0xfe00e800

0800415c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af02      	add	r7, sp, #8
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	4608      	mov	r0, r1
 8004166:	4611      	mov	r1, r2
 8004168:	461a      	mov	r2, r3
 800416a:	4603      	mov	r3, r0
 800416c:	817b      	strh	r3, [r7, #10]
 800416e:	460b      	mov	r3, r1
 8004170:	813b      	strh	r3, [r7, #8]
 8004172:	4613      	mov	r3, r2
 8004174:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b20      	cmp	r3, #32
 8004180:	f040 80fd 	bne.w	800437e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <HAL_I2C_Mem_Read+0x34>
 800418a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800418c:	2b00      	cmp	r3, #0
 800418e:	d105      	bne.n	800419c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004196:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0f1      	b.n	8004380 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d101      	bne.n	80041aa <HAL_I2C_Mem_Read+0x4e>
 80041a6:	2302      	movs	r3, #2
 80041a8:	e0ea      	b.n	8004380 <HAL_I2C_Mem_Read+0x224>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041b2:	f7fe fd7f 	bl	8002cb4 <HAL_GetTick>
 80041b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	2319      	movs	r3, #25
 80041be:	2201      	movs	r2, #1
 80041c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f9af 	bl	8004528 <I2C_WaitOnFlagUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0d5      	b.n	8004380 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2222      	movs	r2, #34	@ 0x22
 80041d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2240      	movs	r2, #64	@ 0x40
 80041e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a3a      	ldr	r2, [r7, #32]
 80041ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041fc:	88f8      	ldrh	r0, [r7, #6]
 80041fe:	893a      	ldrh	r2, [r7, #8]
 8004200:	8979      	ldrh	r1, [r7, #10]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	9301      	str	r3, [sp, #4]
 8004206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	4603      	mov	r3, r0
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f913 	bl	8004438 <I2C_RequestMemoryRead>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e0ad      	b.n	8004380 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004228:	b29b      	uxth	r3, r3
 800422a:	2bff      	cmp	r3, #255	@ 0xff
 800422c:	d90e      	bls.n	800424c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	22ff      	movs	r2, #255	@ 0xff
 8004232:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004238:	b2da      	uxtb	r2, r3
 800423a:	8979      	ldrh	r1, [r7, #10]
 800423c:	4b52      	ldr	r3, [pc, #328]	@ (8004388 <HAL_I2C_Mem_Read+0x22c>)
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 fb33 	bl	80048b0 <I2C_TransferConfig>
 800424a:	e00f      	b.n	800426c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800425a:	b2da      	uxtb	r2, r3
 800425c:	8979      	ldrh	r1, [r7, #10]
 800425e:	4b4a      	ldr	r3, [pc, #296]	@ (8004388 <HAL_I2C_Mem_Read+0x22c>)
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 fb22 	bl	80048b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004272:	2200      	movs	r2, #0
 8004274:	2104      	movs	r1, #4
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 f956 	bl	8004528 <I2C_WaitOnFlagUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e07c      	b.n	8004380 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d034      	beq.n	800432c <HAL_I2C_Mem_Read+0x1d0>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d130      	bne.n	800432c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d0:	2200      	movs	r2, #0
 80042d2:	2180      	movs	r1, #128	@ 0x80
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 f927 	bl	8004528 <I2C_WaitOnFlagUntilTimeout>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e04d      	b.n	8004380 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2bff      	cmp	r3, #255	@ 0xff
 80042ec:	d90e      	bls.n	800430c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	22ff      	movs	r2, #255	@ 0xff
 80042f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	8979      	ldrh	r1, [r7, #10]
 80042fc:	2300      	movs	r3, #0
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 fad3 	bl	80048b0 <I2C_TransferConfig>
 800430a:	e00f      	b.n	800432c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800431a:	b2da      	uxtb	r2, r3
 800431c:	8979      	ldrh	r1, [r7, #10]
 800431e:	2300      	movs	r3, #0
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 fac2 	bl	80048b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d19a      	bne.n	800426c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f994 	bl	8004668 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e01a      	b.n	8004380 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2220      	movs	r2, #32
 8004350:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6859      	ldr	r1, [r3, #4]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	4b0b      	ldr	r3, [pc, #44]	@ (800438c <HAL_I2C_Mem_Read+0x230>)
 800435e:	400b      	ands	r3, r1
 8004360:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	e000      	b.n	8004380 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800437e:	2302      	movs	r3, #2
  }
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	80002400 	.word	0x80002400
 800438c:	fe00e800 	.word	0xfe00e800

08004390 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af02      	add	r7, sp, #8
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	4608      	mov	r0, r1
 800439a:	4611      	mov	r1, r2
 800439c:	461a      	mov	r2, r3
 800439e:	4603      	mov	r3, r0
 80043a0:	817b      	strh	r3, [r7, #10]
 80043a2:	460b      	mov	r3, r1
 80043a4:	813b      	strh	r3, [r7, #8]
 80043a6:	4613      	mov	r3, r2
 80043a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80043aa:	88fb      	ldrh	r3, [r7, #6]
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	8979      	ldrh	r1, [r7, #10]
 80043b0:	4b20      	ldr	r3, [pc, #128]	@ (8004434 <I2C_RequestMemoryWrite+0xa4>)
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 fa79 	bl	80048b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	69b9      	ldr	r1, [r7, #24]
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 f909 	bl	80045da <I2C_WaitOnTXISFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e02c      	b.n	800442c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043d2:	88fb      	ldrh	r3, [r7, #6]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d105      	bne.n	80043e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043d8:	893b      	ldrh	r3, [r7, #8]
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80043e2:	e015      	b.n	8004410 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043e4:	893b      	ldrh	r3, [r7, #8]
 80043e6:	0a1b      	lsrs	r3, r3, #8
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	69b9      	ldr	r1, [r7, #24]
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f8ef 	bl	80045da <I2C_WaitOnTXISFlagUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e012      	b.n	800442c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004406:	893b      	ldrh	r3, [r7, #8]
 8004408:	b2da      	uxtb	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	2200      	movs	r2, #0
 8004418:	2180      	movs	r1, #128	@ 0x80
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 f884 	bl	8004528 <I2C_WaitOnFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	80002000 	.word	0x80002000

08004438 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af02      	add	r7, sp, #8
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	4608      	mov	r0, r1
 8004442:	4611      	mov	r1, r2
 8004444:	461a      	mov	r2, r3
 8004446:	4603      	mov	r3, r0
 8004448:	817b      	strh	r3, [r7, #10]
 800444a:	460b      	mov	r3, r1
 800444c:	813b      	strh	r3, [r7, #8]
 800444e:	4613      	mov	r3, r2
 8004450:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004452:	88fb      	ldrh	r3, [r7, #6]
 8004454:	b2da      	uxtb	r2, r3
 8004456:	8979      	ldrh	r1, [r7, #10]
 8004458:	4b20      	ldr	r3, [pc, #128]	@ (80044dc <I2C_RequestMemoryRead+0xa4>)
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	2300      	movs	r3, #0
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 fa26 	bl	80048b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004464:	69fa      	ldr	r2, [r7, #28]
 8004466:	69b9      	ldr	r1, [r7, #24]
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f8b6 	bl	80045da <I2C_WaitOnTXISFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e02c      	b.n	80044d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004478:	88fb      	ldrh	r3, [r7, #6]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d105      	bne.n	800448a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800447e:	893b      	ldrh	r3, [r7, #8]
 8004480:	b2da      	uxtb	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	629a      	str	r2, [r3, #40]	@ 0x28
 8004488:	e015      	b.n	80044b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800448a:	893b      	ldrh	r3, [r7, #8]
 800448c:	0a1b      	lsrs	r3, r3, #8
 800448e:	b29b      	uxth	r3, r3
 8004490:	b2da      	uxtb	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004498:	69fa      	ldr	r2, [r7, #28]
 800449a:	69b9      	ldr	r1, [r7, #24]
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 f89c 	bl	80045da <I2C_WaitOnTXISFlagUntilTimeout>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e012      	b.n	80044d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044ac:	893b      	ldrh	r3, [r7, #8]
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	2200      	movs	r2, #0
 80044be:	2140      	movs	r1, #64	@ 0x40
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f831 	bl	8004528 <I2C_WaitOnFlagUntilTimeout>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	80002000 	.word	0x80002000

080044e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d103      	bne.n	80044fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2200      	movs	r2, #0
 80044fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b01      	cmp	r3, #1
 800450a:	d007      	beq.n	800451c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699a      	ldr	r2, [r3, #24]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	619a      	str	r2, [r3, #24]
  }
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	4613      	mov	r3, r2
 8004536:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004538:	e03b      	b.n	80045b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	6839      	ldr	r1, [r7, #0]
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 f8d6 	bl	80046f0 <I2C_IsErrorOccurred>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e041      	b.n	80045d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004554:	d02d      	beq.n	80045b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004556:	f7fe fbad 	bl	8002cb4 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	429a      	cmp	r2, r3
 8004564:	d302      	bcc.n	800456c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d122      	bne.n	80045b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699a      	ldr	r2, [r3, #24]
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	4013      	ands	r3, r2
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	429a      	cmp	r2, r3
 800457a:	bf0c      	ite	eq
 800457c:	2301      	moveq	r3, #1
 800457e:	2300      	movne	r3, #0
 8004580:	b2db      	uxtb	r3, r3
 8004582:	461a      	mov	r2, r3
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	429a      	cmp	r2, r3
 8004588:	d113      	bne.n	80045b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458e:	f043 0220 	orr.w	r2, r3, #32
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2220      	movs	r2, #32
 800459a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e00f      	b.n	80045d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699a      	ldr	r2, [r3, #24]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4013      	ands	r3, r2
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	429a      	cmp	r2, r3
 80045c0:	bf0c      	ite	eq
 80045c2:	2301      	moveq	r3, #1
 80045c4:	2300      	movne	r3, #0
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	461a      	mov	r2, r3
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d0b4      	beq.n	800453a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b084      	sub	sp, #16
 80045de:	af00      	add	r7, sp, #0
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045e6:	e033      	b.n	8004650 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	68b9      	ldr	r1, [r7, #8]
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f87f 	bl	80046f0 <I2C_IsErrorOccurred>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e031      	b.n	8004660 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004602:	d025      	beq.n	8004650 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004604:	f7fe fb56 	bl	8002cb4 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	429a      	cmp	r2, r3
 8004612:	d302      	bcc.n	800461a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d11a      	bne.n	8004650 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b02      	cmp	r3, #2
 8004626:	d013      	beq.n	8004650 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462c:	f043 0220 	orr.w	r2, r3, #32
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e007      	b.n	8004660 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b02      	cmp	r3, #2
 800465c:	d1c4      	bne.n	80045e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004674:	e02f      	b.n	80046d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 f838 	bl	80046f0 <I2C_IsErrorOccurred>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e02d      	b.n	80046e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800468a:	f7fe fb13 	bl	8002cb4 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	429a      	cmp	r2, r3
 8004698:	d302      	bcc.n	80046a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d11a      	bne.n	80046d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	d013      	beq.n	80046d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b2:	f043 0220 	orr.w	r2, r3, #32
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e007      	b.n	80046e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	f003 0320 	and.w	r3, r3, #32
 80046e0:	2b20      	cmp	r3, #32
 80046e2:	d1c8      	bne.n	8004676 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08a      	sub	sp, #40	@ 0x28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800470a:	2300      	movs	r3, #0
 800470c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	f003 0310 	and.w	r3, r3, #16
 8004718:	2b00      	cmp	r3, #0
 800471a:	d068      	beq.n	80047ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2210      	movs	r2, #16
 8004722:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004724:	e049      	b.n	80047ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800472c:	d045      	beq.n	80047ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800472e:	f7fe fac1 	bl	8002cb4 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	429a      	cmp	r2, r3
 800473c:	d302      	bcc.n	8004744 <I2C_IsErrorOccurred+0x54>
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d13a      	bne.n	80047ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800474e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004756:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004762:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004766:	d121      	bne.n	80047ac <I2C_IsErrorOccurred+0xbc>
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800476e:	d01d      	beq.n	80047ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004770:	7cfb      	ldrb	r3, [r7, #19]
 8004772:	2b20      	cmp	r3, #32
 8004774:	d01a      	beq.n	80047ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004784:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004786:	f7fe fa95 	bl	8002cb4 <HAL_GetTick>
 800478a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800478c:	e00e      	b.n	80047ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800478e:	f7fe fa91 	bl	8002cb4 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b19      	cmp	r3, #25
 800479a:	d907      	bls.n	80047ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	f043 0320 	orr.w	r3, r3, #32
 80047a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80047aa:	e006      	b.n	80047ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	f003 0320 	and.w	r3, r3, #32
 80047b6:	2b20      	cmp	r3, #32
 80047b8:	d1e9      	bne.n	800478e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d003      	beq.n	80047d0 <I2C_IsErrorOccurred+0xe0>
 80047c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0aa      	beq.n	8004726 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80047d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d103      	bne.n	80047e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2220      	movs	r2, #32
 80047de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	f043 0304 	orr.w	r3, r3, #4
 80047e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00b      	beq.n	8004818 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	f043 0301 	orr.w	r3, r3, #1
 8004806:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004810:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00b      	beq.n	800483a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	f043 0308 	orr.w	r3, r3, #8
 8004828:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004832:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00b      	beq.n	800485c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	f043 0302 	orr.w	r3, r3, #2
 800484a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004854:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800485c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004860:	2b00      	cmp	r3, #0
 8004862:	d01c      	beq.n	800489e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f7ff fe3b 	bl	80044e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6859      	ldr	r1, [r3, #4]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4b0d      	ldr	r3, [pc, #52]	@ (80048ac <I2C_IsErrorOccurred+0x1bc>)
 8004876:	400b      	ands	r3, r1
 8004878:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	431a      	orrs	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2220      	movs	r2, #32
 800488a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800489e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3728      	adds	r7, #40	@ 0x28
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	fe00e800 	.word	0xfe00e800

080048b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	607b      	str	r3, [r7, #4]
 80048ba:	460b      	mov	r3, r1
 80048bc:	817b      	strh	r3, [r7, #10]
 80048be:	4613      	mov	r3, r2
 80048c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048c2:	897b      	ldrh	r3, [r7, #10]
 80048c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048c8:	7a7b      	ldrb	r3, [r7, #9]
 80048ca:	041b      	lsls	r3, r3, #16
 80048cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	4313      	orrs	r3, r2
 80048da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80048de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	0d5b      	lsrs	r3, r3, #21
 80048ea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80048ee:	4b08      	ldr	r3, [pc, #32]	@ (8004910 <I2C_TransferConfig+0x60>)
 80048f0:	430b      	orrs	r3, r1
 80048f2:	43db      	mvns	r3, r3
 80048f4:	ea02 0103 	and.w	r1, r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	430a      	orrs	r2, r1
 8004900:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004902:	bf00      	nop
 8004904:	371c      	adds	r7, #28
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	03ff63ff 	.word	0x03ff63ff

08004914 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b20      	cmp	r3, #32
 8004928:	d138      	bne.n	800499c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004934:	2302      	movs	r3, #2
 8004936:	e032      	b.n	800499e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2224      	movs	r2, #36	@ 0x24
 8004944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0201 	bic.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004966:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6819      	ldr	r1, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	e000      	b.n	800499e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800499c:	2302      	movs	r3, #2
  }
}
 800499e:	4618      	mov	r0, r3
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b085      	sub	sp, #20
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
 80049b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b20      	cmp	r3, #32
 80049be:	d139      	bne.n	8004a34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e033      	b.n	8004a36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2224      	movs	r2, #36	@ 0x24
 80049da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0201 	bic.w	r2, r2, #1
 80049ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80049fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	021b      	lsls	r3, r3, #8
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	e000      	b.n	8004a36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a34:	2302      	movs	r3, #2
  }
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
	...

08004a44 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e097      	b.n	8004b86 <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d106      	bne.n	8004a76 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7fd fabf 	bl	8001ff4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d004      	beq.n	8004a98 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a96:	d103      	bne.n	8004aa0 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 031e 	bic.w	r3, r3, #30
 8004a9e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d003      	beq.n	8004ab4 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4b38      	ldr	r3, [pc, #224]	@ (8004b90 <HAL_LPTIM_Init+0x14c>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4b37      	ldr	r3, [pc, #220]	@ (8004b94 <HAL_LPTIM_Init+0x150>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004ac4:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004aca:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8004ad0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8004ad6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d107      	bne.n	8004af6 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004aee:	4313      	orrs	r3, r2
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d004      	beq.n	8004b08 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b06:	d107      	bne.n	8004b18 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004b10:	4313      	orrs	r3, r2
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00a      	beq.n	8004b3a <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004b2c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004b32:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a14      	ldr	r2, [pc, #80]	@ (8004b98 <HAL_LPTIM_Init+0x154>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d004      	beq.n	8004b56 <HAL_LPTIM_Init+0x112>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a12      	ldr	r2, [pc, #72]	@ (8004b9c <HAL_LPTIM_Init+0x158>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d108      	bne.n	8004b68 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b66:	e009      	b.n	8004b7c <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a0c      	ldr	r2, [pc, #48]	@ (8004ba0 <HAL_LPTIM_Init+0x15c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d104      	bne.n	8004b7c <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b7a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	ffff1f3f 	.word	0xffff1f3f
 8004b94:	ff19f1fe 	.word	0xff19f1fe
 8004b98:	40002400 	.word	0x40002400
 8004b9c:	58002400 	.word	0x58002400
 8004ba0:	58002800 	.word	0x58002800

08004ba4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004bac:	4b19      	ldr	r3, [pc, #100]	@ (8004c14 <HAL_PWREx_ConfigSupply+0x70>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d00a      	beq.n	8004bce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004bb8:	4b16      	ldr	r3, [pc, #88]	@ (8004c14 <HAL_PWREx_ConfigSupply+0x70>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d001      	beq.n	8004bca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e01f      	b.n	8004c0a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e01d      	b.n	8004c0a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004bce:	4b11      	ldr	r3, [pc, #68]	@ (8004c14 <HAL_PWREx_ConfigSupply+0x70>)
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f023 0207 	bic.w	r2, r3, #7
 8004bd6:	490f      	ldr	r1, [pc, #60]	@ (8004c14 <HAL_PWREx_ConfigSupply+0x70>)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004bde:	f7fe f869 	bl	8002cb4 <HAL_GetTick>
 8004be2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004be4:	e009      	b.n	8004bfa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004be6:	f7fe f865 	bl	8002cb4 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004bf4:	d901      	bls.n	8004bfa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e007      	b.n	8004c0a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004bfa:	4b06      	ldr	r3, [pc, #24]	@ (8004c14 <HAL_PWREx_ConfigSupply+0x70>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c06:	d1ee      	bne.n	8004be6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	58024800 	.word	0x58024800

08004c18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08c      	sub	sp, #48	@ 0x30
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d102      	bne.n	8004c2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	f000 bc48 	b.w	80054bc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 8088 	beq.w	8004d4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c3a:	4b99      	ldr	r3, [pc, #612]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c44:	4b96      	ldr	r3, [pc, #600]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c48:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d007      	beq.n	8004c60 <HAL_RCC_OscConfig+0x48>
 8004c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c52:	2b18      	cmp	r3, #24
 8004c54:	d111      	bne.n	8004c7a <HAL_RCC_OscConfig+0x62>
 8004c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c58:	f003 0303 	and.w	r3, r3, #3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d10c      	bne.n	8004c7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c60:	4b8f      	ldr	r3, [pc, #572]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d06d      	beq.n	8004d48 <HAL_RCC_OscConfig+0x130>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d169      	bne.n	8004d48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	f000 bc21 	b.w	80054bc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c82:	d106      	bne.n	8004c92 <HAL_RCC_OscConfig+0x7a>
 8004c84:	4b86      	ldr	r3, [pc, #536]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a85      	ldr	r2, [pc, #532]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004c8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	e02e      	b.n	8004cf0 <HAL_RCC_OscConfig+0xd8>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10c      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x9c>
 8004c9a:	4b81      	ldr	r3, [pc, #516]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a80      	ldr	r2, [pc, #512]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004ca0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	4b7e      	ldr	r3, [pc, #504]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a7d      	ldr	r2, [pc, #500]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004cac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	e01d      	b.n	8004cf0 <HAL_RCC_OscConfig+0xd8>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cbc:	d10c      	bne.n	8004cd8 <HAL_RCC_OscConfig+0xc0>
 8004cbe:	4b78      	ldr	r3, [pc, #480]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a77      	ldr	r2, [pc, #476]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004cc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	4b75      	ldr	r3, [pc, #468]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a74      	ldr	r2, [pc, #464]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	e00b      	b.n	8004cf0 <HAL_RCC_OscConfig+0xd8>
 8004cd8:	4b71      	ldr	r3, [pc, #452]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a70      	ldr	r2, [pc, #448]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004cde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ce2:	6013      	str	r3, [r2, #0]
 8004ce4:	4b6e      	ldr	r3, [pc, #440]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a6d      	ldr	r2, [pc, #436]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004cea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d013      	beq.n	8004d20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf8:	f7fd ffdc 	bl	8002cb4 <HAL_GetTick>
 8004cfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d00:	f7fd ffd8 	bl	8002cb4 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b64      	cmp	r3, #100	@ 0x64
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e3d4      	b.n	80054bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d12:	4b63      	ldr	r3, [pc, #396]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0f0      	beq.n	8004d00 <HAL_RCC_OscConfig+0xe8>
 8004d1e:	e014      	b.n	8004d4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d20:	f7fd ffc8 	bl	8002cb4 <HAL_GetTick>
 8004d24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d28:	f7fd ffc4 	bl	8002cb4 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b64      	cmp	r3, #100	@ 0x64
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e3c0      	b.n	80054bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d3a:	4b59      	ldr	r3, [pc, #356]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f0      	bne.n	8004d28 <HAL_RCC_OscConfig+0x110>
 8004d46:	e000      	b.n	8004d4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 80ca 	beq.w	8004eec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d58:	4b51      	ldr	r3, [pc, #324]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d60:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d62:	4b4f      	ldr	r3, [pc, #316]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d66:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d007      	beq.n	8004d7e <HAL_RCC_OscConfig+0x166>
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	2b18      	cmp	r3, #24
 8004d72:	d156      	bne.n	8004e22 <HAL_RCC_OscConfig+0x20a>
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d151      	bne.n	8004e22 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d7e:	4b48      	ldr	r3, [pc, #288]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0304 	and.w	r3, r3, #4
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d005      	beq.n	8004d96 <HAL_RCC_OscConfig+0x17e>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e392      	b.n	80054bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d96:	4b42      	ldr	r3, [pc, #264]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f023 0219 	bic.w	r2, r3, #25
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	493f      	ldr	r1, [pc, #252]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da8:	f7fd ff84 	bl	8002cb4 <HAL_GetTick>
 8004dac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004db0:	f7fd ff80 	bl	8002cb4 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e37c      	b.n	80054bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dc2:	4b37      	ldr	r3, [pc, #220]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0f0      	beq.n	8004db0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dce:	f7fd ff7d 	bl	8002ccc <HAL_GetREVID>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d817      	bhi.n	8004e0c <HAL_RCC_OscConfig+0x1f4>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	2b40      	cmp	r3, #64	@ 0x40
 8004de2:	d108      	bne.n	8004df6 <HAL_RCC_OscConfig+0x1de>
 8004de4:	4b2e      	ldr	r3, [pc, #184]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004dec:	4a2c      	ldr	r2, [pc, #176]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004dee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004df2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004df4:	e07a      	b.n	8004eec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df6:	4b2a      	ldr	r3, [pc, #168]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	031b      	lsls	r3, r3, #12
 8004e04:	4926      	ldr	r1, [pc, #152]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e0a:	e06f      	b.n	8004eec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e0c:	4b24      	ldr	r3, [pc, #144]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	061b      	lsls	r3, r3, #24
 8004e1a:	4921      	ldr	r1, [pc, #132]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e20:	e064      	b.n	8004eec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d047      	beq.n	8004eba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f023 0219 	bic.w	r2, r3, #25
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	491a      	ldr	r1, [pc, #104]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3c:	f7fd ff3a 	bl	8002cb4 <HAL_GetTick>
 8004e40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e44:	f7fd ff36 	bl	8002cb4 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e332      	b.n	80054bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e56:	4b12      	ldr	r3, [pc, #72]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0f0      	beq.n	8004e44 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e62:	f7fd ff33 	bl	8002ccc <HAL_GetREVID>
 8004e66:	4603      	mov	r3, r0
 8004e68:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d819      	bhi.n	8004ea4 <HAL_RCC_OscConfig+0x28c>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	2b40      	cmp	r3, #64	@ 0x40
 8004e76:	d108      	bne.n	8004e8a <HAL_RCC_OscConfig+0x272>
 8004e78:	4b09      	ldr	r3, [pc, #36]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004e80:	4a07      	ldr	r2, [pc, #28]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004e82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e86:	6053      	str	r3, [r2, #4]
 8004e88:	e030      	b.n	8004eec <HAL_RCC_OscConfig+0x2d4>
 8004e8a:	4b05      	ldr	r3, [pc, #20]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	031b      	lsls	r3, r3, #12
 8004e98:	4901      	ldr	r1, [pc, #4]	@ (8004ea0 <HAL_RCC_OscConfig+0x288>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	604b      	str	r3, [r1, #4]
 8004e9e:	e025      	b.n	8004eec <HAL_RCC_OscConfig+0x2d4>
 8004ea0:	58024400 	.word	0x58024400
 8004ea4:	4b9a      	ldr	r3, [pc, #616]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	061b      	lsls	r3, r3, #24
 8004eb2:	4997      	ldr	r1, [pc, #604]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	604b      	str	r3, [r1, #4]
 8004eb8:	e018      	b.n	8004eec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eba:	4b95      	ldr	r3, [pc, #596]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a94      	ldr	r2, [pc, #592]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8004ec0:	f023 0301 	bic.w	r3, r3, #1
 8004ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec6:	f7fd fef5 	bl	8002cb4 <HAL_GetTick>
 8004eca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ece:	f7fd fef1 	bl	8002cb4 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e2ed      	b.n	80054bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ee0:	4b8b      	ldr	r3, [pc, #556]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1f0      	bne.n	8004ece <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0310 	and.w	r3, r3, #16
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 80a9 	beq.w	800504c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004efa:	4b85      	ldr	r3, [pc, #532]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f02:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f04:	4b82      	ldr	r3, [pc, #520]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8004f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f08:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d007      	beq.n	8004f20 <HAL_RCC_OscConfig+0x308>
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b18      	cmp	r3, #24
 8004f14:	d13a      	bne.n	8004f8c <HAL_RCC_OscConfig+0x374>
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f003 0303 	and.w	r3, r3, #3
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d135      	bne.n	8004f8c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f20:	4b7b      	ldr	r3, [pc, #492]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d005      	beq.n	8004f38 <HAL_RCC_OscConfig+0x320>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	2b80      	cmp	r3, #128	@ 0x80
 8004f32:	d001      	beq.n	8004f38 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e2c1      	b.n	80054bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f38:	f7fd fec8 	bl	8002ccc <HAL_GetREVID>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d817      	bhi.n	8004f76 <HAL_RCC_OscConfig+0x35e>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	2b20      	cmp	r3, #32
 8004f4c:	d108      	bne.n	8004f60 <HAL_RCC_OscConfig+0x348>
 8004f4e:	4b70      	ldr	r3, [pc, #448]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004f56:	4a6e      	ldr	r2, [pc, #440]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8004f58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f5c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f5e:	e075      	b.n	800504c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f60:	4b6b      	ldr	r3, [pc, #428]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	069b      	lsls	r3, r3, #26
 8004f6e:	4968      	ldr	r1, [pc, #416]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f74:	e06a      	b.n	800504c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f76:	4b66      	ldr	r3, [pc, #408]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	061b      	lsls	r3, r3, #24
 8004f84:	4962      	ldr	r1, [pc, #392]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f8a:	e05f      	b.n	800504c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d042      	beq.n	800501a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f94:	4b5e      	ldr	r3, [pc, #376]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a5d      	ldr	r2, [pc, #372]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8004f9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa0:	f7fd fe88 	bl	8002cb4 <HAL_GetTick>
 8004fa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004fa8:	f7fd fe84 	bl	8002cb4 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e280      	b.n	80054bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004fba:	4b55      	ldr	r3, [pc, #340]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0f0      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fc6:	f7fd fe81 	bl	8002ccc <HAL_GetREVID>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d817      	bhi.n	8005004 <HAL_RCC_OscConfig+0x3ec>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	d108      	bne.n	8004fee <HAL_RCC_OscConfig+0x3d6>
 8004fdc:	4b4c      	ldr	r3, [pc, #304]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004fe4:	4a4a      	ldr	r2, [pc, #296]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8004fe6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fea:	6053      	str	r3, [r2, #4]
 8004fec:	e02e      	b.n	800504c <HAL_RCC_OscConfig+0x434>
 8004fee:	4b48      	ldr	r3, [pc, #288]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	069b      	lsls	r3, r3, #26
 8004ffc:	4944      	ldr	r1, [pc, #272]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	604b      	str	r3, [r1, #4]
 8005002:	e023      	b.n	800504c <HAL_RCC_OscConfig+0x434>
 8005004:	4b42      	ldr	r3, [pc, #264]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	061b      	lsls	r3, r3, #24
 8005012:	493f      	ldr	r1, [pc, #252]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8005014:	4313      	orrs	r3, r2
 8005016:	60cb      	str	r3, [r1, #12]
 8005018:	e018      	b.n	800504c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800501a:	4b3d      	ldr	r3, [pc, #244]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a3c      	ldr	r2, [pc, #240]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8005020:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005026:	f7fd fe45 	bl	8002cb4 <HAL_GetTick>
 800502a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800502e:	f7fd fe41 	bl	8002cb4 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e23d      	b.n	80054bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005040:	4b33      	ldr	r3, [pc, #204]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1f0      	bne.n	800502e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0308 	and.w	r3, r3, #8
 8005054:	2b00      	cmp	r3, #0
 8005056:	d036      	beq.n	80050c6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d019      	beq.n	8005094 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005060:	4b2b      	ldr	r3, [pc, #172]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8005062:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005064:	4a2a      	ldr	r2, [pc, #168]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8005066:	f043 0301 	orr.w	r3, r3, #1
 800506a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800506c:	f7fd fe22 	bl	8002cb4 <HAL_GetTick>
 8005070:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005074:	f7fd fe1e 	bl	8002cb4 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e21a      	b.n	80054bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005086:	4b22      	ldr	r3, [pc, #136]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8005088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0f0      	beq.n	8005074 <HAL_RCC_OscConfig+0x45c>
 8005092:	e018      	b.n	80050c6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005094:	4b1e      	ldr	r3, [pc, #120]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8005096:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005098:	4a1d      	ldr	r2, [pc, #116]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 800509a:	f023 0301 	bic.w	r3, r3, #1
 800509e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a0:	f7fd fe08 	bl	8002cb4 <HAL_GetTick>
 80050a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050a8:	f7fd fe04 	bl	8002cb4 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e200      	b.n	80054bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050ba:	4b15      	ldr	r3, [pc, #84]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 80050bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1f0      	bne.n	80050a8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0320 	and.w	r3, r3, #32
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d039      	beq.n	8005146 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d01c      	beq.n	8005114 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050da:	4b0d      	ldr	r3, [pc, #52]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a0c      	ldr	r2, [pc, #48]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 80050e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80050e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050e6:	f7fd fde5 	bl	8002cb4 <HAL_GetTick>
 80050ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80050ec:	e008      	b.n	8005100 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050ee:	f7fd fde1 	bl	8002cb4 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e1dd      	b.n	80054bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005100:	4b03      	ldr	r3, [pc, #12]	@ (8005110 <HAL_RCC_OscConfig+0x4f8>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0f0      	beq.n	80050ee <HAL_RCC_OscConfig+0x4d6>
 800510c:	e01b      	b.n	8005146 <HAL_RCC_OscConfig+0x52e>
 800510e:	bf00      	nop
 8005110:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005114:	4b9b      	ldr	r3, [pc, #620]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a9a      	ldr	r2, [pc, #616]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 800511a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800511e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005120:	f7fd fdc8 	bl	8002cb4 <HAL_GetTick>
 8005124:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005128:	f7fd fdc4 	bl	8002cb4 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e1c0      	b.n	80054bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800513a:	4b92      	ldr	r3, [pc, #584]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1f0      	bne.n	8005128 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 8081 	beq.w	8005256 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005154:	4b8c      	ldr	r3, [pc, #560]	@ (8005388 <HAL_RCC_OscConfig+0x770>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a8b      	ldr	r2, [pc, #556]	@ (8005388 <HAL_RCC_OscConfig+0x770>)
 800515a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800515e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005160:	f7fd fda8 	bl	8002cb4 <HAL_GetTick>
 8005164:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005166:	e008      	b.n	800517a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005168:	f7fd fda4 	bl	8002cb4 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b64      	cmp	r3, #100	@ 0x64
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e1a0      	b.n	80054bc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800517a:	4b83      	ldr	r3, [pc, #524]	@ (8005388 <HAL_RCC_OscConfig+0x770>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0f0      	beq.n	8005168 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d106      	bne.n	800519c <HAL_RCC_OscConfig+0x584>
 800518e:	4b7d      	ldr	r3, [pc, #500]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 8005190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005192:	4a7c      	ldr	r2, [pc, #496]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 8005194:	f043 0301 	orr.w	r3, r3, #1
 8005198:	6713      	str	r3, [r2, #112]	@ 0x70
 800519a:	e02d      	b.n	80051f8 <HAL_RCC_OscConfig+0x5e0>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10c      	bne.n	80051be <HAL_RCC_OscConfig+0x5a6>
 80051a4:	4b77      	ldr	r3, [pc, #476]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 80051a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a8:	4a76      	ldr	r2, [pc, #472]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 80051aa:	f023 0301 	bic.w	r3, r3, #1
 80051ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80051b0:	4b74      	ldr	r3, [pc, #464]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 80051b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b4:	4a73      	ldr	r2, [pc, #460]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 80051b6:	f023 0304 	bic.w	r3, r3, #4
 80051ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80051bc:	e01c      	b.n	80051f8 <HAL_RCC_OscConfig+0x5e0>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	2b05      	cmp	r3, #5
 80051c4:	d10c      	bne.n	80051e0 <HAL_RCC_OscConfig+0x5c8>
 80051c6:	4b6f      	ldr	r3, [pc, #444]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 80051c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ca:	4a6e      	ldr	r2, [pc, #440]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 80051cc:	f043 0304 	orr.w	r3, r3, #4
 80051d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80051d2:	4b6c      	ldr	r3, [pc, #432]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 80051d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d6:	4a6b      	ldr	r2, [pc, #428]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 80051d8:	f043 0301 	orr.w	r3, r3, #1
 80051dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80051de:	e00b      	b.n	80051f8 <HAL_RCC_OscConfig+0x5e0>
 80051e0:	4b68      	ldr	r3, [pc, #416]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 80051e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e4:	4a67      	ldr	r2, [pc, #412]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 80051e6:	f023 0301 	bic.w	r3, r3, #1
 80051ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80051ec:	4b65      	ldr	r3, [pc, #404]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 80051ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f0:	4a64      	ldr	r2, [pc, #400]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 80051f2:	f023 0304 	bic.w	r3, r3, #4
 80051f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d015      	beq.n	800522c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005200:	f7fd fd58 	bl	8002cb4 <HAL_GetTick>
 8005204:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005206:	e00a      	b.n	800521e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005208:	f7fd fd54 	bl	8002cb4 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005216:	4293      	cmp	r3, r2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e14e      	b.n	80054bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800521e:	4b59      	ldr	r3, [pc, #356]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 8005220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0ee      	beq.n	8005208 <HAL_RCC_OscConfig+0x5f0>
 800522a:	e014      	b.n	8005256 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800522c:	f7fd fd42 	bl	8002cb4 <HAL_GetTick>
 8005230:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005232:	e00a      	b.n	800524a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005234:	f7fd fd3e 	bl	8002cb4 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005242:	4293      	cmp	r3, r2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e138      	b.n	80054bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800524a:	4b4e      	ldr	r3, [pc, #312]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 800524c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1ee      	bne.n	8005234 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 812d 	beq.w	80054ba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005260:	4b48      	ldr	r3, [pc, #288]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005268:	2b18      	cmp	r3, #24
 800526a:	f000 80bd 	beq.w	80053e8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005272:	2b02      	cmp	r3, #2
 8005274:	f040 809e 	bne.w	80053b4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005278:	4b42      	ldr	r3, [pc, #264]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a41      	ldr	r2, [pc, #260]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 800527e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005284:	f7fd fd16 	bl	8002cb4 <HAL_GetTick>
 8005288:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800528c:	f7fd fd12 	bl	8002cb4 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e10e      	b.n	80054bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800529e:	4b39      	ldr	r3, [pc, #228]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1f0      	bne.n	800528c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052aa:	4b36      	ldr	r3, [pc, #216]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 80052ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052ae:	4b37      	ldr	r3, [pc, #220]	@ (800538c <HAL_RCC_OscConfig+0x774>)
 80052b0:	4013      	ands	r3, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80052ba:	0112      	lsls	r2, r2, #4
 80052bc:	430a      	orrs	r2, r1
 80052be:	4931      	ldr	r1, [pc, #196]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c8:	3b01      	subs	r3, #1
 80052ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d2:	3b01      	subs	r3, #1
 80052d4:	025b      	lsls	r3, r3, #9
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	431a      	orrs	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052de:	3b01      	subs	r3, #1
 80052e0:	041b      	lsls	r3, r3, #16
 80052e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ec:	3b01      	subs	r3, #1
 80052ee:	061b      	lsls	r3, r3, #24
 80052f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80052f4:	4923      	ldr	r1, [pc, #140]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80052fa:	4b22      	ldr	r3, [pc, #136]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 80052fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fe:	4a21      	ldr	r2, [pc, #132]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 8005300:	f023 0301 	bic.w	r3, r3, #1
 8005304:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005306:	4b1f      	ldr	r3, [pc, #124]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 8005308:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800530a:	4b21      	ldr	r3, [pc, #132]	@ (8005390 <HAL_RCC_OscConfig+0x778>)
 800530c:	4013      	ands	r3, r2
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005312:	00d2      	lsls	r2, r2, #3
 8005314:	491b      	ldr	r1, [pc, #108]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 8005316:	4313      	orrs	r3, r2
 8005318:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800531a:	4b1a      	ldr	r3, [pc, #104]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 800531c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531e:	f023 020c 	bic.w	r2, r3, #12
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005326:	4917      	ldr	r1, [pc, #92]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 8005328:	4313      	orrs	r3, r2
 800532a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800532c:	4b15      	ldr	r3, [pc, #84]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 800532e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005330:	f023 0202 	bic.w	r2, r3, #2
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005338:	4912      	ldr	r1, [pc, #72]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 800533a:	4313      	orrs	r3, r2
 800533c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800533e:	4b11      	ldr	r3, [pc, #68]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 8005340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005342:	4a10      	ldr	r2, [pc, #64]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 8005344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005348:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800534a:	4b0e      	ldr	r3, [pc, #56]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 800534c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534e:	4a0d      	ldr	r2, [pc, #52]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 8005350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005354:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005356:	4b0b      	ldr	r3, [pc, #44]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 8005358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535a:	4a0a      	ldr	r2, [pc, #40]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 800535c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005360:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005362:	4b08      	ldr	r3, [pc, #32]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 8005364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005366:	4a07      	ldr	r2, [pc, #28]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 8005368:	f043 0301 	orr.w	r3, r3, #1
 800536c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800536e:	4b05      	ldr	r3, [pc, #20]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a04      	ldr	r2, [pc, #16]	@ (8005384 <HAL_RCC_OscConfig+0x76c>)
 8005374:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537a:	f7fd fc9b 	bl	8002cb4 <HAL_GetTick>
 800537e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005380:	e011      	b.n	80053a6 <HAL_RCC_OscConfig+0x78e>
 8005382:	bf00      	nop
 8005384:	58024400 	.word	0x58024400
 8005388:	58024800 	.word	0x58024800
 800538c:	fffffc0c 	.word	0xfffffc0c
 8005390:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005394:	f7fd fc8e 	bl	8002cb4 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e08a      	b.n	80054bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053a6:	4b47      	ldr	r3, [pc, #284]	@ (80054c4 <HAL_RCC_OscConfig+0x8ac>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0f0      	beq.n	8005394 <HAL_RCC_OscConfig+0x77c>
 80053b2:	e082      	b.n	80054ba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053b4:	4b43      	ldr	r3, [pc, #268]	@ (80054c4 <HAL_RCC_OscConfig+0x8ac>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a42      	ldr	r2, [pc, #264]	@ (80054c4 <HAL_RCC_OscConfig+0x8ac>)
 80053ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c0:	f7fd fc78 	bl	8002cb4 <HAL_GetTick>
 80053c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053c8:	f7fd fc74 	bl	8002cb4 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e070      	b.n	80054bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053da:	4b3a      	ldr	r3, [pc, #232]	@ (80054c4 <HAL_RCC_OscConfig+0x8ac>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1f0      	bne.n	80053c8 <HAL_RCC_OscConfig+0x7b0>
 80053e6:	e068      	b.n	80054ba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80053e8:	4b36      	ldr	r3, [pc, #216]	@ (80054c4 <HAL_RCC_OscConfig+0x8ac>)
 80053ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80053ee:	4b35      	ldr	r3, [pc, #212]	@ (80054c4 <HAL_RCC_OscConfig+0x8ac>)
 80053f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d031      	beq.n	8005460 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f003 0203 	and.w	r2, r3, #3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005406:	429a      	cmp	r2, r3
 8005408:	d12a      	bne.n	8005460 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	091b      	lsrs	r3, r3, #4
 800540e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005416:	429a      	cmp	r2, r3
 8005418:	d122      	bne.n	8005460 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005424:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005426:	429a      	cmp	r2, r3
 8005428:	d11a      	bne.n	8005460 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	0a5b      	lsrs	r3, r3, #9
 800542e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005436:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005438:	429a      	cmp	r2, r3
 800543a:	d111      	bne.n	8005460 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	0c1b      	lsrs	r3, r3, #16
 8005440:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005448:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800544a:	429a      	cmp	r2, r3
 800544c:	d108      	bne.n	8005460 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	0e1b      	lsrs	r3, r3, #24
 8005452:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800545a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800545c:	429a      	cmp	r2, r3
 800545e:	d001      	beq.n	8005464 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e02b      	b.n	80054bc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005464:	4b17      	ldr	r3, [pc, #92]	@ (80054c4 <HAL_RCC_OscConfig+0x8ac>)
 8005466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005468:	08db      	lsrs	r3, r3, #3
 800546a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800546e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	429a      	cmp	r2, r3
 8005478:	d01f      	beq.n	80054ba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800547a:	4b12      	ldr	r3, [pc, #72]	@ (80054c4 <HAL_RCC_OscConfig+0x8ac>)
 800547c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547e:	4a11      	ldr	r2, [pc, #68]	@ (80054c4 <HAL_RCC_OscConfig+0x8ac>)
 8005480:	f023 0301 	bic.w	r3, r3, #1
 8005484:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005486:	f7fd fc15 	bl	8002cb4 <HAL_GetTick>
 800548a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800548c:	bf00      	nop
 800548e:	f7fd fc11 	bl	8002cb4 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005496:	4293      	cmp	r3, r2
 8005498:	d0f9      	beq.n	800548e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800549a:	4b0a      	ldr	r3, [pc, #40]	@ (80054c4 <HAL_RCC_OscConfig+0x8ac>)
 800549c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800549e:	4b0a      	ldr	r3, [pc, #40]	@ (80054c8 <HAL_RCC_OscConfig+0x8b0>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80054a6:	00d2      	lsls	r2, r2, #3
 80054a8:	4906      	ldr	r1, [pc, #24]	@ (80054c4 <HAL_RCC_OscConfig+0x8ac>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80054ae:	4b05      	ldr	r3, [pc, #20]	@ (80054c4 <HAL_RCC_OscConfig+0x8ac>)
 80054b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b2:	4a04      	ldr	r2, [pc, #16]	@ (80054c4 <HAL_RCC_OscConfig+0x8ac>)
 80054b4:	f043 0301 	orr.w	r3, r3, #1
 80054b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3730      	adds	r7, #48	@ 0x30
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	58024400 	.word	0x58024400
 80054c8:	ffff0007 	.word	0xffff0007

080054cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e19c      	b.n	800581a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054e0:	4b8a      	ldr	r3, [pc, #552]	@ (800570c <HAL_RCC_ClockConfig+0x240>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 030f 	and.w	r3, r3, #15
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d910      	bls.n	8005510 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ee:	4b87      	ldr	r3, [pc, #540]	@ (800570c <HAL_RCC_ClockConfig+0x240>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f023 020f 	bic.w	r2, r3, #15
 80054f6:	4985      	ldr	r1, [pc, #532]	@ (800570c <HAL_RCC_ClockConfig+0x240>)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054fe:	4b83      	ldr	r3, [pc, #524]	@ (800570c <HAL_RCC_ClockConfig+0x240>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 030f 	and.w	r3, r3, #15
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	429a      	cmp	r2, r3
 800550a:	d001      	beq.n	8005510 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e184      	b.n	800581a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d010      	beq.n	800553e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691a      	ldr	r2, [r3, #16]
 8005520:	4b7b      	ldr	r3, [pc, #492]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005528:	429a      	cmp	r2, r3
 800552a:	d908      	bls.n	800553e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800552c:	4b78      	ldr	r3, [pc, #480]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	4975      	ldr	r1, [pc, #468]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 800553a:	4313      	orrs	r3, r2
 800553c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d010      	beq.n	800556c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	695a      	ldr	r2, [r3, #20]
 800554e:	4b70      	ldr	r3, [pc, #448]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005556:	429a      	cmp	r2, r3
 8005558:	d908      	bls.n	800556c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800555a:	4b6d      	ldr	r3, [pc, #436]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	496a      	ldr	r1, [pc, #424]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 8005568:	4313      	orrs	r3, r2
 800556a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0310 	and.w	r3, r3, #16
 8005574:	2b00      	cmp	r3, #0
 8005576:	d010      	beq.n	800559a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	699a      	ldr	r2, [r3, #24]
 800557c:	4b64      	ldr	r3, [pc, #400]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 800557e:	69db      	ldr	r3, [r3, #28]
 8005580:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005584:	429a      	cmp	r2, r3
 8005586:	d908      	bls.n	800559a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005588:	4b61      	ldr	r3, [pc, #388]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	495e      	ldr	r1, [pc, #376]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 8005596:	4313      	orrs	r3, r2
 8005598:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d010      	beq.n	80055c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	69da      	ldr	r2, [r3, #28]
 80055aa:	4b59      	ldr	r3, [pc, #356]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d908      	bls.n	80055c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80055b6:	4b56      	ldr	r3, [pc, #344]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	4953      	ldr	r1, [pc, #332]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d010      	beq.n	80055f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68da      	ldr	r2, [r3, #12]
 80055d8:	4b4d      	ldr	r3, [pc, #308]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	f003 030f 	and.w	r3, r3, #15
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d908      	bls.n	80055f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055e4:	4b4a      	ldr	r3, [pc, #296]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	f023 020f 	bic.w	r2, r3, #15
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	4947      	ldr	r1, [pc, #284]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d055      	beq.n	80056ae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005602:	4b43      	ldr	r3, [pc, #268]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	4940      	ldr	r1, [pc, #256]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 8005610:	4313      	orrs	r3, r2
 8005612:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	2b02      	cmp	r3, #2
 800561a:	d107      	bne.n	800562c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800561c:	4b3c      	ldr	r3, [pc, #240]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d121      	bne.n	800566c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e0f6      	b.n	800581a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	2b03      	cmp	r3, #3
 8005632:	d107      	bne.n	8005644 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005634:	4b36      	ldr	r3, [pc, #216]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d115      	bne.n	800566c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e0ea      	b.n	800581a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d107      	bne.n	800565c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800564c:	4b30      	ldr	r3, [pc, #192]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005654:	2b00      	cmp	r3, #0
 8005656:	d109      	bne.n	800566c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e0de      	b.n	800581a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800565c:	4b2c      	ldr	r3, [pc, #176]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e0d6      	b.n	800581a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800566c:	4b28      	ldr	r3, [pc, #160]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	f023 0207 	bic.w	r2, r3, #7
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	4925      	ldr	r1, [pc, #148]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 800567a:	4313      	orrs	r3, r2
 800567c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800567e:	f7fd fb19 	bl	8002cb4 <HAL_GetTick>
 8005682:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005684:	e00a      	b.n	800569c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005686:	f7fd fb15 	bl	8002cb4 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005694:	4293      	cmp	r3, r2
 8005696:	d901      	bls.n	800569c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e0be      	b.n	800581a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800569c:	4b1c      	ldr	r3, [pc, #112]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d1eb      	bne.n	8005686 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d010      	beq.n	80056dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	4b14      	ldr	r3, [pc, #80]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	f003 030f 	and.w	r3, r3, #15
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d208      	bcs.n	80056dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056ca:	4b11      	ldr	r3, [pc, #68]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	f023 020f 	bic.w	r2, r3, #15
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	490e      	ldr	r1, [pc, #56]	@ (8005710 <HAL_RCC_ClockConfig+0x244>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056dc:	4b0b      	ldr	r3, [pc, #44]	@ (800570c <HAL_RCC_ClockConfig+0x240>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 030f 	and.w	r3, r3, #15
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d214      	bcs.n	8005714 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ea:	4b08      	ldr	r3, [pc, #32]	@ (800570c <HAL_RCC_ClockConfig+0x240>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f023 020f 	bic.w	r2, r3, #15
 80056f2:	4906      	ldr	r1, [pc, #24]	@ (800570c <HAL_RCC_ClockConfig+0x240>)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056fa:	4b04      	ldr	r3, [pc, #16]	@ (800570c <HAL_RCC_ClockConfig+0x240>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	429a      	cmp	r2, r3
 8005706:	d005      	beq.n	8005714 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e086      	b.n	800581a <HAL_RCC_ClockConfig+0x34e>
 800570c:	52002000 	.word	0x52002000
 8005710:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0304 	and.w	r3, r3, #4
 800571c:	2b00      	cmp	r3, #0
 800571e:	d010      	beq.n	8005742 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691a      	ldr	r2, [r3, #16]
 8005724:	4b3f      	ldr	r3, [pc, #252]	@ (8005824 <HAL_RCC_ClockConfig+0x358>)
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800572c:	429a      	cmp	r2, r3
 800572e:	d208      	bcs.n	8005742 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005730:	4b3c      	ldr	r3, [pc, #240]	@ (8005824 <HAL_RCC_ClockConfig+0x358>)
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	4939      	ldr	r1, [pc, #228]	@ (8005824 <HAL_RCC_ClockConfig+0x358>)
 800573e:	4313      	orrs	r3, r2
 8005740:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0308 	and.w	r3, r3, #8
 800574a:	2b00      	cmp	r3, #0
 800574c:	d010      	beq.n	8005770 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	695a      	ldr	r2, [r3, #20]
 8005752:	4b34      	ldr	r3, [pc, #208]	@ (8005824 <HAL_RCC_ClockConfig+0x358>)
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800575a:	429a      	cmp	r2, r3
 800575c:	d208      	bcs.n	8005770 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800575e:	4b31      	ldr	r3, [pc, #196]	@ (8005824 <HAL_RCC_ClockConfig+0x358>)
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	492e      	ldr	r1, [pc, #184]	@ (8005824 <HAL_RCC_ClockConfig+0x358>)
 800576c:	4313      	orrs	r3, r2
 800576e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0310 	and.w	r3, r3, #16
 8005778:	2b00      	cmp	r3, #0
 800577a:	d010      	beq.n	800579e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	699a      	ldr	r2, [r3, #24]
 8005780:	4b28      	ldr	r3, [pc, #160]	@ (8005824 <HAL_RCC_ClockConfig+0x358>)
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005788:	429a      	cmp	r2, r3
 800578a:	d208      	bcs.n	800579e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800578c:	4b25      	ldr	r3, [pc, #148]	@ (8005824 <HAL_RCC_ClockConfig+0x358>)
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	4922      	ldr	r1, [pc, #136]	@ (8005824 <HAL_RCC_ClockConfig+0x358>)
 800579a:	4313      	orrs	r3, r2
 800579c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d010      	beq.n	80057cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69da      	ldr	r2, [r3, #28]
 80057ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005824 <HAL_RCC_ClockConfig+0x358>)
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d208      	bcs.n	80057cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80057ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005824 <HAL_RCC_ClockConfig+0x358>)
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	4917      	ldr	r1, [pc, #92]	@ (8005824 <HAL_RCC_ClockConfig+0x358>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80057cc:	f000 f834 	bl	8005838 <HAL_RCC_GetSysClockFreq>
 80057d0:	4602      	mov	r2, r0
 80057d2:	4b14      	ldr	r3, [pc, #80]	@ (8005824 <HAL_RCC_ClockConfig+0x358>)
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	0a1b      	lsrs	r3, r3, #8
 80057d8:	f003 030f 	and.w	r3, r3, #15
 80057dc:	4912      	ldr	r1, [pc, #72]	@ (8005828 <HAL_RCC_ClockConfig+0x35c>)
 80057de:	5ccb      	ldrb	r3, [r1, r3]
 80057e0:	f003 031f 	and.w	r3, r3, #31
 80057e4:	fa22 f303 	lsr.w	r3, r2, r3
 80057e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005824 <HAL_RCC_ClockConfig+0x358>)
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	f003 030f 	and.w	r3, r3, #15
 80057f2:	4a0d      	ldr	r2, [pc, #52]	@ (8005828 <HAL_RCC_ClockConfig+0x35c>)
 80057f4:	5cd3      	ldrb	r3, [r2, r3]
 80057f6:	f003 031f 	and.w	r3, r3, #31
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005800:	4a0a      	ldr	r2, [pc, #40]	@ (800582c <HAL_RCC_ClockConfig+0x360>)
 8005802:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005804:	4a0a      	ldr	r2, [pc, #40]	@ (8005830 <HAL_RCC_ClockConfig+0x364>)
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800580a:	4b0a      	ldr	r3, [pc, #40]	@ (8005834 <HAL_RCC_ClockConfig+0x368>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f7fd fa06 	bl	8002c20 <HAL_InitTick>
 8005814:	4603      	mov	r3, r0
 8005816:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005818:	7bfb      	ldrb	r3, [r7, #15]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	58024400 	.word	0x58024400
 8005828:	0800a378 	.word	0x0800a378
 800582c:	2400000c 	.word	0x2400000c
 8005830:	24000008 	.word	0x24000008
 8005834:	24000010 	.word	0x24000010

08005838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005838:	b480      	push	{r7}
 800583a:	b089      	sub	sp, #36	@ 0x24
 800583c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800583e:	4bb3      	ldr	r3, [pc, #716]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005846:	2b18      	cmp	r3, #24
 8005848:	f200 8155 	bhi.w	8005af6 <HAL_RCC_GetSysClockFreq+0x2be>
 800584c:	a201      	add	r2, pc, #4	@ (adr r2, 8005854 <HAL_RCC_GetSysClockFreq+0x1c>)
 800584e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005852:	bf00      	nop
 8005854:	080058b9 	.word	0x080058b9
 8005858:	08005af7 	.word	0x08005af7
 800585c:	08005af7 	.word	0x08005af7
 8005860:	08005af7 	.word	0x08005af7
 8005864:	08005af7 	.word	0x08005af7
 8005868:	08005af7 	.word	0x08005af7
 800586c:	08005af7 	.word	0x08005af7
 8005870:	08005af7 	.word	0x08005af7
 8005874:	080058df 	.word	0x080058df
 8005878:	08005af7 	.word	0x08005af7
 800587c:	08005af7 	.word	0x08005af7
 8005880:	08005af7 	.word	0x08005af7
 8005884:	08005af7 	.word	0x08005af7
 8005888:	08005af7 	.word	0x08005af7
 800588c:	08005af7 	.word	0x08005af7
 8005890:	08005af7 	.word	0x08005af7
 8005894:	080058e5 	.word	0x080058e5
 8005898:	08005af7 	.word	0x08005af7
 800589c:	08005af7 	.word	0x08005af7
 80058a0:	08005af7 	.word	0x08005af7
 80058a4:	08005af7 	.word	0x08005af7
 80058a8:	08005af7 	.word	0x08005af7
 80058ac:	08005af7 	.word	0x08005af7
 80058b0:	08005af7 	.word	0x08005af7
 80058b4:	080058eb 	.word	0x080058eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058b8:	4b94      	ldr	r3, [pc, #592]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0320 	and.w	r3, r3, #32
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d009      	beq.n	80058d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058c4:	4b91      	ldr	r3, [pc, #580]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	08db      	lsrs	r3, r3, #3
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	4a90      	ldr	r2, [pc, #576]	@ (8005b10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058d0:	fa22 f303 	lsr.w	r3, r2, r3
 80058d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80058d6:	e111      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80058d8:	4b8d      	ldr	r3, [pc, #564]	@ (8005b10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058da:	61bb      	str	r3, [r7, #24]
      break;
 80058dc:	e10e      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80058de:	4b8d      	ldr	r3, [pc, #564]	@ (8005b14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80058e0:	61bb      	str	r3, [r7, #24]
      break;
 80058e2:	e10b      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80058e4:	4b8c      	ldr	r3, [pc, #560]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80058e6:	61bb      	str	r3, [r7, #24]
      break;
 80058e8:	e108      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058ea:	4b88      	ldr	r3, [pc, #544]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80058f4:	4b85      	ldr	r3, [pc, #532]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f8:	091b      	lsrs	r3, r3, #4
 80058fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005900:	4b82      	ldr	r3, [pc, #520]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800590a:	4b80      	ldr	r3, [pc, #512]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800590c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800590e:	08db      	lsrs	r3, r3, #3
 8005910:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	fb02 f303 	mul.w	r3, r2, r3
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005922:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 80e1 	beq.w	8005af0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2b02      	cmp	r3, #2
 8005932:	f000 8083 	beq.w	8005a3c <HAL_RCC_GetSysClockFreq+0x204>
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2b02      	cmp	r3, #2
 800593a:	f200 80a1 	bhi.w	8005a80 <HAL_RCC_GetSysClockFreq+0x248>
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <HAL_RCC_GetSysClockFreq+0x114>
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d056      	beq.n	80059f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800594a:	e099      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800594c:	4b6f      	ldr	r3, [pc, #444]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0320 	and.w	r3, r3, #32
 8005954:	2b00      	cmp	r3, #0
 8005956:	d02d      	beq.n	80059b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005958:	4b6c      	ldr	r3, [pc, #432]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	08db      	lsrs	r3, r3, #3
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	4a6b      	ldr	r2, [pc, #428]	@ (8005b10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005964:	fa22 f303 	lsr.w	r3, r2, r3
 8005968:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	ee07 3a90 	vmov	s15, r3
 8005970:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	ee07 3a90 	vmov	s15, r3
 800597a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800597e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005982:	4b62      	ldr	r3, [pc, #392]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800598a:	ee07 3a90 	vmov	s15, r3
 800598e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005992:	ed97 6a02 	vldr	s12, [r7, #8]
 8005996:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005b1c <HAL_RCC_GetSysClockFreq+0x2e4>
 800599a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800599e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80059b2:	e087      	b.n	8005ac4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059be:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005b20 <HAL_RCC_GetSysClockFreq+0x2e8>
 80059c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059c6:	4b51      	ldr	r3, [pc, #324]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ce:	ee07 3a90 	vmov	s15, r3
 80059d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80059da:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005b1c <HAL_RCC_GetSysClockFreq+0x2e4>
 80059de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059f6:	e065      	b.n	8005ac4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	ee07 3a90 	vmov	s15, r3
 80059fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a02:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005b24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a0a:	4b40      	ldr	r3, [pc, #256]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a12:	ee07 3a90 	vmov	s15, r3
 8005a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a1e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005b1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a3a:	e043      	b.n	8005ac4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	ee07 3a90 	vmov	s15, r3
 8005a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a46:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005b28 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a56:	ee07 3a90 	vmov	s15, r3
 8005a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a62:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005b1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a7e:	e021      	b.n	8005ac4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005b24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a92:	4b1e      	ldr	r3, [pc, #120]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a9a:	ee07 3a90 	vmov	s15, r3
 8005a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005aa6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005b1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005abe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ac2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005ac4:	4b11      	ldr	r3, [pc, #68]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac8:	0a5b      	lsrs	r3, r3, #9
 8005aca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ace:	3301      	adds	r3, #1
 8005ad0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	ee07 3a90 	vmov	s15, r3
 8005ad8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005adc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ae8:	ee17 3a90 	vmov	r3, s15
 8005aec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005aee:	e005      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	61bb      	str	r3, [r7, #24]
      break;
 8005af4:	e002      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005af6:	4b07      	ldr	r3, [pc, #28]	@ (8005b14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005af8:	61bb      	str	r3, [r7, #24]
      break;
 8005afa:	bf00      	nop
  }

  return sysclockfreq;
 8005afc:	69bb      	ldr	r3, [r7, #24]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3724      	adds	r7, #36	@ 0x24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	58024400 	.word	0x58024400
 8005b10:	03d09000 	.word	0x03d09000
 8005b14:	003d0900 	.word	0x003d0900
 8005b18:	016e3600 	.word	0x016e3600
 8005b1c:	46000000 	.word	0x46000000
 8005b20:	4c742400 	.word	0x4c742400
 8005b24:	4a742400 	.word	0x4a742400
 8005b28:	4bb71b00 	.word	0x4bb71b00

08005b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005b32:	f7ff fe81 	bl	8005838 <HAL_RCC_GetSysClockFreq>
 8005b36:	4602      	mov	r2, r0
 8005b38:	4b10      	ldr	r3, [pc, #64]	@ (8005b7c <HAL_RCC_GetHCLKFreq+0x50>)
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	0a1b      	lsrs	r3, r3, #8
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	490f      	ldr	r1, [pc, #60]	@ (8005b80 <HAL_RCC_GetHCLKFreq+0x54>)
 8005b44:	5ccb      	ldrb	r3, [r1, r3]
 8005b46:	f003 031f 	and.w	r3, r3, #31
 8005b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b4e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b50:	4b0a      	ldr	r3, [pc, #40]	@ (8005b7c <HAL_RCC_GetHCLKFreq+0x50>)
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	f003 030f 	and.w	r3, r3, #15
 8005b58:	4a09      	ldr	r2, [pc, #36]	@ (8005b80 <HAL_RCC_GetHCLKFreq+0x54>)
 8005b5a:	5cd3      	ldrb	r3, [r2, r3]
 8005b5c:	f003 031f 	and.w	r3, r3, #31
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	fa22 f303 	lsr.w	r3, r2, r3
 8005b66:	4a07      	ldr	r2, [pc, #28]	@ (8005b84 <HAL_RCC_GetHCLKFreq+0x58>)
 8005b68:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b6a:	4a07      	ldr	r2, [pc, #28]	@ (8005b88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005b70:	4b04      	ldr	r3, [pc, #16]	@ (8005b84 <HAL_RCC_GetHCLKFreq+0x58>)
 8005b72:	681b      	ldr	r3, [r3, #0]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	58024400 	.word	0x58024400
 8005b80:	0800a378 	.word	0x0800a378
 8005b84:	2400000c 	.word	0x2400000c
 8005b88:	24000008 	.word	0x24000008

08005b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005b90:	f7ff ffcc 	bl	8005b2c <HAL_RCC_GetHCLKFreq>
 8005b94:	4602      	mov	r2, r0
 8005b96:	4b06      	ldr	r3, [pc, #24]	@ (8005bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	091b      	lsrs	r3, r3, #4
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	4904      	ldr	r1, [pc, #16]	@ (8005bb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ba2:	5ccb      	ldrb	r3, [r1, r3]
 8005ba4:	f003 031f 	and.w	r3, r3, #31
 8005ba8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	58024400 	.word	0x58024400
 8005bb4:	0800a378 	.word	0x0800a378

08005bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005bbc:	f7ff ffb6 	bl	8005b2c <HAL_RCC_GetHCLKFreq>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	4b06      	ldr	r3, [pc, #24]	@ (8005bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	0a1b      	lsrs	r3, r3, #8
 8005bc8:	f003 0307 	and.w	r3, r3, #7
 8005bcc:	4904      	ldr	r1, [pc, #16]	@ (8005be0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005bce:	5ccb      	ldrb	r3, [r1, r3]
 8005bd0:	f003 031f 	and.w	r3, r3, #31
 8005bd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	58024400 	.word	0x58024400
 8005be0:	0800a378 	.word	0x0800a378

08005be4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005be8:	b0ca      	sub	sp, #296	@ 0x128
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c04:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005c08:	2500      	movs	r5, #0
 8005c0a:	ea54 0305 	orrs.w	r3, r4, r5
 8005c0e:	d049      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c16:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c1a:	d02f      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005c1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c20:	d828      	bhi.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c26:	d01a      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c2c:	d822      	bhi.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005c32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c36:	d007      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c38:	e01c      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c3a:	4bb8      	ldr	r3, [pc, #736]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c3e:	4ab7      	ldr	r2, [pc, #732]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c46:	e01a      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4c:	3308      	adds	r3, #8
 8005c4e:	2102      	movs	r1, #2
 8005c50:	4618      	mov	r0, r3
 8005c52:	f001 fc8f 	bl	8007574 <RCCEx_PLL2_Config>
 8005c56:	4603      	mov	r3, r0
 8005c58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c5c:	e00f      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c62:	3328      	adds	r3, #40	@ 0x28
 8005c64:	2102      	movs	r1, #2
 8005c66:	4618      	mov	r0, r3
 8005c68:	f001 fd36 	bl	80076d8 <RCCEx_PLL3_Config>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c72:	e004      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c7a:	e000      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10a      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005c86:	4ba5      	ldr	r3, [pc, #660]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c94:	4aa1      	ldr	r2, [pc, #644]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c96:	430b      	orrs	r3, r1
 8005c98:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c9a:	e003      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ca0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005cb0:	f04f 0900 	mov.w	r9, #0
 8005cb4:	ea58 0309 	orrs.w	r3, r8, r9
 8005cb8:	d047      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc0:	2b04      	cmp	r3, #4
 8005cc2:	d82a      	bhi.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005ccc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cca:	bf00      	nop
 8005ccc:	08005ce1 	.word	0x08005ce1
 8005cd0:	08005cef 	.word	0x08005cef
 8005cd4:	08005d05 	.word	0x08005d05
 8005cd8:	08005d23 	.word	0x08005d23
 8005cdc:	08005d23 	.word	0x08005d23
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ce0:	4b8e      	ldr	r3, [pc, #568]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce4:	4a8d      	ldr	r2, [pc, #564]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ce6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cec:	e01a      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf2:	3308      	adds	r3, #8
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f001 fc3c 	bl	8007574 <RCCEx_PLL2_Config>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d02:	e00f      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d08:	3328      	adds	r3, #40	@ 0x28
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f001 fce3 	bl	80076d8 <RCCEx_PLL3_Config>
 8005d12:	4603      	mov	r3, r0
 8005d14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d18:	e004      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d20:	e000      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005d22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10a      	bne.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d2c:	4b7b      	ldr	r3, [pc, #492]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d30:	f023 0107 	bic.w	r1, r3, #7
 8005d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d3a:	4a78      	ldr	r2, [pc, #480]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d3c:	430b      	orrs	r3, r1
 8005d3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d40:	e003      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d52:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005d56:	f04f 0b00 	mov.w	fp, #0
 8005d5a:	ea5a 030b 	orrs.w	r3, sl, fp
 8005d5e:	d04c      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d6a:	d030      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005d6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d70:	d829      	bhi.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005d72:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d74:	d02d      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005d76:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d78:	d825      	bhi.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005d7a:	2b80      	cmp	r3, #128	@ 0x80
 8005d7c:	d018      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005d7e:	2b80      	cmp	r3, #128	@ 0x80
 8005d80:	d821      	bhi.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d002      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005d86:	2b40      	cmp	r3, #64	@ 0x40
 8005d88:	d007      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005d8a:	e01c      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d8c:	4b63      	ldr	r3, [pc, #396]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d90:	4a62      	ldr	r2, [pc, #392]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005d98:	e01c      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9e:	3308      	adds	r3, #8
 8005da0:	2100      	movs	r1, #0
 8005da2:	4618      	mov	r0, r3
 8005da4:	f001 fbe6 	bl	8007574 <RCCEx_PLL2_Config>
 8005da8:	4603      	mov	r3, r0
 8005daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005dae:	e011      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db4:	3328      	adds	r3, #40	@ 0x28
 8005db6:	2100      	movs	r1, #0
 8005db8:	4618      	mov	r0, r3
 8005dba:	f001 fc8d 	bl	80076d8 <RCCEx_PLL3_Config>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005dc4:	e006      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dcc:	e002      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005dce:	bf00      	nop
 8005dd0:	e000      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005dd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10a      	bne.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005ddc:	4b4f      	ldr	r3, [pc, #316]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005de0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dea:	4a4c      	ldr	r2, [pc, #304]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dec:	430b      	orrs	r3, r1
 8005dee:	6513      	str	r3, [r2, #80]	@ 0x50
 8005df0:	e003      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005df6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005e06:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005e10:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005e14:	460b      	mov	r3, r1
 8005e16:	4313      	orrs	r3, r2
 8005e18:	d053      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005e22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e26:	d035      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005e28:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e2c:	d82e      	bhi.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005e2e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005e32:	d031      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005e34:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005e38:	d828      	bhi.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005e3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e3e:	d01a      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005e40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e44:	d822      	bhi.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005e4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e4e:	d007      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005e50:	e01c      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e52:	4b32      	ldr	r3, [pc, #200]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e56:	4a31      	ldr	r2, [pc, #196]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e5e:	e01c      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e64:	3308      	adds	r3, #8
 8005e66:	2100      	movs	r1, #0
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f001 fb83 	bl	8007574 <RCCEx_PLL2_Config>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005e74:	e011      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e7a:	3328      	adds	r3, #40	@ 0x28
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f001 fc2a 	bl	80076d8 <RCCEx_PLL3_Config>
 8005e84:	4603      	mov	r3, r0
 8005e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e8a:	e006      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e92:	e002      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005e94:	bf00      	nop
 8005e96:	e000      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10b      	bne.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ea6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005eb2:	4a1a      	ldr	r2, [pc, #104]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005eb4:	430b      	orrs	r3, r1
 8005eb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005eb8:	e003      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ebe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005ece:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005ed8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005edc:	460b      	mov	r3, r1
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	d056      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005eea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005eee:	d038      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005ef0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ef4:	d831      	bhi.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ef6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005efa:	d034      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005efc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f00:	d82b      	bhi.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f06:	d01d      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005f08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f0c:	d825      	bhi.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d006      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005f12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f16:	d00a      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005f18:	e01f      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f1a:	bf00      	nop
 8005f1c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f20:	4ba2      	ldr	r3, [pc, #648]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f24:	4aa1      	ldr	r2, [pc, #644]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f2c:	e01c      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f32:	3308      	adds	r3, #8
 8005f34:	2100      	movs	r1, #0
 8005f36:	4618      	mov	r0, r3
 8005f38:	f001 fb1c 	bl	8007574 <RCCEx_PLL2_Config>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005f42:	e011      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f48:	3328      	adds	r3, #40	@ 0x28
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f001 fbc3 	bl	80076d8 <RCCEx_PLL3_Config>
 8005f52:	4603      	mov	r3, r0
 8005f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f58:	e006      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f60:	e002      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005f62:	bf00      	nop
 8005f64:	e000      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005f66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10b      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005f70:	4b8e      	ldr	r3, [pc, #568]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f74:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005f80:	4a8a      	ldr	r2, [pc, #552]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f82:	430b      	orrs	r3, r1
 8005f84:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f86:	e003      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f98:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005f9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005fa6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005faa:	460b      	mov	r3, r1
 8005fac:	4313      	orrs	r3, r2
 8005fae:	d03a      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fb6:	2b30      	cmp	r3, #48	@ 0x30
 8005fb8:	d01f      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005fba:	2b30      	cmp	r3, #48	@ 0x30
 8005fbc:	d819      	bhi.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	d00c      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005fc2:	2b20      	cmp	r3, #32
 8005fc4:	d815      	bhi.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d019      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005fca:	2b10      	cmp	r3, #16
 8005fcc:	d111      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fce:	4b77      	ldr	r3, [pc, #476]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd2:	4a76      	ldr	r2, [pc, #472]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005fda:	e011      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe0:	3308      	adds	r3, #8
 8005fe2:	2102      	movs	r1, #2
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f001 fac5 	bl	8007574 <RCCEx_PLL2_Config>
 8005fea:	4603      	mov	r3, r0
 8005fec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005ff0:	e006      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ff8:	e002      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005ffa:	bf00      	nop
 8005ffc:	e000      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005ffe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006000:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10a      	bne.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006008:	4b68      	ldr	r3, [pc, #416]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800600a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800600c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006016:	4a65      	ldr	r2, [pc, #404]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006018:	430b      	orrs	r3, r1
 800601a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800601c:	e003      	b.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800601e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006022:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006032:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006036:	2300      	movs	r3, #0
 8006038:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800603c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006040:	460b      	mov	r3, r1
 8006042:	4313      	orrs	r3, r2
 8006044:	d051      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800604a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800604c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006050:	d035      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006052:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006056:	d82e      	bhi.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006058:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800605c:	d031      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800605e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006062:	d828      	bhi.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006064:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006068:	d01a      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800606a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800606e:	d822      	bhi.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006074:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006078:	d007      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800607a:	e01c      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800607c:	4b4b      	ldr	r3, [pc, #300]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800607e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006080:	4a4a      	ldr	r2, [pc, #296]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006082:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006086:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006088:	e01c      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800608a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800608e:	3308      	adds	r3, #8
 8006090:	2100      	movs	r1, #0
 8006092:	4618      	mov	r0, r3
 8006094:	f001 fa6e 	bl	8007574 <RCCEx_PLL2_Config>
 8006098:	4603      	mov	r3, r0
 800609a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800609e:	e011      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a4:	3328      	adds	r3, #40	@ 0x28
 80060a6:	2100      	movs	r1, #0
 80060a8:	4618      	mov	r0, r3
 80060aa:	f001 fb15 	bl	80076d8 <RCCEx_PLL3_Config>
 80060ae:	4603      	mov	r3, r0
 80060b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060b4:	e006      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060bc:	e002      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80060be:	bf00      	nop
 80060c0:	e000      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80060c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10a      	bne.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80060cc:	4b37      	ldr	r3, [pc, #220]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80060d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060da:	4a34      	ldr	r2, [pc, #208]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060dc:	430b      	orrs	r3, r1
 80060de:	6513      	str	r3, [r2, #80]	@ 0x50
 80060e0:	e003      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80060ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80060f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060fa:	2300      	movs	r3, #0
 80060fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006100:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006104:	460b      	mov	r3, r1
 8006106:	4313      	orrs	r3, r2
 8006108:	d056      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800610a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800610e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006110:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006114:	d033      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006116:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800611a:	d82c      	bhi.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800611c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006120:	d02f      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006122:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006126:	d826      	bhi.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006128:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800612c:	d02b      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800612e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006132:	d820      	bhi.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006134:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006138:	d012      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800613a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800613e:	d81a      	bhi.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006140:	2b00      	cmp	r3, #0
 8006142:	d022      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006148:	d115      	bne.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800614a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800614e:	3308      	adds	r3, #8
 8006150:	2101      	movs	r1, #1
 8006152:	4618      	mov	r0, r3
 8006154:	f001 fa0e 	bl	8007574 <RCCEx_PLL2_Config>
 8006158:	4603      	mov	r3, r0
 800615a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800615e:	e015      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006164:	3328      	adds	r3, #40	@ 0x28
 8006166:	2101      	movs	r1, #1
 8006168:	4618      	mov	r0, r3
 800616a:	f001 fab5 	bl	80076d8 <RCCEx_PLL3_Config>
 800616e:	4603      	mov	r3, r0
 8006170:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006174:	e00a      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800617c:	e006      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800617e:	bf00      	nop
 8006180:	e004      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006182:	bf00      	nop
 8006184:	e002      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006186:	bf00      	nop
 8006188:	e000      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800618a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800618c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10d      	bne.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006194:	4b05      	ldr	r3, [pc, #20]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006198:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800619c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061a2:	4a02      	ldr	r2, [pc, #8]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061a4:	430b      	orrs	r3, r1
 80061a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80061a8:	e006      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80061aa:	bf00      	nop
 80061ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80061b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80061c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80061c8:	2300      	movs	r3, #0
 80061ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061ce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80061d2:	460b      	mov	r3, r1
 80061d4:	4313      	orrs	r3, r2
 80061d6:	d055      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80061d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80061e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061e4:	d033      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80061e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061ea:	d82c      	bhi.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80061ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061f0:	d02f      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80061f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061f6:	d826      	bhi.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80061f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061fc:	d02b      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80061fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006202:	d820      	bhi.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006204:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006208:	d012      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800620a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800620e:	d81a      	bhi.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006210:	2b00      	cmp	r3, #0
 8006212:	d022      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006214:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006218:	d115      	bne.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800621a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800621e:	3308      	adds	r3, #8
 8006220:	2101      	movs	r1, #1
 8006222:	4618      	mov	r0, r3
 8006224:	f001 f9a6 	bl	8007574 <RCCEx_PLL2_Config>
 8006228:	4603      	mov	r3, r0
 800622a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800622e:	e015      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006234:	3328      	adds	r3, #40	@ 0x28
 8006236:	2101      	movs	r1, #1
 8006238:	4618      	mov	r0, r3
 800623a:	f001 fa4d 	bl	80076d8 <RCCEx_PLL3_Config>
 800623e:	4603      	mov	r3, r0
 8006240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006244:	e00a      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800624c:	e006      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800624e:	bf00      	nop
 8006250:	e004      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006252:	bf00      	nop
 8006254:	e002      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006256:	bf00      	nop
 8006258:	e000      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800625a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800625c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10b      	bne.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006264:	4ba3      	ldr	r3, [pc, #652]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006268:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800626c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006270:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006274:	4a9f      	ldr	r2, [pc, #636]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006276:	430b      	orrs	r3, r1
 8006278:	6593      	str	r3, [r2, #88]	@ 0x58
 800627a:	e003      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006280:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006290:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006294:	2300      	movs	r3, #0
 8006296:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800629a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800629e:	460b      	mov	r3, r1
 80062a0:	4313      	orrs	r3, r2
 80062a2:	d037      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80062a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062ae:	d00e      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80062b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062b4:	d816      	bhi.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d018      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x708>
 80062ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062be:	d111      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062c0:	4b8c      	ldr	r3, [pc, #560]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c4:	4a8b      	ldr	r2, [pc, #556]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80062cc:	e00f      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d2:	3308      	adds	r3, #8
 80062d4:	2101      	movs	r1, #1
 80062d6:	4618      	mov	r0, r3
 80062d8:	f001 f94c 	bl	8007574 <RCCEx_PLL2_Config>
 80062dc:	4603      	mov	r3, r0
 80062de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80062e2:	e004      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062ea:	e000      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80062ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10a      	bne.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80062f6:	4b7f      	ldr	r3, [pc, #508]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062fa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80062fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006304:	4a7b      	ldr	r2, [pc, #492]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006306:	430b      	orrs	r3, r1
 8006308:	6513      	str	r3, [r2, #80]	@ 0x50
 800630a:	e003      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800630c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006310:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006320:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006324:	2300      	movs	r3, #0
 8006326:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800632a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800632e:	460b      	mov	r3, r1
 8006330:	4313      	orrs	r3, r2
 8006332:	d039      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800633a:	2b03      	cmp	r3, #3
 800633c:	d81c      	bhi.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800633e:	a201      	add	r2, pc, #4	@ (adr r2, 8006344 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006344:	08006381 	.word	0x08006381
 8006348:	08006355 	.word	0x08006355
 800634c:	08006363 	.word	0x08006363
 8006350:	08006381 	.word	0x08006381
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006354:	4b67      	ldr	r3, [pc, #412]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006358:	4a66      	ldr	r2, [pc, #408]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800635a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800635e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006360:	e00f      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006366:	3308      	adds	r3, #8
 8006368:	2102      	movs	r1, #2
 800636a:	4618      	mov	r0, r3
 800636c:	f001 f902 	bl	8007574 <RCCEx_PLL2_Config>
 8006370:	4603      	mov	r3, r0
 8006372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006376:	e004      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800637e:	e000      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006382:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10a      	bne.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800638a:	4b5a      	ldr	r3, [pc, #360]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800638c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800638e:	f023 0103 	bic.w	r1, r3, #3
 8006392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006398:	4a56      	ldr	r2, [pc, #344]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800639a:	430b      	orrs	r3, r1
 800639c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800639e:	e003      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80063b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063b8:	2300      	movs	r3, #0
 80063ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80063be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80063c2:	460b      	mov	r3, r1
 80063c4:	4313      	orrs	r3, r2
 80063c6:	f000 809f 	beq.w	8006508 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063ca:	4b4b      	ldr	r3, [pc, #300]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a4a      	ldr	r2, [pc, #296]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80063d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063d6:	f7fc fc6d 	bl	8002cb4 <HAL_GetTick>
 80063da:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063de:	e00b      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063e0:	f7fc fc68 	bl	8002cb4 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	2b64      	cmp	r3, #100	@ 0x64
 80063ee:	d903      	bls.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063f6:	e005      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063f8:	4b3f      	ldr	r3, [pc, #252]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0ed      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006404:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006408:	2b00      	cmp	r3, #0
 800640a:	d179      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800640c:	4b39      	ldr	r3, [pc, #228]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800640e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006414:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006418:	4053      	eors	r3, r2
 800641a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800641e:	2b00      	cmp	r3, #0
 8006420:	d015      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006422:	4b34      	ldr	r3, [pc, #208]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006426:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800642a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800642e:	4b31      	ldr	r3, [pc, #196]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006432:	4a30      	ldr	r2, [pc, #192]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006438:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800643a:	4b2e      	ldr	r3, [pc, #184]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800643c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800643e:	4a2d      	ldr	r2, [pc, #180]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006440:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006444:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006446:	4a2b      	ldr	r2, [pc, #172]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006448:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800644c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800644e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006452:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800645a:	d118      	bne.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800645c:	f7fc fc2a 	bl	8002cb4 <HAL_GetTick>
 8006460:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006464:	e00d      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006466:	f7fc fc25 	bl	8002cb4 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006470:	1ad2      	subs	r2, r2, r3
 8006472:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006476:	429a      	cmp	r2, r3
 8006478:	d903      	bls.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006480:	e005      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006482:	4b1c      	ldr	r3, [pc, #112]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d0eb      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800648e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006492:	2b00      	cmp	r3, #0
 8006494:	d129      	bne.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800649a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800649e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064a6:	d10e      	bne.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80064a8:	4b12      	ldr	r3, [pc, #72]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80064b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80064b8:	091a      	lsrs	r2, r3, #4
 80064ba:	4b10      	ldr	r3, [pc, #64]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80064bc:	4013      	ands	r3, r2
 80064be:	4a0d      	ldr	r2, [pc, #52]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064c0:	430b      	orrs	r3, r1
 80064c2:	6113      	str	r3, [r2, #16]
 80064c4:	e005      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80064c6:	4b0b      	ldr	r3, [pc, #44]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	4a0a      	ldr	r2, [pc, #40]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80064d0:	6113      	str	r3, [r2, #16]
 80064d2:	4b08      	ldr	r3, [pc, #32]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064d4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80064d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80064de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064e2:	4a04      	ldr	r2, [pc, #16]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064e4:	430b      	orrs	r3, r1
 80064e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80064e8:	e00e      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80064f2:	e009      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80064f4:	58024400 	.word	0x58024400
 80064f8:	58024800 	.word	0x58024800
 80064fc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006500:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006504:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800650c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006510:	f002 0301 	and.w	r3, r2, #1
 8006514:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006518:	2300      	movs	r3, #0
 800651a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800651e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006522:	460b      	mov	r3, r1
 8006524:	4313      	orrs	r3, r2
 8006526:	f000 8089 	beq.w	800663c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800652a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800652e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006530:	2b28      	cmp	r3, #40	@ 0x28
 8006532:	d86b      	bhi.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006534:	a201      	add	r2, pc, #4	@ (adr r2, 800653c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653a:	bf00      	nop
 800653c:	08006615 	.word	0x08006615
 8006540:	0800660d 	.word	0x0800660d
 8006544:	0800660d 	.word	0x0800660d
 8006548:	0800660d 	.word	0x0800660d
 800654c:	0800660d 	.word	0x0800660d
 8006550:	0800660d 	.word	0x0800660d
 8006554:	0800660d 	.word	0x0800660d
 8006558:	0800660d 	.word	0x0800660d
 800655c:	080065e1 	.word	0x080065e1
 8006560:	0800660d 	.word	0x0800660d
 8006564:	0800660d 	.word	0x0800660d
 8006568:	0800660d 	.word	0x0800660d
 800656c:	0800660d 	.word	0x0800660d
 8006570:	0800660d 	.word	0x0800660d
 8006574:	0800660d 	.word	0x0800660d
 8006578:	0800660d 	.word	0x0800660d
 800657c:	080065f7 	.word	0x080065f7
 8006580:	0800660d 	.word	0x0800660d
 8006584:	0800660d 	.word	0x0800660d
 8006588:	0800660d 	.word	0x0800660d
 800658c:	0800660d 	.word	0x0800660d
 8006590:	0800660d 	.word	0x0800660d
 8006594:	0800660d 	.word	0x0800660d
 8006598:	0800660d 	.word	0x0800660d
 800659c:	08006615 	.word	0x08006615
 80065a0:	0800660d 	.word	0x0800660d
 80065a4:	0800660d 	.word	0x0800660d
 80065a8:	0800660d 	.word	0x0800660d
 80065ac:	0800660d 	.word	0x0800660d
 80065b0:	0800660d 	.word	0x0800660d
 80065b4:	0800660d 	.word	0x0800660d
 80065b8:	0800660d 	.word	0x0800660d
 80065bc:	08006615 	.word	0x08006615
 80065c0:	0800660d 	.word	0x0800660d
 80065c4:	0800660d 	.word	0x0800660d
 80065c8:	0800660d 	.word	0x0800660d
 80065cc:	0800660d 	.word	0x0800660d
 80065d0:	0800660d 	.word	0x0800660d
 80065d4:	0800660d 	.word	0x0800660d
 80065d8:	0800660d 	.word	0x0800660d
 80065dc:	08006615 	.word	0x08006615
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e4:	3308      	adds	r3, #8
 80065e6:	2101      	movs	r1, #1
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 ffc3 	bl	8007574 <RCCEx_PLL2_Config>
 80065ee:	4603      	mov	r3, r0
 80065f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80065f4:	e00f      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fa:	3328      	adds	r3, #40	@ 0x28
 80065fc:	2101      	movs	r1, #1
 80065fe:	4618      	mov	r0, r3
 8006600:	f001 f86a 	bl	80076d8 <RCCEx_PLL3_Config>
 8006604:	4603      	mov	r3, r0
 8006606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800660a:	e004      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006612:	e000      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10a      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800661e:	4bbf      	ldr	r3, [pc, #764]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006622:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800662a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800662c:	4abb      	ldr	r2, [pc, #748]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800662e:	430b      	orrs	r3, r1
 8006630:	6553      	str	r3, [r2, #84]	@ 0x54
 8006632:	e003      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006634:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006638:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800663c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006644:	f002 0302 	and.w	r3, r2, #2
 8006648:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800664c:	2300      	movs	r3, #0
 800664e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006652:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006656:	460b      	mov	r3, r1
 8006658:	4313      	orrs	r3, r2
 800665a:	d041      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800665c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006660:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006662:	2b05      	cmp	r3, #5
 8006664:	d824      	bhi.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006666:	a201      	add	r2, pc, #4	@ (adr r2, 800666c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666c:	080066b9 	.word	0x080066b9
 8006670:	08006685 	.word	0x08006685
 8006674:	0800669b 	.word	0x0800669b
 8006678:	080066b9 	.word	0x080066b9
 800667c:	080066b9 	.word	0x080066b9
 8006680:	080066b9 	.word	0x080066b9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006688:	3308      	adds	r3, #8
 800668a:	2101      	movs	r1, #1
 800668c:	4618      	mov	r0, r3
 800668e:	f000 ff71 	bl	8007574 <RCCEx_PLL2_Config>
 8006692:	4603      	mov	r3, r0
 8006694:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006698:	e00f      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800669a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800669e:	3328      	adds	r3, #40	@ 0x28
 80066a0:	2101      	movs	r1, #1
 80066a2:	4618      	mov	r0, r3
 80066a4:	f001 f818 	bl	80076d8 <RCCEx_PLL3_Config>
 80066a8:	4603      	mov	r3, r0
 80066aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80066ae:	e004      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066b6:	e000      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80066b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10a      	bne.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80066c2:	4b96      	ldr	r3, [pc, #600]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066c6:	f023 0107 	bic.w	r1, r3, #7
 80066ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066d0:	4a92      	ldr	r2, [pc, #584]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066d2:	430b      	orrs	r3, r1
 80066d4:	6553      	str	r3, [r2, #84]	@ 0x54
 80066d6:	e003      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e8:	f002 0304 	and.w	r3, r2, #4
 80066ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066f0:	2300      	movs	r3, #0
 80066f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066f6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80066fa:	460b      	mov	r3, r1
 80066fc:	4313      	orrs	r3, r2
 80066fe:	d044      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006704:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006708:	2b05      	cmp	r3, #5
 800670a:	d825      	bhi.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800670c:	a201      	add	r2, pc, #4	@ (adr r2, 8006714 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800670e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006712:	bf00      	nop
 8006714:	08006761 	.word	0x08006761
 8006718:	0800672d 	.word	0x0800672d
 800671c:	08006743 	.word	0x08006743
 8006720:	08006761 	.word	0x08006761
 8006724:	08006761 	.word	0x08006761
 8006728:	08006761 	.word	0x08006761
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800672c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006730:	3308      	adds	r3, #8
 8006732:	2101      	movs	r1, #1
 8006734:	4618      	mov	r0, r3
 8006736:	f000 ff1d 	bl	8007574 <RCCEx_PLL2_Config>
 800673a:	4603      	mov	r3, r0
 800673c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006740:	e00f      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006746:	3328      	adds	r3, #40	@ 0x28
 8006748:	2101      	movs	r1, #1
 800674a:	4618      	mov	r0, r3
 800674c:	f000 ffc4 	bl	80076d8 <RCCEx_PLL3_Config>
 8006750:	4603      	mov	r3, r0
 8006752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006756:	e004      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800675e:	e000      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10b      	bne.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800676a:	4b6c      	ldr	r3, [pc, #432]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800676c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800676e:	f023 0107 	bic.w	r1, r3, #7
 8006772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006776:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800677a:	4a68      	ldr	r2, [pc, #416]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800677c:	430b      	orrs	r3, r1
 800677e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006780:	e003      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006786:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800678a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800678e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006792:	f002 0320 	and.w	r3, r2, #32
 8006796:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800679a:	2300      	movs	r3, #0
 800679c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80067a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80067a4:	460b      	mov	r3, r1
 80067a6:	4313      	orrs	r3, r2
 80067a8:	d055      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80067aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067b6:	d033      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80067b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067bc:	d82c      	bhi.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80067be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067c2:	d02f      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80067c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067c8:	d826      	bhi.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80067ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067ce:	d02b      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80067d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067d4:	d820      	bhi.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80067d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067da:	d012      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80067dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067e0:	d81a      	bhi.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d022      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80067e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067ea:	d115      	bne.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f0:	3308      	adds	r3, #8
 80067f2:	2100      	movs	r1, #0
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 febd 	bl	8007574 <RCCEx_PLL2_Config>
 80067fa:	4603      	mov	r3, r0
 80067fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006800:	e015      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006806:	3328      	adds	r3, #40	@ 0x28
 8006808:	2102      	movs	r1, #2
 800680a:	4618      	mov	r0, r3
 800680c:	f000 ff64 	bl	80076d8 <RCCEx_PLL3_Config>
 8006810:	4603      	mov	r3, r0
 8006812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006816:	e00a      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800681e:	e006      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006820:	bf00      	nop
 8006822:	e004      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006824:	bf00      	nop
 8006826:	e002      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006828:	bf00      	nop
 800682a:	e000      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800682c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800682e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10b      	bne.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006836:	4b39      	ldr	r3, [pc, #228]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800683a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800683e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006846:	4a35      	ldr	r2, [pc, #212]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006848:	430b      	orrs	r3, r1
 800684a:	6553      	str	r3, [r2, #84]	@ 0x54
 800684c:	e003      	b.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800684e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006852:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800685a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006862:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006866:	2300      	movs	r3, #0
 8006868:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800686c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006870:	460b      	mov	r3, r1
 8006872:	4313      	orrs	r3, r2
 8006874:	d058      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800687e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006882:	d033      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006884:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006888:	d82c      	bhi.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800688a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800688e:	d02f      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006894:	d826      	bhi.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006896:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800689a:	d02b      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800689c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068a0:	d820      	bhi.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80068a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068a6:	d012      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80068a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068ac:	d81a      	bhi.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d022      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80068b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068b6:	d115      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068bc:	3308      	adds	r3, #8
 80068be:	2100      	movs	r1, #0
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 fe57 	bl	8007574 <RCCEx_PLL2_Config>
 80068c6:	4603      	mov	r3, r0
 80068c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80068cc:	e015      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d2:	3328      	adds	r3, #40	@ 0x28
 80068d4:	2102      	movs	r1, #2
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 fefe 	bl	80076d8 <RCCEx_PLL3_Config>
 80068dc:	4603      	mov	r3, r0
 80068de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80068e2:	e00a      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068ea:	e006      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80068ec:	bf00      	nop
 80068ee:	e004      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80068f0:	bf00      	nop
 80068f2:	e002      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80068f4:	bf00      	nop
 80068f6:	e000      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80068f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10e      	bne.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006902:	4b06      	ldr	r3, [pc, #24]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006906:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800690a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800690e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006912:	4a02      	ldr	r2, [pc, #8]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006914:	430b      	orrs	r3, r1
 8006916:	6593      	str	r3, [r2, #88]	@ 0x58
 8006918:	e006      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800691a:	bf00      	nop
 800691c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006920:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006924:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006930:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006934:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006938:	2300      	movs	r3, #0
 800693a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800693e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006942:	460b      	mov	r3, r1
 8006944:	4313      	orrs	r3, r2
 8006946:	d055      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800694c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006950:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006954:	d033      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006956:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800695a:	d82c      	bhi.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800695c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006960:	d02f      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006962:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006966:	d826      	bhi.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006968:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800696c:	d02b      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800696e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006972:	d820      	bhi.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006974:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006978:	d012      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800697a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800697e:	d81a      	bhi.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006980:	2b00      	cmp	r3, #0
 8006982:	d022      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006984:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006988:	d115      	bne.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800698a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800698e:	3308      	adds	r3, #8
 8006990:	2100      	movs	r1, #0
 8006992:	4618      	mov	r0, r3
 8006994:	f000 fdee 	bl	8007574 <RCCEx_PLL2_Config>
 8006998:	4603      	mov	r3, r0
 800699a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800699e:	e015      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a4:	3328      	adds	r3, #40	@ 0x28
 80069a6:	2102      	movs	r1, #2
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 fe95 	bl	80076d8 <RCCEx_PLL3_Config>
 80069ae:	4603      	mov	r3, r0
 80069b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80069b4:	e00a      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069bc:	e006      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80069be:	bf00      	nop
 80069c0:	e004      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80069c2:	bf00      	nop
 80069c4:	e002      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80069c6:	bf00      	nop
 80069c8:	e000      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80069ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10b      	bne.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80069d4:	4ba1      	ldr	r3, [pc, #644]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069d8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80069dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80069e4:	4a9d      	ldr	r2, [pc, #628]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069e6:	430b      	orrs	r3, r1
 80069e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80069ea:	e003      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80069f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fc:	f002 0308 	and.w	r3, r2, #8
 8006a00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a04:	2300      	movs	r3, #0
 8006a06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a0a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006a0e:	460b      	mov	r3, r1
 8006a10:	4313      	orrs	r3, r2
 8006a12:	d01e      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a20:	d10c      	bne.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a26:	3328      	adds	r3, #40	@ 0x28
 8006a28:	2102      	movs	r1, #2
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 fe54 	bl	80076d8 <RCCEx_PLL3_Config>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d002      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006a3c:	4b87      	ldr	r3, [pc, #540]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a40:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a4c:	4a83      	ldr	r2, [pc, #524]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a4e:	430b      	orrs	r3, r1
 8006a50:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5a:	f002 0310 	and.w	r3, r2, #16
 8006a5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a62:	2300      	movs	r3, #0
 8006a64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006a68:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	d01e      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a7e:	d10c      	bne.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a84:	3328      	adds	r3, #40	@ 0x28
 8006a86:	2102      	movs	r1, #2
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 fe25 	bl	80076d8 <RCCEx_PLL3_Config>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a9a:	4b70      	ldr	r3, [pc, #448]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a9e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006aaa:	4a6c      	ldr	r2, [pc, #432]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006aac:	430b      	orrs	r3, r1
 8006aae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006abc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ac6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006aca:	460b      	mov	r3, r1
 8006acc:	4313      	orrs	r3, r2
 8006ace:	d03e      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006ad8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006adc:	d022      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006ade:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ae2:	d81b      	bhi.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d003      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006aec:	d00b      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006aee:	e015      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af4:	3308      	adds	r3, #8
 8006af6:	2100      	movs	r1, #0
 8006af8:	4618      	mov	r0, r3
 8006afa:	f000 fd3b 	bl	8007574 <RCCEx_PLL2_Config>
 8006afe:	4603      	mov	r3, r0
 8006b00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b04:	e00f      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b0a:	3328      	adds	r3, #40	@ 0x28
 8006b0c:	2102      	movs	r1, #2
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 fde2 	bl	80076d8 <RCCEx_PLL3_Config>
 8006b14:	4603      	mov	r3, r0
 8006b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b1a:	e004      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b22:	e000      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10b      	bne.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b2e:	4b4b      	ldr	r3, [pc, #300]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b32:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006b3e:	4a47      	ldr	r2, [pc, #284]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b40:	430b      	orrs	r3, r1
 8006b42:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b44:	e003      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b56:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006b5a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b60:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006b64:	460b      	mov	r3, r1
 8006b66:	4313      	orrs	r3, r2
 8006b68:	d03b      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b72:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b76:	d01f      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006b78:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b7c:	d818      	bhi.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006b7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b82:	d003      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006b84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b88:	d007      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006b8a:	e011      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b8c:	4b33      	ldr	r3, [pc, #204]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b90:	4a32      	ldr	r2, [pc, #200]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006b98:	e00f      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b9e:	3328      	adds	r3, #40	@ 0x28
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fd98 	bl	80076d8 <RCCEx_PLL3_Config>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006bae:	e004      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bb6:	e000      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006bb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10b      	bne.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bc2:	4b26      	ldr	r3, [pc, #152]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bc6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd2:	4a22      	ldr	r2, [pc, #136]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bd4:	430b      	orrs	r3, r1
 8006bd6:	6553      	str	r3, [r2, #84]	@ 0x54
 8006bd8:	e003      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bea:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006bee:	673b      	str	r3, [r7, #112]	@ 0x70
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	677b      	str	r3, [r7, #116]	@ 0x74
 8006bf4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	d034      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c0c:	d007      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006c0e:	e011      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c10:	4b12      	ldr	r3, [pc, #72]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c14:	4a11      	ldr	r2, [pc, #68]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c1c:	e00e      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c22:	3308      	adds	r3, #8
 8006c24:	2102      	movs	r1, #2
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 fca4 	bl	8007574 <RCCEx_PLL2_Config>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c32:	e003      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10d      	bne.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006c44:	4b05      	ldr	r3, [pc, #20]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c48:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c52:	4a02      	ldr	r2, [pc, #8]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c54:	430b      	orrs	r3, r1
 8006c56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006c58:	e006      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006c5a:	bf00      	nop
 8006c5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c70:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006c74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c76:	2300      	movs	r3, #0
 8006c78:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c7a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006c7e:	460b      	mov	r3, r1
 8006c80:	4313      	orrs	r3, r2
 8006c82:	d00c      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c88:	3328      	adds	r3, #40	@ 0x28
 8006c8a:	2102      	movs	r1, #2
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 fd23 	bl	80076d8 <RCCEx_PLL3_Config>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d002      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006caa:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cac:	2300      	movs	r3, #0
 8006cae:	667b      	str	r3, [r7, #100]	@ 0x64
 8006cb0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	d038      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cc6:	d018      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006cc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ccc:	d811      	bhi.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006cce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cd2:	d014      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006cd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cd8:	d80b      	bhi.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d011      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006cde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ce2:	d106      	bne.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ce4:	4bc3      	ldr	r3, [pc, #780]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce8:	4ac2      	ldr	r2, [pc, #776]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006cf0:	e008      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cf8:	e004      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006cfa:	bf00      	nop
 8006cfc:	e002      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006cfe:	bf00      	nop
 8006d00:	e000      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10b      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d0c:	4bb9      	ldr	r3, [pc, #740]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d10:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d1c:	4ab5      	ldr	r2, [pc, #724]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d1e:	430b      	orrs	r3, r1
 8006d20:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d22:	e003      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d34:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006d38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d3e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006d42:	460b      	mov	r3, r1
 8006d44:	4313      	orrs	r3, r2
 8006d46:	d009      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d48:	4baa      	ldr	r3, [pc, #680]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d4c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d56:	4aa7      	ldr	r2, [pc, #668]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d58:	430b      	orrs	r3, r1
 8006d5a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d64:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006d68:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d6e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006d72:	460b      	mov	r3, r1
 8006d74:	4313      	orrs	r3, r2
 8006d76:	d00a      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006d78:	4b9e      	ldr	r3, [pc, #632]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006d88:	4a9a      	ldr	r2, [pc, #616]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d8a:	430b      	orrs	r3, r1
 8006d8c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d96:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006da0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006da4:	460b      	mov	r3, r1
 8006da6:	4313      	orrs	r3, r2
 8006da8:	d009      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006daa:	4b92      	ldr	r3, [pc, #584]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dae:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006db8:	4a8e      	ldr	r2, [pc, #568]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dba:	430b      	orrs	r3, r1
 8006dbc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006dca:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dcc:	2300      	movs	r3, #0
 8006dce:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dd0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	d00e      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006dda:	4b86      	ldr	r3, [pc, #536]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	4a85      	ldr	r2, [pc, #532]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006de0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006de4:	6113      	str	r3, [r2, #16]
 8006de6:	4b83      	ldr	r3, [pc, #524]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006de8:	6919      	ldr	r1, [r3, #16]
 8006dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006df2:	4a80      	ldr	r2, [pc, #512]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006df4:	430b      	orrs	r3, r1
 8006df6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006e04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e06:	2300      	movs	r3, #0
 8006e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e0a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4313      	orrs	r3, r2
 8006e12:	d009      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006e14:	4b77      	ldr	r3, [pc, #476]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e18:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e22:	4a74      	ldr	r2, [pc, #464]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e24:	430b      	orrs	r3, r1
 8006e26:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e30:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006e34:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e36:	2300      	movs	r3, #0
 8006e38:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e3a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4313      	orrs	r3, r2
 8006e42:	d00a      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e44:	4b6b      	ldr	r3, [pc, #428]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e48:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e54:	4a67      	ldr	r2, [pc, #412]	@ (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e56:	430b      	orrs	r3, r1
 8006e58:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	2100      	movs	r1, #0
 8006e64:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006e66:	f003 0301 	and.w	r3, r3, #1
 8006e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e6c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006e70:	460b      	mov	r3, r1
 8006e72:	4313      	orrs	r3, r2
 8006e74:	d011      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e7a:	3308      	adds	r3, #8
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 fb78 	bl	8007574 <RCCEx_PLL2_Config>
 8006e84:	4603      	mov	r3, r0
 8006e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	6239      	str	r1, [r7, #32]
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	d011      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eba:	3308      	adds	r3, #8
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fb58 	bl	8007574 <RCCEx_PLL2_Config>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d003      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ed6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	61b9      	str	r1, [r7, #24]
 8006ee6:	f003 0304 	and.w	r3, r3, #4
 8006eea:	61fb      	str	r3, [r7, #28]
 8006eec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	d011      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006efa:	3308      	adds	r3, #8
 8006efc:	2102      	movs	r1, #2
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fb38 	bl	8007574 <RCCEx_PLL2_Config>
 8006f04:	4603      	mov	r3, r0
 8006f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f22:	2100      	movs	r1, #0
 8006f24:	6139      	str	r1, [r7, #16]
 8006f26:	f003 0308 	and.w	r3, r3, #8
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006f30:	460b      	mov	r3, r1
 8006f32:	4313      	orrs	r3, r2
 8006f34:	d011      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f3a:	3328      	adds	r3, #40	@ 0x28
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 fbca 	bl	80076d8 <RCCEx_PLL3_Config>
 8006f44:	4603      	mov	r3, r0
 8006f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f62:	2100      	movs	r1, #0
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	f003 0310 	and.w	r3, r3, #16
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006f70:	460b      	mov	r3, r1
 8006f72:	4313      	orrs	r3, r2
 8006f74:	d011      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f7a:	3328      	adds	r3, #40	@ 0x28
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 fbaa 	bl	80076d8 <RCCEx_PLL3_Config>
 8006f84:	4603      	mov	r3, r0
 8006f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	6039      	str	r1, [r7, #0]
 8006fa6:	f003 0320 	and.w	r3, r3, #32
 8006faa:	607b      	str	r3, [r7, #4]
 8006fac:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	d011      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fba:	3328      	adds	r3, #40	@ 0x28
 8006fbc:	2102      	movs	r1, #2
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 fb8a 	bl	80076d8 <RCCEx_PLL3_Config>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006fda:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	e000      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ff4:	58024400 	.word	0x58024400

08006ff8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006ffc:	f7fe fd96 	bl	8005b2c <HAL_RCC_GetHCLKFreq>
 8007000:	4602      	mov	r2, r0
 8007002:	4b06      	ldr	r3, [pc, #24]	@ (800701c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	091b      	lsrs	r3, r3, #4
 8007008:	f003 0307 	and.w	r3, r3, #7
 800700c:	4904      	ldr	r1, [pc, #16]	@ (8007020 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800700e:	5ccb      	ldrb	r3, [r1, r3]
 8007010:	f003 031f 	and.w	r3, r3, #31
 8007014:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007018:	4618      	mov	r0, r3
 800701a:	bd80      	pop	{r7, pc}
 800701c:	58024400 	.word	0x58024400
 8007020:	0800a378 	.word	0x0800a378

08007024 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007024:	b480      	push	{r7}
 8007026:	b089      	sub	sp, #36	@ 0x24
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800702c:	4ba1      	ldr	r3, [pc, #644]	@ (80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800702e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007030:	f003 0303 	and.w	r3, r3, #3
 8007034:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007036:	4b9f      	ldr	r3, [pc, #636]	@ (80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703a:	0b1b      	lsrs	r3, r3, #12
 800703c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007040:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007042:	4b9c      	ldr	r3, [pc, #624]	@ (80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007046:	091b      	lsrs	r3, r3, #4
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800704e:	4b99      	ldr	r3, [pc, #612]	@ (80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007052:	08db      	lsrs	r3, r3, #3
 8007054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	fb02 f303 	mul.w	r3, r2, r3
 800705e:	ee07 3a90 	vmov	s15, r3
 8007062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007066:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 8111 	beq.w	8007294 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	2b02      	cmp	r3, #2
 8007076:	f000 8083 	beq.w	8007180 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	2b02      	cmp	r3, #2
 800707e:	f200 80a1 	bhi.w	80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d003      	beq.n	8007090 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d056      	beq.n	800713c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800708e:	e099      	b.n	80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007090:	4b88      	ldr	r3, [pc, #544]	@ (80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0320 	and.w	r3, r3, #32
 8007098:	2b00      	cmp	r3, #0
 800709a:	d02d      	beq.n	80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800709c:	4b85      	ldr	r3, [pc, #532]	@ (80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	08db      	lsrs	r3, r3, #3
 80070a2:	f003 0303 	and.w	r3, r3, #3
 80070a6:	4a84      	ldr	r2, [pc, #528]	@ (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80070a8:	fa22 f303 	lsr.w	r3, r2, r3
 80070ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	ee07 3a90 	vmov	s15, r3
 80070b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070c6:	4b7b      	ldr	r3, [pc, #492]	@ (80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070da:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80072bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80070f6:	e087      	b.n	8007208 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007102:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80072c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710a:	4b6a      	ldr	r3, [pc, #424]	@ (80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800710c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800710e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711a:	ed97 6a03 	vldr	s12, [r7, #12]
 800711e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80072bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800712e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007136:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800713a:	e065      	b.n	8007208 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007146:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80072c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800714a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800714e:	4b59      	ldr	r3, [pc, #356]	@ (80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800715e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007162:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80072bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800716a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800716e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800717e:	e043      	b.n	8007208 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80072c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800718e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007192:	4b48      	ldr	r3, [pc, #288]	@ (80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071a6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80072bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071c2:	e021      	b.n	8007208 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80072c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071d6:	4b37      	ldr	r3, [pc, #220]	@ (80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071de:	ee07 3a90 	vmov	s15, r3
 80071e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80072bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007206:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007208:	4b2a      	ldr	r3, [pc, #168]	@ (80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800720a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800720c:	0a5b      	lsrs	r3, r3, #9
 800720e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800721e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007222:	edd7 6a07 	vldr	s13, [r7, #28]
 8007226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800722a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800722e:	ee17 2a90 	vmov	r2, s15
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007236:	4b1f      	ldr	r3, [pc, #124]	@ (80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800723a:	0c1b      	lsrs	r3, r3, #16
 800723c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007240:	ee07 3a90 	vmov	s15, r3
 8007244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007248:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800724c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007250:	edd7 6a07 	vldr	s13, [r7, #28]
 8007254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800725c:	ee17 2a90 	vmov	r2, s15
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007264:	4b13      	ldr	r3, [pc, #76]	@ (80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007268:	0e1b      	lsrs	r3, r3, #24
 800726a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007276:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800727a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800727e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800728a:	ee17 2a90 	vmov	r2, s15
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007292:	e008      	b.n	80072a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	609a      	str	r2, [r3, #8]
}
 80072a6:	bf00      	nop
 80072a8:	3724      	adds	r7, #36	@ 0x24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	58024400 	.word	0x58024400
 80072b8:	03d09000 	.word	0x03d09000
 80072bc:	46000000 	.word	0x46000000
 80072c0:	4c742400 	.word	0x4c742400
 80072c4:	4a742400 	.word	0x4a742400
 80072c8:	4bb71b00 	.word	0x4bb71b00

080072cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b089      	sub	sp, #36	@ 0x24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072d4:	4ba1      	ldr	r3, [pc, #644]	@ (800755c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d8:	f003 0303 	and.w	r3, r3, #3
 80072dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80072de:	4b9f      	ldr	r3, [pc, #636]	@ (800755c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e2:	0d1b      	lsrs	r3, r3, #20
 80072e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80072ea:	4b9c      	ldr	r3, [pc, #624]	@ (800755c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ee:	0a1b      	lsrs	r3, r3, #8
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80072f6:	4b99      	ldr	r3, [pc, #612]	@ (800755c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072fa:	08db      	lsrs	r3, r3, #3
 80072fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	fb02 f303 	mul.w	r3, r2, r3
 8007306:	ee07 3a90 	vmov	s15, r3
 800730a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800730e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 8111 	beq.w	800753c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	2b02      	cmp	r3, #2
 800731e:	f000 8083 	beq.w	8007428 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	2b02      	cmp	r3, #2
 8007326:	f200 80a1 	bhi.w	800746c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d003      	beq.n	8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d056      	beq.n	80073e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007336:	e099      	b.n	800746c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007338:	4b88      	ldr	r3, [pc, #544]	@ (800755c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0320 	and.w	r3, r3, #32
 8007340:	2b00      	cmp	r3, #0
 8007342:	d02d      	beq.n	80073a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007344:	4b85      	ldr	r3, [pc, #532]	@ (800755c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	08db      	lsrs	r3, r3, #3
 800734a:	f003 0303 	and.w	r3, r3, #3
 800734e:	4a84      	ldr	r2, [pc, #528]	@ (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007350:	fa22 f303 	lsr.w	r3, r2, r3
 8007354:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	ee07 3a90 	vmov	s15, r3
 800735c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	ee07 3a90 	vmov	s15, r3
 8007366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800736e:	4b7b      	ldr	r3, [pc, #492]	@ (800755c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007376:	ee07 3a90 	vmov	s15, r3
 800737a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800737e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007382:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800738a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800738e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800739a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800739e:	e087      	b.n	80074b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	ee07 3a90 	vmov	s15, r3
 80073a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073aa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007568 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80073ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073b2:	4b6a      	ldr	r3, [pc, #424]	@ (800755c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ba:	ee07 3a90 	vmov	s15, r3
 80073be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073c6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073e2:	e065      	b.n	80074b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	ee07 3a90 	vmov	s15, r3
 80073ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800756c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073f6:	4b59      	ldr	r3, [pc, #356]	@ (800755c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073fe:	ee07 3a90 	vmov	s15, r3
 8007402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007406:	ed97 6a03 	vldr	s12, [r7, #12]
 800740a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800740e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800741a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800741e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007422:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007426:	e043      	b.n	80074b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	ee07 3a90 	vmov	s15, r3
 800742e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007432:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007570 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800743a:	4b48      	ldr	r3, [pc, #288]	@ (800755c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800743c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800743e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007442:	ee07 3a90 	vmov	s15, r3
 8007446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800744a:	ed97 6a03 	vldr	s12, [r7, #12]
 800744e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800745a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800745e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007466:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800746a:	e021      	b.n	80074b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	ee07 3a90 	vmov	s15, r3
 8007472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007476:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800756c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800747a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800747e:	4b37      	ldr	r3, [pc, #220]	@ (800755c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007486:	ee07 3a90 	vmov	s15, r3
 800748a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800748e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007492:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800749a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800749e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80074b0:	4b2a      	ldr	r3, [pc, #168]	@ (800755c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b4:	0a5b      	lsrs	r3, r3, #9
 80074b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074ba:	ee07 3a90 	vmov	s15, r3
 80074be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80074ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074d6:	ee17 2a90 	vmov	r2, s15
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80074de:	4b1f      	ldr	r3, [pc, #124]	@ (800755c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e2:	0c1b      	lsrs	r3, r3, #16
 80074e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074e8:	ee07 3a90 	vmov	s15, r3
 80074ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80074fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007504:	ee17 2a90 	vmov	r2, s15
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800750c:	4b13      	ldr	r3, [pc, #76]	@ (800755c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800750e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007510:	0e1b      	lsrs	r3, r3, #24
 8007512:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007516:	ee07 3a90 	vmov	s15, r3
 800751a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800751e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007522:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007526:	edd7 6a07 	vldr	s13, [r7, #28]
 800752a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800752e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007532:	ee17 2a90 	vmov	r2, s15
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800753a:	e008      	b.n	800754e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	609a      	str	r2, [r3, #8]
}
 800754e:	bf00      	nop
 8007550:	3724      	adds	r7, #36	@ 0x24
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	58024400 	.word	0x58024400
 8007560:	03d09000 	.word	0x03d09000
 8007564:	46000000 	.word	0x46000000
 8007568:	4c742400 	.word	0x4c742400
 800756c:	4a742400 	.word	0x4a742400
 8007570:	4bb71b00 	.word	0x4bb71b00

08007574 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007582:	4b53      	ldr	r3, [pc, #332]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 8007584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007586:	f003 0303 	and.w	r3, r3, #3
 800758a:	2b03      	cmp	r3, #3
 800758c:	d101      	bne.n	8007592 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e099      	b.n	80076c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007592:	4b4f      	ldr	r3, [pc, #316]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a4e      	ldr	r2, [pc, #312]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 8007598:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800759c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800759e:	f7fb fb89 	bl	8002cb4 <HAL_GetTick>
 80075a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075a4:	e008      	b.n	80075b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80075a6:	f7fb fb85 	bl	8002cb4 <HAL_GetTick>
 80075aa:	4602      	mov	r2, r0
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d901      	bls.n	80075b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e086      	b.n	80076c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075b8:	4b45      	ldr	r3, [pc, #276]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1f0      	bne.n	80075a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80075c4:	4b42      	ldr	r3, [pc, #264]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 80075c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	031b      	lsls	r3, r3, #12
 80075d2:	493f      	ldr	r1, [pc, #252]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	3b01      	subs	r3, #1
 80075de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	3b01      	subs	r3, #1
 80075e8:	025b      	lsls	r3, r3, #9
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	431a      	orrs	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	041b      	lsls	r3, r3, #16
 80075f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80075fa:	431a      	orrs	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	3b01      	subs	r3, #1
 8007602:	061b      	lsls	r3, r3, #24
 8007604:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007608:	4931      	ldr	r1, [pc, #196]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 800760a:	4313      	orrs	r3, r2
 800760c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800760e:	4b30      	ldr	r3, [pc, #192]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 8007610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007612:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	492d      	ldr	r1, [pc, #180]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 800761c:	4313      	orrs	r3, r2
 800761e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007620:	4b2b      	ldr	r3, [pc, #172]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 8007622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007624:	f023 0220 	bic.w	r2, r3, #32
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	4928      	ldr	r1, [pc, #160]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 800762e:	4313      	orrs	r3, r2
 8007630:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007632:	4b27      	ldr	r3, [pc, #156]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 8007634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007636:	4a26      	ldr	r2, [pc, #152]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 8007638:	f023 0310 	bic.w	r3, r3, #16
 800763c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800763e:	4b24      	ldr	r3, [pc, #144]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 8007640:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007642:	4b24      	ldr	r3, [pc, #144]	@ (80076d4 <RCCEx_PLL2_Config+0x160>)
 8007644:	4013      	ands	r3, r2
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	69d2      	ldr	r2, [r2, #28]
 800764a:	00d2      	lsls	r2, r2, #3
 800764c:	4920      	ldr	r1, [pc, #128]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 800764e:	4313      	orrs	r3, r2
 8007650:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007652:	4b1f      	ldr	r3, [pc, #124]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 8007654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007656:	4a1e      	ldr	r2, [pc, #120]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 8007658:	f043 0310 	orr.w	r3, r3, #16
 800765c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d106      	bne.n	8007672 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007664:	4b1a      	ldr	r3, [pc, #104]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 8007666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007668:	4a19      	ldr	r2, [pc, #100]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 800766a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800766e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007670:	e00f      	b.n	8007692 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d106      	bne.n	8007686 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007678:	4b15      	ldr	r3, [pc, #84]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 800767a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767c:	4a14      	ldr	r2, [pc, #80]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 800767e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007682:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007684:	e005      	b.n	8007692 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007686:	4b12      	ldr	r3, [pc, #72]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 8007688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800768a:	4a11      	ldr	r2, [pc, #68]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 800768c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007690:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007692:	4b0f      	ldr	r3, [pc, #60]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a0e      	ldr	r2, [pc, #56]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 8007698:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800769c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800769e:	f7fb fb09 	bl	8002cb4 <HAL_GetTick>
 80076a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076a4:	e008      	b.n	80076b8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80076a6:	f7fb fb05 	bl	8002cb4 <HAL_GetTick>
 80076aa:	4602      	mov	r2, r0
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d901      	bls.n	80076b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e006      	b.n	80076c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076b8:	4b05      	ldr	r3, [pc, #20]	@ (80076d0 <RCCEx_PLL2_Config+0x15c>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d0f0      	beq.n	80076a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80076c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	58024400 	.word	0x58024400
 80076d4:	ffff0007 	.word	0xffff0007

080076d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076e6:	4b53      	ldr	r3, [pc, #332]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 80076e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ea:	f003 0303 	and.w	r3, r3, #3
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d101      	bne.n	80076f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e099      	b.n	800782a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80076f6:	4b4f      	ldr	r3, [pc, #316]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a4e      	ldr	r2, [pc, #312]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 80076fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007702:	f7fb fad7 	bl	8002cb4 <HAL_GetTick>
 8007706:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007708:	e008      	b.n	800771c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800770a:	f7fb fad3 	bl	8002cb4 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	2b02      	cmp	r3, #2
 8007716:	d901      	bls.n	800771c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e086      	b.n	800782a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800771c:	4b45      	ldr	r3, [pc, #276]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1f0      	bne.n	800770a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007728:	4b42      	ldr	r3, [pc, #264]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 800772a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800772c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	051b      	lsls	r3, r3, #20
 8007736:	493f      	ldr	r1, [pc, #252]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 8007738:	4313      	orrs	r3, r2
 800773a:	628b      	str	r3, [r1, #40]	@ 0x28
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	3b01      	subs	r3, #1
 8007742:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	3b01      	subs	r3, #1
 800774c:	025b      	lsls	r3, r3, #9
 800774e:	b29b      	uxth	r3, r3
 8007750:	431a      	orrs	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	3b01      	subs	r3, #1
 8007758:	041b      	lsls	r3, r3, #16
 800775a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800775e:	431a      	orrs	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	3b01      	subs	r3, #1
 8007766:	061b      	lsls	r3, r3, #24
 8007768:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800776c:	4931      	ldr	r1, [pc, #196]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 800776e:	4313      	orrs	r3, r2
 8007770:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007772:	4b30      	ldr	r3, [pc, #192]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 8007774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007776:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	492d      	ldr	r1, [pc, #180]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 8007780:	4313      	orrs	r3, r2
 8007782:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007784:	4b2b      	ldr	r3, [pc, #172]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 8007786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007788:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	4928      	ldr	r1, [pc, #160]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 8007792:	4313      	orrs	r3, r2
 8007794:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007796:	4b27      	ldr	r3, [pc, #156]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 8007798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779a:	4a26      	ldr	r2, [pc, #152]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 800779c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80077a2:	4b24      	ldr	r3, [pc, #144]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 80077a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077a6:	4b24      	ldr	r3, [pc, #144]	@ (8007838 <RCCEx_PLL3_Config+0x160>)
 80077a8:	4013      	ands	r3, r2
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	69d2      	ldr	r2, [r2, #28]
 80077ae:	00d2      	lsls	r2, r2, #3
 80077b0:	4920      	ldr	r1, [pc, #128]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80077b6:	4b1f      	ldr	r3, [pc, #124]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 80077b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ba:	4a1e      	ldr	r2, [pc, #120]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 80077bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d106      	bne.n	80077d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80077c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 80077ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077cc:	4a19      	ldr	r2, [pc, #100]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 80077ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80077d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80077d4:	e00f      	b.n	80077f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d106      	bne.n	80077ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80077dc:	4b15      	ldr	r3, [pc, #84]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 80077de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e0:	4a14      	ldr	r2, [pc, #80]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 80077e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80077e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80077e8:	e005      	b.n	80077f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80077ea:	4b12      	ldr	r3, [pc, #72]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 80077ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ee:	4a11      	ldr	r2, [pc, #68]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 80077f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80077f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80077f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a0e      	ldr	r2, [pc, #56]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 80077fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007802:	f7fb fa57 	bl	8002cb4 <HAL_GetTick>
 8007806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007808:	e008      	b.n	800781c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800780a:	f7fb fa53 	bl	8002cb4 <HAL_GetTick>
 800780e:	4602      	mov	r2, r0
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	2b02      	cmp	r3, #2
 8007816:	d901      	bls.n	800781c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e006      	b.n	800782a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800781c:	4b05      	ldr	r3, [pc, #20]	@ (8007834 <RCCEx_PLL3_Config+0x15c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d0f0      	beq.n	800780a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007828:	7bfb      	ldrb	r3, [r7, #15]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	58024400 	.word	0x58024400
 8007838:	ffff0007 	.word	0xffff0007

0800783c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e10f      	b.n	8007a6e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a87      	ldr	r2, [pc, #540]	@ (8007a78 <HAL_SPI_Init+0x23c>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d00f      	beq.n	800787e <HAL_SPI_Init+0x42>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a86      	ldr	r2, [pc, #536]	@ (8007a7c <HAL_SPI_Init+0x240>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d00a      	beq.n	800787e <HAL_SPI_Init+0x42>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a84      	ldr	r2, [pc, #528]	@ (8007a80 <HAL_SPI_Init+0x244>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d005      	beq.n	800787e <HAL_SPI_Init+0x42>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	2b0f      	cmp	r3, #15
 8007878:	d901      	bls.n	800787e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e0f7      	b.n	8007a6e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f900 	bl	8007a84 <SPI_GetPacketSize>
 8007884:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a7b      	ldr	r2, [pc, #492]	@ (8007a78 <HAL_SPI_Init+0x23c>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d00c      	beq.n	80078aa <HAL_SPI_Init+0x6e>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a79      	ldr	r2, [pc, #484]	@ (8007a7c <HAL_SPI_Init+0x240>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d007      	beq.n	80078aa <HAL_SPI_Init+0x6e>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a78      	ldr	r2, [pc, #480]	@ (8007a80 <HAL_SPI_Init+0x244>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d002      	beq.n	80078aa <HAL_SPI_Init+0x6e>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2b08      	cmp	r3, #8
 80078a8:	d811      	bhi.n	80078ce <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078ae:	4a72      	ldr	r2, [pc, #456]	@ (8007a78 <HAL_SPI_Init+0x23c>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d009      	beq.n	80078c8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a70      	ldr	r2, [pc, #448]	@ (8007a7c <HAL_SPI_Init+0x240>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d004      	beq.n	80078c8 <HAL_SPI_Init+0x8c>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a6f      	ldr	r2, [pc, #444]	@ (8007a80 <HAL_SPI_Init+0x244>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d104      	bne.n	80078d2 <HAL_SPI_Init+0x96>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2b10      	cmp	r3, #16
 80078cc:	d901      	bls.n	80078d2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e0cd      	b.n	8007a6e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d106      	bne.n	80078ec <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7fa fc12 	bl	8002110 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2202      	movs	r2, #2
 80078f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f022 0201 	bic.w	r2, r2, #1
 8007902:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800790e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007918:	d119      	bne.n	800794e <HAL_SPI_Init+0x112>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007922:	d103      	bne.n	800792c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007928:	2b00      	cmp	r3, #0
 800792a:	d008      	beq.n	800793e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10c      	bne.n	800794e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007938:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800793c:	d107      	bne.n	800794e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800794c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00f      	beq.n	800797a <HAL_SPI_Init+0x13e>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	2b06      	cmp	r3, #6
 8007960:	d90b      	bls.n	800797a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	430a      	orrs	r2, r1
 8007976:	601a      	str	r2, [r3, #0]
 8007978:	e007      	b.n	800798a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007988:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	69da      	ldr	r2, [r3, #28]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007992:	431a      	orrs	r2, r3
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	431a      	orrs	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800799c:	ea42 0103 	orr.w	r1, r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68da      	ldr	r2, [r3, #12]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	430a      	orrs	r2, r1
 80079aa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b4:	431a      	orrs	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ba:	431a      	orrs	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	431a      	orrs	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	431a      	orrs	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	695b      	ldr	r3, [r3, #20]
 80079cc:	431a      	orrs	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a1b      	ldr	r3, [r3, #32]
 80079d2:	431a      	orrs	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	431a      	orrs	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079de:	431a      	orrs	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	431a      	orrs	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079ea:	ea42 0103 	orr.w	r1, r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d113      	bne.n	8007a2a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a14:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007a28:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f022 0201 	bic.w	r2, r2, #1
 8007a38:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00a      	beq.n	8007a5c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	430a      	orrs	r2, r1
 8007a5a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	40013000 	.word	0x40013000
 8007a7c:	40003800 	.word	0x40003800
 8007a80:	40003c00 	.word	0x40003c00

08007a84 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a90:	095b      	lsrs	r3, r3, #5
 8007a92:	3301      	adds	r3, #1
 8007a94:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	3307      	adds	r3, #7
 8007aa2:	08db      	lsrs	r3, r3, #3
 8007aa4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	fb02 f303 	mul.w	r3, r2, r3
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b082      	sub	sp, #8
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d101      	bne.n	8007acc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e049      	b.n	8007b60 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d106      	bne.n	8007ae6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7fa fc41 	bl	8002368 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2202      	movs	r2, #2
 8007aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	3304      	adds	r3, #4
 8007af6:	4619      	mov	r1, r3
 8007af8:	4610      	mov	r0, r2
 8007afa:	f000 fdbf 	bl	800867c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2201      	movs	r2, #1
 8007b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d001      	beq.n	8007b80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e04c      	b.n	8007c1a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2202      	movs	r2, #2
 8007b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a26      	ldr	r2, [pc, #152]	@ (8007c28 <HAL_TIM_Base_Start+0xc0>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d022      	beq.n	8007bd8 <HAL_TIM_Base_Start+0x70>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b9a:	d01d      	beq.n	8007bd8 <HAL_TIM_Base_Start+0x70>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a22      	ldr	r2, [pc, #136]	@ (8007c2c <HAL_TIM_Base_Start+0xc4>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d018      	beq.n	8007bd8 <HAL_TIM_Base_Start+0x70>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a21      	ldr	r2, [pc, #132]	@ (8007c30 <HAL_TIM_Base_Start+0xc8>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d013      	beq.n	8007bd8 <HAL_TIM_Base_Start+0x70>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8007c34 <HAL_TIM_Base_Start+0xcc>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d00e      	beq.n	8007bd8 <HAL_TIM_Base_Start+0x70>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8007c38 <HAL_TIM_Base_Start+0xd0>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d009      	beq.n	8007bd8 <HAL_TIM_Base_Start+0x70>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8007c3c <HAL_TIM_Base_Start+0xd4>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d004      	beq.n	8007bd8 <HAL_TIM_Base_Start+0x70>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8007c40 <HAL_TIM_Base_Start+0xd8>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d115      	bne.n	8007c04 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	689a      	ldr	r2, [r3, #8]
 8007bde:	4b19      	ldr	r3, [pc, #100]	@ (8007c44 <HAL_TIM_Base_Start+0xdc>)
 8007be0:	4013      	ands	r3, r2
 8007be2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2b06      	cmp	r3, #6
 8007be8:	d015      	beq.n	8007c16 <HAL_TIM_Base_Start+0xae>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bf0:	d011      	beq.n	8007c16 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f042 0201 	orr.w	r2, r2, #1
 8007c00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c02:	e008      	b.n	8007c16 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f042 0201 	orr.w	r2, r2, #1
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	e000      	b.n	8007c18 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	40010000 	.word	0x40010000
 8007c2c:	40000400 	.word	0x40000400
 8007c30:	40000800 	.word	0x40000800
 8007c34:	40000c00 	.word	0x40000c00
 8007c38:	40010400 	.word	0x40010400
 8007c3c:	40001800 	.word	0x40001800
 8007c40:	40014000 	.word	0x40014000
 8007c44:	00010007 	.word	0x00010007

08007c48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d001      	beq.n	8007c60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e054      	b.n	8007d0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2202      	movs	r2, #2
 8007c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68da      	ldr	r2, [r3, #12]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f042 0201 	orr.w	r2, r2, #1
 8007c76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a26      	ldr	r2, [pc, #152]	@ (8007d18 <HAL_TIM_Base_Start_IT+0xd0>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d022      	beq.n	8007cc8 <HAL_TIM_Base_Start_IT+0x80>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c8a:	d01d      	beq.n	8007cc8 <HAL_TIM_Base_Start_IT+0x80>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a22      	ldr	r2, [pc, #136]	@ (8007d1c <HAL_TIM_Base_Start_IT+0xd4>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d018      	beq.n	8007cc8 <HAL_TIM_Base_Start_IT+0x80>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a21      	ldr	r2, [pc, #132]	@ (8007d20 <HAL_TIM_Base_Start_IT+0xd8>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d013      	beq.n	8007cc8 <HAL_TIM_Base_Start_IT+0x80>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a1f      	ldr	r2, [pc, #124]	@ (8007d24 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d00e      	beq.n	8007cc8 <HAL_TIM_Base_Start_IT+0x80>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a1e      	ldr	r2, [pc, #120]	@ (8007d28 <HAL_TIM_Base_Start_IT+0xe0>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d009      	beq.n	8007cc8 <HAL_TIM_Base_Start_IT+0x80>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8007d2c <HAL_TIM_Base_Start_IT+0xe4>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d004      	beq.n	8007cc8 <HAL_TIM_Base_Start_IT+0x80>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8007d30 <HAL_TIM_Base_Start_IT+0xe8>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d115      	bne.n	8007cf4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	689a      	ldr	r2, [r3, #8]
 8007cce:	4b19      	ldr	r3, [pc, #100]	@ (8007d34 <HAL_TIM_Base_Start_IT+0xec>)
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2b06      	cmp	r3, #6
 8007cd8:	d015      	beq.n	8007d06 <HAL_TIM_Base_Start_IT+0xbe>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ce0:	d011      	beq.n	8007d06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f042 0201 	orr.w	r2, r2, #1
 8007cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cf2:	e008      	b.n	8007d06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f042 0201 	orr.w	r2, r2, #1
 8007d02:	601a      	str	r2, [r3, #0]
 8007d04:	e000      	b.n	8007d08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3714      	adds	r7, #20
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	40010000 	.word	0x40010000
 8007d1c:	40000400 	.word	0x40000400
 8007d20:	40000800 	.word	0x40000800
 8007d24:	40000c00 	.word	0x40000c00
 8007d28:	40010400 	.word	0x40010400
 8007d2c:	40001800 	.word	0x40001800
 8007d30:	40014000 	.word	0x40014000
 8007d34:	00010007 	.word	0x00010007

08007d38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d101      	bne.n	8007d4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e049      	b.n	8007dde <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d106      	bne.n	8007d64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7fa fb86 	bl	8002470 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2202      	movs	r2, #2
 8007d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3304      	adds	r3, #4
 8007d74:	4619      	mov	r1, r3
 8007d76:	4610      	mov	r0, r2
 8007d78:	f000 fc80 	bl	800867c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
	...

08007de8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d109      	bne.n	8007e0c <HAL_TIM_PWM_Start+0x24>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	bf14      	ite	ne
 8007e04:	2301      	movne	r3, #1
 8007e06:	2300      	moveq	r3, #0
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	e03c      	b.n	8007e86 <HAL_TIM_PWM_Start+0x9e>
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	2b04      	cmp	r3, #4
 8007e10:	d109      	bne.n	8007e26 <HAL_TIM_PWM_Start+0x3e>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	bf14      	ite	ne
 8007e1e:	2301      	movne	r3, #1
 8007e20:	2300      	moveq	r3, #0
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	e02f      	b.n	8007e86 <HAL_TIM_PWM_Start+0x9e>
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	2b08      	cmp	r3, #8
 8007e2a:	d109      	bne.n	8007e40 <HAL_TIM_PWM_Start+0x58>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	bf14      	ite	ne
 8007e38:	2301      	movne	r3, #1
 8007e3a:	2300      	moveq	r3, #0
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	e022      	b.n	8007e86 <HAL_TIM_PWM_Start+0x9e>
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	2b0c      	cmp	r3, #12
 8007e44:	d109      	bne.n	8007e5a <HAL_TIM_PWM_Start+0x72>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	bf14      	ite	ne
 8007e52:	2301      	movne	r3, #1
 8007e54:	2300      	moveq	r3, #0
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	e015      	b.n	8007e86 <HAL_TIM_PWM_Start+0x9e>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	2b10      	cmp	r3, #16
 8007e5e:	d109      	bne.n	8007e74 <HAL_TIM_PWM_Start+0x8c>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	bf14      	ite	ne
 8007e6c:	2301      	movne	r3, #1
 8007e6e:	2300      	moveq	r3, #0
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	e008      	b.n	8007e86 <HAL_TIM_PWM_Start+0x9e>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	bf14      	ite	ne
 8007e80:	2301      	movne	r3, #1
 8007e82:	2300      	moveq	r3, #0
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e0a1      	b.n	8007fd2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d104      	bne.n	8007e9e <HAL_TIM_PWM_Start+0xb6>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2202      	movs	r2, #2
 8007e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e9c:	e023      	b.n	8007ee6 <HAL_TIM_PWM_Start+0xfe>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2b04      	cmp	r3, #4
 8007ea2:	d104      	bne.n	8007eae <HAL_TIM_PWM_Start+0xc6>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007eac:	e01b      	b.n	8007ee6 <HAL_TIM_PWM_Start+0xfe>
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	2b08      	cmp	r3, #8
 8007eb2:	d104      	bne.n	8007ebe <HAL_TIM_PWM_Start+0xd6>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ebc:	e013      	b.n	8007ee6 <HAL_TIM_PWM_Start+0xfe>
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	2b0c      	cmp	r3, #12
 8007ec2:	d104      	bne.n	8007ece <HAL_TIM_PWM_Start+0xe6>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ecc:	e00b      	b.n	8007ee6 <HAL_TIM_PWM_Start+0xfe>
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	2b10      	cmp	r3, #16
 8007ed2:	d104      	bne.n	8007ede <HAL_TIM_PWM_Start+0xf6>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007edc:	e003      	b.n	8007ee6 <HAL_TIM_PWM_Start+0xfe>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2201      	movs	r2, #1
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 ffde 	bl	8008eb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a38      	ldr	r2, [pc, #224]	@ (8007fdc <HAL_TIM_PWM_Start+0x1f4>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d013      	beq.n	8007f26 <HAL_TIM_PWM_Start+0x13e>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a37      	ldr	r2, [pc, #220]	@ (8007fe0 <HAL_TIM_PWM_Start+0x1f8>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d00e      	beq.n	8007f26 <HAL_TIM_PWM_Start+0x13e>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a35      	ldr	r2, [pc, #212]	@ (8007fe4 <HAL_TIM_PWM_Start+0x1fc>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d009      	beq.n	8007f26 <HAL_TIM_PWM_Start+0x13e>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a34      	ldr	r2, [pc, #208]	@ (8007fe8 <HAL_TIM_PWM_Start+0x200>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d004      	beq.n	8007f26 <HAL_TIM_PWM_Start+0x13e>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a32      	ldr	r2, [pc, #200]	@ (8007fec <HAL_TIM_PWM_Start+0x204>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d101      	bne.n	8007f2a <HAL_TIM_PWM_Start+0x142>
 8007f26:	2301      	movs	r3, #1
 8007f28:	e000      	b.n	8007f2c <HAL_TIM_PWM_Start+0x144>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d007      	beq.n	8007f40 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007f3e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a25      	ldr	r2, [pc, #148]	@ (8007fdc <HAL_TIM_PWM_Start+0x1f4>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d022      	beq.n	8007f90 <HAL_TIM_PWM_Start+0x1a8>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f52:	d01d      	beq.n	8007f90 <HAL_TIM_PWM_Start+0x1a8>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a25      	ldr	r2, [pc, #148]	@ (8007ff0 <HAL_TIM_PWM_Start+0x208>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d018      	beq.n	8007f90 <HAL_TIM_PWM_Start+0x1a8>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a24      	ldr	r2, [pc, #144]	@ (8007ff4 <HAL_TIM_PWM_Start+0x20c>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d013      	beq.n	8007f90 <HAL_TIM_PWM_Start+0x1a8>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a22      	ldr	r2, [pc, #136]	@ (8007ff8 <HAL_TIM_PWM_Start+0x210>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d00e      	beq.n	8007f90 <HAL_TIM_PWM_Start+0x1a8>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a1a      	ldr	r2, [pc, #104]	@ (8007fe0 <HAL_TIM_PWM_Start+0x1f8>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d009      	beq.n	8007f90 <HAL_TIM_PWM_Start+0x1a8>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a1e      	ldr	r2, [pc, #120]	@ (8007ffc <HAL_TIM_PWM_Start+0x214>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d004      	beq.n	8007f90 <HAL_TIM_PWM_Start+0x1a8>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a16      	ldr	r2, [pc, #88]	@ (8007fe4 <HAL_TIM_PWM_Start+0x1fc>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d115      	bne.n	8007fbc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	689a      	ldr	r2, [r3, #8]
 8007f96:	4b1a      	ldr	r3, [pc, #104]	@ (8008000 <HAL_TIM_PWM_Start+0x218>)
 8007f98:	4013      	ands	r3, r2
 8007f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2b06      	cmp	r3, #6
 8007fa0:	d015      	beq.n	8007fce <HAL_TIM_PWM_Start+0x1e6>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fa8:	d011      	beq.n	8007fce <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f042 0201 	orr.w	r2, r2, #1
 8007fb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fba:	e008      	b.n	8007fce <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f042 0201 	orr.w	r2, r2, #1
 8007fca:	601a      	str	r2, [r3, #0]
 8007fcc:	e000      	b.n	8007fd0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	40010000 	.word	0x40010000
 8007fe0:	40010400 	.word	0x40010400
 8007fe4:	40014000 	.word	0x40014000
 8007fe8:	40014400 	.word	0x40014400
 8007fec:	40014800 	.word	0x40014800
 8007ff0:	40000400 	.word	0x40000400
 8007ff4:	40000800 	.word	0x40000800
 8007ff8:	40000c00 	.word	0x40000c00
 8007ffc:	40001800 	.word	0x40001800
 8008000:	00010007 	.word	0x00010007

08008004 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	f003 0302 	and.w	r3, r3, #2
 8008022:	2b00      	cmp	r3, #0
 8008024:	d020      	beq.n	8008068 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f003 0302 	and.w	r3, r3, #2
 800802c:	2b00      	cmp	r3, #0
 800802e:	d01b      	beq.n	8008068 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f06f 0202 	mvn.w	r2, #2
 8008038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	f003 0303 	and.w	r3, r3, #3
 800804a:	2b00      	cmp	r3, #0
 800804c:	d003      	beq.n	8008056 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 faf6 	bl	8008640 <HAL_TIM_IC_CaptureCallback>
 8008054:	e005      	b.n	8008062 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fae8 	bl	800862c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 faf9 	bl	8008654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	f003 0304 	and.w	r3, r3, #4
 800806e:	2b00      	cmp	r3, #0
 8008070:	d020      	beq.n	80080b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f003 0304 	and.w	r3, r3, #4
 8008078:	2b00      	cmp	r3, #0
 800807a:	d01b      	beq.n	80080b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f06f 0204 	mvn.w	r2, #4
 8008084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2202      	movs	r2, #2
 800808a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fad0 	bl	8008640 <HAL_TIM_IC_CaptureCallback>
 80080a0:	e005      	b.n	80080ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fac2 	bl	800862c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fad3 	bl	8008654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f003 0308 	and.w	r3, r3, #8
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d020      	beq.n	8008100 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f003 0308 	and.w	r3, r3, #8
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d01b      	beq.n	8008100 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f06f 0208 	mvn.w	r2, #8
 80080d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2204      	movs	r2, #4
 80080d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	69db      	ldr	r3, [r3, #28]
 80080de:	f003 0303 	and.w	r3, r3, #3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 faaa 	bl	8008640 <HAL_TIM_IC_CaptureCallback>
 80080ec:	e005      	b.n	80080fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fa9c 	bl	800862c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 faad 	bl	8008654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	f003 0310 	and.w	r3, r3, #16
 8008106:	2b00      	cmp	r3, #0
 8008108:	d020      	beq.n	800814c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f003 0310 	and.w	r3, r3, #16
 8008110:	2b00      	cmp	r3, #0
 8008112:	d01b      	beq.n	800814c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f06f 0210 	mvn.w	r2, #16
 800811c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2208      	movs	r2, #8
 8008122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fa84 	bl	8008640 <HAL_TIM_IC_CaptureCallback>
 8008138:	e005      	b.n	8008146 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fa76 	bl	800862c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 fa87 	bl	8008654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00c      	beq.n	8008170 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b00      	cmp	r3, #0
 800815e:	d007      	beq.n	8008170 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f06f 0201 	mvn.w	r2, #1
 8008168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f7f9 fd3c 	bl	8001be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008176:	2b00      	cmp	r3, #0
 8008178:	d104      	bne.n	8008184 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00c      	beq.n	800819e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800818a:	2b00      	cmp	r3, #0
 800818c:	d007      	beq.n	800819e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 ffc5 	bl	8009128 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00c      	beq.n	80081c2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d007      	beq.n	80081c2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80081ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 ffbd 	bl	800913c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00c      	beq.n	80081e6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d007      	beq.n	80081e6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80081de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fa41 	bl	8008668 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	f003 0320 	and.w	r3, r3, #32
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00c      	beq.n	800820a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f003 0320 	and.w	r3, r3, #32
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d007      	beq.n	800820a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f06f 0220 	mvn.w	r2, #32
 8008202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 ff85 	bl	8009114 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800820a:	bf00      	nop
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
	...

08008214 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b086      	sub	sp, #24
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800822a:	2b01      	cmp	r3, #1
 800822c:	d101      	bne.n	8008232 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800822e:	2302      	movs	r3, #2
 8008230:	e0ff      	b.n	8008432 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2201      	movs	r2, #1
 8008236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2b14      	cmp	r3, #20
 800823e:	f200 80f0 	bhi.w	8008422 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008242:	a201      	add	r2, pc, #4	@ (adr r2, 8008248 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008248:	0800829d 	.word	0x0800829d
 800824c:	08008423 	.word	0x08008423
 8008250:	08008423 	.word	0x08008423
 8008254:	08008423 	.word	0x08008423
 8008258:	080082dd 	.word	0x080082dd
 800825c:	08008423 	.word	0x08008423
 8008260:	08008423 	.word	0x08008423
 8008264:	08008423 	.word	0x08008423
 8008268:	0800831f 	.word	0x0800831f
 800826c:	08008423 	.word	0x08008423
 8008270:	08008423 	.word	0x08008423
 8008274:	08008423 	.word	0x08008423
 8008278:	0800835f 	.word	0x0800835f
 800827c:	08008423 	.word	0x08008423
 8008280:	08008423 	.word	0x08008423
 8008284:	08008423 	.word	0x08008423
 8008288:	080083a1 	.word	0x080083a1
 800828c:	08008423 	.word	0x08008423
 8008290:	08008423 	.word	0x08008423
 8008294:	08008423 	.word	0x08008423
 8008298:	080083e1 	.word	0x080083e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68b9      	ldr	r1, [r7, #8]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 fa90 	bl	80087c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	699a      	ldr	r2, [r3, #24]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f042 0208 	orr.w	r2, r2, #8
 80082b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	699a      	ldr	r2, [r3, #24]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f022 0204 	bic.w	r2, r2, #4
 80082c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6999      	ldr	r1, [r3, #24]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	691a      	ldr	r2, [r3, #16]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	430a      	orrs	r2, r1
 80082d8:	619a      	str	r2, [r3, #24]
      break;
 80082da:	e0a5      	b.n	8008428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68b9      	ldr	r1, [r7, #8]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f000 fb00 	bl	80088e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	699a      	ldr	r2, [r3, #24]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	699a      	ldr	r2, [r3, #24]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6999      	ldr	r1, [r3, #24]
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	021a      	lsls	r2, r3, #8
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	430a      	orrs	r2, r1
 800831a:	619a      	str	r2, [r3, #24]
      break;
 800831c:	e084      	b.n	8008428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68b9      	ldr	r1, [r7, #8]
 8008324:	4618      	mov	r0, r3
 8008326:	f000 fb69 	bl	80089fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	69da      	ldr	r2, [r3, #28]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f042 0208 	orr.w	r2, r2, #8
 8008338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	69da      	ldr	r2, [r3, #28]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f022 0204 	bic.w	r2, r2, #4
 8008348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	69d9      	ldr	r1, [r3, #28]
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	691a      	ldr	r2, [r3, #16]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	430a      	orrs	r2, r1
 800835a:	61da      	str	r2, [r3, #28]
      break;
 800835c:	e064      	b.n	8008428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68b9      	ldr	r1, [r7, #8]
 8008364:	4618      	mov	r0, r3
 8008366:	f000 fbd1 	bl	8008b0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	69da      	ldr	r2, [r3, #28]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	69da      	ldr	r2, [r3, #28]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	69d9      	ldr	r1, [r3, #28]
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	021a      	lsls	r2, r3, #8
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	430a      	orrs	r2, r1
 800839c:	61da      	str	r2, [r3, #28]
      break;
 800839e:	e043      	b.n	8008428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68b9      	ldr	r1, [r7, #8]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f000 fc1a 	bl	8008be0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f042 0208 	orr.w	r2, r2, #8
 80083ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f022 0204 	bic.w	r2, r2, #4
 80083ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	691a      	ldr	r2, [r3, #16]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	430a      	orrs	r2, r1
 80083dc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80083de:	e023      	b.n	8008428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68b9      	ldr	r1, [r7, #8]
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 fc5e 	bl	8008ca8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800840a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	021a      	lsls	r2, r3, #8
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	430a      	orrs	r2, r1
 800841e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008420:	e002      	b.n	8008428 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	75fb      	strb	r3, [r7, #23]
      break;
 8008426:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008430:	7dfb      	ldrb	r3, [r7, #23]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3718      	adds	r7, #24
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop

0800843c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008450:	2b01      	cmp	r3, #1
 8008452:	d101      	bne.n	8008458 <HAL_TIM_ConfigClockSource+0x1c>
 8008454:	2302      	movs	r3, #2
 8008456:	e0dc      	b.n	8008612 <HAL_TIM_ConfigClockSource+0x1d6>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2202      	movs	r2, #2
 8008464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	4b6a      	ldr	r3, [pc, #424]	@ (800861c <HAL_TIM_ConfigClockSource+0x1e0>)
 8008474:	4013      	ands	r3, r2
 8008476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800847e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a64      	ldr	r2, [pc, #400]	@ (8008620 <HAL_TIM_ConfigClockSource+0x1e4>)
 800848e:	4293      	cmp	r3, r2
 8008490:	f000 80a9 	beq.w	80085e6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008494:	4a62      	ldr	r2, [pc, #392]	@ (8008620 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008496:	4293      	cmp	r3, r2
 8008498:	f200 80ae 	bhi.w	80085f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800849c:	4a61      	ldr	r2, [pc, #388]	@ (8008624 <HAL_TIM_ConfigClockSource+0x1e8>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	f000 80a1 	beq.w	80085e6 <HAL_TIM_ConfigClockSource+0x1aa>
 80084a4:	4a5f      	ldr	r2, [pc, #380]	@ (8008624 <HAL_TIM_ConfigClockSource+0x1e8>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	f200 80a6 	bhi.w	80085f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80084ac:	4a5e      	ldr	r2, [pc, #376]	@ (8008628 <HAL_TIM_ConfigClockSource+0x1ec>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	f000 8099 	beq.w	80085e6 <HAL_TIM_ConfigClockSource+0x1aa>
 80084b4:	4a5c      	ldr	r2, [pc, #368]	@ (8008628 <HAL_TIM_ConfigClockSource+0x1ec>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	f200 809e 	bhi.w	80085f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80084bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80084c0:	f000 8091 	beq.w	80085e6 <HAL_TIM_ConfigClockSource+0x1aa>
 80084c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80084c8:	f200 8096 	bhi.w	80085f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80084cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084d0:	f000 8089 	beq.w	80085e6 <HAL_TIM_ConfigClockSource+0x1aa>
 80084d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084d8:	f200 808e 	bhi.w	80085f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80084dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084e0:	d03e      	beq.n	8008560 <HAL_TIM_ConfigClockSource+0x124>
 80084e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084e6:	f200 8087 	bhi.w	80085f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80084ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084ee:	f000 8086 	beq.w	80085fe <HAL_TIM_ConfigClockSource+0x1c2>
 80084f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084f6:	d87f      	bhi.n	80085f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80084f8:	2b70      	cmp	r3, #112	@ 0x70
 80084fa:	d01a      	beq.n	8008532 <HAL_TIM_ConfigClockSource+0xf6>
 80084fc:	2b70      	cmp	r3, #112	@ 0x70
 80084fe:	d87b      	bhi.n	80085f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008500:	2b60      	cmp	r3, #96	@ 0x60
 8008502:	d050      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x16a>
 8008504:	2b60      	cmp	r3, #96	@ 0x60
 8008506:	d877      	bhi.n	80085f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008508:	2b50      	cmp	r3, #80	@ 0x50
 800850a:	d03c      	beq.n	8008586 <HAL_TIM_ConfigClockSource+0x14a>
 800850c:	2b50      	cmp	r3, #80	@ 0x50
 800850e:	d873      	bhi.n	80085f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008510:	2b40      	cmp	r3, #64	@ 0x40
 8008512:	d058      	beq.n	80085c6 <HAL_TIM_ConfigClockSource+0x18a>
 8008514:	2b40      	cmp	r3, #64	@ 0x40
 8008516:	d86f      	bhi.n	80085f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008518:	2b30      	cmp	r3, #48	@ 0x30
 800851a:	d064      	beq.n	80085e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800851c:	2b30      	cmp	r3, #48	@ 0x30
 800851e:	d86b      	bhi.n	80085f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008520:	2b20      	cmp	r3, #32
 8008522:	d060      	beq.n	80085e6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008524:	2b20      	cmp	r3, #32
 8008526:	d867      	bhi.n	80085f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008528:	2b00      	cmp	r3, #0
 800852a:	d05c      	beq.n	80085e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800852c:	2b10      	cmp	r3, #16
 800852e:	d05a      	beq.n	80085e6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008530:	e062      	b.n	80085f8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008542:	f000 fc95 	bl	8008e70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008554:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	609a      	str	r2, [r3, #8]
      break;
 800855e:	e04f      	b.n	8008600 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008570:	f000 fc7e 	bl	8008e70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	689a      	ldr	r2, [r3, #8]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008582:	609a      	str	r2, [r3, #8]
      break;
 8008584:	e03c      	b.n	8008600 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008592:	461a      	mov	r2, r3
 8008594:	f000 fbee 	bl	8008d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2150      	movs	r1, #80	@ 0x50
 800859e:	4618      	mov	r0, r3
 80085a0:	f000 fc48 	bl	8008e34 <TIM_ITRx_SetConfig>
      break;
 80085a4:	e02c      	b.n	8008600 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085b2:	461a      	mov	r2, r3
 80085b4:	f000 fc0d 	bl	8008dd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2160      	movs	r1, #96	@ 0x60
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fc38 	bl	8008e34 <TIM_ITRx_SetConfig>
      break;
 80085c4:	e01c      	b.n	8008600 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085d2:	461a      	mov	r2, r3
 80085d4:	f000 fbce 	bl	8008d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2140      	movs	r1, #64	@ 0x40
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 fc28 	bl	8008e34 <TIM_ITRx_SetConfig>
      break;
 80085e4:	e00c      	b.n	8008600 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4619      	mov	r1, r3
 80085f0:	4610      	mov	r0, r2
 80085f2:	f000 fc1f 	bl	8008e34 <TIM_ITRx_SetConfig>
      break;
 80085f6:	e003      	b.n	8008600 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	73fb      	strb	r3, [r7, #15]
      break;
 80085fc:	e000      	b.n	8008600 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80085fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008610:	7bfb      	ldrb	r3, [r7, #15]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	ffceff88 	.word	0xffceff88
 8008620:	00100040 	.word	0x00100040
 8008624:	00100030 	.word	0x00100030
 8008628:	00100020 	.word	0x00100020

0800862c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a46      	ldr	r2, [pc, #280]	@ (80087a8 <TIM_Base_SetConfig+0x12c>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d013      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800869a:	d00f      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a43      	ldr	r2, [pc, #268]	@ (80087ac <TIM_Base_SetConfig+0x130>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d00b      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a42      	ldr	r2, [pc, #264]	@ (80087b0 <TIM_Base_SetConfig+0x134>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d007      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a41      	ldr	r2, [pc, #260]	@ (80087b4 <TIM_Base_SetConfig+0x138>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d003      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a40      	ldr	r2, [pc, #256]	@ (80087b8 <TIM_Base_SetConfig+0x13c>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d108      	bne.n	80086ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a35      	ldr	r2, [pc, #212]	@ (80087a8 <TIM_Base_SetConfig+0x12c>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d01f      	beq.n	8008716 <TIM_Base_SetConfig+0x9a>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086dc:	d01b      	beq.n	8008716 <TIM_Base_SetConfig+0x9a>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a32      	ldr	r2, [pc, #200]	@ (80087ac <TIM_Base_SetConfig+0x130>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d017      	beq.n	8008716 <TIM_Base_SetConfig+0x9a>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a31      	ldr	r2, [pc, #196]	@ (80087b0 <TIM_Base_SetConfig+0x134>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d013      	beq.n	8008716 <TIM_Base_SetConfig+0x9a>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a30      	ldr	r2, [pc, #192]	@ (80087b4 <TIM_Base_SetConfig+0x138>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d00f      	beq.n	8008716 <TIM_Base_SetConfig+0x9a>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a2f      	ldr	r2, [pc, #188]	@ (80087b8 <TIM_Base_SetConfig+0x13c>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d00b      	beq.n	8008716 <TIM_Base_SetConfig+0x9a>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a2e      	ldr	r2, [pc, #184]	@ (80087bc <TIM_Base_SetConfig+0x140>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d007      	beq.n	8008716 <TIM_Base_SetConfig+0x9a>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a2d      	ldr	r2, [pc, #180]	@ (80087c0 <TIM_Base_SetConfig+0x144>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d003      	beq.n	8008716 <TIM_Base_SetConfig+0x9a>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a2c      	ldr	r2, [pc, #176]	@ (80087c4 <TIM_Base_SetConfig+0x148>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d108      	bne.n	8008728 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800871c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	4313      	orrs	r3, r2
 8008726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	4313      	orrs	r3, r2
 8008734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	689a      	ldr	r2, [r3, #8]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a16      	ldr	r2, [pc, #88]	@ (80087a8 <TIM_Base_SetConfig+0x12c>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d00f      	beq.n	8008774 <TIM_Base_SetConfig+0xf8>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a18      	ldr	r2, [pc, #96]	@ (80087b8 <TIM_Base_SetConfig+0x13c>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d00b      	beq.n	8008774 <TIM_Base_SetConfig+0xf8>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a17      	ldr	r2, [pc, #92]	@ (80087bc <TIM_Base_SetConfig+0x140>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d007      	beq.n	8008774 <TIM_Base_SetConfig+0xf8>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a16      	ldr	r2, [pc, #88]	@ (80087c0 <TIM_Base_SetConfig+0x144>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d003      	beq.n	8008774 <TIM_Base_SetConfig+0xf8>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a15      	ldr	r2, [pc, #84]	@ (80087c4 <TIM_Base_SetConfig+0x148>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d103      	bne.n	800877c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	691a      	ldr	r2, [r3, #16]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	2b01      	cmp	r3, #1
 800878c:	d105      	bne.n	800879a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	f023 0201 	bic.w	r2, r3, #1
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	611a      	str	r2, [r3, #16]
  }
}
 800879a:	bf00      	nop
 800879c:	3714      	adds	r7, #20
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	40010000 	.word	0x40010000
 80087ac:	40000400 	.word	0x40000400
 80087b0:	40000800 	.word	0x40000800
 80087b4:	40000c00 	.word	0x40000c00
 80087b8:	40010400 	.word	0x40010400
 80087bc:	40014000 	.word	0x40014000
 80087c0:	40014400 	.word	0x40014400
 80087c4:	40014800 	.word	0x40014800

080087c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b087      	sub	sp, #28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a1b      	ldr	r3, [r3, #32]
 80087dc:	f023 0201 	bic.w	r2, r3, #1
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	4b37      	ldr	r3, [pc, #220]	@ (80088d0 <TIM_OC1_SetConfig+0x108>)
 80087f4:	4013      	ands	r3, r2
 80087f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f023 0303 	bic.w	r3, r3, #3
 80087fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	4313      	orrs	r3, r2
 8008808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	f023 0302 	bic.w	r3, r3, #2
 8008810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	4313      	orrs	r3, r2
 800881a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a2d      	ldr	r2, [pc, #180]	@ (80088d4 <TIM_OC1_SetConfig+0x10c>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d00f      	beq.n	8008844 <TIM_OC1_SetConfig+0x7c>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a2c      	ldr	r2, [pc, #176]	@ (80088d8 <TIM_OC1_SetConfig+0x110>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d00b      	beq.n	8008844 <TIM_OC1_SetConfig+0x7c>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a2b      	ldr	r2, [pc, #172]	@ (80088dc <TIM_OC1_SetConfig+0x114>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d007      	beq.n	8008844 <TIM_OC1_SetConfig+0x7c>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a2a      	ldr	r2, [pc, #168]	@ (80088e0 <TIM_OC1_SetConfig+0x118>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d003      	beq.n	8008844 <TIM_OC1_SetConfig+0x7c>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a29      	ldr	r2, [pc, #164]	@ (80088e4 <TIM_OC1_SetConfig+0x11c>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d10c      	bne.n	800885e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f023 0308 	bic.w	r3, r3, #8
 800884a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	697a      	ldr	r2, [r7, #20]
 8008852:	4313      	orrs	r3, r2
 8008854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	f023 0304 	bic.w	r3, r3, #4
 800885c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a1c      	ldr	r2, [pc, #112]	@ (80088d4 <TIM_OC1_SetConfig+0x10c>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d00f      	beq.n	8008886 <TIM_OC1_SetConfig+0xbe>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a1b      	ldr	r2, [pc, #108]	@ (80088d8 <TIM_OC1_SetConfig+0x110>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d00b      	beq.n	8008886 <TIM_OC1_SetConfig+0xbe>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a1a      	ldr	r2, [pc, #104]	@ (80088dc <TIM_OC1_SetConfig+0x114>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d007      	beq.n	8008886 <TIM_OC1_SetConfig+0xbe>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a19      	ldr	r2, [pc, #100]	@ (80088e0 <TIM_OC1_SetConfig+0x118>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d003      	beq.n	8008886 <TIM_OC1_SetConfig+0xbe>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a18      	ldr	r2, [pc, #96]	@ (80088e4 <TIM_OC1_SetConfig+0x11c>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d111      	bne.n	80088aa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800888c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	695b      	ldr	r3, [r3, #20]
 800889a:	693a      	ldr	r2, [r7, #16]
 800889c:	4313      	orrs	r3, r2
 800889e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	693a      	ldr	r2, [r7, #16]
 80088ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	685a      	ldr	r2, [r3, #4]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	621a      	str	r2, [r3, #32]
}
 80088c4:	bf00      	nop
 80088c6:	371c      	adds	r7, #28
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr
 80088d0:	fffeff8f 	.word	0xfffeff8f
 80088d4:	40010000 	.word	0x40010000
 80088d8:	40010400 	.word	0x40010400
 80088dc:	40014000 	.word	0x40014000
 80088e0:	40014400 	.word	0x40014400
 80088e4:	40014800 	.word	0x40014800

080088e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b087      	sub	sp, #28
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a1b      	ldr	r3, [r3, #32]
 80088fc:	f023 0210 	bic.w	r2, r3, #16
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	4b34      	ldr	r3, [pc, #208]	@ (80089e4 <TIM_OC2_SetConfig+0xfc>)
 8008914:	4013      	ands	r3, r2
 8008916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800891e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	021b      	lsls	r3, r3, #8
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	4313      	orrs	r3, r2
 800892a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	f023 0320 	bic.w	r3, r3, #32
 8008932:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	011b      	lsls	r3, r3, #4
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	4313      	orrs	r3, r2
 800893e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a29      	ldr	r2, [pc, #164]	@ (80089e8 <TIM_OC2_SetConfig+0x100>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d003      	beq.n	8008950 <TIM_OC2_SetConfig+0x68>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a28      	ldr	r2, [pc, #160]	@ (80089ec <TIM_OC2_SetConfig+0x104>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d10d      	bne.n	800896c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	011b      	lsls	r3, r3, #4
 800895e:	697a      	ldr	r2, [r7, #20]
 8008960:	4313      	orrs	r3, r2
 8008962:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800896a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a1e      	ldr	r2, [pc, #120]	@ (80089e8 <TIM_OC2_SetConfig+0x100>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d00f      	beq.n	8008994 <TIM_OC2_SetConfig+0xac>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4a1d      	ldr	r2, [pc, #116]	@ (80089ec <TIM_OC2_SetConfig+0x104>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d00b      	beq.n	8008994 <TIM_OC2_SetConfig+0xac>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a1c      	ldr	r2, [pc, #112]	@ (80089f0 <TIM_OC2_SetConfig+0x108>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d007      	beq.n	8008994 <TIM_OC2_SetConfig+0xac>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a1b      	ldr	r2, [pc, #108]	@ (80089f4 <TIM_OC2_SetConfig+0x10c>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d003      	beq.n	8008994 <TIM_OC2_SetConfig+0xac>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a1a      	ldr	r2, [pc, #104]	@ (80089f8 <TIM_OC2_SetConfig+0x110>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d113      	bne.n	80089bc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800899a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80089a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	695b      	ldr	r3, [r3, #20]
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	693a      	ldr	r2, [r7, #16]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	621a      	str	r2, [r3, #32]
}
 80089d6:	bf00      	nop
 80089d8:	371c      	adds	r7, #28
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	feff8fff 	.word	0xfeff8fff
 80089e8:	40010000 	.word	0x40010000
 80089ec:	40010400 	.word	0x40010400
 80089f0:	40014000 	.word	0x40014000
 80089f4:	40014400 	.word	0x40014400
 80089f8:	40014800 	.word	0x40014800

080089fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b087      	sub	sp, #28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a1b      	ldr	r3, [r3, #32]
 8008a0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a1b      	ldr	r3, [r3, #32]
 8008a10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	4b33      	ldr	r3, [pc, #204]	@ (8008af4 <TIM_OC3_SetConfig+0xf8>)
 8008a28:	4013      	ands	r3, r2
 8008a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f023 0303 	bic.w	r3, r3, #3
 8008a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	021b      	lsls	r3, r3, #8
 8008a4c:	697a      	ldr	r2, [r7, #20]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a28      	ldr	r2, [pc, #160]	@ (8008af8 <TIM_OC3_SetConfig+0xfc>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d003      	beq.n	8008a62 <TIM_OC3_SetConfig+0x66>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a27      	ldr	r2, [pc, #156]	@ (8008afc <TIM_OC3_SetConfig+0x100>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d10d      	bne.n	8008a7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	021b      	lsls	r3, r3, #8
 8008a70:	697a      	ldr	r2, [r7, #20]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a1d      	ldr	r2, [pc, #116]	@ (8008af8 <TIM_OC3_SetConfig+0xfc>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d00f      	beq.n	8008aa6 <TIM_OC3_SetConfig+0xaa>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a1c      	ldr	r2, [pc, #112]	@ (8008afc <TIM_OC3_SetConfig+0x100>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d00b      	beq.n	8008aa6 <TIM_OC3_SetConfig+0xaa>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a1b      	ldr	r2, [pc, #108]	@ (8008b00 <TIM_OC3_SetConfig+0x104>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d007      	beq.n	8008aa6 <TIM_OC3_SetConfig+0xaa>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a1a      	ldr	r2, [pc, #104]	@ (8008b04 <TIM_OC3_SetConfig+0x108>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d003      	beq.n	8008aa6 <TIM_OC3_SetConfig+0xaa>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a19      	ldr	r2, [pc, #100]	@ (8008b08 <TIM_OC3_SetConfig+0x10c>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d113      	bne.n	8008ace <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	695b      	ldr	r3, [r3, #20]
 8008aba:	011b      	lsls	r3, r3, #4
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	699b      	ldr	r3, [r3, #24]
 8008ac6:	011b      	lsls	r3, r3, #4
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	685a      	ldr	r2, [r3, #4]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	697a      	ldr	r2, [r7, #20]
 8008ae6:	621a      	str	r2, [r3, #32]
}
 8008ae8:	bf00      	nop
 8008aea:	371c      	adds	r7, #28
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr
 8008af4:	fffeff8f 	.word	0xfffeff8f
 8008af8:	40010000 	.word	0x40010000
 8008afc:	40010400 	.word	0x40010400
 8008b00:	40014000 	.word	0x40014000
 8008b04:	40014400 	.word	0x40014400
 8008b08:	40014800 	.word	0x40014800

08008b0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b087      	sub	sp, #28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a1b      	ldr	r3, [r3, #32]
 8008b1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6a1b      	ldr	r3, [r3, #32]
 8008b20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	69db      	ldr	r3, [r3, #28]
 8008b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	4b24      	ldr	r3, [pc, #144]	@ (8008bc8 <TIM_OC4_SetConfig+0xbc>)
 8008b38:	4013      	ands	r3, r2
 8008b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	021b      	lsls	r3, r3, #8
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	031b      	lsls	r3, r3, #12
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a19      	ldr	r2, [pc, #100]	@ (8008bcc <TIM_OC4_SetConfig+0xc0>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d00f      	beq.n	8008b8c <TIM_OC4_SetConfig+0x80>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a18      	ldr	r2, [pc, #96]	@ (8008bd0 <TIM_OC4_SetConfig+0xc4>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d00b      	beq.n	8008b8c <TIM_OC4_SetConfig+0x80>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a17      	ldr	r2, [pc, #92]	@ (8008bd4 <TIM_OC4_SetConfig+0xc8>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d007      	beq.n	8008b8c <TIM_OC4_SetConfig+0x80>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a16      	ldr	r2, [pc, #88]	@ (8008bd8 <TIM_OC4_SetConfig+0xcc>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d003      	beq.n	8008b8c <TIM_OC4_SetConfig+0x80>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a15      	ldr	r2, [pc, #84]	@ (8008bdc <TIM_OC4_SetConfig+0xd0>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d109      	bne.n	8008ba0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	695b      	ldr	r3, [r3, #20]
 8008b98:	019b      	lsls	r3, r3, #6
 8008b9a:	697a      	ldr	r2, [r7, #20]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	685a      	ldr	r2, [r3, #4]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	621a      	str	r2, [r3, #32]
}
 8008bba:	bf00      	nop
 8008bbc:	371c      	adds	r7, #28
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	feff8fff 	.word	0xfeff8fff
 8008bcc:	40010000 	.word	0x40010000
 8008bd0:	40010400 	.word	0x40010400
 8008bd4:	40014000 	.word	0x40014000
 8008bd8:	40014400 	.word	0x40014400
 8008bdc:	40014800 	.word	0x40014800

08008be0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b087      	sub	sp, #28
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a1b      	ldr	r3, [r3, #32]
 8008bee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a1b      	ldr	r3, [r3, #32]
 8008bf4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	4b21      	ldr	r3, [pc, #132]	@ (8008c90 <TIM_OC5_SetConfig+0xb0>)
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008c20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	041b      	lsls	r3, r3, #16
 8008c28:	693a      	ldr	r2, [r7, #16]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a18      	ldr	r2, [pc, #96]	@ (8008c94 <TIM_OC5_SetConfig+0xb4>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d00f      	beq.n	8008c56 <TIM_OC5_SetConfig+0x76>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a17      	ldr	r2, [pc, #92]	@ (8008c98 <TIM_OC5_SetConfig+0xb8>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d00b      	beq.n	8008c56 <TIM_OC5_SetConfig+0x76>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a16      	ldr	r2, [pc, #88]	@ (8008c9c <TIM_OC5_SetConfig+0xbc>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d007      	beq.n	8008c56 <TIM_OC5_SetConfig+0x76>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a15      	ldr	r2, [pc, #84]	@ (8008ca0 <TIM_OC5_SetConfig+0xc0>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d003      	beq.n	8008c56 <TIM_OC5_SetConfig+0x76>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a14      	ldr	r2, [pc, #80]	@ (8008ca4 <TIM_OC5_SetConfig+0xc4>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d109      	bne.n	8008c6a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	695b      	ldr	r3, [r3, #20]
 8008c62:	021b      	lsls	r3, r3, #8
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	697a      	ldr	r2, [r7, #20]
 8008c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	685a      	ldr	r2, [r3, #4]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	621a      	str	r2, [r3, #32]
}
 8008c84:	bf00      	nop
 8008c86:	371c      	adds	r7, #28
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr
 8008c90:	fffeff8f 	.word	0xfffeff8f
 8008c94:	40010000 	.word	0x40010000
 8008c98:	40010400 	.word	0x40010400
 8008c9c:	40014000 	.word	0x40014000
 8008ca0:	40014400 	.word	0x40014400
 8008ca4:	40014800 	.word	0x40014800

08008ca8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b087      	sub	sp, #28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a1b      	ldr	r3, [r3, #32]
 8008cb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a1b      	ldr	r3, [r3, #32]
 8008cbc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	4b22      	ldr	r3, [pc, #136]	@ (8008d5c <TIM_OC6_SetConfig+0xb4>)
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	021b      	lsls	r3, r3, #8
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008cea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	051b      	lsls	r3, r3, #20
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a19      	ldr	r2, [pc, #100]	@ (8008d60 <TIM_OC6_SetConfig+0xb8>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d00f      	beq.n	8008d20 <TIM_OC6_SetConfig+0x78>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a18      	ldr	r2, [pc, #96]	@ (8008d64 <TIM_OC6_SetConfig+0xbc>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d00b      	beq.n	8008d20 <TIM_OC6_SetConfig+0x78>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a17      	ldr	r2, [pc, #92]	@ (8008d68 <TIM_OC6_SetConfig+0xc0>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d007      	beq.n	8008d20 <TIM_OC6_SetConfig+0x78>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a16      	ldr	r2, [pc, #88]	@ (8008d6c <TIM_OC6_SetConfig+0xc4>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d003      	beq.n	8008d20 <TIM_OC6_SetConfig+0x78>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a15      	ldr	r2, [pc, #84]	@ (8008d70 <TIM_OC6_SetConfig+0xc8>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d109      	bne.n	8008d34 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008d26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	695b      	ldr	r3, [r3, #20]
 8008d2c:	029b      	lsls	r3, r3, #10
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	697a      	ldr	r2, [r7, #20]
 8008d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	685a      	ldr	r2, [r3, #4]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	621a      	str	r2, [r3, #32]
}
 8008d4e:	bf00      	nop
 8008d50:	371c      	adds	r7, #28
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	feff8fff 	.word	0xfeff8fff
 8008d60:	40010000 	.word	0x40010000
 8008d64:	40010400 	.word	0x40010400
 8008d68:	40014000 	.word	0x40014000
 8008d6c:	40014400 	.word	0x40014400
 8008d70:	40014800 	.word	0x40014800

08008d74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b087      	sub	sp, #28
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6a1b      	ldr	r3, [r3, #32]
 8008d84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6a1b      	ldr	r3, [r3, #32]
 8008d8a:	f023 0201 	bic.w	r2, r3, #1
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	699b      	ldr	r3, [r3, #24]
 8008d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	011b      	lsls	r3, r3, #4
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	f023 030a 	bic.w	r3, r3, #10
 8008db0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	693a      	ldr	r2, [r7, #16]
 8008dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	621a      	str	r2, [r3, #32]
}
 8008dc6:	bf00      	nop
 8008dc8:	371c      	adds	r7, #28
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b087      	sub	sp, #28
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	60f8      	str	r0, [r7, #12]
 8008dda:	60b9      	str	r1, [r7, #8]
 8008ddc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6a1b      	ldr	r3, [r3, #32]
 8008de2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6a1b      	ldr	r3, [r3, #32]
 8008de8:	f023 0210 	bic.w	r2, r3, #16
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	699b      	ldr	r3, [r3, #24]
 8008df4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008dfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	031b      	lsls	r3, r3, #12
 8008e02:	693a      	ldr	r2, [r7, #16]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	011b      	lsls	r3, r3, #4
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	621a      	str	r2, [r3, #32]
}
 8008e26:	bf00      	nop
 8008e28:	371c      	adds	r7, #28
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
	...

08008e34 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	4b09      	ldr	r3, [pc, #36]	@ (8008e6c <TIM_ITRx_SetConfig+0x38>)
 8008e48:	4013      	ands	r3, r2
 8008e4a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e4c:	683a      	ldr	r2, [r7, #0]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	f043 0307 	orr.w	r3, r3, #7
 8008e56:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	609a      	str	r2, [r3, #8]
}
 8008e5e:	bf00      	nop
 8008e60:	3714      	adds	r7, #20
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	ffcfff8f 	.word	0xffcfff8f

08008e70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b087      	sub	sp, #28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	021a      	lsls	r2, r3, #8
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	431a      	orrs	r2, r3
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	697a      	ldr	r2, [r7, #20]
 8008ea2:	609a      	str	r2, [r3, #8]
}
 8008ea4:	bf00      	nop
 8008ea6:	371c      	adds	r7, #28
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b087      	sub	sp, #28
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f003 031f 	and.w	r3, r3, #31
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6a1a      	ldr	r2, [r3, #32]
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	43db      	mvns	r3, r3
 8008ed2:	401a      	ands	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6a1a      	ldr	r2, [r3, #32]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	f003 031f 	and.w	r3, r3, #31
 8008ee2:	6879      	ldr	r1, [r7, #4]
 8008ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee8:	431a      	orrs	r2, r3
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	621a      	str	r2, [r3, #32]
}
 8008eee:	bf00      	nop
 8008ef0:	371c      	adds	r7, #28
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
	...

08008efc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d101      	bne.n	8008f14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f10:	2302      	movs	r3, #2
 8008f12:	e06d      	b.n	8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2202      	movs	r2, #2
 8008f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a30      	ldr	r2, [pc, #192]	@ (8008ffc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d004      	beq.n	8008f48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a2f      	ldr	r2, [pc, #188]	@ (8009000 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d108      	bne.n	8008f5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008f4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a20      	ldr	r2, [pc, #128]	@ (8008ffc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d022      	beq.n	8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f86:	d01d      	beq.n	8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a1d      	ldr	r2, [pc, #116]	@ (8009004 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d018      	beq.n	8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a1c      	ldr	r2, [pc, #112]	@ (8009008 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d013      	beq.n	8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a1a      	ldr	r2, [pc, #104]	@ (800900c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d00e      	beq.n	8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a15      	ldr	r2, [pc, #84]	@ (8009000 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d009      	beq.n	8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a16      	ldr	r2, [pc, #88]	@ (8009010 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d004      	beq.n	8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a15      	ldr	r2, [pc, #84]	@ (8009014 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d10c      	bne.n	8008fde <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3714      	adds	r7, #20
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr
 8008ffc:	40010000 	.word	0x40010000
 8009000:	40010400 	.word	0x40010400
 8009004:	40000400 	.word	0x40000400
 8009008:	40000800 	.word	0x40000800
 800900c:	40000c00 	.word	0x40000c00
 8009010:	40001800 	.word	0x40001800
 8009014:	40014000 	.word	0x40014000

08009018 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009022:	2300      	movs	r3, #0
 8009024:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800902c:	2b01      	cmp	r3, #1
 800902e:	d101      	bne.n	8009034 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009030:	2302      	movs	r3, #2
 8009032:	e065      	b.n	8009100 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	4313      	orrs	r3, r2
 8009048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	4313      	orrs	r3, r2
 8009056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	4313      	orrs	r3, r2
 8009064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4313      	orrs	r3, r2
 8009072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	4313      	orrs	r3, r2
 8009080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	695b      	ldr	r3, [r3, #20]
 800908c:	4313      	orrs	r3, r2
 800908e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800909a:	4313      	orrs	r3, r2
 800909c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	041b      	lsls	r3, r3, #16
 80090aa:	4313      	orrs	r3, r2
 80090ac:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a16      	ldr	r2, [pc, #88]	@ (800910c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d004      	beq.n	80090c2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a14      	ldr	r2, [pc, #80]	@ (8009110 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d115      	bne.n	80090ee <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090cc:	051b      	lsls	r3, r3, #20
 80090ce:	4313      	orrs	r3, r2
 80090d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	69db      	ldr	r3, [r3, #28]
 80090dc:	4313      	orrs	r3, r2
 80090de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	6a1b      	ldr	r3, [r3, #32]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr
 800910c:	40010000 	.word	0x40010000
 8009110:	40010400 	.word	0x40010400

08009114 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800911c:	bf00      	nop
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009144:	bf00      	nop
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d101      	bne.n	8009162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800915e:	2301      	movs	r3, #1
 8009160:	e042      	b.n	80091e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009168:	2b00      	cmp	r3, #0
 800916a:	d106      	bne.n	800917a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f7f9 fbc1 	bl	80028fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2224      	movs	r2, #36	@ 0x24
 800917e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f022 0201 	bic.w	r2, r2, #1
 8009190:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009196:	2b00      	cmp	r3, #0
 8009198:	d002      	beq.n	80091a0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fd90 	bl	8009cc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f825 	bl	80091f0 <UART_SetConfig>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d101      	bne.n	80091b0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e01b      	b.n	80091e8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	685a      	ldr	r2, [r3, #4]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80091be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	689a      	ldr	r2, [r3, #8]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80091ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f042 0201 	orr.w	r2, r2, #1
 80091de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fe0f 	bl	8009e04 <UART_CheckIdleState>
 80091e6:	4603      	mov	r3, r0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3708      	adds	r7, #8
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091f4:	b092      	sub	sp, #72	@ 0x48
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	689a      	ldr	r2, [r3, #8]
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	691b      	ldr	r3, [r3, #16]
 8009208:	431a      	orrs	r2, r3
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	695b      	ldr	r3, [r3, #20]
 800920e:	431a      	orrs	r2, r3
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	69db      	ldr	r3, [r3, #28]
 8009214:	4313      	orrs	r3, r2
 8009216:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	4bbe      	ldr	r3, [pc, #760]	@ (8009518 <UART_SetConfig+0x328>)
 8009220:	4013      	ands	r3, r2
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	6812      	ldr	r2, [r2, #0]
 8009226:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009228:	430b      	orrs	r3, r1
 800922a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	68da      	ldr	r2, [r3, #12]
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	430a      	orrs	r2, r1
 8009240:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	699b      	ldr	r3, [r3, #24]
 8009246:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4ab3      	ldr	r2, [pc, #716]	@ (800951c <UART_SetConfig+0x32c>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d004      	beq.n	800925c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	6a1b      	ldr	r3, [r3, #32]
 8009256:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009258:	4313      	orrs	r3, r2
 800925a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	689a      	ldr	r2, [r3, #8]
 8009262:	4baf      	ldr	r3, [pc, #700]	@ (8009520 <UART_SetConfig+0x330>)
 8009264:	4013      	ands	r3, r2
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	6812      	ldr	r2, [r2, #0]
 800926a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800926c:	430b      	orrs	r3, r1
 800926e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009276:	f023 010f 	bic.w	r1, r3, #15
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	430a      	orrs	r2, r1
 8009284:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4aa6      	ldr	r2, [pc, #664]	@ (8009524 <UART_SetConfig+0x334>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d177      	bne.n	8009380 <UART_SetConfig+0x190>
 8009290:	4ba5      	ldr	r3, [pc, #660]	@ (8009528 <UART_SetConfig+0x338>)
 8009292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009294:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009298:	2b28      	cmp	r3, #40	@ 0x28
 800929a:	d86d      	bhi.n	8009378 <UART_SetConfig+0x188>
 800929c:	a201      	add	r2, pc, #4	@ (adr r2, 80092a4 <UART_SetConfig+0xb4>)
 800929e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a2:	bf00      	nop
 80092a4:	08009349 	.word	0x08009349
 80092a8:	08009379 	.word	0x08009379
 80092ac:	08009379 	.word	0x08009379
 80092b0:	08009379 	.word	0x08009379
 80092b4:	08009379 	.word	0x08009379
 80092b8:	08009379 	.word	0x08009379
 80092bc:	08009379 	.word	0x08009379
 80092c0:	08009379 	.word	0x08009379
 80092c4:	08009351 	.word	0x08009351
 80092c8:	08009379 	.word	0x08009379
 80092cc:	08009379 	.word	0x08009379
 80092d0:	08009379 	.word	0x08009379
 80092d4:	08009379 	.word	0x08009379
 80092d8:	08009379 	.word	0x08009379
 80092dc:	08009379 	.word	0x08009379
 80092e0:	08009379 	.word	0x08009379
 80092e4:	08009359 	.word	0x08009359
 80092e8:	08009379 	.word	0x08009379
 80092ec:	08009379 	.word	0x08009379
 80092f0:	08009379 	.word	0x08009379
 80092f4:	08009379 	.word	0x08009379
 80092f8:	08009379 	.word	0x08009379
 80092fc:	08009379 	.word	0x08009379
 8009300:	08009379 	.word	0x08009379
 8009304:	08009361 	.word	0x08009361
 8009308:	08009379 	.word	0x08009379
 800930c:	08009379 	.word	0x08009379
 8009310:	08009379 	.word	0x08009379
 8009314:	08009379 	.word	0x08009379
 8009318:	08009379 	.word	0x08009379
 800931c:	08009379 	.word	0x08009379
 8009320:	08009379 	.word	0x08009379
 8009324:	08009369 	.word	0x08009369
 8009328:	08009379 	.word	0x08009379
 800932c:	08009379 	.word	0x08009379
 8009330:	08009379 	.word	0x08009379
 8009334:	08009379 	.word	0x08009379
 8009338:	08009379 	.word	0x08009379
 800933c:	08009379 	.word	0x08009379
 8009340:	08009379 	.word	0x08009379
 8009344:	08009371 	.word	0x08009371
 8009348:	2301      	movs	r3, #1
 800934a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800934e:	e222      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009350:	2304      	movs	r3, #4
 8009352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009356:	e21e      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009358:	2308      	movs	r3, #8
 800935a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800935e:	e21a      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009360:	2310      	movs	r3, #16
 8009362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009366:	e216      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009368:	2320      	movs	r3, #32
 800936a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800936e:	e212      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009370:	2340      	movs	r3, #64	@ 0x40
 8009372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009376:	e20e      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009378:	2380      	movs	r3, #128	@ 0x80
 800937a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800937e:	e20a      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a69      	ldr	r2, [pc, #420]	@ (800952c <UART_SetConfig+0x33c>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d130      	bne.n	80093ec <UART_SetConfig+0x1fc>
 800938a:	4b67      	ldr	r3, [pc, #412]	@ (8009528 <UART_SetConfig+0x338>)
 800938c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800938e:	f003 0307 	and.w	r3, r3, #7
 8009392:	2b05      	cmp	r3, #5
 8009394:	d826      	bhi.n	80093e4 <UART_SetConfig+0x1f4>
 8009396:	a201      	add	r2, pc, #4	@ (adr r2, 800939c <UART_SetConfig+0x1ac>)
 8009398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800939c:	080093b5 	.word	0x080093b5
 80093a0:	080093bd 	.word	0x080093bd
 80093a4:	080093c5 	.word	0x080093c5
 80093a8:	080093cd 	.word	0x080093cd
 80093ac:	080093d5 	.word	0x080093d5
 80093b0:	080093dd 	.word	0x080093dd
 80093b4:	2300      	movs	r3, #0
 80093b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ba:	e1ec      	b.n	8009796 <UART_SetConfig+0x5a6>
 80093bc:	2304      	movs	r3, #4
 80093be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093c2:	e1e8      	b.n	8009796 <UART_SetConfig+0x5a6>
 80093c4:	2308      	movs	r3, #8
 80093c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ca:	e1e4      	b.n	8009796 <UART_SetConfig+0x5a6>
 80093cc:	2310      	movs	r3, #16
 80093ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093d2:	e1e0      	b.n	8009796 <UART_SetConfig+0x5a6>
 80093d4:	2320      	movs	r3, #32
 80093d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093da:	e1dc      	b.n	8009796 <UART_SetConfig+0x5a6>
 80093dc:	2340      	movs	r3, #64	@ 0x40
 80093de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093e2:	e1d8      	b.n	8009796 <UART_SetConfig+0x5a6>
 80093e4:	2380      	movs	r3, #128	@ 0x80
 80093e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ea:	e1d4      	b.n	8009796 <UART_SetConfig+0x5a6>
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a4f      	ldr	r2, [pc, #316]	@ (8009530 <UART_SetConfig+0x340>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d130      	bne.n	8009458 <UART_SetConfig+0x268>
 80093f6:	4b4c      	ldr	r3, [pc, #304]	@ (8009528 <UART_SetConfig+0x338>)
 80093f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093fa:	f003 0307 	and.w	r3, r3, #7
 80093fe:	2b05      	cmp	r3, #5
 8009400:	d826      	bhi.n	8009450 <UART_SetConfig+0x260>
 8009402:	a201      	add	r2, pc, #4	@ (adr r2, 8009408 <UART_SetConfig+0x218>)
 8009404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009408:	08009421 	.word	0x08009421
 800940c:	08009429 	.word	0x08009429
 8009410:	08009431 	.word	0x08009431
 8009414:	08009439 	.word	0x08009439
 8009418:	08009441 	.word	0x08009441
 800941c:	08009449 	.word	0x08009449
 8009420:	2300      	movs	r3, #0
 8009422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009426:	e1b6      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009428:	2304      	movs	r3, #4
 800942a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800942e:	e1b2      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009430:	2308      	movs	r3, #8
 8009432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009436:	e1ae      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009438:	2310      	movs	r3, #16
 800943a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800943e:	e1aa      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009440:	2320      	movs	r3, #32
 8009442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009446:	e1a6      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009448:	2340      	movs	r3, #64	@ 0x40
 800944a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800944e:	e1a2      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009450:	2380      	movs	r3, #128	@ 0x80
 8009452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009456:	e19e      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a35      	ldr	r2, [pc, #212]	@ (8009534 <UART_SetConfig+0x344>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d130      	bne.n	80094c4 <UART_SetConfig+0x2d4>
 8009462:	4b31      	ldr	r3, [pc, #196]	@ (8009528 <UART_SetConfig+0x338>)
 8009464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009466:	f003 0307 	and.w	r3, r3, #7
 800946a:	2b05      	cmp	r3, #5
 800946c:	d826      	bhi.n	80094bc <UART_SetConfig+0x2cc>
 800946e:	a201      	add	r2, pc, #4	@ (adr r2, 8009474 <UART_SetConfig+0x284>)
 8009470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009474:	0800948d 	.word	0x0800948d
 8009478:	08009495 	.word	0x08009495
 800947c:	0800949d 	.word	0x0800949d
 8009480:	080094a5 	.word	0x080094a5
 8009484:	080094ad 	.word	0x080094ad
 8009488:	080094b5 	.word	0x080094b5
 800948c:	2300      	movs	r3, #0
 800948e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009492:	e180      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009494:	2304      	movs	r3, #4
 8009496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800949a:	e17c      	b.n	8009796 <UART_SetConfig+0x5a6>
 800949c:	2308      	movs	r3, #8
 800949e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094a2:	e178      	b.n	8009796 <UART_SetConfig+0x5a6>
 80094a4:	2310      	movs	r3, #16
 80094a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094aa:	e174      	b.n	8009796 <UART_SetConfig+0x5a6>
 80094ac:	2320      	movs	r3, #32
 80094ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094b2:	e170      	b.n	8009796 <UART_SetConfig+0x5a6>
 80094b4:	2340      	movs	r3, #64	@ 0x40
 80094b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ba:	e16c      	b.n	8009796 <UART_SetConfig+0x5a6>
 80094bc:	2380      	movs	r3, #128	@ 0x80
 80094be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094c2:	e168      	b.n	8009796 <UART_SetConfig+0x5a6>
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a1b      	ldr	r2, [pc, #108]	@ (8009538 <UART_SetConfig+0x348>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d142      	bne.n	8009554 <UART_SetConfig+0x364>
 80094ce:	4b16      	ldr	r3, [pc, #88]	@ (8009528 <UART_SetConfig+0x338>)
 80094d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094d2:	f003 0307 	and.w	r3, r3, #7
 80094d6:	2b05      	cmp	r3, #5
 80094d8:	d838      	bhi.n	800954c <UART_SetConfig+0x35c>
 80094da:	a201      	add	r2, pc, #4	@ (adr r2, 80094e0 <UART_SetConfig+0x2f0>)
 80094dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e0:	080094f9 	.word	0x080094f9
 80094e4:	08009501 	.word	0x08009501
 80094e8:	08009509 	.word	0x08009509
 80094ec:	08009511 	.word	0x08009511
 80094f0:	0800953d 	.word	0x0800953d
 80094f4:	08009545 	.word	0x08009545
 80094f8:	2300      	movs	r3, #0
 80094fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094fe:	e14a      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009500:	2304      	movs	r3, #4
 8009502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009506:	e146      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009508:	2308      	movs	r3, #8
 800950a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800950e:	e142      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009510:	2310      	movs	r3, #16
 8009512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009516:	e13e      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009518:	cfff69f3 	.word	0xcfff69f3
 800951c:	58000c00 	.word	0x58000c00
 8009520:	11fff4ff 	.word	0x11fff4ff
 8009524:	40011000 	.word	0x40011000
 8009528:	58024400 	.word	0x58024400
 800952c:	40004400 	.word	0x40004400
 8009530:	40004800 	.word	0x40004800
 8009534:	40004c00 	.word	0x40004c00
 8009538:	40005000 	.word	0x40005000
 800953c:	2320      	movs	r3, #32
 800953e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009542:	e128      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009544:	2340      	movs	r3, #64	@ 0x40
 8009546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800954a:	e124      	b.n	8009796 <UART_SetConfig+0x5a6>
 800954c:	2380      	movs	r3, #128	@ 0x80
 800954e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009552:	e120      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4acb      	ldr	r2, [pc, #812]	@ (8009888 <UART_SetConfig+0x698>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d176      	bne.n	800964c <UART_SetConfig+0x45c>
 800955e:	4bcb      	ldr	r3, [pc, #812]	@ (800988c <UART_SetConfig+0x69c>)
 8009560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009562:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009566:	2b28      	cmp	r3, #40	@ 0x28
 8009568:	d86c      	bhi.n	8009644 <UART_SetConfig+0x454>
 800956a:	a201      	add	r2, pc, #4	@ (adr r2, 8009570 <UART_SetConfig+0x380>)
 800956c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009570:	08009615 	.word	0x08009615
 8009574:	08009645 	.word	0x08009645
 8009578:	08009645 	.word	0x08009645
 800957c:	08009645 	.word	0x08009645
 8009580:	08009645 	.word	0x08009645
 8009584:	08009645 	.word	0x08009645
 8009588:	08009645 	.word	0x08009645
 800958c:	08009645 	.word	0x08009645
 8009590:	0800961d 	.word	0x0800961d
 8009594:	08009645 	.word	0x08009645
 8009598:	08009645 	.word	0x08009645
 800959c:	08009645 	.word	0x08009645
 80095a0:	08009645 	.word	0x08009645
 80095a4:	08009645 	.word	0x08009645
 80095a8:	08009645 	.word	0x08009645
 80095ac:	08009645 	.word	0x08009645
 80095b0:	08009625 	.word	0x08009625
 80095b4:	08009645 	.word	0x08009645
 80095b8:	08009645 	.word	0x08009645
 80095bc:	08009645 	.word	0x08009645
 80095c0:	08009645 	.word	0x08009645
 80095c4:	08009645 	.word	0x08009645
 80095c8:	08009645 	.word	0x08009645
 80095cc:	08009645 	.word	0x08009645
 80095d0:	0800962d 	.word	0x0800962d
 80095d4:	08009645 	.word	0x08009645
 80095d8:	08009645 	.word	0x08009645
 80095dc:	08009645 	.word	0x08009645
 80095e0:	08009645 	.word	0x08009645
 80095e4:	08009645 	.word	0x08009645
 80095e8:	08009645 	.word	0x08009645
 80095ec:	08009645 	.word	0x08009645
 80095f0:	08009635 	.word	0x08009635
 80095f4:	08009645 	.word	0x08009645
 80095f8:	08009645 	.word	0x08009645
 80095fc:	08009645 	.word	0x08009645
 8009600:	08009645 	.word	0x08009645
 8009604:	08009645 	.word	0x08009645
 8009608:	08009645 	.word	0x08009645
 800960c:	08009645 	.word	0x08009645
 8009610:	0800963d 	.word	0x0800963d
 8009614:	2301      	movs	r3, #1
 8009616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800961a:	e0bc      	b.n	8009796 <UART_SetConfig+0x5a6>
 800961c:	2304      	movs	r3, #4
 800961e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009622:	e0b8      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009624:	2308      	movs	r3, #8
 8009626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800962a:	e0b4      	b.n	8009796 <UART_SetConfig+0x5a6>
 800962c:	2310      	movs	r3, #16
 800962e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009632:	e0b0      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009634:	2320      	movs	r3, #32
 8009636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800963a:	e0ac      	b.n	8009796 <UART_SetConfig+0x5a6>
 800963c:	2340      	movs	r3, #64	@ 0x40
 800963e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009642:	e0a8      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009644:	2380      	movs	r3, #128	@ 0x80
 8009646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800964a:	e0a4      	b.n	8009796 <UART_SetConfig+0x5a6>
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a8f      	ldr	r2, [pc, #572]	@ (8009890 <UART_SetConfig+0x6a0>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d130      	bne.n	80096b8 <UART_SetConfig+0x4c8>
 8009656:	4b8d      	ldr	r3, [pc, #564]	@ (800988c <UART_SetConfig+0x69c>)
 8009658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800965a:	f003 0307 	and.w	r3, r3, #7
 800965e:	2b05      	cmp	r3, #5
 8009660:	d826      	bhi.n	80096b0 <UART_SetConfig+0x4c0>
 8009662:	a201      	add	r2, pc, #4	@ (adr r2, 8009668 <UART_SetConfig+0x478>)
 8009664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009668:	08009681 	.word	0x08009681
 800966c:	08009689 	.word	0x08009689
 8009670:	08009691 	.word	0x08009691
 8009674:	08009699 	.word	0x08009699
 8009678:	080096a1 	.word	0x080096a1
 800967c:	080096a9 	.word	0x080096a9
 8009680:	2300      	movs	r3, #0
 8009682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009686:	e086      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009688:	2304      	movs	r3, #4
 800968a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800968e:	e082      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009690:	2308      	movs	r3, #8
 8009692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009696:	e07e      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009698:	2310      	movs	r3, #16
 800969a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800969e:	e07a      	b.n	8009796 <UART_SetConfig+0x5a6>
 80096a0:	2320      	movs	r3, #32
 80096a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096a6:	e076      	b.n	8009796 <UART_SetConfig+0x5a6>
 80096a8:	2340      	movs	r3, #64	@ 0x40
 80096aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ae:	e072      	b.n	8009796 <UART_SetConfig+0x5a6>
 80096b0:	2380      	movs	r3, #128	@ 0x80
 80096b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096b6:	e06e      	b.n	8009796 <UART_SetConfig+0x5a6>
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a75      	ldr	r2, [pc, #468]	@ (8009894 <UART_SetConfig+0x6a4>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d130      	bne.n	8009724 <UART_SetConfig+0x534>
 80096c2:	4b72      	ldr	r3, [pc, #456]	@ (800988c <UART_SetConfig+0x69c>)
 80096c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096c6:	f003 0307 	and.w	r3, r3, #7
 80096ca:	2b05      	cmp	r3, #5
 80096cc:	d826      	bhi.n	800971c <UART_SetConfig+0x52c>
 80096ce:	a201      	add	r2, pc, #4	@ (adr r2, 80096d4 <UART_SetConfig+0x4e4>)
 80096d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d4:	080096ed 	.word	0x080096ed
 80096d8:	080096f5 	.word	0x080096f5
 80096dc:	080096fd 	.word	0x080096fd
 80096e0:	08009705 	.word	0x08009705
 80096e4:	0800970d 	.word	0x0800970d
 80096e8:	08009715 	.word	0x08009715
 80096ec:	2300      	movs	r3, #0
 80096ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096f2:	e050      	b.n	8009796 <UART_SetConfig+0x5a6>
 80096f4:	2304      	movs	r3, #4
 80096f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096fa:	e04c      	b.n	8009796 <UART_SetConfig+0x5a6>
 80096fc:	2308      	movs	r3, #8
 80096fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009702:	e048      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009704:	2310      	movs	r3, #16
 8009706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800970a:	e044      	b.n	8009796 <UART_SetConfig+0x5a6>
 800970c:	2320      	movs	r3, #32
 800970e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009712:	e040      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009714:	2340      	movs	r3, #64	@ 0x40
 8009716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800971a:	e03c      	b.n	8009796 <UART_SetConfig+0x5a6>
 800971c:	2380      	movs	r3, #128	@ 0x80
 800971e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009722:	e038      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a5b      	ldr	r2, [pc, #364]	@ (8009898 <UART_SetConfig+0x6a8>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d130      	bne.n	8009790 <UART_SetConfig+0x5a0>
 800972e:	4b57      	ldr	r3, [pc, #348]	@ (800988c <UART_SetConfig+0x69c>)
 8009730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009732:	f003 0307 	and.w	r3, r3, #7
 8009736:	2b05      	cmp	r3, #5
 8009738:	d826      	bhi.n	8009788 <UART_SetConfig+0x598>
 800973a:	a201      	add	r2, pc, #4	@ (adr r2, 8009740 <UART_SetConfig+0x550>)
 800973c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009740:	08009759 	.word	0x08009759
 8009744:	08009761 	.word	0x08009761
 8009748:	08009769 	.word	0x08009769
 800974c:	08009771 	.word	0x08009771
 8009750:	08009779 	.word	0x08009779
 8009754:	08009781 	.word	0x08009781
 8009758:	2302      	movs	r3, #2
 800975a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800975e:	e01a      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009760:	2304      	movs	r3, #4
 8009762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009766:	e016      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009768:	2308      	movs	r3, #8
 800976a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800976e:	e012      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009770:	2310      	movs	r3, #16
 8009772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009776:	e00e      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009778:	2320      	movs	r3, #32
 800977a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800977e:	e00a      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009780:	2340      	movs	r3, #64	@ 0x40
 8009782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009786:	e006      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009788:	2380      	movs	r3, #128	@ 0x80
 800978a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800978e:	e002      	b.n	8009796 <UART_SetConfig+0x5a6>
 8009790:	2380      	movs	r3, #128	@ 0x80
 8009792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a3f      	ldr	r2, [pc, #252]	@ (8009898 <UART_SetConfig+0x6a8>)
 800979c:	4293      	cmp	r3, r2
 800979e:	f040 80f8 	bne.w	8009992 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80097a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80097a6:	2b20      	cmp	r3, #32
 80097a8:	dc46      	bgt.n	8009838 <UART_SetConfig+0x648>
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	f2c0 8082 	blt.w	80098b4 <UART_SetConfig+0x6c4>
 80097b0:	3b02      	subs	r3, #2
 80097b2:	2b1e      	cmp	r3, #30
 80097b4:	d87e      	bhi.n	80098b4 <UART_SetConfig+0x6c4>
 80097b6:	a201      	add	r2, pc, #4	@ (adr r2, 80097bc <UART_SetConfig+0x5cc>)
 80097b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097bc:	0800983f 	.word	0x0800983f
 80097c0:	080098b5 	.word	0x080098b5
 80097c4:	08009847 	.word	0x08009847
 80097c8:	080098b5 	.word	0x080098b5
 80097cc:	080098b5 	.word	0x080098b5
 80097d0:	080098b5 	.word	0x080098b5
 80097d4:	08009857 	.word	0x08009857
 80097d8:	080098b5 	.word	0x080098b5
 80097dc:	080098b5 	.word	0x080098b5
 80097e0:	080098b5 	.word	0x080098b5
 80097e4:	080098b5 	.word	0x080098b5
 80097e8:	080098b5 	.word	0x080098b5
 80097ec:	080098b5 	.word	0x080098b5
 80097f0:	080098b5 	.word	0x080098b5
 80097f4:	08009867 	.word	0x08009867
 80097f8:	080098b5 	.word	0x080098b5
 80097fc:	080098b5 	.word	0x080098b5
 8009800:	080098b5 	.word	0x080098b5
 8009804:	080098b5 	.word	0x080098b5
 8009808:	080098b5 	.word	0x080098b5
 800980c:	080098b5 	.word	0x080098b5
 8009810:	080098b5 	.word	0x080098b5
 8009814:	080098b5 	.word	0x080098b5
 8009818:	080098b5 	.word	0x080098b5
 800981c:	080098b5 	.word	0x080098b5
 8009820:	080098b5 	.word	0x080098b5
 8009824:	080098b5 	.word	0x080098b5
 8009828:	080098b5 	.word	0x080098b5
 800982c:	080098b5 	.word	0x080098b5
 8009830:	080098b5 	.word	0x080098b5
 8009834:	080098a7 	.word	0x080098a7
 8009838:	2b40      	cmp	r3, #64	@ 0x40
 800983a:	d037      	beq.n	80098ac <UART_SetConfig+0x6bc>
 800983c:	e03a      	b.n	80098b4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800983e:	f7fd fbdb 	bl	8006ff8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009842:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009844:	e03c      	b.n	80098c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800984a:	4618      	mov	r0, r3
 800984c:	f7fd fbea 	bl	8007024 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009854:	e034      	b.n	80098c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009856:	f107 0318 	add.w	r3, r7, #24
 800985a:	4618      	mov	r0, r3
 800985c:	f7fd fd36 	bl	80072cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009864:	e02c      	b.n	80098c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009866:	4b09      	ldr	r3, [pc, #36]	@ (800988c <UART_SetConfig+0x69c>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 0320 	and.w	r3, r3, #32
 800986e:	2b00      	cmp	r3, #0
 8009870:	d016      	beq.n	80098a0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009872:	4b06      	ldr	r3, [pc, #24]	@ (800988c <UART_SetConfig+0x69c>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	08db      	lsrs	r3, r3, #3
 8009878:	f003 0303 	and.w	r3, r3, #3
 800987c:	4a07      	ldr	r2, [pc, #28]	@ (800989c <UART_SetConfig+0x6ac>)
 800987e:	fa22 f303 	lsr.w	r3, r2, r3
 8009882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009884:	e01c      	b.n	80098c0 <UART_SetConfig+0x6d0>
 8009886:	bf00      	nop
 8009888:	40011400 	.word	0x40011400
 800988c:	58024400 	.word	0x58024400
 8009890:	40007800 	.word	0x40007800
 8009894:	40007c00 	.word	0x40007c00
 8009898:	58000c00 	.word	0x58000c00
 800989c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80098a0:	4b9d      	ldr	r3, [pc, #628]	@ (8009b18 <UART_SetConfig+0x928>)
 80098a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098a4:	e00c      	b.n	80098c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80098a6:	4b9d      	ldr	r3, [pc, #628]	@ (8009b1c <UART_SetConfig+0x92c>)
 80098a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098aa:	e009      	b.n	80098c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098b2:	e005      	b.n	80098c0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80098b4:	2300      	movs	r3, #0
 80098b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80098be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80098c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f000 81de 	beq.w	8009c84 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098cc:	4a94      	ldr	r2, [pc, #592]	@ (8009b20 <UART_SetConfig+0x930>)
 80098ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098d2:	461a      	mov	r2, r3
 80098d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80098da:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	685a      	ldr	r2, [r3, #4]
 80098e0:	4613      	mov	r3, r2
 80098e2:	005b      	lsls	r3, r3, #1
 80098e4:	4413      	add	r3, r2
 80098e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d305      	bcc.n	80098f8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80098f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d903      	bls.n	8009900 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80098fe:	e1c1      	b.n	8009c84 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009902:	2200      	movs	r2, #0
 8009904:	60bb      	str	r3, [r7, #8]
 8009906:	60fa      	str	r2, [r7, #12]
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800990c:	4a84      	ldr	r2, [pc, #528]	@ (8009b20 <UART_SetConfig+0x930>)
 800990e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009912:	b29b      	uxth	r3, r3
 8009914:	2200      	movs	r2, #0
 8009916:	603b      	str	r3, [r7, #0]
 8009918:	607a      	str	r2, [r7, #4]
 800991a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800991e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009922:	f7f6 fcd9 	bl	80002d8 <__aeabi_uldivmod>
 8009926:	4602      	mov	r2, r0
 8009928:	460b      	mov	r3, r1
 800992a:	4610      	mov	r0, r2
 800992c:	4619      	mov	r1, r3
 800992e:	f04f 0200 	mov.w	r2, #0
 8009932:	f04f 0300 	mov.w	r3, #0
 8009936:	020b      	lsls	r3, r1, #8
 8009938:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800993c:	0202      	lsls	r2, r0, #8
 800993e:	6979      	ldr	r1, [r7, #20]
 8009940:	6849      	ldr	r1, [r1, #4]
 8009942:	0849      	lsrs	r1, r1, #1
 8009944:	2000      	movs	r0, #0
 8009946:	460c      	mov	r4, r1
 8009948:	4605      	mov	r5, r0
 800994a:	eb12 0804 	adds.w	r8, r2, r4
 800994e:	eb43 0905 	adc.w	r9, r3, r5
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	469a      	mov	sl, r3
 800995a:	4693      	mov	fp, r2
 800995c:	4652      	mov	r2, sl
 800995e:	465b      	mov	r3, fp
 8009960:	4640      	mov	r0, r8
 8009962:	4649      	mov	r1, r9
 8009964:	f7f6 fcb8 	bl	80002d8 <__aeabi_uldivmod>
 8009968:	4602      	mov	r2, r0
 800996a:	460b      	mov	r3, r1
 800996c:	4613      	mov	r3, r2
 800996e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009972:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009976:	d308      	bcc.n	800998a <UART_SetConfig+0x79a>
 8009978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800997a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800997e:	d204      	bcs.n	800998a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009986:	60da      	str	r2, [r3, #12]
 8009988:	e17c      	b.n	8009c84 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009990:	e178      	b.n	8009c84 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	69db      	ldr	r3, [r3, #28]
 8009996:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800999a:	f040 80c5 	bne.w	8009b28 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800999e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80099a2:	2b20      	cmp	r3, #32
 80099a4:	dc48      	bgt.n	8009a38 <UART_SetConfig+0x848>
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	db7b      	blt.n	8009aa2 <UART_SetConfig+0x8b2>
 80099aa:	2b20      	cmp	r3, #32
 80099ac:	d879      	bhi.n	8009aa2 <UART_SetConfig+0x8b2>
 80099ae:	a201      	add	r2, pc, #4	@ (adr r2, 80099b4 <UART_SetConfig+0x7c4>)
 80099b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b4:	08009a3f 	.word	0x08009a3f
 80099b8:	08009a47 	.word	0x08009a47
 80099bc:	08009aa3 	.word	0x08009aa3
 80099c0:	08009aa3 	.word	0x08009aa3
 80099c4:	08009a4f 	.word	0x08009a4f
 80099c8:	08009aa3 	.word	0x08009aa3
 80099cc:	08009aa3 	.word	0x08009aa3
 80099d0:	08009aa3 	.word	0x08009aa3
 80099d4:	08009a5f 	.word	0x08009a5f
 80099d8:	08009aa3 	.word	0x08009aa3
 80099dc:	08009aa3 	.word	0x08009aa3
 80099e0:	08009aa3 	.word	0x08009aa3
 80099e4:	08009aa3 	.word	0x08009aa3
 80099e8:	08009aa3 	.word	0x08009aa3
 80099ec:	08009aa3 	.word	0x08009aa3
 80099f0:	08009aa3 	.word	0x08009aa3
 80099f4:	08009a6f 	.word	0x08009a6f
 80099f8:	08009aa3 	.word	0x08009aa3
 80099fc:	08009aa3 	.word	0x08009aa3
 8009a00:	08009aa3 	.word	0x08009aa3
 8009a04:	08009aa3 	.word	0x08009aa3
 8009a08:	08009aa3 	.word	0x08009aa3
 8009a0c:	08009aa3 	.word	0x08009aa3
 8009a10:	08009aa3 	.word	0x08009aa3
 8009a14:	08009aa3 	.word	0x08009aa3
 8009a18:	08009aa3 	.word	0x08009aa3
 8009a1c:	08009aa3 	.word	0x08009aa3
 8009a20:	08009aa3 	.word	0x08009aa3
 8009a24:	08009aa3 	.word	0x08009aa3
 8009a28:	08009aa3 	.word	0x08009aa3
 8009a2c:	08009aa3 	.word	0x08009aa3
 8009a30:	08009aa3 	.word	0x08009aa3
 8009a34:	08009a95 	.word	0x08009a95
 8009a38:	2b40      	cmp	r3, #64	@ 0x40
 8009a3a:	d02e      	beq.n	8009a9a <UART_SetConfig+0x8aa>
 8009a3c:	e031      	b.n	8009aa2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a3e:	f7fc f8a5 	bl	8005b8c <HAL_RCC_GetPCLK1Freq>
 8009a42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a44:	e033      	b.n	8009aae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a46:	f7fc f8b7 	bl	8005bb8 <HAL_RCC_GetPCLK2Freq>
 8009a4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a4c:	e02f      	b.n	8009aae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7fd fae6 	bl	8007024 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a5c:	e027      	b.n	8009aae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a5e:	f107 0318 	add.w	r3, r7, #24
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fd fc32 	bl	80072cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a6c:	e01f      	b.n	8009aae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8009b24 <UART_SetConfig+0x934>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f003 0320 	and.w	r3, r3, #32
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d009      	beq.n	8009a8e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8009b24 <UART_SetConfig+0x934>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	08db      	lsrs	r3, r3, #3
 8009a80:	f003 0303 	and.w	r3, r3, #3
 8009a84:	4a24      	ldr	r2, [pc, #144]	@ (8009b18 <UART_SetConfig+0x928>)
 8009a86:	fa22 f303 	lsr.w	r3, r2, r3
 8009a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a8c:	e00f      	b.n	8009aae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009a8e:	4b22      	ldr	r3, [pc, #136]	@ (8009b18 <UART_SetConfig+0x928>)
 8009a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a92:	e00c      	b.n	8009aae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a94:	4b21      	ldr	r3, [pc, #132]	@ (8009b1c <UART_SetConfig+0x92c>)
 8009a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a98:	e009      	b.n	8009aae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aa0:	e005      	b.n	8009aae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009aac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f000 80e7 	beq.w	8009c84 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aba:	4a19      	ldr	r2, [pc, #100]	@ (8009b20 <UART_SetConfig+0x930>)
 8009abc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ac4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ac8:	005a      	lsls	r2, r3, #1
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	085b      	lsrs	r3, r3, #1
 8009ad0:	441a      	add	r2, r3
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ada:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ade:	2b0f      	cmp	r3, #15
 8009ae0:	d916      	bls.n	8009b10 <UART_SetConfig+0x920>
 8009ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ae8:	d212      	bcs.n	8009b10 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	f023 030f 	bic.w	r3, r3, #15
 8009af2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af6:	085b      	lsrs	r3, r3, #1
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	f003 0307 	and.w	r3, r3, #7
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009b02:	4313      	orrs	r3, r2
 8009b04:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009b0c:	60da      	str	r2, [r3, #12]
 8009b0e:	e0b9      	b.n	8009c84 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009b16:	e0b5      	b.n	8009c84 <UART_SetConfig+0xa94>
 8009b18:	03d09000 	.word	0x03d09000
 8009b1c:	003d0900 	.word	0x003d0900
 8009b20:	0800a388 	.word	0x0800a388
 8009b24:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b28:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009b2c:	2b20      	cmp	r3, #32
 8009b2e:	dc49      	bgt.n	8009bc4 <UART_SetConfig+0x9d4>
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	db7c      	blt.n	8009c2e <UART_SetConfig+0xa3e>
 8009b34:	2b20      	cmp	r3, #32
 8009b36:	d87a      	bhi.n	8009c2e <UART_SetConfig+0xa3e>
 8009b38:	a201      	add	r2, pc, #4	@ (adr r2, 8009b40 <UART_SetConfig+0x950>)
 8009b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3e:	bf00      	nop
 8009b40:	08009bcb 	.word	0x08009bcb
 8009b44:	08009bd3 	.word	0x08009bd3
 8009b48:	08009c2f 	.word	0x08009c2f
 8009b4c:	08009c2f 	.word	0x08009c2f
 8009b50:	08009bdb 	.word	0x08009bdb
 8009b54:	08009c2f 	.word	0x08009c2f
 8009b58:	08009c2f 	.word	0x08009c2f
 8009b5c:	08009c2f 	.word	0x08009c2f
 8009b60:	08009beb 	.word	0x08009beb
 8009b64:	08009c2f 	.word	0x08009c2f
 8009b68:	08009c2f 	.word	0x08009c2f
 8009b6c:	08009c2f 	.word	0x08009c2f
 8009b70:	08009c2f 	.word	0x08009c2f
 8009b74:	08009c2f 	.word	0x08009c2f
 8009b78:	08009c2f 	.word	0x08009c2f
 8009b7c:	08009c2f 	.word	0x08009c2f
 8009b80:	08009bfb 	.word	0x08009bfb
 8009b84:	08009c2f 	.word	0x08009c2f
 8009b88:	08009c2f 	.word	0x08009c2f
 8009b8c:	08009c2f 	.word	0x08009c2f
 8009b90:	08009c2f 	.word	0x08009c2f
 8009b94:	08009c2f 	.word	0x08009c2f
 8009b98:	08009c2f 	.word	0x08009c2f
 8009b9c:	08009c2f 	.word	0x08009c2f
 8009ba0:	08009c2f 	.word	0x08009c2f
 8009ba4:	08009c2f 	.word	0x08009c2f
 8009ba8:	08009c2f 	.word	0x08009c2f
 8009bac:	08009c2f 	.word	0x08009c2f
 8009bb0:	08009c2f 	.word	0x08009c2f
 8009bb4:	08009c2f 	.word	0x08009c2f
 8009bb8:	08009c2f 	.word	0x08009c2f
 8009bbc:	08009c2f 	.word	0x08009c2f
 8009bc0:	08009c21 	.word	0x08009c21
 8009bc4:	2b40      	cmp	r3, #64	@ 0x40
 8009bc6:	d02e      	beq.n	8009c26 <UART_SetConfig+0xa36>
 8009bc8:	e031      	b.n	8009c2e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bca:	f7fb ffdf 	bl	8005b8c <HAL_RCC_GetPCLK1Freq>
 8009bce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009bd0:	e033      	b.n	8009c3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bd2:	f7fb fff1 	bl	8005bb8 <HAL_RCC_GetPCLK2Freq>
 8009bd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009bd8:	e02f      	b.n	8009c3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7fd fa20 	bl	8007024 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009be8:	e027      	b.n	8009c3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bea:	f107 0318 	add.w	r3, r7, #24
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fd fb6c 	bl	80072cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bf8:	e01f      	b.n	8009c3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8009cb0 <UART_SetConfig+0xac0>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 0320 	and.w	r3, r3, #32
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d009      	beq.n	8009c1a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c06:	4b2a      	ldr	r3, [pc, #168]	@ (8009cb0 <UART_SetConfig+0xac0>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	08db      	lsrs	r3, r3, #3
 8009c0c:	f003 0303 	and.w	r3, r3, #3
 8009c10:	4a28      	ldr	r2, [pc, #160]	@ (8009cb4 <UART_SetConfig+0xac4>)
 8009c12:	fa22 f303 	lsr.w	r3, r2, r3
 8009c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c18:	e00f      	b.n	8009c3a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009c1a:	4b26      	ldr	r3, [pc, #152]	@ (8009cb4 <UART_SetConfig+0xac4>)
 8009c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c1e:	e00c      	b.n	8009c3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c20:	4b25      	ldr	r3, [pc, #148]	@ (8009cb8 <UART_SetConfig+0xac8>)
 8009c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c24:	e009      	b.n	8009c3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c2c:	e005      	b.n	8009c3a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009c38:	bf00      	nop
    }

    if (pclk != 0U)
 8009c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d021      	beq.n	8009c84 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c44:	4a1d      	ldr	r2, [pc, #116]	@ (8009cbc <UART_SetConfig+0xacc>)
 8009c46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	085b      	lsrs	r3, r3, #1
 8009c58:	441a      	add	r2, r3
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c62:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c66:	2b0f      	cmp	r3, #15
 8009c68:	d909      	bls.n	8009c7e <UART_SetConfig+0xa8e>
 8009c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c70:	d205      	bcs.n	8009c7e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c74:	b29a      	uxth	r2, r3
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	60da      	str	r2, [r3, #12]
 8009c7c:	e002      	b.n	8009c84 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	2200      	movs	r2, #0
 8009c98:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009ca0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3748      	adds	r7, #72	@ 0x48
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009cae:	bf00      	nop
 8009cb0:	58024400 	.word	0x58024400
 8009cb4:	03d09000 	.word	0x03d09000
 8009cb8:	003d0900 	.word	0x003d0900
 8009cbc:	0800a388 	.word	0x0800a388

08009cc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ccc:	f003 0308 	and.w	r3, r3, #8
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00a      	beq.n	8009cea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	430a      	orrs	r2, r1
 8009ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cee:	f003 0301 	and.w	r3, r3, #1
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d00a      	beq.n	8009d0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	430a      	orrs	r2, r1
 8009d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d10:	f003 0302 	and.w	r3, r3, #2
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d00a      	beq.n	8009d2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	430a      	orrs	r2, r1
 8009d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d32:	f003 0304 	and.w	r3, r3, #4
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00a      	beq.n	8009d50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	430a      	orrs	r2, r1
 8009d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d54:	f003 0310 	and.w	r3, r3, #16
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00a      	beq.n	8009d72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	430a      	orrs	r2, r1
 8009d70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d76:	f003 0320 	and.w	r3, r3, #32
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00a      	beq.n	8009d94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	430a      	orrs	r2, r1
 8009d92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d01a      	beq.n	8009dd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	430a      	orrs	r2, r1
 8009db4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dbe:	d10a      	bne.n	8009dd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	430a      	orrs	r2, r1
 8009dd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00a      	beq.n	8009df8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	430a      	orrs	r2, r1
 8009df6:	605a      	str	r2, [r3, #4]
  }
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b098      	sub	sp, #96	@ 0x60
 8009e08:	af02      	add	r7, sp, #8
 8009e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e14:	f7f8 ff4e 	bl	8002cb4 <HAL_GetTick>
 8009e18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f003 0308 	and.w	r3, r3, #8
 8009e24:	2b08      	cmp	r3, #8
 8009e26:	d12f      	bne.n	8009e88 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009e2c:	9300      	str	r3, [sp, #0]
 8009e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e30:	2200      	movs	r2, #0
 8009e32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f88e 	bl	8009f58 <UART_WaitOnFlagUntilTimeout>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d022      	beq.n	8009e88 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e4a:	e853 3f00 	ldrex	r3, [r3]
 8009e4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e56:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e62:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e68:	e841 2300 	strex	r3, r2, [r1]
 8009e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d1e6      	bne.n	8009e42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2220      	movs	r2, #32
 8009e78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e84:	2303      	movs	r3, #3
 8009e86:	e063      	b.n	8009f50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f003 0304 	and.w	r3, r3, #4
 8009e92:	2b04      	cmp	r3, #4
 8009e94:	d149      	bne.n	8009f2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e96:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 f857 	bl	8009f58 <UART_WaitOnFlagUntilTimeout>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d03c      	beq.n	8009f2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb8:	e853 3f00 	ldrex	r3, [r3]
 8009ebc:	623b      	str	r3, [r7, #32]
   return(result);
 8009ebe:	6a3b      	ldr	r3, [r7, #32]
 8009ec0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ece:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ed0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ed4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ed6:	e841 2300 	strex	r3, r2, [r1]
 8009eda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d1e6      	bne.n	8009eb0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	e853 3f00 	ldrex	r3, [r3]
 8009ef0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f023 0301 	bic.w	r3, r3, #1
 8009ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	3308      	adds	r3, #8
 8009f00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f02:	61fa      	str	r2, [r7, #28]
 8009f04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f06:	69b9      	ldr	r1, [r7, #24]
 8009f08:	69fa      	ldr	r2, [r7, #28]
 8009f0a:	e841 2300 	strex	r3, r2, [r1]
 8009f0e:	617b      	str	r3, [r7, #20]
   return(result);
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d1e5      	bne.n	8009ee2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2220      	movs	r2, #32
 8009f1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f26:	2303      	movs	r3, #3
 8009f28:	e012      	b.n	8009f50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2220      	movs	r2, #32
 8009f2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2220      	movs	r2, #32
 8009f36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3758      	adds	r7, #88	@ 0x58
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	603b      	str	r3, [r7, #0]
 8009f64:	4613      	mov	r3, r2
 8009f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f68:	e04f      	b.n	800a00a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f70:	d04b      	beq.n	800a00a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f72:	f7f8 fe9f 	bl	8002cb4 <HAL_GetTick>
 8009f76:	4602      	mov	r2, r0
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	1ad3      	subs	r3, r2, r3
 8009f7c:	69ba      	ldr	r2, [r7, #24]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d302      	bcc.n	8009f88 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d101      	bne.n	8009f8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009f88:	2303      	movs	r3, #3
 8009f8a:	e04e      	b.n	800a02a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f003 0304 	and.w	r3, r3, #4
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d037      	beq.n	800a00a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	2b80      	cmp	r3, #128	@ 0x80
 8009f9e:	d034      	beq.n	800a00a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	2b40      	cmp	r3, #64	@ 0x40
 8009fa4:	d031      	beq.n	800a00a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	69db      	ldr	r3, [r3, #28]
 8009fac:	f003 0308 	and.w	r3, r3, #8
 8009fb0:	2b08      	cmp	r3, #8
 8009fb2:	d110      	bne.n	8009fd6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2208      	movs	r2, #8
 8009fba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009fbc:	68f8      	ldr	r0, [r7, #12]
 8009fbe:	f000 f839 	bl	800a034 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2208      	movs	r2, #8
 8009fc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e029      	b.n	800a02a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	69db      	ldr	r3, [r3, #28]
 8009fdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009fe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009fe4:	d111      	bne.n	800a00a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009fee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f000 f81f 	bl	800a034 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2220      	movs	r2, #32
 8009ffa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2200      	movs	r2, #0
 800a002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a006:	2303      	movs	r3, #3
 800a008:	e00f      	b.n	800a02a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	69da      	ldr	r2, [r3, #28]
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	4013      	ands	r3, r2
 800a014:	68ba      	ldr	r2, [r7, #8]
 800a016:	429a      	cmp	r2, r3
 800a018:	bf0c      	ite	eq
 800a01a:	2301      	moveq	r3, #1
 800a01c:	2300      	movne	r3, #0
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	461a      	mov	r2, r3
 800a022:	79fb      	ldrb	r3, [r7, #7]
 800a024:	429a      	cmp	r2, r3
 800a026:	d0a0      	beq.n	8009f6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
	...

0800a034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a034:	b480      	push	{r7}
 800a036:	b095      	sub	sp, #84	@ 0x54
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a044:	e853 3f00 	ldrex	r3, [r3]
 800a048:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a04c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a050:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	461a      	mov	r2, r3
 800a058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a05a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a05c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a060:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a062:	e841 2300 	strex	r3, r2, [r1]
 800a066:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d1e6      	bne.n	800a03c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	3308      	adds	r3, #8
 800a074:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a076:	6a3b      	ldr	r3, [r7, #32]
 800a078:	e853 3f00 	ldrex	r3, [r3]
 800a07c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a07e:	69fa      	ldr	r2, [r7, #28]
 800a080:	4b1e      	ldr	r3, [pc, #120]	@ (800a0fc <UART_EndRxTransfer+0xc8>)
 800a082:	4013      	ands	r3, r2
 800a084:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	3308      	adds	r3, #8
 800a08c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a08e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a090:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a092:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a094:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a096:	e841 2300 	strex	r3, r2, [r1]
 800a09a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1e5      	bne.n	800a06e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d118      	bne.n	800a0dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	e853 3f00 	ldrex	r3, [r3]
 800a0b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	f023 0310 	bic.w	r3, r3, #16
 800a0be:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0c8:	61bb      	str	r3, [r7, #24]
 800a0ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0cc:	6979      	ldr	r1, [r7, #20]
 800a0ce:	69ba      	ldr	r2, [r7, #24]
 800a0d0:	e841 2300 	strex	r3, r2, [r1]
 800a0d4:	613b      	str	r3, [r7, #16]
   return(result);
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d1e6      	bne.n	800a0aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2220      	movs	r2, #32
 800a0e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a0f0:	bf00      	nop
 800a0f2:	3754      	adds	r7, #84	@ 0x54
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr
 800a0fc:	effffffe 	.word	0xeffffffe

0800a100 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a100:	b480      	push	{r7}
 800a102:	b085      	sub	sp, #20
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d101      	bne.n	800a116 <HAL_UARTEx_DisableFifoMode+0x16>
 800a112:	2302      	movs	r3, #2
 800a114:	e027      	b.n	800a166 <HAL_UARTEx_DisableFifoMode+0x66>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2201      	movs	r2, #1
 800a11a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2224      	movs	r2, #36	@ 0x24
 800a122:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f022 0201 	bic.w	r2, r2, #1
 800a13c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a144:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2220      	movs	r2, #32
 800a158:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3714      	adds	r7, #20
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr

0800a172 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b084      	sub	sp, #16
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
 800a17a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a182:	2b01      	cmp	r3, #1
 800a184:	d101      	bne.n	800a18a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a186:	2302      	movs	r3, #2
 800a188:	e02d      	b.n	800a1e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2201      	movs	r2, #1
 800a18e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2224      	movs	r2, #36	@ 0x24
 800a196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f022 0201 	bic.w	r2, r2, #1
 800a1b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	683a      	ldr	r2, [r7, #0]
 800a1c2:	430a      	orrs	r2, r1
 800a1c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f850 	bl	800a26c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	68fa      	ldr	r2, [r7, #12]
 800a1d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2220      	movs	r2, #32
 800a1d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b084      	sub	sp, #16
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
 800a1f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d101      	bne.n	800a206 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a202:	2302      	movs	r3, #2
 800a204:	e02d      	b.n	800a262 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2201      	movs	r2, #1
 800a20a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2224      	movs	r2, #36	@ 0x24
 800a212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f022 0201 	bic.w	r2, r2, #1
 800a22c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	683a      	ldr	r2, [r7, #0]
 800a23e:	430a      	orrs	r2, r1
 800a240:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 f812 	bl	800a26c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2220      	movs	r2, #32
 800a254:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a260:	2300      	movs	r3, #0
}
 800a262:	4618      	mov	r0, r3
 800a264:	3710      	adds	r7, #16
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
	...

0800a26c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b085      	sub	sp, #20
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d108      	bne.n	800a28e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2201      	movs	r2, #1
 800a280:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a28c:	e031      	b.n	800a2f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a28e:	2310      	movs	r3, #16
 800a290:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a292:	2310      	movs	r3, #16
 800a294:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	0e5b      	lsrs	r3, r3, #25
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	f003 0307 	and.w	r3, r3, #7
 800a2a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	0f5b      	lsrs	r3, r3, #29
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	f003 0307 	and.w	r3, r3, #7
 800a2b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2b6:	7bbb      	ldrb	r3, [r7, #14]
 800a2b8:	7b3a      	ldrb	r2, [r7, #12]
 800a2ba:	4911      	ldr	r1, [pc, #68]	@ (800a300 <UARTEx_SetNbDataToProcess+0x94>)
 800a2bc:	5c8a      	ldrb	r2, [r1, r2]
 800a2be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a2c2:	7b3a      	ldrb	r2, [r7, #12]
 800a2c4:	490f      	ldr	r1, [pc, #60]	@ (800a304 <UARTEx_SetNbDataToProcess+0x98>)
 800a2c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2cc:	b29a      	uxth	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2d4:	7bfb      	ldrb	r3, [r7, #15]
 800a2d6:	7b7a      	ldrb	r2, [r7, #13]
 800a2d8:	4909      	ldr	r1, [pc, #36]	@ (800a300 <UARTEx_SetNbDataToProcess+0x94>)
 800a2da:	5c8a      	ldrb	r2, [r1, r2]
 800a2dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a2e0:	7b7a      	ldrb	r2, [r7, #13]
 800a2e2:	4908      	ldr	r1, [pc, #32]	@ (800a304 <UARTEx_SetNbDataToProcess+0x98>)
 800a2e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2ea:	b29a      	uxth	r2, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a2f2:	bf00      	nop
 800a2f4:	3714      	adds	r7, #20
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	0800a3a0 	.word	0x0800a3a0
 800a304:	0800a3a8 	.word	0x0800a3a8

0800a308 <memset>:
 800a308:	4402      	add	r2, r0
 800a30a:	4603      	mov	r3, r0
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d100      	bne.n	800a312 <memset+0xa>
 800a310:	4770      	bx	lr
 800a312:	f803 1b01 	strb.w	r1, [r3], #1
 800a316:	e7f9      	b.n	800a30c <memset+0x4>

0800a318 <__libc_init_array>:
 800a318:	b570      	push	{r4, r5, r6, lr}
 800a31a:	4d0d      	ldr	r5, [pc, #52]	@ (800a350 <__libc_init_array+0x38>)
 800a31c:	4c0d      	ldr	r4, [pc, #52]	@ (800a354 <__libc_init_array+0x3c>)
 800a31e:	1b64      	subs	r4, r4, r5
 800a320:	10a4      	asrs	r4, r4, #2
 800a322:	2600      	movs	r6, #0
 800a324:	42a6      	cmp	r6, r4
 800a326:	d109      	bne.n	800a33c <__libc_init_array+0x24>
 800a328:	4d0b      	ldr	r5, [pc, #44]	@ (800a358 <__libc_init_array+0x40>)
 800a32a:	4c0c      	ldr	r4, [pc, #48]	@ (800a35c <__libc_init_array+0x44>)
 800a32c:	f000 f818 	bl	800a360 <_init>
 800a330:	1b64      	subs	r4, r4, r5
 800a332:	10a4      	asrs	r4, r4, #2
 800a334:	2600      	movs	r6, #0
 800a336:	42a6      	cmp	r6, r4
 800a338:	d105      	bne.n	800a346 <__libc_init_array+0x2e>
 800a33a:	bd70      	pop	{r4, r5, r6, pc}
 800a33c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a340:	4798      	blx	r3
 800a342:	3601      	adds	r6, #1
 800a344:	e7ee      	b.n	800a324 <__libc_init_array+0xc>
 800a346:	f855 3b04 	ldr.w	r3, [r5], #4
 800a34a:	4798      	blx	r3
 800a34c:	3601      	adds	r6, #1
 800a34e:	e7f2      	b.n	800a336 <__libc_init_array+0x1e>
 800a350:	0800a3b8 	.word	0x0800a3b8
 800a354:	0800a3b8 	.word	0x0800a3b8
 800a358:	0800a3b8 	.word	0x0800a3b8
 800a35c:	0800a3bc 	.word	0x0800a3bc

0800a360 <_init>:
 800a360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a362:	bf00      	nop
 800a364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a366:	bc08      	pop	{r3}
 800a368:	469e      	mov	lr, r3
 800a36a:	4770      	bx	lr

0800a36c <_fini>:
 800a36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36e:	bf00      	nop
 800a370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a372:	bc08      	pop	{r3}
 800a374:	469e      	mov	lr, r3
 800a376:	4770      	bx	lr
