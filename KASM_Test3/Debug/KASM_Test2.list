
KASM_Test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c18  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08008eb0  08008eb0  00009eb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009098  08009098  0000a098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800909c  0800909c  0000a09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000002c  24000000  080090a0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002388  24000030  080090cc  0000b030  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  240023b8  080090cc  0000b3b8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000b02c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001507f  00000000  00000000  0000b05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002287  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000012d0  00000000  00000000  00022360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000ebf  00000000  00000000  00023630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003811a  00000000  00000000  000244ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00015410  00000000  00000000  0005c609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001737be  00000000  00000000  00071a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001e51d7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000052f4  00000000  00000000  001e521c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000066  00000000  00000000  001ea510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000030 	.word	0x24000030
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008e98 	.word	0x08008e98

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000034 	.word	0x24000034
 80002d4:	08008e98 	.word	0x08008e98

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80002dc:	f001 fce6 	bl	8001cac <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e0:	f002 faa4 	bl	800282c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e4:	f000 f9d4 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e8:	f001 f998 	bl	800161c <MX_GPIO_Init>
  MX_TIM1_Init();
 80002ec:	f000 fc4e 	bl	8000b8c <MX_TIM1_Init>
  MX_TIM2_Init();
 80002f0:	f000 fd1c 	bl	8000d2c <MX_TIM2_Init>
  MX_TIM4_Init();
 80002f4:	f000 fd90 	bl	8000e18 <MX_TIM4_Init>
  MX_TIM5_Init();
 80002f8:	f000 fe26 	bl	8000f48 <MX_TIM5_Init>
  MX_TIM8_Init();
 80002fc:	f000 fea6 	bl	800104c <MX_TIM8_Init>
  MX_TIM12_Init();
 8000300:	f000 ff4e 	bl	80011a0 <MX_TIM12_Init>
  MX_TIM13_Init();
 8000304:	f000 ffc4 	bl	8001290 <MX_TIM13_Init>
  MX_TIM14_Init();
 8000308:	f001 f810 	bl	800132c <MX_TIM14_Init>
  MX_TIM15_Init();
 800030c:	f001 f85c 	bl	80013c8 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000310:	f001 f90a 	bl	8001528 <MX_TIM16_Init>
  MX_HRTIM_Init();
 8000314:	f000 fa6a 	bl	80007ec <MX_HRTIM_Init>
  MX_LPTIM1_Init();
 8000318:	f000 fc0a 	bl	8000b30 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */


  //Timer 1
  HAL_TIM_Base_Start_IT(&htim1);
 800031c:	48c8      	ldr	r0, [pc, #800]	@ (8000640 <main+0x368>)
 800031e:	f006 fd35 	bl	8006d8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);    //Starts the PWM on each of the desired channels
 8000322:	2100      	movs	r1, #0
 8000324:	48c6      	ldr	r0, [pc, #792]	@ (8000640 <main+0x368>)
 8000326:	f006 fe0b 	bl	8006f40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800032a:	2104      	movs	r1, #4
 800032c:	48c4      	ldr	r0, [pc, #784]	@ (8000640 <main+0x368>)
 800032e:	f006 fe07 	bl	8006f40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000332:	2108      	movs	r1, #8
 8000334:	48c2      	ldr	r0, [pc, #776]	@ (8000640 <main+0x368>)
 8000336:	f006 fe03 	bl	8006f40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800033a:	210c      	movs	r1, #12
 800033c:	48c0      	ldr	r0, [pc, #768]	@ (8000640 <main+0x368>)
 800033e:	f006 fdff 	bl	8006f40 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, GPIO_PIN_SET);   //Sets the pin to 1
 8000342:	2201      	movs	r2, #1
 8000344:	2101      	movs	r1, #1
 8000346:	48bf      	ldr	r0, [pc, #764]	@ (8000644 <main+0x36c>)
 8000348:	f002 fe46 	bl	8002fd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, GPIO_PIN_SET);
 800034c:	2201      	movs	r2, #1
 800034e:	2102      	movs	r1, #2
 8000350:	48bc      	ldr	r0, [pc, #752]	@ (8000644 <main+0x36c>)
 8000352:	f002 fe41 	bl	8002fd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, GPIO_PIN_SET);
 8000356:	2201      	movs	r2, #1
 8000358:	2104      	movs	r1, #4
 800035a:	48ba      	ldr	r0, [pc, #744]	@ (8000644 <main+0x36c>)
 800035c:	f002 fe3c 	bl	8002fd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, GPIO_PIN_SET);
 8000360:	2201      	movs	r2, #1
 8000362:	2108      	movs	r1, #8
 8000364:	48b7      	ldr	r0, [pc, #732]	@ (8000644 <main+0x36c>)
 8000366:	f002 fe37 	bl	8002fd8 <HAL_GPIO_WritePin>
  //End Timer 1

  //Timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 800036a:	48b7      	ldr	r0, [pc, #732]	@ (8000648 <main+0x370>)
 800036c:	f006 fd0e 	bl	8006d8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000370:	2100      	movs	r1, #0
 8000372:	48b5      	ldr	r0, [pc, #724]	@ (8000648 <main+0x370>)
 8000374:	f006 fde4 	bl	8006f40 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM2_CH1_PH_GPIO_Port, TIM2_CH1_PH_Pin, GPIO_PIN_SET);
 8000378:	2201      	movs	r2, #1
 800037a:	2110      	movs	r1, #16
 800037c:	48b1      	ldr	r0, [pc, #708]	@ (8000644 <main+0x36c>)
 800037e:	f002 fe2b 	bl	8002fd8 <HAL_GPIO_WritePin>
  //End Timer 2


  //Timer 4
  HAL_TIM_Base_Start_IT(&htim4);
 8000382:	48b2      	ldr	r0, [pc, #712]	@ (800064c <main+0x374>)
 8000384:	f006 fd02 	bl	8006d8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000388:	2100      	movs	r1, #0
 800038a:	48b0      	ldr	r0, [pc, #704]	@ (800064c <main+0x374>)
 800038c:	f006 fdd8 	bl	8006f40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000390:	2104      	movs	r1, #4
 8000392:	48ae      	ldr	r0, [pc, #696]	@ (800064c <main+0x374>)
 8000394:	f006 fdd4 	bl	8006f40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000398:	2108      	movs	r1, #8
 800039a:	48ac      	ldr	r0, [pc, #688]	@ (800064c <main+0x374>)
 800039c:	f006 fdd0 	bl	8006f40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80003a0:	210c      	movs	r1, #12
 80003a2:	48aa      	ldr	r0, [pc, #680]	@ (800064c <main+0x374>)
 80003a4:	f006 fdcc 	bl	8006f40 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM4_CH1_PH_GPIO_Port, TIM4_CH1_PH_Pin, GPIO_PIN_SET);
 80003a8:	2201      	movs	r2, #1
 80003aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003ae:	48a8      	ldr	r0, [pc, #672]	@ (8000650 <main+0x378>)
 80003b0:	f002 fe12 	bl	8002fd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH2_PH_GPIO_Port, TIM4_CH2_PH_Pin, GPIO_PIN_SET);
 80003b4:	2201      	movs	r2, #1
 80003b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003ba:	48a5      	ldr	r0, [pc, #660]	@ (8000650 <main+0x378>)
 80003bc:	f002 fe0c 	bl	8002fd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH3_PH_GPIO_Port, TIM4_CH3_PH_Pin, GPIO_PIN_SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003c6:	48a3      	ldr	r0, [pc, #652]	@ (8000654 <main+0x37c>)
 80003c8:	f002 fe06 	bl	8002fd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH4_PH_GPIO_Port, TIM4_CH4_PH_Pin, GPIO_PIN_SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003d2:	48a0      	ldr	r0, [pc, #640]	@ (8000654 <main+0x37c>)
 80003d4:	f002 fe00 	bl	8002fd8 <HAL_GPIO_WritePin>
  //End Timer 4


  //Timer 5
  HAL_TIM_Base_Start_IT(&htim5);
 80003d8:	489f      	ldr	r0, [pc, #636]	@ (8000658 <main+0x380>)
 80003da:	f006 fcd7 	bl	8006d8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80003de:	2104      	movs	r1, #4
 80003e0:	489d      	ldr	r0, [pc, #628]	@ (8000658 <main+0x380>)
 80003e2:	f006 fdad 	bl	8006f40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 80003e6:	2108      	movs	r1, #8
 80003e8:	489b      	ldr	r0, [pc, #620]	@ (8000658 <main+0x380>)
 80003ea:	f006 fda9 	bl	8006f40 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM5_CH2_PH_GPIO_Port, TIM5_CH2_PH_Pin, GPIO_PIN_SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003f4:	4897      	ldr	r0, [pc, #604]	@ (8000654 <main+0x37c>)
 80003f6:	f002 fdef 	bl	8002fd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM5_CH3_PH_GPIO_Port, TIM5_CH3_PH_Pin, GPIO_PIN_SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000400:	4894      	ldr	r0, [pc, #592]	@ (8000654 <main+0x37c>)
 8000402:	f002 fde9 	bl	8002fd8 <HAL_GPIO_WritePin>
  //End Timer 5


  //Timer 8
  HAL_TIM_Base_Start_IT(&htim8);
 8000406:	4895      	ldr	r0, [pc, #596]	@ (800065c <main+0x384>)
 8000408:	f006 fcc0 	bl	8006d8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800040c:	210c      	movs	r1, #12
 800040e:	4893      	ldr	r0, [pc, #588]	@ (800065c <main+0x384>)
 8000410:	f006 fd96 	bl	8006f40 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM8_CH4_PH_GPIO_Port, TIM8_CH4_PH_Pin, GPIO_PIN_SET);
 8000414:	2201      	movs	r2, #1
 8000416:	2180      	movs	r1, #128	@ 0x80
 8000418:	488a      	ldr	r0, [pc, #552]	@ (8000644 <main+0x36c>)
 800041a:	f002 fddd 	bl	8002fd8 <HAL_GPIO_WritePin>
  //End Timer 8


  //Timer 12
  HAL_TIM_Base_Start_IT(&htim12);
 800041e:	4890      	ldr	r0, [pc, #576]	@ (8000660 <main+0x388>)
 8000420:	f006 fcb4 	bl	8006d8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000424:	2104      	movs	r1, #4
 8000426:	488e      	ldr	r0, [pc, #568]	@ (8000660 <main+0x388>)
 8000428:	f006 fd8a 	bl	8006f40 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM12_CH2_PH_GPIO_Port, TIM12_CH2_PH_Pin, GPIO_PIN_SET);
 800042c:	2201      	movs	r2, #1
 800042e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000432:	4884      	ldr	r0, [pc, #528]	@ (8000644 <main+0x36c>)
 8000434:	f002 fdd0 	bl	8002fd8 <HAL_GPIO_WritePin>
  //End Timer 12


  //Timer 13
  HAL_TIM_Base_Start_IT(&htim13);
 8000438:	488a      	ldr	r0, [pc, #552]	@ (8000664 <main+0x38c>)
 800043a:	f006 fca7 	bl	8006d8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 800043e:	2100      	movs	r1, #0
 8000440:	4888      	ldr	r0, [pc, #544]	@ (8000664 <main+0x38c>)
 8000442:	f006 fd7d 	bl	8006f40 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM13_CH1_PH_GPIO_Port, TIM13_CH1_PH_Pin, GPIO_PIN_SET);
 8000446:	2201      	movs	r2, #1
 8000448:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800044c:	487d      	ldr	r0, [pc, #500]	@ (8000644 <main+0x36c>)
 800044e:	f002 fdc3 	bl	8002fd8 <HAL_GPIO_WritePin>
  //End Timer 13


  //Timer 14
  HAL_TIM_Base_Start_IT(&htim14);
 8000452:	4885      	ldr	r0, [pc, #532]	@ (8000668 <main+0x390>)
 8000454:	f006 fc9a 	bl	8006d8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000458:	2100      	movs	r1, #0
 800045a:	4883      	ldr	r0, [pc, #524]	@ (8000668 <main+0x390>)
 800045c:	f006 fd70 	bl	8006f40 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM14_CH1_PH_GPIO_Port, TIM14_CH1_PH_Pin, GPIO_PIN_SET);
 8000460:	2201      	movs	r2, #1
 8000462:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000466:	4877      	ldr	r0, [pc, #476]	@ (8000644 <main+0x36c>)
 8000468:	f002 fdb6 	bl	8002fd8 <HAL_GPIO_WritePin>
  //End Timer 14


  //Timer 15
  HAL_TIM_Base_Start_IT(&htim15);
 800046c:	487f      	ldr	r0, [pc, #508]	@ (800066c <main+0x394>)
 800046e:	f006 fc8d 	bl	8006d8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000472:	2100      	movs	r1, #0
 8000474:	487d      	ldr	r0, [pc, #500]	@ (800066c <main+0x394>)
 8000476:	f006 fd63 	bl	8006f40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 800047a:	2104      	movs	r1, #4
 800047c:	487b      	ldr	r0, [pc, #492]	@ (800066c <main+0x394>)
 800047e:	f006 fd5f 	bl	8006f40 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM15_CH1_PH_GPIO_Port, TIM15_CH1_PH_Pin, GPIO_PIN_SET);
 8000482:	2201      	movs	r2, #1
 8000484:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000488:	486e      	ldr	r0, [pc, #440]	@ (8000644 <main+0x36c>)
 800048a:	f002 fda5 	bl	8002fd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM15_CH2_PH_GPIO_Port, TIM15_CH2_PH_Pin, GPIO_PIN_SET);
 800048e:	2201      	movs	r2, #1
 8000490:	2101      	movs	r1, #1
 8000492:	4877      	ldr	r0, [pc, #476]	@ (8000670 <main+0x398>)
 8000494:	f002 fda0 	bl	8002fd8 <HAL_GPIO_WritePin>
  //End Timer 15


  //Timer 16
  HAL_TIM_Base_Start_IT(&htim16);
 8000498:	4876      	ldr	r0, [pc, #472]	@ (8000674 <main+0x39c>)
 800049a:	f006 fc77 	bl	8006d8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800049e:	2100      	movs	r1, #0
 80004a0:	4874      	ldr	r0, [pc, #464]	@ (8000674 <main+0x39c>)
 80004a2:	f006 fd4d 	bl	8006f40 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM16_CH1_PH_GPIO_Port, TIM16_CH1_PH_Pin, GPIO_PIN_SET);
 80004a6:	2201      	movs	r2, #1
 80004a8:	2102      	movs	r1, #2
 80004aa:	4871      	ldr	r0, [pc, #452]	@ (8000670 <main+0x398>)
 80004ac:	f002 fd94 	bl	8002fd8 <HAL_GPIO_WritePin>
  //End Timer 16


  //High Resolution timer CHA
  HAL_HRTIM_SimpleBaseStart_IT(&hhrtim, HRTIM_TIMERINDEX_TIMER_A);
 80004b0:	2100      	movs	r1, #0
 80004b2:	4871      	ldr	r0, [pc, #452]	@ (8000678 <main+0x3a0>)
 80004b4:	f002 fea2 	bl	80031fc <HAL_HRTIM_SimpleBaseStart_IT>
  HAL_HRTIM_SimplePWMStart(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1);
 80004b8:	2201      	movs	r2, #1
 80004ba:	2100      	movs	r1, #0
 80004bc:	486e      	ldr	r0, [pc, #440]	@ (8000678 <main+0x3a0>)
 80004be:	f002 fee9 	bl	8003294 <HAL_HRTIM_SimplePWMStart>
  HAL_HRTIM_SimplePWMStart(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2);
 80004c2:	2202      	movs	r2, #2
 80004c4:	2100      	movs	r1, #0
 80004c6:	486c      	ldr	r0, [pc, #432]	@ (8000678 <main+0x3a0>)
 80004c8:	f002 fee4 	bl	8003294 <HAL_HRTIM_SimplePWMStart>
  HAL_GPIO_WritePin(HRTIM_CHA1_PH_GPIO_Port, HRTIM_CHA1_PH_Pin, GPIO_PIN_SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2110      	movs	r1, #16
 80004d0:	4867      	ldr	r0, [pc, #412]	@ (8000670 <main+0x398>)
 80004d2:	f002 fd81 	bl	8002fd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HRTIM_CHA2_PH_GPIO_Port, HRTIM_CHA2_PH_Pin, GPIO_PIN_SET);
 80004d6:	2201      	movs	r2, #1
 80004d8:	2120      	movs	r1, #32
 80004da:	4865      	ldr	r0, [pc, #404]	@ (8000670 <main+0x398>)
 80004dc:	f002 fd7c 	bl	8002fd8 <HAL_GPIO_WritePin>

	  //Set CHA1 high on the start of the period and low on the compare 1 event
	  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].SETx1R = HRTIM_SET1R_PER;
 80004e0:	4b66      	ldr	r3, [pc, #408]	@ (800067c <main+0x3a4>)
 80004e2:	2204      	movs	r2, #4
 80004e4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].RSTx1R = HRTIM_RST1R_CMP1;
 80004e8:	4b64      	ldr	r3, [pc, #400]	@ (800067c <main+0x3a4>)
 80004ea:	2208      	movs	r2, #8
 80004ec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

	   //Set CHA2 high on the start of the period and low on the compare 1 event
	   HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].SETx2R = HRTIM_SET2R_PER;
 80004f0:	4b62      	ldr	r3, [pc, #392]	@ (800067c <main+0x3a4>)
 80004f2:	2204      	movs	r2, #4
 80004f4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	   HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].RSTx2R = HRTIM_RST2R_CMP2;
 80004f8:	4b60      	ldr	r3, [pc, #384]	@ (800067c <main+0x3a4>)
 80004fa:	2210      	movs	r2, #16
 80004fc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  //End HRTIM CHA


  //High Resolution timer CHB
  HAL_HRTIM_SimpleBaseStart_IT(&hhrtim, HRTIM_TIMERINDEX_TIMER_B);
 8000500:	2101      	movs	r1, #1
 8000502:	485d      	ldr	r0, [pc, #372]	@ (8000678 <main+0x3a0>)
 8000504:	f002 fe7a 	bl	80031fc <HAL_HRTIM_SimpleBaseStart_IT>
  HAL_HRTIM_SimplePWMStart(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1);
 8000508:	2204      	movs	r2, #4
 800050a:	2101      	movs	r1, #1
 800050c:	485a      	ldr	r0, [pc, #360]	@ (8000678 <main+0x3a0>)
 800050e:	f002 fec1 	bl	8003294 <HAL_HRTIM_SimplePWMStart>
  HAL_HRTIM_SimplePWMStart(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2);
 8000512:	2208      	movs	r2, #8
 8000514:	2101      	movs	r1, #1
 8000516:	4858      	ldr	r0, [pc, #352]	@ (8000678 <main+0x3a0>)
 8000518:	f002 febc 	bl	8003294 <HAL_HRTIM_SimplePWMStart>
  HAL_GPIO_WritePin(HRTIM_CHB1_PH_GPIO_Port, HRTIM_CHB1_PH_Pin, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	2140      	movs	r1, #64	@ 0x40
 8000520:	4853      	ldr	r0, [pc, #332]	@ (8000670 <main+0x398>)
 8000522:	f002 fd59 	bl	8002fd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HRTIM_CHB2_PH_GPIO_Port, HRTIM_CHB2_PH_Pin, GPIO_PIN_SET);
 8000526:	2201      	movs	r2, #1
 8000528:	2180      	movs	r1, #128	@ 0x80
 800052a:	4851      	ldr	r0, [pc, #324]	@ (8000670 <main+0x398>)
 800052c:	f002 fd54 	bl	8002fd8 <HAL_GPIO_WritePin>

  	  	//Set CHB1 high on the start of the period and low on the compare 1 event
  		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].SETx1R = HRTIM_SET1R_PER;
 8000530:	4b52      	ldr	r3, [pc, #328]	@ (800067c <main+0x3a4>)
 8000532:	2204      	movs	r2, #4
 8000534:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
  		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].RSTx1R = HRTIM_RST1R_CMP1;
 8000538:	4b50      	ldr	r3, [pc, #320]	@ (800067c <main+0x3a4>)
 800053a:	2208      	movs	r2, #8
 800053c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140

  		//Set CHB2 high on the start of the period and low on the compare 1 event
  		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].SETx2R = HRTIM_SET2R_PER;
 8000540:	4b4e      	ldr	r3, [pc, #312]	@ (800067c <main+0x3a4>)
 8000542:	2204      	movs	r2, #4
 8000544:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
  		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].RSTx2R = HRTIM_RST2R_CMP2;
 8000548:	4b4c      	ldr	r3, [pc, #304]	@ (800067c <main+0x3a4>)
 800054a:	2210      	movs	r2, #16
 800054c:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
  //End HRTIM CHB


  //High Resolution timer CHC
  HAL_HRTIM_SimpleBaseStart_IT(&hhrtim, HRTIM_TIMERINDEX_TIMER_C);
 8000550:	2102      	movs	r1, #2
 8000552:	4849      	ldr	r0, [pc, #292]	@ (8000678 <main+0x3a0>)
 8000554:	f002 fe52 	bl	80031fc <HAL_HRTIM_SimpleBaseStart_IT>
  HAL_HRTIM_SimplePWMStart(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1);
 8000558:	2210      	movs	r2, #16
 800055a:	2102      	movs	r1, #2
 800055c:	4846      	ldr	r0, [pc, #280]	@ (8000678 <main+0x3a0>)
 800055e:	f002 fe99 	bl	8003294 <HAL_HRTIM_SimplePWMStart>
  HAL_HRTIM_SimplePWMStart(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2);
 8000562:	2220      	movs	r2, #32
 8000564:	2102      	movs	r1, #2
 8000566:	4844      	ldr	r0, [pc, #272]	@ (8000678 <main+0x3a0>)
 8000568:	f002 fe94 	bl	8003294 <HAL_HRTIM_SimplePWMStart>
  HAL_GPIO_WritePin(HRTIM_CHC1_PH_GPIO_Port, HRTIM_CHC1_PH_Pin, GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000572:	483f      	ldr	r0, [pc, #252]	@ (8000670 <main+0x398>)
 8000574:	f002 fd30 	bl	8002fd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HRTIM_CHC2_PH_GPIO_Port, HRTIM_CHC2_PH_Pin, GPIO_PIN_SET);
 8000578:	2201      	movs	r2, #1
 800057a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800057e:	483c      	ldr	r0, [pc, #240]	@ (8000670 <main+0x398>)
 8000580:	f002 fd2a 	bl	8002fd8 <HAL_GPIO_WritePin>

  	  	//Set CHC1 high on the start of the period and low on the compare 1 event
  		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].SETx1R = HRTIM_SET1R_PER;
 8000584:	4b3d      	ldr	r3, [pc, #244]	@ (800067c <main+0x3a4>)
 8000586:	2204      	movs	r2, #4
 8000588:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
  		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].RSTx1R = HRTIM_RST1R_CMP1;
 800058c:	4b3b      	ldr	r3, [pc, #236]	@ (800067c <main+0x3a4>)
 800058e:	2208      	movs	r2, #8
 8000590:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0

  		//Set CHC2 high on the start of the period and low on the compare 1 event
  		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].SETx2R = HRTIM_SET2R_PER;
 8000594:	4b39      	ldr	r3, [pc, #228]	@ (800067c <main+0x3a4>)
 8000596:	2204      	movs	r2, #4
 8000598:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
  		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].RSTx2R = HRTIM_RST2R_CMP2;
 800059c:	4b37      	ldr	r3, [pc, #220]	@ (800067c <main+0x3a4>)
 800059e:	2210      	movs	r2, #16
 80005a0:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
  //End HRTIM CHC


  //High Resolution timer CHD
  HAL_HRTIM_SimpleBaseStart_IT(&hhrtim, HRTIM_TIMERINDEX_TIMER_D);
 80005a4:	2103      	movs	r1, #3
 80005a6:	4834      	ldr	r0, [pc, #208]	@ (8000678 <main+0x3a0>)
 80005a8:	f002 fe28 	bl	80031fc <HAL_HRTIM_SimpleBaseStart_IT>
  HAL_HRTIM_SimplePWMStart(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1);
 80005ac:	2240      	movs	r2, #64	@ 0x40
 80005ae:	2103      	movs	r1, #3
 80005b0:	4831      	ldr	r0, [pc, #196]	@ (8000678 <main+0x3a0>)
 80005b2:	f002 fe6f 	bl	8003294 <HAL_HRTIM_SimplePWMStart>
  HAL_HRTIM_SimplePWMStart(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2);
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	2103      	movs	r1, #3
 80005ba:	482f      	ldr	r0, [pc, #188]	@ (8000678 <main+0x3a0>)
 80005bc:	f002 fe6a 	bl	8003294 <HAL_HRTIM_SimplePWMStart>
  HAL_GPIO_WritePin(HRTIM_CHD1_PH_GPIO_Port, HRTIM_CHD1_PH_Pin, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005c6:	482a      	ldr	r0, [pc, #168]	@ (8000670 <main+0x398>)
 80005c8:	f002 fd06 	bl	8002fd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HRTIM_CHD2_PH_GPIO_Port, HRTIM_CHD2_PH_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005d2:	4827      	ldr	r0, [pc, #156]	@ (8000670 <main+0x398>)
 80005d4:	f002 fd00 	bl	8002fd8 <HAL_GPIO_WritePin>

  	  	//Set CHD1 high on the start of the period and low on the compare 1 event
  		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R = HRTIM_SET1R_PER;
 80005d8:	4b28      	ldr	r3, [pc, #160]	@ (800067c <main+0x3a4>)
 80005da:	2204      	movs	r2, #4
 80005dc:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
  		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].RSTx1R = HRTIM_RST1R_CMP1;
 80005e0:	4b26      	ldr	r3, [pc, #152]	@ (800067c <main+0x3a4>)
 80005e2:	2208      	movs	r2, #8
 80005e4:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

  		//Set CHD2 high on the start of the period and low on the compare 1 event
  		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx2R = HRTIM_SET2R_PER;
 80005e8:	4b24      	ldr	r3, [pc, #144]	@ (800067c <main+0x3a4>)
 80005ea:	2204      	movs	r2, #4
 80005ec:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244
  		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].RSTx2R = HRTIM_RST2R_CMP2;
 80005f0:	4b22      	ldr	r3, [pc, #136]	@ (800067c <main+0x3a4>)
 80005f2:	2210      	movs	r2, #16
 80005f4:	f8c3 2248 	str.w	r2, [r3, #584]	@ 0x248
  //End HRTIM CHD


  //Low-Power Timer
  HAL_LPTIM_Counter_Start_IT(&hlptim1, LPTIM_ARR_ARR);
 80005f8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005fc:	4820      	ldr	r0, [pc, #128]	@ (8000680 <main+0x3a8>)
 80005fe:	f003 fce2 	bl	8003fc6 <HAL_LPTIM_Counter_Start_IT>
  HAL_LPTIM_PWM_Start(&hlptim1, LPTIM_ARR_ARR, LPTIM_CMP_CMP);
 8000602:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000606:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800060a:	481d      	ldr	r0, [pc, #116]	@ (8000680 <main+0x3a8>)
 800060c:	f003 fc8e 	bl	8003f2c <HAL_LPTIM_PWM_Start>
  HAL_GPIO_WritePin(LPTIM1_OUT_PH_GPIO_Port, LPTIM1_OUT_PH_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2104      	movs	r1, #4
 8000614:	4816      	ldr	r0, [pc, #88]	@ (8000670 <main+0x398>)
 8000616:	f002 fcdf 	bl	8002fd8 <HAL_GPIO_WritePin>
  	  LPTIM1->ARR = (12000-1);
 800061a:	4b1a      	ldr	r3, [pc, #104]	@ (8000684 <main+0x3ac>)
 800061c:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8000620:	619a      	str	r2, [r3, #24]

  //End Low Power Timer


  gen_sine();
 8000622:	f001 fb0d 	bl	8001c40 <gen_sine>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ctrl_tmr_expired == TRUE) control_update(ref);
 8000626:	4b18      	ldr	r3, [pc, #96]	@ (8000688 <main+0x3b0>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d1fb      	bne.n	8000626 <main+0x34e>
 800062e:	4b17      	ldr	r3, [pc, #92]	@ (800068c <main+0x3b4>)
 8000630:	ed93 7b00 	vldr	d7, [r3]
 8000634:	eeb0 0b47 	vmov.f64	d0, d7
 8000638:	f001 f90e 	bl	8001858 <control_update>
 800063c:	e7f3      	b.n	8000626 <main+0x34e>
 800063e:	bf00      	nop
 8000640:	24000160 	.word	0x24000160
 8000644:	58021000 	.word	0x58021000
 8000648:	240001ac 	.word	0x240001ac
 800064c:	240001f8 	.word	0x240001f8
 8000650:	58020400 	.word	0x58020400
 8000654:	58020800 	.word	0x58020800
 8000658:	24000244 	.word	0x24000244
 800065c:	24000290 	.word	0x24000290
 8000660:	240002dc 	.word	0x240002dc
 8000664:	24000328 	.word	0x24000328
 8000668:	24000374 	.word	0x24000374
 800066c:	240003c0 	.word	0x240003c0
 8000670:	58020c00 	.word	0x58020c00
 8000674:	2400040c 	.word	0x2400040c
 8000678:	2400004c 	.word	0x2400004c
 800067c:	40017400 	.word	0x40017400
 8000680:	24000128 	.word	0x24000128
 8000684:	40002400 	.word	0x40002400
 8000688:	24000458 	.word	0x24000458
 800068c:	24000460 	.word	0x24000460

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b09e      	sub	sp, #120	@ 0x78
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800069a:	224c      	movs	r2, #76	@ 0x4c
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f007 fe02 	bl	80082a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2220      	movs	r2, #32
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f007 fdfb 	bl	80082a8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006b2:	2002      	movs	r0, #2
 80006b4:	f003 ffe0 	bl	8004678 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b48      	ldr	r3, [pc, #288]	@ (80007e0 <SystemClock_Config+0x150>)
 80006be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006c0:	4a47      	ldr	r2, [pc, #284]	@ (80007e0 <SystemClock_Config+0x150>)
 80006c2:	f023 0301 	bic.w	r3, r3, #1
 80006c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80006c8:	4b45      	ldr	r3, [pc, #276]	@ (80007e0 <SystemClock_Config+0x150>)
 80006ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	4b44      	ldr	r3, [pc, #272]	@ (80007e4 <SystemClock_Config+0x154>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	4a43      	ldr	r2, [pc, #268]	@ (80007e4 <SystemClock_Config+0x154>)
 80006d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006dc:	6193      	str	r3, [r2, #24]
 80006de:	4b41      	ldr	r3, [pc, #260]	@ (80007e4 <SystemClock_Config+0x154>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ea:	bf00      	nop
 80006ec:	4b3d      	ldr	r3, [pc, #244]	@ (80007e4 <SystemClock_Config+0x154>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006f8:	d1f8      	bne.n	80006ec <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fa:	4b3b      	ldr	r3, [pc, #236]	@ (80007e8 <SystemClock_Config+0x158>)
 80006fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000700:	4a39      	ldr	r2, [pc, #228]	@ (80007e8 <SystemClock_Config+0x158>)
 8000702:	f043 0302 	orr.w	r3, r3, #2
 8000706:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800070a:	4b37      	ldr	r3, [pc, #220]	@ (80007e8 <SystemClock_Config+0x158>)
 800070c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000710:	f003 0302 	and.w	r3, r3, #2
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000718:	2300      	movs	r3, #0
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4b31      	ldr	r3, [pc, #196]	@ (80007e4 <SystemClock_Config+0x154>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a30      	ldr	r2, [pc, #192]	@ (80007e4 <SystemClock_Config+0x154>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b2e      	ldr	r3, [pc, #184]	@ (80007e4 <SystemClock_Config+0x154>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b2b      	ldr	r3, [pc, #172]	@ (80007e0 <SystemClock_Config+0x150>)
 8000734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000736:	4a2a      	ldr	r2, [pc, #168]	@ (80007e0 <SystemClock_Config+0x150>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800073e:	4b28      	ldr	r3, [pc, #160]	@ (80007e0 <SystemClock_Config+0x150>)
 8000740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800074a:	bf00      	nop
 800074c:	4b25      	ldr	r3, [pc, #148]	@ (80007e4 <SystemClock_Config+0x154>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000754:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000758:	d1f8      	bne.n	800074c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800075a:	2301      	movs	r3, #1
 800075c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800075e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000762:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000764:	2302      	movs	r3, #2
 8000766:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000768:	2302      	movs	r3, #2
 800076a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 800076c:	2302      	movs	r3, #2
 800076e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000770:	2350      	movs	r3, #80	@ 0x50
 8000772:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000774:	2302      	movs	r3, #2
 8000776:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000778:	2302      	movs	r3, #2
 800077a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800077c:	2302      	movs	r3, #2
 800077e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000780:	230c      	movs	r3, #12
 8000782:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000784:	2300      	movs	r3, #0
 8000786:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000790:	4618      	mov	r0, r3
 8000792:	f003 ffab 	bl	80046ec <HAL_RCC_OscConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800079c:	f001 fab2 	bl	8001d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a0:	233f      	movs	r3, #63	@ 0x3f
 80007a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a4:	2303      	movs	r3, #3
 80007a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007ac:	2308      	movs	r3, #8
 80007ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007b0:	2340      	movs	r3, #64	@ 0x40
 80007b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007b4:	2340      	movs	r3, #64	@ 0x40
 80007b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007be:	2340      	movs	r3, #64	@ 0x40
 80007c0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2104      	movs	r1, #4
 80007c8:	4618      	mov	r0, r3
 80007ca:	f004 fbe9 	bl	8004fa0 <HAL_RCC_ClockConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80007d4:	f001 fa96 	bl	8001d04 <Error_Handler>
  }
}
 80007d8:	bf00      	nop
 80007da:	3778      	adds	r7, #120	@ 0x78
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	58000400 	.word	0x58000400
 80007e4:	58024800 	.word	0x58024800
 80007e8:	58024400 	.word	0x58024400

080007ec <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b0a4      	sub	sp, #144	@ 0x90
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80007f2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000800:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000804:	2254      	movs	r2, #84	@ 0x54
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f007 fd4d 	bl	80082a8 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 800080e:	f107 0320 	add.w	r3, r7, #32
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 800081a:	463b      	mov	r3, r7
 800081c:	2220      	movs	r2, #32
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f007 fd41 	bl	80082a8 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8000826:	4bc0      	ldr	r3, [pc, #768]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 8000828:	4ac0      	ldr	r2, [pc, #768]	@ (8000b2c <MX_HRTIM_Init+0x340>)
 800082a:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 800082c:	4bbe      	ldr	r3, [pc, #760]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000832:	4bbd      	ldr	r3, [pc, #756]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8000838:	48bb      	ldr	r0, [pc, #748]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 800083a:	f002 fbe7 	bl	800300c <HAL_HRTIM_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 8000844:	f001 fa5e 	bl	8001d04 <Error_Handler>
  }
  pTimeBaseCfg.Period = 24000-1;
 8000848:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 800084c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000850:	2300      	movs	r3, #0
 8000852:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000856:	2305      	movs	r3, #5
 8000858:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800085c:	2308      	movs	r3, #8
 800085e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000862:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000866:	461a      	mov	r2, r3
 8000868:	2100      	movs	r1, #0
 800086a:	48af      	ldr	r0, [pc, #700]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 800086c:	f002 fc9e 	bl	80031ac <HAL_HRTIM_TimeBaseConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 8000876:	f001 fa45 	bl	8001d04 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 800087a:	2300      	movs	r3, #0
 800087c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 800087e:	2300      	movs	r3, #0
 8000880:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8000882:	2300      	movs	r3, #0
 8000884:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8000886:	2300      	movs	r3, #0
 8000888:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.DMASize = 0x1;
 800088a:	2301      	movs	r3, #1
 800088c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 800088e:	2300      	movs	r3, #0
 8000890:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000892:	2300      	movs	r3, #0
 8000894:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000896:	2300      	movs	r3, #0
 8000898:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800089a:	2300      	movs	r3, #0
 800089c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 800089e:	2300      	movs	r3, #0
 80008a0:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80008a2:	2300      	movs	r3, #0
 80008a4:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80008a6:	2300      	movs	r3, #0
 80008a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80008aa:	2300      	movs	r3, #0
 80008ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80008ae:	2300      	movs	r3, #0
 80008b0:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80008ba:	2300      	movs	r3, #0
 80008bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80008be:	2300      	movs	r3, #0
 80008c0:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80008ca:	2300      	movs	r3, #0
 80008cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80008ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008d2:	461a      	mov	r2, r3
 80008d4:	2100      	movs	r1, #0
 80008d6:	4894      	ldr	r0, [pc, #592]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 80008d8:	f002 fd18 	bl	800330c <HAL_HRTIM_WaveformTimerConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 80008e2:	f001 fa0f 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 80008e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008ea:	461a      	mov	r2, r3
 80008ec:	2101      	movs	r1, #1
 80008ee:	488e      	ldr	r0, [pc, #568]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 80008f0:	f002 fd0c 	bl	800330c <HAL_HRTIM_WaveformTimerConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_HRTIM_Init+0x112>
  {
    Error_Handler();
 80008fa:	f001 fa03 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 80008fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000902:	461a      	mov	r2, r3
 8000904:	2102      	movs	r1, #2
 8000906:	4888      	ldr	r0, [pc, #544]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 8000908:	f002 fd00 	bl	800330c <HAL_HRTIM_WaveformTimerConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_HRTIM_Init+0x12a>
  {
    Error_Handler();
 8000912:	f001 f9f7 	bl	8001d04 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8000916:	2300      	movs	r3, #0
 8000918:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 800091a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800091e:	461a      	mov	r2, r3
 8000920:	2103      	movs	r1, #3
 8000922:	4881      	ldr	r0, [pc, #516]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 8000924:	f002 fcf2 	bl	800330c <HAL_HRTIM_WaveformTimerConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_HRTIM_Init+0x146>
  {
    Error_Handler();
 800092e:	f001 f9e9 	bl	8001d04 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x00005A00/2;
 8000932:	f44f 5334 	mov.w	r3, #11520	@ 0x2d00
 8000936:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000938:	f107 0320 	add.w	r3, r7, #32
 800093c:	2201      	movs	r2, #1
 800093e:	2100      	movs	r1, #0
 8000940:	4879      	ldr	r0, [pc, #484]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 8000942:	f002 fd55 	bl	80033f0 <HAL_HRTIM_WaveformCompareConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_HRTIM_Init+0x164>
  {
    Error_Handler();
 800094c:	f001 f9da 	bl	8001d04 <Error_Handler>
  }
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	@ 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000958:	f107 0320 	add.w	r3, r7, #32
 800095c:	2202      	movs	r2, #2
 800095e:	2100      	movs	r1, #0
 8000960:	4871      	ldr	r0, [pc, #452]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 8000962:	f002 fd45 	bl	80033f0 <HAL_HRTIM_WaveformCompareConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_HRTIM_Init+0x184>
  {
    Error_Handler();
 800096c:	f001 f9ca 	bl	8001d04 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000970:	f107 0320 	add.w	r3, r7, #32
 8000974:	2202      	movs	r2, #2
 8000976:	2101      	movs	r1, #1
 8000978:	486b      	ldr	r0, [pc, #428]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 800097a:	f002 fd39 	bl	80033f0 <HAL_HRTIM_WaveformCompareConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_HRTIM_Init+0x19c>
  {
    Error_Handler();
 8000984:	f001 f9be 	bl	8001d04 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000988:	f107 0320 	add.w	r3, r7, #32
 800098c:	2202      	movs	r2, #2
 800098e:	2102      	movs	r1, #2
 8000990:	4865      	ldr	r0, [pc, #404]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 8000992:	f002 fd2d 	bl	80033f0 <HAL_HRTIM_WaveformCompareConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_HRTIM_Init+0x1b4>
  {
    Error_Handler();
 800099c:	f001 f9b2 	bl	8001d04 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80009a0:	f107 0320 	add.w	r3, r7, #32
 80009a4:	2202      	movs	r2, #2
 80009a6:	2103      	movs	r1, #3
 80009a8:	485f      	ldr	r0, [pc, #380]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 80009aa:	f002 fd21 	bl	80033f0 <HAL_HRTIM_WaveformCompareConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_HRTIM_Init+0x1cc>
  {
    Error_Handler();
 80009b4:	f001 f9a6 	bl	8001d04 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 80009b8:	2300      	movs	r3, #0
 80009ba:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	2201      	movs	r2, #1
 80009dc:	2100      	movs	r1, #0
 80009de:	4852      	ldr	r0, [pc, #328]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 80009e0:	f002 fe74 	bl	80036cc <HAL_HRTIM_WaveformOutputConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_HRTIM_Init+0x202>
  {
    Error_Handler();
 80009ea:	f001 f98b 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 80009ee:	463b      	mov	r3, r7
 80009f0:	2204      	movs	r2, #4
 80009f2:	2101      	movs	r1, #1
 80009f4:	484c      	ldr	r0, [pc, #304]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 80009f6:	f002 fe69 	bl	80036cc <HAL_HRTIM_WaveformOutputConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_HRTIM_Init+0x218>
  {
    Error_Handler();
 8000a00:	f001 f980 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8000a04:	463b      	mov	r3, r7
 8000a06:	2210      	movs	r2, #16
 8000a08:	2102      	movs	r1, #2
 8000a0a:	4847      	ldr	r0, [pc, #284]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 8000a0c:	f002 fe5e 	bl	80036cc <HAL_HRTIM_WaveformOutputConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_HRTIM_Init+0x22e>
  {
    Error_Handler();
 8000a16:	f001 f975 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2240      	movs	r2, #64	@ 0x40
 8000a1e:	2103      	movs	r1, #3
 8000a20:	4841      	ldr	r0, [pc, #260]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 8000a22:	f002 fe53 	bl	80036cc <HAL_HRTIM_WaveformOutputConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_HRTIM_Init+0x244>
  {
    Error_Handler();
 8000a2c:	f001 f96a 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8000a30:	463b      	mov	r3, r7
 8000a32:	2202      	movs	r2, #2
 8000a34:	2100      	movs	r1, #0
 8000a36:	483c      	ldr	r0, [pc, #240]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 8000a38:	f002 fe48 	bl	80036cc <HAL_HRTIM_WaveformOutputConfig>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_HRTIM_Init+0x25a>
  {
    Error_Handler();
 8000a42:	f001 f95f 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8000a46:	463b      	mov	r3, r7
 8000a48:	2208      	movs	r2, #8
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	4836      	ldr	r0, [pc, #216]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 8000a4e:	f002 fe3d 	bl	80036cc <HAL_HRTIM_WaveformOutputConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_HRTIM_Init+0x270>
  {
    Error_Handler();
 8000a58:	f001 f954 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	2220      	movs	r2, #32
 8000a60:	2102      	movs	r1, #2
 8000a62:	4831      	ldr	r0, [pc, #196]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 8000a64:	f002 fe32 	bl	80036cc <HAL_HRTIM_WaveformOutputConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_HRTIM_Init+0x286>
  {
    Error_Handler();
 8000a6e:	f001 f949 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8000a72:	463b      	mov	r3, r7
 8000a74:	2280      	movs	r2, #128	@ 0x80
 8000a76:	2103      	movs	r1, #3
 8000a78:	482b      	ldr	r0, [pc, #172]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 8000a7a:	f002 fe27 	bl	80036cc <HAL_HRTIM_WaveformOutputConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_HRTIM_Init+0x29c>
  {
    Error_Handler();
 8000a84:	f001 f93e 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8000a88:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	2101      	movs	r1, #1
 8000a90:	4825      	ldr	r0, [pc, #148]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 8000a92:	f002 fb8b 	bl	80031ac <HAL_HRTIM_TimeBaseConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_HRTIM_Init+0x2b4>
  {
    Error_Handler();
 8000a9c:	f001 f932 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000aa0:	f107 0320 	add.w	r3, r7, #32
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	481f      	ldr	r0, [pc, #124]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 8000aaa:	f002 fca1 	bl	80033f0 <HAL_HRTIM_WaveformCompareConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_HRTIM_Init+0x2cc>
  {
    Error_Handler();
 8000ab4:	f001 f926 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8000ab8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000abc:	461a      	mov	r2, r3
 8000abe:	2102      	movs	r1, #2
 8000ac0:	4819      	ldr	r0, [pc, #100]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 8000ac2:	f002 fb73 	bl	80031ac <HAL_HRTIM_TimeBaseConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_HRTIM_Init+0x2e4>
  {
    Error_Handler();
 8000acc:	f001 f91a 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000ad0:	f107 0320 	add.w	r3, r7, #32
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	4813      	ldr	r0, [pc, #76]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 8000ada:	f002 fc89 	bl	80033f0 <HAL_HRTIM_WaveformCompareConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_HRTIM_Init+0x2fc>
  {
    Error_Handler();
 8000ae4:	f001 f90e 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000ae8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000aec:	461a      	mov	r2, r3
 8000aee:	2103      	movs	r1, #3
 8000af0:	480d      	ldr	r0, [pc, #52]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 8000af2:	f002 fb5b 	bl	80031ac <HAL_HRTIM_TimeBaseConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_HRTIM_Init+0x314>
  {
    Error_Handler();
 8000afc:	f001 f902 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000b00:	f107 0320 	add.w	r3, r7, #32
 8000b04:	2201      	movs	r2, #1
 8000b06:	2103      	movs	r1, #3
 8000b08:	4807      	ldr	r0, [pc, #28]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 8000b0a:	f002 fc71 	bl	80033f0 <HAL_HRTIM_WaveformCompareConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_HRTIM_Init+0x32c>
  {
    Error_Handler();
 8000b14:	f001 f8f6 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8000b18:	4803      	ldr	r0, [pc, #12]	@ (8000b28 <MX_HRTIM_Init+0x33c>)
 8000b1a:	f001 f94d 	bl	8001db8 <HAL_HRTIM_MspPostInit>

}
 8000b1e:	bf00      	nop
 8000b20:	3790      	adds	r7, #144	@ 0x90
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2400004c 	.word	0x2400004c
 8000b2c:	40017400 	.word	0x40017400

08000b30 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000b34:	4b13      	ldr	r3, [pc, #76]	@ (8000b84 <MX_LPTIM1_Init+0x54>)
 8000b36:	4a14      	ldr	r2, [pc, #80]	@ (8000b88 <MX_LPTIM1_Init+0x58>)
 8000b38:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000b3a:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <MX_LPTIM1_Init+0x54>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000b40:	4b10      	ldr	r3, [pc, #64]	@ (8000b84 <MX_LPTIM1_Init+0x54>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000b46:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <MX_LPTIM1_Init+0x54>)
 8000b48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b4c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_LOW;
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b84 <MX_LPTIM1_Init+0x54>)
 8000b50:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000b54:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	@ (8000b84 <MX_LPTIM1_Init+0x54>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <MX_LPTIM1_Init+0x54>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000b62:	4b08      	ldr	r3, [pc, #32]	@ (8000b84 <MX_LPTIM1_Init+0x54>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <MX_LPTIM1_Init+0x54>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <MX_LPTIM1_Init+0x54>)
 8000b70:	f003 f92c 	bl	8003dcc <HAL_LPTIM_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8000b7a:	f001 f8c3 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	24000128 	.word	0x24000128
 8000b88:	40002400 	.word	0x40002400

08000b8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b09a      	sub	sp, #104	@ 0x68
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b92:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
 8000bbc:	615a      	str	r2, [r3, #20]
 8000bbe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	222c      	movs	r2, #44	@ 0x2c
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f007 fb6e 	bl	80082a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bcc:	4b55      	ldr	r3, [pc, #340]	@ (8000d24 <MX_TIM1_Init+0x198>)
 8000bce:	4a56      	ldr	r2, [pc, #344]	@ (8000d28 <MX_TIM1_Init+0x19c>)
 8000bd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bd2:	4b54      	ldr	r3, [pc, #336]	@ (8000d24 <MX_TIM1_Init+0x198>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd8:	4b52      	ldr	r3, [pc, #328]	@ (8000d24 <MX_TIM1_Init+0x198>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000-1;
 8000bde:	4b51      	ldr	r3, [pc, #324]	@ (8000d24 <MX_TIM1_Init+0x198>)
 8000be0:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000be4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be6:	4b4f      	ldr	r3, [pc, #316]	@ (8000d24 <MX_TIM1_Init+0x198>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bec:	4b4d      	ldr	r3, [pc, #308]	@ (8000d24 <MX_TIM1_Init+0x198>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bf2:	4b4c      	ldr	r3, [pc, #304]	@ (8000d24 <MX_TIM1_Init+0x198>)
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bf8:	484a      	ldr	r0, [pc, #296]	@ (8000d24 <MX_TIM1_Init+0x198>)
 8000bfa:	f006 f86f 	bl	8006cdc <HAL_TIM_Base_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c04:	f001 f87e 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c0e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000c12:	4619      	mov	r1, r3
 8000c14:	4843      	ldr	r0, [pc, #268]	@ (8000d24 <MX_TIM1_Init+0x198>)
 8000c16:	f006 fcbd 	bl	8007594 <HAL_TIM_ConfigClockSource>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c20:	f001 f870 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c24:	483f      	ldr	r0, [pc, #252]	@ (8000d24 <MX_TIM1_Init+0x198>)
 8000c26:	f006 f929 	bl	8006e7c <HAL_TIM_PWM_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000c30:	f001 f868 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c34:	2300      	movs	r3, #0
 8000c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c40:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c44:	4619      	mov	r1, r3
 8000c46:	4837      	ldr	r0, [pc, #220]	@ (8000d24 <MX_TIM1_Init+0x198>)
 8000c48:	f007 fa04 	bl	8008054 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000c52:	f001 f857 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c56:	2360      	movs	r3, #96	@ 0x60
 8000c58:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c62:	2300      	movs	r3, #0
 8000c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c72:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c76:	2200      	movs	r2, #0
 8000c78:	4619      	mov	r1, r3
 8000c7a:	482a      	ldr	r0, [pc, #168]	@ (8000d24 <MX_TIM1_Init+0x198>)
 8000c7c:	f006 fb76 	bl	800736c <HAL_TIM_PWM_ConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000c86:	f001 f83d 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c8a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c8e:	2204      	movs	r2, #4
 8000c90:	4619      	mov	r1, r3
 8000c92:	4824      	ldr	r0, [pc, #144]	@ (8000d24 <MX_TIM1_Init+0x198>)
 8000c94:	f006 fb6a 	bl	800736c <HAL_TIM_PWM_ConfigChannel>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000c9e:	f001 f831 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ca2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ca6:	2208      	movs	r2, #8
 8000ca8:	4619      	mov	r1, r3
 8000caa:	481e      	ldr	r0, [pc, #120]	@ (8000d24 <MX_TIM1_Init+0x198>)
 8000cac:	f006 fb5e 	bl	800736c <HAL_TIM_PWM_ConfigChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000cb6:	f001 f825 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4818      	ldr	r0, [pc, #96]	@ (8000d24 <MX_TIM1_Init+0x198>)
 8000cc4:	f006 fb52 	bl	800736c <HAL_TIM_PWM_ConfigChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000cce:	f001 f819 	bl	8001d04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ce6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000cf4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4619      	mov	r1, r3
 8000d06:	4807      	ldr	r0, [pc, #28]	@ (8000d24 <MX_TIM1_Init+0x198>)
 8000d08:	f007 fa32 	bl	8008170 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000d12:	f000 fff7 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d16:	4803      	ldr	r0, [pc, #12]	@ (8000d24 <MX_TIM1_Init+0x198>)
 8000d18:	f001 fa6c 	bl	80021f4 <HAL_TIM_MspPostInit>

}
 8000d1c:	bf00      	nop
 8000d1e:	3768      	adds	r7, #104	@ 0x68
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	24000160 	.word	0x24000160
 8000d28:	40010000 	.word	0x40010000

08000d2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08e      	sub	sp, #56	@ 0x38
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
 8000d58:	611a      	str	r2, [r3, #16]
 8000d5a:	615a      	str	r2, [r3, #20]
 8000d5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e14 <MX_TIM2_Init+0xe8>)
 8000d60:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d66:	4b2b      	ldr	r3, [pc, #172]	@ (8000e14 <MX_TIM2_Init+0xe8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6c:	4b29      	ldr	r3, [pc, #164]	@ (8000e14 <MX_TIM2_Init+0xe8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000-1;
 8000d72:	4b28      	ldr	r3, [pc, #160]	@ (8000e14 <MX_TIM2_Init+0xe8>)
 8000d74:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000d78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7a:	4b26      	ldr	r3, [pc, #152]	@ (8000e14 <MX_TIM2_Init+0xe8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d80:	4b24      	ldr	r3, [pc, #144]	@ (8000e14 <MX_TIM2_Init+0xe8>)
 8000d82:	2280      	movs	r2, #128	@ 0x80
 8000d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d86:	4823      	ldr	r0, [pc, #140]	@ (8000e14 <MX_TIM2_Init+0xe8>)
 8000d88:	f005 ffa8 	bl	8006cdc <HAL_TIM_Base_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d92:	f000 ffb7 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000da0:	4619      	mov	r1, r3
 8000da2:	481c      	ldr	r0, [pc, #112]	@ (8000e14 <MX_TIM2_Init+0xe8>)
 8000da4:	f006 fbf6 	bl	8007594 <HAL_TIM_ConfigClockSource>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000dae:	f000 ffa9 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000db2:	4818      	ldr	r0, [pc, #96]	@ (8000e14 <MX_TIM2_Init+0xe8>)
 8000db4:	f006 f862 	bl	8006e7c <HAL_TIM_PWM_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000dbe:	f000 ffa1 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4810      	ldr	r0, [pc, #64]	@ (8000e14 <MX_TIM2_Init+0xe8>)
 8000dd2:	f007 f93f 	bl	8008054 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ddc:	f000 ff92 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de0:	2360      	movs	r3, #96	@ 0x60
 8000de2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000df0:	463b      	mov	r3, r7
 8000df2:	2200      	movs	r2, #0
 8000df4:	4619      	mov	r1, r3
 8000df6:	4807      	ldr	r0, [pc, #28]	@ (8000e14 <MX_TIM2_Init+0xe8>)
 8000df8:	f006 fab8 	bl	800736c <HAL_TIM_PWM_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000e02:	f000 ff7f 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e06:	4803      	ldr	r0, [pc, #12]	@ (8000e14 <MX_TIM2_Init+0xe8>)
 8000e08:	f001 f9f4 	bl	80021f4 <HAL_TIM_MspPostInit>

}
 8000e0c:	bf00      	nop
 8000e0e:	3738      	adds	r7, #56	@ 0x38
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	240001ac 	.word	0x240001ac

08000e18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08e      	sub	sp, #56	@ 0x38
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e38:	463b      	mov	r3, r7
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]
 8000e46:	615a      	str	r2, [r3, #20]
 8000e48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e4a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f40 <MX_TIM4_Init+0x128>)
 8000e4c:	4a3d      	ldr	r2, [pc, #244]	@ (8000f44 <MX_TIM4_Init+0x12c>)
 8000e4e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e50:	4b3b      	ldr	r3, [pc, #236]	@ (8000f40 <MX_TIM4_Init+0x128>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e56:	4b3a      	ldr	r3, [pc, #232]	@ (8000f40 <MX_TIM4_Init+0x128>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 24000-1;
 8000e5c:	4b38      	ldr	r3, [pc, #224]	@ (8000f40 <MX_TIM4_Init+0x128>)
 8000e5e:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000e62:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e64:	4b36      	ldr	r3, [pc, #216]	@ (8000f40 <MX_TIM4_Init+0x128>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e6a:	4b35      	ldr	r3, [pc, #212]	@ (8000f40 <MX_TIM4_Init+0x128>)
 8000e6c:	2280      	movs	r2, #128	@ 0x80
 8000e6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e70:	4833      	ldr	r0, [pc, #204]	@ (8000f40 <MX_TIM4_Init+0x128>)
 8000e72:	f005 ff33 	bl	8006cdc <HAL_TIM_Base_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000e7c:	f000 ff42 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e84:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	482c      	ldr	r0, [pc, #176]	@ (8000f40 <MX_TIM4_Init+0x128>)
 8000e8e:	f006 fb81 	bl	8007594 <HAL_TIM_ConfigClockSource>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000e98:	f000 ff34 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e9c:	4828      	ldr	r0, [pc, #160]	@ (8000f40 <MX_TIM4_Init+0x128>)
 8000e9e:	f005 ffed 	bl	8006e7c <HAL_TIM_PWM_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000ea8:	f000 ff2c 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000eb4:	f107 031c 	add.w	r3, r7, #28
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4821      	ldr	r0, [pc, #132]	@ (8000f40 <MX_TIM4_Init+0x128>)
 8000ebc:	f007 f8ca 	bl	8008054 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000ec6:	f000 ff1d 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eca:	2360      	movs	r3, #96	@ 0x60
 8000ecc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eda:	463b      	mov	r3, r7
 8000edc:	2200      	movs	r2, #0
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4817      	ldr	r0, [pc, #92]	@ (8000f40 <MX_TIM4_Init+0x128>)
 8000ee2:	f006 fa43 	bl	800736c <HAL_TIM_PWM_ConfigChannel>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000eec:	f000 ff0a 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4812      	ldr	r0, [pc, #72]	@ (8000f40 <MX_TIM4_Init+0x128>)
 8000ef8:	f006 fa38 	bl	800736c <HAL_TIM_PWM_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000f02:	f000 feff 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f06:	463b      	mov	r3, r7
 8000f08:	2208      	movs	r2, #8
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	480c      	ldr	r0, [pc, #48]	@ (8000f40 <MX_TIM4_Init+0x128>)
 8000f0e:	f006 fa2d 	bl	800736c <HAL_TIM_PWM_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000f18:	f000 fef4 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	220c      	movs	r2, #12
 8000f20:	4619      	mov	r1, r3
 8000f22:	4807      	ldr	r0, [pc, #28]	@ (8000f40 <MX_TIM4_Init+0x128>)
 8000f24:	f006 fa22 	bl	800736c <HAL_TIM_PWM_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8000f2e:	f000 fee9 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f32:	4803      	ldr	r0, [pc, #12]	@ (8000f40 <MX_TIM4_Init+0x128>)
 8000f34:	f001 f95e 	bl	80021f4 <HAL_TIM_MspPostInit>

}
 8000f38:	bf00      	nop
 8000f3a:	3738      	adds	r7, #56	@ 0x38
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	240001f8 	.word	0x240001f8
 8000f44:	40000800 	.word	0x40000800

08000f48 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08e      	sub	sp, #56	@ 0x38
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f68:	463b      	mov	r3, r7
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	611a      	str	r2, [r3, #16]
 8000f76:	615a      	str	r2, [r3, #20]
 8000f78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f7a:	4b32      	ldr	r3, [pc, #200]	@ (8001044 <MX_TIM5_Init+0xfc>)
 8000f7c:	4a32      	ldr	r2, [pc, #200]	@ (8001048 <MX_TIM5_Init+0x100>)
 8000f7e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f80:	4b30      	ldr	r3, [pc, #192]	@ (8001044 <MX_TIM5_Init+0xfc>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f86:	4b2f      	ldr	r3, [pc, #188]	@ (8001044 <MX_TIM5_Init+0xfc>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 24000-1;
 8000f8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001044 <MX_TIM5_Init+0xfc>)
 8000f8e:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000f92:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f94:	4b2b      	ldr	r3, [pc, #172]	@ (8001044 <MX_TIM5_Init+0xfc>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001044 <MX_TIM5_Init+0xfc>)
 8000f9c:	2280      	movs	r2, #128	@ 0x80
 8000f9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000fa0:	4828      	ldr	r0, [pc, #160]	@ (8001044 <MX_TIM5_Init+0xfc>)
 8000fa2:	f005 fe9b 	bl	8006cdc <HAL_TIM_Base_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8000fac:	f000 feaa 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000fb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4821      	ldr	r0, [pc, #132]	@ (8001044 <MX_TIM5_Init+0xfc>)
 8000fbe:	f006 fae9 	bl	8007594 <HAL_TIM_ConfigClockSource>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8000fc8:	f000 fe9c 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000fcc:	481d      	ldr	r0, [pc, #116]	@ (8001044 <MX_TIM5_Init+0xfc>)
 8000fce:	f005 ff55 	bl	8006e7c <HAL_TIM_PWM_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8000fd8:	f000 fe94 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4816      	ldr	r0, [pc, #88]	@ (8001044 <MX_TIM5_Init+0xfc>)
 8000fec:	f007 f832 	bl	8008054 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000ff6:	f000 fe85 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ffa:	2360      	movs	r3, #96	@ 0x60
 8000ffc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800100a:	463b      	mov	r3, r7
 800100c:	2204      	movs	r2, #4
 800100e:	4619      	mov	r1, r3
 8001010:	480c      	ldr	r0, [pc, #48]	@ (8001044 <MX_TIM5_Init+0xfc>)
 8001012:	f006 f9ab 	bl	800736c <HAL_TIM_PWM_ConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800101c:	f000 fe72 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001020:	463b      	mov	r3, r7
 8001022:	2208      	movs	r2, #8
 8001024:	4619      	mov	r1, r3
 8001026:	4807      	ldr	r0, [pc, #28]	@ (8001044 <MX_TIM5_Init+0xfc>)
 8001028:	f006 f9a0 	bl	800736c <HAL_TIM_PWM_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8001032:	f000 fe67 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001036:	4803      	ldr	r0, [pc, #12]	@ (8001044 <MX_TIM5_Init+0xfc>)
 8001038:	f001 f8dc 	bl	80021f4 <HAL_TIM_MspPostInit>

}
 800103c:	bf00      	nop
 800103e:	3738      	adds	r7, #56	@ 0x38
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	24000244 	.word	0x24000244
 8001048:	40000c00 	.word	0x40000c00

0800104c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b09a      	sub	sp, #104	@ 0x68
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001052:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001060:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800106c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
 800107c:	615a      	str	r2, [r3, #20]
 800107e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	222c      	movs	r2, #44	@ 0x2c
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f007 f90e 	bl	80082a8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800108c:	4b42      	ldr	r3, [pc, #264]	@ (8001198 <MX_TIM8_Init+0x14c>)
 800108e:	4a43      	ldr	r2, [pc, #268]	@ (800119c <MX_TIM8_Init+0x150>)
 8001090:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001092:	4b41      	ldr	r3, [pc, #260]	@ (8001198 <MX_TIM8_Init+0x14c>)
 8001094:	2200      	movs	r2, #0
 8001096:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001098:	4b3f      	ldr	r3, [pc, #252]	@ (8001198 <MX_TIM8_Init+0x14c>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 24000-1;
 800109e:	4b3e      	ldr	r3, [pc, #248]	@ (8001198 <MX_TIM8_Init+0x14c>)
 80010a0:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80010a4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001198 <MX_TIM8_Init+0x14c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80010ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <MX_TIM8_Init+0x14c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010b2:	4b39      	ldr	r3, [pc, #228]	@ (8001198 <MX_TIM8_Init+0x14c>)
 80010b4:	2280      	movs	r2, #128	@ 0x80
 80010b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80010b8:	4837      	ldr	r0, [pc, #220]	@ (8001198 <MX_TIM8_Init+0x14c>)
 80010ba:	f005 fe0f 	bl	8006cdc <HAL_TIM_Base_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80010c4:	f000 fe1e 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80010ce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80010d2:	4619      	mov	r1, r3
 80010d4:	4830      	ldr	r0, [pc, #192]	@ (8001198 <MX_TIM8_Init+0x14c>)
 80010d6:	f006 fa5d 	bl	8007594 <HAL_TIM_ConfigClockSource>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80010e0:	f000 fe10 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80010e4:	482c      	ldr	r0, [pc, #176]	@ (8001198 <MX_TIM8_Init+0x14c>)
 80010e6:	f005 fec9 	bl	8006e7c <HAL_TIM_PWM_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80010f0:	f000 fe08 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f4:	2300      	movs	r3, #0
 80010f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010f8:	2300      	movs	r3, #0
 80010fa:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001100:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001104:	4619      	mov	r1, r3
 8001106:	4824      	ldr	r0, [pc, #144]	@ (8001198 <MX_TIM8_Init+0x14c>)
 8001108:	f006 ffa4 	bl	8008054 <HAL_TIMEx_MasterConfigSynchronization>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001112:	f000 fdf7 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001116:	2360      	movs	r3, #96	@ 0x60
 8001118:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111e:	2300      	movs	r3, #0
 8001120:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800112e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001132:	220c      	movs	r2, #12
 8001134:	4619      	mov	r1, r3
 8001136:	4818      	ldr	r0, [pc, #96]	@ (8001198 <MX_TIM8_Init+0x14c>)
 8001138:	f006 f918 	bl	800736c <HAL_TIM_PWM_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8001142:	f000 fddf 	bl	8001d04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800115a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800115e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001168:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800116c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	4619      	mov	r1, r3
 800117a:	4807      	ldr	r0, [pc, #28]	@ (8001198 <MX_TIM8_Init+0x14c>)
 800117c:	f006 fff8 	bl	8008170 <HAL_TIMEx_ConfigBreakDeadTime>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001186:	f000 fdbd 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800118a:	4803      	ldr	r0, [pc, #12]	@ (8001198 <MX_TIM8_Init+0x14c>)
 800118c:	f001 f832 	bl	80021f4 <HAL_TIM_MspPostInit>

}
 8001190:	bf00      	nop
 8001192:	3768      	adds	r7, #104	@ 0x68
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	24000290 	.word	0x24000290
 800119c:	40010400 	.word	0x40010400

080011a0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08e      	sub	sp, #56	@ 0x38
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c0:	463b      	mov	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
 80011ce:	615a      	str	r2, [r3, #20]
 80011d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80011d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001288 <MX_TIM12_Init+0xe8>)
 80011d4:	4a2d      	ldr	r2, [pc, #180]	@ (800128c <MX_TIM12_Init+0xec>)
 80011d6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80011d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001288 <MX_TIM12_Init+0xe8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011de:	4b2a      	ldr	r3, [pc, #168]	@ (8001288 <MX_TIM12_Init+0xe8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 24000-1;
 80011e4:	4b28      	ldr	r3, [pc, #160]	@ (8001288 <MX_TIM12_Init+0xe8>)
 80011e6:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80011ea:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ec:	4b26      	ldr	r3, [pc, #152]	@ (8001288 <MX_TIM12_Init+0xe8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011f2:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <MX_TIM12_Init+0xe8>)
 80011f4:	2280      	movs	r2, #128	@ 0x80
 80011f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80011f8:	4823      	ldr	r0, [pc, #140]	@ (8001288 <MX_TIM12_Init+0xe8>)
 80011fa:	f005 fd6f 	bl	8006cdc <HAL_TIM_Base_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM12_Init+0x68>
  {
    Error_Handler();
 8001204:	f000 fd7e 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001208:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800120e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001212:	4619      	mov	r1, r3
 8001214:	481c      	ldr	r0, [pc, #112]	@ (8001288 <MX_TIM12_Init+0xe8>)
 8001216:	f006 f9bd 	bl	8007594 <HAL_TIM_ConfigClockSource>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM12_Init+0x84>
  {
    Error_Handler();
 8001220:	f000 fd70 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001224:	4818      	ldr	r0, [pc, #96]	@ (8001288 <MX_TIM12_Init+0xe8>)
 8001226:	f005 fe29 	bl	8006e7c <HAL_TIM_PWM_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM12_Init+0x94>
  {
    Error_Handler();
 8001230:	f000 fd68 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	4811      	ldr	r0, [pc, #68]	@ (8001288 <MX_TIM12_Init+0xe8>)
 8001244:	f006 ff06 	bl	8008054 <HAL_TIMEx_MasterConfigSynchronization>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 800124e:	f000 fd59 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001252:	2360      	movs	r3, #96	@ 0x60
 8001254:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	2204      	movs	r2, #4
 8001266:	4619      	mov	r1, r3
 8001268:	4807      	ldr	r0, [pc, #28]	@ (8001288 <MX_TIM12_Init+0xe8>)
 800126a:	f006 f87f 	bl	800736c <HAL_TIM_PWM_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM12_Init+0xd8>
  {
    Error_Handler();
 8001274:	f000 fd46 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001278:	4803      	ldr	r0, [pc, #12]	@ (8001288 <MX_TIM12_Init+0xe8>)
 800127a:	f000 ffbb 	bl	80021f4 <HAL_TIM_MspPostInit>

}
 800127e:	bf00      	nop
 8001280:	3738      	adds	r7, #56	@ 0x38
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	240002dc 	.word	0x240002dc
 800128c:	40001800 	.word	0x40001800

08001290 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
 80012a4:	615a      	str	r2, [r3, #20]
 80012a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80012a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001324 <MX_TIM13_Init+0x94>)
 80012aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001328 <MX_TIM13_Init+0x98>)
 80012ac:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80012ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <MX_TIM13_Init+0x94>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <MX_TIM13_Init+0x94>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 24000-1;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <MX_TIM13_Init+0x94>)
 80012bc:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80012c0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c2:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <MX_TIM13_Init+0x94>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012c8:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <MX_TIM13_Init+0x94>)
 80012ca:	2280      	movs	r2, #128	@ 0x80
 80012cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80012ce:	4815      	ldr	r0, [pc, #84]	@ (8001324 <MX_TIM13_Init+0x94>)
 80012d0:	f005 fd04 	bl	8006cdc <HAL_TIM_Base_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80012da:	f000 fd13 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80012de:	4811      	ldr	r0, [pc, #68]	@ (8001324 <MX_TIM13_Init+0x94>)
 80012e0:	f005 fdcc 	bl	8006e7c <HAL_TIM_PWM_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80012ea:	f000 fd0b 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ee:	2360      	movs	r3, #96	@ 0x60
 80012f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2200      	movs	r2, #0
 8001302:	4619      	mov	r1, r3
 8001304:	4807      	ldr	r0, [pc, #28]	@ (8001324 <MX_TIM13_Init+0x94>)
 8001306:	f006 f831 	bl	800736c <HAL_TIM_PWM_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001310:	f000 fcf8 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001314:	4803      	ldr	r0, [pc, #12]	@ (8001324 <MX_TIM13_Init+0x94>)
 8001316:	f000 ff6d 	bl	80021f4 <HAL_TIM_MspPostInit>

}
 800131a:	bf00      	nop
 800131c:	3720      	adds	r7, #32
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	24000328 	.word	0x24000328
 8001328:	40001c00 	.word	0x40001c00

0800132c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
 8001340:	615a      	str	r2, [r3, #20]
 8001342:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001344:	4b1e      	ldr	r3, [pc, #120]	@ (80013c0 <MX_TIM14_Init+0x94>)
 8001346:	4a1f      	ldr	r2, [pc, #124]	@ (80013c4 <MX_TIM14_Init+0x98>)
 8001348:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800134a:	4b1d      	ldr	r3, [pc, #116]	@ (80013c0 <MX_TIM14_Init+0x94>)
 800134c:	2200      	movs	r2, #0
 800134e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001350:	4b1b      	ldr	r3, [pc, #108]	@ (80013c0 <MX_TIM14_Init+0x94>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 24000-1;
 8001356:	4b1a      	ldr	r3, [pc, #104]	@ (80013c0 <MX_TIM14_Init+0x94>)
 8001358:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800135c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135e:	4b18      	ldr	r3, [pc, #96]	@ (80013c0 <MX_TIM14_Init+0x94>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001364:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <MX_TIM14_Init+0x94>)
 8001366:	2280      	movs	r2, #128	@ 0x80
 8001368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800136a:	4815      	ldr	r0, [pc, #84]	@ (80013c0 <MX_TIM14_Init+0x94>)
 800136c:	f005 fcb6 	bl	8006cdc <HAL_TIM_Base_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001376:	f000 fcc5 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800137a:	4811      	ldr	r0, [pc, #68]	@ (80013c0 <MX_TIM14_Init+0x94>)
 800137c:	f005 fd7e 	bl	8006e7c <HAL_TIM_PWM_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001386:	f000 fcbd 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138a:	2360      	movs	r3, #96	@ 0x60
 800138c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	4619      	mov	r1, r3
 80013a0:	4807      	ldr	r0, [pc, #28]	@ (80013c0 <MX_TIM14_Init+0x94>)
 80013a2:	f005 ffe3 	bl	800736c <HAL_TIM_PWM_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80013ac:	f000 fcaa 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80013b0:	4803      	ldr	r0, [pc, #12]	@ (80013c0 <MX_TIM14_Init+0x94>)
 80013b2:	f000 ff1f 	bl	80021f4 <HAL_TIM_MspPostInit>

}
 80013b6:	bf00      	nop
 80013b8:	3720      	adds	r7, #32
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	24000374 	.word	0x24000374
 80013c4:	40002000 	.word	0x40002000

080013c8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b09a      	sub	sp, #104	@ 0x68
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013dc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
 80013f8:	615a      	str	r2, [r3, #20]
 80013fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	222c      	movs	r2, #44	@ 0x2c
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f006 ff50 	bl	80082a8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001408:	4b45      	ldr	r3, [pc, #276]	@ (8001520 <MX_TIM15_Init+0x158>)
 800140a:	4a46      	ldr	r2, [pc, #280]	@ (8001524 <MX_TIM15_Init+0x15c>)
 800140c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800140e:	4b44      	ldr	r3, [pc, #272]	@ (8001520 <MX_TIM15_Init+0x158>)
 8001410:	2200      	movs	r2, #0
 8001412:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001414:	4b42      	ldr	r3, [pc, #264]	@ (8001520 <MX_TIM15_Init+0x158>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 24000-1;
 800141a:	4b41      	ldr	r3, [pc, #260]	@ (8001520 <MX_TIM15_Init+0x158>)
 800141c:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001420:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001422:	4b3f      	ldr	r3, [pc, #252]	@ (8001520 <MX_TIM15_Init+0x158>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001428:	4b3d      	ldr	r3, [pc, #244]	@ (8001520 <MX_TIM15_Init+0x158>)
 800142a:	2200      	movs	r2, #0
 800142c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800142e:	4b3c      	ldr	r3, [pc, #240]	@ (8001520 <MX_TIM15_Init+0x158>)
 8001430:	2280      	movs	r2, #128	@ 0x80
 8001432:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001434:	483a      	ldr	r0, [pc, #232]	@ (8001520 <MX_TIM15_Init+0x158>)
 8001436:	f005 fc51 	bl	8006cdc <HAL_TIM_Base_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001440:	f000 fc60 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001444:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001448:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800144a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800144e:	4619      	mov	r1, r3
 8001450:	4833      	ldr	r0, [pc, #204]	@ (8001520 <MX_TIM15_Init+0x158>)
 8001452:	f006 f89f 	bl	8007594 <HAL_TIM_ConfigClockSource>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800145c:	f000 fc52 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001460:	482f      	ldr	r0, [pc, #188]	@ (8001520 <MX_TIM15_Init+0x158>)
 8001462:	f005 fd0b 	bl	8006e7c <HAL_TIM_PWM_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800146c:	f000 fc4a 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001470:	2300      	movs	r3, #0
 8001472:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001478:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800147c:	4619      	mov	r1, r3
 800147e:	4828      	ldr	r0, [pc, #160]	@ (8001520 <MX_TIM15_Init+0x158>)
 8001480:	f006 fde8 	bl	8008054 <HAL_TIMEx_MasterConfigSynchronization>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800148a:	f000 fc3b 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800148e:	2360      	movs	r3, #96	@ 0x60
 8001490:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001496:	2300      	movs	r3, #0
 8001498:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800149a:	2300      	movs	r3, #0
 800149c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014ae:	2200      	movs	r2, #0
 80014b0:	4619      	mov	r1, r3
 80014b2:	481b      	ldr	r0, [pc, #108]	@ (8001520 <MX_TIM15_Init+0x158>)
 80014b4:	f005 ff5a 	bl	800736c <HAL_TIM_PWM_ConfigChannel>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80014be:	f000 fc21 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014c6:	2204      	movs	r2, #4
 80014c8:	4619      	mov	r1, r3
 80014ca:	4815      	ldr	r0, [pc, #84]	@ (8001520 <MX_TIM15_Init+0x158>)
 80014cc:	f005 ff4e 	bl	800736c <HAL_TIM_PWM_ConfigChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM15_Init+0x112>
  {
    Error_Handler();
 80014d6:	f000 fc15 	bl	8001d04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	4619      	mov	r1, r3
 8001500:	4807      	ldr	r0, [pc, #28]	@ (8001520 <MX_TIM15_Init+0x158>)
 8001502:	f006 fe35 	bl	8008170 <HAL_TIMEx_ConfigBreakDeadTime>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM15_Init+0x148>
  {
    Error_Handler();
 800150c:	f000 fbfa 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001510:	4803      	ldr	r0, [pc, #12]	@ (8001520 <MX_TIM15_Init+0x158>)
 8001512:	f000 fe6f 	bl	80021f4 <HAL_TIM_MspPostInit>

}
 8001516:	bf00      	nop
 8001518:	3768      	adds	r7, #104	@ 0x68
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	240003c0 	.word	0x240003c0
 8001524:	40014000 	.word	0x40014000

08001528 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b092      	sub	sp, #72	@ 0x48
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800152e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	611a      	str	r2, [r3, #16]
 800153e:	615a      	str	r2, [r3, #20]
 8001540:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001542:	463b      	mov	r3, r7
 8001544:	222c      	movs	r2, #44	@ 0x2c
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f006 fead 	bl	80082a8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800154e:	4b31      	ldr	r3, [pc, #196]	@ (8001614 <MX_TIM16_Init+0xec>)
 8001550:	4a31      	ldr	r2, [pc, #196]	@ (8001618 <MX_TIM16_Init+0xf0>)
 8001552:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001554:	4b2f      	ldr	r3, [pc, #188]	@ (8001614 <MX_TIM16_Init+0xec>)
 8001556:	2200      	movs	r2, #0
 8001558:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155a:	4b2e      	ldr	r3, [pc, #184]	@ (8001614 <MX_TIM16_Init+0xec>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 24000-1;
 8001560:	4b2c      	ldr	r3, [pc, #176]	@ (8001614 <MX_TIM16_Init+0xec>)
 8001562:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001566:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001568:	4b2a      	ldr	r3, [pc, #168]	@ (8001614 <MX_TIM16_Init+0xec>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800156e:	4b29      	ldr	r3, [pc, #164]	@ (8001614 <MX_TIM16_Init+0xec>)
 8001570:	2200      	movs	r2, #0
 8001572:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001574:	4b27      	ldr	r3, [pc, #156]	@ (8001614 <MX_TIM16_Init+0xec>)
 8001576:	2280      	movs	r2, #128	@ 0x80
 8001578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800157a:	4826      	ldr	r0, [pc, #152]	@ (8001614 <MX_TIM16_Init+0xec>)
 800157c:	f005 fbae 	bl	8006cdc <HAL_TIM_Base_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001586:	f000 fbbd 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800158a:	4822      	ldr	r0, [pc, #136]	@ (8001614 <MX_TIM16_Init+0xec>)
 800158c:	f005 fc76 	bl	8006e7c <HAL_TIM_PWM_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001596:	f000 fbb5 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800159a:	2360      	movs	r3, #96	@ 0x60
 800159c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a2:	2300      	movs	r3, #0
 80015a4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015a6:	2300      	movs	r3, #0
 80015a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015ba:	2200      	movs	r2, #0
 80015bc:	4619      	mov	r1, r3
 80015be:	4815      	ldr	r0, [pc, #84]	@ (8001614 <MX_TIM16_Init+0xec>)
 80015c0:	f005 fed4 	bl	800736c <HAL_TIM_PWM_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80015ca:	f000 fb9b 	bl	8001d04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80015f0:	463b      	mov	r3, r7
 80015f2:	4619      	mov	r1, r3
 80015f4:	4807      	ldr	r0, [pc, #28]	@ (8001614 <MX_TIM16_Init+0xec>)
 80015f6:	f006 fdbb 	bl	8008170 <HAL_TIMEx_ConfigBreakDeadTime>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001600:	f000 fb80 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001604:	4803      	ldr	r0, [pc, #12]	@ (8001614 <MX_TIM16_Init+0xec>)
 8001606:	f000 fdf5 	bl	80021f4 <HAL_TIM_MspPostInit>

}
 800160a:	bf00      	nop
 800160c:	3748      	adds	r7, #72	@ 0x48
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2400040c 	.word	0x2400040c
 8001618:	40014400 	.word	0x40014400

0800161c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08c      	sub	sp, #48	@ 0x30
 8001620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001622:	f107 031c 	add.w	r3, r7, #28
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001632:	4b59      	ldr	r3, [pc, #356]	@ (8001798 <MX_GPIO_Init+0x17c>)
 8001634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001638:	4a57      	ldr	r2, [pc, #348]	@ (8001798 <MX_GPIO_Init+0x17c>)
 800163a:	f043 0310 	orr.w	r3, r3, #16
 800163e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001642:	4b55      	ldr	r3, [pc, #340]	@ (8001798 <MX_GPIO_Init+0x17c>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	61bb      	str	r3, [r7, #24]
 800164e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001650:	4b51      	ldr	r3, [pc, #324]	@ (8001798 <MX_GPIO_Init+0x17c>)
 8001652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001656:	4a50      	ldr	r2, [pc, #320]	@ (8001798 <MX_GPIO_Init+0x17c>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001660:	4b4d      	ldr	r3, [pc, #308]	@ (8001798 <MX_GPIO_Init+0x17c>)
 8001662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800166e:	4b4a      	ldr	r3, [pc, #296]	@ (8001798 <MX_GPIO_Init+0x17c>)
 8001670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001674:	4a48      	ldr	r2, [pc, #288]	@ (8001798 <MX_GPIO_Init+0x17c>)
 8001676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800167a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800167e:	4b46      	ldr	r3, [pc, #280]	@ (8001798 <MX_GPIO_Init+0x17c>)
 8001680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	4b42      	ldr	r3, [pc, #264]	@ (8001798 <MX_GPIO_Init+0x17c>)
 800168e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001692:	4a41      	ldr	r2, [pc, #260]	@ (8001798 <MX_GPIO_Init+0x17c>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800169c:	4b3e      	ldr	r3, [pc, #248]	@ (8001798 <MX_GPIO_Init+0x17c>)
 800169e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001798 <MX_GPIO_Init+0x17c>)
 80016ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b0:	4a39      	ldr	r2, [pc, #228]	@ (8001798 <MX_GPIO_Init+0x17c>)
 80016b2:	f043 0302 	orr.w	r3, r3, #2
 80016b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016ba:	4b37      	ldr	r3, [pc, #220]	@ (8001798 <MX_GPIO_Init+0x17c>)
 80016bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c8:	4b33      	ldr	r3, [pc, #204]	@ (8001798 <MX_GPIO_Init+0x17c>)
 80016ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ce:	4a32      	ldr	r2, [pc, #200]	@ (8001798 <MX_GPIO_Init+0x17c>)
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001798 <MX_GPIO_Init+0x17c>)
 80016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 80016e6:	2200      	movs	r2, #0
 80016e8:	f249 519f 	movw	r1, #38303	@ 0x959f
 80016ec:	482b      	ldr	r0, [pc, #172]	@ (800179c <MX_GPIO_Init+0x180>)
 80016ee:	f001 fc73 	bl	8002fd8 <HAL_GPIO_WritePin>
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80016f8:	4829      	ldr	r0, [pc, #164]	@ (80017a0 <MX_GPIO_Init+0x184>)
 80016fa:	f001 fc6d 	bl	8002fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8001704:	4827      	ldr	r0, [pc, #156]	@ (80017a4 <MX_GPIO_Init+0x188>)
 8001706:	f001 fc67 	bl	8002fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 800170a:	2200      	movs	r2, #0
 800170c:	f640 71f7 	movw	r1, #4087	@ 0xff7
 8001710:	4825      	ldr	r0, [pc, #148]	@ (80017a8 <MX_GPIO_Init+0x18c>)
 8001712:	f001 fc61 	bl	8002fd8 <HAL_GPIO_WritePin>
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : TIM1_CH3_PH_Pin TIM1_CH4_PH_Pin TIM2_CH1_PH_Pin TIM8_CH4_PH_Pin
                           TIM12_CH2_PH_Pin TIM13_CH1_PH_Pin TIM14_CH1_PH_Pin TIM15_CH1_PH_Pin
                           TIM1_CH1_PH_Pin TIM1_CH2_PH_Pin */
  GPIO_InitStruct.Pin = TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 8001716:	f249 539f 	movw	r3, #38303	@ 0x959f
 800171a:	61fb      	str	r3, [r7, #28]
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	4619      	mov	r1, r3
 800172e:	481b      	ldr	r0, [pc, #108]	@ (800179c <MX_GPIO_Init+0x180>)
 8001730:	f001 faa2 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH4_PH_Pin TIM5_CH2_PH_Pin TIM5_CH3_PH_Pin TIM4_CH3_PH_Pin */
  GPIO_InitStruct.Pin = TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin;
 8001734:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173a:	2301      	movs	r3, #1
 800173c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001746:	f107 031c 	add.w	r3, r7, #28
 800174a:	4619      	mov	r1, r3
 800174c:	4814      	ldr	r0, [pc, #80]	@ (80017a0 <MX_GPIO_Init+0x184>)
 800174e:	f001 fa93 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH1_PH_Pin TIM4_CH2_PH_Pin */
  GPIO_InitStruct.Pin = TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin;
 8001752:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001758:	2301      	movs	r3, #1
 800175a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	4619      	mov	r1, r3
 800176a:	480e      	ldr	r0, [pc, #56]	@ (80017a4 <MX_GPIO_Init+0x188>)
 800176c:	f001 fa84 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : HRTIM_CHC1_PH_Pin HRTIM_CHC2_PH_Pin HRTIM_CHD1_PH_Pin HRTIM_CHD2_PH_Pin
                           TIM15_CH2_PH_Pin TIM16_CH1_PH_Pin LPTIM1_OUT_PH_Pin HRTIM_CHA1_PH_Pin
                           HRTIM_CHA2_PH_Pin HRTIM_CHB1_PH_Pin HRTIM_CHB2_PH_Pin */
  GPIO_InitStruct.Pin = HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 8001770:	f640 73f7 	movw	r3, #4087	@ 0xff7
 8001774:	61fb      	str	r3, [r7, #28]
                          |TIM15_CH2_PH_Pin|TIM16_CH1_PH_Pin|LPTIM1_OUT_PH_Pin|HRTIM_CHA1_PH_Pin
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001776:	2301      	movs	r3, #1
 8001778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4619      	mov	r1, r3
 8001788:	4807      	ldr	r0, [pc, #28]	@ (80017a8 <MX_GPIO_Init+0x18c>)
 800178a:	f001 fa75 	bl	8002c78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800178e:	bf00      	nop
 8001790:	3730      	adds	r7, #48	@ 0x30
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	58024400 	.word	0x58024400
 800179c:	58021000 	.word	0x58021000
 80017a0:	58020800 	.word	0x58020800
 80017a4:	58020400 	.word	0x58020400
 80017a8:	58020c00 	.word	0x58020c00
 80017ac:	00000000 	.word	0x00000000

080017b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	static int i = 0;  // index for actuator update
	static int t = 0; // variable to track time
	const int period = 10; // number of timer rollovers between updates
 80017b8:	230a      	movs	r3, #10
 80017ba:	617b      	str	r3, [r7, #20]
	const double step = 0.3;// max step size in volts
 80017bc:	a324      	add	r3, pc, #144	@ (adr r3, 8001850 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c2:	e9c7 2302 	strd	r2, r3, [r7, #8]


    if (htim==&htim1){
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001838 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d12d      	bne.n	800182a <HAL_TIM_PeriodElapsedCallback+0x7a>
    	t+=1;
 80017ce:	4b1b      	ldr	r3, [pc, #108]	@ (800183c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	3301      	adds	r3, #1
 80017d4:	4a19      	ldr	r2, [pc, #100]	@ (800183c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80017d6:	6013      	str	r3, [r2, #0]
    	if(t%period == 0)
 80017d8:	4b18      	ldr	r3, [pc, #96]	@ (800183c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	fb93 f2f2 	sdiv	r2, r3, r2
 80017e2:	6979      	ldr	r1, [r7, #20]
 80017e4:	fb01 f202 	mul.w	r2, r1, r2
 80017e8:	1a9b      	subs	r3, r3, r2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d11d      	bne.n	800182a <HAL_TIM_PeriodElapsedCallback+0x7a>
    	{
    		if(i>=SIN_PERIOD) i = 0;
 80017ee:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017f6:	db02      	blt.n	80017fe <HAL_TIM_PeriodElapsedCallback+0x4e>
 80017f8:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
    		//update the output
    		ref = sine_vals[i]*step;
 80017fe:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a10      	ldr	r2, [pc, #64]	@ (8001844 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	4413      	add	r3, r2
 8001808:	ed93 6b00 	vldr	d6, [r3]
 800180c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001810:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001814:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001816:	ed83 7b00 	vstr	d7, [r3]
			// inform main that the actuators need an update
    		i+=1;
 800181a:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	3301      	adds	r3, #1
 8001820:	4a07      	ldr	r2, [pc, #28]	@ (8001840 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001822:	6013      	str	r3, [r2, #0]
			ctrl_tmr_expired = TRUE;
 8001824:	4b09      	ldr	r3, [pc, #36]	@ (800184c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
    	}
	}

}
 800182a:	bf00      	nop
 800182c:	371c      	adds	r7, #28
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	24000160 	.word	0x24000160
 800183c:	240023a8 	.word	0x240023a8
 8001840:	240023ac 	.word	0x240023ac
 8001844:	24000468 	.word	0x24000468
 8001848:	24000460 	.word	0x24000460
 800184c:	24000458 	.word	0x24000458
 8001850:	33333333 	.word	0x33333333
 8001854:	3fd33333 	.word	0x3fd33333

08001858 <control_update>:

static void control_update(double ref)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	ed87 0b00 	vstr	d0, [r7]
	// sign bit of the command fed to phase input on the h-bridge
	static int phase=GPIO_PIN_SET;
	//int new_phase = {0};
	static uint16_t dutycycle=0;
	uint16_t new_dc;
	double absref = 0;
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// indicate interrupt operation
//	HAL_GPIO_TogglePin(UPDATE_GPIO_Port, UPDATE_Pin);

	// set the sign of the move (phase)
	if(ref < 0){
 800186e:	ed97 7b00 	vldr	d7, [r7]
 8001872:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187a:	d505      	bpl.n	8001888 <control_update+0x30>
		phase = GPIO_PIN_RESET; // reverse direction
 800187c:	4b01      	ldr	r3, [pc, #4]	@ (8001884 <control_update+0x2c>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	e004      	b.n	800188e <control_update+0x36>
 8001884:	24000000 	.word	0x24000000
	} else {
		phase = GPIO_PIN_SET; //forward direction
 8001888:	4ba3      	ldr	r3, [pc, #652]	@ (8001b18 <control_update+0x2c0>)
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]
	}
	// update the phase if it has changed
//	if(new_phase != phase){

		//Timer 1
		HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, phase);  //Starts the phase generation on each of the pins (Channels)
 800188e:	4ba2      	ldr	r3, [pc, #648]	@ (8001b18 <control_update+0x2c0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	461a      	mov	r2, r3
 8001896:	2101      	movs	r1, #1
 8001898:	48a0      	ldr	r0, [pc, #640]	@ (8001b1c <control_update+0x2c4>)
 800189a:	f001 fb9d 	bl	8002fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, phase);
 800189e:	4b9e      	ldr	r3, [pc, #632]	@ (8001b18 <control_update+0x2c0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	461a      	mov	r2, r3
 80018a6:	2102      	movs	r1, #2
 80018a8:	489c      	ldr	r0, [pc, #624]	@ (8001b1c <control_update+0x2c4>)
 80018aa:	f001 fb95 	bl	8002fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, phase);
 80018ae:	4b9a      	ldr	r3, [pc, #616]	@ (8001b18 <control_update+0x2c0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	461a      	mov	r2, r3
 80018b6:	2104      	movs	r1, #4
 80018b8:	4898      	ldr	r0, [pc, #608]	@ (8001b1c <control_update+0x2c4>)
 80018ba:	f001 fb8d 	bl	8002fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, phase);
 80018be:	4b96      	ldr	r3, [pc, #600]	@ (8001b18 <control_update+0x2c0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	2108      	movs	r1, #8
 80018c8:	4894      	ldr	r0, [pc, #592]	@ (8001b1c <control_update+0x2c4>)
 80018ca:	f001 fb85 	bl	8002fd8 <HAL_GPIO_WritePin>
		//End Timer 1

		//Timer 2
		HAL_GPIO_WritePin(TIM2_CH1_PH_GPIO_Port, TIM2_CH1_PH_Pin, phase);
 80018ce:	4b92      	ldr	r3, [pc, #584]	@ (8001b18 <control_update+0x2c0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	2110      	movs	r1, #16
 80018d8:	4890      	ldr	r0, [pc, #576]	@ (8001b1c <control_update+0x2c4>)
 80018da:	f001 fb7d 	bl	8002fd8 <HAL_GPIO_WritePin>
		//End Timer 2

		//Timer 4
		HAL_GPIO_WritePin(TIM4_CH1_PH_GPIO_Port, TIM4_CH1_PH_Pin, phase);
 80018de:	4b8e      	ldr	r3, [pc, #568]	@ (8001b18 <control_update+0x2c0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	461a      	mov	r2, r3
 80018e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018ea:	488d      	ldr	r0, [pc, #564]	@ (8001b20 <control_update+0x2c8>)
 80018ec:	f001 fb74 	bl	8002fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM4_CH2_PH_GPIO_Port, TIM4_CH2_PH_Pin, phase);
 80018f0:	4b89      	ldr	r3, [pc, #548]	@ (8001b18 <control_update+0x2c0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018fc:	4888      	ldr	r0, [pc, #544]	@ (8001b20 <control_update+0x2c8>)
 80018fe:	f001 fb6b 	bl	8002fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM4_CH3_PH_GPIO_Port, TIM4_CH3_PH_Pin, phase);
 8001902:	4b85      	ldr	r3, [pc, #532]	@ (8001b18 <control_update+0x2c0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	461a      	mov	r2, r3
 800190a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800190e:	4885      	ldr	r0, [pc, #532]	@ (8001b24 <control_update+0x2cc>)
 8001910:	f001 fb62 	bl	8002fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM4_CH4_PH_GPIO_Port, TIM4_CH4_PH_Pin, phase);
 8001914:	4b80      	ldr	r3, [pc, #512]	@ (8001b18 <control_update+0x2c0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	461a      	mov	r2, r3
 800191c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001920:	4880      	ldr	r0, [pc, #512]	@ (8001b24 <control_update+0x2cc>)
 8001922:	f001 fb59 	bl	8002fd8 <HAL_GPIO_WritePin>
		//End Timer 4


		//Timer 5
		HAL_GPIO_WritePin(TIM5_CH2_PH_GPIO_Port, TIM5_CH2_PH_Pin, phase);
 8001926:	4b7c      	ldr	r3, [pc, #496]	@ (8001b18 <control_update+0x2c0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001932:	487c      	ldr	r0, [pc, #496]	@ (8001b24 <control_update+0x2cc>)
 8001934:	f001 fb50 	bl	8002fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM5_CH3_PH_GPIO_Port, TIM5_CH3_PH_Pin, phase);
 8001938:	4b77      	ldr	r3, [pc, #476]	@ (8001b18 <control_update+0x2c0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	461a      	mov	r2, r3
 8001940:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001944:	4877      	ldr	r0, [pc, #476]	@ (8001b24 <control_update+0x2cc>)
 8001946:	f001 fb47 	bl	8002fd8 <HAL_GPIO_WritePin>
		//End Timer 5


		//Timer 8
		HAL_GPIO_WritePin(TIM8_CH4_PH_GPIO_Port, TIM8_CH4_PH_Pin, phase);
 800194a:	4b73      	ldr	r3, [pc, #460]	@ (8001b18 <control_update+0x2c0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	461a      	mov	r2, r3
 8001952:	2180      	movs	r1, #128	@ 0x80
 8001954:	4871      	ldr	r0, [pc, #452]	@ (8001b1c <control_update+0x2c4>)
 8001956:	f001 fb3f 	bl	8002fd8 <HAL_GPIO_WritePin>
		//End Timer 8


		//Timer 12
		HAL_GPIO_WritePin(TIM12_CH2_PH_GPIO_Port, TIM12_CH2_PH_Pin, phase);
 800195a:	4b6f      	ldr	r3, [pc, #444]	@ (8001b18 <control_update+0x2c0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001966:	486d      	ldr	r0, [pc, #436]	@ (8001b1c <control_update+0x2c4>)
 8001968:	f001 fb36 	bl	8002fd8 <HAL_GPIO_WritePin>
		//End Timer 12


		//Timer 13
		HAL_GPIO_WritePin(TIM13_CH1_PH_GPIO_Port, TIM13_CH1_PH_Pin, phase);
 800196c:	4b6a      	ldr	r3, [pc, #424]	@ (8001b18 <control_update+0x2c0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	461a      	mov	r2, r3
 8001974:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001978:	4868      	ldr	r0, [pc, #416]	@ (8001b1c <control_update+0x2c4>)
 800197a:	f001 fb2d 	bl	8002fd8 <HAL_GPIO_WritePin>
		//End Timer 13


		//Timer 14
		HAL_GPIO_WritePin(TIM14_CH1_PH_GPIO_Port, TIM14_CH1_PH_Pin, phase);
 800197e:	4b66      	ldr	r3, [pc, #408]	@ (8001b18 <control_update+0x2c0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800198a:	4864      	ldr	r0, [pc, #400]	@ (8001b1c <control_update+0x2c4>)
 800198c:	f001 fb24 	bl	8002fd8 <HAL_GPIO_WritePin>
		//End Timer 14


		//Timer 15
		HAL_GPIO_WritePin(TIM15_CH1_PH_GPIO_Port, TIM15_CH1_PH_Pin, phase);
 8001990:	4b61      	ldr	r3, [pc, #388]	@ (8001b18 <control_update+0x2c0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	461a      	mov	r2, r3
 8001998:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800199c:	485f      	ldr	r0, [pc, #380]	@ (8001b1c <control_update+0x2c4>)
 800199e:	f001 fb1b 	bl	8002fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM15_CH2_PH_GPIO_Port, TIM15_CH2_PH_Pin, phase);
 80019a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001b18 <control_update+0x2c0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	461a      	mov	r2, r3
 80019aa:	2101      	movs	r1, #1
 80019ac:	485e      	ldr	r0, [pc, #376]	@ (8001b28 <control_update+0x2d0>)
 80019ae:	f001 fb13 	bl	8002fd8 <HAL_GPIO_WritePin>
		//End Timer 15


		//Timer 16
		HAL_GPIO_WritePin(TIM16_CH1_PH_GPIO_Port, TIM16_CH1_PH_Pin, phase);
 80019b2:	4b59      	ldr	r3, [pc, #356]	@ (8001b18 <control_update+0x2c0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	461a      	mov	r2, r3
 80019ba:	2102      	movs	r1, #2
 80019bc:	485a      	ldr	r0, [pc, #360]	@ (8001b28 <control_update+0x2d0>)
 80019be:	f001 fb0b 	bl	8002fd8 <HAL_GPIO_WritePin>
		//End Timer 16


		//High Resolution Timer CHA
		HAL_GPIO_WritePin(HRTIM_CHA1_PH_GPIO_Port, HRTIM_CHA1_PH_Pin, phase);
 80019c2:	4b55      	ldr	r3, [pc, #340]	@ (8001b18 <control_update+0x2c0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	461a      	mov	r2, r3
 80019ca:	2110      	movs	r1, #16
 80019cc:	4856      	ldr	r0, [pc, #344]	@ (8001b28 <control_update+0x2d0>)
 80019ce:	f001 fb03 	bl	8002fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHA2_PH_GPIO_Port, HRTIM_CHA2_PH_Pin, phase);
 80019d2:	4b51      	ldr	r3, [pc, #324]	@ (8001b18 <control_update+0x2c0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	2120      	movs	r1, #32
 80019dc:	4852      	ldr	r0, [pc, #328]	@ (8001b28 <control_update+0x2d0>)
 80019de:	f001 fafb 	bl	8002fd8 <HAL_GPIO_WritePin>
		//End High HRTIM CHA


		//High Resolution Timer CHB
		HAL_GPIO_WritePin(HRTIM_CHB1_PH_GPIO_Port, HRTIM_CHB1_PH_Pin, phase);
 80019e2:	4b4d      	ldr	r3, [pc, #308]	@ (8001b18 <control_update+0x2c0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	461a      	mov	r2, r3
 80019ea:	2140      	movs	r1, #64	@ 0x40
 80019ec:	484e      	ldr	r0, [pc, #312]	@ (8001b28 <control_update+0x2d0>)
 80019ee:	f001 faf3 	bl	8002fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHB2_PH_GPIO_Port, HRTIM_CHB2_PH_Pin, phase);
 80019f2:	4b49      	ldr	r3, [pc, #292]	@ (8001b18 <control_update+0x2c0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	461a      	mov	r2, r3
 80019fa:	2180      	movs	r1, #128	@ 0x80
 80019fc:	484a      	ldr	r0, [pc, #296]	@ (8001b28 <control_update+0x2d0>)
 80019fe:	f001 faeb 	bl	8002fd8 <HAL_GPIO_WritePin>
		//End High HRTIM CHB

		//High Resolution Timer CHC
		HAL_GPIO_WritePin(HRTIM_CHC1_PH_GPIO_Port, HRTIM_CHC1_PH_Pin, phase);
 8001a02:	4b45      	ldr	r3, [pc, #276]	@ (8001b18 <control_update+0x2c0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a0e:	4846      	ldr	r0, [pc, #280]	@ (8001b28 <control_update+0x2d0>)
 8001a10:	f001 fae2 	bl	8002fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHC2_PH_GPIO_Port, HRTIM_CHC2_PH_Pin, phase);
 8001a14:	4b40      	ldr	r3, [pc, #256]	@ (8001b18 <control_update+0x2c0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a20:	4841      	ldr	r0, [pc, #260]	@ (8001b28 <control_update+0x2d0>)
 8001a22:	f001 fad9 	bl	8002fd8 <HAL_GPIO_WritePin>
		//End High HRTIM CHB1 & CHC


		//High Resolution Timer CHD
		HAL_GPIO_WritePin(HRTIM_CHD1_PH_GPIO_Port, HRTIM_CHD1_PH_Pin, phase);
 8001a26:	4b3c      	ldr	r3, [pc, #240]	@ (8001b18 <control_update+0x2c0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a32:	483d      	ldr	r0, [pc, #244]	@ (8001b28 <control_update+0x2d0>)
 8001a34:	f001 fad0 	bl	8002fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHD2_PH_GPIO_Port, HRTIM_CHD2_PH_Pin, phase);
 8001a38:	4b37      	ldr	r3, [pc, #220]	@ (8001b18 <control_update+0x2c0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a44:	4838      	ldr	r0, [pc, #224]	@ (8001b28 <control_update+0x2d0>)
 8001a46:	f001 fac7 	bl	8002fd8 <HAL_GPIO_WritePin>
		//End High HRTIM CHB1 & CHD


		//Low Power Timer
		HAL_GPIO_WritePin(LPTIM1_OUT_PH_GPIO_Port, LPTIM1_OUT_PH_Pin, phase);
 8001a4a:	4b33      	ldr	r3, [pc, #204]	@ (8001b18 <control_update+0x2c0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	461a      	mov	r2, r3
 8001a52:	2104      	movs	r1, #4
 8001a54:	4834      	ldr	r0, [pc, #208]	@ (8001b28 <control_update+0x2d0>)
 8001a56:	f001 fabf 	bl	8002fd8 <HAL_GPIO_WritePin>


//	}

	// calculate the dutycycle
	absref = fabs(ref); // duty cycle must be positive
 8001a5a:	ed97 7b00 	vldr	d7, [r7]
 8001a5e:	eeb0 7bc7 	vabs.f64	d7, d7
 8001a62:	ed87 7b04 	vstr	d7, [r7, #16]
	new_dc = calc_dutycycle(absref,VSS);
 8001a66:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8001b10 <control_update+0x2b8>
 8001a6a:	eeb0 1b47 	vmov.f64	d1, d7
 8001a6e:	ed97 0b04 	vldr	d0, [r7, #16]
 8001a72:	f000 f8b9 	bl	8001be8 <calc_dutycycle>
 8001a76:	4603      	mov	r3, r0
 8001a78:	81fb      	strh	r3, [r7, #14]
	// if new dutycycle is different than the old dutycycle
	if(new_dc != dutycycle){
 8001a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8001b2c <control_update+0x2d4>)
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	89fa      	ldrh	r2, [r7, #14]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	f000 809b 	beq.w	8001bbc <control_update+0x364>
		// then save new dutycycle
		dutycycle = new_dc;
 8001a86:	4a29      	ldr	r2, [pc, #164]	@ (8001b2c <control_update+0x2d4>)
 8001a88:	89fb      	ldrh	r3, [r7, #14]
 8001a8a:	8013      	strh	r3, [r2, #0]
		//set the new timer dutycycle register
		//Timer 1
		TIM1->CCR1 = dutycycle;   //Calls the duty cycle on the timers at the desired channel
 8001a8c:	4b27      	ldr	r3, [pc, #156]	@ (8001b2c <control_update+0x2d4>)
 8001a8e:	881a      	ldrh	r2, [r3, #0]
 8001a90:	4b27      	ldr	r3, [pc, #156]	@ (8001b30 <control_update+0x2d8>)
 8001a92:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = dutycycle;
 8001a94:	4b25      	ldr	r3, [pc, #148]	@ (8001b2c <control_update+0x2d4>)
 8001a96:	881a      	ldrh	r2, [r3, #0]
 8001a98:	4b25      	ldr	r3, [pc, #148]	@ (8001b30 <control_update+0x2d8>)
 8001a9a:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = dutycycle;
 8001a9c:	4b23      	ldr	r3, [pc, #140]	@ (8001b2c <control_update+0x2d4>)
 8001a9e:	881a      	ldrh	r2, [r3, #0]
 8001aa0:	4b23      	ldr	r3, [pc, #140]	@ (8001b30 <control_update+0x2d8>)
 8001aa2:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = dutycycle;
 8001aa4:	4b21      	ldr	r3, [pc, #132]	@ (8001b2c <control_update+0x2d4>)
 8001aa6:	881a      	ldrh	r2, [r3, #0]
 8001aa8:	4b21      	ldr	r3, [pc, #132]	@ (8001b30 <control_update+0x2d8>)
 8001aaa:	641a      	str	r2, [r3, #64]	@ 0x40
		//End Timer 1

		//Timer 2
		TIM2->CCR1 = dutycycle;
 8001aac:	4b1f      	ldr	r3, [pc, #124]	@ (8001b2c <control_update+0x2d4>)
 8001aae:	881a      	ldrh	r2, [r3, #0]
 8001ab0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ab4:	635a      	str	r2, [r3, #52]	@ 0x34
		//End Timer 2

		//Timer 4
		TIM4->CCR1 = dutycycle;
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b2c <control_update+0x2d4>)
 8001ab8:	881a      	ldrh	r2, [r3, #0]
 8001aba:	4b1e      	ldr	r3, [pc, #120]	@ (8001b34 <control_update+0x2dc>)
 8001abc:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM4->CCR2 = dutycycle;
 8001abe:	4b1b      	ldr	r3, [pc, #108]	@ (8001b2c <control_update+0x2d4>)
 8001ac0:	881a      	ldrh	r2, [r3, #0]
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b34 <control_update+0x2dc>)
 8001ac4:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM4->CCR3 = dutycycle;
 8001ac6:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <control_update+0x2d4>)
 8001ac8:	881a      	ldrh	r2, [r3, #0]
 8001aca:	4b1a      	ldr	r3, [pc, #104]	@ (8001b34 <control_update+0x2dc>)
 8001acc:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM4->CCR4 = dutycycle;
 8001ace:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <control_update+0x2d4>)
 8001ad0:	881a      	ldrh	r2, [r3, #0]
 8001ad2:	4b18      	ldr	r3, [pc, #96]	@ (8001b34 <control_update+0x2dc>)
 8001ad4:	641a      	str	r2, [r3, #64]	@ 0x40
		//End Timer 4

		//Timer 5
		TIM5->CCR2 = dutycycle;
 8001ad6:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <control_update+0x2d4>)
 8001ad8:	881a      	ldrh	r2, [r3, #0]
 8001ada:	4b17      	ldr	r3, [pc, #92]	@ (8001b38 <control_update+0x2e0>)
 8001adc:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM5->CCR3 = dutycycle;
 8001ade:	4b13      	ldr	r3, [pc, #76]	@ (8001b2c <control_update+0x2d4>)
 8001ae0:	881a      	ldrh	r2, [r3, #0]
 8001ae2:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <control_update+0x2e0>)
 8001ae4:	63da      	str	r2, [r3, #60]	@ 0x3c
		//End Timer 5

		//Timer 8
		TIM8->CCR4 = dutycycle;
 8001ae6:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <control_update+0x2d4>)
 8001ae8:	881a      	ldrh	r2, [r3, #0]
 8001aea:	4b14      	ldr	r3, [pc, #80]	@ (8001b3c <control_update+0x2e4>)
 8001aec:	641a      	str	r2, [r3, #64]	@ 0x40
		//End Timer 8

		//Timer 12
		TIM12->CCR2 = dutycycle;
 8001aee:	4b0f      	ldr	r3, [pc, #60]	@ (8001b2c <control_update+0x2d4>)
 8001af0:	881a      	ldrh	r2, [r3, #0]
 8001af2:	4b13      	ldr	r3, [pc, #76]	@ (8001b40 <control_update+0x2e8>)
 8001af4:	639a      	str	r2, [r3, #56]	@ 0x38
		//End Timer 12

		//Timer 13
		TIM13->CCR1 = dutycycle;
 8001af6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <control_update+0x2d4>)
 8001af8:	881a      	ldrh	r2, [r3, #0]
 8001afa:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <control_update+0x2ec>)
 8001afc:	635a      	str	r2, [r3, #52]	@ 0x34
		//End Timer 13

		//Timer 14
		TIM14->CCR1 = dutycycle;
 8001afe:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <control_update+0x2d4>)
 8001b00:	881a      	ldrh	r2, [r3, #0]
 8001b02:	4b11      	ldr	r3, [pc, #68]	@ (8001b48 <control_update+0x2f0>)
 8001b04:	635a      	str	r2, [r3, #52]	@ 0x34
		//End Timer 14

		//Timer 15
		TIM15->CCR1 = dutycycle;
 8001b06:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <control_update+0x2d4>)
 8001b08:	881a      	ldrh	r2, [r3, #0]
 8001b0a:	e01f      	b.n	8001b4c <control_update+0x2f4>
 8001b0c:	f3af 8000 	nop.w
 8001b10:	cccccccd 	.word	0xcccccccd
 8001b14:	3ffccccc 	.word	0x3ffccccc
 8001b18:	24000000 	.word	0x24000000
 8001b1c:	58021000 	.word	0x58021000
 8001b20:	58020400 	.word	0x58020400
 8001b24:	58020800 	.word	0x58020800
 8001b28:	58020c00 	.word	0x58020c00
 8001b2c:	240023b0 	.word	0x240023b0
 8001b30:	40010000 	.word	0x40010000
 8001b34:	40000800 	.word	0x40000800
 8001b38:	40000c00 	.word	0x40000c00
 8001b3c:	40010400 	.word	0x40010400
 8001b40:	40001800 	.word	0x40001800
 8001b44:	40001c00 	.word	0x40001c00
 8001b48:	40002000 	.word	0x40002000
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bcc <control_update+0x374>)
 8001b4e:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM15->CCR2 = dutycycle;
 8001b50:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd0 <control_update+0x378>)
 8001b52:	881a      	ldrh	r2, [r3, #0]
 8001b54:	4b1d      	ldr	r3, [pc, #116]	@ (8001bcc <control_update+0x374>)
 8001b56:	639a      	str	r2, [r3, #56]	@ 0x38
		//End Timer 15

		//Timer 16
		TIM16->CCR1 = dutycycle;
 8001b58:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd0 <control_update+0x378>)
 8001b5a:	881a      	ldrh	r2, [r3, #0]
 8001b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd4 <control_update+0x37c>)
 8001b5e:	635a      	str	r2, [r3, #52]	@ 0x34
		//End Timer 16

		//HRTIM CHA
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP1xR = dutycycle;
 8001b60:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd0 <control_update+0x378>)
 8001b62:	881a      	ldrh	r2, [r3, #0]
 8001b64:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd8 <control_update+0x380>)
 8001b66:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP2xR = dutycycle;
 8001b6a:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <control_update+0x378>)
 8001b6c:	881a      	ldrh	r2, [r3, #0]
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <control_update+0x380>)
 8001b70:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		//End HRTIM CHA

		//HRTIM CHB
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP1xR = dutycycle;
 8001b74:	4b16      	ldr	r3, [pc, #88]	@ (8001bd0 <control_update+0x378>)
 8001b76:	881a      	ldrh	r2, [r3, #0]
 8001b78:	4b17      	ldr	r3, [pc, #92]	@ (8001bd8 <control_update+0x380>)
 8001b7a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP2xR = dutycycle;
 8001b7e:	4b14      	ldr	r3, [pc, #80]	@ (8001bd0 <control_update+0x378>)
 8001b80:	881a      	ldrh	r2, [r3, #0]
 8001b82:	4b15      	ldr	r3, [pc, #84]	@ (8001bd8 <control_update+0x380>)
 8001b84:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
		//End HRTIM CHB

		//HRTIM CHC
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP1xR = dutycycle;
 8001b88:	4b11      	ldr	r3, [pc, #68]	@ (8001bd0 <control_update+0x378>)
 8001b8a:	881a      	ldrh	r2, [r3, #0]
 8001b8c:	4b12      	ldr	r3, [pc, #72]	@ (8001bd8 <control_update+0x380>)
 8001b8e:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP2xR = dutycycle;
 8001b92:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd0 <control_update+0x378>)
 8001b94:	881a      	ldrh	r2, [r3, #0]
 8001b96:	4b10      	ldr	r3, [pc, #64]	@ (8001bd8 <control_update+0x380>)
 8001b98:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
		//End HRTIM CHC

		//HRTIM CHD
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = dutycycle;
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd0 <control_update+0x378>)
 8001b9e:	881a      	ldrh	r2, [r3, #0]
 8001ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd8 <control_update+0x380>)
 8001ba2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP2xR = dutycycle;
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd0 <control_update+0x378>)
 8001ba8:	881a      	ldrh	r2, [r3, #0]
 8001baa:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd8 <control_update+0x380>)
 8001bac:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
		//End HRTIM CHD

		//LPTIM1
		LPTIM1->CMP = dutycycle/2;
 8001bb0:	4b07      	ldr	r3, [pc, #28]	@ (8001bd0 <control_update+0x378>)
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	085b      	lsrs	r3, r3, #1
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <control_update+0x384>)
 8001bba:	615a      	str	r2, [r3, #20]
		//End LPTIM1

	}

	// reset timer flag
	ctrl_tmr_expired = FALSE;
 8001bbc:	4b08      	ldr	r3, [pc, #32]	@ (8001be0 <control_update+0x388>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40014000 	.word	0x40014000
 8001bd0:	240023b0 	.word	0x240023b0
 8001bd4:	40014400 	.word	0x40014400
 8001bd8:	40017400 	.word	0x40017400
 8001bdc:	40002400 	.word	0x40002400
 8001be0:	24000458 	.word	0x24000458
 8001be4:	00000000 	.word	0x00000000

08001be8 <calc_dutycycle>:

static uint16_t calc_dutycycle(double cmd, double vss)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	ed87 0b02 	vstr	d0, [r7, #8]
 8001bf2:	ed87 1b00 	vstr	d1, [r7]
	//	@ param cmd command voltage
	//	@ param vss supply voltage
	//	@ return dutycycle

	// duty cycle variable
	uint16_t dc={0};
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	82fb      	strh	r3, [r7, #22]

	dc = (uint16_t)(cmd/vss * (double)PERIOD);
 8001bfa:	ed97 5b02 	vldr	d5, [r7, #8]
 8001bfe:	ed97 6b00 	vldr	d6, [r7]
 8001c02:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001c06:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8001c38 <calc_dutycycle+0x50>
 8001c0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c0e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c12:	ee17 3a90 	vmov	r3, s15
 8001c16:	82fb      	strh	r3, [r7, #22]
	// keep the dutycycle within the period of the PWM signal
	if(dc>PERIOD) dc = PERIOD;
 8001c18:	8afb      	ldrh	r3, [r7, #22]
 8001c1a:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d902      	bls.n	8001c28 <calc_dutycycle+0x40>
 8001c22:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 8001c26:	82fb      	strh	r3, [r7, #22]

	return dc;
 8001c28:	8afb      	ldrh	r3, [r7, #22]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	371c      	adds	r7, #28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	40d76fc0 	.word	0x40d76fc0

08001c40 <gen_sine>:

static void gen_sine(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
	int i = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
	double scale = TWO_PI/SIN_PERIOD;
 8001c4a:	a316      	add	r3, pc, #88	@ (adr r3, 8001ca4 <gen_sine+0x64>)
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	e9c7 2300 	strd	r2, r3, [r7]
	for(i=0; i<SIN_PERIOD; i++ )
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	e017      	b.n	8001c8a <gen_sine+0x4a>
	{
		sine_vals[i] = sin(i*scale);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	ee07 3a90 	vmov	s15, r3
 8001c60:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001c64:	ed97 7b00 	vldr	d7, [r7]
 8001c68:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c6c:	eeb0 0b47 	vmov.f64	d0, d7
 8001c70:	f006 fb46 	bl	8008300 <sin>
 8001c74:	eeb0 7b40 	vmov.f64	d7, d0
 8001c78:	4a09      	ldr	r2, [pc, #36]	@ (8001ca0 <gen_sine+0x60>)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4413      	add	r3, r2
 8001c80:	ed83 7b00 	vstr	d7, [r3]
	for(i=0; i<SIN_PERIOD; i++ )
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	3301      	adds	r3, #1
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c90:	dbe3      	blt.n	8001c5a <gen_sine+0x1a>
	}
}
 8001c92:	bf00      	nop
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	f3af 8000 	nop.w
 8001ca0:	24000468 	.word	0x24000468
 8001ca4:	b68b71c3 	.word	0xb68b71c3
 8001ca8:	3f79bc65 	.word	0x3f79bc65

08001cac <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001cb2:	463b      	mov	r3, r7
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001cbe:	f000 ff63 	bl	8002b88 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001cce:	231f      	movs	r3, #31
 8001cd0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001cd2:	2387      	movs	r3, #135	@ 0x87
 8001cd4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001cee:	463b      	mov	r3, r7
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 ff81 	bl	8002bf8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001cf6:	2004      	movs	r0, #4
 8001cf8:	f000 ff5e 	bl	8002bb8 <HAL_MPU_Enable>

}
 8001cfc:	bf00      	nop
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d08:	b672      	cpsid	i
}
 8001d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d0c:	bf00      	nop
 8001d0e:	e7fd      	b.n	8001d0c <Error_Handler+0x8>

08001d10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d16:	4b0a      	ldr	r3, [pc, #40]	@ (8001d40 <HAL_MspInit+0x30>)
 8001d18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d1c:	4a08      	ldr	r2, [pc, #32]	@ (8001d40 <HAL_MspInit+0x30>)
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d26:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <HAL_MspInit+0x30>)
 8001d28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	58024400 	.word	0x58024400

08001d44 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b0b4      	sub	sp, #208	@ 0xd0
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d4c:	f107 0310 	add.w	r3, r7, #16
 8001d50:	22c0      	movs	r2, #192	@ 0xc0
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f006 faa7 	bl	80082a8 <memset>
  if(hhrtim->Instance==HRTIM1)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a14      	ldr	r2, [pc, #80]	@ (8001db0 <HAL_HRTIM_MspInit+0x6c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d121      	bne.n	8001da8 <HAL_HRTIM_MspInit+0x64>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8001d64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d76:	f107 0310 	add.w	r3, r7, #16
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f003 fc40 	bl	8005600 <HAL_RCCEx_PeriphCLKConfig>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8001d86:	f7ff ffbd 	bl	8001d04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001db4 <HAL_HRTIM_MspInit+0x70>)
 8001d8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d90:	4a08      	ldr	r2, [pc, #32]	@ (8001db4 <HAL_HRTIM_MspInit+0x70>)
 8001d92:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001d96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d9a:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <HAL_HRTIM_MspInit+0x70>)
 8001d9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001da0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8001da8:	bf00      	nop
 8001daa:	37d0      	adds	r7, #208	@ 0xd0
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40017400 	.word	0x40017400
 8001db4:	58024400 	.word	0x58024400

08001db8 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	@ 0x28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a23      	ldr	r2, [pc, #140]	@ (8001e64 <HAL_HRTIM_MspPostInit+0xac>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d13f      	bne.n	8001e5a <HAL_HRTIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dda:	4b23      	ldr	r3, [pc, #140]	@ (8001e68 <HAL_HRTIM_MspPostInit+0xb0>)
 8001ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001de0:	4a21      	ldr	r2, [pc, #132]	@ (8001e68 <HAL_HRTIM_MspPostInit+0xb0>)
 8001de2:	f043 0304 	orr.w	r3, r3, #4
 8001de6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dea:	4b1f      	ldr	r3, [pc, #124]	@ (8001e68 <HAL_HRTIM_MspPostInit+0xb0>)
 8001dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e68 <HAL_HRTIM_MspPostInit+0xb0>)
 8001dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dfe:	4a1a      	ldr	r2, [pc, #104]	@ (8001e68 <HAL_HRTIM_MspPostInit+0xb0>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e08:	4b17      	ldr	r3, [pc, #92]	@ (8001e68 <HAL_HRTIM_MspPostInit+0xb0>)
 8001e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> HRTIM_CHC1
    PA10     ------> HRTIM_CHC2
    PA11     ------> HRTIM_CHD1
    PA12     ------> HRTIM_CHD2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001e16:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	480e      	ldr	r0, [pc, #56]	@ (8001e6c <HAL_HRTIM_MspPostInit+0xb4>)
 8001e34:	f000 ff20 	bl	8002c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001e38:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001e3c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e46:	2303      	movs	r3, #3
 8001e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	4619      	mov	r1, r3
 8001e54:	4806      	ldr	r0, [pc, #24]	@ (8001e70 <HAL_HRTIM_MspPostInit+0xb8>)
 8001e56:	f000 ff0f 	bl	8002c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001e5a:	bf00      	nop
 8001e5c:	3728      	adds	r7, #40	@ 0x28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40017400 	.word	0x40017400
 8001e68:	58024400 	.word	0x58024400
 8001e6c:	58020800 	.word	0x58020800
 8001e70:	58020000 	.word	0x58020000

08001e74 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b0ba      	sub	sp, #232	@ 0xe8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e8c:	f107 0310 	add.w	r3, r7, #16
 8001e90:	22c0      	movs	r2, #192	@ 0xc0
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f006 fa07 	bl	80082a8 <memset>
  if(hlptim->Instance==LPTIM1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a2b      	ldr	r2, [pc, #172]	@ (8001f4c <HAL_LPTIM_MspInit+0xd8>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d14e      	bne.n	8001f42 <HAL_LPTIM_MspInit+0xce>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001ea4:	f04f 0220 	mov.w	r2, #32
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eb6:	f107 0310 	add.w	r3, r7, #16
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 fba0 	bl	8005600 <HAL_RCCEx_PeriphCLKConfig>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_LPTIM_MspInit+0x56>
    {
      Error_Handler();
 8001ec6:	f7ff ff1d 	bl	8001d04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001eca:	4b21      	ldr	r3, [pc, #132]	@ (8001f50 <HAL_LPTIM_MspInit+0xdc>)
 8001ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ed0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f50 <HAL_LPTIM_MspInit+0xdc>)
 8001ed2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ed6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001eda:	4b1d      	ldr	r3, [pc, #116]	@ (8001f50 <HAL_LPTIM_MspInit+0xdc>)
 8001edc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ee0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ee8:	4b19      	ldr	r3, [pc, #100]	@ (8001f50 <HAL_LPTIM_MspInit+0xdc>)
 8001eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eee:	4a18      	ldr	r2, [pc, #96]	@ (8001f50 <HAL_LPTIM_MspInit+0xdc>)
 8001ef0:	f043 0308 	orr.w	r3, r3, #8
 8001ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ef8:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <HAL_LPTIM_MspInit+0xdc>)
 8001efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration
    PD13     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8001f20:	2301      	movs	r3, #1
 8001f22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f26:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4809      	ldr	r0, [pc, #36]	@ (8001f54 <HAL_LPTIM_MspInit+0xe0>)
 8001f2e:	f000 fea3 	bl	8002c78 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2100      	movs	r1, #0
 8001f36:	205d      	movs	r0, #93	@ 0x5d
 8001f38:	f000 fdf1 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001f3c:	205d      	movs	r0, #93	@ 0x5d
 8001f3e:	f000 fe08 	bl	8002b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8001f42:	bf00      	nop
 8001f44:	37e8      	adds	r7, #232	@ 0xe8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40002400 	.word	0x40002400
 8001f50:	58024400 	.word	0x58024400
 8001f54:	58020c00 	.word	0x58020c00

08001f58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08c      	sub	sp, #48	@ 0x30
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a99      	ldr	r2, [pc, #612]	@ (80021cc <HAL_TIM_Base_MspInit+0x274>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d117      	bne.n	8001f9a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f6a:	4b99      	ldr	r3, [pc, #612]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8001f6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f70:	4a97      	ldr	r2, [pc, #604]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f7a:	4b95      	ldr	r3, [pc, #596]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8001f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	2019      	movs	r0, #25
 8001f8e:	f000 fdc6 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001f92:	2019      	movs	r0, #25
 8001f94:	f000 fddd 	bl	8002b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001f98:	e113      	b.n	80021c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM2)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fa2:	d117      	bne.n	8001fd4 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fa4:	4b8a      	ldr	r3, [pc, #552]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8001fa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001faa:	4a89      	ldr	r2, [pc, #548]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001fb4:	4b86      	ldr	r3, [pc, #536]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8001fb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	201c      	movs	r0, #28
 8001fc8:	f000 fda9 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fcc:	201c      	movs	r0, #28
 8001fce:	f000 fdc0 	bl	8002b52 <HAL_NVIC_EnableIRQ>
}
 8001fd2:	e0f6      	b.n	80021c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM4)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a7e      	ldr	r2, [pc, #504]	@ (80021d4 <HAL_TIM_Base_MspInit+0x27c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d117      	bne.n	800200e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fde:	4b7c      	ldr	r3, [pc, #496]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8001fe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fe4:	4a7a      	ldr	r2, [pc, #488]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8001fe6:	f043 0304 	orr.w	r3, r3, #4
 8001fea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001fee:	4b78      	ldr	r3, [pc, #480]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8001ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2100      	movs	r1, #0
 8002000:	201e      	movs	r0, #30
 8002002:	f000 fd8c 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002006:	201e      	movs	r0, #30
 8002008:	f000 fda3 	bl	8002b52 <HAL_NVIC_EnableIRQ>
}
 800200c:	e0d9      	b.n	80021c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM5)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a71      	ldr	r2, [pc, #452]	@ (80021d8 <HAL_TIM_Base_MspInit+0x280>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d117      	bne.n	8002048 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002018:	4b6d      	ldr	r3, [pc, #436]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 800201a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800201e:	4a6c      	ldr	r2, [pc, #432]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8002020:	f043 0308 	orr.w	r3, r3, #8
 8002024:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002028:	4b69      	ldr	r3, [pc, #420]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 800202a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	623b      	str	r3, [r7, #32]
 8002034:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	2032      	movs	r0, #50	@ 0x32
 800203c:	f000 fd6f 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002040:	2032      	movs	r0, #50	@ 0x32
 8002042:	f000 fd86 	bl	8002b52 <HAL_NVIC_EnableIRQ>
}
 8002046:	e0bc      	b.n	80021c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM8)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a63      	ldr	r2, [pc, #396]	@ (80021dc <HAL_TIM_Base_MspInit+0x284>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d127      	bne.n	80020a2 <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002052:	4b5f      	ldr	r3, [pc, #380]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8002054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002058:	4a5d      	ldr	r2, [pc, #372]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 800205a:	f043 0302 	orr.w	r3, r3, #2
 800205e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002062:	4b5b      	ldr	r3, [pc, #364]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8002064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002070:	2200      	movs	r2, #0
 8002072:	2100      	movs	r1, #0
 8002074:	202b      	movs	r0, #43	@ 0x2b
 8002076:	f000 fd52 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800207a:	202b      	movs	r0, #43	@ 0x2b
 800207c:	f000 fd69 	bl	8002b52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002080:	2200      	movs	r2, #0
 8002082:	2100      	movs	r1, #0
 8002084:	202c      	movs	r0, #44	@ 0x2c
 8002086:	f000 fd4a 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800208a:	202c      	movs	r0, #44	@ 0x2c
 800208c:	f000 fd61 	bl	8002b52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002090:	2200      	movs	r2, #0
 8002092:	2100      	movs	r1, #0
 8002094:	202d      	movs	r0, #45	@ 0x2d
 8002096:	f000 fd42 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800209a:	202d      	movs	r0, #45	@ 0x2d
 800209c:	f000 fd59 	bl	8002b52 <HAL_NVIC_EnableIRQ>
}
 80020a0:	e08f      	b.n	80021c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM12)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a4e      	ldr	r2, [pc, #312]	@ (80021e0 <HAL_TIM_Base_MspInit+0x288>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d117      	bne.n	80020dc <HAL_TIM_Base_MspInit+0x184>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80020ac:	4b48      	ldr	r3, [pc, #288]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 80020ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020b2:	4a47      	ldr	r2, [pc, #284]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 80020b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80020bc:	4b44      	ldr	r3, [pc, #272]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 80020be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c6:	61bb      	str	r3, [r7, #24]
 80020c8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2100      	movs	r1, #0
 80020ce:	202b      	movs	r0, #43	@ 0x2b
 80020d0:	f000 fd25 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80020d4:	202b      	movs	r0, #43	@ 0x2b
 80020d6:	f000 fd3c 	bl	8002b52 <HAL_NVIC_EnableIRQ>
}
 80020da:	e072      	b.n	80021c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM13)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a40      	ldr	r2, [pc, #256]	@ (80021e4 <HAL_TIM_Base_MspInit+0x28c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d117      	bne.n	8002116 <HAL_TIM_Base_MspInit+0x1be>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80020e6:	4b3a      	ldr	r3, [pc, #232]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 80020e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020ec:	4a38      	ldr	r2, [pc, #224]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 80020ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80020f6:	4b36      	ldr	r3, [pc, #216]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 80020f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002104:	2200      	movs	r2, #0
 8002106:	2100      	movs	r1, #0
 8002108:	202c      	movs	r0, #44	@ 0x2c
 800210a:	f000 fd08 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800210e:	202c      	movs	r0, #44	@ 0x2c
 8002110:	f000 fd1f 	bl	8002b52 <HAL_NVIC_EnableIRQ>
}
 8002114:	e055      	b.n	80021c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM14)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a33      	ldr	r2, [pc, #204]	@ (80021e8 <HAL_TIM_Base_MspInit+0x290>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d117      	bne.n	8002150 <HAL_TIM_Base_MspInit+0x1f8>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002120:	4b2b      	ldr	r3, [pc, #172]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8002122:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002126:	4a2a      	ldr	r2, [pc, #168]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800212c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002130:	4b27      	ldr	r3, [pc, #156]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8002132:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2100      	movs	r1, #0
 8002142:	202d      	movs	r0, #45	@ 0x2d
 8002144:	f000 fceb 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002148:	202d      	movs	r0, #45	@ 0x2d
 800214a:	f000 fd02 	bl	8002b52 <HAL_NVIC_EnableIRQ>
}
 800214e:	e038      	b.n	80021c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM15)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a25      	ldr	r2, [pc, #148]	@ (80021ec <HAL_TIM_Base_MspInit+0x294>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d117      	bne.n	800218a <HAL_TIM_Base_MspInit+0x232>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800215a:	4b1d      	ldr	r3, [pc, #116]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 800215c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002160:	4a1b      	ldr	r2, [pc, #108]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8002162:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002166:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800216a:	4b19      	ldr	r3, [pc, #100]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 800216c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002170:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8002178:	2200      	movs	r2, #0
 800217a:	2100      	movs	r1, #0
 800217c:	2074      	movs	r0, #116	@ 0x74
 800217e:	f000 fcce 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8002182:	2074      	movs	r0, #116	@ 0x74
 8002184:	f000 fce5 	bl	8002b52 <HAL_NVIC_EnableIRQ>
}
 8002188:	e01b      	b.n	80021c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM16)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a18      	ldr	r2, [pc, #96]	@ (80021f0 <HAL_TIM_Base_MspInit+0x298>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d116      	bne.n	80021c2 <HAL_TIM_Base_MspInit+0x26a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002194:	4b0e      	ldr	r3, [pc, #56]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8002196:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800219a:	4a0d      	ldr	r2, [pc, #52]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 800219c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021a4:	4b0a      	ldr	r3, [pc, #40]	@ (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 80021a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2100      	movs	r1, #0
 80021b6:	2075      	movs	r0, #117	@ 0x75
 80021b8:	f000 fcb1 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80021bc:	2075      	movs	r0, #117	@ 0x75
 80021be:	f000 fcc8 	bl	8002b52 <HAL_NVIC_EnableIRQ>
}
 80021c2:	bf00      	nop
 80021c4:	3730      	adds	r7, #48	@ 0x30
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40010000 	.word	0x40010000
 80021d0:	58024400 	.word	0x58024400
 80021d4:	40000800 	.word	0x40000800
 80021d8:	40000c00 	.word	0x40000c00
 80021dc:	40010400 	.word	0x40010400
 80021e0:	40001800 	.word	0x40001800
 80021e4:	40001c00 	.word	0x40001c00
 80021e8:	40002000 	.word	0x40002000
 80021ec:	40014000 	.word	0x40014000
 80021f0:	40014400 	.word	0x40014400

080021f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b092      	sub	sp, #72	@ 0x48
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4aa4      	ldr	r2, [pc, #656]	@ (80024a4 <HAL_TIM_MspPostInit+0x2b0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d120      	bne.n	8002258 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002216:	4ba4      	ldr	r3, [pc, #656]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800221c:	4aa2      	ldr	r2, [pc, #648]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 800221e:	f043 0310 	orr.w	r3, r3, #16
 8002222:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002226:	4ba0      	ldr	r3, [pc, #640]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	633b      	str	r3, [r7, #48]	@ 0x30
 8002232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002234:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8002238:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2300      	movs	r3, #0
 8002244:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002246:	2301      	movs	r3, #1
 8002248:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800224a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800224e:	4619      	mov	r1, r3
 8002250:	4896      	ldr	r0, [pc, #600]	@ (80024ac <HAL_TIM_MspPostInit+0x2b8>)
 8002252:	f000 fd11 	bl	8002c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8002256:	e189      	b.n	800256c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002260:	d11f      	bne.n	80022a2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002262:	4b91      	ldr	r3, [pc, #580]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002268:	4a8f      	ldr	r2, [pc, #572]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002272:	4b8d      	ldr	r3, [pc, #564]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800227e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002280:	2301      	movs	r3, #1
 8002282:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002284:	2302      	movs	r3, #2
 8002286:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228c:	2300      	movs	r3, #0
 800228e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002290:	2301      	movs	r3, #1
 8002292:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002294:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002298:	4619      	mov	r1, r3
 800229a:	4885      	ldr	r0, [pc, #532]	@ (80024b0 <HAL_TIM_MspPostInit+0x2bc>)
 800229c:	f000 fcec 	bl	8002c78 <HAL_GPIO_Init>
}
 80022a0:	e164      	b.n	800256c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM4)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a83      	ldr	r2, [pc, #524]	@ (80024b4 <HAL_TIM_MspPostInit+0x2c0>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d13f      	bne.n	800232c <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ac:	4b7e      	ldr	r3, [pc, #504]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 80022ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022b2:	4a7d      	ldr	r2, [pc, #500]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 80022b4:	f043 0308 	orr.w	r3, r3, #8
 80022b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022bc:	4b7a      	ldr	r3, [pc, #488]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 80022be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ca:	4b77      	ldr	r3, [pc, #476]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 80022cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d0:	4a75      	ldr	r2, [pc, #468]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 80022d2:	f043 0302 	orr.w	r3, r3, #2
 80022d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022da:	4b73      	ldr	r3, [pc, #460]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 80022dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80022e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80022e8:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80022ec:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	2302      	movs	r3, #2
 80022f0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f6:	2300      	movs	r3, #0
 80022f8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022fa:	2302      	movs	r3, #2
 80022fc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002302:	4619      	mov	r1, r3
 8002304:	486c      	ldr	r0, [pc, #432]	@ (80024b8 <HAL_TIM_MspPostInit+0x2c4>)
 8002306:	f000 fcb7 	bl	8002c78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800230a:	2380      	movs	r3, #128	@ 0x80
 800230c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002316:	2300      	movs	r3, #0
 8002318:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800231a:	2302      	movs	r3, #2
 800231c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002322:	4619      	mov	r1, r3
 8002324:	4865      	ldr	r0, [pc, #404]	@ (80024bc <HAL_TIM_MspPostInit+0x2c8>)
 8002326:	f000 fca7 	bl	8002c78 <HAL_GPIO_Init>
}
 800232a:	e11f      	b.n	800256c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM5)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a63      	ldr	r2, [pc, #396]	@ (80024c0 <HAL_TIM_MspPostInit+0x2cc>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d11f      	bne.n	8002376 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002336:	4b5c      	ldr	r3, [pc, #368]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800233c:	4a5a      	ldr	r2, [pc, #360]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002346:	4b58      	ldr	r3, [pc, #352]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	623b      	str	r3, [r7, #32]
 8002352:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002354:	2306      	movs	r3, #6
 8002356:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002360:	2300      	movs	r3, #0
 8002362:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002364:	2302      	movs	r3, #2
 8002366:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002368:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800236c:	4619      	mov	r1, r3
 800236e:	4850      	ldr	r0, [pc, #320]	@ (80024b0 <HAL_TIM_MspPostInit+0x2bc>)
 8002370:	f000 fc82 	bl	8002c78 <HAL_GPIO_Init>
}
 8002374:	e0fa      	b.n	800256c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM8)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a52      	ldr	r2, [pc, #328]	@ (80024c4 <HAL_TIM_MspPostInit+0x2d0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d120      	bne.n	80023c2 <HAL_TIM_MspPostInit+0x1ce>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002380:	4b49      	ldr	r3, [pc, #292]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002386:	4a48      	ldr	r2, [pc, #288]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002388:	f043 0304 	orr.w	r3, r3, #4
 800238c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002390:	4b45      	ldr	r3, [pc, #276]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800239e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023a2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	2300      	movs	r3, #0
 80023ae:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80023b0:	2303      	movs	r3, #3
 80023b2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023b8:	4619      	mov	r1, r3
 80023ba:	4843      	ldr	r0, [pc, #268]	@ (80024c8 <HAL_TIM_MspPostInit+0x2d4>)
 80023bc:	f000 fc5c 	bl	8002c78 <HAL_GPIO_Init>
}
 80023c0:	e0d4      	b.n	800256c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM12)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a41      	ldr	r2, [pc, #260]	@ (80024cc <HAL_TIM_MspPostInit+0x2d8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d120      	bne.n	800240e <HAL_TIM_MspPostInit+0x21a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023cc:	4b36      	ldr	r3, [pc, #216]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 80023ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023d2:	4a35      	ldr	r2, [pc, #212]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023dc:	4b32      	ldr	r3, [pc, #200]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 80023de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	61bb      	str	r3, [r7, #24]
 80023e8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023ee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	2302      	movs	r3, #2
 80023f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f8:	2300      	movs	r3, #0
 80023fa:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80023fc:	2302      	movs	r3, #2
 80023fe:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002400:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002404:	4619      	mov	r1, r3
 8002406:	482d      	ldr	r0, [pc, #180]	@ (80024bc <HAL_TIM_MspPostInit+0x2c8>)
 8002408:	f000 fc36 	bl	8002c78 <HAL_GPIO_Init>
}
 800240c:	e0ae      	b.n	800256c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM13)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a2f      	ldr	r2, [pc, #188]	@ (80024d0 <HAL_TIM_MspPostInit+0x2dc>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d11f      	bne.n	8002458 <HAL_TIM_MspPostInit+0x264>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002418:	4b23      	ldr	r3, [pc, #140]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 800241a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800241e:	4a22      	ldr	r2, [pc, #136]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002428:	4b1f      	ldr	r3, [pc, #124]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 800242a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002436:	2340      	movs	r3, #64	@ 0x40
 8002438:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002442:	2300      	movs	r3, #0
 8002444:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002446:	2309      	movs	r3, #9
 8002448:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800244e:	4619      	mov	r1, r3
 8002450:	4817      	ldr	r0, [pc, #92]	@ (80024b0 <HAL_TIM_MspPostInit+0x2bc>)
 8002452:	f000 fc11 	bl	8002c78 <HAL_GPIO_Init>
}
 8002456:	e089      	b.n	800256c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM14)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a1d      	ldr	r2, [pc, #116]	@ (80024d4 <HAL_TIM_MspPostInit+0x2e0>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d13a      	bne.n	80024d8 <HAL_TIM_MspPostInit+0x2e4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002462:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002468:	4a0f      	ldr	r2, [pc, #60]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002472:	4b0d      	ldr	r3, [pc, #52]	@ (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002480:	2380      	movs	r3, #128	@ 0x80
 8002482:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002490:	2309      	movs	r3, #9
 8002492:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002494:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002498:	4619      	mov	r1, r3
 800249a:	4805      	ldr	r0, [pc, #20]	@ (80024b0 <HAL_TIM_MspPostInit+0x2bc>)
 800249c:	f000 fbec 	bl	8002c78 <HAL_GPIO_Init>
}
 80024a0:	e064      	b.n	800256c <HAL_TIM_MspPostInit+0x378>
 80024a2:	bf00      	nop
 80024a4:	40010000 	.word	0x40010000
 80024a8:	58024400 	.word	0x58024400
 80024ac:	58021000 	.word	0x58021000
 80024b0:	58020000 	.word	0x58020000
 80024b4:	40000800 	.word	0x40000800
 80024b8:	58020c00 	.word	0x58020c00
 80024bc:	58020400 	.word	0x58020400
 80024c0:	40000c00 	.word	0x40000c00
 80024c4:	40010400 	.word	0x40010400
 80024c8:	58020800 	.word	0x58020800
 80024cc:	40001800 	.word	0x40001800
 80024d0:	40001c00 	.word	0x40001c00
 80024d4:	40002000 	.word	0x40002000
  else if(htim->Instance==TIM15)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a25      	ldr	r2, [pc, #148]	@ (8002574 <HAL_TIM_MspPostInit+0x380>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d11f      	bne.n	8002522 <HAL_TIM_MspPostInit+0x32e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024e2:	4b25      	ldr	r3, [pc, #148]	@ (8002578 <HAL_TIM_MspPostInit+0x384>)
 80024e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024e8:	4a23      	ldr	r2, [pc, #140]	@ (8002578 <HAL_TIM_MspPostInit+0x384>)
 80024ea:	f043 0310 	orr.w	r3, r3, #16
 80024ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024f2:	4b21      	ldr	r3, [pc, #132]	@ (8002578 <HAL_TIM_MspPostInit+0x384>)
 80024f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002500:	2360      	movs	r3, #96	@ 0x60
 8002502:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	2302      	movs	r3, #2
 8002506:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250c:	2300      	movs	r3, #0
 800250e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002510:	2304      	movs	r3, #4
 8002512:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002514:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002518:	4619      	mov	r1, r3
 800251a:	4818      	ldr	r0, [pc, #96]	@ (800257c <HAL_TIM_MspPostInit+0x388>)
 800251c:	f000 fbac 	bl	8002c78 <HAL_GPIO_Init>
}
 8002520:	e024      	b.n	800256c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM16)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a16      	ldr	r2, [pc, #88]	@ (8002580 <HAL_TIM_MspPostInit+0x38c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d11f      	bne.n	800256c <HAL_TIM_MspPostInit+0x378>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800252c:	4b12      	ldr	r3, [pc, #72]	@ (8002578 <HAL_TIM_MspPostInit+0x384>)
 800252e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002532:	4a11      	ldr	r2, [pc, #68]	@ (8002578 <HAL_TIM_MspPostInit+0x384>)
 8002534:	f043 0302 	orr.w	r3, r3, #2
 8002538:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800253c:	4b0e      	ldr	r3, [pc, #56]	@ (8002578 <HAL_TIM_MspPostInit+0x384>)
 800253e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800254a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800254e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002550:	2302      	movs	r3, #2
 8002552:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002558:	2300      	movs	r3, #0
 800255a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800255c:	2301      	movs	r3, #1
 800255e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002560:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002564:	4619      	mov	r1, r3
 8002566:	4807      	ldr	r0, [pc, #28]	@ (8002584 <HAL_TIM_MspPostInit+0x390>)
 8002568:	f000 fb86 	bl	8002c78 <HAL_GPIO_Init>
}
 800256c:	bf00      	nop
 800256e:	3748      	adds	r7, #72	@ 0x48
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40014000 	.word	0x40014000
 8002578:	58024400 	.word	0x58024400
 800257c:	58021000 	.word	0x58021000
 8002580:	40014400 	.word	0x40014400
 8002584:	58020400 	.word	0x58020400

08002588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800258c:	bf00      	nop
 800258e:	e7fd      	b.n	800258c <NMI_Handler+0x4>

08002590 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002594:	bf00      	nop
 8002596:	e7fd      	b.n	8002594 <HardFault_Handler+0x4>

08002598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800259c:	bf00      	nop
 800259e:	e7fd      	b.n	800259c <MemManage_Handler+0x4>

080025a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025a4:	bf00      	nop
 80025a6:	e7fd      	b.n	80025a4 <BusFault_Handler+0x4>

080025a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025ac:	bf00      	nop
 80025ae:	e7fd      	b.n	80025ac <UsageFault_Handler+0x4>

080025b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025be:	b480      	push	{r7}
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025de:	f000 f997 	bl	8002910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025ec:	4802      	ldr	r0, [pc, #8]	@ (80025f8 <TIM1_UP_IRQHandler+0x10>)
 80025ee:	f004 fdb5 	bl	800715c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	24000160 	.word	0x24000160

080025fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002600:	4802      	ldr	r0, [pc, #8]	@ (800260c <TIM2_IRQHandler+0x10>)
 8002602:	f004 fdab 	bl	800715c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	240001ac 	.word	0x240001ac

08002610 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002614:	4802      	ldr	r0, [pc, #8]	@ (8002620 <TIM4_IRQHandler+0x10>)
 8002616:	f004 fda1 	bl	800715c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	240001f8 	.word	0x240001f8

08002624 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002628:	4803      	ldr	r0, [pc, #12]	@ (8002638 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800262a:	f004 fd97 	bl	800715c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800262e:	4803      	ldr	r0, [pc, #12]	@ (800263c <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8002630:	f004 fd94 	bl	800715c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}
 8002638:	24000290 	.word	0x24000290
 800263c:	240002dc 	.word	0x240002dc

08002640 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002644:	4803      	ldr	r0, [pc, #12]	@ (8002654 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8002646:	f004 fd89 	bl	800715c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800264a:	4803      	ldr	r0, [pc, #12]	@ (8002658 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800264c:	f004 fd86 	bl	800715c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}
 8002654:	24000290 	.word	0x24000290
 8002658:	24000328 	.word	0x24000328

0800265c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002660:	4803      	ldr	r0, [pc, #12]	@ (8002670 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8002662:	f004 fd7b 	bl	800715c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8002666:	4803      	ldr	r0, [pc, #12]	@ (8002674 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8002668:	f004 fd78 	bl	800715c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}
 8002670:	24000290 	.word	0x24000290
 8002674:	24000374 	.word	0x24000374

08002678 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800267c:	4802      	ldr	r0, [pc, #8]	@ (8002688 <TIM5_IRQHandler+0x10>)
 800267e:	f004 fd6d 	bl	800715c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	24000244 	.word	0x24000244

0800268c <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002690:	4802      	ldr	r0, [pc, #8]	@ (800269c <LPTIM1_IRQHandler+0x10>)
 8002692:	f001 fcff 	bl	8004094 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	24000128 	.word	0x24000128

080026a0 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80026a4:	4802      	ldr	r0, [pc, #8]	@ (80026b0 <TIM15_IRQHandler+0x10>)
 80026a6:	f004 fd59 	bl	800715c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	240003c0 	.word	0x240003c0

080026b4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80026b8:	4802      	ldr	r0, [pc, #8]	@ (80026c4 <TIM16_IRQHandler+0x10>)
 80026ba:	f004 fd4f 	bl	800715c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	2400040c 	.word	0x2400040c

080026c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026cc:	4b37      	ldr	r3, [pc, #220]	@ (80027ac <SystemInit+0xe4>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d2:	4a36      	ldr	r2, [pc, #216]	@ (80027ac <SystemInit+0xe4>)
 80026d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026dc:	4b34      	ldr	r3, [pc, #208]	@ (80027b0 <SystemInit+0xe8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 030f 	and.w	r3, r3, #15
 80026e4:	2b06      	cmp	r3, #6
 80026e6:	d807      	bhi.n	80026f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026e8:	4b31      	ldr	r3, [pc, #196]	@ (80027b0 <SystemInit+0xe8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f023 030f 	bic.w	r3, r3, #15
 80026f0:	4a2f      	ldr	r2, [pc, #188]	@ (80027b0 <SystemInit+0xe8>)
 80026f2:	f043 0307 	orr.w	r3, r3, #7
 80026f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80026f8:	4b2e      	ldr	r3, [pc, #184]	@ (80027b4 <SystemInit+0xec>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a2d      	ldr	r2, [pc, #180]	@ (80027b4 <SystemInit+0xec>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002704:	4b2b      	ldr	r3, [pc, #172]	@ (80027b4 <SystemInit+0xec>)
 8002706:	2200      	movs	r2, #0
 8002708:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800270a:	4b2a      	ldr	r3, [pc, #168]	@ (80027b4 <SystemInit+0xec>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	4929      	ldr	r1, [pc, #164]	@ (80027b4 <SystemInit+0xec>)
 8002710:	4b29      	ldr	r3, [pc, #164]	@ (80027b8 <SystemInit+0xf0>)
 8002712:	4013      	ands	r3, r2
 8002714:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002716:	4b26      	ldr	r3, [pc, #152]	@ (80027b0 <SystemInit+0xe8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d007      	beq.n	8002732 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002722:	4b23      	ldr	r3, [pc, #140]	@ (80027b0 <SystemInit+0xe8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 030f 	bic.w	r3, r3, #15
 800272a:	4a21      	ldr	r2, [pc, #132]	@ (80027b0 <SystemInit+0xe8>)
 800272c:	f043 0307 	orr.w	r3, r3, #7
 8002730:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002732:	4b20      	ldr	r3, [pc, #128]	@ (80027b4 <SystemInit+0xec>)
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002738:	4b1e      	ldr	r3, [pc, #120]	@ (80027b4 <SystemInit+0xec>)
 800273a:	2200      	movs	r2, #0
 800273c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800273e:	4b1d      	ldr	r3, [pc, #116]	@ (80027b4 <SystemInit+0xec>)
 8002740:	2200      	movs	r2, #0
 8002742:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002744:	4b1b      	ldr	r3, [pc, #108]	@ (80027b4 <SystemInit+0xec>)
 8002746:	4a1d      	ldr	r2, [pc, #116]	@ (80027bc <SystemInit+0xf4>)
 8002748:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800274a:	4b1a      	ldr	r3, [pc, #104]	@ (80027b4 <SystemInit+0xec>)
 800274c:	4a1c      	ldr	r2, [pc, #112]	@ (80027c0 <SystemInit+0xf8>)
 800274e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002750:	4b18      	ldr	r3, [pc, #96]	@ (80027b4 <SystemInit+0xec>)
 8002752:	4a1c      	ldr	r2, [pc, #112]	@ (80027c4 <SystemInit+0xfc>)
 8002754:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002756:	4b17      	ldr	r3, [pc, #92]	@ (80027b4 <SystemInit+0xec>)
 8002758:	2200      	movs	r2, #0
 800275a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800275c:	4b15      	ldr	r3, [pc, #84]	@ (80027b4 <SystemInit+0xec>)
 800275e:	4a19      	ldr	r2, [pc, #100]	@ (80027c4 <SystemInit+0xfc>)
 8002760:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002762:	4b14      	ldr	r3, [pc, #80]	@ (80027b4 <SystemInit+0xec>)
 8002764:	2200      	movs	r2, #0
 8002766:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002768:	4b12      	ldr	r3, [pc, #72]	@ (80027b4 <SystemInit+0xec>)
 800276a:	4a16      	ldr	r2, [pc, #88]	@ (80027c4 <SystemInit+0xfc>)
 800276c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800276e:	4b11      	ldr	r3, [pc, #68]	@ (80027b4 <SystemInit+0xec>)
 8002770:	2200      	movs	r2, #0
 8002772:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002774:	4b0f      	ldr	r3, [pc, #60]	@ (80027b4 <SystemInit+0xec>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0e      	ldr	r2, [pc, #56]	@ (80027b4 <SystemInit+0xec>)
 800277a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800277e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002780:	4b0c      	ldr	r3, [pc, #48]	@ (80027b4 <SystemInit+0xec>)
 8002782:	2200      	movs	r2, #0
 8002784:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002786:	4b10      	ldr	r3, [pc, #64]	@ (80027c8 <SystemInit+0x100>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4b10      	ldr	r3, [pc, #64]	@ (80027cc <SystemInit+0x104>)
 800278c:	4013      	ands	r3, r2
 800278e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002792:	d202      	bcs.n	800279a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002794:	4b0e      	ldr	r3, [pc, #56]	@ (80027d0 <SystemInit+0x108>)
 8002796:	2201      	movs	r2, #1
 8002798:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800279a:	4b0e      	ldr	r3, [pc, #56]	@ (80027d4 <SystemInit+0x10c>)
 800279c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80027a0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80027a2:	bf00      	nop
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000ed00 	.word	0xe000ed00
 80027b0:	52002000 	.word	0x52002000
 80027b4:	58024400 	.word	0x58024400
 80027b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80027bc:	02020200 	.word	0x02020200
 80027c0:	01ff0000 	.word	0x01ff0000
 80027c4:	01010280 	.word	0x01010280
 80027c8:	5c001000 	.word	0x5c001000
 80027cc:	ffff0000 	.word	0xffff0000
 80027d0:	51008108 	.word	0x51008108
 80027d4:	52004000 	.word	0x52004000

080027d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80027d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002810 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027dc:	f7ff ff74 	bl	80026c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027e0:	480c      	ldr	r0, [pc, #48]	@ (8002814 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027e2:	490d      	ldr	r1, [pc, #52]	@ (8002818 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027e4:	4a0d      	ldr	r2, [pc, #52]	@ (800281c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027e8:	e002      	b.n	80027f0 <LoopCopyDataInit>

080027ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ee:	3304      	adds	r3, #4

080027f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027f4:	d3f9      	bcc.n	80027ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002820 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002824 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027fc:	e001      	b.n	8002802 <LoopFillZerobss>

080027fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002800:	3204      	adds	r2, #4

08002802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002804:	d3fb      	bcc.n	80027fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002806:	f005 fd57 	bl	80082b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800280a:	f7fd fd65 	bl	80002d8 <main>
  bx  lr
 800280e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002810:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002814:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002818:	2400002c 	.word	0x2400002c
  ldr r2, =_sidata
 800281c:	080090a0 	.word	0x080090a0
  ldr r2, =_sbss
 8002820:	24000030 	.word	0x24000030
  ldr r4, =_ebss
 8002824:	240023b8 	.word	0x240023b8

08002828 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002828:	e7fe      	b.n	8002828 <ADC3_IRQHandler>
	...

0800282c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002832:	2003      	movs	r0, #3
 8002834:	f000 f968 	bl	8002b08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002838:	f002 fd68 	bl	800530c <HAL_RCC_GetSysClockFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b15      	ldr	r3, [pc, #84]	@ (8002894 <HAL_Init+0x68>)
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	f003 030f 	and.w	r3, r3, #15
 8002848:	4913      	ldr	r1, [pc, #76]	@ (8002898 <HAL_Init+0x6c>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	fa22 f303 	lsr.w	r3, r2, r3
 8002854:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002856:	4b0f      	ldr	r3, [pc, #60]	@ (8002894 <HAL_Init+0x68>)
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	4a0e      	ldr	r2, [pc, #56]	@ (8002898 <HAL_Init+0x6c>)
 8002860:	5cd3      	ldrb	r3, [r2, r3]
 8002862:	f003 031f 	and.w	r3, r3, #31
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	fa22 f303 	lsr.w	r3, r2, r3
 800286c:	4a0b      	ldr	r2, [pc, #44]	@ (800289c <HAL_Init+0x70>)
 800286e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002870:	4a0b      	ldr	r2, [pc, #44]	@ (80028a0 <HAL_Init+0x74>)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002876:	200f      	movs	r0, #15
 8002878:	f000 f814 	bl	80028a4 <HAL_InitTick>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e002      	b.n	800288c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002886:	f7ff fa43 	bl	8001d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	58024400 	.word	0x58024400
 8002898:	08008eb0 	.word	0x08008eb0
 800289c:	24000008 	.word	0x24000008
 80028a0:	24000004 	.word	0x24000004

080028a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028ac:	4b15      	ldr	r3, [pc, #84]	@ (8002904 <HAL_InitTick+0x60>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e021      	b.n	80028fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028b8:	4b13      	ldr	r3, [pc, #76]	@ (8002908 <HAL_InitTick+0x64>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <HAL_InitTick+0x60>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	4619      	mov	r1, r3
 80028c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 f94d 	bl	8002b6e <HAL_SYSTICK_Config>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e00e      	b.n	80028fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b0f      	cmp	r3, #15
 80028e2:	d80a      	bhi.n	80028fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028e4:	2200      	movs	r2, #0
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ec:	f000 f917 	bl	8002b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028f0:	4a06      	ldr	r2, [pc, #24]	@ (800290c <HAL_InitTick+0x68>)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	e000      	b.n	80028fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	24000010 	.word	0x24000010
 8002908:	24000004 	.word	0x24000004
 800290c:	2400000c 	.word	0x2400000c

08002910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002914:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <HAL_IncTick+0x20>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	461a      	mov	r2, r3
 800291a:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <HAL_IncTick+0x24>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4413      	add	r3, r2
 8002920:	4a04      	ldr	r2, [pc, #16]	@ (8002934 <HAL_IncTick+0x24>)
 8002922:	6013      	str	r3, [r2, #0]
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	24000010 	.word	0x24000010
 8002934:	240023b4 	.word	0x240023b4

08002938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return uwTick;
 800293c:	4b03      	ldr	r3, [pc, #12]	@ (800294c <HAL_GetTick+0x14>)
 800293e:	681b      	ldr	r3, [r3, #0]
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	240023b4 	.word	0x240023b4

08002950 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002954:	4b03      	ldr	r3, [pc, #12]	@ (8002964 <HAL_GetREVID+0x14>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	0c1b      	lsrs	r3, r3, #16
}
 800295a:	4618      	mov	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	5c001000 	.word	0x5c001000

08002968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002978:	4b0b      	ldr	r3, [pc, #44]	@ (80029a8 <__NVIC_SetPriorityGrouping+0x40>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002984:	4013      	ands	r3, r2
 8002986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002990:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <__NVIC_SetPriorityGrouping+0x44>)
 8002992:	4313      	orrs	r3, r2
 8002994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002996:	4a04      	ldr	r2, [pc, #16]	@ (80029a8 <__NVIC_SetPriorityGrouping+0x40>)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	60d3      	str	r3, [r2, #12]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000ed00 	.word	0xe000ed00
 80029ac:	05fa0000 	.word	0x05fa0000

080029b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b4:	4b04      	ldr	r3, [pc, #16]	@ (80029c8 <__NVIC_GetPriorityGrouping+0x18>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	0a1b      	lsrs	r3, r3, #8
 80029ba:	f003 0307 	and.w	r3, r3, #7
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80029d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	db0b      	blt.n	80029f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	f003 021f 	and.w	r2, r3, #31
 80029e4:	4907      	ldr	r1, [pc, #28]	@ (8002a04 <__NVIC_EnableIRQ+0x38>)
 80029e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	2001      	movs	r0, #1
 80029ee:	fa00 f202 	lsl.w	r2, r0, r2
 80029f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000e100 	.word	0xe000e100

08002a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	6039      	str	r1, [r7, #0]
 8002a12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	db0a      	blt.n	8002a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	490c      	ldr	r1, [pc, #48]	@ (8002a54 <__NVIC_SetPriority+0x4c>)
 8002a22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a26:	0112      	lsls	r2, r2, #4
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a30:	e00a      	b.n	8002a48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4908      	ldr	r1, [pc, #32]	@ (8002a58 <__NVIC_SetPriority+0x50>)
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	3b04      	subs	r3, #4
 8002a40:	0112      	lsls	r2, r2, #4
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	440b      	add	r3, r1
 8002a46:	761a      	strb	r2, [r3, #24]
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000e100 	.word	0xe000e100
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	@ 0x24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f1c3 0307 	rsb	r3, r3, #7
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	bf28      	it	cs
 8002a7a:	2304      	movcs	r3, #4
 8002a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3304      	adds	r3, #4
 8002a82:	2b06      	cmp	r3, #6
 8002a84:	d902      	bls.n	8002a8c <NVIC_EncodePriority+0x30>
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3b03      	subs	r3, #3
 8002a8a:	e000      	b.n	8002a8e <NVIC_EncodePriority+0x32>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a90:	f04f 32ff 	mov.w	r2, #4294967295
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002aae:	43d9      	mvns	r1, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab4:	4313      	orrs	r3, r2
         );
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3724      	adds	r7, #36	@ 0x24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ad4:	d301      	bcc.n	8002ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e00f      	b.n	8002afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ada:	4a0a      	ldr	r2, [pc, #40]	@ (8002b04 <SysTick_Config+0x40>)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ae2:	210f      	movs	r1, #15
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae8:	f7ff ff8e 	bl	8002a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aec:	4b05      	ldr	r3, [pc, #20]	@ (8002b04 <SysTick_Config+0x40>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002af2:	4b04      	ldr	r3, [pc, #16]	@ (8002b04 <SysTick_Config+0x40>)
 8002af4:	2207      	movs	r2, #7
 8002af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	e000e010 	.word	0xe000e010

08002b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ff29 	bl	8002968 <__NVIC_SetPriorityGrouping>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b086      	sub	sp, #24
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4603      	mov	r3, r0
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b2c:	f7ff ff40 	bl	80029b0 <__NVIC_GetPriorityGrouping>
 8002b30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	6978      	ldr	r0, [r7, #20]
 8002b38:	f7ff ff90 	bl	8002a5c <NVIC_EncodePriority>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b42:	4611      	mov	r1, r2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff5f 	bl	8002a08 <__NVIC_SetPriority>
}
 8002b4a:	bf00      	nop
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff33 	bl	80029cc <__NVIC_EnableIRQ>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff ffa4 	bl	8002ac4 <SysTick_Config>
 8002b7c:	4603      	mov	r3, r0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002b8c:	f3bf 8f5f 	dmb	sy
}
 8002b90:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002b92:	4b07      	ldr	r3, [pc, #28]	@ (8002bb0 <HAL_MPU_Disable+0x28>)
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	4a06      	ldr	r2, [pc, #24]	@ (8002bb0 <HAL_MPU_Disable+0x28>)
 8002b98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b9c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002b9e:	4b05      	ldr	r3, [pc, #20]	@ (8002bb4 <HAL_MPU_Disable+0x2c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	605a      	str	r2, [r3, #4]
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	e000ed00 	.word	0xe000ed00
 8002bb4:	e000ed90 	.word	0xe000ed90

08002bb8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002bc0:	4a0b      	ldr	r2, [pc, #44]	@ (8002bf0 <HAL_MPU_Enable+0x38>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002bca:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf4 <HAL_MPU_Enable+0x3c>)
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	4a09      	ldr	r2, [pc, #36]	@ (8002bf4 <HAL_MPU_Enable+0x3c>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002bd6:	f3bf 8f4f 	dsb	sy
}
 8002bda:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002bdc:	f3bf 8f6f 	isb	sy
}
 8002be0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	e000ed90 	.word	0xe000ed90
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	785a      	ldrb	r2, [r3, #1]
 8002c04:	4b1b      	ldr	r3, [pc, #108]	@ (8002c74 <HAL_MPU_ConfigRegion+0x7c>)
 8002c06:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002c08:	4b1a      	ldr	r3, [pc, #104]	@ (8002c74 <HAL_MPU_ConfigRegion+0x7c>)
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	4a19      	ldr	r2, [pc, #100]	@ (8002c74 <HAL_MPU_ConfigRegion+0x7c>)
 8002c0e:	f023 0301 	bic.w	r3, r3, #1
 8002c12:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002c14:	4a17      	ldr	r2, [pc, #92]	@ (8002c74 <HAL_MPU_ConfigRegion+0x7c>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	7b1b      	ldrb	r3, [r3, #12]
 8002c20:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	7adb      	ldrb	r3, [r3, #11]
 8002c26:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	7a9b      	ldrb	r3, [r3, #10]
 8002c2e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	7b5b      	ldrb	r3, [r3, #13]
 8002c36:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	7b9b      	ldrb	r3, [r3, #14]
 8002c3e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	7bdb      	ldrb	r3, [r3, #15]
 8002c46:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	7a5b      	ldrb	r3, [r3, #9]
 8002c4e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	7a1b      	ldrb	r3, [r3, #8]
 8002c56:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c58:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	7812      	ldrb	r2, [r2, #0]
 8002c5e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c60:	4a04      	ldr	r2, [pc, #16]	@ (8002c74 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c62:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c64:	6113      	str	r3, [r2, #16]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	e000ed90 	.word	0xe000ed90

08002c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b089      	sub	sp, #36	@ 0x24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002c86:	4b89      	ldr	r3, [pc, #548]	@ (8002eac <HAL_GPIO_Init+0x234>)
 8002c88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c8a:	e194      	b.n	8002fb6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	2101      	movs	r1, #1
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	fa01 f303 	lsl.w	r3, r1, r3
 8002c98:	4013      	ands	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 8186 	beq.w	8002fb0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d005      	beq.n	8002cbc <HAL_GPIO_Init+0x44>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d130      	bne.n	8002d1e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	091b      	lsrs	r3, r3, #4
 8002d08:	f003 0201 	and.w	r2, r3, #1
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	2b03      	cmp	r3, #3
 8002d28:	d017      	beq.n	8002d5a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	2203      	movs	r2, #3
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d123      	bne.n	8002dae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	08da      	lsrs	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3208      	adds	r2, #8
 8002d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	220f      	movs	r2, #15
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	08da      	lsrs	r2, r3, #3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3208      	adds	r2, #8
 8002da8:	69b9      	ldr	r1, [r7, #24]
 8002daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	2203      	movs	r2, #3
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 0203 	and.w	r2, r3, #3
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 80e0 	beq.w	8002fb0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df0:	4b2f      	ldr	r3, [pc, #188]	@ (8002eb0 <HAL_GPIO_Init+0x238>)
 8002df2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002df6:	4a2e      	ldr	r2, [pc, #184]	@ (8002eb0 <HAL_GPIO_Init+0x238>)
 8002df8:	f043 0302 	orr.w	r3, r3, #2
 8002dfc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002e00:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb0 <HAL_GPIO_Init+0x238>)
 8002e02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e0e:	4a29      	ldr	r2, [pc, #164]	@ (8002eb4 <HAL_GPIO_Init+0x23c>)
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	089b      	lsrs	r3, r3, #2
 8002e14:	3302      	adds	r3, #2
 8002e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	220f      	movs	r2, #15
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a20      	ldr	r2, [pc, #128]	@ (8002eb8 <HAL_GPIO_Init+0x240>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d052      	beq.n	8002ee0 <HAL_GPIO_Init+0x268>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8002ebc <HAL_GPIO_Init+0x244>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d031      	beq.n	8002ea6 <HAL_GPIO_Init+0x22e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a1e      	ldr	r2, [pc, #120]	@ (8002ec0 <HAL_GPIO_Init+0x248>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d02b      	beq.n	8002ea2 <HAL_GPIO_Init+0x22a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec4 <HAL_GPIO_Init+0x24c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d025      	beq.n	8002e9e <HAL_GPIO_Init+0x226>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a1c      	ldr	r2, [pc, #112]	@ (8002ec8 <HAL_GPIO_Init+0x250>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d01f      	beq.n	8002e9a <HAL_GPIO_Init+0x222>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002ecc <HAL_GPIO_Init+0x254>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d019      	beq.n	8002e96 <HAL_GPIO_Init+0x21e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a1a      	ldr	r2, [pc, #104]	@ (8002ed0 <HAL_GPIO_Init+0x258>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d013      	beq.n	8002e92 <HAL_GPIO_Init+0x21a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a19      	ldr	r2, [pc, #100]	@ (8002ed4 <HAL_GPIO_Init+0x25c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d00d      	beq.n	8002e8e <HAL_GPIO_Init+0x216>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a18      	ldr	r2, [pc, #96]	@ (8002ed8 <HAL_GPIO_Init+0x260>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d007      	beq.n	8002e8a <HAL_GPIO_Init+0x212>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a17      	ldr	r2, [pc, #92]	@ (8002edc <HAL_GPIO_Init+0x264>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d101      	bne.n	8002e86 <HAL_GPIO_Init+0x20e>
 8002e82:	2309      	movs	r3, #9
 8002e84:	e02d      	b.n	8002ee2 <HAL_GPIO_Init+0x26a>
 8002e86:	230a      	movs	r3, #10
 8002e88:	e02b      	b.n	8002ee2 <HAL_GPIO_Init+0x26a>
 8002e8a:	2308      	movs	r3, #8
 8002e8c:	e029      	b.n	8002ee2 <HAL_GPIO_Init+0x26a>
 8002e8e:	2307      	movs	r3, #7
 8002e90:	e027      	b.n	8002ee2 <HAL_GPIO_Init+0x26a>
 8002e92:	2306      	movs	r3, #6
 8002e94:	e025      	b.n	8002ee2 <HAL_GPIO_Init+0x26a>
 8002e96:	2305      	movs	r3, #5
 8002e98:	e023      	b.n	8002ee2 <HAL_GPIO_Init+0x26a>
 8002e9a:	2304      	movs	r3, #4
 8002e9c:	e021      	b.n	8002ee2 <HAL_GPIO_Init+0x26a>
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e01f      	b.n	8002ee2 <HAL_GPIO_Init+0x26a>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e01d      	b.n	8002ee2 <HAL_GPIO_Init+0x26a>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e01b      	b.n	8002ee2 <HAL_GPIO_Init+0x26a>
 8002eaa:	bf00      	nop
 8002eac:	58000080 	.word	0x58000080
 8002eb0:	58024400 	.word	0x58024400
 8002eb4:	58000400 	.word	0x58000400
 8002eb8:	58020000 	.word	0x58020000
 8002ebc:	58020400 	.word	0x58020400
 8002ec0:	58020800 	.word	0x58020800
 8002ec4:	58020c00 	.word	0x58020c00
 8002ec8:	58021000 	.word	0x58021000
 8002ecc:	58021400 	.word	0x58021400
 8002ed0:	58021800 	.word	0x58021800
 8002ed4:	58021c00 	.word	0x58021c00
 8002ed8:	58022000 	.word	0x58022000
 8002edc:	58022400 	.word	0x58022400
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	f002 0203 	and.w	r2, r2, #3
 8002ee8:	0092      	lsls	r2, r2, #2
 8002eea:	4093      	lsls	r3, r2
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ef2:	4938      	ldr	r1, [pc, #224]	@ (8002fd4 <HAL_GPIO_Init+0x35c>)
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	089b      	lsrs	r3, r3, #2
 8002ef8:	3302      	adds	r3, #2
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002f26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002f2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002f54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	43db      	mvns	r3, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4013      	ands	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f47f ae63 	bne.w	8002c8c <HAL_GPIO_Init+0x14>
  }
}
 8002fc6:	bf00      	nop
 8002fc8:	bf00      	nop
 8002fca:	3724      	adds	r7, #36	@ 0x24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	58000400 	.word	0x58000400

08002fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	807b      	strh	r3, [r7, #2]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fe8:	787b      	ldrb	r3, [r7, #1]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fee:	887a      	ldrh	r2, [r7, #2]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002ff4:	e003      	b.n	8002ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ff6:	887b      	ldrh	r3, [r7, #2]
 8002ff8:	041a      	lsls	r2, r3, #16
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	619a      	str	r2, [r3, #24]
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
	...

0800300c <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e0bd      	b.n	800319a <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2202      	movs	r2, #2
 8003022:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d031      	beq.n	80030c6 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a4f      	ldr	r2, [pc, #316]	@ (80031a4 <HAL_HRTIM_Init+0x198>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d10e      	bne.n	800308a <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 800306c:	4b4e      	ldr	r3, [pc, #312]	@ (80031a8 <HAL_HRTIM_Init+0x19c>)
 800306e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003072:	4a4d      	ldr	r2, [pc, #308]	@ (80031a8 <HAL_HRTIM_Init+0x19c>)
 8003074:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003078:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800307c:	4b4a      	ldr	r3, [pc, #296]	@ (80031a8 <HAL_HRTIM_Init+0x19c>)
 800307e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003082:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003098:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80030ae:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fe fe3c 	bl	8001d44 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d012      	beq.n	80030fe <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030e6:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800310e:	2300      	movs	r3, #0
 8003110:	75fb      	strb	r3, [r7, #23]
 8003112:	e03e      	b.n	8003192 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8003114:	7dfa      	ldrb	r2, [r7, #23]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	3318      	adds	r3, #24
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8003128:	7dfa      	ldrb	r2, [r7, #23]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	331c      	adds	r3, #28
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800313c:	7dfa      	ldrb	r2, [r7, #23]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	3320      	adds	r3, #32
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8003150:	7dfa      	ldrb	r2, [r7, #23]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	3324      	adds	r3, #36	@ 0x24
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8003164:	7dfa      	ldrb	r2, [r7, #23]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	3328      	adds	r3, #40	@ 0x28
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8003178:	7dfa      	ldrb	r2, [r7, #23]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	3330      	adds	r3, #48	@ 0x30
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800318c:	7dfb      	ldrb	r3, [r7, #23]
 800318e:	3301      	adds	r3, #1
 8003190:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8003192:	7dfb      	ldrb	r3, [r7, #23]
 8003194:	2b05      	cmp	r3, #5
 8003196:	d9bd      	bls.n	8003114 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40017400 	.word	0x40017400
 80031a8:	58024400 	.word	0x58024400

080031ac <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d101      	bne.n	80031c8 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 80031c4:	2302      	movs	r3, #2
 80031c6:	e015      	b.n	80031f4 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b05      	cmp	r3, #5
 80031d4:	d104      	bne.n	80031e0 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 faa8 	bl	800372e <HRTIM_MasterBase_Config>
 80031de:	e004      	b.n	80031ea <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 fad1 	bl	800378c <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_HRTIM_SimpleBaseStart_IT>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_SimpleBaseStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_HRTIM_SimpleBaseStart_IT+0x18>
 8003210:	2302      	movs	r3, #2
 8003212:	e037      	b.n	8003284 <HAL_HRTIM_SimpleBaseStart_IT+0x88>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Enable the repetition interrupt */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2b05      	cmp	r3, #5
 8003228:	d108      	bne.n	800323c <HAL_HRTIM_SimpleBaseStart_IT+0x40>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f042 0210 	orr.w	r2, r2, #16
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	e00f      	b.n	800325c <HAL_HRTIM_SimpleBaseStart_IT+0x60>
  }
  else
  {
    __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	01db      	lsls	r3, r3, #7
 8003244:	4413      	add	r3, r2
 8003246:	338c      	adds	r3, #140	@ 0x8c
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6811      	ldr	r1, [r2, #0]
 800324e:	f043 0210 	orr.w	r2, r3, #16
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	01db      	lsls	r3, r3, #7
 8003256:	440b      	add	r3, r1
 8003258:	338c      	adds	r3, #140	@ 0x8c
 800325a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the timer counter */
  __HAL_HRTIM_ENABLE(hhrtim, TimerIdxToTimerId[TimerIdx]);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6819      	ldr	r1, [r3, #0]
 8003262:	4a0b      	ldr	r2, [pc, #44]	@ (8003290 <HAL_HRTIM_SimpleBaseStart_IT+0x94>)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	24000014 	.word	0x24000014

08003294 <HAL_HRTIM_SimplePWMStart>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_SimplePWMStart(HRTIM_HandleTypeDef * hhrtim,
                                          uint32_t TimerIdx,
                                          uint32_t PWMChannel)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, PWMChannel));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d101      	bne.n	80032ae <HAL_HRTIM_SimplePWMStart+0x1a>
 80032aa:	2302      	movs	r3, #2
 80032ac:	e025      	b.n	80032fa <HAL_HRTIM_SimplePWMStart+0x66>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2202      	movs	r2, #2
 80032ba:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Enable the timer output */
  hhrtim->Instance->sCommonRegs.OENR |= PWMChannel;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f8d3 1394 	ldr.w	r1, [r3, #916]	@ 0x394
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394

  /* Enable the timer counter */
  __HAL_HRTIM_ENABLE(hhrtim, TimerIdxToTimerId[TimerIdx]);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6819      	ldr	r1, [r3, #0]
 80032d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003308 <HAL_HRTIM_SimplePWMStart+0x74>)
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	24000014 	.word	0x24000014

0800330c <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d101      	bne.n	8003328 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8003324:	2302      	movs	r3, #2
 8003326:	e05f      	b.n	80033e8 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8003332:	2302      	movs	r3, #2
 8003334:	e058      	b.n	80033e8 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2202      	movs	r2, #2
 8003342:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b05      	cmp	r3, #5
 800334a:	d104      	bne.n	8003356 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 fa5c 	bl	800380c <HRTIM_MasterWaveform_Config>
 8003354:	e004      	b.n	8003360 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	68b9      	ldr	r1, [r7, #8]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 fabc 	bl	80038d8 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6819      	ldr	r1, [r3, #0]
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	4613      	mov	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4403      	add	r3, r0
 8003372:	3320      	adds	r3, #32
 8003374:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6859      	ldr	r1, [r3, #4]
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	4613      	mov	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4403      	add	r3, r0
 8003388:	3324      	adds	r3, #36	@ 0x24
 800338a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6899      	ldr	r1, [r3, #8]
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	4613      	mov	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4403      	add	r3, r0
 800339e:	3328      	adds	r3, #40	@ 0x28
 80033a0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68d9      	ldr	r1, [r3, #12]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	4613      	mov	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4403      	add	r3, r0
 80033b4:	332c      	adds	r3, #44	@ 0x2c
 80033b6:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6919      	ldr	r1, [r3, #16]
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	4613      	mov	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4403      	add	r3, r0
 80033ca:	3330      	adds	r3, #48	@ 0x30
 80033cc:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80033ce:	68b9      	ldr	r1, [r7, #8]
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 fc99 	bl	8003d08 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d101      	bne.n	800340e <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 800340a:	2302      	movs	r3, #2
 800340c:	e157      	b.n	80036be <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8003418:	2302      	movs	r3, #2
 800341a:	e150      	b.n	80036be <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b05      	cmp	r3, #5
 8003430:	d140      	bne.n	80034b4 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3b01      	subs	r3, #1
 8003436:	2b07      	cmp	r3, #7
 8003438:	d82a      	bhi.n	8003490 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 800343a:	a201      	add	r2, pc, #4	@ (adr r2, 8003440 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 800343c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003440:	08003461 	.word	0x08003461
 8003444:	0800346d 	.word	0x0800346d
 8003448:	08003491 	.word	0x08003491
 800344c:	08003479 	.word	0x08003479
 8003450:	08003491 	.word	0x08003491
 8003454:	08003491 	.word	0x08003491
 8003458:	08003491 	.word	0x08003491
 800345c:	08003485 	.word	0x08003485
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	61da      	str	r2, [r3, #28]
        break;
 800346a:	e01a      	b.n	80034a2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	6812      	ldr	r2, [r2, #0]
 8003474:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 8003476:	e014      	b.n	80034a2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 8003482:	e00e      	b.n	80034a2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	6812      	ldr	r2, [r2, #0]
 800348c:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 800348e:	e008      	b.n	80034a2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2207      	movs	r2, #7
 8003494:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

        break;
 80034a0:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b07      	cmp	r3, #7
 80034ac:	f040 80fe 	bne.w	80036ac <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e104      	b.n	80036be <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	2b07      	cmp	r3, #7
 80034ba:	f200 80e3 	bhi.w	8003684 <HAL_HRTIM_WaveformCompareConfig+0x294>
 80034be:	a201      	add	r2, pc, #4	@ (adr r2, 80034c4 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80034c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c4:	080034e5 	.word	0x080034e5
 80034c8:	080034f9 	.word	0x080034f9
 80034cc:	08003685 	.word	0x08003685
 80034d0:	080035b5 	.word	0x080035b5
 80034d4:	08003685 	.word	0x08003685
 80034d8:	08003685 	.word	0x08003685
 80034dc:	08003685 	.word	0x08003685
 80034e0:	080035c9 	.word	0x080035c9
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6819      	ldr	r1, [r3, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	01db      	lsls	r3, r3, #7
 80034f0:	440b      	add	r3, r1
 80034f2:	339c      	adds	r3, #156	@ 0x9c
 80034f4:	601a      	str	r2, [r3, #0]
        break;
 80034f6:	e0d1      	b.n	800369c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6819      	ldr	r1, [r3, #0]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	01db      	lsls	r3, r3, #7
 8003504:	440b      	add	r3, r1
 8003506:	33a4      	adds	r3, #164	@ 0xa4
 8003508:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d03f      	beq.n	8003592 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	3301      	adds	r3, #1
 800351a:	01db      	lsls	r3, r3, #7
 800351c:	4413      	add	r3, r2
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	6811      	ldr	r1, [r2, #0]
 8003524:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	3301      	adds	r3, #1
 800352c:	01db      	lsls	r3, r3, #7
 800352e:	440b      	add	r3, r1
 8003530:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	3301      	adds	r3, #1
 800353a:	01db      	lsls	r3, r3, #7
 800353c:	4413      	add	r3, r2
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	68f9      	ldr	r1, [r7, #12]
 8003546:	6809      	ldr	r1, [r1, #0]
 8003548:	431a      	orrs	r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	3301      	adds	r3, #1
 800354e:	01db      	lsls	r3, r3, #7
 8003550:	440b      	add	r3, r1
 8003552:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800355c:	d109      	bne.n	8003572 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6819      	ldr	r1, [r3, #0]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	01db      	lsls	r3, r3, #7
 800356a:	440b      	add	r3, r1
 800356c:	339c      	adds	r3, #156	@ 0x9c
 800356e:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8003570:	e091      	b.n	8003696 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800357a:	f040 808c 	bne.w	8003696 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6819      	ldr	r1, [r3, #0]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	01db      	lsls	r3, r3, #7
 800358a:	440b      	add	r3, r1
 800358c:	33a8      	adds	r3, #168	@ 0xa8
 800358e:	601a      	str	r2, [r3, #0]
         break;
 8003590:	e081      	b.n	8003696 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	3301      	adds	r3, #1
 800359a:	01db      	lsls	r3, r3, #7
 800359c:	4413      	add	r3, r2
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	6811      	ldr	r1, [r2, #0]
 80035a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	3301      	adds	r3, #1
 80035ac:	01db      	lsls	r3, r3, #7
 80035ae:	440b      	add	r3, r1
 80035b0:	601a      	str	r2, [r3, #0]
         break;
 80035b2:	e070      	b.n	8003696 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6819      	ldr	r1, [r3, #0]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	01db      	lsls	r3, r3, #7
 80035c0:	440b      	add	r3, r1
 80035c2:	33a8      	adds	r3, #168	@ 0xa8
 80035c4:	601a      	str	r2, [r3, #0]
        break;
 80035c6:	e069      	b.n	800369c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6819      	ldr	r1, [r3, #0]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	01db      	lsls	r3, r3, #7
 80035d4:	440b      	add	r3, r1
 80035d6:	33ac      	adds	r3, #172	@ 0xac
 80035d8:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d03f      	beq.n	8003662 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	3301      	adds	r3, #1
 80035ea:	01db      	lsls	r3, r3, #7
 80035ec:	4413      	add	r3, r2
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	6811      	ldr	r1, [r2, #0]
 80035f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	3301      	adds	r3, #1
 80035fc:	01db      	lsls	r3, r3, #7
 80035fe:	440b      	add	r3, r1
 8003600:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	3301      	adds	r3, #1
 800360a:	01db      	lsls	r3, r3, #7
 800360c:	4413      	add	r3, r2
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	68f9      	ldr	r1, [r7, #12]
 8003618:	6809      	ldr	r1, [r1, #0]
 800361a:	431a      	orrs	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	3301      	adds	r3, #1
 8003620:	01db      	lsls	r3, r3, #7
 8003622:	440b      	add	r3, r1
 8003624:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800362e:	d109      	bne.n	8003644 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6819      	ldr	r1, [r3, #0]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	01db      	lsls	r3, r3, #7
 800363c:	440b      	add	r3, r1
 800363e:	339c      	adds	r3, #156	@ 0x9c
 8003640:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8003642:	e02a      	b.n	800369a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800364c:	d125      	bne.n	800369a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6819      	ldr	r1, [r3, #0]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	01db      	lsls	r3, r3, #7
 800365a:	440b      	add	r3, r1
 800365c:	33a8      	adds	r3, #168	@ 0xa8
 800365e:	601a      	str	r2, [r3, #0]
         break;
 8003660:	e01b      	b.n	800369a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	3301      	adds	r3, #1
 800366a:	01db      	lsls	r3, r3, #7
 800366c:	4413      	add	r3, r2
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	6811      	ldr	r1, [r2, #0]
 8003674:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	3301      	adds	r3, #1
 800367c:	01db      	lsls	r3, r3, #7
 800367e:	440b      	add	r3, r1
 8003680:	601a      	str	r2, [r3, #0]
         break;
 8003682:	e00a      	b.n	800369a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2207      	movs	r2, #7
 8003688:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

      break;
 8003694:	e002      	b.n	800369c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8003696:	bf00      	nop
 8003698:	e000      	b.n	800369c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800369a:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b07      	cmp	r3, #7
 80036a6:	d101      	bne.n	80036ac <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e008      	b.n	80036be <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop

080036cc <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d101      	bne.n	80036ea <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 80036e6:	2302      	movs	r3, #2
 80036e8:	e01d      	b.n	8003726 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e016      	b.n	8003726 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	68b9      	ldr	r1, [r7, #8]
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 fa22 	bl	8003b58 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800372e:	b480      	push	{r7}
 8003730:	b085      	sub	sp, #20
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0307 	bic.w	r3, r3, #7
 8003746:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f023 0318 	bic.w	r3, r3, #24
 8003758:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4313      	orrs	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	6852      	ldr	r2, [r2, #4]
 800377e:	619a      	str	r2, [r3, #24]
}
 8003780:	bf00      	nop
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	3301      	adds	r3, #1
 80037a0:	01db      	lsls	r3, r3, #7
 80037a2:	4413      	add	r3, r2
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f023 0307 	bic.w	r3, r3, #7
 80037ae:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f023 0318 	bic.w	r3, r3, #24
 80037c0:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	3301      	adds	r3, #1
 80037d4:	01db      	lsls	r3, r3, #7
 80037d6:	4413      	add	r3, r2
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6819      	ldr	r1, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	01db      	lsls	r3, r3, #7
 80037e8:	440b      	add	r3, r1
 80037ea:	3394      	adds	r3, #148	@ 0x94
 80037ec:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6819      	ldr	r1, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	01db      	lsls	r3, r3, #7
 80037fa:	440b      	add	r3, r1
 80037fc:	3398      	adds	r3, #152	@ 0x98
 80037fe:	601a      	str	r2, [r3, #0]
}
 8003800:	bf00      	nop
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8003826:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f023 0320 	bic.w	r3, r3, #32
 800382e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	4313      	orrs	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003840:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4313      	orrs	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003852:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	4313      	orrs	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003864:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8003876:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003888:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800389c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038ae:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 80038cc:	bf00      	nop
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80038d8:	b480      	push	{r7}
 80038da:	b08b      	sub	sp, #44	@ 0x2c
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	3301      	adds	r3, #1
 80038ec:	01db      	lsls	r3, r3, #7
 80038ee:	4413      	add	r3, r2
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	6811      	ldr	r1, [r2, #0]
 80038f6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	3301      	adds	r3, #1
 80038fe:	01db      	lsls	r3, r3, #7
 8003900:	440b      	add	r3, r1
 8003902:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	3301      	adds	r3, #1
 800390c:	01db      	lsls	r3, r3, #7
 800390e:	4413      	add	r3, r2
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	01db      	lsls	r3, r3, #7
 800391c:	4413      	add	r3, r2
 800391e:	33e8      	adds	r3, #232	@ 0xe8
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	01db      	lsls	r3, r3, #7
 800392c:	4413      	add	r3, r2
 800392e:	33e4      	adds	r3, #228	@ 0xe4
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 800393c:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	f023 0320 	bic.w	r3, r3, #32
 8003944:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800394c:	4313      	orrs	r3, r2
 800394e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8003950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003952:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800395e:	4313      	orrs	r3, r2
 8003960:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8003962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003964:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003968:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003970:	4313      	orrs	r3, r2
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800397a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003982:	4313      	orrs	r3, r2
 8003984:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8003986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003988:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800398c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003994:	4313      	orrs	r3, r2
 8003996:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8003998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800399e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a6:	4313      	orrs	r3, r2
 80039a8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 80039aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80039b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039ba:	d103      	bne.n	80039c4 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039c2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80039c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039ca:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d2:	4313      	orrs	r3, r2
 80039d4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80039d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039dc:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039e4:	4313      	orrs	r3, r2
 80039e6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80039e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ea:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 80039ee:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f6:	4313      	orrs	r3, r2
 80039f8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	f023 031f 	bic.w	r3, r3, #31
 8003a00:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a16:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d108      	bne.n	8003a3c <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a30:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a36:	6a3a      	ldr	r2, [r7, #32]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a40:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8003a44:	d004      	beq.n	8003a50 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4a:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8003a4e:	d103      	bne.n	8003a58 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a54:	2b40      	cmp	r3, #64	@ 0x40
 8003a56:	d108      	bne.n	8003a6a <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8003a5e:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a64:	6a3a      	ldr	r2, [r7, #32]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a6e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d843      	bhi.n	8003afe <HRTIM_TimingUnitWaveform_Config+0x226>
 8003a76:	a201      	add	r2, pc, #4	@ (adr r2, 8003a7c <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8003a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7c:	08003a91 	.word	0x08003a91
 8003a80:	08003aa7 	.word	0x08003aa7
 8003a84:	08003abd 	.word	0x08003abd
 8003a88:	08003ad3 	.word	0x08003ad3
 8003a8c:	08003ae9 	.word	0x08003ae9
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003a96:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	69fa      	ldr	r2, [r7, #28]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61fb      	str	r3, [r7, #28]
      break;
 8003aa4:	e02c      	b.n	8003b00 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aac:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	69fa      	ldr	r2, [r7, #28]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61fb      	str	r3, [r7, #28]
      break;
 8003aba:	e021      	b.n	8003b00 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003ac2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	69fa      	ldr	r2, [r7, #28]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	61fb      	str	r3, [r7, #28]
      break;
 8003ad0:	e016      	b.n	8003b00 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003ad8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	61fb      	str	r3, [r7, #28]
      break;
 8003ae6:	e00b      	b.n	8003b00 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003aee:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af4:	015b      	lsls	r3, r3, #5
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	61fb      	str	r3, [r7, #28]
      break;
 8003afc:	e000      	b.n	8003b00 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8003afe:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	3301      	adds	r3, #1
 8003b08:	01db      	lsls	r3, r3, #7
 8003b0a:	4413      	add	r3, r2
 8003b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b0e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	01db      	lsls	r3, r3, #7
 8003b18:	4413      	add	r3, r2
 8003b1a:	33e8      	adds	r3, #232	@ 0xe8
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	01db      	lsls	r3, r3, #7
 8003b28:	4413      	add	r3, r2
 8003b2a:	33e4      	adds	r3, #228	@ 0xe4
 8003b2c:	6a3a      	ldr	r2, [r7, #32]
 8003b2e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	01db      	lsls	r3, r3, #7
 8003b38:	4413      	add	r3, r2
 8003b3a:	33d4      	adds	r3, #212	@ 0xd4
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	69fa      	ldr	r2, [r7, #28]
 8003b46:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8003b4a:	bf00      	nop
 8003b4c:	372c      	adds	r7, #44	@ 0x2c
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop

08003b58 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b089      	sub	sp, #36	@ 0x24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	01db      	lsls	r3, r3, #7
 8003b72:	4413      	add	r3, r2
 8003b74:	33e4      	adds	r3, #228	@ 0xe4
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	01db      	lsls	r3, r3, #7
 8003b82:	4413      	add	r3, r2
 8003b84:	33b8      	adds	r3, #184	@ 0xb8
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	617b      	str	r3, [r7, #20]

  switch (Output)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b90:	d04d      	beq.n	8003c2e <HRTIM_OutputConfig+0xd6>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b98:	d85e      	bhi.n	8003c58 <HRTIM_OutputConfig+0x100>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ba0:	d032      	beq.n	8003c08 <HRTIM_OutputConfig+0xb0>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ba8:	d856      	bhi.n	8003c58 <HRTIM_OutputConfig+0x100>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b80      	cmp	r3, #128	@ 0x80
 8003bae:	d03e      	beq.n	8003c2e <HRTIM_OutputConfig+0xd6>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b80      	cmp	r3, #128	@ 0x80
 8003bb4:	d850      	bhi.n	8003c58 <HRTIM_OutputConfig+0x100>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b40      	cmp	r3, #64	@ 0x40
 8003bba:	d025      	beq.n	8003c08 <HRTIM_OutputConfig+0xb0>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b40      	cmp	r3, #64	@ 0x40
 8003bc0:	d84a      	bhi.n	8003c58 <HRTIM_OutputConfig+0x100>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d01f      	beq.n	8003c08 <HRTIM_OutputConfig+0xb0>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d044      	beq.n	8003c58 <HRTIM_OutputConfig+0x100>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b20      	cmp	r3, #32
 8003bd2:	d841      	bhi.n	8003c58 <HRTIM_OutputConfig+0x100>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d33e      	bcc.n	8003c58 <HRTIM_OutputConfig+0x100>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3b02      	subs	r3, #2
 8003bde:	2201      	movs	r2, #1
 8003be0:	409a      	lsls	r2, r3
 8003be2:	4b48      	ldr	r3, [pc, #288]	@ (8003d04 <HRTIM_OutputConfig+0x1ac>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	bf14      	ite	ne
 8003bea:	2301      	movne	r3, #1
 8003bec:	2300      	moveq	r3, #0
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d11c      	bne.n	8003c2e <HRTIM_OutputConfig+0xd6>
 8003bf4:	f244 0304 	movw	r3, #16388	@ 0x4004
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	bf14      	ite	ne
 8003bfe:	2301      	movne	r3, #1
 8003c00:	2300      	moveq	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d027      	beq.n	8003c58 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6819      	ldr	r1, [r3, #0]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	01db      	lsls	r3, r3, #7
 8003c14:	440b      	add	r3, r1
 8003c16:	33bc      	adds	r3, #188	@ 0xbc
 8003c18:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6819      	ldr	r1, [r3, #0]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	01db      	lsls	r3, r3, #7
 8003c26:	440b      	add	r3, r1
 8003c28:	33c0      	adds	r3, #192	@ 0xc0
 8003c2a:	601a      	str	r2, [r3, #0]
      break;
 8003c2c:	e015      	b.n	8003c5a <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6819      	ldr	r1, [r3, #0]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	01db      	lsls	r3, r3, #7
 8003c3a:	440b      	add	r3, r1
 8003c3c:	33c4      	adds	r3, #196	@ 0xc4
 8003c3e:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6819      	ldr	r1, [r3, #0]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	01db      	lsls	r3, r3, #7
 8003c4c:	440b      	add	r3, r1
 8003c4e:	33c8      	adds	r3, #200	@ 0xc8
 8003c50:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8003c52:	2310      	movs	r3, #16
 8003c54:	61bb      	str	r3, [r7, #24]
      break;
 8003c56:	e000      	b.n	8003c5a <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8003c58:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8003c5a:	22fe      	movs	r2, #254	@ 0xfe
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8003c62:	43db      	mvns	r3, r3
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	4013      	ands	r3, r2
 8003c68:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	69fa      	ldr	r2, [r7, #28]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	69fa      	ldr	r2, [r7, #28]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	69fa      	ldr	r2, [r7, #28]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	695a      	ldr	r2, [r3, #20]
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	69fa      	ldr	r2, [r7, #28]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d111      	bne.n	8003ce6 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10c      	bne.n	8003ce6 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d107      	bne.n	8003ce6 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	69da      	ldr	r2, [r3, #28]
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	01db      	lsls	r3, r3, #7
 8003cee:	4413      	add	r3, r2
 8003cf0:	33e4      	adds	r3, #228	@ 0xe4
 8003cf2:	69fa      	ldr	r2, [r7, #28]
 8003cf4:	601a      	str	r2, [r3, #0]
}
 8003cf6:	bf00      	nop
 8003cf8:	3724      	adds	r7, #36	@ 0x24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40000041 	.word	0x40000041

08003d08 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b05      	cmp	r3, #5
 8003d16:	d851      	bhi.n	8003dbc <HRTIM_ForceRegistersUpdate+0xb4>
 8003d18:	a201      	add	r2, pc, #4	@ (adr r2, 8003d20 <HRTIM_ForceRegistersUpdate+0x18>)
 8003d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1e:	bf00      	nop
 8003d20:	08003d4f 	.word	0x08003d4f
 8003d24:	08003d65 	.word	0x08003d65
 8003d28:	08003d7b 	.word	0x08003d7b
 8003d2c:	08003d91 	.word	0x08003d91
 8003d30:	08003da7 	.word	0x08003da7
 8003d34:	08003d39 	.word	0x08003d39
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0201 	orr.w	r2, r2, #1
 8003d48:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003d4c:	e037      	b.n	8003dbe <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0202 	orr.w	r2, r2, #2
 8003d5e:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003d62:	e02c      	b.n	8003dbe <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0204 	orr.w	r2, r2, #4
 8003d74:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003d78:	e021      	b.n	8003dbe <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0208 	orr.w	r2, r2, #8
 8003d8a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003d8e:	e016      	b.n	8003dbe <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0210 	orr.w	r2, r2, #16
 8003da0:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003da4:	e00b      	b.n	8003dbe <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0220 	orr.w	r2, r2, #32
 8003db6:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003dba:	e000      	b.n	8003dbe <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8003dbc:	bf00      	nop
  }
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop

08003dcc <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e097      	b.n	8003f0e <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d106      	bne.n	8003dfe <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7fe f83b 	bl	8001e74 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2202      	movs	r2, #2
 8003e02:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d004      	beq.n	8003e20 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e1e:	d103      	bne.n	8003e28 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 031e 	bic.w	r3, r3, #30
 8003e26:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d003      	beq.n	8003e3c <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4b38      	ldr	r3, [pc, #224]	@ (8003f18 <HAL_LPTIM_Init+0x14c>)
 8003e38:	4013      	ands	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4b37      	ldr	r3, [pc, #220]	@ (8003f1c <HAL_LPTIM_Init+0x150>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003e4c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003e52:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8003e58:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8003e5e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d107      	bne.n	8003e7e <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003e76:	4313      	orrs	r3, r2
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d004      	beq.n	8003e90 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e8e:	d107      	bne.n	8003ea0 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00a      	beq.n	8003ec2 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003eb4:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8003eba:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a14      	ldr	r2, [pc, #80]	@ (8003f20 <HAL_LPTIM_Init+0x154>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d004      	beq.n	8003ede <HAL_LPTIM_Init+0x112>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a12      	ldr	r2, [pc, #72]	@ (8003f24 <HAL_LPTIM_Init+0x158>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d108      	bne.n	8003ef0 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	625a      	str	r2, [r3, #36]	@ 0x24
 8003eee:	e009      	b.n	8003f04 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a0c      	ldr	r2, [pc, #48]	@ (8003f28 <HAL_LPTIM_Init+0x15c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d104      	bne.n	8003f04 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f02:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	ffff1f3f 	.word	0xffff1f3f
 8003f1c:	ff19f1fe 	.word	0xff19f1fe
 8003f20:	40002400 	.word	0x40002400
 8003f24:	58002400 	.word	0x58002400
 8003f28:	58002800 	.word	0x58002800

08003f2c <HAL_LPTIM_PWM_Start>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Reset WAVE bit to set PWM mode */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8003f4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691a      	ldr	r2, [r3, #16]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2210      	movs	r2, #16
 8003f66:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8003f70:	2110      	movs	r1, #16
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f97e 	bl	8004274 <LPTIM_WaitForFlag>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	d101      	bne.n	8003f82 <HAL_LPTIM_PWM_Start+0x56>
  {
    return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e01d      	b.n	8003fbe <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2208      	movs	r2, #8
 8003f88:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8003f92:	2108      	movs	r1, #8
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f96d 	bl	8004274 <LPTIM_WaitForFlag>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b03      	cmp	r3, #3
 8003f9e:	d101      	bne.n	8003fa4 <HAL_LPTIM_PWM_Start+0x78>
  {
    return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e00c      	b.n	8003fbe <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691a      	ldr	r2, [r3, #16]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0204 	orr.w	r2, r2, #4
 8003fb2:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d00c      	beq.n	8003ffa <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fe8:	d107      	bne.n	8003ffa <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 8003ff8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 0201 	orr.w	r2, r2, #1
 8004008:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2210      	movs	r2, #16
 8004010:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800401a:	2110      	movs	r1, #16
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f929 	bl	8004274 <LPTIM_WaitForFlag>
 8004022:	4603      	mov	r3, r0
 8004024:	2b03      	cmp	r3, #3
 8004026:	d101      	bne.n	800402c <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e02f      	b.n	800408c <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f951 	bl	80042d4 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f90f 	bl	8004256 <HAL_LPTIM_GetState>
 8004038:	4603      	mov	r3, r0
 800403a:	2b03      	cmp	r3, #3
 800403c:	d101      	bne.n	8004042 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e024      	b.n	800408c <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0210 	orr.w	r2, r2, #16
 8004050:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0202 	orr.w	r2, r2, #2
 8004060:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0201 	orr.w	r2, r2, #1
 8004070:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0204 	orr.w	r2, r2, #4
 8004080:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d10d      	bne.n	80040c6 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d106      	bne.n	80040c6 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2201      	movs	r2, #1
 80040be:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f882 	bl	80041ca <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d10d      	bne.n	80040f0 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d106      	bne.n	80040f0 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2202      	movs	r2, #2
 80040e8:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f877 	bl	80041de <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d10d      	bne.n	800411a <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b04      	cmp	r3, #4
 800410a:	d106      	bne.n	800411a <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2204      	movs	r2, #4
 8004112:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f86c 	bl	80041f2 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b08      	cmp	r3, #8
 8004126:	d10d      	bne.n	8004144 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b08      	cmp	r3, #8
 8004134:	d106      	bne.n	8004144 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2208      	movs	r2, #8
 800413c:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f861 	bl	8004206 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0310 	and.w	r3, r3, #16
 800414e:	2b10      	cmp	r3, #16
 8004150:	d10d      	bne.n	800416e <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b10      	cmp	r3, #16
 800415e:	d106      	bne.n	800416e <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2210      	movs	r2, #16
 8004166:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f856 	bl	800421a <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b20      	cmp	r3, #32
 800417a:	d10d      	bne.n	8004198 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 0320 	and.w	r3, r3, #32
 8004186:	2b20      	cmp	r3, #32
 8004188:	d106      	bne.n	8004198 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2220      	movs	r2, #32
 8004190:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f84b 	bl	800422e <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a2:	2b40      	cmp	r3, #64	@ 0x40
 80041a4:	d10d      	bne.n	80041c2 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b0:	2b40      	cmp	r3, #64	@ 0x40
 80041b2:	d106      	bne.n	80041c2 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2240      	movs	r2, #64	@ 0x40
 80041ba:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f840 	bl	8004242 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80041c2:	bf00      	nop
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004264:	b2db      	uxtb	r3, r3
}
 8004266:	4618      	mov	r0, r3
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
	...

08004274 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004282:	4b12      	ldr	r3, [pc, #72]	@ (80042cc <LPTIM_WaitForFlag+0x58>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a12      	ldr	r2, [pc, #72]	@ (80042d0 <LPTIM_WaitForFlag+0x5c>)
 8004288:	fba2 2303 	umull	r2, r3, r2, r3
 800428c:	0b9b      	lsrs	r3, r3, #14
 800428e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004292:	fb02 f303 	mul.w	r3, r2, r3
 8004296:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	3b01      	subs	r3, #1
 800429c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	4013      	ands	r3, r2
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d002      	beq.n	80042be <LPTIM_WaitForFlag+0x4a>
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1ec      	bne.n	8004298 <LPTIM_WaitForFlag+0x24>

  return result;
 80042be:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	24000004 	.word	0x24000004
 80042d0:	d1b71759 	.word	0xd1b71759

080042d4 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08c      	sub	sp, #48	@ 0x30
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042e0:	f3ef 8310 	mrs	r3, PRIMASK
 80042e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80042e6:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80042e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042ea:	2301      	movs	r3, #1
 80042ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f383 8810 	msr	PRIMASK, r3
}
 80042f4:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a81      	ldr	r2, [pc, #516]	@ (8004500 <LPTIM_Disable+0x22c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d02d      	beq.n	800435c <LPTIM_Disable+0x88>
 8004300:	4a7f      	ldr	r2, [pc, #508]	@ (8004500 <LPTIM_Disable+0x22c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d830      	bhi.n	8004368 <LPTIM_Disable+0x94>
 8004306:	4a7f      	ldr	r2, [pc, #508]	@ (8004504 <LPTIM_Disable+0x230>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d021      	beq.n	8004350 <LPTIM_Disable+0x7c>
 800430c:	4a7d      	ldr	r2, [pc, #500]	@ (8004504 <LPTIM_Disable+0x230>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d82a      	bhi.n	8004368 <LPTIM_Disable+0x94>
 8004312:	4a7d      	ldr	r2, [pc, #500]	@ (8004508 <LPTIM_Disable+0x234>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d015      	beq.n	8004344 <LPTIM_Disable+0x70>
 8004318:	4a7b      	ldr	r2, [pc, #492]	@ (8004508 <LPTIM_Disable+0x234>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d824      	bhi.n	8004368 <LPTIM_Disable+0x94>
 800431e:	4a7b      	ldr	r2, [pc, #492]	@ (800450c <LPTIM_Disable+0x238>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d003      	beq.n	800432c <LPTIM_Disable+0x58>
 8004324:	4a7a      	ldr	r2, [pc, #488]	@ (8004510 <LPTIM_Disable+0x23c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d006      	beq.n	8004338 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 800432a:	e01d      	b.n	8004368 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 800432c:	4b79      	ldr	r3, [pc, #484]	@ (8004514 <LPTIM_Disable+0x240>)
 800432e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004330:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8004334:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8004336:	e018      	b.n	800436a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004338:	4b76      	ldr	r3, [pc, #472]	@ (8004514 <LPTIM_Disable+0x240>)
 800433a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800433c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8004340:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8004342:	e012      	b.n	800436a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8004344:	4b73      	ldr	r3, [pc, #460]	@ (8004514 <LPTIM_Disable+0x240>)
 8004346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004348:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800434c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800434e:	e00c      	b.n	800436a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8004350:	4b70      	ldr	r3, [pc, #448]	@ (8004514 <LPTIM_Disable+0x240>)
 8004352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004354:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004358:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800435a:	e006      	b.n	800436a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 800435c:	4b6d      	ldr	r3, [pc, #436]	@ (8004514 <LPTIM_Disable+0x240>)
 800435e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004360:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004364:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8004366:	e000      	b.n	800436a <LPTIM_Disable+0x96>
      break;
 8004368:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004390:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a5a      	ldr	r2, [pc, #360]	@ (8004500 <LPTIM_Disable+0x22c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d059      	beq.n	8004450 <LPTIM_Disable+0x17c>
 800439c:	4a58      	ldr	r2, [pc, #352]	@ (8004500 <LPTIM_Disable+0x22c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d867      	bhi.n	8004472 <LPTIM_Disable+0x19e>
 80043a2:	4a58      	ldr	r2, [pc, #352]	@ (8004504 <LPTIM_Disable+0x230>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d042      	beq.n	800442e <LPTIM_Disable+0x15a>
 80043a8:	4a56      	ldr	r2, [pc, #344]	@ (8004504 <LPTIM_Disable+0x230>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d861      	bhi.n	8004472 <LPTIM_Disable+0x19e>
 80043ae:	4a56      	ldr	r2, [pc, #344]	@ (8004508 <LPTIM_Disable+0x234>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d02b      	beq.n	800440c <LPTIM_Disable+0x138>
 80043b4:	4a54      	ldr	r2, [pc, #336]	@ (8004508 <LPTIM_Disable+0x234>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d85b      	bhi.n	8004472 <LPTIM_Disable+0x19e>
 80043ba:	4a54      	ldr	r2, [pc, #336]	@ (800450c <LPTIM_Disable+0x238>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d003      	beq.n	80043c8 <LPTIM_Disable+0xf4>
 80043c0:	4a53      	ldr	r2, [pc, #332]	@ (8004510 <LPTIM_Disable+0x23c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d011      	beq.n	80043ea <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 80043c6:	e054      	b.n	8004472 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80043c8:	4b52      	ldr	r3, [pc, #328]	@ (8004514 <LPTIM_Disable+0x240>)
 80043ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ce:	4a51      	ldr	r2, [pc, #324]	@ (8004514 <LPTIM_Disable+0x240>)
 80043d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80043d8:	4b4e      	ldr	r3, [pc, #312]	@ (8004514 <LPTIM_Disable+0x240>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043de:	4a4d      	ldr	r2, [pc, #308]	@ (8004514 <LPTIM_Disable+0x240>)
 80043e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      break;
 80043e8:	e044      	b.n	8004474 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80043ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004514 <LPTIM_Disable+0x240>)
 80043ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043f0:	4a48      	ldr	r2, [pc, #288]	@ (8004514 <LPTIM_Disable+0x240>)
 80043f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043f6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80043fa:	4b46      	ldr	r3, [pc, #280]	@ (8004514 <LPTIM_Disable+0x240>)
 80043fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004400:	4a44      	ldr	r2, [pc, #272]	@ (8004514 <LPTIM_Disable+0x240>)
 8004402:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004406:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 800440a:	e033      	b.n	8004474 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 800440c:	4b41      	ldr	r3, [pc, #260]	@ (8004514 <LPTIM_Disable+0x240>)
 800440e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004412:	4a40      	ldr	r2, [pc, #256]	@ (8004514 <LPTIM_Disable+0x240>)
 8004414:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004418:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 800441c:	4b3d      	ldr	r3, [pc, #244]	@ (8004514 <LPTIM_Disable+0x240>)
 800441e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004422:	4a3c      	ldr	r2, [pc, #240]	@ (8004514 <LPTIM_Disable+0x240>)
 8004424:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004428:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 800442c:	e022      	b.n	8004474 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 800442e:	4b39      	ldr	r3, [pc, #228]	@ (8004514 <LPTIM_Disable+0x240>)
 8004430:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004434:	4a37      	ldr	r2, [pc, #220]	@ (8004514 <LPTIM_Disable+0x240>)
 8004436:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800443a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 800443e:	4b35      	ldr	r3, [pc, #212]	@ (8004514 <LPTIM_Disable+0x240>)
 8004440:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004444:	4a33      	ldr	r2, [pc, #204]	@ (8004514 <LPTIM_Disable+0x240>)
 8004446:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800444a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 800444e:	e011      	b.n	8004474 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8004450:	4b30      	ldr	r3, [pc, #192]	@ (8004514 <LPTIM_Disable+0x240>)
 8004452:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004456:	4a2f      	ldr	r2, [pc, #188]	@ (8004514 <LPTIM_Disable+0x240>)
 8004458:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800445c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8004460:	4b2c      	ldr	r3, [pc, #176]	@ (8004514 <LPTIM_Disable+0x240>)
 8004462:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004466:	4a2b      	ldr	r2, [pc, #172]	@ (8004514 <LPTIM_Disable+0x240>)
 8004468:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800446c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8004470:	e000      	b.n	8004474 <LPTIM_Disable+0x1a0>
      break;
 8004472:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d103      	bne.n	8004482 <LPTIM_Disable+0x1ae>
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 80d1 	beq.w	8004624 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a1e      	ldr	r2, [pc, #120]	@ (8004500 <LPTIM_Disable+0x22c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d031      	beq.n	80044f0 <LPTIM_Disable+0x21c>
 800448c:	4a1c      	ldr	r2, [pc, #112]	@ (8004500 <LPTIM_Disable+0x22c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d842      	bhi.n	8004518 <LPTIM_Disable+0x244>
 8004492:	4a1c      	ldr	r2, [pc, #112]	@ (8004504 <LPTIM_Disable+0x230>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d024      	beq.n	80044e2 <LPTIM_Disable+0x20e>
 8004498:	4a1a      	ldr	r2, [pc, #104]	@ (8004504 <LPTIM_Disable+0x230>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d83c      	bhi.n	8004518 <LPTIM_Disable+0x244>
 800449e:	4a1a      	ldr	r2, [pc, #104]	@ (8004508 <LPTIM_Disable+0x234>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d017      	beq.n	80044d4 <LPTIM_Disable+0x200>
 80044a4:	4a18      	ldr	r2, [pc, #96]	@ (8004508 <LPTIM_Disable+0x234>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d836      	bhi.n	8004518 <LPTIM_Disable+0x244>
 80044aa:	4a18      	ldr	r2, [pc, #96]	@ (800450c <LPTIM_Disable+0x238>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d003      	beq.n	80044b8 <LPTIM_Disable+0x1e4>
 80044b0:	4a17      	ldr	r2, [pc, #92]	@ (8004510 <LPTIM_Disable+0x23c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d007      	beq.n	80044c6 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 80044b6:	e02f      	b.n	8004518 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 80044b8:	4b16      	ldr	r3, [pc, #88]	@ (8004514 <LPTIM_Disable+0x240>)
 80044ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044bc:	4a15      	ldr	r2, [pc, #84]	@ (8004514 <LPTIM_Disable+0x240>)
 80044be:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 80044c2:	6553      	str	r3, [r2, #84]	@ 0x54
        break;
 80044c4:	e029      	b.n	800451a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 80044c6:	4b13      	ldr	r3, [pc, #76]	@ (8004514 <LPTIM_Disable+0x240>)
 80044c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ca:	4a12      	ldr	r2, [pc, #72]	@ (8004514 <LPTIM_Disable+0x240>)
 80044cc:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80044d0:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 80044d2:	e022      	b.n	800451a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 80044d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004514 <LPTIM_Disable+0x240>)
 80044d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d8:	4a0e      	ldr	r2, [pc, #56]	@ (8004514 <LPTIM_Disable+0x240>)
 80044da:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80044de:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 80044e0:	e01b      	b.n	800451a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 80044e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004514 <LPTIM_Disable+0x240>)
 80044e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e6:	4a0b      	ldr	r2, [pc, #44]	@ (8004514 <LPTIM_Disable+0x240>)
 80044e8:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80044ec:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 80044ee:	e014      	b.n	800451a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 80044f0:	4b08      	ldr	r3, [pc, #32]	@ (8004514 <LPTIM_Disable+0x240>)
 80044f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f4:	4a07      	ldr	r2, [pc, #28]	@ (8004514 <LPTIM_Disable+0x240>)
 80044f6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80044fa:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 80044fc:	e00d      	b.n	800451a <LPTIM_Disable+0x246>
 80044fe:	bf00      	nop
 8004500:	58003000 	.word	0x58003000
 8004504:	58002c00 	.word	0x58002c00
 8004508:	58002800 	.word	0x58002800
 800450c:	40002400 	.word	0x40002400
 8004510:	58002400 	.word	0x58002400
 8004514:	58024400 	.word	0x58024400
        break;
 8004518:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d01a      	beq.n	8004556 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691a      	ldr	r2, [r3, #16]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69fa      	ldr	r2, [r7, #28]
 8004536:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8004538:	2108      	movs	r1, #8
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff fe9a 	bl	8004274 <LPTIM_WaitForFlag>
 8004540:	4603      	mov	r3, r0
 8004542:	2b03      	cmp	r3, #3
 8004544:	d103      	bne.n	800454e <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2203      	movs	r2, #3
 800454a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2208      	movs	r2, #8
 8004554:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01a      	beq.n	8004592 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004574:	2110      	movs	r1, #16
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff fe7c 	bl	8004274 <LPTIM_WaitForFlag>
 800457c:	4603      	mov	r3, r0
 800457e:	2b03      	cmp	r3, #3
 8004580:	d103      	bne.n	800458a <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2203      	movs	r2, #3
 8004586:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2210      	movs	r2, #16
 8004590:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a32      	ldr	r2, [pc, #200]	@ (8004660 <LPTIM_Disable+0x38c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d039      	beq.n	8004610 <LPTIM_Disable+0x33c>
 800459c:	4a30      	ldr	r2, [pc, #192]	@ (8004660 <LPTIM_Disable+0x38c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d83f      	bhi.n	8004622 <LPTIM_Disable+0x34e>
 80045a2:	4a30      	ldr	r2, [pc, #192]	@ (8004664 <LPTIM_Disable+0x390>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d02a      	beq.n	80045fe <LPTIM_Disable+0x32a>
 80045a8:	4a2e      	ldr	r2, [pc, #184]	@ (8004664 <LPTIM_Disable+0x390>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d839      	bhi.n	8004622 <LPTIM_Disable+0x34e>
 80045ae:	4a2e      	ldr	r2, [pc, #184]	@ (8004668 <LPTIM_Disable+0x394>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d01b      	beq.n	80045ec <LPTIM_Disable+0x318>
 80045b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004668 <LPTIM_Disable+0x394>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d833      	bhi.n	8004622 <LPTIM_Disable+0x34e>
 80045ba:	4a2c      	ldr	r2, [pc, #176]	@ (800466c <LPTIM_Disable+0x398>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d003      	beq.n	80045c8 <LPTIM_Disable+0x2f4>
 80045c0:	4a2b      	ldr	r2, [pc, #172]	@ (8004670 <LPTIM_Disable+0x39c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d009      	beq.n	80045da <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 80045c6:	e02c      	b.n	8004622 <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80045c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004674 <LPTIM_Disable+0x3a0>)
 80045ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045cc:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 80045d0:	4928      	ldr	r1, [pc, #160]	@ (8004674 <LPTIM_Disable+0x3a0>)
 80045d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045d4:	4313      	orrs	r3, r2
 80045d6:	654b      	str	r3, [r1, #84]	@ 0x54
        break;
 80045d8:	e024      	b.n	8004624 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80045da:	4b26      	ldr	r3, [pc, #152]	@ (8004674 <LPTIM_Disable+0x3a0>)
 80045dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045de:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80045e2:	4924      	ldr	r1, [pc, #144]	@ (8004674 <LPTIM_Disable+0x3a0>)
 80045e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e6:	4313      	orrs	r3, r2
 80045e8:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 80045ea:	e01b      	b.n	8004624 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 80045ec:	4b21      	ldr	r3, [pc, #132]	@ (8004674 <LPTIM_Disable+0x3a0>)
 80045ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80045f4:	491f      	ldr	r1, [pc, #124]	@ (8004674 <LPTIM_Disable+0x3a0>)
 80045f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f8:	4313      	orrs	r3, r2
 80045fa:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 80045fc:	e012      	b.n	8004624 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 80045fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004674 <LPTIM_Disable+0x3a0>)
 8004600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004602:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004606:	491b      	ldr	r1, [pc, #108]	@ (8004674 <LPTIM_Disable+0x3a0>)
 8004608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800460a:	4313      	orrs	r3, r2
 800460c:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 800460e:	e009      	b.n	8004624 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8004610:	4b18      	ldr	r3, [pc, #96]	@ (8004674 <LPTIM_Disable+0x3a0>)
 8004612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004614:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004618:	4916      	ldr	r1, [pc, #88]	@ (8004674 <LPTIM_Disable+0x3a0>)
 800461a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800461c:	4313      	orrs	r3, r2
 800461e:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8004620:	e000      	b.n	8004624 <LPTIM_Disable+0x350>
        break;
 8004622:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691a      	ldr	r2, [r3, #16]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0201 	bic.w	r2, r2, #1
 8004632:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800463a:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6a3a      	ldr	r2, [r7, #32]
 8004642:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	625a      	str	r2, [r3, #36]	@ 0x24
 800464c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f383 8810 	msr	PRIMASK, r3
}
 8004656:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004658:	bf00      	nop
 800465a:	3730      	adds	r7, #48	@ 0x30
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	58003000 	.word	0x58003000
 8004664:	58002c00 	.word	0x58002c00
 8004668:	58002800 	.word	0x58002800
 800466c:	40002400 	.word	0x40002400
 8004670:	58002400 	.word	0x58002400
 8004674:	58024400 	.word	0x58024400

08004678 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004680:	4b19      	ldr	r3, [pc, #100]	@ (80046e8 <HAL_PWREx_ConfigSupply+0x70>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b04      	cmp	r3, #4
 800468a:	d00a      	beq.n	80046a2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800468c:	4b16      	ldr	r3, [pc, #88]	@ (80046e8 <HAL_PWREx_ConfigSupply+0x70>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	429a      	cmp	r2, r3
 8004698:	d001      	beq.n	800469e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e01f      	b.n	80046de <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	e01d      	b.n	80046de <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80046a2:	4b11      	ldr	r3, [pc, #68]	@ (80046e8 <HAL_PWREx_ConfigSupply+0x70>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f023 0207 	bic.w	r2, r3, #7
 80046aa:	490f      	ldr	r1, [pc, #60]	@ (80046e8 <HAL_PWREx_ConfigSupply+0x70>)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80046b2:	f7fe f941 	bl	8002938 <HAL_GetTick>
 80046b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046b8:	e009      	b.n	80046ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80046ba:	f7fe f93d 	bl	8002938 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80046c8:	d901      	bls.n	80046ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e007      	b.n	80046de <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046ce:	4b06      	ldr	r3, [pc, #24]	@ (80046e8 <HAL_PWREx_ConfigSupply+0x70>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046da:	d1ee      	bne.n	80046ba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	58024800 	.word	0x58024800

080046ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08c      	sub	sp, #48	@ 0x30
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d102      	bne.n	8004700 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	f000 bc48 	b.w	8004f90 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 8088 	beq.w	800481e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800470e:	4b99      	ldr	r3, [pc, #612]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004716:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004718:	4b96      	ldr	r3, [pc, #600]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 800471a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800471e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004720:	2b10      	cmp	r3, #16
 8004722:	d007      	beq.n	8004734 <HAL_RCC_OscConfig+0x48>
 8004724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004726:	2b18      	cmp	r3, #24
 8004728:	d111      	bne.n	800474e <HAL_RCC_OscConfig+0x62>
 800472a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472c:	f003 0303 	and.w	r3, r3, #3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d10c      	bne.n	800474e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004734:	4b8f      	ldr	r3, [pc, #572]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d06d      	beq.n	800481c <HAL_RCC_OscConfig+0x130>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d169      	bne.n	800481c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	f000 bc21 	b.w	8004f90 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004756:	d106      	bne.n	8004766 <HAL_RCC_OscConfig+0x7a>
 8004758:	4b86      	ldr	r3, [pc, #536]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a85      	ldr	r2, [pc, #532]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 800475e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	e02e      	b.n	80047c4 <HAL_RCC_OscConfig+0xd8>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10c      	bne.n	8004788 <HAL_RCC_OscConfig+0x9c>
 800476e:	4b81      	ldr	r3, [pc, #516]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a80      	ldr	r2, [pc, #512]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004774:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	4b7e      	ldr	r3, [pc, #504]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a7d      	ldr	r2, [pc, #500]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004780:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	e01d      	b.n	80047c4 <HAL_RCC_OscConfig+0xd8>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004790:	d10c      	bne.n	80047ac <HAL_RCC_OscConfig+0xc0>
 8004792:	4b78      	ldr	r3, [pc, #480]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a77      	ldr	r2, [pc, #476]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004798:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	4b75      	ldr	r3, [pc, #468]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a74      	ldr	r2, [pc, #464]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80047a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	e00b      	b.n	80047c4 <HAL_RCC_OscConfig+0xd8>
 80047ac:	4b71      	ldr	r3, [pc, #452]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a70      	ldr	r2, [pc, #448]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80047b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	4b6e      	ldr	r3, [pc, #440]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a6d      	ldr	r2, [pc, #436]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80047be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d013      	beq.n	80047f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047cc:	f7fe f8b4 	bl	8002938 <HAL_GetTick>
 80047d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047d4:	f7fe f8b0 	bl	8002938 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b64      	cmp	r3, #100	@ 0x64
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e3d4      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047e6:	4b63      	ldr	r3, [pc, #396]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0f0      	beq.n	80047d4 <HAL_RCC_OscConfig+0xe8>
 80047f2:	e014      	b.n	800481e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f4:	f7fe f8a0 	bl	8002938 <HAL_GetTick>
 80047f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047fc:	f7fe f89c 	bl	8002938 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b64      	cmp	r3, #100	@ 0x64
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e3c0      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800480e:	4b59      	ldr	r3, [pc, #356]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f0      	bne.n	80047fc <HAL_RCC_OscConfig+0x110>
 800481a:	e000      	b.n	800481e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800481c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 80ca 	beq.w	80049c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800482c:	4b51      	ldr	r3, [pc, #324]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004834:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004836:	4b4f      	ldr	r3, [pc, #316]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <HAL_RCC_OscConfig+0x166>
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	2b18      	cmp	r3, #24
 8004846:	d156      	bne.n	80048f6 <HAL_RCC_OscConfig+0x20a>
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d151      	bne.n	80048f6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004852:	4b48      	ldr	r3, [pc, #288]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	2b00      	cmp	r3, #0
 800485c:	d005      	beq.n	800486a <HAL_RCC_OscConfig+0x17e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e392      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800486a:	4b42      	ldr	r3, [pc, #264]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f023 0219 	bic.w	r2, r3, #25
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	493f      	ldr	r1, [pc, #252]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004878:	4313      	orrs	r3, r2
 800487a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487c:	f7fe f85c 	bl	8002938 <HAL_GetTick>
 8004880:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004884:	f7fe f858 	bl	8002938 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e37c      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004896:	4b37      	ldr	r3, [pc, #220]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0f0      	beq.n	8004884 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a2:	f7fe f855 	bl	8002950 <HAL_GetREVID>
 80048a6:	4603      	mov	r3, r0
 80048a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d817      	bhi.n	80048e0 <HAL_RCC_OscConfig+0x1f4>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b40      	cmp	r3, #64	@ 0x40
 80048b6:	d108      	bne.n	80048ca <HAL_RCC_OscConfig+0x1de>
 80048b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80048c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80048c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048c6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048c8:	e07a      	b.n	80049c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	031b      	lsls	r3, r3, #12
 80048d8:	4926      	ldr	r1, [pc, #152]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048de:	e06f      	b.n	80049c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e0:	4b24      	ldr	r3, [pc, #144]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	061b      	lsls	r3, r3, #24
 80048ee:	4921      	ldr	r1, [pc, #132]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048f4:	e064      	b.n	80049c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d047      	beq.n	800498e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80048fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f023 0219 	bic.w	r2, r3, #25
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	491a      	ldr	r1, [pc, #104]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 800490c:	4313      	orrs	r3, r2
 800490e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004910:	f7fe f812 	bl	8002938 <HAL_GetTick>
 8004914:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004918:	f7fe f80e 	bl	8002938 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e332      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800492a:	4b12      	ldr	r3, [pc, #72]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0f0      	beq.n	8004918 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004936:	f7fe f80b 	bl	8002950 <HAL_GetREVID>
 800493a:	4603      	mov	r3, r0
 800493c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004940:	4293      	cmp	r3, r2
 8004942:	d819      	bhi.n	8004978 <HAL_RCC_OscConfig+0x28c>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	2b40      	cmp	r3, #64	@ 0x40
 800494a:	d108      	bne.n	800495e <HAL_RCC_OscConfig+0x272>
 800494c:	4b09      	ldr	r3, [pc, #36]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004954:	4a07      	ldr	r2, [pc, #28]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800495a:	6053      	str	r3, [r2, #4]
 800495c:	e030      	b.n	80049c0 <HAL_RCC_OscConfig+0x2d4>
 800495e:	4b05      	ldr	r3, [pc, #20]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	031b      	lsls	r3, r3, #12
 800496c:	4901      	ldr	r1, [pc, #4]	@ (8004974 <HAL_RCC_OscConfig+0x288>)
 800496e:	4313      	orrs	r3, r2
 8004970:	604b      	str	r3, [r1, #4]
 8004972:	e025      	b.n	80049c0 <HAL_RCC_OscConfig+0x2d4>
 8004974:	58024400 	.word	0x58024400
 8004978:	4b9a      	ldr	r3, [pc, #616]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	061b      	lsls	r3, r3, #24
 8004986:	4997      	ldr	r1, [pc, #604]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004988:	4313      	orrs	r3, r2
 800498a:	604b      	str	r3, [r1, #4]
 800498c:	e018      	b.n	80049c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800498e:	4b95      	ldr	r3, [pc, #596]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a94      	ldr	r2, [pc, #592]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004994:	f023 0301 	bic.w	r3, r3, #1
 8004998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499a:	f7fd ffcd 	bl	8002938 <HAL_GetTick>
 800499e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049a2:	f7fd ffc9 	bl	8002938 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e2ed      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049b4:	4b8b      	ldr	r3, [pc, #556]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1f0      	bne.n	80049a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0310 	and.w	r3, r3, #16
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 80a9 	beq.w	8004b20 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ce:	4b85      	ldr	r3, [pc, #532]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049d8:	4b82      	ldr	r3, [pc, #520]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 80049da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d007      	beq.n	80049f4 <HAL_RCC_OscConfig+0x308>
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	2b18      	cmp	r3, #24
 80049e8:	d13a      	bne.n	8004a60 <HAL_RCC_OscConfig+0x374>
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d135      	bne.n	8004a60 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049f4:	4b7b      	ldr	r3, [pc, #492]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <HAL_RCC_OscConfig+0x320>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	2b80      	cmp	r3, #128	@ 0x80
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e2c1      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a0c:	f7fd ffa0 	bl	8002950 <HAL_GetREVID>
 8004a10:	4603      	mov	r3, r0
 8004a12:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d817      	bhi.n	8004a4a <HAL_RCC_OscConfig+0x35e>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	d108      	bne.n	8004a34 <HAL_RCC_OscConfig+0x348>
 8004a22:	4b70      	ldr	r3, [pc, #448]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004a2a:	4a6e      	ldr	r2, [pc, #440]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004a2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a30:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a32:	e075      	b.n	8004b20 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a34:	4b6b      	ldr	r3, [pc, #428]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	069b      	lsls	r3, r3, #26
 8004a42:	4968      	ldr	r1, [pc, #416]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a48:	e06a      	b.n	8004b20 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a4a:	4b66      	ldr	r3, [pc, #408]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	061b      	lsls	r3, r3, #24
 8004a58:	4962      	ldr	r1, [pc, #392]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a5e:	e05f      	b.n	8004b20 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d042      	beq.n	8004aee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004a68:	4b5e      	ldr	r3, [pc, #376]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a5d      	ldr	r2, [pc, #372]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a74:	f7fd ff60 	bl	8002938 <HAL_GetTick>
 8004a78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a7c:	f7fd ff5c 	bl	8002938 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e280      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a8e:	4b55      	ldr	r3, [pc, #340]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0f0      	beq.n	8004a7c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a9a:	f7fd ff59 	bl	8002950 <HAL_GetREVID>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d817      	bhi.n	8004ad8 <HAL_RCC_OscConfig+0x3ec>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	2b20      	cmp	r3, #32
 8004aae:	d108      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x3d6>
 8004ab0:	4b4c      	ldr	r3, [pc, #304]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004ab8:	4a4a      	ldr	r2, [pc, #296]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004aba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004abe:	6053      	str	r3, [r2, #4]
 8004ac0:	e02e      	b.n	8004b20 <HAL_RCC_OscConfig+0x434>
 8004ac2:	4b48      	ldr	r3, [pc, #288]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	069b      	lsls	r3, r3, #26
 8004ad0:	4944      	ldr	r1, [pc, #272]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	604b      	str	r3, [r1, #4]
 8004ad6:	e023      	b.n	8004b20 <HAL_RCC_OscConfig+0x434>
 8004ad8:	4b42      	ldr	r3, [pc, #264]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	061b      	lsls	r3, r3, #24
 8004ae6:	493f      	ldr	r1, [pc, #252]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60cb      	str	r3, [r1, #12]
 8004aec:	e018      	b.n	8004b20 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004aee:	4b3d      	ldr	r3, [pc, #244]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a3c      	ldr	r2, [pc, #240]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004af4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afa:	f7fd ff1d 	bl	8002938 <HAL_GetTick>
 8004afe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b00:	e008      	b.n	8004b14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004b02:	f7fd ff19 	bl	8002938 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e23d      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b14:	4b33      	ldr	r3, [pc, #204]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1f0      	bne.n	8004b02 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d036      	beq.n	8004b9a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d019      	beq.n	8004b68 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b34:	4b2b      	ldr	r3, [pc, #172]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004b36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b38:	4a2a      	ldr	r2, [pc, #168]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004b3a:	f043 0301 	orr.w	r3, r3, #1
 8004b3e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b40:	f7fd fefa 	bl	8002938 <HAL_GetTick>
 8004b44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b48:	f7fd fef6 	bl	8002938 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e21a      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b5a:	4b22      	ldr	r3, [pc, #136]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0f0      	beq.n	8004b48 <HAL_RCC_OscConfig+0x45c>
 8004b66:	e018      	b.n	8004b9a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b68:	4b1e      	ldr	r3, [pc, #120]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004b6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004b6e:	f023 0301 	bic.w	r3, r3, #1
 8004b72:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b74:	f7fd fee0 	bl	8002938 <HAL_GetTick>
 8004b78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b7c:	f7fd fedc 	bl	8002938 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e200      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b8e:	4b15      	ldr	r3, [pc, #84]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1f0      	bne.n	8004b7c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d039      	beq.n	8004c1a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01c      	beq.n	8004be8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bae:	4b0d      	ldr	r3, [pc, #52]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a0c      	ldr	r2, [pc, #48]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004bb4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004bb8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004bba:	f7fd febd 	bl	8002938 <HAL_GetTick>
 8004bbe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bc2:	f7fd feb9 	bl	8002938 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e1dd      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004bd4:	4b03      	ldr	r3, [pc, #12]	@ (8004be4 <HAL_RCC_OscConfig+0x4f8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0f0      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x4d6>
 8004be0:	e01b      	b.n	8004c1a <HAL_RCC_OscConfig+0x52e>
 8004be2:	bf00      	nop
 8004be4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004be8:	4b9b      	ldr	r3, [pc, #620]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a9a      	ldr	r2, [pc, #616]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004bee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004bf2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004bf4:	f7fd fea0 	bl	8002938 <HAL_GetTick>
 8004bf8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bfc:	f7fd fe9c 	bl	8002938 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e1c0      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c0e:	4b92      	ldr	r3, [pc, #584]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f0      	bne.n	8004bfc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0304 	and.w	r3, r3, #4
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 8081 	beq.w	8004d2a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c28:	4b8c      	ldr	r3, [pc, #560]	@ (8004e5c <HAL_RCC_OscConfig+0x770>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a8b      	ldr	r2, [pc, #556]	@ (8004e5c <HAL_RCC_OscConfig+0x770>)
 8004c2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c34:	f7fd fe80 	bl	8002938 <HAL_GetTick>
 8004c38:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c3c:	f7fd fe7c 	bl	8002938 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b64      	cmp	r3, #100	@ 0x64
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e1a0      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c4e:	4b83      	ldr	r3, [pc, #524]	@ (8004e5c <HAL_RCC_OscConfig+0x770>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0f0      	beq.n	8004c3c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d106      	bne.n	8004c70 <HAL_RCC_OscConfig+0x584>
 8004c62:	4b7d      	ldr	r3, [pc, #500]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c66:	4a7c      	ldr	r2, [pc, #496]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004c68:	f043 0301 	orr.w	r3, r3, #1
 8004c6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c6e:	e02d      	b.n	8004ccc <HAL_RCC_OscConfig+0x5e0>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10c      	bne.n	8004c92 <HAL_RCC_OscConfig+0x5a6>
 8004c78:	4b77      	ldr	r3, [pc, #476]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c7c:	4a76      	ldr	r2, [pc, #472]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004c7e:	f023 0301 	bic.w	r3, r3, #1
 8004c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c84:	4b74      	ldr	r3, [pc, #464]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c88:	4a73      	ldr	r2, [pc, #460]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004c8a:	f023 0304 	bic.w	r3, r3, #4
 8004c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c90:	e01c      	b.n	8004ccc <HAL_RCC_OscConfig+0x5e0>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2b05      	cmp	r3, #5
 8004c98:	d10c      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x5c8>
 8004c9a:	4b6f      	ldr	r3, [pc, #444]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c9e:	4a6e      	ldr	r2, [pc, #440]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004ca0:	f043 0304 	orr.w	r3, r3, #4
 8004ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ca6:	4b6c      	ldr	r3, [pc, #432]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004caa:	4a6b      	ldr	r2, [pc, #428]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cb2:	e00b      	b.n	8004ccc <HAL_RCC_OscConfig+0x5e0>
 8004cb4:	4b68      	ldr	r3, [pc, #416]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb8:	4a67      	ldr	r2, [pc, #412]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004cba:	f023 0301 	bic.w	r3, r3, #1
 8004cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cc0:	4b65      	ldr	r3, [pc, #404]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc4:	4a64      	ldr	r2, [pc, #400]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004cc6:	f023 0304 	bic.w	r3, r3, #4
 8004cca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d015      	beq.n	8004d00 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd4:	f7fd fe30 	bl	8002938 <HAL_GetTick>
 8004cd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cda:	e00a      	b.n	8004cf2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cdc:	f7fd fe2c 	bl	8002938 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e14e      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cf2:	4b59      	ldr	r3, [pc, #356]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0ee      	beq.n	8004cdc <HAL_RCC_OscConfig+0x5f0>
 8004cfe:	e014      	b.n	8004d2a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d00:	f7fd fe1a 	bl	8002938 <HAL_GetTick>
 8004d04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d06:	e00a      	b.n	8004d1e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d08:	f7fd fe16 	bl	8002938 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e138      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d1e:	4b4e      	ldr	r3, [pc, #312]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1ee      	bne.n	8004d08 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 812d 	beq.w	8004f8e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004d34:	4b48      	ldr	r3, [pc, #288]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d3c:	2b18      	cmp	r3, #24
 8004d3e:	f000 80bd 	beq.w	8004ebc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	f040 809e 	bne.w	8004e88 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d4c:	4b42      	ldr	r3, [pc, #264]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a41      	ldr	r2, [pc, #260]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004d52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d58:	f7fd fdee 	bl	8002938 <HAL_GetTick>
 8004d5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d60:	f7fd fdea 	bl	8002938 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e10e      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d72:	4b39      	ldr	r3, [pc, #228]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f0      	bne.n	8004d60 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d7e:	4b36      	ldr	r3, [pc, #216]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004d80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d82:	4b37      	ldr	r3, [pc, #220]	@ (8004e60 <HAL_RCC_OscConfig+0x774>)
 8004d84:	4013      	ands	r3, r2
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d8e:	0112      	lsls	r2, r2, #4
 8004d90:	430a      	orrs	r2, r1
 8004d92:	4931      	ldr	r1, [pc, #196]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004da6:	3b01      	subs	r3, #1
 8004da8:	025b      	lsls	r3, r3, #9
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	431a      	orrs	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db2:	3b01      	subs	r3, #1
 8004db4:	041b      	lsls	r3, r3, #16
 8004db6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	061b      	lsls	r3, r3, #24
 8004dc4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004dc8:	4923      	ldr	r1, [pc, #140]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004dce:	4b22      	ldr	r3, [pc, #136]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd2:	4a21      	ldr	r2, [pc, #132]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004dd4:	f023 0301 	bic.w	r3, r3, #1
 8004dd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004dda:	4b1f      	ldr	r3, [pc, #124]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004ddc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dde:	4b21      	ldr	r3, [pc, #132]	@ (8004e64 <HAL_RCC_OscConfig+0x778>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004de6:	00d2      	lsls	r2, r2, #3
 8004de8:	491b      	ldr	r1, [pc, #108]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004dee:	4b1a      	ldr	r3, [pc, #104]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df2:	f023 020c 	bic.w	r2, r3, #12
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfa:	4917      	ldr	r1, [pc, #92]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004e00:	4b15      	ldr	r3, [pc, #84]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e04:	f023 0202 	bic.w	r2, r3, #2
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e0c:	4912      	ldr	r1, [pc, #72]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e12:	4b11      	ldr	r3, [pc, #68]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e16:	4a10      	ldr	r2, [pc, #64]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e22:	4a0d      	ldr	r2, [pc, #52]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004e30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004e36:	4b08      	ldr	r3, [pc, #32]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3a:	4a07      	ldr	r2, [pc, #28]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004e3c:	f043 0301 	orr.w	r3, r3, #1
 8004e40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e42:	4b05      	ldr	r3, [pc, #20]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a04      	ldr	r2, [pc, #16]	@ (8004e58 <HAL_RCC_OscConfig+0x76c>)
 8004e48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4e:	f7fd fd73 	bl	8002938 <HAL_GetTick>
 8004e52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e54:	e011      	b.n	8004e7a <HAL_RCC_OscConfig+0x78e>
 8004e56:	bf00      	nop
 8004e58:	58024400 	.word	0x58024400
 8004e5c:	58024800 	.word	0x58024800
 8004e60:	fffffc0c 	.word	0xfffffc0c
 8004e64:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e68:	f7fd fd66 	bl	8002938 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e08a      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e7a:	4b47      	ldr	r3, [pc, #284]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f0      	beq.n	8004e68 <HAL_RCC_OscConfig+0x77c>
 8004e86:	e082      	b.n	8004f8e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e88:	4b43      	ldr	r3, [pc, #268]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a42      	ldr	r2, [pc, #264]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004e8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e94:	f7fd fd50 	bl	8002938 <HAL_GetTick>
 8004e98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e9c:	f7fd fd4c 	bl	8002938 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e070      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eae:	4b3a      	ldr	r3, [pc, #232]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1f0      	bne.n	8004e9c <HAL_RCC_OscConfig+0x7b0>
 8004eba:	e068      	b.n	8004f8e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004ebc:	4b36      	ldr	r3, [pc, #216]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004ec2:	4b35      	ldr	r3, [pc, #212]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d031      	beq.n	8004f34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f003 0203 	and.w	r2, r3, #3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d12a      	bne.n	8004f34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	091b      	lsrs	r3, r3, #4
 8004ee2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d122      	bne.n	8004f34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d11a      	bne.n	8004f34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	0a5b      	lsrs	r3, r3, #9
 8004f02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f0a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d111      	bne.n	8004f34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	0c1b      	lsrs	r3, r3, #16
 8004f14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d108      	bne.n	8004f34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	0e1b      	lsrs	r3, r3, #24
 8004f26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d001      	beq.n	8004f38 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e02b      	b.n	8004f90 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004f38:	4b17      	ldr	r3, [pc, #92]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f3c:	08db      	lsrs	r3, r3, #3
 8004f3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f42:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d01f      	beq.n	8004f8e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004f4e:	4b12      	ldr	r3, [pc, #72]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f52:	4a11      	ldr	r2, [pc, #68]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004f54:	f023 0301 	bic.w	r3, r3, #1
 8004f58:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f5a:	f7fd fced 	bl	8002938 <HAL_GetTick>
 8004f5e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004f60:	bf00      	nop
 8004f62:	f7fd fce9 	bl	8002938 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d0f9      	beq.n	8004f62 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004f70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f72:	4b0a      	ldr	r3, [pc, #40]	@ (8004f9c <HAL_RCC_OscConfig+0x8b0>)
 8004f74:	4013      	ands	r3, r2
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f7a:	00d2      	lsls	r2, r2, #3
 8004f7c:	4906      	ldr	r1, [pc, #24]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004f82:	4b05      	ldr	r3, [pc, #20]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f86:	4a04      	ldr	r2, [pc, #16]	@ (8004f98 <HAL_RCC_OscConfig+0x8ac>)
 8004f88:	f043 0301 	orr.w	r3, r3, #1
 8004f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3730      	adds	r7, #48	@ 0x30
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	58024400 	.word	0x58024400
 8004f9c:	ffff0007 	.word	0xffff0007

08004fa0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e19c      	b.n	80052ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb4:	4b8a      	ldr	r3, [pc, #552]	@ (80051e0 <HAL_RCC_ClockConfig+0x240>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 030f 	and.w	r3, r3, #15
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d910      	bls.n	8004fe4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc2:	4b87      	ldr	r3, [pc, #540]	@ (80051e0 <HAL_RCC_ClockConfig+0x240>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f023 020f 	bic.w	r2, r3, #15
 8004fca:	4985      	ldr	r1, [pc, #532]	@ (80051e0 <HAL_RCC_ClockConfig+0x240>)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd2:	4b83      	ldr	r3, [pc, #524]	@ (80051e0 <HAL_RCC_ClockConfig+0x240>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d001      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e184      	b.n	80052ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d010      	beq.n	8005012 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	4b7b      	ldr	r3, [pc, #492]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d908      	bls.n	8005012 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005000:	4b78      	ldr	r3, [pc, #480]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	4975      	ldr	r1, [pc, #468]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 800500e:	4313      	orrs	r3, r2
 8005010:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0308 	and.w	r3, r3, #8
 800501a:	2b00      	cmp	r3, #0
 800501c:	d010      	beq.n	8005040 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	695a      	ldr	r2, [r3, #20]
 8005022:	4b70      	ldr	r3, [pc, #448]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800502a:	429a      	cmp	r2, r3
 800502c:	d908      	bls.n	8005040 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800502e:	4b6d      	ldr	r3, [pc, #436]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	496a      	ldr	r1, [pc, #424]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 800503c:	4313      	orrs	r3, r2
 800503e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	2b00      	cmp	r3, #0
 800504a:	d010      	beq.n	800506e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699a      	ldr	r2, [r3, #24]
 8005050:	4b64      	ldr	r3, [pc, #400]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005058:	429a      	cmp	r2, r3
 800505a:	d908      	bls.n	800506e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800505c:	4b61      	ldr	r3, [pc, #388]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	495e      	ldr	r1, [pc, #376]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 800506a:	4313      	orrs	r3, r2
 800506c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0320 	and.w	r3, r3, #32
 8005076:	2b00      	cmp	r3, #0
 8005078:	d010      	beq.n	800509c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69da      	ldr	r2, [r3, #28]
 800507e:	4b59      	ldr	r3, [pc, #356]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005086:	429a      	cmp	r2, r3
 8005088:	d908      	bls.n	800509c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800508a:	4b56      	ldr	r3, [pc, #344]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	4953      	ldr	r1, [pc, #332]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 8005098:	4313      	orrs	r3, r2
 800509a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d010      	beq.n	80050ca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	4b4d      	ldr	r3, [pc, #308]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	f003 030f 	and.w	r3, r3, #15
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d908      	bls.n	80050ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050b8:	4b4a      	ldr	r3, [pc, #296]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	f023 020f 	bic.w	r2, r3, #15
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	4947      	ldr	r1, [pc, #284]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d055      	beq.n	8005182 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80050d6:	4b43      	ldr	r3, [pc, #268]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	4940      	ldr	r1, [pc, #256]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d107      	bne.n	8005100 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050f0:	4b3c      	ldr	r3, [pc, #240]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d121      	bne.n	8005140 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e0f6      	b.n	80052ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2b03      	cmp	r3, #3
 8005106:	d107      	bne.n	8005118 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005108:	4b36      	ldr	r3, [pc, #216]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d115      	bne.n	8005140 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e0ea      	b.n	80052ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d107      	bne.n	8005130 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005120:	4b30      	ldr	r3, [pc, #192]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005128:	2b00      	cmp	r3, #0
 800512a:	d109      	bne.n	8005140 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e0de      	b.n	80052ee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005130:	4b2c      	ldr	r3, [pc, #176]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e0d6      	b.n	80052ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005140:	4b28      	ldr	r3, [pc, #160]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	f023 0207 	bic.w	r2, r3, #7
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	4925      	ldr	r1, [pc, #148]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 800514e:	4313      	orrs	r3, r2
 8005150:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005152:	f7fd fbf1 	bl	8002938 <HAL_GetTick>
 8005156:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005158:	e00a      	b.n	8005170 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800515a:	f7fd fbed 	bl	8002938 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005168:	4293      	cmp	r3, r2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e0be      	b.n	80052ee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005170:	4b1c      	ldr	r3, [pc, #112]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	429a      	cmp	r2, r3
 8005180:	d1eb      	bne.n	800515a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d010      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	4b14      	ldr	r3, [pc, #80]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	429a      	cmp	r2, r3
 800519c:	d208      	bcs.n	80051b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800519e:	4b11      	ldr	r3, [pc, #68]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	f023 020f 	bic.w	r2, r3, #15
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	490e      	ldr	r1, [pc, #56]	@ (80051e4 <HAL_RCC_ClockConfig+0x244>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051b0:	4b0b      	ldr	r3, [pc, #44]	@ (80051e0 <HAL_RCC_ClockConfig+0x240>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 030f 	and.w	r3, r3, #15
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d214      	bcs.n	80051e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051be:	4b08      	ldr	r3, [pc, #32]	@ (80051e0 <HAL_RCC_ClockConfig+0x240>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f023 020f 	bic.w	r2, r3, #15
 80051c6:	4906      	ldr	r1, [pc, #24]	@ (80051e0 <HAL_RCC_ClockConfig+0x240>)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ce:	4b04      	ldr	r3, [pc, #16]	@ (80051e0 <HAL_RCC_ClockConfig+0x240>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d005      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e086      	b.n	80052ee <HAL_RCC_ClockConfig+0x34e>
 80051e0:	52002000 	.word	0x52002000
 80051e4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d010      	beq.n	8005216 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691a      	ldr	r2, [r3, #16]
 80051f8:	4b3f      	ldr	r3, [pc, #252]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005200:	429a      	cmp	r2, r3
 8005202:	d208      	bcs.n	8005216 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005204:	4b3c      	ldr	r3, [pc, #240]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	4939      	ldr	r1, [pc, #228]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 8005212:	4313      	orrs	r3, r2
 8005214:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d010      	beq.n	8005244 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695a      	ldr	r2, [r3, #20]
 8005226:	4b34      	ldr	r3, [pc, #208]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800522e:	429a      	cmp	r2, r3
 8005230:	d208      	bcs.n	8005244 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005232:	4b31      	ldr	r3, [pc, #196]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	492e      	ldr	r1, [pc, #184]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 8005240:	4313      	orrs	r3, r2
 8005242:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0310 	and.w	r3, r3, #16
 800524c:	2b00      	cmp	r3, #0
 800524e:	d010      	beq.n	8005272 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	699a      	ldr	r2, [r3, #24]
 8005254:	4b28      	ldr	r3, [pc, #160]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800525c:	429a      	cmp	r2, r3
 800525e:	d208      	bcs.n	8005272 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005260:	4b25      	ldr	r3, [pc, #148]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	4922      	ldr	r1, [pc, #136]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 800526e:	4313      	orrs	r3, r2
 8005270:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d010      	beq.n	80052a0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	69da      	ldr	r2, [r3, #28]
 8005282:	4b1d      	ldr	r3, [pc, #116]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800528a:	429a      	cmp	r2, r3
 800528c:	d208      	bcs.n	80052a0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800528e:	4b1a      	ldr	r3, [pc, #104]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	4917      	ldr	r1, [pc, #92]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 800529c:	4313      	orrs	r3, r2
 800529e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80052a0:	f000 f834 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80052a4:	4602      	mov	r2, r0
 80052a6:	4b14      	ldr	r3, [pc, #80]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	0a1b      	lsrs	r3, r3, #8
 80052ac:	f003 030f 	and.w	r3, r3, #15
 80052b0:	4912      	ldr	r1, [pc, #72]	@ (80052fc <HAL_RCC_ClockConfig+0x35c>)
 80052b2:	5ccb      	ldrb	r3, [r1, r3]
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	fa22 f303 	lsr.w	r3, r2, r3
 80052bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80052be:	4b0e      	ldr	r3, [pc, #56]	@ (80052f8 <HAL_RCC_ClockConfig+0x358>)
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	f003 030f 	and.w	r3, r3, #15
 80052c6:	4a0d      	ldr	r2, [pc, #52]	@ (80052fc <HAL_RCC_ClockConfig+0x35c>)
 80052c8:	5cd3      	ldrb	r3, [r2, r3]
 80052ca:	f003 031f 	and.w	r3, r3, #31
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	fa22 f303 	lsr.w	r3, r2, r3
 80052d4:	4a0a      	ldr	r2, [pc, #40]	@ (8005300 <HAL_RCC_ClockConfig+0x360>)
 80052d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052d8:	4a0a      	ldr	r2, [pc, #40]	@ (8005304 <HAL_RCC_ClockConfig+0x364>)
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80052de:	4b0a      	ldr	r3, [pc, #40]	@ (8005308 <HAL_RCC_ClockConfig+0x368>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fd fade 	bl	80028a4 <HAL_InitTick>
 80052e8:	4603      	mov	r3, r0
 80052ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3718      	adds	r7, #24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	58024400 	.word	0x58024400
 80052fc:	08008eb0 	.word	0x08008eb0
 8005300:	24000008 	.word	0x24000008
 8005304:	24000004 	.word	0x24000004
 8005308:	2400000c 	.word	0x2400000c

0800530c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800530c:	b480      	push	{r7}
 800530e:	b089      	sub	sp, #36	@ 0x24
 8005310:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005312:	4bb3      	ldr	r3, [pc, #716]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800531a:	2b18      	cmp	r3, #24
 800531c:	f200 8155 	bhi.w	80055ca <HAL_RCC_GetSysClockFreq+0x2be>
 8005320:	a201      	add	r2, pc, #4	@ (adr r2, 8005328 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005326:	bf00      	nop
 8005328:	0800538d 	.word	0x0800538d
 800532c:	080055cb 	.word	0x080055cb
 8005330:	080055cb 	.word	0x080055cb
 8005334:	080055cb 	.word	0x080055cb
 8005338:	080055cb 	.word	0x080055cb
 800533c:	080055cb 	.word	0x080055cb
 8005340:	080055cb 	.word	0x080055cb
 8005344:	080055cb 	.word	0x080055cb
 8005348:	080053b3 	.word	0x080053b3
 800534c:	080055cb 	.word	0x080055cb
 8005350:	080055cb 	.word	0x080055cb
 8005354:	080055cb 	.word	0x080055cb
 8005358:	080055cb 	.word	0x080055cb
 800535c:	080055cb 	.word	0x080055cb
 8005360:	080055cb 	.word	0x080055cb
 8005364:	080055cb 	.word	0x080055cb
 8005368:	080053b9 	.word	0x080053b9
 800536c:	080055cb 	.word	0x080055cb
 8005370:	080055cb 	.word	0x080055cb
 8005374:	080055cb 	.word	0x080055cb
 8005378:	080055cb 	.word	0x080055cb
 800537c:	080055cb 	.word	0x080055cb
 8005380:	080055cb 	.word	0x080055cb
 8005384:	080055cb 	.word	0x080055cb
 8005388:	080053bf 	.word	0x080053bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800538c:	4b94      	ldr	r3, [pc, #592]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0320 	and.w	r3, r3, #32
 8005394:	2b00      	cmp	r3, #0
 8005396:	d009      	beq.n	80053ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005398:	4b91      	ldr	r3, [pc, #580]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	08db      	lsrs	r3, r3, #3
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	4a90      	ldr	r2, [pc, #576]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053a4:	fa22 f303 	lsr.w	r3, r2, r3
 80053a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80053aa:	e111      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80053ac:	4b8d      	ldr	r3, [pc, #564]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053ae:	61bb      	str	r3, [r7, #24]
      break;
 80053b0:	e10e      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80053b2:	4b8d      	ldr	r3, [pc, #564]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80053b4:	61bb      	str	r3, [r7, #24]
      break;
 80053b6:	e10b      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80053b8:	4b8c      	ldr	r3, [pc, #560]	@ (80055ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80053ba:	61bb      	str	r3, [r7, #24]
      break;
 80053bc:	e108      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053be:	4b88      	ldr	r3, [pc, #544]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80053c8:	4b85      	ldr	r3, [pc, #532]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053cc:	091b      	lsrs	r3, r3, #4
 80053ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053d2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80053d4:	4b82      	ldr	r3, [pc, #520]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80053de:	4b80      	ldr	r3, [pc, #512]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e2:	08db      	lsrs	r3, r3, #3
 80053e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	fb02 f303 	mul.w	r3, r2, r3
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 80e1 	beq.w	80055c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b02      	cmp	r3, #2
 8005406:	f000 8083 	beq.w	8005510 <HAL_RCC_GetSysClockFreq+0x204>
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	2b02      	cmp	r3, #2
 800540e:	f200 80a1 	bhi.w	8005554 <HAL_RCC_GetSysClockFreq+0x248>
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <HAL_RCC_GetSysClockFreq+0x114>
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d056      	beq.n	80054cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800541e:	e099      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005420:	4b6f      	ldr	r3, [pc, #444]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0320 	and.w	r3, r3, #32
 8005428:	2b00      	cmp	r3, #0
 800542a:	d02d      	beq.n	8005488 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800542c:	4b6c      	ldr	r3, [pc, #432]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	08db      	lsrs	r3, r3, #3
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	4a6b      	ldr	r2, [pc, #428]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005438:	fa22 f303 	lsr.w	r3, r2, r3
 800543c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	ee07 3a90 	vmov	s15, r3
 8005444:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005456:	4b62      	ldr	r3, [pc, #392]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800545a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800545e:	ee07 3a90 	vmov	s15, r3
 8005462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005466:	ed97 6a02 	vldr	s12, [r7, #8]
 800546a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80055f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800546e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005476:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800547a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800547e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005482:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005486:	e087      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	ee07 3a90 	vmov	s15, r3
 800548e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005492:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80055f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800549a:	4b51      	ldr	r3, [pc, #324]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800549c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800549e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a2:	ee07 3a90 	vmov	s15, r3
 80054a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80054ae:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80055f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054ca:	e065      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80055f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80054da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054de:	4b40      	ldr	r3, [pc, #256]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80054f2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80055f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800550a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800550e:	e043      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80055fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800551e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005522:	4b2f      	ldr	r3, [pc, #188]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005532:	ed97 6a02 	vldr	s12, [r7, #8]
 8005536:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80055f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800553a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800553e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800554a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800554e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005552:	e021      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80055f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005566:	4b1e      	ldr	r3, [pc, #120]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800556a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556e:	ee07 3a90 	vmov	s15, r3
 8005572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005576:	ed97 6a02 	vldr	s12, [r7, #8]
 800557a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80055f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800557e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005586:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800558a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800558e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005592:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005596:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005598:	4b11      	ldr	r3, [pc, #68]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800559a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800559c:	0a5b      	lsrs	r3, r3, #9
 800559e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055a2:	3301      	adds	r3, #1
 80055a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	ee07 3a90 	vmov	s15, r3
 80055ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80055b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055bc:	ee17 3a90 	vmov	r3, s15
 80055c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80055c2:	e005      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	61bb      	str	r3, [r7, #24]
      break;
 80055c8:	e002      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80055ca:	4b07      	ldr	r3, [pc, #28]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80055cc:	61bb      	str	r3, [r7, #24]
      break;
 80055ce:	bf00      	nop
  }

  return sysclockfreq;
 80055d0:	69bb      	ldr	r3, [r7, #24]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3724      	adds	r7, #36	@ 0x24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	58024400 	.word	0x58024400
 80055e4:	03d09000 	.word	0x03d09000
 80055e8:	003d0900 	.word	0x003d0900
 80055ec:	016e3600 	.word	0x016e3600
 80055f0:	46000000 	.word	0x46000000
 80055f4:	4c742400 	.word	0x4c742400
 80055f8:	4a742400 	.word	0x4a742400
 80055fc:	4bb71b00 	.word	0x4bb71b00

08005600 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005604:	b0ca      	sub	sp, #296	@ 0x128
 8005606:	af00      	add	r7, sp, #0
 8005608:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800560c:	2300      	movs	r3, #0
 800560e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005612:	2300      	movs	r3, #0
 8005614:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800561c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005620:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005624:	2500      	movs	r5, #0
 8005626:	ea54 0305 	orrs.w	r3, r4, r5
 800562a:	d049      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800562c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005630:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005632:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005636:	d02f      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005638:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800563c:	d828      	bhi.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800563e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005642:	d01a      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005644:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005648:	d822      	bhi.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800564e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005652:	d007      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005654:	e01c      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005656:	4bb8      	ldr	r3, [pc, #736]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565a:	4ab7      	ldr	r2, [pc, #732]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800565c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005660:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005662:	e01a      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005668:	3308      	adds	r3, #8
 800566a:	2102      	movs	r1, #2
 800566c:	4618      	mov	r0, r3
 800566e:	f001 f9d1 	bl	8006a14 <RCCEx_PLL2_Config>
 8005672:	4603      	mov	r3, r0
 8005674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005678:	e00f      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800567a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800567e:	3328      	adds	r3, #40	@ 0x28
 8005680:	2102      	movs	r1, #2
 8005682:	4618      	mov	r0, r3
 8005684:	f001 fa78 	bl	8006b78 <RCCEx_PLL3_Config>
 8005688:	4603      	mov	r3, r0
 800568a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800568e:	e004      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005696:	e000      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800569a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10a      	bne.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80056a2:	4ba5      	ldr	r3, [pc, #660]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80056aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056b0:	4aa1      	ldr	r2, [pc, #644]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056b2:	430b      	orrs	r3, r1
 80056b4:	6513      	str	r3, [r2, #80]	@ 0x50
 80056b6:	e003      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80056cc:	f04f 0900 	mov.w	r9, #0
 80056d0:	ea58 0309 	orrs.w	r3, r8, r9
 80056d4:	d047      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80056d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056dc:	2b04      	cmp	r3, #4
 80056de:	d82a      	bhi.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80056e0:	a201      	add	r2, pc, #4	@ (adr r2, 80056e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80056e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e6:	bf00      	nop
 80056e8:	080056fd 	.word	0x080056fd
 80056ec:	0800570b 	.word	0x0800570b
 80056f0:	08005721 	.word	0x08005721
 80056f4:	0800573f 	.word	0x0800573f
 80056f8:	0800573f 	.word	0x0800573f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056fc:	4b8e      	ldr	r3, [pc, #568]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005700:	4a8d      	ldr	r2, [pc, #564]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005706:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005708:	e01a      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800570a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570e:	3308      	adds	r3, #8
 8005710:	2100      	movs	r1, #0
 8005712:	4618      	mov	r0, r3
 8005714:	f001 f97e 	bl	8006a14 <RCCEx_PLL2_Config>
 8005718:	4603      	mov	r3, r0
 800571a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800571e:	e00f      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005724:	3328      	adds	r3, #40	@ 0x28
 8005726:	2100      	movs	r1, #0
 8005728:	4618      	mov	r0, r3
 800572a:	f001 fa25 	bl	8006b78 <RCCEx_PLL3_Config>
 800572e:	4603      	mov	r3, r0
 8005730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005734:	e004      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800573c:	e000      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800573e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10a      	bne.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005748:	4b7b      	ldr	r3, [pc, #492]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800574a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800574c:	f023 0107 	bic.w	r1, r3, #7
 8005750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005756:	4a78      	ldr	r2, [pc, #480]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005758:	430b      	orrs	r3, r1
 800575a:	6513      	str	r3, [r2, #80]	@ 0x50
 800575c:	e003      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800575e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005762:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005772:	f04f 0b00 	mov.w	fp, #0
 8005776:	ea5a 030b 	orrs.w	r3, sl, fp
 800577a:	d04c      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800577c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005782:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005786:	d030      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005788:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800578c:	d829      	bhi.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800578e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005790:	d02d      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005792:	2bc0      	cmp	r3, #192	@ 0xc0
 8005794:	d825      	bhi.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005796:	2b80      	cmp	r3, #128	@ 0x80
 8005798:	d018      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800579a:	2b80      	cmp	r3, #128	@ 0x80
 800579c:	d821      	bhi.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80057a2:	2b40      	cmp	r3, #64	@ 0x40
 80057a4:	d007      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80057a6:	e01c      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a8:	4b63      	ldr	r3, [pc, #396]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ac:	4a62      	ldr	r2, [pc, #392]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80057b4:	e01c      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ba:	3308      	adds	r3, #8
 80057bc:	2100      	movs	r1, #0
 80057be:	4618      	mov	r0, r3
 80057c0:	f001 f928 	bl	8006a14 <RCCEx_PLL2_Config>
 80057c4:	4603      	mov	r3, r0
 80057c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80057ca:	e011      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d0:	3328      	adds	r3, #40	@ 0x28
 80057d2:	2100      	movs	r1, #0
 80057d4:	4618      	mov	r0, r3
 80057d6:	f001 f9cf 	bl	8006b78 <RCCEx_PLL3_Config>
 80057da:	4603      	mov	r3, r0
 80057dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80057e0:	e006      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057e8:	e002      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80057ea:	bf00      	nop
 80057ec:	e000      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80057ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10a      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80057f8:	4b4f      	ldr	r3, [pc, #316]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057fc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005806:	4a4c      	ldr	r2, [pc, #304]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005808:	430b      	orrs	r3, r1
 800580a:	6513      	str	r3, [r2, #80]	@ 0x50
 800580c:	e003      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800580e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005812:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005822:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005826:	2300      	movs	r3, #0
 8005828:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800582c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005830:	460b      	mov	r3, r1
 8005832:	4313      	orrs	r3, r2
 8005834:	d053      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800583a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800583e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005842:	d035      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005844:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005848:	d82e      	bhi.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800584a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800584e:	d031      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005850:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005854:	d828      	bhi.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005856:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800585a:	d01a      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800585c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005860:	d822      	bhi.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005866:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800586a:	d007      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800586c:	e01c      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800586e:	4b32      	ldr	r3, [pc, #200]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005872:	4a31      	ldr	r2, [pc, #196]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005878:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800587a:	e01c      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800587c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005880:	3308      	adds	r3, #8
 8005882:	2100      	movs	r1, #0
 8005884:	4618      	mov	r0, r3
 8005886:	f001 f8c5 	bl	8006a14 <RCCEx_PLL2_Config>
 800588a:	4603      	mov	r3, r0
 800588c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005890:	e011      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005896:	3328      	adds	r3, #40	@ 0x28
 8005898:	2100      	movs	r1, #0
 800589a:	4618      	mov	r0, r3
 800589c:	f001 f96c 	bl	8006b78 <RCCEx_PLL3_Config>
 80058a0:	4603      	mov	r3, r0
 80058a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058a6:	e006      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058ae:	e002      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80058b0:	bf00      	nop
 80058b2:	e000      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80058b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10b      	bne.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80058be:	4b1e      	ldr	r3, [pc, #120]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058c2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80058c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80058ce:	4a1a      	ldr	r2, [pc, #104]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058d0:	430b      	orrs	r3, r1
 80058d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80058d4:	e003      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80058de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80058ea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80058ee:	2300      	movs	r3, #0
 80058f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80058f4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80058f8:	460b      	mov	r3, r1
 80058fa:	4313      	orrs	r3, r2
 80058fc:	d056      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80058fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005902:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005906:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800590a:	d038      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800590c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005910:	d831      	bhi.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005912:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005916:	d034      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005918:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800591c:	d82b      	bhi.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800591e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005922:	d01d      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005924:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005928:	d825      	bhi.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800592a:	2b00      	cmp	r3, #0
 800592c:	d006      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800592e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005932:	d00a      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005934:	e01f      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005936:	bf00      	nop
 8005938:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800593c:	4ba2      	ldr	r3, [pc, #648]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800593e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005940:	4aa1      	ldr	r2, [pc, #644]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005946:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005948:	e01c      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800594a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594e:	3308      	adds	r3, #8
 8005950:	2100      	movs	r1, #0
 8005952:	4618      	mov	r0, r3
 8005954:	f001 f85e 	bl	8006a14 <RCCEx_PLL2_Config>
 8005958:	4603      	mov	r3, r0
 800595a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800595e:	e011      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005964:	3328      	adds	r3, #40	@ 0x28
 8005966:	2100      	movs	r1, #0
 8005968:	4618      	mov	r0, r3
 800596a:	f001 f905 	bl	8006b78 <RCCEx_PLL3_Config>
 800596e:	4603      	mov	r3, r0
 8005970:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005974:	e006      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800597c:	e002      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800597e:	bf00      	nop
 8005980:	e000      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005982:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005984:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10b      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800598c:	4b8e      	ldr	r3, [pc, #568]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800598e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005990:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005998:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800599c:	4a8a      	ldr	r2, [pc, #552]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800599e:	430b      	orrs	r3, r1
 80059a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80059a2:	e003      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80059ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80059b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80059bc:	2300      	movs	r3, #0
 80059be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80059c2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80059c6:	460b      	mov	r3, r1
 80059c8:	4313      	orrs	r3, r2
 80059ca:	d03a      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80059cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059d2:	2b30      	cmp	r3, #48	@ 0x30
 80059d4:	d01f      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80059d6:	2b30      	cmp	r3, #48	@ 0x30
 80059d8:	d819      	bhi.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80059da:	2b20      	cmp	r3, #32
 80059dc:	d00c      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80059de:	2b20      	cmp	r3, #32
 80059e0:	d815      	bhi.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d019      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80059e6:	2b10      	cmp	r3, #16
 80059e8:	d111      	bne.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059ea:	4b77      	ldr	r3, [pc, #476]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ee:	4a76      	ldr	r2, [pc, #472]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80059f6:	e011      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059fc:	3308      	adds	r3, #8
 80059fe:	2102      	movs	r1, #2
 8005a00:	4618      	mov	r0, r3
 8005a02:	f001 f807 	bl	8006a14 <RCCEx_PLL2_Config>
 8005a06:	4603      	mov	r3, r0
 8005a08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005a0c:	e006      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a14:	e002      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005a16:	bf00      	nop
 8005a18:	e000      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10a      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005a24:	4b68      	ldr	r3, [pc, #416]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a28:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a32:	4a65      	ldr	r2, [pc, #404]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a34:	430b      	orrs	r3, r1
 8005a36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a38:	e003      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005a4e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005a52:	2300      	movs	r3, #0
 8005a54:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a58:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	d051      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a6c:	d035      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005a6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a72:	d82e      	bhi.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a74:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a78:	d031      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005a7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a7e:	d828      	bhi.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a84:	d01a      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005a86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a8a:	d822      	bhi.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005a90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a94:	d007      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005a96:	e01c      	b.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a98:	4b4b      	ldr	r3, [pc, #300]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9c:	4a4a      	ldr	r2, [pc, #296]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005aa4:	e01c      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aaa:	3308      	adds	r3, #8
 8005aac:	2100      	movs	r1, #0
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 ffb0 	bl	8006a14 <RCCEx_PLL2_Config>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005aba:	e011      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac0:	3328      	adds	r3, #40	@ 0x28
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f001 f857 	bl	8006b78 <RCCEx_PLL3_Config>
 8005aca:	4603      	mov	r3, r0
 8005acc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ad0:	e006      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ad8:	e002      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005ada:	bf00      	nop
 8005adc:	e000      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005ade:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10a      	bne.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ae8:	4b37      	ldr	r3, [pc, #220]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005af6:	4a34      	ldr	r2, [pc, #208]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005af8:	430b      	orrs	r3, r1
 8005afa:	6513      	str	r3, [r2, #80]	@ 0x50
 8005afc:	e003      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005afe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005b12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b16:	2300      	movs	r3, #0
 8005b18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005b1c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005b20:	460b      	mov	r3, r1
 8005b22:	4313      	orrs	r3, r2
 8005b24:	d056      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b30:	d033      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005b32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b36:	d82c      	bhi.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b3c:	d02f      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005b3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b42:	d826      	bhi.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b48:	d02b      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005b4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b4e:	d820      	bhi.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b54:	d012      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005b56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b5a:	d81a      	bhi.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d022      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b64:	d115      	bne.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 ff50 	bl	8006a14 <RCCEx_PLL2_Config>
 8005b74:	4603      	mov	r3, r0
 8005b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b7a:	e015      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b80:	3328      	adds	r3, #40	@ 0x28
 8005b82:	2101      	movs	r1, #1
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 fff7 	bl	8006b78 <RCCEx_PLL3_Config>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b90:	e00a      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b98:	e006      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b9a:	bf00      	nop
 8005b9c:	e004      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b9e:	bf00      	nop
 8005ba0:	e002      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005ba2:	bf00      	nop
 8005ba4:	e000      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ba8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10d      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005bb0:	4b05      	ldr	r3, [pc, #20]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bb4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bbe:	4a02      	ldr	r2, [pc, #8]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bc4:	e006      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005bc6:	bf00      	nop
 8005bc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bdc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005be0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005be4:	2300      	movs	r3, #0
 8005be6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bea:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	d055      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c00:	d033      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005c02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c06:	d82c      	bhi.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c0c:	d02f      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c12:	d826      	bhi.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c18:	d02b      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005c1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c1e:	d820      	bhi.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c24:	d012      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005c26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c2a:	d81a      	bhi.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d022      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005c30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c34:	d115      	bne.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 fee8 	bl	8006a14 <RCCEx_PLL2_Config>
 8005c44:	4603      	mov	r3, r0
 8005c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c4a:	e015      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c50:	3328      	adds	r3, #40	@ 0x28
 8005c52:	2101      	movs	r1, #1
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 ff8f 	bl	8006b78 <RCCEx_PLL3_Config>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c60:	e00a      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c68:	e006      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c6a:	bf00      	nop
 8005c6c:	e004      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c6e:	bf00      	nop
 8005c70:	e002      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c72:	bf00      	nop
 8005c74:	e000      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10b      	bne.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005c80:	4ba3      	ldr	r3, [pc, #652]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c84:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c90:	4a9f      	ldr	r2, [pc, #636]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c92:	430b      	orrs	r3, r1
 8005c94:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c96:	e003      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005cac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005cb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	d037      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cca:	d00e      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005ccc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cd0:	d816      	bhi.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d018      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005cd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cda:	d111      	bne.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cdc:	4b8c      	ldr	r3, [pc, #560]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce0:	4a8b      	ldr	r2, [pc, #556]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ce6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ce8:	e00f      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cee:	3308      	adds	r3, #8
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fe8e 	bl	8006a14 <RCCEx_PLL2_Config>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005cfe:	e004      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d06:	e000      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10a      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d12:	4b7f      	ldr	r3, [pc, #508]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d16:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d20:	4a7b      	ldr	r2, [pc, #492]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d22:	430b      	orrs	r3, r1
 8005d24:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d26:	e003      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d38:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d40:	2300      	movs	r3, #0
 8005d42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005d46:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	d039      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d56:	2b03      	cmp	r3, #3
 8005d58:	d81c      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d60 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d60:	08005d9d 	.word	0x08005d9d
 8005d64:	08005d71 	.word	0x08005d71
 8005d68:	08005d7f 	.word	0x08005d7f
 8005d6c:	08005d9d 	.word	0x08005d9d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d70:	4b67      	ldr	r3, [pc, #412]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d74:	4a66      	ldr	r2, [pc, #408]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d7c:	e00f      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d82:	3308      	adds	r3, #8
 8005d84:	2102      	movs	r1, #2
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 fe44 	bl	8006a14 <RCCEx_PLL2_Config>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d92:	e004      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d9a:	e000      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10a      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005da6:	4b5a      	ldr	r3, [pc, #360]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005daa:	f023 0103 	bic.w	r1, r3, #3
 8005dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005db4:	4a56      	ldr	r2, [pc, #344]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005db6:	430b      	orrs	r3, r1
 8005db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005dba:	e003      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005dd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005dda:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005dde:	460b      	mov	r3, r1
 8005de0:	4313      	orrs	r3, r2
 8005de2:	f000 809f 	beq.w	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005de6:	4b4b      	ldr	r3, [pc, #300]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a4a      	ldr	r2, [pc, #296]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005df0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005df2:	f7fc fda1 	bl	8002938 <HAL_GetTick>
 8005df6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dfa:	e00b      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dfc:	f7fc fd9c 	bl	8002938 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	2b64      	cmp	r3, #100	@ 0x64
 8005e0a:	d903      	bls.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e12:	e005      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e14:	4b3f      	ldr	r3, [pc, #252]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0ed      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005e20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d179      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e28:	4b39      	ldr	r3, [pc, #228]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e2a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e34:	4053      	eors	r3, r2
 8005e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d015      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e3e:	4b34      	ldr	r3, [pc, #208]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e46:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e4a:	4b31      	ldr	r3, [pc, #196]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e4e:	4a30      	ldr	r2, [pc, #192]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e54:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e56:	4b2e      	ldr	r3, [pc, #184]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e5a:	4a2d      	ldr	r2, [pc, #180]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e60:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e62:	4a2b      	ldr	r2, [pc, #172]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e68:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e76:	d118      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e78:	f7fc fd5e 	bl	8002938 <HAL_GetTick>
 8005e7c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e80:	e00d      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e82:	f7fc fd59 	bl	8002938 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005e8c:	1ad2      	subs	r2, r2, r3
 8005e8e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d903      	bls.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005e9c:	e005      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0eb      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d129      	bne.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005eba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ebe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ec2:	d10e      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005ec4:	4b12      	ldr	r3, [pc, #72]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ed4:	091a      	lsrs	r2, r3, #4
 8005ed6:	4b10      	ldr	r3, [pc, #64]	@ (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005ed8:	4013      	ands	r3, r2
 8005eda:	4a0d      	ldr	r2, [pc, #52]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005edc:	430b      	orrs	r3, r1
 8005ede:	6113      	str	r3, [r2, #16]
 8005ee0:	e005      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ee8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005eec:	6113      	str	r3, [r2, #16]
 8005eee:	4b08      	ldr	r3, [pc, #32]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ef0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005efe:	4a04      	ldr	r2, [pc, #16]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f00:	430b      	orrs	r3, r1
 8005f02:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f04:	e00e      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005f0e:	e009      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005f10:	58024400 	.word	0x58024400
 8005f14:	58024800 	.word	0x58024800
 8005f18:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2c:	f002 0301 	and.w	r3, r2, #1
 8005f30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f34:	2300      	movs	r3, #0
 8005f36:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f3a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	4313      	orrs	r3, r2
 8005f42:	f000 8089 	beq.w	8006058 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f4c:	2b28      	cmp	r3, #40	@ 0x28
 8005f4e:	d86b      	bhi.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005f50:	a201      	add	r2, pc, #4	@ (adr r2, 8005f58 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f56:	bf00      	nop
 8005f58:	08006031 	.word	0x08006031
 8005f5c:	08006029 	.word	0x08006029
 8005f60:	08006029 	.word	0x08006029
 8005f64:	08006029 	.word	0x08006029
 8005f68:	08006029 	.word	0x08006029
 8005f6c:	08006029 	.word	0x08006029
 8005f70:	08006029 	.word	0x08006029
 8005f74:	08006029 	.word	0x08006029
 8005f78:	08005ffd 	.word	0x08005ffd
 8005f7c:	08006029 	.word	0x08006029
 8005f80:	08006029 	.word	0x08006029
 8005f84:	08006029 	.word	0x08006029
 8005f88:	08006029 	.word	0x08006029
 8005f8c:	08006029 	.word	0x08006029
 8005f90:	08006029 	.word	0x08006029
 8005f94:	08006029 	.word	0x08006029
 8005f98:	08006013 	.word	0x08006013
 8005f9c:	08006029 	.word	0x08006029
 8005fa0:	08006029 	.word	0x08006029
 8005fa4:	08006029 	.word	0x08006029
 8005fa8:	08006029 	.word	0x08006029
 8005fac:	08006029 	.word	0x08006029
 8005fb0:	08006029 	.word	0x08006029
 8005fb4:	08006029 	.word	0x08006029
 8005fb8:	08006031 	.word	0x08006031
 8005fbc:	08006029 	.word	0x08006029
 8005fc0:	08006029 	.word	0x08006029
 8005fc4:	08006029 	.word	0x08006029
 8005fc8:	08006029 	.word	0x08006029
 8005fcc:	08006029 	.word	0x08006029
 8005fd0:	08006029 	.word	0x08006029
 8005fd4:	08006029 	.word	0x08006029
 8005fd8:	08006031 	.word	0x08006031
 8005fdc:	08006029 	.word	0x08006029
 8005fe0:	08006029 	.word	0x08006029
 8005fe4:	08006029 	.word	0x08006029
 8005fe8:	08006029 	.word	0x08006029
 8005fec:	08006029 	.word	0x08006029
 8005ff0:	08006029 	.word	0x08006029
 8005ff4:	08006029 	.word	0x08006029
 8005ff8:	08006031 	.word	0x08006031
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006000:	3308      	adds	r3, #8
 8006002:	2101      	movs	r1, #1
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fd05 	bl	8006a14 <RCCEx_PLL2_Config>
 800600a:	4603      	mov	r3, r0
 800600c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006010:	e00f      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006016:	3328      	adds	r3, #40	@ 0x28
 8006018:	2101      	movs	r1, #1
 800601a:	4618      	mov	r0, r3
 800601c:	f000 fdac 	bl	8006b78 <RCCEx_PLL3_Config>
 8006020:	4603      	mov	r3, r0
 8006022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006026:	e004      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800602e:	e000      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10a      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800603a:	4bbf      	ldr	r3, [pc, #764]	@ (8006338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800603c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800603e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006046:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006048:	4abb      	ldr	r2, [pc, #748]	@ (8006338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800604a:	430b      	orrs	r3, r1
 800604c:	6553      	str	r3, [r2, #84]	@ 0x54
 800604e:	e003      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006054:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006060:	f002 0302 	and.w	r3, r2, #2
 8006064:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006068:	2300      	movs	r3, #0
 800606a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800606e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006072:	460b      	mov	r3, r1
 8006074:	4313      	orrs	r3, r2
 8006076:	d041      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800607e:	2b05      	cmp	r3, #5
 8006080:	d824      	bhi.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006082:	a201      	add	r2, pc, #4	@ (adr r2, 8006088 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006088:	080060d5 	.word	0x080060d5
 800608c:	080060a1 	.word	0x080060a1
 8006090:	080060b7 	.word	0x080060b7
 8006094:	080060d5 	.word	0x080060d5
 8006098:	080060d5 	.word	0x080060d5
 800609c:	080060d5 	.word	0x080060d5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a4:	3308      	adds	r3, #8
 80060a6:	2101      	movs	r1, #1
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 fcb3 	bl	8006a14 <RCCEx_PLL2_Config>
 80060ae:	4603      	mov	r3, r0
 80060b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80060b4:	e00f      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ba:	3328      	adds	r3, #40	@ 0x28
 80060bc:	2101      	movs	r1, #1
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fd5a 	bl	8006b78 <RCCEx_PLL3_Config>
 80060c4:	4603      	mov	r3, r0
 80060c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80060ca:	e004      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060d2:	e000      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80060d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10a      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80060de:	4b96      	ldr	r3, [pc, #600]	@ (8006338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060e2:	f023 0107 	bic.w	r1, r3, #7
 80060e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060ec:	4a92      	ldr	r2, [pc, #584]	@ (8006338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060ee:	430b      	orrs	r3, r1
 80060f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80060f2:	e003      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	f002 0304 	and.w	r3, r2, #4
 8006108:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800610c:	2300      	movs	r3, #0
 800610e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006112:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006116:	460b      	mov	r3, r1
 8006118:	4313      	orrs	r3, r2
 800611a:	d044      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800611c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006120:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006124:	2b05      	cmp	r3, #5
 8006126:	d825      	bhi.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006128:	a201      	add	r2, pc, #4	@ (adr r2, 8006130 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800612a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612e:	bf00      	nop
 8006130:	0800617d 	.word	0x0800617d
 8006134:	08006149 	.word	0x08006149
 8006138:	0800615f 	.word	0x0800615f
 800613c:	0800617d 	.word	0x0800617d
 8006140:	0800617d 	.word	0x0800617d
 8006144:	0800617d 	.word	0x0800617d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800614c:	3308      	adds	r3, #8
 800614e:	2101      	movs	r1, #1
 8006150:	4618      	mov	r0, r3
 8006152:	f000 fc5f 	bl	8006a14 <RCCEx_PLL2_Config>
 8006156:	4603      	mov	r3, r0
 8006158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800615c:	e00f      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800615e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006162:	3328      	adds	r3, #40	@ 0x28
 8006164:	2101      	movs	r1, #1
 8006166:	4618      	mov	r0, r3
 8006168:	f000 fd06 	bl	8006b78 <RCCEx_PLL3_Config>
 800616c:	4603      	mov	r3, r0
 800616e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006172:	e004      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800617a:	e000      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800617c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800617e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10b      	bne.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006186:	4b6c      	ldr	r3, [pc, #432]	@ (8006338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800618a:	f023 0107 	bic.w	r1, r3, #7
 800618e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006192:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006196:	4a68      	ldr	r2, [pc, #416]	@ (8006338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006198:	430b      	orrs	r3, r1
 800619a:	6593      	str	r3, [r2, #88]	@ 0x58
 800619c:	e003      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ae:	f002 0320 	and.w	r3, r2, #32
 80061b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80061b6:	2300      	movs	r3, #0
 80061b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80061c0:	460b      	mov	r3, r1
 80061c2:	4313      	orrs	r3, r2
 80061c4:	d055      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80061c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061d2:	d033      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80061d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061d8:	d82c      	bhi.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061de:	d02f      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80061e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061e4:	d826      	bhi.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061ea:	d02b      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80061ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061f0:	d820      	bhi.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061f6:	d012      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80061f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061fc:	d81a      	bhi.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d022      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006202:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006206:	d115      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800620c:	3308      	adds	r3, #8
 800620e:	2100      	movs	r1, #0
 8006210:	4618      	mov	r0, r3
 8006212:	f000 fbff 	bl	8006a14 <RCCEx_PLL2_Config>
 8006216:	4603      	mov	r3, r0
 8006218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800621c:	e015      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800621e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006222:	3328      	adds	r3, #40	@ 0x28
 8006224:	2102      	movs	r1, #2
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fca6 	bl	8006b78 <RCCEx_PLL3_Config>
 800622c:	4603      	mov	r3, r0
 800622e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006232:	e00a      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800623a:	e006      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800623c:	bf00      	nop
 800623e:	e004      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006240:	bf00      	nop
 8006242:	e002      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006244:	bf00      	nop
 8006246:	e000      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800624a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10b      	bne.n	800626a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006252:	4b39      	ldr	r3, [pc, #228]	@ (8006338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006256:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800625a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800625e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006262:	4a35      	ldr	r2, [pc, #212]	@ (8006338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006264:	430b      	orrs	r3, r1
 8006266:	6553      	str	r3, [r2, #84]	@ 0x54
 8006268:	e003      	b.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800626e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800627e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006282:	2300      	movs	r3, #0
 8006284:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006288:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800628c:	460b      	mov	r3, r1
 800628e:	4313      	orrs	r3, r2
 8006290:	d058      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006296:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800629a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800629e:	d033      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80062a0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80062a4:	d82c      	bhi.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062aa:	d02f      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80062ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062b0:	d826      	bhi.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062b6:	d02b      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80062b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062bc:	d820      	bhi.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062c2:	d012      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80062c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062c8:	d81a      	bhi.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d022      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80062ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062d2:	d115      	bne.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d8:	3308      	adds	r3, #8
 80062da:	2100      	movs	r1, #0
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 fb99 	bl	8006a14 <RCCEx_PLL2_Config>
 80062e2:	4603      	mov	r3, r0
 80062e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80062e8:	e015      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ee:	3328      	adds	r3, #40	@ 0x28
 80062f0:	2102      	movs	r1, #2
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 fc40 	bl	8006b78 <RCCEx_PLL3_Config>
 80062f8:	4603      	mov	r3, r0
 80062fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80062fe:	e00a      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006306:	e006      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006308:	bf00      	nop
 800630a:	e004      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800630c:	bf00      	nop
 800630e:	e002      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006310:	bf00      	nop
 8006312:	e000      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10e      	bne.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800631e:	4b06      	ldr	r3, [pc, #24]	@ (8006338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006322:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800632a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800632e:	4a02      	ldr	r2, [pc, #8]	@ (8006338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006330:	430b      	orrs	r3, r1
 8006332:	6593      	str	r3, [r2, #88]	@ 0x58
 8006334:	e006      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006336:	bf00      	nop
 8006338:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006340:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006350:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006354:	2300      	movs	r3, #0
 8006356:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800635a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800635e:	460b      	mov	r3, r1
 8006360:	4313      	orrs	r3, r2
 8006362:	d055      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006368:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800636c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006370:	d033      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006372:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006376:	d82c      	bhi.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006378:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800637c:	d02f      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800637e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006382:	d826      	bhi.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006384:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006388:	d02b      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800638a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800638e:	d820      	bhi.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006390:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006394:	d012      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006396:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800639a:	d81a      	bhi.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800639c:	2b00      	cmp	r3, #0
 800639e:	d022      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80063a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063a4:	d115      	bne.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063aa:	3308      	adds	r3, #8
 80063ac:	2100      	movs	r1, #0
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 fb30 	bl	8006a14 <RCCEx_PLL2_Config>
 80063b4:	4603      	mov	r3, r0
 80063b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80063ba:	e015      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c0:	3328      	adds	r3, #40	@ 0x28
 80063c2:	2102      	movs	r1, #2
 80063c4:	4618      	mov	r0, r3
 80063c6:	f000 fbd7 	bl	8006b78 <RCCEx_PLL3_Config>
 80063ca:	4603      	mov	r3, r0
 80063cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80063d0:	e00a      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063d8:	e006      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063da:	bf00      	nop
 80063dc:	e004      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063de:	bf00      	nop
 80063e0:	e002      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063e2:	bf00      	nop
 80063e4:	e000      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10b      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80063f0:	4ba1      	ldr	r3, [pc, #644]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063f4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80063f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006400:	4a9d      	ldr	r2, [pc, #628]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006402:	430b      	orrs	r3, r1
 8006404:	6593      	str	r3, [r2, #88]	@ 0x58
 8006406:	e003      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006408:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800640c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006418:	f002 0308 	and.w	r3, r2, #8
 800641c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006420:	2300      	movs	r3, #0
 8006422:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006426:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800642a:	460b      	mov	r3, r1
 800642c:	4313      	orrs	r3, r2
 800642e:	d01e      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006434:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800643c:	d10c      	bne.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800643e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006442:	3328      	adds	r3, #40	@ 0x28
 8006444:	2102      	movs	r1, #2
 8006446:	4618      	mov	r0, r3
 8006448:	f000 fb96 	bl	8006b78 <RCCEx_PLL3_Config>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006458:	4b87      	ldr	r3, [pc, #540]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800645a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800645c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006464:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006468:	4a83      	ldr	r2, [pc, #524]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800646a:	430b      	orrs	r3, r1
 800646c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800646e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006476:	f002 0310 	and.w	r3, r2, #16
 800647a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800647e:	2300      	movs	r3, #0
 8006480:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006484:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006488:	460b      	mov	r3, r1
 800648a:	4313      	orrs	r3, r2
 800648c:	d01e      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800648e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006492:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006496:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800649a:	d10c      	bne.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800649c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a0:	3328      	adds	r3, #40	@ 0x28
 80064a2:	2102      	movs	r1, #2
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 fb67 	bl	8006b78 <RCCEx_PLL3_Config>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064b6:	4b70      	ldr	r3, [pc, #448]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80064be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064c6:	4a6c      	ldr	r2, [pc, #432]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064c8:	430b      	orrs	r3, r1
 80064ca:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80064d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064dc:	2300      	movs	r3, #0
 80064de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064e2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80064e6:	460b      	mov	r3, r1
 80064e8:	4313      	orrs	r3, r2
 80064ea:	d03e      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80064ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80064f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064f8:	d022      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80064fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064fe:	d81b      	bhi.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006508:	d00b      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800650a:	e015      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800650c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006510:	3308      	adds	r3, #8
 8006512:	2100      	movs	r1, #0
 8006514:	4618      	mov	r0, r3
 8006516:	f000 fa7d 	bl	8006a14 <RCCEx_PLL2_Config>
 800651a:	4603      	mov	r3, r0
 800651c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006520:	e00f      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006526:	3328      	adds	r3, #40	@ 0x28
 8006528:	2102      	movs	r1, #2
 800652a:	4618      	mov	r0, r3
 800652c:	f000 fb24 	bl	8006b78 <RCCEx_PLL3_Config>
 8006530:	4603      	mov	r3, r0
 8006532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006536:	e004      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800653e:	e000      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10b      	bne.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800654a:	4b4b      	ldr	r3, [pc, #300]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800654c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800654e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006556:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800655a:	4a47      	ldr	r2, [pc, #284]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800655c:	430b      	orrs	r3, r1
 800655e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006560:	e003      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006566:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800656a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800656e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006572:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006576:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006578:	2300      	movs	r3, #0
 800657a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800657c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006580:	460b      	mov	r3, r1
 8006582:	4313      	orrs	r3, r2
 8006584:	d03b      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800658a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800658e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006592:	d01f      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006594:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006598:	d818      	bhi.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800659a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800659e:	d003      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80065a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065a4:	d007      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80065a6:	e011      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065a8:	4b33      	ldr	r3, [pc, #204]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ac:	4a32      	ldr	r2, [pc, #200]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80065b4:	e00f      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ba:	3328      	adds	r3, #40	@ 0x28
 80065bc:	2101      	movs	r1, #1
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 fada 	bl	8006b78 <RCCEx_PLL3_Config>
 80065c4:	4603      	mov	r3, r0
 80065c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80065ca:	e004      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065d2:	e000      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80065d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10b      	bne.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065de:	4b26      	ldr	r3, [pc, #152]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80065e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ee:	4a22      	ldr	r2, [pc, #136]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065f0:	430b      	orrs	r3, r1
 80065f2:	6553      	str	r3, [r2, #84]	@ 0x54
 80065f4:	e003      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80065fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006606:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800660a:	673b      	str	r3, [r7, #112]	@ 0x70
 800660c:	2300      	movs	r3, #0
 800660e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006610:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006614:	460b      	mov	r3, r1
 8006616:	4313      	orrs	r3, r2
 8006618:	d034      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800661a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006628:	d007      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800662a:	e011      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800662c:	4b12      	ldr	r3, [pc, #72]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800662e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006630:	4a11      	ldr	r2, [pc, #68]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006632:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006636:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006638:	e00e      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800663a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800663e:	3308      	adds	r3, #8
 8006640:	2102      	movs	r1, #2
 8006642:	4618      	mov	r0, r3
 8006644:	f000 f9e6 	bl	8006a14 <RCCEx_PLL2_Config>
 8006648:	4603      	mov	r3, r0
 800664a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800664e:	e003      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10d      	bne.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006660:	4b05      	ldr	r3, [pc, #20]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006664:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800666c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800666e:	4a02      	ldr	r2, [pc, #8]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006670:	430b      	orrs	r3, r1
 8006672:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006674:	e006      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006676:	bf00      	nop
 8006678:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006680:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006690:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006692:	2300      	movs	r3, #0
 8006694:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006696:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800669a:	460b      	mov	r3, r1
 800669c:	4313      	orrs	r3, r2
 800669e:	d00c      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a4:	3328      	adds	r3, #40	@ 0x28
 80066a6:	2102      	movs	r1, #2
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 fa65 	bl	8006b78 <RCCEx_PLL3_Config>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d002      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80066ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80066c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80066c8:	2300      	movs	r3, #0
 80066ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80066cc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80066d0:	460b      	mov	r3, r1
 80066d2:	4313      	orrs	r3, r2
 80066d4:	d038      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80066d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066e2:	d018      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80066e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066e8:	d811      	bhi.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80066ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066ee:	d014      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80066f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066f4:	d80b      	bhi.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d011      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80066fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066fe:	d106      	bne.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006700:	4bc3      	ldr	r3, [pc, #780]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006704:	4ac2      	ldr	r2, [pc, #776]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006706:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800670a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800670c:	e008      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006714:	e004      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006716:	bf00      	nop
 8006718:	e002      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800671a:	bf00      	nop
 800671c:	e000      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800671e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10b      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006728:	4bb9      	ldr	r3, [pc, #740]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800672a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800672c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006734:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006738:	4ab5      	ldr	r2, [pc, #724]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800673a:	430b      	orrs	r3, r1
 800673c:	6553      	str	r3, [r2, #84]	@ 0x54
 800673e:	e003      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006744:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006750:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006754:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006756:	2300      	movs	r3, #0
 8006758:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800675a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800675e:	460b      	mov	r3, r1
 8006760:	4313      	orrs	r3, r2
 8006762:	d009      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006764:	4baa      	ldr	r3, [pc, #680]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006768:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800676c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006772:	4aa7      	ldr	r2, [pc, #668]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006774:	430b      	orrs	r3, r1
 8006776:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800677c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006780:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006784:	653b      	str	r3, [r7, #80]	@ 0x50
 8006786:	2300      	movs	r3, #0
 8006788:	657b      	str	r3, [r7, #84]	@ 0x54
 800678a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800678e:	460b      	mov	r3, r1
 8006790:	4313      	orrs	r3, r2
 8006792:	d00a      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006794:	4b9e      	ldr	r3, [pc, #632]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800679c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80067a4:	4a9a      	ldr	r2, [pc, #616]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067a6:	430b      	orrs	r3, r1
 80067a8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80067aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80067b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067b8:	2300      	movs	r3, #0
 80067ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067bc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80067c0:	460b      	mov	r3, r1
 80067c2:	4313      	orrs	r3, r2
 80067c4:	d009      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80067c6:	4b92      	ldr	r3, [pc, #584]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ca:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80067ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067d4:	4a8e      	ldr	r2, [pc, #568]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067d6:	430b      	orrs	r3, r1
 80067d8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80067da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80067e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80067e8:	2300      	movs	r3, #0
 80067ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80067ec:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80067f0:	460b      	mov	r3, r1
 80067f2:	4313      	orrs	r3, r2
 80067f4:	d00e      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067f6:	4b86      	ldr	r3, [pc, #536]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	4a85      	ldr	r2, [pc, #532]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067fc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006800:	6113      	str	r3, [r2, #16]
 8006802:	4b83      	ldr	r3, [pc, #524]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006804:	6919      	ldr	r1, [r3, #16]
 8006806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800680a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800680e:	4a80      	ldr	r2, [pc, #512]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006810:	430b      	orrs	r3, r1
 8006812:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006820:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006822:	2300      	movs	r3, #0
 8006824:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006826:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800682a:	460b      	mov	r3, r1
 800682c:	4313      	orrs	r3, r2
 800682e:	d009      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006830:	4b77      	ldr	r3, [pc, #476]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006834:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800683e:	4a74      	ldr	r2, [pc, #464]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006840:	430b      	orrs	r3, r1
 8006842:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006850:	633b      	str	r3, [r7, #48]	@ 0x30
 8006852:	2300      	movs	r3, #0
 8006854:	637b      	str	r3, [r7, #52]	@ 0x34
 8006856:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800685a:	460b      	mov	r3, r1
 800685c:	4313      	orrs	r3, r2
 800685e:	d00a      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006860:	4b6b      	ldr	r3, [pc, #428]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006864:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006870:	4a67      	ldr	r2, [pc, #412]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006872:	430b      	orrs	r3, r1
 8006874:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687e:	2100      	movs	r1, #0
 8006880:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006888:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800688c:	460b      	mov	r3, r1
 800688e:	4313      	orrs	r3, r2
 8006890:	d011      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006896:	3308      	adds	r3, #8
 8006898:	2100      	movs	r1, #0
 800689a:	4618      	mov	r0, r3
 800689c:	f000 f8ba 	bl	8006a14 <RCCEx_PLL2_Config>
 80068a0:	4603      	mov	r3, r0
 80068a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80068a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80068b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068be:	2100      	movs	r1, #0
 80068c0:	6239      	str	r1, [r7, #32]
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80068c8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80068cc:	460b      	mov	r3, r1
 80068ce:	4313      	orrs	r3, r2
 80068d0:	d011      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d6:	3308      	adds	r3, #8
 80068d8:	2101      	movs	r1, #1
 80068da:	4618      	mov	r0, r3
 80068dc:	f000 f89a 	bl	8006a14 <RCCEx_PLL2_Config>
 80068e0:	4603      	mov	r3, r0
 80068e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80068e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80068f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fe:	2100      	movs	r1, #0
 8006900:	61b9      	str	r1, [r7, #24]
 8006902:	f003 0304 	and.w	r3, r3, #4
 8006906:	61fb      	str	r3, [r7, #28]
 8006908:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800690c:	460b      	mov	r3, r1
 800690e:	4313      	orrs	r3, r2
 8006910:	d011      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006916:	3308      	adds	r3, #8
 8006918:	2102      	movs	r1, #2
 800691a:	4618      	mov	r0, r3
 800691c:	f000 f87a 	bl	8006a14 <RCCEx_PLL2_Config>
 8006920:	4603      	mov	r3, r0
 8006922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800692e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006932:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	2100      	movs	r1, #0
 8006940:	6139      	str	r1, [r7, #16]
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800694c:	460b      	mov	r3, r1
 800694e:	4313      	orrs	r3, r2
 8006950:	d011      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006956:	3328      	adds	r3, #40	@ 0x28
 8006958:	2100      	movs	r1, #0
 800695a:	4618      	mov	r0, r3
 800695c:	f000 f90c 	bl	8006b78 <RCCEx_PLL3_Config>
 8006960:	4603      	mov	r3, r0
 8006962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800696a:	2b00      	cmp	r3, #0
 800696c:	d003      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800696e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006972:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697e:	2100      	movs	r1, #0
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	f003 0310 	and.w	r3, r3, #16
 8006986:	60fb      	str	r3, [r7, #12]
 8006988:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800698c:	460b      	mov	r3, r1
 800698e:	4313      	orrs	r3, r2
 8006990:	d011      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006996:	3328      	adds	r3, #40	@ 0x28
 8006998:	2101      	movs	r1, #1
 800699a:	4618      	mov	r0, r3
 800699c:	f000 f8ec 	bl	8006b78 <RCCEx_PLL3_Config>
 80069a0:	4603      	mov	r3, r0
 80069a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80069a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80069b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069be:	2100      	movs	r1, #0
 80069c0:	6039      	str	r1, [r7, #0]
 80069c2:	f003 0320 	and.w	r3, r3, #32
 80069c6:	607b      	str	r3, [r7, #4]
 80069c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80069cc:	460b      	mov	r3, r1
 80069ce:	4313      	orrs	r3, r2
 80069d0:	d011      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d6:	3328      	adds	r3, #40	@ 0x28
 80069d8:	2102      	movs	r1, #2
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 f8cc 	bl	8006b78 <RCCEx_PLL3_Config>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80069e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80069f6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	e000      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a10:	58024400 	.word	0x58024400

08006a14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a22:	4b53      	ldr	r3, [pc, #332]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a26:	f003 0303 	and.w	r3, r3, #3
 8006a2a:	2b03      	cmp	r3, #3
 8006a2c:	d101      	bne.n	8006a32 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e099      	b.n	8006b66 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006a32:	4b4f      	ldr	r3, [pc, #316]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a4e      	ldr	r2, [pc, #312]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006a38:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006a3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a3e:	f7fb ff7b 	bl	8002938 <HAL_GetTick>
 8006a42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a44:	e008      	b.n	8006a58 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a46:	f7fb ff77 	bl	8002938 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d901      	bls.n	8006a58 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e086      	b.n	8006b66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a58:	4b45      	ldr	r3, [pc, #276]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1f0      	bne.n	8006a46 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006a64:	4b42      	ldr	r3, [pc, #264]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a68:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	031b      	lsls	r3, r3, #12
 8006a72:	493f      	ldr	r1, [pc, #252]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	628b      	str	r3, [r1, #40]	@ 0x28
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	025b      	lsls	r3, r3, #9
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	041b      	lsls	r3, r3, #16
 8006a96:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006a9a:	431a      	orrs	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	061b      	lsls	r3, r3, #24
 8006aa4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006aa8:	4931      	ldr	r1, [pc, #196]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006aae:	4b30      	ldr	r3, [pc, #192]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	492d      	ldr	r1, [pc, #180]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac4:	f023 0220 	bic.w	r2, r3, #32
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	4928      	ldr	r1, [pc, #160]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006ad2:	4b27      	ldr	r3, [pc, #156]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad6:	4a26      	ldr	r2, [pc, #152]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006ad8:	f023 0310 	bic.w	r3, r3, #16
 8006adc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006ade:	4b24      	ldr	r3, [pc, #144]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006ae0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ae2:	4b24      	ldr	r3, [pc, #144]	@ (8006b74 <RCCEx_PLL2_Config+0x160>)
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	69d2      	ldr	r2, [r2, #28]
 8006aea:	00d2      	lsls	r2, r2, #3
 8006aec:	4920      	ldr	r1, [pc, #128]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006af2:	4b1f      	ldr	r3, [pc, #124]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af6:	4a1e      	ldr	r2, [pc, #120]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006af8:	f043 0310 	orr.w	r3, r3, #16
 8006afc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d106      	bne.n	8006b12 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006b04:	4b1a      	ldr	r3, [pc, #104]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b08:	4a19      	ldr	r2, [pc, #100]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006b0a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006b10:	e00f      	b.n	8006b32 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d106      	bne.n	8006b26 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006b18:	4b15      	ldr	r3, [pc, #84]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b1c:	4a14      	ldr	r2, [pc, #80]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006b1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006b24:	e005      	b.n	8006b32 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006b26:	4b12      	ldr	r3, [pc, #72]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2a:	4a11      	ldr	r2, [pc, #68]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006b2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006b30:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006b32:	4b0f      	ldr	r3, [pc, #60]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a0e      	ldr	r2, [pc, #56]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006b38:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006b3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b3e:	f7fb fefb 	bl	8002938 <HAL_GetTick>
 8006b42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006b44:	e008      	b.n	8006b58 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006b46:	f7fb fef7 	bl	8002938 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d901      	bls.n	8006b58 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e006      	b.n	8006b66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006b58:	4b05      	ldr	r3, [pc, #20]	@ (8006b70 <RCCEx_PLL2_Config+0x15c>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d0f0      	beq.n	8006b46 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	58024400 	.word	0x58024400
 8006b74:	ffff0007 	.word	0xffff0007

08006b78 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b86:	4b53      	ldr	r3, [pc, #332]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8a:	f003 0303 	and.w	r3, r3, #3
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d101      	bne.n	8006b96 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e099      	b.n	8006cca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006b96:	4b4f      	ldr	r3, [pc, #316]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a4e      	ldr	r2, [pc, #312]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006b9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ba2:	f7fb fec9 	bl	8002938 <HAL_GetTick>
 8006ba6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ba8:	e008      	b.n	8006bbc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006baa:	f7fb fec5 	bl	8002938 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d901      	bls.n	8006bbc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e086      	b.n	8006cca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006bbc:	4b45      	ldr	r3, [pc, #276]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1f0      	bne.n	8006baa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006bc8:	4b42      	ldr	r3, [pc, #264]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bcc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	051b      	lsls	r3, r3, #20
 8006bd6:	493f      	ldr	r1, [pc, #252]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	628b      	str	r3, [r1, #40]	@ 0x28
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	3b01      	subs	r3, #1
 8006bec:	025b      	lsls	r3, r3, #9
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	041b      	lsls	r3, r3, #16
 8006bfa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	3b01      	subs	r3, #1
 8006c06:	061b      	lsls	r3, r3, #24
 8006c08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006c0c:	4931      	ldr	r1, [pc, #196]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006c12:	4b30      	ldr	r3, [pc, #192]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c16:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	492d      	ldr	r1, [pc, #180]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006c24:	4b2b      	ldr	r3, [pc, #172]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c28:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	4928      	ldr	r1, [pc, #160]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006c36:	4b27      	ldr	r3, [pc, #156]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3a:	4a26      	ldr	r2, [pc, #152]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006c3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006c42:	4b24      	ldr	r3, [pc, #144]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006c44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c46:	4b24      	ldr	r3, [pc, #144]	@ (8006cd8 <RCCEx_PLL3_Config+0x160>)
 8006c48:	4013      	ands	r3, r2
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	69d2      	ldr	r2, [r2, #28]
 8006c4e:	00d2      	lsls	r2, r2, #3
 8006c50:	4920      	ldr	r1, [pc, #128]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006c56:	4b1f      	ldr	r3, [pc, #124]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5a:	4a1e      	ldr	r2, [pc, #120]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d106      	bne.n	8006c76 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006c68:	4b1a      	ldr	r3, [pc, #104]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6c:	4a19      	ldr	r2, [pc, #100]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006c6e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006c72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006c74:	e00f      	b.n	8006c96 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d106      	bne.n	8006c8a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006c7c:	4b15      	ldr	r3, [pc, #84]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c80:	4a14      	ldr	r2, [pc, #80]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006c82:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006c86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006c88:	e005      	b.n	8006c96 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006c8a:	4b12      	ldr	r3, [pc, #72]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8e:	4a11      	ldr	r2, [pc, #68]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006c90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c94:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006c96:	4b0f      	ldr	r3, [pc, #60]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a0e      	ldr	r2, [pc, #56]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006c9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ca2:	f7fb fe49 	bl	8002938 <HAL_GetTick>
 8006ca6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ca8:	e008      	b.n	8006cbc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006caa:	f7fb fe45 	bl	8002938 <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d901      	bls.n	8006cbc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e006      	b.n	8006cca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006cbc:	4b05      	ldr	r3, [pc, #20]	@ (8006cd4 <RCCEx_PLL3_Config+0x15c>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0f0      	beq.n	8006caa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	58024400 	.word	0x58024400
 8006cd8:	ffff0007 	.word	0xffff0007

08006cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e049      	b.n	8006d82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d106      	bne.n	8006d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7fb f928 	bl	8001f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3304      	adds	r3, #4
 8006d18:	4619      	mov	r1, r3
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	f000 fd5a 	bl	80077d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
	...

08006d8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d001      	beq.n	8006da4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e054      	b.n	8006e4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68da      	ldr	r2, [r3, #12]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f042 0201 	orr.w	r2, r2, #1
 8006dba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a26      	ldr	r2, [pc, #152]	@ (8006e5c <HAL_TIM_Base_Start_IT+0xd0>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d022      	beq.n	8006e0c <HAL_TIM_Base_Start_IT+0x80>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dce:	d01d      	beq.n	8006e0c <HAL_TIM_Base_Start_IT+0x80>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a22      	ldr	r2, [pc, #136]	@ (8006e60 <HAL_TIM_Base_Start_IT+0xd4>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d018      	beq.n	8006e0c <HAL_TIM_Base_Start_IT+0x80>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a21      	ldr	r2, [pc, #132]	@ (8006e64 <HAL_TIM_Base_Start_IT+0xd8>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d013      	beq.n	8006e0c <HAL_TIM_Base_Start_IT+0x80>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a1f      	ldr	r2, [pc, #124]	@ (8006e68 <HAL_TIM_Base_Start_IT+0xdc>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00e      	beq.n	8006e0c <HAL_TIM_Base_Start_IT+0x80>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a1e      	ldr	r2, [pc, #120]	@ (8006e6c <HAL_TIM_Base_Start_IT+0xe0>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d009      	beq.n	8006e0c <HAL_TIM_Base_Start_IT+0x80>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8006e70 <HAL_TIM_Base_Start_IT+0xe4>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d004      	beq.n	8006e0c <HAL_TIM_Base_Start_IT+0x80>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a1b      	ldr	r2, [pc, #108]	@ (8006e74 <HAL_TIM_Base_Start_IT+0xe8>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d115      	bne.n	8006e38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689a      	ldr	r2, [r3, #8]
 8006e12:	4b19      	ldr	r3, [pc, #100]	@ (8006e78 <HAL_TIM_Base_Start_IT+0xec>)
 8006e14:	4013      	ands	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2b06      	cmp	r3, #6
 8006e1c:	d015      	beq.n	8006e4a <HAL_TIM_Base_Start_IT+0xbe>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e24:	d011      	beq.n	8006e4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f042 0201 	orr.w	r2, r2, #1
 8006e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e36:	e008      	b.n	8006e4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f042 0201 	orr.w	r2, r2, #1
 8006e46:	601a      	str	r2, [r3, #0]
 8006e48:	e000      	b.n	8006e4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3714      	adds	r7, #20
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	40010000 	.word	0x40010000
 8006e60:	40000400 	.word	0x40000400
 8006e64:	40000800 	.word	0x40000800
 8006e68:	40000c00 	.word	0x40000c00
 8006e6c:	40010400 	.word	0x40010400
 8006e70:	40001800 	.word	0x40001800
 8006e74:	40014000 	.word	0x40014000
 8006e78:	00010007 	.word	0x00010007

08006e7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e049      	b.n	8006f22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d106      	bne.n	8006ea8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f841 	bl	8006f2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	4619      	mov	r1, r3
 8006eba:	4610      	mov	r0, r2
 8006ebc:	f000 fc8a 	bl	80077d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f32:	bf00      	nop
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
	...

08006f40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d109      	bne.n	8006f64 <HAL_TIM_PWM_Start+0x24>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	bf14      	ite	ne
 8006f5c:	2301      	movne	r3, #1
 8006f5e:	2300      	moveq	r3, #0
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	e03c      	b.n	8006fde <HAL_TIM_PWM_Start+0x9e>
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	d109      	bne.n	8006f7e <HAL_TIM_PWM_Start+0x3e>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	bf14      	ite	ne
 8006f76:	2301      	movne	r3, #1
 8006f78:	2300      	moveq	r3, #0
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	e02f      	b.n	8006fde <HAL_TIM_PWM_Start+0x9e>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b08      	cmp	r3, #8
 8006f82:	d109      	bne.n	8006f98 <HAL_TIM_PWM_Start+0x58>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	bf14      	ite	ne
 8006f90:	2301      	movne	r3, #1
 8006f92:	2300      	moveq	r3, #0
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	e022      	b.n	8006fde <HAL_TIM_PWM_Start+0x9e>
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	2b0c      	cmp	r3, #12
 8006f9c:	d109      	bne.n	8006fb2 <HAL_TIM_PWM_Start+0x72>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	bf14      	ite	ne
 8006faa:	2301      	movne	r3, #1
 8006fac:	2300      	moveq	r3, #0
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	e015      	b.n	8006fde <HAL_TIM_PWM_Start+0x9e>
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b10      	cmp	r3, #16
 8006fb6:	d109      	bne.n	8006fcc <HAL_TIM_PWM_Start+0x8c>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	bf14      	ite	ne
 8006fc4:	2301      	movne	r3, #1
 8006fc6:	2300      	moveq	r3, #0
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	e008      	b.n	8006fde <HAL_TIM_PWM_Start+0x9e>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	bf14      	ite	ne
 8006fd8:	2301      	movne	r3, #1
 8006fda:	2300      	moveq	r3, #0
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e0a1      	b.n	800712a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d104      	bne.n	8006ff6 <HAL_TIM_PWM_Start+0xb6>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ff4:	e023      	b.n	800703e <HAL_TIM_PWM_Start+0xfe>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b04      	cmp	r3, #4
 8006ffa:	d104      	bne.n	8007006 <HAL_TIM_PWM_Start+0xc6>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2202      	movs	r2, #2
 8007000:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007004:	e01b      	b.n	800703e <HAL_TIM_PWM_Start+0xfe>
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2b08      	cmp	r3, #8
 800700a:	d104      	bne.n	8007016 <HAL_TIM_PWM_Start+0xd6>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2202      	movs	r2, #2
 8007010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007014:	e013      	b.n	800703e <HAL_TIM_PWM_Start+0xfe>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b0c      	cmp	r3, #12
 800701a:	d104      	bne.n	8007026 <HAL_TIM_PWM_Start+0xe6>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2202      	movs	r2, #2
 8007020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007024:	e00b      	b.n	800703e <HAL_TIM_PWM_Start+0xfe>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	2b10      	cmp	r3, #16
 800702a:	d104      	bne.n	8007036 <HAL_TIM_PWM_Start+0xf6>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2202      	movs	r2, #2
 8007030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007034:	e003      	b.n	800703e <HAL_TIM_PWM_Start+0xfe>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2202      	movs	r2, #2
 800703a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2201      	movs	r2, #1
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	4618      	mov	r0, r3
 8007048:	f000 ffde 	bl	8008008 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a38      	ldr	r2, [pc, #224]	@ (8007134 <HAL_TIM_PWM_Start+0x1f4>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d013      	beq.n	800707e <HAL_TIM_PWM_Start+0x13e>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a37      	ldr	r2, [pc, #220]	@ (8007138 <HAL_TIM_PWM_Start+0x1f8>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d00e      	beq.n	800707e <HAL_TIM_PWM_Start+0x13e>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a35      	ldr	r2, [pc, #212]	@ (800713c <HAL_TIM_PWM_Start+0x1fc>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d009      	beq.n	800707e <HAL_TIM_PWM_Start+0x13e>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a34      	ldr	r2, [pc, #208]	@ (8007140 <HAL_TIM_PWM_Start+0x200>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d004      	beq.n	800707e <HAL_TIM_PWM_Start+0x13e>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a32      	ldr	r2, [pc, #200]	@ (8007144 <HAL_TIM_PWM_Start+0x204>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d101      	bne.n	8007082 <HAL_TIM_PWM_Start+0x142>
 800707e:	2301      	movs	r3, #1
 8007080:	e000      	b.n	8007084 <HAL_TIM_PWM_Start+0x144>
 8007082:	2300      	movs	r3, #0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d007      	beq.n	8007098 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007096:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a25      	ldr	r2, [pc, #148]	@ (8007134 <HAL_TIM_PWM_Start+0x1f4>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d022      	beq.n	80070e8 <HAL_TIM_PWM_Start+0x1a8>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070aa:	d01d      	beq.n	80070e8 <HAL_TIM_PWM_Start+0x1a8>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a25      	ldr	r2, [pc, #148]	@ (8007148 <HAL_TIM_PWM_Start+0x208>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d018      	beq.n	80070e8 <HAL_TIM_PWM_Start+0x1a8>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a24      	ldr	r2, [pc, #144]	@ (800714c <HAL_TIM_PWM_Start+0x20c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d013      	beq.n	80070e8 <HAL_TIM_PWM_Start+0x1a8>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a22      	ldr	r2, [pc, #136]	@ (8007150 <HAL_TIM_PWM_Start+0x210>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d00e      	beq.n	80070e8 <HAL_TIM_PWM_Start+0x1a8>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a1a      	ldr	r2, [pc, #104]	@ (8007138 <HAL_TIM_PWM_Start+0x1f8>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d009      	beq.n	80070e8 <HAL_TIM_PWM_Start+0x1a8>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a1e      	ldr	r2, [pc, #120]	@ (8007154 <HAL_TIM_PWM_Start+0x214>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d004      	beq.n	80070e8 <HAL_TIM_PWM_Start+0x1a8>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a16      	ldr	r2, [pc, #88]	@ (800713c <HAL_TIM_PWM_Start+0x1fc>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d115      	bne.n	8007114 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	689a      	ldr	r2, [r3, #8]
 80070ee:	4b1a      	ldr	r3, [pc, #104]	@ (8007158 <HAL_TIM_PWM_Start+0x218>)
 80070f0:	4013      	ands	r3, r2
 80070f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b06      	cmp	r3, #6
 80070f8:	d015      	beq.n	8007126 <HAL_TIM_PWM_Start+0x1e6>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007100:	d011      	beq.n	8007126 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f042 0201 	orr.w	r2, r2, #1
 8007110:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007112:	e008      	b.n	8007126 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f042 0201 	orr.w	r2, r2, #1
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	e000      	b.n	8007128 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007126:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	40010000 	.word	0x40010000
 8007138:	40010400 	.word	0x40010400
 800713c:	40014000 	.word	0x40014000
 8007140:	40014400 	.word	0x40014400
 8007144:	40014800 	.word	0x40014800
 8007148:	40000400 	.word	0x40000400
 800714c:	40000800 	.word	0x40000800
 8007150:	40000c00 	.word	0x40000c00
 8007154:	40001800 	.word	0x40001800
 8007158:	00010007 	.word	0x00010007

0800715c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	f003 0302 	and.w	r3, r3, #2
 800717a:	2b00      	cmp	r3, #0
 800717c:	d020      	beq.n	80071c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f003 0302 	and.w	r3, r3, #2
 8007184:	2b00      	cmp	r3, #0
 8007186:	d01b      	beq.n	80071c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f06f 0202 	mvn.w	r2, #2
 8007190:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	f003 0303 	and.w	r3, r3, #3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 faf6 	bl	8007798 <HAL_TIM_IC_CaptureCallback>
 80071ac:	e005      	b.n	80071ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fae8 	bl	8007784 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 faf9 	bl	80077ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	f003 0304 	and.w	r3, r3, #4
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d020      	beq.n	800720c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f003 0304 	and.w	r3, r3, #4
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d01b      	beq.n	800720c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f06f 0204 	mvn.w	r2, #4
 80071dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2202      	movs	r2, #2
 80071e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d003      	beq.n	80071fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fad0 	bl	8007798 <HAL_TIM_IC_CaptureCallback>
 80071f8:	e005      	b.n	8007206 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fac2 	bl	8007784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fad3 	bl	80077ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	f003 0308 	and.w	r3, r3, #8
 8007212:	2b00      	cmp	r3, #0
 8007214:	d020      	beq.n	8007258 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f003 0308 	and.w	r3, r3, #8
 800721c:	2b00      	cmp	r3, #0
 800721e:	d01b      	beq.n	8007258 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f06f 0208 	mvn.w	r2, #8
 8007228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2204      	movs	r2, #4
 800722e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	69db      	ldr	r3, [r3, #28]
 8007236:	f003 0303 	and.w	r3, r3, #3
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 faaa 	bl	8007798 <HAL_TIM_IC_CaptureCallback>
 8007244:	e005      	b.n	8007252 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fa9c 	bl	8007784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 faad 	bl	80077ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	f003 0310 	and.w	r3, r3, #16
 800725e:	2b00      	cmp	r3, #0
 8007260:	d020      	beq.n	80072a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f003 0310 	and.w	r3, r3, #16
 8007268:	2b00      	cmp	r3, #0
 800726a:	d01b      	beq.n	80072a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f06f 0210 	mvn.w	r2, #16
 8007274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2208      	movs	r2, #8
 800727a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	69db      	ldr	r3, [r3, #28]
 8007282:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fa84 	bl	8007798 <HAL_TIM_IC_CaptureCallback>
 8007290:	e005      	b.n	800729e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fa76 	bl	8007784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fa87 	bl	80077ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00c      	beq.n	80072c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d007      	beq.n	80072c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f06f 0201 	mvn.w	r2, #1
 80072c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7fa fa74 	bl	80017b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d104      	bne.n	80072dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00c      	beq.n	80072f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d007      	beq.n	80072f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80072ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 ffc5 	bl	8008280 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00c      	beq.n	800731a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007306:	2b00      	cmp	r3, #0
 8007308:	d007      	beq.n	800731a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 ffbd 	bl	8008294 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00c      	beq.n	800733e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800732a:	2b00      	cmp	r3, #0
 800732c:	d007      	beq.n	800733e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fa41 	bl	80077c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	f003 0320 	and.w	r3, r3, #32
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00c      	beq.n	8007362 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f003 0320 	and.w	r3, r3, #32
 800734e:	2b00      	cmp	r3, #0
 8007350:	d007      	beq.n	8007362 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f06f 0220 	mvn.w	r2, #32
 800735a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 ff85 	bl	800826c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007362:	bf00      	nop
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
	...

0800736c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007378:	2300      	movs	r3, #0
 800737a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007382:	2b01      	cmp	r3, #1
 8007384:	d101      	bne.n	800738a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007386:	2302      	movs	r3, #2
 8007388:	e0ff      	b.n	800758a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b14      	cmp	r3, #20
 8007396:	f200 80f0 	bhi.w	800757a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800739a:	a201      	add	r2, pc, #4	@ (adr r2, 80073a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800739c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a0:	080073f5 	.word	0x080073f5
 80073a4:	0800757b 	.word	0x0800757b
 80073a8:	0800757b 	.word	0x0800757b
 80073ac:	0800757b 	.word	0x0800757b
 80073b0:	08007435 	.word	0x08007435
 80073b4:	0800757b 	.word	0x0800757b
 80073b8:	0800757b 	.word	0x0800757b
 80073bc:	0800757b 	.word	0x0800757b
 80073c0:	08007477 	.word	0x08007477
 80073c4:	0800757b 	.word	0x0800757b
 80073c8:	0800757b 	.word	0x0800757b
 80073cc:	0800757b 	.word	0x0800757b
 80073d0:	080074b7 	.word	0x080074b7
 80073d4:	0800757b 	.word	0x0800757b
 80073d8:	0800757b 	.word	0x0800757b
 80073dc:	0800757b 	.word	0x0800757b
 80073e0:	080074f9 	.word	0x080074f9
 80073e4:	0800757b 	.word	0x0800757b
 80073e8:	0800757b 	.word	0x0800757b
 80073ec:	0800757b 	.word	0x0800757b
 80073f0:	08007539 	.word	0x08007539
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68b9      	ldr	r1, [r7, #8]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 fa90 	bl	8007920 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	699a      	ldr	r2, [r3, #24]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f042 0208 	orr.w	r2, r2, #8
 800740e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	699a      	ldr	r2, [r3, #24]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f022 0204 	bic.w	r2, r2, #4
 800741e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6999      	ldr	r1, [r3, #24]
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	691a      	ldr	r2, [r3, #16]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	430a      	orrs	r2, r1
 8007430:	619a      	str	r2, [r3, #24]
      break;
 8007432:	e0a5      	b.n	8007580 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68b9      	ldr	r1, [r7, #8]
 800743a:	4618      	mov	r0, r3
 800743c:	f000 fb00 	bl	8007a40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	699a      	ldr	r2, [r3, #24]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800744e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	699a      	ldr	r2, [r3, #24]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800745e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6999      	ldr	r1, [r3, #24]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	021a      	lsls	r2, r3, #8
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	430a      	orrs	r2, r1
 8007472:	619a      	str	r2, [r3, #24]
      break;
 8007474:	e084      	b.n	8007580 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68b9      	ldr	r1, [r7, #8]
 800747c:	4618      	mov	r0, r3
 800747e:	f000 fb69 	bl	8007b54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	69da      	ldr	r2, [r3, #28]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f042 0208 	orr.w	r2, r2, #8
 8007490:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	69da      	ldr	r2, [r3, #28]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 0204 	bic.w	r2, r2, #4
 80074a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	69d9      	ldr	r1, [r3, #28]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	691a      	ldr	r2, [r3, #16]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	430a      	orrs	r2, r1
 80074b2:	61da      	str	r2, [r3, #28]
      break;
 80074b4:	e064      	b.n	8007580 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68b9      	ldr	r1, [r7, #8]
 80074bc:	4618      	mov	r0, r3
 80074be:	f000 fbd1 	bl	8007c64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	69da      	ldr	r2, [r3, #28]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	69da      	ldr	r2, [r3, #28]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	69d9      	ldr	r1, [r3, #28]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	021a      	lsls	r2, r3, #8
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	430a      	orrs	r2, r1
 80074f4:	61da      	str	r2, [r3, #28]
      break;
 80074f6:	e043      	b.n	8007580 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68b9      	ldr	r1, [r7, #8]
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 fc1a 	bl	8007d38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f042 0208 	orr.w	r2, r2, #8
 8007512:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f022 0204 	bic.w	r2, r2, #4
 8007522:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	691a      	ldr	r2, [r3, #16]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	430a      	orrs	r2, r1
 8007534:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007536:	e023      	b.n	8007580 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68b9      	ldr	r1, [r7, #8]
 800753e:	4618      	mov	r0, r3
 8007540:	f000 fc5e 	bl	8007e00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007552:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007562:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	021a      	lsls	r2, r3, #8
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007578:	e002      	b.n	8007580 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	75fb      	strb	r3, [r7, #23]
      break;
 800757e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007588:	7dfb      	ldrb	r3, [r7, #23]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3718      	adds	r7, #24
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop

08007594 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d101      	bne.n	80075b0 <HAL_TIM_ConfigClockSource+0x1c>
 80075ac:	2302      	movs	r3, #2
 80075ae:	e0dc      	b.n	800776a <HAL_TIM_ConfigClockSource+0x1d6>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2202      	movs	r2, #2
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	4b6a      	ldr	r3, [pc, #424]	@ (8007774 <HAL_TIM_ConfigClockSource+0x1e0>)
 80075cc:	4013      	ands	r3, r2
 80075ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a64      	ldr	r2, [pc, #400]	@ (8007778 <HAL_TIM_ConfigClockSource+0x1e4>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	f000 80a9 	beq.w	800773e <HAL_TIM_ConfigClockSource+0x1aa>
 80075ec:	4a62      	ldr	r2, [pc, #392]	@ (8007778 <HAL_TIM_ConfigClockSource+0x1e4>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	f200 80ae 	bhi.w	8007750 <HAL_TIM_ConfigClockSource+0x1bc>
 80075f4:	4a61      	ldr	r2, [pc, #388]	@ (800777c <HAL_TIM_ConfigClockSource+0x1e8>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	f000 80a1 	beq.w	800773e <HAL_TIM_ConfigClockSource+0x1aa>
 80075fc:	4a5f      	ldr	r2, [pc, #380]	@ (800777c <HAL_TIM_ConfigClockSource+0x1e8>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	f200 80a6 	bhi.w	8007750 <HAL_TIM_ConfigClockSource+0x1bc>
 8007604:	4a5e      	ldr	r2, [pc, #376]	@ (8007780 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007606:	4293      	cmp	r3, r2
 8007608:	f000 8099 	beq.w	800773e <HAL_TIM_ConfigClockSource+0x1aa>
 800760c:	4a5c      	ldr	r2, [pc, #368]	@ (8007780 <HAL_TIM_ConfigClockSource+0x1ec>)
 800760e:	4293      	cmp	r3, r2
 8007610:	f200 809e 	bhi.w	8007750 <HAL_TIM_ConfigClockSource+0x1bc>
 8007614:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007618:	f000 8091 	beq.w	800773e <HAL_TIM_ConfigClockSource+0x1aa>
 800761c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007620:	f200 8096 	bhi.w	8007750 <HAL_TIM_ConfigClockSource+0x1bc>
 8007624:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007628:	f000 8089 	beq.w	800773e <HAL_TIM_ConfigClockSource+0x1aa>
 800762c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007630:	f200 808e 	bhi.w	8007750 <HAL_TIM_ConfigClockSource+0x1bc>
 8007634:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007638:	d03e      	beq.n	80076b8 <HAL_TIM_ConfigClockSource+0x124>
 800763a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800763e:	f200 8087 	bhi.w	8007750 <HAL_TIM_ConfigClockSource+0x1bc>
 8007642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007646:	f000 8086 	beq.w	8007756 <HAL_TIM_ConfigClockSource+0x1c2>
 800764a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800764e:	d87f      	bhi.n	8007750 <HAL_TIM_ConfigClockSource+0x1bc>
 8007650:	2b70      	cmp	r3, #112	@ 0x70
 8007652:	d01a      	beq.n	800768a <HAL_TIM_ConfigClockSource+0xf6>
 8007654:	2b70      	cmp	r3, #112	@ 0x70
 8007656:	d87b      	bhi.n	8007750 <HAL_TIM_ConfigClockSource+0x1bc>
 8007658:	2b60      	cmp	r3, #96	@ 0x60
 800765a:	d050      	beq.n	80076fe <HAL_TIM_ConfigClockSource+0x16a>
 800765c:	2b60      	cmp	r3, #96	@ 0x60
 800765e:	d877      	bhi.n	8007750 <HAL_TIM_ConfigClockSource+0x1bc>
 8007660:	2b50      	cmp	r3, #80	@ 0x50
 8007662:	d03c      	beq.n	80076de <HAL_TIM_ConfigClockSource+0x14a>
 8007664:	2b50      	cmp	r3, #80	@ 0x50
 8007666:	d873      	bhi.n	8007750 <HAL_TIM_ConfigClockSource+0x1bc>
 8007668:	2b40      	cmp	r3, #64	@ 0x40
 800766a:	d058      	beq.n	800771e <HAL_TIM_ConfigClockSource+0x18a>
 800766c:	2b40      	cmp	r3, #64	@ 0x40
 800766e:	d86f      	bhi.n	8007750 <HAL_TIM_ConfigClockSource+0x1bc>
 8007670:	2b30      	cmp	r3, #48	@ 0x30
 8007672:	d064      	beq.n	800773e <HAL_TIM_ConfigClockSource+0x1aa>
 8007674:	2b30      	cmp	r3, #48	@ 0x30
 8007676:	d86b      	bhi.n	8007750 <HAL_TIM_ConfigClockSource+0x1bc>
 8007678:	2b20      	cmp	r3, #32
 800767a:	d060      	beq.n	800773e <HAL_TIM_ConfigClockSource+0x1aa>
 800767c:	2b20      	cmp	r3, #32
 800767e:	d867      	bhi.n	8007750 <HAL_TIM_ConfigClockSource+0x1bc>
 8007680:	2b00      	cmp	r3, #0
 8007682:	d05c      	beq.n	800773e <HAL_TIM_ConfigClockSource+0x1aa>
 8007684:	2b10      	cmp	r3, #16
 8007686:	d05a      	beq.n	800773e <HAL_TIM_ConfigClockSource+0x1aa>
 8007688:	e062      	b.n	8007750 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800769a:	f000 fc95 	bl	8007fc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80076ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	609a      	str	r2, [r3, #8]
      break;
 80076b6:	e04f      	b.n	8007758 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076c8:	f000 fc7e 	bl	8007fc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689a      	ldr	r2, [r3, #8]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076da:	609a      	str	r2, [r3, #8]
      break;
 80076dc:	e03c      	b.n	8007758 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ea:	461a      	mov	r2, r3
 80076ec:	f000 fbee 	bl	8007ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2150      	movs	r1, #80	@ 0x50
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 fc48 	bl	8007f8c <TIM_ITRx_SetConfig>
      break;
 80076fc:	e02c      	b.n	8007758 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800770a:	461a      	mov	r2, r3
 800770c:	f000 fc0d 	bl	8007f2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2160      	movs	r1, #96	@ 0x60
 8007716:	4618      	mov	r0, r3
 8007718:	f000 fc38 	bl	8007f8c <TIM_ITRx_SetConfig>
      break;
 800771c:	e01c      	b.n	8007758 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800772a:	461a      	mov	r2, r3
 800772c:	f000 fbce 	bl	8007ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2140      	movs	r1, #64	@ 0x40
 8007736:	4618      	mov	r0, r3
 8007738:	f000 fc28 	bl	8007f8c <TIM_ITRx_SetConfig>
      break;
 800773c:	e00c      	b.n	8007758 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4619      	mov	r1, r3
 8007748:	4610      	mov	r0, r2
 800774a:	f000 fc1f 	bl	8007f8c <TIM_ITRx_SetConfig>
      break;
 800774e:	e003      	b.n	8007758 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	73fb      	strb	r3, [r7, #15]
      break;
 8007754:	e000      	b.n	8007758 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007768:	7bfb      	ldrb	r3, [r7, #15]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	ffceff88 	.word	0xffceff88
 8007778:	00100040 	.word	0x00100040
 800777c:	00100030 	.word	0x00100030
 8007780:	00100020 	.word	0x00100020

08007784 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a46      	ldr	r2, [pc, #280]	@ (8007900 <TIM_Base_SetConfig+0x12c>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d013      	beq.n	8007814 <TIM_Base_SetConfig+0x40>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077f2:	d00f      	beq.n	8007814 <TIM_Base_SetConfig+0x40>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a43      	ldr	r2, [pc, #268]	@ (8007904 <TIM_Base_SetConfig+0x130>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d00b      	beq.n	8007814 <TIM_Base_SetConfig+0x40>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a42      	ldr	r2, [pc, #264]	@ (8007908 <TIM_Base_SetConfig+0x134>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d007      	beq.n	8007814 <TIM_Base_SetConfig+0x40>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a41      	ldr	r2, [pc, #260]	@ (800790c <TIM_Base_SetConfig+0x138>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d003      	beq.n	8007814 <TIM_Base_SetConfig+0x40>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a40      	ldr	r2, [pc, #256]	@ (8007910 <TIM_Base_SetConfig+0x13c>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d108      	bne.n	8007826 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800781a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	4313      	orrs	r3, r2
 8007824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a35      	ldr	r2, [pc, #212]	@ (8007900 <TIM_Base_SetConfig+0x12c>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d01f      	beq.n	800786e <TIM_Base_SetConfig+0x9a>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007834:	d01b      	beq.n	800786e <TIM_Base_SetConfig+0x9a>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a32      	ldr	r2, [pc, #200]	@ (8007904 <TIM_Base_SetConfig+0x130>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d017      	beq.n	800786e <TIM_Base_SetConfig+0x9a>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a31      	ldr	r2, [pc, #196]	@ (8007908 <TIM_Base_SetConfig+0x134>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d013      	beq.n	800786e <TIM_Base_SetConfig+0x9a>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a30      	ldr	r2, [pc, #192]	@ (800790c <TIM_Base_SetConfig+0x138>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d00f      	beq.n	800786e <TIM_Base_SetConfig+0x9a>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a2f      	ldr	r2, [pc, #188]	@ (8007910 <TIM_Base_SetConfig+0x13c>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d00b      	beq.n	800786e <TIM_Base_SetConfig+0x9a>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a2e      	ldr	r2, [pc, #184]	@ (8007914 <TIM_Base_SetConfig+0x140>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d007      	beq.n	800786e <TIM_Base_SetConfig+0x9a>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a2d      	ldr	r2, [pc, #180]	@ (8007918 <TIM_Base_SetConfig+0x144>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d003      	beq.n	800786e <TIM_Base_SetConfig+0x9a>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a2c      	ldr	r2, [pc, #176]	@ (800791c <TIM_Base_SetConfig+0x148>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d108      	bne.n	8007880 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	4313      	orrs	r3, r2
 800787e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	4313      	orrs	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	689a      	ldr	r2, [r3, #8]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a16      	ldr	r2, [pc, #88]	@ (8007900 <TIM_Base_SetConfig+0x12c>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d00f      	beq.n	80078cc <TIM_Base_SetConfig+0xf8>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a18      	ldr	r2, [pc, #96]	@ (8007910 <TIM_Base_SetConfig+0x13c>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d00b      	beq.n	80078cc <TIM_Base_SetConfig+0xf8>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a17      	ldr	r2, [pc, #92]	@ (8007914 <TIM_Base_SetConfig+0x140>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d007      	beq.n	80078cc <TIM_Base_SetConfig+0xf8>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a16      	ldr	r2, [pc, #88]	@ (8007918 <TIM_Base_SetConfig+0x144>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d003      	beq.n	80078cc <TIM_Base_SetConfig+0xf8>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a15      	ldr	r2, [pc, #84]	@ (800791c <TIM_Base_SetConfig+0x148>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d103      	bne.n	80078d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	691a      	ldr	r2, [r3, #16]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d105      	bne.n	80078f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	f023 0201 	bic.w	r2, r3, #1
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	611a      	str	r2, [r3, #16]
  }
}
 80078f2:	bf00      	nop
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	40010000 	.word	0x40010000
 8007904:	40000400 	.word	0x40000400
 8007908:	40000800 	.word	0x40000800
 800790c:	40000c00 	.word	0x40000c00
 8007910:	40010400 	.word	0x40010400
 8007914:	40014000 	.word	0x40014000
 8007918:	40014400 	.word	0x40014400
 800791c:	40014800 	.word	0x40014800

08007920 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007920:	b480      	push	{r7}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a1b      	ldr	r3, [r3, #32]
 8007934:	f023 0201 	bic.w	r2, r3, #1
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	4b37      	ldr	r3, [pc, #220]	@ (8007a28 <TIM_OC1_SetConfig+0x108>)
 800794c:	4013      	ands	r3, r2
 800794e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f023 0303 	bic.w	r3, r3, #3
 8007956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	4313      	orrs	r3, r2
 8007960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f023 0302 	bic.w	r3, r3, #2
 8007968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	4313      	orrs	r3, r2
 8007972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a2d      	ldr	r2, [pc, #180]	@ (8007a2c <TIM_OC1_SetConfig+0x10c>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d00f      	beq.n	800799c <TIM_OC1_SetConfig+0x7c>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a2c      	ldr	r2, [pc, #176]	@ (8007a30 <TIM_OC1_SetConfig+0x110>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d00b      	beq.n	800799c <TIM_OC1_SetConfig+0x7c>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a2b      	ldr	r2, [pc, #172]	@ (8007a34 <TIM_OC1_SetConfig+0x114>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d007      	beq.n	800799c <TIM_OC1_SetConfig+0x7c>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a2a      	ldr	r2, [pc, #168]	@ (8007a38 <TIM_OC1_SetConfig+0x118>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d003      	beq.n	800799c <TIM_OC1_SetConfig+0x7c>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a29      	ldr	r2, [pc, #164]	@ (8007a3c <TIM_OC1_SetConfig+0x11c>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d10c      	bne.n	80079b6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	f023 0308 	bic.w	r3, r3, #8
 80079a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f023 0304 	bic.w	r3, r3, #4
 80079b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a1c      	ldr	r2, [pc, #112]	@ (8007a2c <TIM_OC1_SetConfig+0x10c>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d00f      	beq.n	80079de <TIM_OC1_SetConfig+0xbe>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007a30 <TIM_OC1_SetConfig+0x110>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d00b      	beq.n	80079de <TIM_OC1_SetConfig+0xbe>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a1a      	ldr	r2, [pc, #104]	@ (8007a34 <TIM_OC1_SetConfig+0x114>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d007      	beq.n	80079de <TIM_OC1_SetConfig+0xbe>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a19      	ldr	r2, [pc, #100]	@ (8007a38 <TIM_OC1_SetConfig+0x118>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d003      	beq.n	80079de <TIM_OC1_SetConfig+0xbe>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a18      	ldr	r2, [pc, #96]	@ (8007a3c <TIM_OC1_SetConfig+0x11c>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d111      	bne.n	8007a02 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80079ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	693a      	ldr	r2, [r7, #16]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	685a      	ldr	r2, [r3, #4]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	621a      	str	r2, [r3, #32]
}
 8007a1c:	bf00      	nop
 8007a1e:	371c      	adds	r7, #28
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	fffeff8f 	.word	0xfffeff8f
 8007a2c:	40010000 	.word	0x40010000
 8007a30:	40010400 	.word	0x40010400
 8007a34:	40014000 	.word	0x40014000
 8007a38:	40014400 	.word	0x40014400
 8007a3c:	40014800 	.word	0x40014800

08007a40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a1b      	ldr	r3, [r3, #32]
 8007a54:	f023 0210 	bic.w	r2, r3, #16
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	4b34      	ldr	r3, [pc, #208]	@ (8007b3c <TIM_OC2_SetConfig+0xfc>)
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	021b      	lsls	r3, r3, #8
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	f023 0320 	bic.w	r3, r3, #32
 8007a8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	011b      	lsls	r3, r3, #4
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a29      	ldr	r2, [pc, #164]	@ (8007b40 <TIM_OC2_SetConfig+0x100>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d003      	beq.n	8007aa8 <TIM_OC2_SetConfig+0x68>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a28      	ldr	r2, [pc, #160]	@ (8007b44 <TIM_OC2_SetConfig+0x104>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d10d      	bne.n	8007ac4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007aae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	011b      	lsls	r3, r3, #4
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ac2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8007b40 <TIM_OC2_SetConfig+0x100>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d00f      	beq.n	8007aec <TIM_OC2_SetConfig+0xac>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a1d      	ldr	r2, [pc, #116]	@ (8007b44 <TIM_OC2_SetConfig+0x104>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d00b      	beq.n	8007aec <TIM_OC2_SetConfig+0xac>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8007b48 <TIM_OC2_SetConfig+0x108>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d007      	beq.n	8007aec <TIM_OC2_SetConfig+0xac>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a1b      	ldr	r2, [pc, #108]	@ (8007b4c <TIM_OC2_SetConfig+0x10c>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d003      	beq.n	8007aec <TIM_OC2_SetConfig+0xac>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8007b50 <TIM_OC2_SetConfig+0x110>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d113      	bne.n	8007b14 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007af2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007afa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	621a      	str	r2, [r3, #32]
}
 8007b2e:	bf00      	nop
 8007b30:	371c      	adds	r7, #28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	feff8fff 	.word	0xfeff8fff
 8007b40:	40010000 	.word	0x40010000
 8007b44:	40010400 	.word	0x40010400
 8007b48:	40014000 	.word	0x40014000
 8007b4c:	40014400 	.word	0x40014400
 8007b50:	40014800 	.word	0x40014800

08007b54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b087      	sub	sp, #28
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	69db      	ldr	r3, [r3, #28]
 8007b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	4b33      	ldr	r3, [pc, #204]	@ (8007c4c <TIM_OC3_SetConfig+0xf8>)
 8007b80:	4013      	ands	r3, r2
 8007b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f023 0303 	bic.w	r3, r3, #3
 8007b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	021b      	lsls	r3, r3, #8
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a28      	ldr	r2, [pc, #160]	@ (8007c50 <TIM_OC3_SetConfig+0xfc>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d003      	beq.n	8007bba <TIM_OC3_SetConfig+0x66>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a27      	ldr	r2, [pc, #156]	@ (8007c54 <TIM_OC3_SetConfig+0x100>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d10d      	bne.n	8007bd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007bc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	021b      	lsls	r3, r3, #8
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007bd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8007c50 <TIM_OC3_SetConfig+0xfc>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d00f      	beq.n	8007bfe <TIM_OC3_SetConfig+0xaa>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a1c      	ldr	r2, [pc, #112]	@ (8007c54 <TIM_OC3_SetConfig+0x100>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d00b      	beq.n	8007bfe <TIM_OC3_SetConfig+0xaa>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a1b      	ldr	r2, [pc, #108]	@ (8007c58 <TIM_OC3_SetConfig+0x104>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d007      	beq.n	8007bfe <TIM_OC3_SetConfig+0xaa>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a1a      	ldr	r2, [pc, #104]	@ (8007c5c <TIM_OC3_SetConfig+0x108>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d003      	beq.n	8007bfe <TIM_OC3_SetConfig+0xaa>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a19      	ldr	r2, [pc, #100]	@ (8007c60 <TIM_OC3_SetConfig+0x10c>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d113      	bne.n	8007c26 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	011b      	lsls	r3, r3, #4
 8007c14:	693a      	ldr	r2, [r7, #16]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	011b      	lsls	r3, r3, #4
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	621a      	str	r2, [r3, #32]
}
 8007c40:	bf00      	nop
 8007c42:	371c      	adds	r7, #28
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr
 8007c4c:	fffeff8f 	.word	0xfffeff8f
 8007c50:	40010000 	.word	0x40010000
 8007c54:	40010400 	.word	0x40010400
 8007c58:	40014000 	.word	0x40014000
 8007c5c:	40014400 	.word	0x40014400
 8007c60:	40014800 	.word	0x40014800

08007c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a1b      	ldr	r3, [r3, #32]
 8007c78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	4b24      	ldr	r3, [pc, #144]	@ (8007d20 <TIM_OC4_SetConfig+0xbc>)
 8007c90:	4013      	ands	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	021b      	lsls	r3, r3, #8
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	031b      	lsls	r3, r3, #12
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a19      	ldr	r2, [pc, #100]	@ (8007d24 <TIM_OC4_SetConfig+0xc0>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d00f      	beq.n	8007ce4 <TIM_OC4_SetConfig+0x80>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a18      	ldr	r2, [pc, #96]	@ (8007d28 <TIM_OC4_SetConfig+0xc4>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d00b      	beq.n	8007ce4 <TIM_OC4_SetConfig+0x80>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a17      	ldr	r2, [pc, #92]	@ (8007d2c <TIM_OC4_SetConfig+0xc8>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d007      	beq.n	8007ce4 <TIM_OC4_SetConfig+0x80>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a16      	ldr	r2, [pc, #88]	@ (8007d30 <TIM_OC4_SetConfig+0xcc>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d003      	beq.n	8007ce4 <TIM_OC4_SetConfig+0x80>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a15      	ldr	r2, [pc, #84]	@ (8007d34 <TIM_OC4_SetConfig+0xd0>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d109      	bne.n	8007cf8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007cea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	019b      	lsls	r3, r3, #6
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	693a      	ldr	r2, [r7, #16]
 8007d10:	621a      	str	r2, [r3, #32]
}
 8007d12:	bf00      	nop
 8007d14:	371c      	adds	r7, #28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	feff8fff 	.word	0xfeff8fff
 8007d24:	40010000 	.word	0x40010000
 8007d28:	40010400 	.word	0x40010400
 8007d2c:	40014000 	.word	0x40014000
 8007d30:	40014400 	.word	0x40014400
 8007d34:	40014800 	.word	0x40014800

08007d38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b087      	sub	sp, #28
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a1b      	ldr	r3, [r3, #32]
 8007d4c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	4b21      	ldr	r3, [pc, #132]	@ (8007de8 <TIM_OC5_SetConfig+0xb0>)
 8007d64:	4013      	ands	r3, r2
 8007d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007d78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	041b      	lsls	r3, r3, #16
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a18      	ldr	r2, [pc, #96]	@ (8007dec <TIM_OC5_SetConfig+0xb4>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d00f      	beq.n	8007dae <TIM_OC5_SetConfig+0x76>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a17      	ldr	r2, [pc, #92]	@ (8007df0 <TIM_OC5_SetConfig+0xb8>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d00b      	beq.n	8007dae <TIM_OC5_SetConfig+0x76>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a16      	ldr	r2, [pc, #88]	@ (8007df4 <TIM_OC5_SetConfig+0xbc>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d007      	beq.n	8007dae <TIM_OC5_SetConfig+0x76>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a15      	ldr	r2, [pc, #84]	@ (8007df8 <TIM_OC5_SetConfig+0xc0>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d003      	beq.n	8007dae <TIM_OC5_SetConfig+0x76>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a14      	ldr	r2, [pc, #80]	@ (8007dfc <TIM_OC5_SetConfig+0xc4>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d109      	bne.n	8007dc2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007db4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	021b      	lsls	r3, r3, #8
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	685a      	ldr	r2, [r3, #4]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	621a      	str	r2, [r3, #32]
}
 8007ddc:	bf00      	nop
 8007dde:	371c      	adds	r7, #28
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	fffeff8f 	.word	0xfffeff8f
 8007dec:	40010000 	.word	0x40010000
 8007df0:	40010400 	.word	0x40010400
 8007df4:	40014000 	.word	0x40014000
 8007df8:	40014400 	.word	0x40014400
 8007dfc:	40014800 	.word	0x40014800

08007e00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b087      	sub	sp, #28
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a1b      	ldr	r3, [r3, #32]
 8007e14:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	4b22      	ldr	r3, [pc, #136]	@ (8007eb4 <TIM_OC6_SetConfig+0xb4>)
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	021b      	lsls	r3, r3, #8
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007e42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	051b      	lsls	r3, r3, #20
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a19      	ldr	r2, [pc, #100]	@ (8007eb8 <TIM_OC6_SetConfig+0xb8>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d00f      	beq.n	8007e78 <TIM_OC6_SetConfig+0x78>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a18      	ldr	r2, [pc, #96]	@ (8007ebc <TIM_OC6_SetConfig+0xbc>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d00b      	beq.n	8007e78 <TIM_OC6_SetConfig+0x78>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a17      	ldr	r2, [pc, #92]	@ (8007ec0 <TIM_OC6_SetConfig+0xc0>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d007      	beq.n	8007e78 <TIM_OC6_SetConfig+0x78>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a16      	ldr	r2, [pc, #88]	@ (8007ec4 <TIM_OC6_SetConfig+0xc4>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d003      	beq.n	8007e78 <TIM_OC6_SetConfig+0x78>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a15      	ldr	r2, [pc, #84]	@ (8007ec8 <TIM_OC6_SetConfig+0xc8>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d109      	bne.n	8007e8c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	695b      	ldr	r3, [r3, #20]
 8007e84:	029b      	lsls	r3, r3, #10
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	685a      	ldr	r2, [r3, #4]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	621a      	str	r2, [r3, #32]
}
 8007ea6:	bf00      	nop
 8007ea8:	371c      	adds	r7, #28
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	feff8fff 	.word	0xfeff8fff
 8007eb8:	40010000 	.word	0x40010000
 8007ebc:	40010400 	.word	0x40010400
 8007ec0:	40014000 	.word	0x40014000
 8007ec4:	40014400 	.word	0x40014400
 8007ec8:	40014800 	.word	0x40014800

08007ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	f023 0201 	bic.w	r2, r3, #1
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	011b      	lsls	r3, r3, #4
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	f023 030a 	bic.w	r3, r3, #10
 8007f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	697a      	ldr	r2, [r7, #20]
 8007f1c:	621a      	str	r2, [r3, #32]
}
 8007f1e:	bf00      	nop
 8007f20:	371c      	adds	r7, #28
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b087      	sub	sp, #28
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	60f8      	str	r0, [r7, #12]
 8007f32:	60b9      	str	r1, [r7, #8]
 8007f34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6a1b      	ldr	r3, [r3, #32]
 8007f40:	f023 0210 	bic.w	r2, r3, #16
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	031b      	lsls	r3, r3, #12
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007f66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	011b      	lsls	r3, r3, #4
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	621a      	str	r2, [r3, #32]
}
 8007f7e:	bf00      	nop
 8007f80:	371c      	adds	r7, #28
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
	...

08007f8c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	4b09      	ldr	r3, [pc, #36]	@ (8007fc4 <TIM_ITRx_SetConfig+0x38>)
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fa4:	683a      	ldr	r2, [r7, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	f043 0307 	orr.w	r3, r3, #7
 8007fae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	609a      	str	r2, [r3, #8]
}
 8007fb6:	bf00      	nop
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	ffcfff8f 	.word	0xffcfff8f

08007fc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b087      	sub	sp, #28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
 8007fd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fe2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	021a      	lsls	r2, r3, #8
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	431a      	orrs	r2, r3
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	697a      	ldr	r2, [r7, #20]
 8007ffa:	609a      	str	r2, [r3, #8]
}
 8007ffc:	bf00      	nop
 8007ffe:	371c      	adds	r7, #28
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008008:	b480      	push	{r7}
 800800a:	b087      	sub	sp, #28
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	f003 031f 	and.w	r3, r3, #31
 800801a:	2201      	movs	r2, #1
 800801c:	fa02 f303 	lsl.w	r3, r2, r3
 8008020:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6a1a      	ldr	r2, [r3, #32]
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	43db      	mvns	r3, r3
 800802a:	401a      	ands	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6a1a      	ldr	r2, [r3, #32]
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	f003 031f 	and.w	r3, r3, #31
 800803a:	6879      	ldr	r1, [r7, #4]
 800803c:	fa01 f303 	lsl.w	r3, r1, r3
 8008040:	431a      	orrs	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	621a      	str	r2, [r3, #32]
}
 8008046:	bf00      	nop
 8008048:	371c      	adds	r7, #28
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
	...

08008054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008064:	2b01      	cmp	r3, #1
 8008066:	d101      	bne.n	800806c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008068:	2302      	movs	r3, #2
 800806a:	e06d      	b.n	8008148 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2202      	movs	r2, #2
 8008078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a30      	ldr	r2, [pc, #192]	@ (8008154 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d004      	beq.n	80080a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a2f      	ldr	r2, [pc, #188]	@ (8008158 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d108      	bne.n	80080b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80080a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a20      	ldr	r2, [pc, #128]	@ (8008154 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d022      	beq.n	800811c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080de:	d01d      	beq.n	800811c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a1d      	ldr	r2, [pc, #116]	@ (800815c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d018      	beq.n	800811c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a1c      	ldr	r2, [pc, #112]	@ (8008160 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d013      	beq.n	800811c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a1a      	ldr	r2, [pc, #104]	@ (8008164 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d00e      	beq.n	800811c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a15      	ldr	r2, [pc, #84]	@ (8008158 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d009      	beq.n	800811c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a16      	ldr	r2, [pc, #88]	@ (8008168 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d004      	beq.n	800811c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a15      	ldr	r2, [pc, #84]	@ (800816c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d10c      	bne.n	8008136 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008122:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	4313      	orrs	r3, r2
 800812c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3714      	adds	r7, #20
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr
 8008154:	40010000 	.word	0x40010000
 8008158:	40010400 	.word	0x40010400
 800815c:	40000400 	.word	0x40000400
 8008160:	40000800 	.word	0x40000800
 8008164:	40000c00 	.word	0x40000c00
 8008168:	40001800 	.word	0x40001800
 800816c:	40014000 	.word	0x40014000

08008170 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800817a:	2300      	movs	r3, #0
 800817c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008184:	2b01      	cmp	r3, #1
 8008186:	d101      	bne.n	800818c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008188:	2302      	movs	r3, #2
 800818a:	e065      	b.n	8008258 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	4313      	orrs	r3, r2
 80081a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	695b      	ldr	r3, [r3, #20]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f2:	4313      	orrs	r3, r2
 80081f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	041b      	lsls	r3, r3, #16
 8008202:	4313      	orrs	r3, r2
 8008204:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a16      	ldr	r2, [pc, #88]	@ (8008264 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d004      	beq.n	800821a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a14      	ldr	r2, [pc, #80]	@ (8008268 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d115      	bne.n	8008246 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008224:	051b      	lsls	r3, r3, #20
 8008226:	4313      	orrs	r3, r2
 8008228:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	69db      	ldr	r3, [r3, #28]
 8008234:	4313      	orrs	r3, r2
 8008236:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	4313      	orrs	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3714      	adds	r7, #20
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr
 8008264:	40010000 	.word	0x40010000
 8008268:	40010400 	.word	0x40010400

0800826c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <memset>:
 80082a8:	4402      	add	r2, r0
 80082aa:	4603      	mov	r3, r0
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d100      	bne.n	80082b2 <memset+0xa>
 80082b0:	4770      	bx	lr
 80082b2:	f803 1b01 	strb.w	r1, [r3], #1
 80082b6:	e7f9      	b.n	80082ac <memset+0x4>

080082b8 <__libc_init_array>:
 80082b8:	b570      	push	{r4, r5, r6, lr}
 80082ba:	4d0d      	ldr	r5, [pc, #52]	@ (80082f0 <__libc_init_array+0x38>)
 80082bc:	4c0d      	ldr	r4, [pc, #52]	@ (80082f4 <__libc_init_array+0x3c>)
 80082be:	1b64      	subs	r4, r4, r5
 80082c0:	10a4      	asrs	r4, r4, #2
 80082c2:	2600      	movs	r6, #0
 80082c4:	42a6      	cmp	r6, r4
 80082c6:	d109      	bne.n	80082dc <__libc_init_array+0x24>
 80082c8:	4d0b      	ldr	r5, [pc, #44]	@ (80082f8 <__libc_init_array+0x40>)
 80082ca:	4c0c      	ldr	r4, [pc, #48]	@ (80082fc <__libc_init_array+0x44>)
 80082cc:	f000 fde4 	bl	8008e98 <_init>
 80082d0:	1b64      	subs	r4, r4, r5
 80082d2:	10a4      	asrs	r4, r4, #2
 80082d4:	2600      	movs	r6, #0
 80082d6:	42a6      	cmp	r6, r4
 80082d8:	d105      	bne.n	80082e6 <__libc_init_array+0x2e>
 80082da:	bd70      	pop	{r4, r5, r6, pc}
 80082dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80082e0:	4798      	blx	r3
 80082e2:	3601      	adds	r6, #1
 80082e4:	e7ee      	b.n	80082c4 <__libc_init_array+0xc>
 80082e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ea:	4798      	blx	r3
 80082ec:	3601      	adds	r6, #1
 80082ee:	e7f2      	b.n	80082d6 <__libc_init_array+0x1e>
 80082f0:	08009098 	.word	0x08009098
 80082f4:	08009098 	.word	0x08009098
 80082f8:	08009098 	.word	0x08009098
 80082fc:	0800909c 	.word	0x0800909c

08008300 <sin>:
 8008300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008302:	eeb0 7b40 	vmov.f64	d7, d0
 8008306:	ee17 3a90 	vmov	r3, s15
 800830a:	4a21      	ldr	r2, [pc, #132]	@ (8008390 <sin+0x90>)
 800830c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008310:	4293      	cmp	r3, r2
 8008312:	d807      	bhi.n	8008324 <sin+0x24>
 8008314:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8008388 <sin+0x88>
 8008318:	2000      	movs	r0, #0
 800831a:	b005      	add	sp, #20
 800831c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008320:	f000 b8a2 	b.w	8008468 <__kernel_sin>
 8008324:	4a1b      	ldr	r2, [pc, #108]	@ (8008394 <sin+0x94>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d904      	bls.n	8008334 <sin+0x34>
 800832a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800832e:	b005      	add	sp, #20
 8008330:	f85d fb04 	ldr.w	pc, [sp], #4
 8008334:	4668      	mov	r0, sp
 8008336:	f000 f8ef 	bl	8008518 <__ieee754_rem_pio2>
 800833a:	f000 0003 	and.w	r0, r0, #3
 800833e:	2801      	cmp	r0, #1
 8008340:	d00a      	beq.n	8008358 <sin+0x58>
 8008342:	2802      	cmp	r0, #2
 8008344:	d00f      	beq.n	8008366 <sin+0x66>
 8008346:	b9c0      	cbnz	r0, 800837a <sin+0x7a>
 8008348:	ed9d 1b02 	vldr	d1, [sp, #8]
 800834c:	ed9d 0b00 	vldr	d0, [sp]
 8008350:	2001      	movs	r0, #1
 8008352:	f000 f889 	bl	8008468 <__kernel_sin>
 8008356:	e7ea      	b.n	800832e <sin+0x2e>
 8008358:	ed9d 1b02 	vldr	d1, [sp, #8]
 800835c:	ed9d 0b00 	vldr	d0, [sp]
 8008360:	f000 f81a 	bl	8008398 <__kernel_cos>
 8008364:	e7e3      	b.n	800832e <sin+0x2e>
 8008366:	ed9d 1b02 	vldr	d1, [sp, #8]
 800836a:	ed9d 0b00 	vldr	d0, [sp]
 800836e:	2001      	movs	r0, #1
 8008370:	f000 f87a 	bl	8008468 <__kernel_sin>
 8008374:	eeb1 0b40 	vneg.f64	d0, d0
 8008378:	e7d9      	b.n	800832e <sin+0x2e>
 800837a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800837e:	ed9d 0b00 	vldr	d0, [sp]
 8008382:	f000 f809 	bl	8008398 <__kernel_cos>
 8008386:	e7f5      	b.n	8008374 <sin+0x74>
	...
 8008390:	3fe921fb 	.word	0x3fe921fb
 8008394:	7fefffff 	.word	0x7fefffff

08008398 <__kernel_cos>:
 8008398:	eeb0 5b40 	vmov.f64	d5, d0
 800839c:	ee15 1a90 	vmov	r1, s11
 80083a0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80083a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80083a8:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 80083ac:	d204      	bcs.n	80083b8 <__kernel_cos+0x20>
 80083ae:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 80083b2:	ee17 3a90 	vmov	r3, s15
 80083b6:	b343      	cbz	r3, 800840a <__kernel_cos+0x72>
 80083b8:	ee25 6b05 	vmul.f64	d6, d5, d5
 80083bc:	ee21 1b45 	vnmul.f64	d1, d1, d5
 80083c0:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8008430 <__kernel_cos+0x98>
 80083c4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8008438 <__kernel_cos+0xa0>
 80083c8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80083cc:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8008440 <__kernel_cos+0xa8>
 80083d0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80083d4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8008448 <__kernel_cos+0xb0>
 80083d8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80083dc:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8008450 <__kernel_cos+0xb8>
 80083e0:	4b1f      	ldr	r3, [pc, #124]	@ (8008460 <__kernel_cos+0xc8>)
 80083e2:	eea4 7b06 	vfma.f64	d7, d4, d6
 80083e6:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8008458 <__kernel_cos+0xc0>
 80083ea:	4299      	cmp	r1, r3
 80083ec:	eea7 4b06 	vfma.f64	d4, d7, d6
 80083f0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80083f4:	ee24 4b06 	vmul.f64	d4, d4, d6
 80083f8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80083fc:	eea6 1b04 	vfma.f64	d1, d6, d4
 8008400:	d804      	bhi.n	800840c <__kernel_cos+0x74>
 8008402:	ee37 7b41 	vsub.f64	d7, d7, d1
 8008406:	ee30 0b47 	vsub.f64	d0, d0, d7
 800840a:	4770      	bx	lr
 800840c:	4b15      	ldr	r3, [pc, #84]	@ (8008464 <__kernel_cos+0xcc>)
 800840e:	4299      	cmp	r1, r3
 8008410:	d809      	bhi.n	8008426 <__kernel_cos+0x8e>
 8008412:	2200      	movs	r2, #0
 8008414:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8008418:	ec43 2b16 	vmov	d6, r2, r3
 800841c:	ee30 0b46 	vsub.f64	d0, d0, d6
 8008420:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008424:	e7ed      	b.n	8008402 <__kernel_cos+0x6a>
 8008426:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800842a:	e7f7      	b.n	800841c <__kernel_cos+0x84>
 800842c:	f3af 8000 	nop.w
 8008430:	be8838d4 	.word	0xbe8838d4
 8008434:	bda8fae9 	.word	0xbda8fae9
 8008438:	bdb4b1c4 	.word	0xbdb4b1c4
 800843c:	3e21ee9e 	.word	0x3e21ee9e
 8008440:	809c52ad 	.word	0x809c52ad
 8008444:	be927e4f 	.word	0xbe927e4f
 8008448:	19cb1590 	.word	0x19cb1590
 800844c:	3efa01a0 	.word	0x3efa01a0
 8008450:	16c15177 	.word	0x16c15177
 8008454:	bf56c16c 	.word	0xbf56c16c
 8008458:	5555554c 	.word	0x5555554c
 800845c:	3fa55555 	.word	0x3fa55555
 8008460:	3fd33332 	.word	0x3fd33332
 8008464:	3fe90000 	.word	0x3fe90000

08008468 <__kernel_sin>:
 8008468:	ee10 3a90 	vmov	r3, s1
 800846c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008470:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8008474:	d204      	bcs.n	8008480 <__kernel_sin+0x18>
 8008476:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800847a:	ee17 3a90 	vmov	r3, s15
 800847e:	b35b      	cbz	r3, 80084d8 <__kernel_sin+0x70>
 8008480:	ee20 6b00 	vmul.f64	d6, d0, d0
 8008484:	ee20 5b06 	vmul.f64	d5, d0, d6
 8008488:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 80084e0 <__kernel_sin+0x78>
 800848c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80084e8 <__kernel_sin+0x80>
 8008490:	eea6 4b07 	vfma.f64	d4, d6, d7
 8008494:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80084f0 <__kernel_sin+0x88>
 8008498:	eea4 7b06 	vfma.f64	d7, d4, d6
 800849c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80084f8 <__kernel_sin+0x90>
 80084a0:	eea7 4b06 	vfma.f64	d4, d7, d6
 80084a4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8008500 <__kernel_sin+0x98>
 80084a8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80084ac:	b930      	cbnz	r0, 80084bc <__kernel_sin+0x54>
 80084ae:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8008508 <__kernel_sin+0xa0>
 80084b2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80084b6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80084ba:	4770      	bx	lr
 80084bc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80084c0:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 80084c4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80084c8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80084cc:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8008510 <__kernel_sin+0xa8>
 80084d0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80084d4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	f3af 8000 	nop.w
 80084e0:	5acfd57c 	.word	0x5acfd57c
 80084e4:	3de5d93a 	.word	0x3de5d93a
 80084e8:	8a2b9ceb 	.word	0x8a2b9ceb
 80084ec:	be5ae5e6 	.word	0xbe5ae5e6
 80084f0:	57b1fe7d 	.word	0x57b1fe7d
 80084f4:	3ec71de3 	.word	0x3ec71de3
 80084f8:	19c161d5 	.word	0x19c161d5
 80084fc:	bf2a01a0 	.word	0xbf2a01a0
 8008500:	1110f8a6 	.word	0x1110f8a6
 8008504:	3f811111 	.word	0x3f811111
 8008508:	55555549 	.word	0x55555549
 800850c:	bfc55555 	.word	0xbfc55555
 8008510:	55555549 	.word	0x55555549
 8008514:	3fc55555 	.word	0x3fc55555

08008518 <__ieee754_rem_pio2>:
 8008518:	b570      	push	{r4, r5, r6, lr}
 800851a:	eeb0 7b40 	vmov.f64	d7, d0
 800851e:	ee17 5a90 	vmov	r5, s15
 8008522:	4b99      	ldr	r3, [pc, #612]	@ (8008788 <__ieee754_rem_pio2+0x270>)
 8008524:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8008528:	429e      	cmp	r6, r3
 800852a:	b088      	sub	sp, #32
 800852c:	4604      	mov	r4, r0
 800852e:	d807      	bhi.n	8008540 <__ieee754_rem_pio2+0x28>
 8008530:	2200      	movs	r2, #0
 8008532:	2300      	movs	r3, #0
 8008534:	ed84 0b00 	vstr	d0, [r4]
 8008538:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800853c:	2000      	movs	r0, #0
 800853e:	e01b      	b.n	8008578 <__ieee754_rem_pio2+0x60>
 8008540:	4b92      	ldr	r3, [pc, #584]	@ (800878c <__ieee754_rem_pio2+0x274>)
 8008542:	429e      	cmp	r6, r3
 8008544:	d83b      	bhi.n	80085be <__ieee754_rem_pio2+0xa6>
 8008546:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800854a:	2d00      	cmp	r5, #0
 800854c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8008748 <__ieee754_rem_pio2+0x230>
 8008550:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8008554:	dd19      	ble.n	800858a <__ieee754_rem_pio2+0x72>
 8008556:	ee30 7b46 	vsub.f64	d7, d0, d6
 800855a:	429e      	cmp	r6, r3
 800855c:	d00e      	beq.n	800857c <__ieee754_rem_pio2+0x64>
 800855e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8008750 <__ieee754_rem_pio2+0x238>
 8008562:	ee37 6b45 	vsub.f64	d6, d7, d5
 8008566:	ee37 7b46 	vsub.f64	d7, d7, d6
 800856a:	ed84 6b00 	vstr	d6, [r4]
 800856e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008572:	ed84 7b02 	vstr	d7, [r4, #8]
 8008576:	2001      	movs	r0, #1
 8008578:	b008      	add	sp, #32
 800857a:	bd70      	pop	{r4, r5, r6, pc}
 800857c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8008758 <__ieee754_rem_pio2+0x240>
 8008580:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8008760 <__ieee754_rem_pio2+0x248>
 8008584:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008588:	e7eb      	b.n	8008562 <__ieee754_rem_pio2+0x4a>
 800858a:	429e      	cmp	r6, r3
 800858c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8008590:	d00e      	beq.n	80085b0 <__ieee754_rem_pio2+0x98>
 8008592:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8008750 <__ieee754_rem_pio2+0x238>
 8008596:	ee37 6b05 	vadd.f64	d6, d7, d5
 800859a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800859e:	ed84 6b00 	vstr	d6, [r4]
 80085a2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80085a6:	f04f 30ff 	mov.w	r0, #4294967295
 80085aa:	ed84 7b02 	vstr	d7, [r4, #8]
 80085ae:	e7e3      	b.n	8008578 <__ieee754_rem_pio2+0x60>
 80085b0:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8008758 <__ieee754_rem_pio2+0x240>
 80085b4:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8008760 <__ieee754_rem_pio2+0x248>
 80085b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80085bc:	e7eb      	b.n	8008596 <__ieee754_rem_pio2+0x7e>
 80085be:	4b74      	ldr	r3, [pc, #464]	@ (8008790 <__ieee754_rem_pio2+0x278>)
 80085c0:	429e      	cmp	r6, r3
 80085c2:	d870      	bhi.n	80086a6 <__ieee754_rem_pio2+0x18e>
 80085c4:	f000 f8ec 	bl	80087a0 <fabs>
 80085c8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80085cc:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8008768 <__ieee754_rem_pio2+0x250>
 80085d0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80085d4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80085d8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80085dc:	ee17 0a90 	vmov	r0, s15
 80085e0:	eeb1 4b45 	vneg.f64	d4, d5
 80085e4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8008748 <__ieee754_rem_pio2+0x230>
 80085e8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80085ec:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8008750 <__ieee754_rem_pio2+0x238>
 80085f0:	281f      	cmp	r0, #31
 80085f2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80085f6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80085fa:	dc05      	bgt.n	8008608 <__ieee754_rem_pio2+0xf0>
 80085fc:	4b65      	ldr	r3, [pc, #404]	@ (8008794 <__ieee754_rem_pio2+0x27c>)
 80085fe:	1e42      	subs	r2, r0, #1
 8008600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008604:	42b3      	cmp	r3, r6
 8008606:	d109      	bne.n	800861c <__ieee754_rem_pio2+0x104>
 8008608:	ee16 3a90 	vmov	r3, s13
 800860c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8008610:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8008614:	2b10      	cmp	r3, #16
 8008616:	ea4f 5226 	mov.w	r2, r6, asr #20
 800861a:	dc02      	bgt.n	8008622 <__ieee754_rem_pio2+0x10a>
 800861c:	ed84 6b00 	vstr	d6, [r4]
 8008620:	e01a      	b.n	8008658 <__ieee754_rem_pio2+0x140>
 8008622:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8008758 <__ieee754_rem_pio2+0x240>
 8008626:	eeb0 6b40 	vmov.f64	d6, d0
 800862a:	eea4 6b03 	vfma.f64	d6, d4, d3
 800862e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8008632:	eea4 7b03 	vfma.f64	d7, d4, d3
 8008636:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8008760 <__ieee754_rem_pio2+0x248>
 800863a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800863e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8008642:	ee13 3a90 	vmov	r3, s7
 8008646:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	2b31      	cmp	r3, #49	@ 0x31
 800864e:	dc17      	bgt.n	8008680 <__ieee754_rem_pio2+0x168>
 8008650:	eeb0 0b46 	vmov.f64	d0, d6
 8008654:	ed84 3b00 	vstr	d3, [r4]
 8008658:	ed94 6b00 	vldr	d6, [r4]
 800865c:	2d00      	cmp	r5, #0
 800865e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8008662:	ee30 0b47 	vsub.f64	d0, d0, d7
 8008666:	ed84 0b02 	vstr	d0, [r4, #8]
 800866a:	da85      	bge.n	8008578 <__ieee754_rem_pio2+0x60>
 800866c:	eeb1 6b46 	vneg.f64	d6, d6
 8008670:	eeb1 0b40 	vneg.f64	d0, d0
 8008674:	ed84 6b00 	vstr	d6, [r4]
 8008678:	ed84 0b02 	vstr	d0, [r4, #8]
 800867c:	4240      	negs	r0, r0
 800867e:	e77b      	b.n	8008578 <__ieee754_rem_pio2+0x60>
 8008680:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8008770 <__ieee754_rem_pio2+0x258>
 8008684:	eeb0 0b46 	vmov.f64	d0, d6
 8008688:	eea4 0b07 	vfma.f64	d0, d4, d7
 800868c:	ee36 6b40 	vsub.f64	d6, d6, d0
 8008690:	eea4 6b07 	vfma.f64	d6, d4, d7
 8008694:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8008778 <__ieee754_rem_pio2+0x260>
 8008698:	eeb0 7b46 	vmov.f64	d7, d6
 800869c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 80086a0:	ee30 6b47 	vsub.f64	d6, d0, d7
 80086a4:	e7ba      	b.n	800861c <__ieee754_rem_pio2+0x104>
 80086a6:	4b3c      	ldr	r3, [pc, #240]	@ (8008798 <__ieee754_rem_pio2+0x280>)
 80086a8:	429e      	cmp	r6, r3
 80086aa:	d906      	bls.n	80086ba <__ieee754_rem_pio2+0x1a2>
 80086ac:	ee30 7b40 	vsub.f64	d7, d0, d0
 80086b0:	ed80 7b02 	vstr	d7, [r0, #8]
 80086b4:	ed80 7b00 	vstr	d7, [r0]
 80086b8:	e740      	b.n	800853c <__ieee754_rem_pio2+0x24>
 80086ba:	ee10 3a10 	vmov	r3, s0
 80086be:	1532      	asrs	r2, r6, #20
 80086c0:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 80086c4:	4618      	mov	r0, r3
 80086c6:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80086ca:	ec41 0b17 	vmov	d7, r0, r1
 80086ce:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80086d2:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8008780 <__ieee754_rem_pio2+0x268>
 80086d6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80086da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80086de:	ed8d 6b02 	vstr	d6, [sp, #8]
 80086e2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80086e6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80086ea:	a808      	add	r0, sp, #32
 80086ec:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80086f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80086f4:	ed8d 6b04 	vstr	d6, [sp, #16]
 80086f8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80086fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008700:	2103      	movs	r1, #3
 8008702:	ed30 7b02 	vldmdb	r0!, {d7}
 8008706:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800870a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800870e:	460b      	mov	r3, r1
 8008710:	f101 31ff 	add.w	r1, r1, #4294967295
 8008714:	d0f5      	beq.n	8008702 <__ieee754_rem_pio2+0x1ea>
 8008716:	4921      	ldr	r1, [pc, #132]	@ (800879c <__ieee754_rem_pio2+0x284>)
 8008718:	9101      	str	r1, [sp, #4]
 800871a:	2102      	movs	r1, #2
 800871c:	9100      	str	r1, [sp, #0]
 800871e:	a802      	add	r0, sp, #8
 8008720:	4621      	mov	r1, r4
 8008722:	f000 f845 	bl	80087b0 <__kernel_rem_pio2>
 8008726:	2d00      	cmp	r5, #0
 8008728:	f6bf af26 	bge.w	8008578 <__ieee754_rem_pio2+0x60>
 800872c:	ed94 7b00 	vldr	d7, [r4]
 8008730:	eeb1 7b47 	vneg.f64	d7, d7
 8008734:	ed84 7b00 	vstr	d7, [r4]
 8008738:	ed94 7b02 	vldr	d7, [r4, #8]
 800873c:	eeb1 7b47 	vneg.f64	d7, d7
 8008740:	ed84 7b02 	vstr	d7, [r4, #8]
 8008744:	e79a      	b.n	800867c <__ieee754_rem_pio2+0x164>
 8008746:	bf00      	nop
 8008748:	54400000 	.word	0x54400000
 800874c:	3ff921fb 	.word	0x3ff921fb
 8008750:	1a626331 	.word	0x1a626331
 8008754:	3dd0b461 	.word	0x3dd0b461
 8008758:	1a600000 	.word	0x1a600000
 800875c:	3dd0b461 	.word	0x3dd0b461
 8008760:	2e037073 	.word	0x2e037073
 8008764:	3ba3198a 	.word	0x3ba3198a
 8008768:	6dc9c883 	.word	0x6dc9c883
 800876c:	3fe45f30 	.word	0x3fe45f30
 8008770:	2e000000 	.word	0x2e000000
 8008774:	3ba3198a 	.word	0x3ba3198a
 8008778:	252049c1 	.word	0x252049c1
 800877c:	397b839a 	.word	0x397b839a
 8008780:	00000000 	.word	0x00000000
 8008784:	41700000 	.word	0x41700000
 8008788:	3fe921fb 	.word	0x3fe921fb
 800878c:	4002d97b 	.word	0x4002d97b
 8008790:	413921fb 	.word	0x413921fb
 8008794:	08008ec0 	.word	0x08008ec0
 8008798:	7fefffff 	.word	0x7fefffff
 800879c:	08008f40 	.word	0x08008f40

080087a0 <fabs>:
 80087a0:	ec51 0b10 	vmov	r0, r1, d0
 80087a4:	4602      	mov	r2, r0
 80087a6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80087aa:	ec43 2b10 	vmov	d0, r2, r3
 80087ae:	4770      	bx	lr

080087b0 <__kernel_rem_pio2>:
 80087b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b4:	ed2d 8b06 	vpush	{d8-d10}
 80087b8:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 80087bc:	469b      	mov	fp, r3
 80087be:	9001      	str	r0, [sp, #4]
 80087c0:	4bbb      	ldr	r3, [pc, #748]	@ (8008ab0 <__kernel_rem_pio2+0x300>)
 80087c2:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 80087c4:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 80087c8:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 80087cc:	f112 0f14 	cmn.w	r2, #20
 80087d0:	bfa8      	it	ge
 80087d2:	1ed3      	subge	r3, r2, #3
 80087d4:	f10b 3aff 	add.w	sl, fp, #4294967295
 80087d8:	bfb8      	it	lt
 80087da:	2300      	movlt	r3, #0
 80087dc:	f06f 0517 	mvn.w	r5, #23
 80087e0:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8008a98 <__kernel_rem_pio2+0x2e8>
 80087e4:	bfa4      	itt	ge
 80087e6:	2018      	movge	r0, #24
 80087e8:	fb93 f3f0 	sdivge	r3, r3, r0
 80087ec:	fb03 5505 	mla	r5, r3, r5, r5
 80087f0:	eba3 040a 	sub.w	r4, r3, sl
 80087f4:	4415      	add	r5, r2
 80087f6:	460f      	mov	r7, r1
 80087f8:	eb09 060a 	add.w	r6, r9, sl
 80087fc:	a81a      	add	r0, sp, #104	@ 0x68
 80087fe:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8008802:	2200      	movs	r2, #0
 8008804:	42b2      	cmp	r2, r6
 8008806:	dd0e      	ble.n	8008826 <__kernel_rem_pio2+0x76>
 8008808:	aa1a      	add	r2, sp, #104	@ 0x68
 800880a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800880e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 8008812:	2600      	movs	r6, #0
 8008814:	454e      	cmp	r6, r9
 8008816:	dc25      	bgt.n	8008864 <__kernel_rem_pio2+0xb4>
 8008818:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8008a98 <__kernel_rem_pio2+0x2e8>
 800881c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008820:	4614      	mov	r4, r2
 8008822:	2000      	movs	r0, #0
 8008824:	e015      	b.n	8008852 <__kernel_rem_pio2+0xa2>
 8008826:	42d4      	cmn	r4, r2
 8008828:	d409      	bmi.n	800883e <__kernel_rem_pio2+0x8e>
 800882a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800882e:	ee07 1a90 	vmov	s15, r1
 8008832:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008836:	eca0 7b02 	vstmia	r0!, {d7}
 800883a:	3201      	adds	r2, #1
 800883c:	e7e2      	b.n	8008804 <__kernel_rem_pio2+0x54>
 800883e:	eeb0 7b46 	vmov.f64	d7, d6
 8008842:	e7f8      	b.n	8008836 <__kernel_rem_pio2+0x86>
 8008844:	ecbc 5b02 	vldmia	ip!, {d5}
 8008848:	ed94 6b00 	vldr	d6, [r4]
 800884c:	3001      	adds	r0, #1
 800884e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008852:	4550      	cmp	r0, sl
 8008854:	f1a4 0408 	sub.w	r4, r4, #8
 8008858:	ddf4      	ble.n	8008844 <__kernel_rem_pio2+0x94>
 800885a:	ecae 7b02 	vstmia	lr!, {d7}
 800885e:	3601      	adds	r6, #1
 8008860:	3208      	adds	r2, #8
 8008862:	e7d7      	b.n	8008814 <__kernel_rem_pio2+0x64>
 8008864:	aa06      	add	r2, sp, #24
 8008866:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8008aa0 <__kernel_rem_pio2+0x2f0>
 800886a:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8008aa8 <__kernel_rem_pio2+0x2f8>
 800886e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8008872:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8008876:	9203      	str	r2, [sp, #12]
 8008878:	9302      	str	r3, [sp, #8]
 800887a:	464c      	mov	r4, r9
 800887c:	00e3      	lsls	r3, r4, #3
 800887e:	9304      	str	r3, [sp, #16]
 8008880:	ab92      	add	r3, sp, #584	@ 0x248
 8008882:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008886:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800888a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800888c:	ab06      	add	r3, sp, #24
 800888e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8008892:	461e      	mov	r6, r3
 8008894:	4620      	mov	r0, r4
 8008896:	2800      	cmp	r0, #0
 8008898:	f1a2 0208 	sub.w	r2, r2, #8
 800889c:	dc4a      	bgt.n	8008934 <__kernel_rem_pio2+0x184>
 800889e:	4628      	mov	r0, r5
 80088a0:	9305      	str	r3, [sp, #20]
 80088a2:	f000 fa01 	bl	8008ca8 <scalbn>
 80088a6:	eeb0 8b40 	vmov.f64	d8, d0
 80088aa:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 80088ae:	ee28 0b00 	vmul.f64	d0, d8, d0
 80088b2:	f000 fa79 	bl	8008da8 <floor>
 80088b6:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 80088ba:	eea0 8b47 	vfms.f64	d8, d0, d7
 80088be:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80088c2:	2d00      	cmp	r5, #0
 80088c4:	ee17 8a90 	vmov	r8, s15
 80088c8:	9b05      	ldr	r3, [sp, #20]
 80088ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80088ce:	ee38 8b47 	vsub.f64	d8, d8, d7
 80088d2:	dd41      	ble.n	8008958 <__kernel_rem_pio2+0x1a8>
 80088d4:	1e60      	subs	r0, r4, #1
 80088d6:	aa06      	add	r2, sp, #24
 80088d8:	f1c5 0c18 	rsb	ip, r5, #24
 80088dc:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80088e0:	fa46 f20c 	asr.w	r2, r6, ip
 80088e4:	4490      	add	r8, r2
 80088e6:	fa02 f20c 	lsl.w	r2, r2, ip
 80088ea:	1ab6      	subs	r6, r6, r2
 80088ec:	aa06      	add	r2, sp, #24
 80088ee:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 80088f2:	f1c5 0217 	rsb	r2, r5, #23
 80088f6:	4116      	asrs	r6, r2
 80088f8:	2e00      	cmp	r6, #0
 80088fa:	dd3c      	ble.n	8008976 <__kernel_rem_pio2+0x1c6>
 80088fc:	f04f 0c00 	mov.w	ip, #0
 8008900:	f108 0801 	add.w	r8, r8, #1
 8008904:	4660      	mov	r0, ip
 8008906:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800890a:	4564      	cmp	r4, ip
 800890c:	dc66      	bgt.n	80089dc <__kernel_rem_pio2+0x22c>
 800890e:	2d00      	cmp	r5, #0
 8008910:	dd03      	ble.n	800891a <__kernel_rem_pio2+0x16a>
 8008912:	2d01      	cmp	r5, #1
 8008914:	d072      	beq.n	80089fc <__kernel_rem_pio2+0x24c>
 8008916:	2d02      	cmp	r5, #2
 8008918:	d07a      	beq.n	8008a10 <__kernel_rem_pio2+0x260>
 800891a:	2e02      	cmp	r6, #2
 800891c:	d12b      	bne.n	8008976 <__kernel_rem_pio2+0x1c6>
 800891e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8008922:	ee30 8b48 	vsub.f64	d8, d0, d8
 8008926:	b330      	cbz	r0, 8008976 <__kernel_rem_pio2+0x1c6>
 8008928:	4628      	mov	r0, r5
 800892a:	f000 f9bd 	bl	8008ca8 <scalbn>
 800892e:	ee38 8b40 	vsub.f64	d8, d8, d0
 8008932:	e020      	b.n	8008976 <__kernel_rem_pio2+0x1c6>
 8008934:	ee20 7b09 	vmul.f64	d7, d0, d9
 8008938:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800893c:	3801      	subs	r0, #1
 800893e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8008942:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8008946:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800894a:	eca6 0a01 	vstmia	r6!, {s0}
 800894e:	ed92 0b00 	vldr	d0, [r2]
 8008952:	ee37 0b00 	vadd.f64	d0, d7, d0
 8008956:	e79e      	b.n	8008896 <__kernel_rem_pio2+0xe6>
 8008958:	d105      	bne.n	8008966 <__kernel_rem_pio2+0x1b6>
 800895a:	1e62      	subs	r2, r4, #1
 800895c:	a906      	add	r1, sp, #24
 800895e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8008962:	15f6      	asrs	r6, r6, #23
 8008964:	e7c8      	b.n	80088f8 <__kernel_rem_pio2+0x148>
 8008966:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800896a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800896e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008972:	da31      	bge.n	80089d8 <__kernel_rem_pio2+0x228>
 8008974:	2600      	movs	r6, #0
 8008976:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800897a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800897e:	f040 809b 	bne.w	8008ab8 <__kernel_rem_pio2+0x308>
 8008982:	1e62      	subs	r2, r4, #1
 8008984:	2000      	movs	r0, #0
 8008986:	454a      	cmp	r2, r9
 8008988:	da49      	bge.n	8008a1e <__kernel_rem_pio2+0x26e>
 800898a:	2800      	cmp	r0, #0
 800898c:	d062      	beq.n	8008a54 <__kernel_rem_pio2+0x2a4>
 800898e:	3c01      	subs	r4, #1
 8008990:	ab06      	add	r3, sp, #24
 8008992:	3d18      	subs	r5, #24
 8008994:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d0f8      	beq.n	800898e <__kernel_rem_pio2+0x1de>
 800899c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80089a0:	4628      	mov	r0, r5
 80089a2:	f000 f981 	bl	8008ca8 <scalbn>
 80089a6:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8008aa0 <__kernel_rem_pio2+0x2f0>
 80089aa:	1c62      	adds	r2, r4, #1
 80089ac:	a96a      	add	r1, sp, #424	@ 0x1a8
 80089ae:	00d3      	lsls	r3, r2, #3
 80089b0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80089b4:	4622      	mov	r2, r4
 80089b6:	2a00      	cmp	r2, #0
 80089b8:	f280 80a8 	bge.w	8008b0c <__kernel_rem_pio2+0x35c>
 80089bc:	4622      	mov	r2, r4
 80089be:	2a00      	cmp	r2, #0
 80089c0:	f2c0 80c6 	blt.w	8008b50 <__kernel_rem_pio2+0x3a0>
 80089c4:	a96a      	add	r1, sp, #424	@ 0x1a8
 80089c6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80089ca:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8008a98 <__kernel_rem_pio2+0x2e8>
 80089ce:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8008ab4 <__kernel_rem_pio2+0x304>
 80089d2:	2000      	movs	r0, #0
 80089d4:	1aa1      	subs	r1, r4, r2
 80089d6:	e0b0      	b.n	8008b3a <__kernel_rem_pio2+0x38a>
 80089d8:	2602      	movs	r6, #2
 80089da:	e78f      	b.n	80088fc <__kernel_rem_pio2+0x14c>
 80089dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80089e0:	b948      	cbnz	r0, 80089f6 <__kernel_rem_pio2+0x246>
 80089e2:	b122      	cbz	r2, 80089ee <__kernel_rem_pio2+0x23e>
 80089e4:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 80089e8:	f843 2c04 	str.w	r2, [r3, #-4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f10c 0c01 	add.w	ip, ip, #1
 80089f2:	4610      	mov	r0, r2
 80089f4:	e789      	b.n	800890a <__kernel_rem_pio2+0x15a>
 80089f6:	ebae 0202 	sub.w	r2, lr, r2
 80089fa:	e7f5      	b.n	80089e8 <__kernel_rem_pio2+0x238>
 80089fc:	1e62      	subs	r2, r4, #1
 80089fe:	ab06      	add	r3, sp, #24
 8008a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a04:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008a08:	a906      	add	r1, sp, #24
 8008a0a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008a0e:	e784      	b.n	800891a <__kernel_rem_pio2+0x16a>
 8008a10:	1e62      	subs	r2, r4, #1
 8008a12:	ab06      	add	r3, sp, #24
 8008a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a18:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008a1c:	e7f4      	b.n	8008a08 <__kernel_rem_pio2+0x258>
 8008a1e:	ab06      	add	r3, sp, #24
 8008a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a24:	3a01      	subs	r2, #1
 8008a26:	4318      	orrs	r0, r3
 8008a28:	e7ad      	b.n	8008986 <__kernel_rem_pio2+0x1d6>
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d0fa      	beq.n	8008a2a <__kernel_rem_pio2+0x27a>
 8008a34:	9a04      	ldr	r2, [sp, #16]
 8008a36:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 8008a3a:	446a      	add	r2, sp
 8008a3c:	eb04 000b 	add.w	r0, r4, fp
 8008a40:	a91a      	add	r1, sp, #104	@ 0x68
 8008a42:	1c66      	adds	r6, r4, #1
 8008a44:	3a98      	subs	r2, #152	@ 0x98
 8008a46:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8008a4a:	4423      	add	r3, r4
 8008a4c:	42b3      	cmp	r3, r6
 8008a4e:	da04      	bge.n	8008a5a <__kernel_rem_pio2+0x2aa>
 8008a50:	461c      	mov	r4, r3
 8008a52:	e713      	b.n	800887c <__kernel_rem_pio2+0xcc>
 8008a54:	9a03      	ldr	r2, [sp, #12]
 8008a56:	2301      	movs	r3, #1
 8008a58:	e7e8      	b.n	8008a2c <__kernel_rem_pio2+0x27c>
 8008a5a:	9902      	ldr	r1, [sp, #8]
 8008a5c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008a60:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8008a64:	9104      	str	r1, [sp, #16]
 8008a66:	ee07 1a90 	vmov	s15, r1
 8008a6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008a6e:	2400      	movs	r4, #0
 8008a70:	eca0 7b02 	vstmia	r0!, {d7}
 8008a74:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8008a98 <__kernel_rem_pio2+0x2e8>
 8008a78:	4686      	mov	lr, r0
 8008a7a:	4554      	cmp	r4, sl
 8008a7c:	dd03      	ble.n	8008a86 <__kernel_rem_pio2+0x2d6>
 8008a7e:	eca2 7b02 	vstmia	r2!, {d7}
 8008a82:	3601      	adds	r6, #1
 8008a84:	e7e2      	b.n	8008a4c <__kernel_rem_pio2+0x29c>
 8008a86:	ecbc 5b02 	vldmia	ip!, {d5}
 8008a8a:	ed3e 6b02 	vldmdb	lr!, {d6}
 8008a8e:	3401      	adds	r4, #1
 8008a90:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008a94:	e7f1      	b.n	8008a7a <__kernel_rem_pio2+0x2ca>
 8008a96:	bf00      	nop
	...
 8008aa4:	3e700000 	.word	0x3e700000
 8008aa8:	00000000 	.word	0x00000000
 8008aac:	41700000 	.word	0x41700000
 8008ab0:	08009088 	.word	0x08009088
 8008ab4:	08009048 	.word	0x08009048
 8008ab8:	4268      	negs	r0, r5
 8008aba:	eeb0 0b48 	vmov.f64	d0, d8
 8008abe:	f000 f8f3 	bl	8008ca8 <scalbn>
 8008ac2:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8008c90 <__kernel_rem_pio2+0x4e0>
 8008ac6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8008aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ace:	db17      	blt.n	8008b00 <__kernel_rem_pio2+0x350>
 8008ad0:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8008c98 <__kernel_rem_pio2+0x4e8>
 8008ad4:	ee20 7b07 	vmul.f64	d7, d0, d7
 8008ad8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8008adc:	aa06      	add	r2, sp, #24
 8008ade:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8008ae2:	eea5 0b46 	vfms.f64	d0, d5, d6
 8008ae6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008aea:	3518      	adds	r5, #24
 8008aec:	ee10 3a10 	vmov	r3, s0
 8008af0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008af4:	ee17 3a10 	vmov	r3, s14
 8008af8:	3401      	adds	r4, #1
 8008afa:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008afe:	e74d      	b.n	800899c <__kernel_rem_pio2+0x1ec>
 8008b00:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008b04:	aa06      	add	r2, sp, #24
 8008b06:	ee10 3a10 	vmov	r3, s0
 8008b0a:	e7f6      	b.n	8008afa <__kernel_rem_pio2+0x34a>
 8008b0c:	a806      	add	r0, sp, #24
 8008b0e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8008b12:	9001      	str	r0, [sp, #4]
 8008b14:	ee07 0a90 	vmov	s15, r0
 8008b18:	3a01      	subs	r2, #1
 8008b1a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008b1e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8008b22:	ee20 0b06 	vmul.f64	d0, d0, d6
 8008b26:	ed21 7b02 	vstmdb	r1!, {d7}
 8008b2a:	e744      	b.n	80089b6 <__kernel_rem_pio2+0x206>
 8008b2c:	ecbc 5b02 	vldmia	ip!, {d5}
 8008b30:	ecb5 6b02 	vldmia	r5!, {d6}
 8008b34:	3001      	adds	r0, #1
 8008b36:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008b3a:	4548      	cmp	r0, r9
 8008b3c:	dc01      	bgt.n	8008b42 <__kernel_rem_pio2+0x392>
 8008b3e:	4281      	cmp	r1, r0
 8008b40:	daf4      	bge.n	8008b2c <__kernel_rem_pio2+0x37c>
 8008b42:	a842      	add	r0, sp, #264	@ 0x108
 8008b44:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8008b48:	ed81 7b00 	vstr	d7, [r1]
 8008b4c:	3a01      	subs	r2, #1
 8008b4e:	e736      	b.n	80089be <__kernel_rem_pio2+0x20e>
 8008b50:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8008b52:	2a02      	cmp	r2, #2
 8008b54:	dc0a      	bgt.n	8008b6c <__kernel_rem_pio2+0x3bc>
 8008b56:	2a00      	cmp	r2, #0
 8008b58:	dc2d      	bgt.n	8008bb6 <__kernel_rem_pio2+0x406>
 8008b5a:	d046      	beq.n	8008bea <__kernel_rem_pio2+0x43a>
 8008b5c:	f008 0007 	and.w	r0, r8, #7
 8008b60:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 8008b64:	ecbd 8b06 	vpop	{d8-d10}
 8008b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b6c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8008b6e:	2a03      	cmp	r2, #3
 8008b70:	d1f4      	bne.n	8008b5c <__kernel_rem_pio2+0x3ac>
 8008b72:	a942      	add	r1, sp, #264	@ 0x108
 8008b74:	f1a3 0208 	sub.w	r2, r3, #8
 8008b78:	440a      	add	r2, r1
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	f1a1 0108 	sub.w	r1, r1, #8
 8008b84:	dc52      	bgt.n	8008c2c <__kernel_rem_pio2+0x47c>
 8008b86:	4621      	mov	r1, r4
 8008b88:	2901      	cmp	r1, #1
 8008b8a:	f1a2 0208 	sub.w	r2, r2, #8
 8008b8e:	dc5d      	bgt.n	8008c4c <__kernel_rem_pio2+0x49c>
 8008b90:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8008ca0 <__kernel_rem_pio2+0x4f0>
 8008b94:	aa42      	add	r2, sp, #264	@ 0x108
 8008b96:	4413      	add	r3, r2
 8008b98:	2c01      	cmp	r4, #1
 8008b9a:	dc67      	bgt.n	8008c6c <__kernel_rem_pio2+0x4bc>
 8008b9c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8008ba0:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8008ba4:	2e00      	cmp	r6, #0
 8008ba6:	d167      	bne.n	8008c78 <__kernel_rem_pio2+0x4c8>
 8008ba8:	ed87 5b00 	vstr	d5, [r7]
 8008bac:	ed87 6b02 	vstr	d6, [r7, #8]
 8008bb0:	ed87 7b04 	vstr	d7, [r7, #16]
 8008bb4:	e7d2      	b.n	8008b5c <__kernel_rem_pio2+0x3ac>
 8008bb6:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8008ca0 <__kernel_rem_pio2+0x4f0>
 8008bba:	aa42      	add	r2, sp, #264	@ 0x108
 8008bbc:	4413      	add	r3, r2
 8008bbe:	4622      	mov	r2, r4
 8008bc0:	2a00      	cmp	r2, #0
 8008bc2:	da24      	bge.n	8008c0e <__kernel_rem_pio2+0x45e>
 8008bc4:	b34e      	cbz	r6, 8008c1a <__kernel_rem_pio2+0x46a>
 8008bc6:	eeb1 7b46 	vneg.f64	d7, d6
 8008bca:	ed87 7b00 	vstr	d7, [r7]
 8008bce:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8008bd2:	aa44      	add	r2, sp, #272	@ 0x110
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008bda:	429c      	cmp	r4, r3
 8008bdc:	da20      	bge.n	8008c20 <__kernel_rem_pio2+0x470>
 8008bde:	b10e      	cbz	r6, 8008be4 <__kernel_rem_pio2+0x434>
 8008be0:	eeb1 7b47 	vneg.f64	d7, d7
 8008be4:	ed87 7b02 	vstr	d7, [r7, #8]
 8008be8:	e7b8      	b.n	8008b5c <__kernel_rem_pio2+0x3ac>
 8008bea:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8008ca0 <__kernel_rem_pio2+0x4f0>
 8008bee:	aa42      	add	r2, sp, #264	@ 0x108
 8008bf0:	4413      	add	r3, r2
 8008bf2:	2c00      	cmp	r4, #0
 8008bf4:	da05      	bge.n	8008c02 <__kernel_rem_pio2+0x452>
 8008bf6:	b10e      	cbz	r6, 8008bfc <__kernel_rem_pio2+0x44c>
 8008bf8:	eeb1 7b47 	vneg.f64	d7, d7
 8008bfc:	ed87 7b00 	vstr	d7, [r7]
 8008c00:	e7ac      	b.n	8008b5c <__kernel_rem_pio2+0x3ac>
 8008c02:	ed33 6b02 	vldmdb	r3!, {d6}
 8008c06:	3c01      	subs	r4, #1
 8008c08:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008c0c:	e7f1      	b.n	8008bf2 <__kernel_rem_pio2+0x442>
 8008c0e:	ed33 7b02 	vldmdb	r3!, {d7}
 8008c12:	3a01      	subs	r2, #1
 8008c14:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008c18:	e7d2      	b.n	8008bc0 <__kernel_rem_pio2+0x410>
 8008c1a:	eeb0 7b46 	vmov.f64	d7, d6
 8008c1e:	e7d4      	b.n	8008bca <__kernel_rem_pio2+0x41a>
 8008c20:	ecb2 6b02 	vldmia	r2!, {d6}
 8008c24:	3301      	adds	r3, #1
 8008c26:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008c2a:	e7d6      	b.n	8008bda <__kernel_rem_pio2+0x42a>
 8008c2c:	ed91 7b00 	vldr	d7, [r1]
 8008c30:	ed91 5b02 	vldr	d5, [r1, #8]
 8008c34:	3801      	subs	r0, #1
 8008c36:	ee37 6b05 	vadd.f64	d6, d7, d5
 8008c3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008c3e:	ed81 6b00 	vstr	d6, [r1]
 8008c42:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008c46:	ed81 7b02 	vstr	d7, [r1, #8]
 8008c4a:	e798      	b.n	8008b7e <__kernel_rem_pio2+0x3ce>
 8008c4c:	ed92 7b00 	vldr	d7, [r2]
 8008c50:	ed92 5b02 	vldr	d5, [r2, #8]
 8008c54:	3901      	subs	r1, #1
 8008c56:	ee37 6b05 	vadd.f64	d6, d7, d5
 8008c5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008c5e:	ed82 6b00 	vstr	d6, [r2]
 8008c62:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008c66:	ed82 7b02 	vstr	d7, [r2, #8]
 8008c6a:	e78d      	b.n	8008b88 <__kernel_rem_pio2+0x3d8>
 8008c6c:	ed33 6b02 	vldmdb	r3!, {d6}
 8008c70:	3c01      	subs	r4, #1
 8008c72:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008c76:	e78f      	b.n	8008b98 <__kernel_rem_pio2+0x3e8>
 8008c78:	eeb1 5b45 	vneg.f64	d5, d5
 8008c7c:	eeb1 6b46 	vneg.f64	d6, d6
 8008c80:	ed87 5b00 	vstr	d5, [r7]
 8008c84:	eeb1 7b47 	vneg.f64	d7, d7
 8008c88:	ed87 6b02 	vstr	d6, [r7, #8]
 8008c8c:	e790      	b.n	8008bb0 <__kernel_rem_pio2+0x400>
 8008c8e:	bf00      	nop
 8008c90:	00000000 	.word	0x00000000
 8008c94:	41700000 	.word	0x41700000
 8008c98:	00000000 	.word	0x00000000
 8008c9c:	3e700000 	.word	0x3e700000
	...

08008ca8 <scalbn>:
 8008ca8:	ee10 1a90 	vmov	r1, s1
 8008cac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008cb0:	b98b      	cbnz	r3, 8008cd6 <scalbn+0x2e>
 8008cb2:	ee10 3a10 	vmov	r3, s0
 8008cb6:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008cba:	4319      	orrs	r1, r3
 8008cbc:	d00a      	beq.n	8008cd4 <scalbn+0x2c>
 8008cbe:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8008d70 <scalbn+0xc8>
 8008cc2:	4b37      	ldr	r3, [pc, #220]	@ (8008da0 <scalbn+0xf8>)
 8008cc4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008cc8:	4298      	cmp	r0, r3
 8008cca:	da0b      	bge.n	8008ce4 <scalbn+0x3c>
 8008ccc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8008d78 <scalbn+0xd0>
 8008cd0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008cd4:	4770      	bx	lr
 8008cd6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d107      	bne.n	8008cee <scalbn+0x46>
 8008cde:	ee30 0b00 	vadd.f64	d0, d0, d0
 8008ce2:	4770      	bx	lr
 8008ce4:	ee10 1a90 	vmov	r1, s1
 8008ce8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008cec:	3b36      	subs	r3, #54	@ 0x36
 8008cee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008cf2:	4290      	cmp	r0, r2
 8008cf4:	dd0d      	ble.n	8008d12 <scalbn+0x6a>
 8008cf6:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8008d80 <scalbn+0xd8>
 8008cfa:	ee10 3a90 	vmov	r3, s1
 8008cfe:	eeb0 6b47 	vmov.f64	d6, d7
 8008d02:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8008d88 <scalbn+0xe0>
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	fe27 7b05 	vselge.f64	d7, d7, d5
 8008d0c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8008d10:	4770      	bx	lr
 8008d12:	4418      	add	r0, r3
 8008d14:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8008d18:	4298      	cmp	r0, r3
 8008d1a:	dcec      	bgt.n	8008cf6 <scalbn+0x4e>
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	dd0a      	ble.n	8008d36 <scalbn+0x8e>
 8008d20:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8008d24:	ec53 2b10 	vmov	r2, r3, d0
 8008d28:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8008d2c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8008d30:	ec43 2b10 	vmov	d0, r2, r3
 8008d34:	4770      	bx	lr
 8008d36:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 8008d3a:	da09      	bge.n	8008d50 <scalbn+0xa8>
 8008d3c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8008d78 <scalbn+0xd0>
 8008d40:	ee10 3a90 	vmov	r3, s1
 8008d44:	eeb0 6b47 	vmov.f64	d6, d7
 8008d48:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8008d90 <scalbn+0xe8>
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	e7db      	b.n	8008d08 <scalbn+0x60>
 8008d50:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8008d54:	ec53 2b10 	vmov	r2, r3, d0
 8008d58:	3036      	adds	r0, #54	@ 0x36
 8008d5a:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8008d5e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8008d62:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8008d98 <scalbn+0xf0>
 8008d66:	ec43 2b10 	vmov	d0, r2, r3
 8008d6a:	e7b1      	b.n	8008cd0 <scalbn+0x28>
 8008d6c:	f3af 8000 	nop.w
 8008d70:	00000000 	.word	0x00000000
 8008d74:	43500000 	.word	0x43500000
 8008d78:	c2f8f359 	.word	0xc2f8f359
 8008d7c:	01a56e1f 	.word	0x01a56e1f
 8008d80:	8800759c 	.word	0x8800759c
 8008d84:	7e37e43c 	.word	0x7e37e43c
 8008d88:	8800759c 	.word	0x8800759c
 8008d8c:	fe37e43c 	.word	0xfe37e43c
 8008d90:	c2f8f359 	.word	0xc2f8f359
 8008d94:	81a56e1f 	.word	0x81a56e1f
 8008d98:	00000000 	.word	0x00000000
 8008d9c:	3c900000 	.word	0x3c900000
 8008da0:	ffff3cb0 	.word	0xffff3cb0
 8008da4:	00000000 	.word	0x00000000

08008da8 <floor>:
 8008da8:	ee10 3a90 	vmov	r3, s1
 8008dac:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8008db0:	ee10 2a10 	vmov	r2, s0
 8008db4:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8008db8:	2913      	cmp	r1, #19
 8008dba:	b530      	push	{r4, r5, lr}
 8008dbc:	4615      	mov	r5, r2
 8008dbe:	dc33      	bgt.n	8008e28 <floor+0x80>
 8008dc0:	2900      	cmp	r1, #0
 8008dc2:	da18      	bge.n	8008df6 <floor+0x4e>
 8008dc4:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8008e88 <floor+0xe0>
 8008dc8:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008dcc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd4:	dd0a      	ble.n	8008dec <floor+0x44>
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	da50      	bge.n	8008e7c <floor+0xd4>
 8008dda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008dde:	4313      	orrs	r3, r2
 8008de0:	2200      	movs	r2, #0
 8008de2:	4293      	cmp	r3, r2
 8008de4:	4b2a      	ldr	r3, [pc, #168]	@ (8008e90 <floor+0xe8>)
 8008de6:	bf08      	it	eq
 8008de8:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8008dec:	4619      	mov	r1, r3
 8008dee:	4610      	mov	r0, r2
 8008df0:	ec41 0b10 	vmov	d0, r0, r1
 8008df4:	e01f      	b.n	8008e36 <floor+0x8e>
 8008df6:	4827      	ldr	r0, [pc, #156]	@ (8008e94 <floor+0xec>)
 8008df8:	4108      	asrs	r0, r1
 8008dfa:	ea03 0400 	and.w	r4, r3, r0
 8008dfe:	4314      	orrs	r4, r2
 8008e00:	d019      	beq.n	8008e36 <floor+0x8e>
 8008e02:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008e88 <floor+0xe0>
 8008e06:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008e0a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e12:	ddeb      	ble.n	8008dec <floor+0x44>
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	bfbe      	ittt	lt
 8008e18:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8008e1c:	410a      	asrlt	r2, r1
 8008e1e:	189b      	addlt	r3, r3, r2
 8008e20:	ea23 0300 	bic.w	r3, r3, r0
 8008e24:	2200      	movs	r2, #0
 8008e26:	e7e1      	b.n	8008dec <floor+0x44>
 8008e28:	2933      	cmp	r1, #51	@ 0x33
 8008e2a:	dd05      	ble.n	8008e38 <floor+0x90>
 8008e2c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008e30:	d101      	bne.n	8008e36 <floor+0x8e>
 8008e32:	ee30 0b00 	vadd.f64	d0, d0, d0
 8008e36:	bd30      	pop	{r4, r5, pc}
 8008e38:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8008e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e40:	40e0      	lsrs	r0, r4
 8008e42:	4210      	tst	r0, r2
 8008e44:	d0f7      	beq.n	8008e36 <floor+0x8e>
 8008e46:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8008e88 <floor+0xe0>
 8008e4a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008e4e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e56:	ddc9      	ble.n	8008dec <floor+0x44>
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	da02      	bge.n	8008e62 <floor+0xba>
 8008e5c:	2914      	cmp	r1, #20
 8008e5e:	d103      	bne.n	8008e68 <floor+0xc0>
 8008e60:	3301      	adds	r3, #1
 8008e62:	ea22 0200 	bic.w	r2, r2, r0
 8008e66:	e7c1      	b.n	8008dec <floor+0x44>
 8008e68:	2401      	movs	r4, #1
 8008e6a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8008e6e:	fa04 f101 	lsl.w	r1, r4, r1
 8008e72:	440a      	add	r2, r1
 8008e74:	42aa      	cmp	r2, r5
 8008e76:	bf38      	it	cc
 8008e78:	191b      	addcc	r3, r3, r4
 8008e7a:	e7f2      	b.n	8008e62 <floor+0xba>
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	4613      	mov	r3, r2
 8008e80:	e7b4      	b.n	8008dec <floor+0x44>
 8008e82:	bf00      	nop
 8008e84:	f3af 8000 	nop.w
 8008e88:	8800759c 	.word	0x8800759c
 8008e8c:	7e37e43c 	.word	0x7e37e43c
 8008e90:	bff00000 	.word	0xbff00000
 8008e94:	000fffff 	.word	0x000fffff

08008e98 <_init>:
 8008e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9a:	bf00      	nop
 8008e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e9e:	bc08      	pop	{r3}
 8008ea0:	469e      	mov	lr, r3
 8008ea2:	4770      	bx	lr

08008ea4 <_fini>:
 8008ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea6:	bf00      	nop
 8008ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eaa:	bc08      	pop	{r3}
 8008eac:	469e      	mov	lr, r3
 8008eae:	4770      	bx	lr
